import {
  ListBase,
  Sortable,
  cssClass,
  moveTo
} from "./chunk-ESDGPFSH.js";
import {
  FormValidator,
  Input,
  NumericTextBox,
  TextBox
} from "./chunk-SCEQET5H.js";
import {
  ComplexBase,
  ComponentBase,
  Inject,
  applyMixins
} from "./chunk-FRFQHC7U.js";
import "./chunk-QQXVNJFE.js";
import {
  require_react
} from "./chunk-ZOIWZPCO.js";
import {
  Ajax,
  Animation,
  Browser,
  ChildProperty,
  Collection,
  Complex,
  Component,
  Draggable,
  Droppable,
  Event,
  EventHandler,
  KeyboardEvents,
  L10n,
  NotifyPropertyChanges,
  Observer,
  Property,
  SanitizeHtmlHelper,
  Touch,
  addClass,
  append,
  attributes,
  classList,
  closest,
  compile,
  createElement,
  createInstance,
  debounce,
  deleteObject,
  detach,
  extend,
  formatUnit,
  getComponent,
  getElement,
  getInstance,
  getRandomId,
  getUniqueID,
  getValue,
  initializeCSPTemplate,
  isBlazor,
  isNullOrUndefined,
  isRippleEnabled,
  isUndefined,
  isVisible,
  matches,
  merge,
  prepend,
  remove,
  removeClass,
  rippleEffect,
  select,
  selectAll,
  setStyleAttribute,
  setValue
} from "./chunk-I2N4YRAY.js";
import {
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/@syncfusion/ej2-react-kanban/src/kanban/columns-directive.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ColumnDirective = (
  /** @class */
  function(_super) {
    __extends(ColumnDirective2, _super);
    function ColumnDirective2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnDirective2.moduleName = "column";
    return ColumnDirective2;
  }(ComplexBase)
);
var ColumnsDirective = (
  /** @class */
  function(_super) {
    __extends(ColumnsDirective2, _super);
    function ColumnsDirective2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnsDirective2.propertyName = "columns";
    ColumnsDirective2.moduleName = "columns";
    return ColumnsDirective2;
  }(ComplexBase)
);

// node_modules/@syncfusion/ej2-react-kanban/src/kanban/stackedheaders-directive.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var StackedHeaderDirective = (
  /** @class */
  function(_super) {
    __extends2(StackedHeaderDirective2, _super);
    function StackedHeaderDirective2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    StackedHeaderDirective2.moduleName = "stackedHeader";
    return StackedHeaderDirective2;
  }(ComplexBase)
);
var StackedHeadersDirective = (
  /** @class */
  function(_super) {
    __extends2(StackedHeadersDirective2, _super);
    function StackedHeadersDirective2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    StackedHeadersDirective2.propertyName = "stackedHeaders";
    StackedHeadersDirective2.moduleName = "stackedHeaders";
    return StackedHeadersDirective2;
  }(ComplexBase)
);

// node_modules/@syncfusion/ej2-react-kanban/src/kanban/kanban.component.js
var React = __toESM(require_react());

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-popups/src/common/position.js
var elementRect;
var popupRect;
var element;
var parentDocument;
var fixedParent = false;
function calculateRelativeBasedPosition(anchor, element2) {
  var fixedElement = false;
  var anchorPos = { left: 0, top: 0 };
  var tempAnchor = anchor;
  if (!anchor || !element2) {
    return anchorPos;
  }
  if (isNullOrUndefined(element2.offsetParent) && element2.style.position === "fixed") {
    fixedElement = true;
  }
  while ((element2.offsetParent || fixedElement) && anchor && element2.offsetParent !== anchor) {
    anchorPos.left += anchor.offsetLeft;
    anchorPos.top += anchor.offsetTop;
    anchor = anchor.offsetParent;
  }
  anchor = tempAnchor;
  while ((element2.offsetParent || fixedElement) && anchor && element2.offsetParent !== anchor) {
    anchorPos.left -= anchor.scrollLeft;
    anchorPos.top -= anchor.scrollTop;
    anchor = anchor.parentElement;
  }
  return anchorPos;
}
function calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {
  popupRect = void 0;
  popupRect = targetValues;
  fixedParent = parentElement ? true : false;
  if (!currentElement) {
    return { left: 0, top: 0 };
  }
  if (!positionX) {
    positionX = "left";
  }
  if (!positionY) {
    positionY = "top";
  }
  parentDocument = currentElement.ownerDocument;
  element = currentElement;
  var pos = { left: 0, top: 0 };
  return updatePosition(positionX.toLowerCase(), positionY.toLowerCase(), pos);
}
function setPosx(value, pos) {
  pos.left = value;
}
function setPosy(value, pos) {
  pos.top = value;
}
function updatePosition(posX, posY, pos) {
  elementRect = element.getBoundingClientRect();
  switch (posY + posX) {
    case "topcenter":
      setPosx(getElementHCenter(), pos);
      setPosy(getElementTop(), pos);
      break;
    case "topright":
      setPosx(getElementRight(), pos);
      setPosy(getElementTop(), pos);
      break;
    case "centercenter":
      setPosx(getElementHCenter(), pos);
      setPosy(getElementVCenter(), pos);
      break;
    case "centerright":
      setPosx(getElementRight(), pos);
      setPosy(getElementVCenter(), pos);
      break;
    case "centerleft":
      setPosx(getElementLeft(), pos);
      setPosy(getElementVCenter(), pos);
      break;
    case "bottomcenter":
      setPosx(getElementHCenter(), pos);
      setPosy(getElementBottom(), pos);
      break;
    case "bottomright":
      setPosx(getElementRight(), pos);
      setPosy(getElementBottom(), pos);
      break;
    case "bottomleft":
      setPosx(getElementLeft(), pos);
      setPosy(getElementBottom(), pos);
      break;
    default:
    case "topleft":
      setPosx(getElementLeft(), pos);
      setPosy(getElementTop(), pos);
      break;
  }
  element = null;
  return pos;
}
function getBodyScrollTop() {
  return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;
}
function getBodyScrollLeft() {
  return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;
}
function getElementBottom() {
  return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();
}
function getElementVCenter() {
  return getElementTop() + elementRect.height / 2;
}
function getElementTop() {
  return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();
}
function getElementLeft() {
  return elementRect.left + getBodyScrollLeft();
}
function getElementRight() {
  var popupWidth = element && element.classList.contains("e-date-range-wrapper") ? popupRect ? popupRect.width : 0 : popupRect && elementRect.width >= popupRect.width ? popupRect.width : 0;
  return elementRect.right + getBodyScrollLeft() - popupWidth;
}
function getElementHCenter() {
  return getElementLeft() + elementRect.width / 2;
}

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-popups/src/common/collision.js
var parentDocument2;
var targetContainer;
function fit(element2, viewPortElement, axis, position) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }
  if (axis === void 0) {
    axis = { X: false, Y: false };
  }
  if (!axis.Y && !axis.X) {
    return { left: 0, top: 0 };
  }
  var elemData = element2.getBoundingClientRect();
  targetContainer = viewPortElement;
  parentDocument2 = element2.ownerDocument;
  if (!position) {
    position = calculatePosition(element2, "left", "top");
  }
  if (axis.X) {
    var containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth();
    var containerLeft = ContainerLeft();
    var containerRight = ContainerRight();
    var overLeft = containerLeft - position.left;
    var overRight = position.left + elemData.width - containerRight;
    if (elemData.width > containerWidth) {
      if (overLeft > 0 && overRight <= 0) {
        position.left = containerRight - elemData.width;
      } else if (overRight > 0 && overLeft <= 0) {
        position.left = containerLeft;
      } else {
        position.left = overLeft > overRight ? containerRight - elemData.width : containerLeft;
      }
    } else if (overLeft > 0) {
      position.left += overLeft;
    } else if (overRight > 0) {
      position.left -= overRight;
    }
  }
  if (axis.Y) {
    var containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight();
    var containerTop = ContainerTop();
    var containerBottom = ContainerBottom();
    var overTop = containerTop - position.top;
    var overBottom = position.top + elemData.height - containerBottom;
    if (elemData.height > containerHeight) {
      if (overTop > 0 && overBottom <= 0) {
        position.top = containerBottom - elemData.height;
      } else if (overBottom > 0 && overTop <= 0) {
        position.top = containerTop;
      } else {
        position.top = overTop > overBottom ? containerBottom - elemData.height : containerTop;
      }
    } else if (overTop > 0) {
      position.top += overTop;
    } else if (overBottom > 0) {
      position.top -= overBottom;
    }
  }
  return position;
}
function isCollide(element2, viewPortElement, x, y) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }
  var elemOffset = calculatePosition(element2, "left", "top");
  if (x) {
    elemOffset.left = x;
  }
  if (y) {
    elemOffset.top = y;
  }
  var data = [];
  targetContainer = viewPortElement;
  parentDocument2 = element2.ownerDocument;
  var elementRect2 = element2.getBoundingClientRect();
  var top = elemOffset.top;
  var left = elemOffset.left;
  var right = elemOffset.left + elementRect2.width;
  var bottom = elemOffset.top + elementRect2.height;
  var topData = "", leftData = "";
  var yAxis = topCollideCheck(top, bottom);
  var xAxis = leftCollideCheck(left, right);
  if (yAxis.topSide) {
    data.push("top");
  }
  if (xAxis.rightSide) {
    data.push("right");
  }
  if (xAxis.leftSide) {
    data.push("left");
  }
  if (yAxis.bottomSide) {
    data.push("bottom");
  }
  return data;
}
function flip(element2, target, offsetX, offsetY, positionX, positionY, viewPortElement, axis, fixedParent2) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }
  if (axis === void 0) {
    axis = { X: true, Y: true };
  }
  if (!target || !element2 || !positionX || !positionY || !axis.X && !axis.Y) {
    return;
  }
  var tEdge = {
    TL: null,
    TR: null,
    BL: null,
    BR: null
  }, eEdge = {
    TL: null,
    TR: null,
    BL: null,
    BR: null
    /* eslint-enable */
  };
  var elementRect2;
  if (window.getComputedStyle(element2).display === "none") {
    var oldVisibility = element2.style.visibility;
    element2.style.visibility = "hidden";
    element2.style.display = "block";
    elementRect2 = element2.getBoundingClientRect();
    element2.style.removeProperty("display");
    element2.style.visibility = oldVisibility;
  } else {
    elementRect2 = element2.getBoundingClientRect();
  }
  var pos = {
    posX: positionX,
    posY: positionY,
    offsetX,
    offsetY,
    position: { left: 0, top: 0 }
  };
  targetContainer = viewPortElement;
  parentDocument2 = target.ownerDocument;
  updateElementData(target, tEdge, pos, fixedParent2, elementRect2);
  setPosition(eEdge, pos, elementRect2);
  if (axis.X) {
    leftFlip(target, eEdge, tEdge, pos, elementRect2, true);
  }
  if (axis.Y && tEdge.TL.top > -1) {
    topFlip(target, eEdge, tEdge, pos, elementRect2, true);
  }
  setPopup(element2, pos, elementRect2);
}
function setPopup(element2, pos, elementRect2) {
  var left = 0, top = 0;
  if (element2.offsetParent != null && (getComputedStyle(element2.offsetParent).position === "absolute" || getComputedStyle(element2.offsetParent).position === "relative")) {
    var data = calculatePosition(element2.offsetParent, "left", "top", false, elementRect2);
    left = data.left;
    top = data.top;
  }
  element2.style.top = pos.position.top + pos.offsetY - top + "px";
  element2.style.left = pos.position.left + pos.offsetX - left + "px";
}
function updateElementData(target, edge, pos, fixedParent2, elementRect2) {
  pos.position = calculatePosition(target, pos.posX, pos.posY, fixedParent2, elementRect2);
  edge.TL = calculatePosition(target, "left", "top", fixedParent2, elementRect2);
  edge.TR = calculatePosition(target, "right", "top", fixedParent2, elementRect2);
  edge.BR = calculatePosition(target, "left", "bottom", fixedParent2, elementRect2);
  edge.BL = calculatePosition(target, "right", "bottom", fixedParent2, elementRect2);
}
function setPosition(eStatus, pos, elementRect2) {
  eStatus.TL = { top: pos.position.top + pos.offsetY, left: pos.position.left + pos.offsetX };
  eStatus.TR = { top: eStatus.TL.top, left: eStatus.TL.left + elementRect2.width };
  eStatus.BL = {
    top: eStatus.TL.top + elementRect2.height,
    left: eStatus.TL.left
  };
  eStatus.BR = {
    top: eStatus.TL.top + elementRect2.height,
    left: eStatus.TL.left + elementRect2.width
  };
}
function leftCollideCheck(left, right) {
  var leftSide = false, rightSide = false;
  if (left - getBodyScrollLeft2() < ContainerLeft()) {
    leftSide = true;
  }
  if (right > ContainerRight()) {
    rightSide = true;
  }
  return { leftSide, rightSide };
}
function leftFlip(target, edge, tEdge, pos, elementRect2, deepCheck) {
  var collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);
  if (tEdge.TL.left - getBodyScrollLeft2() <= ContainerLeft()) {
    collideSide.leftSide = false;
  }
  if (tEdge.TR.left > ContainerRight()) {
    collideSide.rightSide = false;
  }
  if (collideSide.leftSide && !collideSide.rightSide || !collideSide.leftSide && collideSide.rightSide) {
    if (pos.posX === "right") {
      pos.posX = "left";
    } else {
      pos.posX = "right";
    }
    pos.offsetX = pos.offsetX + elementRect2.width;
    pos.offsetX = -1 * pos.offsetX;
    pos.position = calculatePosition(target, pos.posX, pos.posY, false);
    setPosition(edge, pos, elementRect2);
    if (deepCheck) {
      leftFlip(target, edge, tEdge, pos, elementRect2, false);
    }
  }
}
function topFlip(target, edge, tEdge, pos, elementRect2, deepCheck) {
  var collideSide = topCollideCheck(edge.TL.top, edge.BL.top);
  if (tEdge.TL.top - getBodyScrollTop2() <= ContainerTop()) {
    collideSide.topSide = false;
  }
  if (tEdge.BL.top >= ContainerBottom() && target.getBoundingClientRect().bottom < window.innerHeight) {
    collideSide.bottomSide = false;
  }
  if (collideSide.topSide && !collideSide.bottomSide || !collideSide.topSide && collideSide.bottomSide) {
    if (pos.posY === "top") {
      pos.posY = "bottom";
    } else {
      pos.posY = "top";
    }
    pos.offsetY = pos.offsetY + elementRect2.height;
    pos.offsetY = -1 * pos.offsetY;
    pos.position = calculatePosition(target, pos.posX, pos.posY, false, elementRect2);
    setPosition(edge, pos, elementRect2);
    if (deepCheck) {
      topFlip(target, edge, tEdge, pos, elementRect2, false);
    }
  }
}
function topCollideCheck(top, bottom) {
  var topSide = false, bottomSide = false;
  if (top - getBodyScrollTop2() < ContainerTop()) {
    topSide = true;
  }
  if (bottom > ContainerBottom()) {
    bottomSide = true;
  }
  return { topSide, bottomSide };
}
function getTargetContainerWidth() {
  return targetContainer.getBoundingClientRect().width;
}
function getTargetContainerHeight() {
  return targetContainer.getBoundingClientRect().height;
}
function getTargetContainerLeft() {
  return targetContainer.getBoundingClientRect().left;
}
function getTargetContainerTop() {
  return targetContainer.getBoundingClientRect().top;
}
function ContainerTop() {
  if (targetContainer) {
    return getTargetContainerTop();
  }
  return 0;
}
function ContainerLeft() {
  if (targetContainer) {
    return getTargetContainerLeft();
  }
  return 0;
}
function ContainerRight() {
  if (targetContainer) {
    return getBodyScrollLeft2() + getTargetContainerLeft() + getTargetContainerWidth();
  }
  return getBodyScrollLeft2() + getViewPortWidth();
}
function ContainerBottom() {
  if (targetContainer) {
    return getBodyScrollTop2() + getTargetContainerTop() + getTargetContainerHeight();
  }
  return getBodyScrollTop2() + getViewPortHeight();
}
function getBodyScrollTop2() {
  return parentDocument2.documentElement.scrollTop || parentDocument2.body.scrollTop;
}
function getBodyScrollLeft2() {
  return parentDocument2.documentElement.scrollLeft || parentDocument2.body.scrollLeft;
}
function getViewPortHeight() {
  return window.innerHeight;
}
function getViewPortWidth() {
  var windowWidth = window.innerWidth;
  var documentReact = document.documentElement.getBoundingClientRect();
  var offsetWidth = isNullOrUndefined(document.documentElement) ? 0 : documentReact.width;
  return windowWidth - (windowWidth - offsetWidth);
}

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-popups/src/popup/popup.js
var __extends3 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PositionData = (
  /** @class */
  function(_super) {
    __extends3(PositionData2, _super);
    function PositionData2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
      Property("left")
    ], PositionData2.prototype, "X", void 0);
    __decorate([
      Property("top")
    ], PositionData2.prototype, "Y", void 0);
    return PositionData2;
  }(ChildProperty)
);
var CLASSNAMES = {
  ROOT: "e-popup",
  RTL: "e-rtl",
  OPEN: "e-popup-open",
  CLOSE: "e-popup-close"
};
var Popup = (
  /** @class */
  function(_super) {
    __extends3(Popup2, _super);
    function Popup2(element2, options) {
      return _super.call(this, options, element2) || this;
    }
    Popup2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            setStyleAttribute(this.element, { "width": formatUnit(newProp.width) });
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(newProp.height) });
            break;
          case "zIndex":
            setStyleAttribute(this.element, { "zIndex": newProp.zIndex });
            break;
          case "enableRtl":
            this.setEnableRtl();
            break;
          case "position":
          case "relateTo":
            this.refreshPosition();
            break;
          case "offsetX":
            var x = newProp.offsetX - oldProp.offsetX;
            this.element.style.left = (parseInt(this.element.style.left, 10) + x).toString() + "px";
            break;
          case "offsetY":
            var y = newProp.offsetY - oldProp.offsetY;
            this.element.style.top = (parseInt(this.element.style.top, 10) + y).toString() + "px";
            break;
          case "content":
            this.setContent();
            break;
          case "actionOnScroll":
            if (newProp.actionOnScroll !== "none") {
              this.wireScrollEvents();
            } else {
              this.unwireScrollEvents();
            }
            break;
        }
      }
    };
    Popup2.prototype.getModuleName = function() {
      return "popup";
    };
    Popup2.prototype.resolveCollision = function() {
      this.checkCollision();
    };
    Popup2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Popup2.prototype.destroy = function() {
      if (this.element.classList.contains("e-popup-open")) {
        this.unwireEvents();
      }
      this.element.classList.remove(CLASSNAMES.ROOT, CLASSNAMES.RTL, CLASSNAMES.OPEN, CLASSNAMES.CLOSE);
      this.content = null;
      this.relateTo = null;
      _super.prototype.destroy.call(this);
    };
    Popup2.prototype.render = function() {
      this.element.classList.add(CLASSNAMES.ROOT);
      var styles = {};
      if (this.zIndex !== 1e3) {
        styles.zIndex = this.zIndex;
      }
      if (this.width !== "auto") {
        styles.width = formatUnit(this.width);
      }
      if (this.height !== "auto") {
        styles.height = formatUnit(this.height);
      }
      setStyleAttribute(this.element, styles);
      this.fixedParent = false;
      this.setEnableRtl();
      this.setContent();
    };
    Popup2.prototype.wireEvents = function() {
      if (Browser.isDevice) {
        EventHandler.add(window, "orientationchange", this.orientationOnChange, this);
      }
      if (this.actionOnScroll !== "none") {
        this.wireScrollEvents();
      }
    };
    Popup2.prototype.wireScrollEvents = function() {
      if (this.getRelateToElement()) {
        for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
          var parent_1 = _a[_i];
          EventHandler.add(parent_1, "scroll", this.scrollRefresh, this);
        }
      }
    };
    Popup2.prototype.unwireEvents = function() {
      if (Browser.isDevice) {
        EventHandler.remove(window, "orientationchange", this.orientationOnChange);
      }
      if (this.actionOnScroll !== "none") {
        this.unwireScrollEvents();
      }
    };
    Popup2.prototype.unwireScrollEvents = function() {
      if (this.getRelateToElement()) {
        for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
          var parent_2 = _a[_i];
          EventHandler.remove(parent_2, "scroll", this.scrollRefresh);
        }
      }
    };
    Popup2.prototype.getRelateToElement = function() {
      var relateToElement = this.relateTo === "" || isNullOrUndefined(this.relateTo) ? document.body : this.relateTo;
      this.setProperties({ relateTo: relateToElement }, true);
      return typeof this.relateTo === "string" ? document.querySelector(this.relateTo) : this.relateTo;
    };
    Popup2.prototype.scrollRefresh = function(e) {
      if (this.actionOnScroll === "reposition") {
        if (!isNullOrUndefined(this.element) && !(this.element.offsetParent === e.target || this.element.offsetParent && this.element.offsetParent.tagName === "BODY" && e.target.parentElement == null)) {
          this.refreshPosition();
        }
      } else if (this.actionOnScroll === "hide") {
        this.hide();
      }
      if (this.actionOnScroll !== "none") {
        if (this.getRelateToElement()) {
          var targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);
          if (!targetVisible && !this.targetInvisibleStatus) {
            this.trigger("targetExitViewport");
            this.targetInvisibleStatus = true;
          } else if (targetVisible) {
            this.targetInvisibleStatus = false;
          }
        }
      }
    };
    Popup2.prototype.isElementOnViewport = function(relateToElement, scrollElement) {
      var scrollParents = this.getScrollableParent(relateToElement);
      for (var parent_3 = 0; parent_3 < scrollParents.length; parent_3++) {
        if (this.isElementVisible(relateToElement, scrollParents[parent_3])) {
          continue;
        } else {
          return false;
        }
      }
      return true;
    };
    Popup2.prototype.isElementVisible = function(relateToElement, scrollElement) {
      var rect = this.checkGetBoundingClientRect(relateToElement);
      if (!rect.height || !rect.width) {
        return false;
      }
      if (!isNullOrUndefined(this.checkGetBoundingClientRect(scrollElement))) {
        var parent_4 = scrollElement.getBoundingClientRect();
        return !(rect.bottom < parent_4.top) && (!(rect.bottom > parent_4.bottom) && (!(rect.right > parent_4.right) && !(rect.left < parent_4.left)));
      } else {
        var win = window;
        var windowView = {
          top: win.scrollY,
          left: win.scrollX,
          right: win.scrollX + win.outerWidth,
          bottom: win.scrollY + win.outerHeight
        };
        var off = calculatePosition(relateToElement);
        var ele = {
          top: off.top,
          left: off.left,
          right: off.left + rect.width,
          bottom: off.top + rect.height
        };
        var elementView = {
          top: windowView.bottom - ele.top,
          left: windowView.right - ele.left,
          bottom: ele.bottom - windowView.top,
          right: ele.right - windowView.left
        };
        return elementView.top > 0 && elementView.left > 0 && elementView.right > 0 && elementView.bottom > 0;
      }
    };
    Popup2.prototype.preRender = function() {
    };
    Popup2.prototype.setEnableRtl = function() {
      this.reposition();
      this.enableRtl ? this.element.classList.add(CLASSNAMES.RTL) : this.element.classList.remove(CLASSNAMES.RTL);
    };
    Popup2.prototype.setContent = function() {
      if (!isNullOrUndefined(this.content)) {
        this.element.innerHTML = "";
        if (typeof this.content === "string") {
          this.element.textContent = this.content;
        } else {
          var relateToElem = this.getRelateToElement();
          var props = this.content.props;
          if (!relateToElem.classList.contains("e-dropdown-btn") || isNullOrUndefined(props)) {
            this.element.appendChild(this.content);
          }
        }
      }
    };
    Popup2.prototype.orientationOnChange = function() {
      var _this = this;
      setTimeout(function() {
        _this.refreshPosition();
      }, 200);
    };
    Popup2.prototype.refreshPosition = function(target, collision) {
      if (!isNullOrUndefined(target)) {
        this.checkFixedParent(target);
      }
      this.reposition();
      if (!collision) {
        this.checkCollision();
      }
    };
    Popup2.prototype.reposition = function() {
      var pos;
      var position;
      var relateToElement = this.getRelateToElement();
      if (typeof this.position.X === "number" && typeof this.position.Y === "number") {
        pos = { left: this.position.X, top: this.position.Y };
      } else if (typeof this.position.X === "string" && typeof this.position.Y === "number" || typeof this.position.X === "number" && typeof this.position.Y === "string") {
        var parentDisplay = void 0;
        var display = this.element.style.display;
        this.element.style.display = "block";
        if (this.element.classList.contains("e-dlg-modal")) {
          parentDisplay = this.element.parentElement.style.display;
          this.element.parentElement.style.display = "block";
        }
        position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);
        if (typeof this.position.X === "string") {
          pos = { left: position.left, top: this.position.Y };
        } else {
          pos = { left: this.position.X, top: position.top };
        }
        this.element.style.display = display;
        if (this.element.classList.contains("e-dlg-modal")) {
          this.element.parentElement.style.display = parentDisplay;
        }
      } else if (relateToElement) {
        var display = this.element.style.display;
        this.element.style.display = "block";
        pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);
        this.element.style.display = display;
      } else {
        pos = { left: 0, top: 0 };
      }
      if (!isNullOrUndefined(pos)) {
        this.element.style.left = pos.left + "px";
        this.element.style.top = pos.top + "px";
      }
    };
    Popup2.prototype.checkGetBoundingClientRect = function(ele) {
      var eleRect;
      try {
        eleRect = ele.getBoundingClientRect();
        return eleRect;
      } catch (error) {
        return null;
      }
    };
    Popup2.prototype.getAnchorPosition = function(anchorEle, ele, position, offsetX, offsetY) {
      var eleRect = this.checkGetBoundingClientRect(ele);
      var anchorRect = this.checkGetBoundingClientRect(anchorEle);
      if (isNullOrUndefined(eleRect) || isNullOrUndefined(anchorRect)) {
        return null;
      }
      var anchor = anchorEle;
      var anchorPos = { left: 0, top: 0 };
      if (ele.offsetParent && ele.offsetParent.tagName === "BODY" && anchorEle.tagName === "BODY") {
        anchorPos = calculatePosition(anchorEle);
      } else {
        if (ele.classList.contains("e-dlg-modal") && anchor.tagName !== "BODY") {
          ele = ele.parentElement;
        }
        anchorPos = calculateRelativeBasedPosition(anchor, ele);
      }
      switch (position.X) {
        default:
        case "left":
          break;
        case "center":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.left += window.innerWidth / 2 - eleRect.width / 2;
          } else if (this.targetType === "container") {
            anchorPos.left += anchorRect.width / 2 - eleRect.width / 2;
          } else {
            anchorPos.left += anchorRect.width / 2;
          }
          break;
        case "right":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.left += window.innerWidth - eleRect.width;
          } else if (this.targetType === "container") {
            anchorPos.left += anchorRect.width - eleRect.width;
          } else {
            anchorPos.left += anchorRect.width;
          }
          break;
      }
      switch (position.Y) {
        default:
        case "top":
          break;
        case "center":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.top += window.innerHeight / 2 - eleRect.height / 2;
          } else if (this.targetType === "container") {
            anchorPos.top += anchorRect.height / 2 - eleRect.height / 2;
          } else {
            anchorPos.top += anchorRect.height / 2;
          }
          break;
        case "bottom":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.top += window.innerHeight - eleRect.height;
          } else if (this.targetType === "container") {
            anchorPos.top += anchorRect.height - eleRect.height;
          } else {
            anchorPos.top += anchorRect.height;
          }
          break;
      }
      anchorPos.left += offsetX;
      anchorPos.top += offsetY;
      return anchorPos;
    };
    Popup2.prototype.callFlip = function(param) {
      var relateToElement = this.getRelateToElement();
      flip(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);
    };
    Popup2.prototype.callFit = function(param) {
      if (isCollide(this.element, this.viewPortElement).length !== 0) {
        if (isNullOrUndefined(this.viewPortElement)) {
          var data = fit(this.element, this.viewPortElement, param);
          if (param.X) {
            this.element.style.left = data.left + "px";
          }
          if (param.Y) {
            this.element.style.top = data.top + "px";
          }
        } else {
          var elementRect2 = this.checkGetBoundingClientRect(this.element);
          var viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);
          if (isNullOrUndefined(elementRect2) || isNullOrUndefined(viewPortRect)) {
            return null;
          }
          if (param && param.Y === true) {
            if (viewPortRect.top > elementRect2.top) {
              this.element.style.top = "0px";
            } else if (viewPortRect.bottom < elementRect2.bottom) {
              this.element.style.top = parseInt(this.element.style.top, 10) - (elementRect2.bottom - viewPortRect.bottom) + "px";
            }
          }
          if (param && param.X === true) {
            if (viewPortRect.right < elementRect2.right) {
              this.element.style.left = parseInt(this.element.style.left, 10) - (elementRect2.right - viewPortRect.right) + "px";
            } else if (viewPortRect.left > elementRect2.left) {
              this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - elementRect2.left) + "px";
            }
          }
        }
      }
    };
    Popup2.prototype.checkCollision = function() {
      var horz = this.collision.X;
      var vert = this.collision.Y;
      if (horz === "none" && vert === "none") {
        return;
      }
      if (horz === "flip" && vert === "flip") {
        this.callFlip({ X: true, Y: true });
      } else if (horz === "fit" && vert === "fit") {
        this.callFit({ X: true, Y: true });
      } else {
        if (horz === "flip") {
          this.callFlip({ X: true, Y: false });
        } else if (vert === "flip") {
          this.callFlip({ Y: true, X: false });
        }
        if (horz === "fit") {
          this.callFit({ X: true, Y: false });
        } else if (vert === "fit") {
          this.callFit({ X: false, Y: true });
        }
      }
    };
    Popup2.prototype.show = function(animationOptions, relativeElement) {
      var _this = this;
      var relateToElement = this.getRelateToElement();
      if (relateToElement.classList.contains("e-filemanager")) {
        this.fmDialogContainer = this.element.getElementsByClassName("e-file-select-wrap")[0];
      }
      this.wireEvents();
      if (!isNullOrUndefined(this.fmDialogContainer) && Browser.isIos) {
        this.fmDialogContainer.style.display = "block";
      }
      if (this.zIndex === 1e3 || !isNullOrUndefined(relativeElement)) {
        var zIndexElement = isNullOrUndefined(relativeElement) ? this.element : relativeElement;
        this.zIndex = getZindexPartial(zIndexElement);
        setStyleAttribute(this.element, { "zIndex": this.zIndex });
      }
      animationOptions = !isNullOrUndefined(animationOptions) && typeof animationOptions === "object" ? animationOptions : this.showAnimation;
      if (this.collision.X !== "none" || this.collision.Y !== "none") {
        removeClass([this.element], CLASSNAMES.CLOSE);
        addClass([this.element], CLASSNAMES.OPEN);
        this.checkCollision();
        removeClass([this.element], CLASSNAMES.OPEN);
        addClass([this.element], CLASSNAMES.CLOSE);
      }
      if (!isNullOrUndefined(animationOptions)) {
        animationOptions.begin = function() {
          if (!_this.isDestroyed) {
            removeClass([_this.element], CLASSNAMES.CLOSE);
            addClass([_this.element], CLASSNAMES.OPEN);
          }
        };
        animationOptions.end = function() {
          if (!_this.isDestroyed) {
            _this.trigger("open");
          }
        };
        new Animation(animationOptions).animate(this.element);
      } else {
        removeClass([this.element], CLASSNAMES.CLOSE);
        addClass([this.element], CLASSNAMES.OPEN);
        this.trigger("open");
      }
    };
    Popup2.prototype.hide = function(animationOptions) {
      var _this = this;
      animationOptions = !isNullOrUndefined(animationOptions) && typeof animationOptions === "object" ? animationOptions : this.hideAnimation;
      if (!isNullOrUndefined(animationOptions)) {
        animationOptions.end = function() {
          if (!_this.isDestroyed) {
            removeClass([_this.element], CLASSNAMES.OPEN);
            addClass([_this.element], CLASSNAMES.CLOSE);
            _this.trigger("close");
          }
        };
        new Animation(animationOptions).animate(this.element);
      } else {
        removeClass([this.element], CLASSNAMES.OPEN);
        addClass([this.element], CLASSNAMES.CLOSE);
        this.trigger("close");
      }
      this.unwireEvents();
    };
    Popup2.prototype.getScrollableParent = function(element2) {
      this.checkFixedParent(element2);
      return getScrollableParent(element2, this.fixedParent);
    };
    Popup2.prototype.checkFixedParent = function(element2) {
      var parent = element2.parentElement;
      while (parent && parent.tagName !== "HTML") {
        var parentStyle = getComputedStyle(parent);
        if (parentStyle.position === "fixed" && !isNullOrUndefined(this.element) && this.element.offsetParent && this.element.offsetParent.tagName === "BODY" && getComputedStyle(this.element.offsetParent).overflow !== "hidden") {
          this.element.style.top = window.scrollY > parseInt(this.element.style.top, 10) ? formatUnit(window.scrollY - parseInt(this.element.style.top, 10)) : formatUnit(parseInt(this.element.style.top, 10) - window.scrollY);
          this.element.style.position = "fixed";
          this.fixedParent = true;
        }
        parent = parent.parentElement;
        if (!isNullOrUndefined(this.element) && isNullOrUndefined(this.element.offsetParent) && parentStyle.position === "fixed" && this.element.style.position === "fixed") {
          this.fixedParent = true;
        }
      }
    };
    __decorate([
      Property("auto")
    ], Popup2.prototype, "height", void 0);
    __decorate([
      Property("auto")
    ], Popup2.prototype, "width", void 0);
    __decorate([
      Property(null)
    ], Popup2.prototype, "content", void 0);
    __decorate([
      Property("container")
    ], Popup2.prototype, "targetType", void 0);
    __decorate([
      Property(null)
    ], Popup2.prototype, "viewPortElement", void 0);
    __decorate([
      Property({ X: "none", Y: "none" })
    ], Popup2.prototype, "collision", void 0);
    __decorate([
      Property("")
    ], Popup2.prototype, "relateTo", void 0);
    __decorate([
      Complex({}, PositionData)
    ], Popup2.prototype, "position", void 0);
    __decorate([
      Property(0)
    ], Popup2.prototype, "offsetX", void 0);
    __decorate([
      Property(0)
    ], Popup2.prototype, "offsetY", void 0);
    __decorate([
      Property(1e3)
    ], Popup2.prototype, "zIndex", void 0);
    __decorate([
      Property(false)
    ], Popup2.prototype, "enableRtl", void 0);
    __decorate([
      Property("reposition")
    ], Popup2.prototype, "actionOnScroll", void 0);
    __decorate([
      Property(null)
    ], Popup2.prototype, "showAnimation", void 0);
    __decorate([
      Property(null)
    ], Popup2.prototype, "hideAnimation", void 0);
    __decorate([
      Event()
    ], Popup2.prototype, "open", void 0);
    __decorate([
      Event()
    ], Popup2.prototype, "close", void 0);
    __decorate([
      Event()
    ], Popup2.prototype, "targetExitViewport", void 0);
    Popup2 = __decorate([
      NotifyPropertyChanges
    ], Popup2);
    return Popup2;
  }(Component)
);
function getScrollableParent(element2, fixedParent2) {
  var eleStyle = getComputedStyle(element2);
  var scrollParents = [];
  var overflowRegex = /(auto|scroll)/;
  var parent = element2.parentElement;
  while (parent && parent.tagName !== "HTML") {
    var parentStyle = getComputedStyle(parent);
    if (!(eleStyle.position === "absolute" && parentStyle.position === "static") && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX)) {
      scrollParents.push(parent);
    }
    parent = parent.parentElement;
  }
  if (!fixedParent2) {
    scrollParents.push(document);
  }
  return scrollParents;
}
function getZindexPartial(element2) {
  var parent = element2.parentElement;
  var parentZindex = [];
  while (parent) {
    if (parent.tagName !== "BODY") {
      var index = document.defaultView.getComputedStyle(parent, null).getPropertyValue("z-index");
      var position = document.defaultView.getComputedStyle(parent, null).getPropertyValue("position");
      if (index !== "auto" && position !== "static") {
        parentZindex.push(index);
      }
      parent = parent.parentElement;
    } else {
      break;
    }
  }
  var childrenZindex = [];
  for (var i = 0; i < document.body.children.length; i++) {
    if (!element2.isEqualNode(document.body.children[i])) {
      var index = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue("z-index");
      var position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue("position");
      if (index !== "auto" && position !== "static") {
        childrenZindex.push(index);
      }
    }
  }
  childrenZindex.push("999");
  var siblingsZindex = [];
  if (!isNullOrUndefined(element2.parentElement) && element2.parentElement.tagName !== "BODY") {
    var childNodes = [].slice.call(element2.parentElement.children);
    for (var i = 0; i < childNodes.length; i++) {
      if (!element2.isEqualNode(childNodes[i])) {
        var index = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue("z-index");
        var position = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue("position");
        if (index !== "auto" && position !== "static") {
          siblingsZindex.push(index);
        }
      }
    }
  }
  var finalValue = parentZindex.concat(childrenZindex, siblingsZindex);
  var currentZindexValue = Math.max.apply(Math, finalValue) + 1;
  return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
}

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-buttons/src/common/common.js
function wrapperInitialize(createElement3, tag, type, element2, WRAPPER4, role) {
  var input = element2;
  if (element2.tagName === tag) {
    var ejInstance = getValue("ej2_instances", element2);
    input = createElement3("input", { attrs: { "type": type } });
    var props = ["change", "cssClass", "label", "labelPosition", "id"];
    for (var index = 0, len = element2.attributes.length; index < len; index++) {
      if (props.indexOf(element2.attributes[index].nodeName) === -1) {
        input.setAttribute(element2.attributes[index].nodeName, element2.attributes[index].nodeValue);
      }
    }
    attributes(element2, { "class": WRAPPER4 });
    element2.appendChild(input);
    setValue("ej2_instances", ejInstance, input);
    deleteObject(element2, "ej2_instances");
  }
  return input;
}
function getTextNode(element2) {
  var node;
  var childnode = element2.childNodes;
  for (var i = 0; i < childnode.length; i++) {
    node = childnode[i];
    if (node.nodeType === 3) {
      return node;
    }
  }
  return null;
}
function destroy(ejInst, wrapper, tagName) {
  if (tagName === "INPUT") {
    wrapper.parentNode.insertBefore(ejInst.element, wrapper);
    detach(wrapper);
    ejInst.element.checked = false;
    ["name", "value", "disabled"].forEach(function(key) {
      ejInst.element.removeAttribute(key);
    });
  } else {
    ["role", "aria-checked", "class"].forEach(function(key) {
      wrapper.removeAttribute(key);
    });
    wrapper.innerHTML = "";
  }
}
function preRender(proxy2, control, wrapper, element2, moduleName) {
  element2 = wrapperInitialize(proxy2.createElement, control, "checkbox", element2, wrapper, moduleName);
  proxy2.element = element2;
  if (proxy2.element.getAttribute("type") !== "checkbox") {
    proxy2.element.setAttribute("type", "checkbox");
  }
  if (!proxy2.element.id) {
    proxy2.element.id = getUniqueID("e-" + moduleName);
  }
}
function createCheckBox(createElement3, enableRipple, options) {
  if (enableRipple === void 0) {
    enableRipple = false;
  }
  if (options === void 0) {
    options = {};
  }
  var wrapper = createElement3("div", { className: "e-checkbox-wrapper e-css" });
  if (options.cssClass) {
    addClass([wrapper], options.cssClass.split(" "));
  }
  if (options.enableRtl) {
    wrapper.classList.add("e-rtl");
  }
  if (enableRipple) {
    var rippleSpan = createElement3("span", { className: "e-ripple-container" });
    rippleEffect(rippleSpan, { isCenterRipple: true, duration: 400 });
    wrapper.appendChild(rippleSpan);
  }
  var frameSpan = createElement3("span", { className: "e-frame e-icons" });
  if (options.checked) {
    frameSpan.classList.add("e-check");
  }
  wrapper.appendChild(frameSpan);
  if (options.label) {
    var labelSpan = createElement3("span", { className: "e-label" });
    if (options.disableHtmlEncode) {
      labelSpan.textContent = options.label;
    } else {
      labelSpan.innerHTML = options.label;
    }
    wrapper.appendChild(labelSpan);
  }
  return wrapper;
}
function rippleMouseHandler(e, rippleSpan) {
  if (rippleSpan) {
    var event_1 = document.createEvent("MouseEvents");
    event_1.initEvent(e.type, false, true);
    rippleSpan.dispatchEvent(event_1);
  }
}
function setHiddenInput(proxy2, wrap) {
  if (proxy2.element.getAttribute("ejs-for")) {
    wrap.appendChild(proxy2.createElement("input", {
      attrs: { "name": proxy2.name || proxy2.element.name, "value": "false", "type": "hidden" }
    }));
  }
}

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-buttons/src/button/button.js
var __extends4 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var IconPosition;
(function(IconPosition2) {
  IconPosition2["Left"] = "Left";
  IconPosition2["Right"] = "Right";
  IconPosition2["Top"] = "Top";
  IconPosition2["Bottom"] = "Bottom";
})(IconPosition || (IconPosition = {}));
var buttonObserver = new Observer();
var cssClassName = {
  RTL: "e-rtl",
  BUTTON: "e-btn",
  PRIMARY: "e-primary",
  ICONBTN: "e-icon-btn"
};
var Button = (
  /** @class */
  function(_super) {
    __extends4(Button2, _super);
    function Button2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    Button2.prototype.preRender = function() {
    };
    Button2.prototype.render = function() {
      this.initialize();
      this.removeRippleEffect = rippleEffect(this.element, { selector: "." + cssClassName.BUTTON });
      this.renderComplete();
    };
    Button2.prototype.initialize = function() {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.isPrimary) {
        this.element.classList.add(cssClassName.PRIMARY);
      }
      if (!isBlazor() || isBlazor() && this.getModuleName() !== "progress-btn") {
        if (this.content) {
          var tempContent = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.content) : this.content;
          this.element.innerHTML = tempContent;
        }
        this.setIconCss();
      }
      if (this.enableRtl) {
        this.element.classList.add(cssClassName.RTL);
      }
      if (this.disabled) {
        this.controlStatus(this.disabled);
      } else {
        this.wireEvents();
      }
    };
    Button2.prototype.controlStatus = function(disabled) {
      this.element.disabled = disabled;
    };
    Button2.prototype.setIconCss = function() {
      if (this.iconCss) {
        var span = this.createElement("span", { className: "e-btn-icon " + this.iconCss });
        if (!this.element.textContent.trim()) {
          this.element.classList.add(cssClassName.ICONBTN);
        } else {
          span.classList.add("e-icon-" + this.iconPosition.toLowerCase());
          if (this.iconPosition === "Top" || this.iconPosition === "Bottom") {
            this.element.classList.add("e-" + this.iconPosition.toLowerCase() + "-icon-btn");
          }
        }
        var node = this.element.childNodes[0];
        if (node && (this.iconPosition === "Left" || this.iconPosition === "Top")) {
          this.element.insertBefore(span, node);
        } else {
          this.element.appendChild(span);
        }
      }
    };
    Button2.prototype.wireEvents = function() {
      if (this.isToggle) {
        EventHandler.add(this.element, "click", this.btnClickHandler, this);
      }
    };
    Button2.prototype.unWireEvents = function() {
      if (this.isToggle) {
        EventHandler.remove(this.element, "click", this.btnClickHandler);
      }
    };
    Button2.prototype.btnClickHandler = function() {
      if (this.element.classList.contains("e-active")) {
        this.element.classList.remove("e-active");
      } else {
        this.element.classList.add("e-active");
      }
    };
    Button2.prototype.destroy = function() {
      var classList2 = [
        cssClassName.PRIMARY,
        cssClassName.RTL,
        cssClassName.ICONBTN,
        "e-success",
        "e-info",
        "e-danger",
        "e-warning",
        "e-flat",
        "e-outline",
        "e-small",
        "e-bigger",
        "e-active",
        "e-round",
        "e-top-icon-btn",
        "e-bottom-icon-btn"
      ];
      if (this.cssClass) {
        classList2 = classList2.concat(this.cssClass.split(" "));
      }
      _super.prototype.destroy.call(this);
      removeClass([this.element], classList2);
      if (!this.element.getAttribute("class")) {
        this.element.removeAttribute("class");
      }
      if (this.disabled) {
        this.element.removeAttribute("disabled");
      }
      if (this.content) {
        this.element.innerHTML = this.element.innerHTML.replace(this.content, "");
      }
      var span = this.element.querySelector("span.e-btn-icon");
      if (span) {
        detach(span);
      }
      this.unWireEvents();
      if (isRippleEnabled) {
        this.removeRippleEffect();
      }
    };
    Button2.prototype.getModuleName = function() {
      return "btn";
    };
    Button2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Button2.Inject = function() {
    };
    Button2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var span = this.element.querySelector("span.e-btn-icon");
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "isPrimary":
            if (newProp.isPrimary) {
              this.element.classList.add(cssClassName.PRIMARY);
            } else {
              this.element.classList.remove(cssClassName.PRIMARY);
            }
            break;
          case "disabled":
            this.controlStatus(newProp.disabled);
            break;
          case "iconCss": {
            if (span) {
              if (newProp.iconCss) {
                span.className = "e-btn-icon " + newProp.iconCss;
                if (this.element.textContent.trim()) {
                  if (this.iconPosition === "Left") {
                    span.classList.add("e-icon-left");
                  } else {
                    span.classList.add("e-icon-right");
                  }
                }
              } else {
                detach(span);
              }
            } else {
              this.setIconCss();
            }
            break;
          }
          case "iconPosition":
            removeClass([this.element], ["e-top-icon-btn", "e-bottom-icon-btn"]);
            span = this.element.querySelector("span.e-btn-icon");
            if (span) {
              detach(span);
            }
            this.setIconCss();
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.element.classList.add(cssClassName.RTL);
            } else {
              this.element.classList.remove(cssClassName.RTL);
            }
            break;
          case "content": {
            var node = getTextNode(this.element);
            if (!node) {
              this.element.classList.remove(cssClassName.ICONBTN);
            }
            if (!isBlazor() || isBlazor() && !this.isServerRendered && this.getModuleName() !== "progress-btn") {
              if (this.enableHtmlSanitizer) {
                newProp.content = SanitizeHtmlHelper.sanitize(newProp.content);
              }
              this.element.innerHTML = newProp.content;
              this.setIconCss();
            }
            break;
          }
          case "isToggle":
            if (newProp.isToggle) {
              EventHandler.add(this.element, "click", this.btnClickHandler, this);
            } else {
              EventHandler.remove(this.element, "click", this.btnClickHandler);
              removeClass([this.element], ["e-active"]);
            }
            break;
        }
      }
    };
    Button2.prototype.click = function() {
      this.element.click();
    };
    Button2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate2([
      Property("Left")
    ], Button2.prototype, "iconPosition", void 0);
    __decorate2([
      Property("")
    ], Button2.prototype, "iconCss", void 0);
    __decorate2([
      Property(false)
    ], Button2.prototype, "disabled", void 0);
    __decorate2([
      Property(false)
    ], Button2.prototype, "isPrimary", void 0);
    __decorate2([
      Property("")
    ], Button2.prototype, "cssClass", void 0);
    __decorate2([
      Property("")
    ], Button2.prototype, "content", void 0);
    __decorate2([
      Property(false)
    ], Button2.prototype, "isToggle", void 0);
    __decorate2([
      Property()
    ], Button2.prototype, "locale", void 0);
    __decorate2([
      Property(false)
    ], Button2.prototype, "enableHtmlSanitizer", void 0);
    __decorate2([
      Event()
    ], Button2.prototype, "created", void 0);
    Button2 = __decorate2([
      NotifyPropertyChanges
    ], Button2);
    return Button2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-buttons/src/check-box/check-box.js
var __extends5 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CHECK = "e-check";
var DISABLED = "e-checkbox-disabled";
var FRAME = "e-frame";
var INDETERMINATE = "e-stop";
var LABEL = "e-label";
var RIPPLE = "e-ripple-container";
var RIPPLECHECK = "e-ripple-check";
var RIPPLEINDETERMINATE = "e-ripple-stop";
var RTL = "e-rtl";
var WRAPPER = "e-checkbox-wrapper";
var containerAttr = ["title", "class", "style", "disabled", "readonly", "name", "value"];
var CheckBox = (
  /** @class */
  function(_super) {
    __extends5(CheckBox2, _super);
    function CheckBox2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isFocused = false;
      _this.isMouseClick = false;
      _this.clickTriggered = false;
      _this.validCheck = true;
      return _this;
    }
    CheckBox2.prototype.changeState = function(state, isInitialize) {
      var ariaState;
      var rippleSpan;
      var frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];
      if (isRippleEnabled) {
        rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
      }
      if (state === "check") {
        frameSpan.classList.remove(INDETERMINATE);
        frameSpan.classList.add(CHECK);
        if (rippleSpan) {
          rippleSpan.classList.remove(RIPPLEINDETERMINATE);
          rippleSpan.classList.add(RIPPLECHECK);
        }
        ariaState = "true";
        this.element.checked = true;
        if ((this.element.required || this.element.closest("form") && this.element.closest("form").classList.contains("e-formvalidator")) && this.validCheck && !isInitialize) {
          this.element.checked = false;
          this.validCheck = false;
        } else if (this.element.required || this.element.closest("form") && this.element.closest("form").classList.contains("e-formvalidator")) {
          this.validCheck = true;
        }
      } else if (state === "uncheck") {
        removeClass([frameSpan], [CHECK, INDETERMINATE]);
        if (rippleSpan) {
          removeClass([rippleSpan], [RIPPLECHECK, RIPPLEINDETERMINATE]);
        }
        ariaState = "false";
        this.element.checked = false;
        if ((this.element.required || this.element.closest("form") && this.element.closest("form").classList.contains("e-formvalidator")) && this.validCheck && !isInitialize) {
          this.element.checked = true;
          this.validCheck = false;
        } else if (this.element.required || this.element.closest("form") && this.element.closest("form").classList.contains("e-formvalidator")) {
          this.validCheck = true;
        }
      } else {
        frameSpan.classList.remove(CHECK);
        frameSpan.classList.add(INDETERMINATE);
        if (rippleSpan) {
          rippleSpan.classList.remove(RIPPLECHECK);
          rippleSpan.classList.add(RIPPLEINDETERMINATE);
        }
        ariaState = "mixed";
        this.element.indeterminate = true;
        this.indeterminate = true;
      }
    };
    CheckBox2.prototype.clickHandler = function(event) {
      if (event.target.tagName === "INPUT" && this.clickTriggered) {
        if (this.isVue) {
          this.changeState(this.checked ? "check" : "uncheck");
        }
        this.clickTriggered = false;
        return;
      }
      if (event.target.tagName === "SPAN" || event.target.tagName === "LABEL") {
        this.clickTriggered = true;
      }
      if (this.isMouseClick) {
        this.focusOutHandler();
        this.isMouseClick = false;
      }
      if (this.indeterminate) {
        this.changeState(this.checked ? "check" : "uncheck");
        this.indeterminate = false;
        this.element.indeterminate = false;
      } else if (this.checked) {
        this.changeState("uncheck");
        this.checked = false;
      } else {
        this.changeState("check");
        this.checked = true;
      }
      var changeEventArgs = { checked: this.updateVueArrayModel(false), event };
      this.trigger("change", changeEventArgs);
      event.stopPropagation();
    };
    CheckBox2.prototype.destroy = function() {
      var _this = this;
      var wrapper = this.getWrapper();
      _super.prototype.destroy.call(this);
      if (this.wrapper) {
        wrapper = this.wrapper;
        if (!this.disabled) {
          this.unWireEvents();
        }
        if (this.tagName === "INPUT") {
          if (this.getWrapper() && wrapper.parentNode) {
            wrapper.parentNode.insertBefore(this.element, wrapper);
          }
          detach(wrapper);
          this.element.checked = false;
          if (this.indeterminate) {
            this.element.indeterminate = false;
          }
          ["name", "value", "disabled"].forEach(function(key) {
            _this.element.removeAttribute(key);
          });
        } else {
          ["class"].forEach(function(key) {
            wrapper.removeAttribute(key);
          });
          wrapper.innerHTML = "";
        }
      }
    };
    CheckBox2.prototype.focusHandler = function() {
      this.isFocused = true;
    };
    CheckBox2.prototype.focusOutHandler = function() {
      var wrapper = this.getWrapper();
      if (wrapper) {
        wrapper.classList.remove("e-focus");
      }
      this.isFocused = false;
    };
    CheckBox2.prototype.getModuleName = function() {
      return "checkbox";
    };
    CheckBox2.prototype.getPersistData = function() {
      return this.addOnPersist(["checked", "indeterminate"]);
    };
    CheckBox2.prototype.getWrapper = function() {
      if (this.element && this.element.parentElement) {
        return this.element.parentElement.parentElement;
      } else {
        return null;
      }
    };
    CheckBox2.prototype.initialize = function() {
      if (isNullOrUndefined(this.initialCheckedValue)) {
        this.initialCheckedValue = this.checked;
      }
      if (this.name) {
        this.element.setAttribute("name", this.name);
      }
      if (this.value) {
        this.element.setAttribute("value", this.value);
        if (this.isVue && typeof this.value === "boolean" && this.value === true) {
          this.setProperties({ "checked": true }, true);
        }
      }
      if (this.checked) {
        this.changeState("check", true);
      }
      if (this.indeterminate) {
        this.changeState();
      }
      if (this.disabled) {
        this.setDisabled();
      }
    };
    CheckBox2.prototype.initWrapper = function() {
      var wrapper = this.element.parentElement;
      if (!wrapper.classList.contains(WRAPPER)) {
        wrapper = this.createElement("div", {
          className: WRAPPER
        });
        this.element.parentNode.insertBefore(wrapper, this.element);
      }
      var label = this.createElement("label", { attrs: { for: this.element.id } });
      var frameSpan = this.createElement("span", { className: "e-icons " + FRAME });
      wrapper.classList.add("e-wrapper");
      if (this.enableRtl) {
        wrapper.classList.add(RTL);
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      wrapper.appendChild(label);
      label.appendChild(this.element);
      setHiddenInput(this, label);
      label.appendChild(frameSpan);
      if (isRippleEnabled) {
        var rippleSpan = this.createElement("span", { className: RIPPLE });
        if (this.labelPosition === "Before") {
          label.appendChild(rippleSpan);
        } else {
          label.insertBefore(rippleSpan, frameSpan);
        }
        rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });
      }
      if (this.label) {
        this.setText(this.label);
      }
    };
    CheckBox2.prototype.keyUpHandler = function() {
      if (this.isFocused) {
        this.getWrapper().classList.add("e-focus");
      }
    };
    CheckBox2.prototype.labelMouseDownHandler = function(e) {
      this.isMouseClick = true;
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
      rippleMouseHandler(e, rippleSpan);
    };
    CheckBox2.prototype.labelMouseUpHandler = function(e) {
      this.isMouseClick = true;
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
      if (rippleSpan) {
        var rippleElem = rippleSpan.querySelectorAll(".e-ripple-element");
        for (var i = 0; i < rippleElem.length - 1; i++) {
          rippleSpan.removeChild(rippleSpan.childNodes[i]);
        }
        rippleMouseHandler(e, rippleSpan);
      }
    };
    CheckBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrapper = this.getWrapper();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "checked":
            this.indeterminate = false;
            this.element.indeterminate = false;
            this.changeState(newProp.checked ? "check" : "uncheck");
            break;
          case "indeterminate":
            if (newProp.indeterminate) {
              this.changeState();
            } else {
              this.element.indeterminate = false;
              this.changeState(this.checked ? "check" : "uncheck");
            }
            break;
          case "disabled":
            if (newProp.disabled) {
              this.setDisabled();
              this.wrapper = this.getWrapper();
              this.unWireEvents();
            } else {
              this.element.disabled = false;
              wrapper.classList.remove(DISABLED);
              wrapper.setAttribute("aria-disabled", "false");
              this.wireEvents();
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrapper], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrapper], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              wrapper.classList.add(RTL);
            } else {
              wrapper.classList.remove(RTL);
            }
            break;
          case "label":
            this.setText(newProp.label);
            break;
          case "labelPosition": {
            var label = wrapper.getElementsByClassName(LABEL)[0];
            var labelWrap = wrapper.getElementsByTagName("label")[0];
            detach(label);
            if (newProp.labelPosition === "After") {
              labelWrap.appendChild(label);
            } else {
              labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);
            }
            break;
          }
          case "name":
            this.element.setAttribute("name", newProp.name);
            break;
          case "value":
            if (this.isVue && typeof newProp.value === "object") {
              break;
            }
            this.element.setAttribute("value", newProp.value);
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToWrapper();
            break;
        }
      }
    };
    CheckBox2.prototype.preRender = function() {
      var element2 = this.element;
      this.tagName = this.element.tagName;
      element2 = wrapperInitialize(this.createElement, "EJS-CHECKBOX", "checkbox", element2, WRAPPER, "checkbox");
      this.element = element2;
      if (this.element.getAttribute("type") !== "checkbox") {
        this.element.setAttribute("type", "checkbox");
      }
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
    };
    CheckBox2.prototype.render = function() {
      this.initWrapper();
      this.initialize();
      if (!this.disabled) {
        this.wireEvents();
      }
      this.updateHtmlAttributeToWrapper();
      this.updateVueArrayModel(true);
      this.renderComplete();
      this.wrapper = this.getWrapper();
    };
    CheckBox2.prototype.setDisabled = function() {
      var wrapper = this.getWrapper();
      this.element.disabled = true;
      wrapper.classList.add(DISABLED);
      wrapper.setAttribute("aria-disabled", "true");
    };
    CheckBox2.prototype.setText = function(text) {
      var wrapper = this.getWrapper();
      if (!wrapper) {
        return;
      }
      var label = wrapper.getElementsByClassName(LABEL)[0];
      if (label) {
        label.textContent = text;
      } else {
        text = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(text) : text;
        label = this.createElement("span", { className: LABEL, innerHTML: text });
        var labelWrap = wrapper.getElementsByTagName("label")[0];
        if (this.labelPosition === "Before") {
          labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);
        } else {
          labelWrap.appendChild(label);
        }
      }
    };
    CheckBox2.prototype.changeHandler = function(e) {
      e.stopPropagation();
    };
    CheckBox2.prototype.formResetHandler = function() {
      this.checked = this.initialCheckedValue;
      this.element.checked = this.initialCheckedValue;
    };
    CheckBox2.prototype.unWireEvents = function() {
      var wrapper = this.wrapper;
      EventHandler.remove(wrapper, "click", this.clickHandler);
      EventHandler.remove(this.element, "keyup", this.keyUpHandler);
      EventHandler.remove(this.element, "focus", this.focusHandler);
      EventHandler.remove(this.element, "focusout", this.focusOutHandler);
      var label = wrapper.getElementsByTagName("label")[0];
      EventHandler.remove(label, "mousedown", this.labelMouseDownHandler);
      EventHandler.remove(label, "mouseup", this.labelMouseUpHandler);
      var formElem = closest(this.element, "form");
      if (formElem) {
        EventHandler.remove(formElem, "reset", this.formResetHandler);
      }
      if (this.tagName === "EJS-CHECKBOX") {
        EventHandler.remove(this.element, "change", this.changeHandler);
      }
    };
    CheckBox2.prototype.wireEvents = function() {
      var wrapper = this.getWrapper();
      EventHandler.add(wrapper, "click", this.clickHandler, this);
      EventHandler.add(this.element, "keyup", this.keyUpHandler, this);
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
      var label = wrapper.getElementsByTagName("label")[0];
      EventHandler.add(label, "mousedown", this.labelMouseDownHandler, this);
      EventHandler.add(label, "mouseup", this.labelMouseUpHandler, this);
      var formElem = closest(this.element, "form");
      if (formElem) {
        EventHandler.add(formElem, "reset", this.formResetHandler, this);
      }
      if (this.tagName === "EJS-CHECKBOX") {
        EventHandler.add(this.element, "change", this.changeHandler, this);
      }
    };
    CheckBox2.prototype.updateVueArrayModel = function(init) {
      if (this.isVue && typeof this.value === "object") {
        var value = this.element.value;
        if (value && this.value) {
          if (init) {
            for (var i = 0; i < this.value.length; i++) {
              if (value === this.value[i]) {
                this.changeState("check");
                this.setProperties({ "checked": true }, true);
              }
            }
          } else {
            var index = this.value.indexOf(value);
            if (this.checked) {
              if (index < 0) {
                this.value.push(value);
              }
            } else {
              if (index > -1) {
                this.value.splice(index, 1);
              }
            }
            return this.value;
          }
        }
      }
      return this.validCheck ? this.element.checked : !this.element.checked;
    };
    CheckBox2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (containerAttr.indexOf(key) > -1) {
            var wrapper = this.getWrapper();
            if (key === "class") {
              addClass([wrapper], this.htmlAttributes["" + key].split(" "));
            } else if (key === "title") {
              wrapper.setAttribute(key, this.htmlAttributes["" + key]);
            } else if (key === "style") {
              var frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];
              frameSpan.setAttribute(key, this.htmlAttributes["" + key]);
            } else if (key === "disabled") {
              if (this.htmlAttributes["" + key] === "true") {
                this.setDisabled();
              }
              this.element.setAttribute(key, this.htmlAttributes["" + key]);
            } else {
              this.element.setAttribute(key, this.htmlAttributes["" + key]);
            }
          }
        }
      }
    };
    CheckBox2.prototype.click = function() {
      this.element.click();
    };
    CheckBox2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate3([
      Event()
    ], CheckBox2.prototype, "change", void 0);
    __decorate3([
      Event()
    ], CheckBox2.prototype, "created", void 0);
    __decorate3([
      Property(false)
    ], CheckBox2.prototype, "checked", void 0);
    __decorate3([
      Property("")
    ], CheckBox2.prototype, "cssClass", void 0);
    __decorate3([
      Property(false)
    ], CheckBox2.prototype, "disabled", void 0);
    __decorate3([
      Property(false)
    ], CheckBox2.prototype, "indeterminate", void 0);
    __decorate3([
      Property("")
    ], CheckBox2.prototype, "label", void 0);
    __decorate3([
      Property("After")
    ], CheckBox2.prototype, "labelPosition", void 0);
    __decorate3([
      Property("")
    ], CheckBox2.prototype, "name", void 0);
    __decorate3([
      Property("")
    ], CheckBox2.prototype, "value", void 0);
    __decorate3([
      Property(false)
    ], CheckBox2.prototype, "enableHtmlSanitizer", void 0);
    __decorate3([
      Property({})
    ], CheckBox2.prototype, "htmlAttributes", void 0);
    CheckBox2 = __decorate3([
      NotifyPropertyChanges
    ], CheckBox2);
    return CheckBox2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-buttons/src/radio-button/radio-button.js
var __extends6 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LABEL2 = "e-label";
var RIPPLE2 = "e-ripple-container";
var RTL2 = "e-rtl";
var WRAPPER2 = "e-radio-wrapper";
var ATTRIBUTES = ["title", "class", "style", "disabled", "readonly", "name", "value"];
var RadioButton = (
  /** @class */
  function(_super) {
    __extends6(RadioButton2, _super);
    function RadioButton2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isFocused = false;
      return _this;
    }
    RadioButton_1 = RadioButton2;
    RadioButton2.prototype.changeHandler = function(event) {
      this.checked = true;
      this.dataBind();
      var value = this.element.getAttribute("value");
      value = this.isVue && value ? this.element.value : this.value;
      var type = typeof this.value;
      if (this.isVue && type === "boolean") {
        value = value === "true" ? true : false;
      }
      this.trigger("change", { value, event });
      if (this.isAngular) {
        event.stopPropagation();
      }
    };
    RadioButton2.prototype.updateChange = function() {
      var input;
      var instance;
      var radioGrp = this.getRadioGroup();
      for (var i = 0; i < radioGrp.length; i++) {
        input = radioGrp[i];
        if (input !== this.element) {
          instance = getInstance(input, RadioButton_1);
          instance.checked = false;
          if (this.tagName === "EJS-RADIOBUTTON") {
            instance.angularValue = this.value;
          }
        }
      }
    };
    RadioButton2.prototype.destroy = function() {
      var _this = this;
      var radioWrap = this.wrapper;
      _super.prototype.destroy.call(this);
      if (radioWrap) {
        if (!this.disabled) {
          this.unWireEvents();
        }
        if (this.tagName === "INPUT") {
          if (radioWrap.parentNode) {
            radioWrap.parentNode.insertBefore(this.element, radioWrap);
          }
          detach(radioWrap);
          this.element.checked = false;
          ["name", "value", "disabled"].forEach(function(key) {
            _this.element.removeAttribute(key);
          });
        } else {
          ["role", "aria-checked", "class"].forEach(function(key) {
            radioWrap.removeAttribute(key);
          });
          radioWrap.innerHTML = "";
        }
      }
    };
    RadioButton2.prototype.focusHandler = function() {
      this.isFocused = true;
    };
    RadioButton2.prototype.focusOutHandler = function() {
      var label = this.getLabel();
      if (label) {
        label.classList.remove("e-focus");
      }
    };
    RadioButton2.prototype.getModuleName = function() {
      return "radio";
    };
    RadioButton2.prototype.getSelectedValue = function() {
      var input;
      var radioGrp = this.getRadioGroup();
      for (var i = 0, len = radioGrp.length; i < len; i++) {
        input = radioGrp[i];
        if (input.checked) {
          return input.value;
        }
      }
      return "";
    };
    RadioButton2.prototype.getRadioGroup = function() {
      return document.querySelectorAll('input.e-radio[name="' + this.element.getAttribute("name") + '"]');
    };
    RadioButton2.prototype.getPersistData = function() {
      return this.addOnPersist(["checked"]);
    };
    RadioButton2.prototype.getWrapper = function() {
      if (this.element) {
        return this.element.parentElement;
      } else {
        return null;
      }
    };
    RadioButton2.prototype.getLabel = function() {
      if (this.element) {
        return this.element.nextElementSibling;
      } else {
        return null;
      }
    };
    RadioButton2.prototype.initialize = function() {
      if (isNullOrUndefined(this.initialCheckedValue)) {
        this.initialCheckedValue = this.checked;
      }
      this.initWrapper();
      this.updateHtmlAttribute();
      if (this.name) {
        this.element.setAttribute("name", this.name);
      }
      var value = this.element.getAttribute("value");
      var type = typeof this.value;
      if (this.isVue && type === "boolean") {
        value = value === "true" ? true : false;
      }
      if (this.isVue ? this.value && type !== "boolean" && !value : this.value) {
        this.element.setAttribute("value", this.value);
      }
      if (this.checked) {
        this.element.checked = true;
      }
      if (this.disabled) {
        this.setDisabled();
      }
    };
    RadioButton2.prototype.initWrapper = function() {
      var rippleSpan;
      var wrapper = this.element.parentElement;
      if (!wrapper.classList.contains(WRAPPER2)) {
        wrapper = this.createElement("div", { className: WRAPPER2 });
        this.element.parentNode.insertBefore(wrapper, this.element);
      }
      var label = this.createElement("label", { attrs: { for: this.element.id } });
      wrapper.appendChild(this.element);
      wrapper.appendChild(label);
      if (isRippleEnabled) {
        rippleSpan = this.createElement("span", { className: RIPPLE2 });
        label.appendChild(rippleSpan);
        rippleEffect(rippleSpan, {
          duration: 400,
          isCenterRipple: true
        });
      }
      wrapper.classList.add("e-wrapper");
      if (this.enableRtl) {
        label.classList.add(RTL2);
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.label) {
        this.setText(this.label);
      }
    };
    RadioButton2.prototype.keyUpHandler = function() {
      if (this.isFocused) {
        this.getLabel().classList.add("e-focus");
      }
    };
    RadioButton2.prototype.labelMouseDownHandler = function(e) {
      var rippleSpan = this.getLabel().getElementsByClassName(RIPPLE2)[0];
      rippleMouseHandler(e, rippleSpan);
    };
    RadioButton2.prototype.labelMouseLeaveHandler = function(e) {
      var rippleSpan = this.getLabel().getElementsByClassName(RIPPLE2)[0];
      if (rippleSpan) {
        var rippleElem = rippleSpan.querySelectorAll(".e-ripple-element");
        for (var i = rippleElem.length - 1; i > 0; i--) {
          rippleSpan.removeChild(rippleSpan.childNodes[i]);
        }
        rippleMouseHandler(e, rippleSpan);
      }
    };
    RadioButton2.prototype.labelMouseUpHandler = function(e) {
      var rippleSpan = this.getLabel().getElementsByClassName(RIPPLE2)[0];
      if (rippleSpan) {
        var rippleElem = rippleSpan.querySelectorAll(".e-ripple-element");
        for (var i = rippleElem.length - 1; i > 0; i--) {
          rippleSpan.removeChild(rippleSpan.childNodes[i]);
        }
        rippleMouseHandler(e, rippleSpan);
      }
    };
    RadioButton2.prototype.formResetHandler = function() {
      this.checked = this.initialCheckedValue;
      if (this.initialCheckedValue) {
        attributes(this.element, { "checked": "true" });
      }
    };
    RadioButton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrap = this.getWrapper();
      var label = this.getLabel();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "checked":
            if (newProp.checked) {
              this.updateChange();
            }
            this.element.checked = newProp.checked;
            break;
          case "disabled":
            if (newProp.disabled) {
              this.setDisabled();
              this.unWireEvents();
            } else {
              this.element.disabled = false;
              this.wireEvents();
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrap], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrap], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              label.classList.add(RTL2);
            } else {
              label.classList.remove(RTL2);
            }
            break;
          case "label":
            this.setText(newProp.label);
            break;
          case "labelPosition":
            if (newProp.labelPosition === "Before") {
              label.classList.add("e-right");
            } else {
              label.classList.remove("e-right");
            }
            break;
          case "name":
            this.element.setAttribute("name", newProp.name);
            break;
          case "value":
            var type = typeof this.htmlAttributes.value;
            if (!isNullOrUndefined(this.htmlAttributes) && (this.htmlAttributes.value || type === "boolean" && !this.htmlAttributes.value)) {
              break;
            }
            this.element.setAttribute("value", newProp.value);
            break;
          case "htmlAttributes":
            this.updateHtmlAttribute();
            break;
        }
      }
    };
    RadioButton2.prototype.preRender = function() {
      var element2 = this.element;
      this.formElement = closest(this.element, "form");
      this.tagName = this.element.tagName;
      element2 = wrapperInitialize(this.createElement, "EJS-RADIOBUTTON", "radio", element2, WRAPPER2, "radio");
      this.element = element2;
      if (this.element.getAttribute("type") !== "radio") {
        this.element.setAttribute("type", "radio");
      }
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      if (this.tagName === "EJS-RADIOBUTTON") {
        var formControlName = this.element.getAttribute("formcontrolname");
        if (formControlName) {
          this.setProperties({ "name": formControlName }, true);
          this.element.setAttribute("name", formControlName);
        }
      }
    };
    RadioButton2.prototype.render = function() {
      this.initialize();
      if (!this.disabled) {
        this.wireEvents();
      }
      this.renderComplete();
      this.wrapper = this.getWrapper();
    };
    RadioButton2.prototype.setDisabled = function() {
      this.element.disabled = true;
    };
    RadioButton2.prototype.setText = function(text) {
      var label = this.getLabel();
      var textLabel = label.getElementsByClassName(LABEL2)[0];
      if (textLabel) {
        textLabel.textContent = text;
      } else {
        text = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(text) : text;
        textLabel = this.createElement("span", { className: LABEL2, innerHTML: text });
        label.appendChild(textLabel);
      }
      if (this.labelPosition === "Before") {
        this.getLabel().classList.add("e-right");
      } else {
        this.getLabel().classList.remove("e-right");
      }
    };
    RadioButton2.prototype.updateHtmlAttribute = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (ATTRIBUTES.indexOf(key) > -1) {
            var wrapper = this.element.parentElement;
            if (key === "class") {
              addClass([wrapper], this.htmlAttributes["" + key].replace(/\s+/g, " ").trim().split(" "));
            } else if (key === "title" || key === "style") {
              wrapper.setAttribute(key, this.htmlAttributes["" + key]);
            } else {
              this.element.setAttribute(key, this.htmlAttributes["" + key]);
            }
          }
        }
      }
    };
    RadioButton2.prototype.unWireEvents = function() {
      var label = this.wrapper;
      EventHandler.remove(this.element, "change", this.changeHandler);
      EventHandler.remove(this.element, "focus", this.focusHandler);
      EventHandler.remove(this.element, "focusout", this.focusOutHandler);
      EventHandler.remove(this.element, "keyup", this.keyUpHandler);
      var rippleLabel = label.getElementsByTagName("label")[0];
      if (rippleLabel) {
        EventHandler.remove(rippleLabel, "mousedown", this.labelMouseDownHandler);
        EventHandler.remove(rippleLabel, "mouseup", this.labelMouseUpHandler);
        EventHandler.remove(rippleLabel, "mouseleave", this.labelMouseLeaveHandler);
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    RadioButton2.prototype.wireEvents = function() {
      var label = this.getLabel();
      EventHandler.add(this.element, "change", this.changeHandler, this);
      EventHandler.add(this.element, "keyup", this.keyUpHandler, this);
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
      var rippleLabel = label.getElementsByClassName(LABEL2)[0];
      if (rippleLabel) {
        EventHandler.add(rippleLabel, "mousedown", this.labelMouseDownHandler, this);
        EventHandler.add(rippleLabel, "mouseup", this.labelMouseUpHandler, this);
        EventHandler.add(rippleLabel, "mouseleave", this.labelMouseLeaveHandler, this);
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
    };
    RadioButton2.prototype.click = function() {
      this.element.click();
    };
    RadioButton2.prototype.focusIn = function() {
      this.element.focus();
    };
    var RadioButton_1;
    __decorate4([
      Event()
    ], RadioButton2.prototype, "change", void 0);
    __decorate4([
      Event()
    ], RadioButton2.prototype, "created", void 0);
    __decorate4([
      Property(false)
    ], RadioButton2.prototype, "checked", void 0);
    __decorate4([
      Property("")
    ], RadioButton2.prototype, "cssClass", void 0);
    __decorate4([
      Property(false)
    ], RadioButton2.prototype, "disabled", void 0);
    __decorate4([
      Property("")
    ], RadioButton2.prototype, "label", void 0);
    __decorate4([
      Property("After")
    ], RadioButton2.prototype, "labelPosition", void 0);
    __decorate4([
      Property("")
    ], RadioButton2.prototype, "name", void 0);
    __decorate4([
      Property("")
    ], RadioButton2.prototype, "value", void 0);
    __decorate4([
      Property(false)
    ], RadioButton2.prototype, "enableHtmlSanitizer", void 0);
    __decorate4([
      Property({})
    ], RadioButton2.prototype, "htmlAttributes", void 0);
    RadioButton2 = RadioButton_1 = __decorate4([
      NotifyPropertyChanges
    ], RadioButton2);
    return RadioButton2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-buttons/src/switch/switch.js
var __extends7 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DISABLED2 = "e-switch-disabled";
var RIPPLE3 = "e-ripple-container";
var RIPPLE_CHECK = "e-ripple-check";
var RTL3 = "e-rtl";
var WRAPPER3 = "e-switch-wrapper";
var ACTIVE = "e-switch-active";
var ATTRIBUTES2 = ["title", "class", "style", "disabled", "readonly", "name", "value", "aria-label", "id", "role"];
var Switch = (
  /** @class */
  function(_super) {
    __extends7(Switch2, _super);
    function Switch2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isFocused = false;
      _this.isDrag = false;
      _this.isWireEvents = false;
      return _this;
    }
    Switch2.prototype.changeState = function(state) {
      var ariaState;
      var rippleSpan;
      var wrapper = this.getWrapper();
      var bar = wrapper.querySelector(".e-switch-inner");
      var handle = wrapper.querySelector(".e-switch-handle");
      if (isRippleEnabled) {
        rippleSpan = wrapper.getElementsByClassName(RIPPLE3)[0];
      }
      if (state) {
        addClass([bar, handle], ACTIVE);
        ariaState = "true";
        this.element.checked = true;
        this.checked = true;
        if (rippleSpan) {
          addClass([rippleSpan], [RIPPLE_CHECK]);
        }
      } else {
        removeClass([bar, handle], ACTIVE);
        ariaState = "false";
        this.element.checked = false;
        this.checked = false;
        if (rippleSpan) {
          removeClass([rippleSpan], [RIPPLE_CHECK]);
        }
      }
    };
    Switch2.prototype.clickHandler = function(evt) {
      this.isDrag = false;
      this.focusOutHandler();
      this.changeState(!this.checked);
      this.element.focus();
      var changeEventArgs = { checked: this.element.checked, event: evt };
      this.trigger("change", changeEventArgs);
    };
    Switch2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (!this.disabled) {
        this.unWireEvents();
      }
      destroy(this, this.getWrapper(), this.tagName);
    };
    Switch2.prototype.focusHandler = function() {
      this.isFocused = true;
    };
    Switch2.prototype.focusOutHandler = function() {
      this.getWrapper().classList.remove("e-focus");
    };
    Switch2.prototype.getModuleName = function() {
      return "switch";
    };
    Switch2.prototype.getPersistData = function() {
      return this.addOnPersist(["checked"]);
    };
    Switch2.prototype.getWrapper = function() {
      return this.element.parentElement;
    };
    Switch2.prototype.initialize = function() {
      if (isNullOrUndefined(this.initialSwitchCheckedValue)) {
        this.initialSwitchCheckedValue = this.checked;
      }
      if (this.name) {
        this.element.setAttribute("name", this.name);
      }
      if (this.value) {
        this.element.setAttribute("value", this.value);
      }
      if (this.checked) {
        this.changeState(true);
      }
      if (this.disabled) {
        this.setDisabled();
      }
      if (this.onLabel || this.offLabel) {
        this.setLabel(this.onLabel, this.offLabel);
      }
    };
    Switch2.prototype.initWrapper = function() {
      var wrapper = this.element.parentElement;
      if (!wrapper.classList.contains(WRAPPER3)) {
        wrapper = this.createElement("div", {
          className: WRAPPER3
        });
        this.element.parentNode.insertBefore(wrapper, this.element);
      }
      var switchInner = this.createElement("span", { className: "e-switch-inner" });
      var onLabel = this.createElement("span", { className: "e-switch-on" });
      var offLabel = this.createElement("span", { className: "e-switch-off" });
      var handle = this.createElement("span", { className: "e-switch-handle" });
      wrapper.appendChild(this.element);
      setHiddenInput(this, wrapper);
      switchInner.appendChild(onLabel);
      switchInner.appendChild(offLabel);
      wrapper.appendChild(switchInner);
      wrapper.appendChild(handle);
      if (isRippleEnabled) {
        var rippleSpan = this.createElement("span", { className: RIPPLE3 });
        handle.appendChild(rippleSpan);
        rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });
      }
      wrapper.classList.add("e-wrapper");
      if (this.enableRtl) {
        wrapper.classList.add(RTL3);
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
    };
    Switch2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrapper = this.getWrapper();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "checked":
            this.changeState(newProp.checked);
            break;
          case "disabled":
            if (newProp.disabled) {
              this.setDisabled();
              this.unWireEvents();
              this.isWireEvents = false;
            } else {
              this.element.disabled = false;
              wrapper.classList.remove(DISABLED2);
              wrapper.setAttribute("aria-disabled", "false");
              if (!this.isWireEvents) {
                this.wireEvents();
                this.isWireEvents = true;
              }
            }
            break;
          case "value":
            this.element.setAttribute("value", newProp.value);
            break;
          case "name":
            this.element.setAttribute("name", newProp.name);
            break;
          case "onLabel":
          case "offLabel":
            this.setLabel(newProp.onLabel, newProp.offLabel);
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              wrapper.classList.add(RTL3);
            } else {
              wrapper.classList.remove(RTL3);
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrapper], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrapper], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "htmlAttributes":
            this.updateHtmlAttribute();
            break;
        }
      }
    };
    Switch2.prototype.preRender = function() {
      var element2 = this.element;
      this.formElement = closest(this.element, "form");
      this.tagName = this.element.tagName;
      preRender(this, "EJS-SWITCH", WRAPPER3, element2, this.getModuleName());
    };
    Switch2.prototype.render = function() {
      this.initWrapper();
      this.initialize();
      if (!this.disabled) {
        this.wireEvents();
      }
      this.renderComplete();
      this.updateHtmlAttribute();
    };
    Switch2.prototype.rippleHandler = function(e) {
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE3)[0];
      rippleMouseHandler(e, rippleSpan);
      if (e.type === "mousedown" && e.currentTarget.classList.contains("e-switch-wrapper") && e.which === 1) {
        this.isDrag = true;
        this.isFocused = false;
      }
    };
    Switch2.prototype.rippleTouchHandler = function(eventType) {
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE3)[0];
      if (rippleSpan) {
        var event_1 = document.createEvent("MouseEvents");
        event_1.initEvent(eventType, false, true);
        rippleSpan.dispatchEvent(event_1);
      }
    };
    Switch2.prototype.setDisabled = function() {
      var wrapper = this.getWrapper();
      this.element.disabled = true;
      wrapper.classList.add(DISABLED2);
      wrapper.setAttribute("aria-disabled", "true");
    };
    Switch2.prototype.setLabel = function(onText, offText) {
      var wrapper = this.getWrapper();
      if (onText) {
        wrapper.querySelector(".e-switch-on").textContent = onText;
      }
      if (offText) {
        wrapper.querySelector(".e-switch-off").textContent = offText;
      }
    };
    Switch2.prototype.updateHtmlAttribute = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (ATTRIBUTES2.indexOf(key) > -1) {
            var wrapper = this.getWrapper();
            if (key === "class") {
              addClass([wrapper], this.htmlAttributes["" + key].split(" "));
            } else if (key === "title") {
              wrapper.setAttribute(key, this.htmlAttributes["" + key]);
            } else if (key === "style") {
              wrapper.setAttribute(key, this.htmlAttributes["" + key]);
            } else if (key === "disabled") {
              if (this.htmlAttributes["" + key] === "true") {
                this.setDisabled();
              }
              this.element.setAttribute(key, this.htmlAttributes["" + key]);
            } else {
              this.element.setAttribute(key, this.htmlAttributes["" + key]);
            }
          }
        }
      }
    };
    Switch2.prototype.switchFocusHandler = function() {
      if (this.isFocused) {
        this.getWrapper().classList.add("e-focus");
      }
    };
    Switch2.prototype.switchMouseUp = function(e) {
      var target = e.target;
      if (e.type === "touchmove") {
        e.preventDefault();
      }
      if (e.type === "touchstart") {
        this.isDrag = true;
        this.rippleTouchHandler("mousedown");
      }
      if (this.isDrag) {
        if (e.type === "mouseup" && target.className.indexOf("e-switch") < 0 || e.type === "touchend") {
          this.clickHandler(e);
          this.rippleTouchHandler("mouseup");
          e.preventDefault();
        }
      }
    };
    Switch2.prototype.formResetHandler = function() {
      this.checked = this.initialSwitchCheckedValue;
      this.element.checked = this.initialSwitchCheckedValue;
    };
    Switch2.prototype.toggle = function() {
      this.clickHandler();
    };
    Switch2.prototype.wireEvents = function() {
      var wrapper = this.getWrapper();
      this.delegateMouseUpHandler = this.switchMouseUp.bind(this);
      this.delegateKeyUpHandler = this.switchFocusHandler.bind(this);
      EventHandler.add(wrapper, "click", this.clickHandler, this);
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
      EventHandler.add(this.element, "mouseup", this.delegateMouseUpHandler, this);
      EventHandler.add(this.element, "keyup", this.delegateKeyUpHandler, this);
      EventHandler.add(wrapper, "mousedown mouseup", this.rippleHandler, this);
      EventHandler.add(wrapper, "touchstart touchmove touchend", this.switchMouseUp, this);
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
    };
    Switch2.prototype.unWireEvents = function() {
      var wrapper = this.getWrapper();
      EventHandler.remove(wrapper, "click", this.clickHandler);
      EventHandler.remove(this.element, "focus", this.focusHandler);
      EventHandler.remove(this.element, "focusout", this.focusOutHandler);
      EventHandler.remove(this.element, "mouseup", this.delegateMouseUpHandler);
      EventHandler.remove(this.element, "keyup", this.delegateKeyUpHandler);
      EventHandler.remove(wrapper, "mousedown mouseup", this.rippleHandler);
      EventHandler.remove(wrapper, "touchstart touchmove touchend", this.switchMouseUp);
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    Switch2.prototype.click = function() {
      this.element.click();
    };
    Switch2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate5([
      Event()
    ], Switch2.prototype, "change", void 0);
    __decorate5([
      Event()
    ], Switch2.prototype, "created", void 0);
    __decorate5([
      Property(false)
    ], Switch2.prototype, "checked", void 0);
    __decorate5([
      Property("")
    ], Switch2.prototype, "cssClass", void 0);
    __decorate5([
      Property(false)
    ], Switch2.prototype, "disabled", void 0);
    __decorate5([
      Property("")
    ], Switch2.prototype, "name", void 0);
    __decorate5([
      Property("")
    ], Switch2.prototype, "onLabel", void 0);
    __decorate5([
      Property("")
    ], Switch2.prototype, "offLabel", void 0);
    __decorate5([
      Property("")
    ], Switch2.prototype, "value", void 0);
    __decorate5([
      Property({})
    ], Switch2.prototype, "htmlAttributes", void 0);
    Switch2 = __decorate5([
      NotifyPropertyChanges
    ], Switch2);
    return Switch2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-buttons/src/chips/chip-list.js
var __extends8 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var classNames = {
  chipSet: "e-chip-set",
  chip: "e-chip",
  avatar: "e-chip-avatar",
  text: "e-chip-text",
  icon: "e-chip-icon",
  delete: "e-chip-delete",
  deleteIcon: "e-dlt-btn",
  multiSelection: "e-multi-selection",
  singleSelection: "e-selection",
  active: "e-active",
  chipWrapper: "e-chip-avatar-wrap",
  iconWrapper: "e-chip-icon-wrap",
  focused: "e-focused",
  disabled: "e-disabled",
  rtl: "e-rtl"
};
var ChipList = (
  /** @class */
  function(_super) {
    __extends8(ChipList2, _super);
    function ChipList2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.multiSelectedChip = [];
      return _this;
    }
    ChipList2.prototype.preRender = function() {
    };
    ChipList2.prototype.chipType = function() {
      return this.chips && this.chips.length && this.chips.length > 0;
    };
    ChipList2.prototype.render = function() {
      var property;
      this.type = this.chips.length ? "chipset" : this.text || this.element.innerText ? "chip" : "chipset";
      this.setAttributes();
      this.createChip();
      this.setRtl();
      this.select(this.selectedChips, property);
      this.wireEvent(false);
      this.rippleFunction = rippleEffect(this.element, {
        selector: ".e-chip"
      });
      this.renderComplete();
    };
    ChipList2.prototype.createChip = function() {
      this.innerText = this.element.innerText && this.element.innerText.length !== 0 ? this.element.innerText.trim() : this.element.innerText;
      this.element.innerHTML = "";
      this.chipCreation(this.type === "chip" ? [this.innerText ? this.innerText : this.text] : this.chips);
    };
    ChipList2.prototype.setAttributes = function() {
      if (this.type === "chip") {
        if (this.enabled)
          this.element.tabIndex = 0;
        this.element.setAttribute("role", "option");
      } else {
        this.element.classList.add(classNames.chipSet);
        this.element.setAttribute("role", "listbox");
        if (this.selection === "Multiple") {
          this.element.classList.add(classNames.multiSelection);
          this.element.setAttribute("aria-multiselectable", "true");
        } else if (this.selection === "Single") {
          this.element.classList.add(classNames.singleSelection);
          this.element.setAttribute("aria-multiselectable", "false");
        } else {
          this.element.setAttribute("aria-multiselectable", "false");
        }
      }
    };
    ChipList2.prototype.setRtl = function() {
      this.element.classList[this.enableRtl ? "add" : "remove"](classNames.rtl);
    };
    ChipList2.prototype.chipCreation = function(data) {
      var chipListArray = [];
      var attributeArray = [];
      for (var i = 0; i < data.length; i++) {
        var fieldsData = this.getFieldValues(data[i]);
        var attributesValue = fieldsData.htmlAttributes;
        attributeArray.push(attributesValue);
        var chipArray = this.elementCreation(fieldsData);
        var className = (classNames.chip + " " + (fieldsData.enabled ? " " : classNames.disabled) + " " + (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : fieldsData.leadingIconCss ? classNames.iconWrapper : " ") + " " + fieldsData.cssClass).split(" ").filter(function(css) {
          return css;
        });
        if (!this.chipType()) {
          chipListArray = chipArray;
          addClass([this.element], className);
          this.element.setAttribute("aria-label", fieldsData.text);
          if (fieldsData.value) {
            this.element.setAttribute("data-value", fieldsData.value.toString());
          }
        } else {
          var wrapper = this.createElement("DIV", {
            className: className.join(" "),
            attrs: {
              tabIndex: "0",
              role: "option",
              "aria-label": fieldsData.text,
              "aria-selected": "false"
            }
          });
          if (fieldsData.value) {
            wrapper.setAttribute("data-value", fieldsData.value.toString());
          }
          if (fieldsData.enabled) {
            wrapper.setAttribute("aria-disabled", "false");
          } else {
            wrapper.removeAttribute("tabindex");
            wrapper.setAttribute("aria-disabled", "true");
          }
          if (!isNullOrUndefined(attributeArray[i])) {
            if (attributeArray.length > i && Object.keys(attributeArray[i]).length) {
              var htmlAttr = [];
              htmlAttr = Object.keys(attributeArray[i]);
              for (var j = 0; j < htmlAttr.length; j++) {
                wrapper.setAttribute(htmlAttr[j], attributeArray[i][htmlAttr[j]]);
              }
            }
          }
          append(chipArray, wrapper);
          chipListArray.push(wrapper);
        }
      }
      append(chipListArray, this.element);
    };
    ChipList2.prototype.getFieldValues = function(data) {
      var chipEnabled = !(this.enabled.toString() === "false");
      var fields = {
        text: typeof data === "object" ? data.text ? data.text.toString() : this.text.toString() : !this.chipType() ? this.innerText ? this.innerText : this.text.toString() : data.toString(),
        cssClass: typeof data === "object" ? data.cssClass ? data.cssClass.toString() : this.cssClass.toString() : this.cssClass.toString(),
        leadingIconCss: typeof data === "object" ? data.leadingIconCss ? data.leadingIconCss.toString() : this.leadingIconCss.toString() : this.leadingIconCss.toString(),
        avatarIconCss: typeof data === "object" ? data.avatarIconCss ? data.avatarIconCss.toString() : this.avatarIconCss.toString() : this.avatarIconCss.toString(),
        avatarText: typeof data === "object" ? data.avatarText ? data.avatarText.toString() : this.avatarText.toString() : this.avatarText.toString(),
        trailingIconCss: typeof data === "object" ? data.trailingIconCss ? data.trailingIconCss.toString() : this.trailingIconCss.toString() : this.trailingIconCss.toString(),
        enabled: typeof data === "object" ? !isNullOrUndefined(data.enabled) ? data.enabled.toString() === "false" ? false : true : chipEnabled : chipEnabled,
        value: typeof data === "object" ? data.value ? data.value.toString() : null : null,
        leadingIconUrl: typeof data === "object" ? data.leadingIconUrl ? data.leadingIconUrl.toString() : this.leadingIconUrl : this.leadingIconUrl,
        trailingIconUrl: typeof data === "object" ? data.trailingIconUrl ? data.trailingIconUrl.toString() : this.trailingIconUrl : this.trailingIconUrl,
        htmlAttributes: typeof data === "object" ? data.htmlAttributes ? data.htmlAttributes : this.htmlAttributes : this.htmlAttributes
      };
      return fields;
    };
    ChipList2.prototype.elementCreation = function(fields) {
      var chipArray = [];
      if (fields.avatarText || fields.avatarIconCss) {
        var className = (classNames.avatar + " " + fields.avatarIconCss).trim();
        var chipAvatarElement = this.createElement("span", { className });
        chipAvatarElement.innerText = fields.avatarText;
        chipArray.push(chipAvatarElement);
      } else if (fields.leadingIconCss) {
        var className = (classNames.icon + " " + fields.leadingIconCss).trim();
        var chipIconElement = this.createElement("span", { className });
        chipArray.push(chipIconElement);
      } else if (fields.leadingIconUrl) {
        var className = (classNames.avatar + " image-url").trim();
        var chipIconElement = this.createElement("span", { className });
        chipIconElement.style.backgroundImage = "url(" + fields.leadingIconUrl + ")";
        chipArray.push(chipIconElement);
      }
      var chipTextElement = this.createElement("span", { className: classNames.text });
      chipTextElement.innerText = fields.text;
      chipArray.push(chipTextElement);
      if (fields.trailingIconCss || this.chipType() && this.enableDelete) {
        var className = (classNames.delete + " " + (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();
        var chipdeleteElement = this.createElement("span", { className });
        chipArray.push(chipdeleteElement);
      } else if (fields.trailingIconUrl) {
        var className = "trailing-icon-url".trim();
        var chipIconsElement = this.createElement("span", { className });
        chipIconsElement.style.backgroundImage = "url(" + fields.trailingIconUrl + ")";
        chipArray.push(chipIconsElement);
      }
      return chipArray;
    };
    ChipList2.prototype.find = function(fields) {
      var chipData;
      var chipElement = fields instanceof HTMLElement ? fields : this.element.querySelectorAll("." + classNames.chip)[fields];
      if (chipElement && this.chipType()) {
        chipData = { text: void 0, index: void 0, element: void 0, data: void 0 };
        chipData.index = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.chip)).indexOf(chipElement);
        chipData.text = typeof this.chips[chipData.index] === "object" ? this.chips[chipData.index].text ? this.chips[chipData.index].text.toString() : "" : this.chips[chipData.index].toString();
        chipData.data = this.chips[chipData.index];
        chipData.element = chipElement;
      }
      return chipData;
    };
    ChipList2.prototype.add = function(chipsData) {
      var _a;
      if (this.type !== "chip") {
        var fieldData = chipsData instanceof Array ? chipsData : [chipsData];
        (_a = this.chips).push.apply(_a, fieldData);
        this.chipCreation(fieldData);
      }
    };
    ChipList2.prototype.select = function(fields, selectionType) {
      this.onSelect(fields, false, selectionType);
    };
    ChipList2.prototype.multiSelection = function(newProp) {
      var items = this.element.querySelectorAll(".e-chip");
      for (var j = 0; j < newProp.length; j++) {
        if (typeof newProp[j] === "string") {
          for (var k = 0; k < items.length; k++) {
            if (newProp[j] !== k) {
              if (newProp[j] === items[k].attributes[5].value) {
                this.multiSelectedChip.push(k);
                break;
              }
            }
          }
        } else {
          this.multiSelectedChip.push(newProp[j]);
        }
      }
    };
    ChipList2.prototype.onSelect = function(fields, callFromProperty, selectionType) {
      var index;
      var chipNodes;
      var chipValue;
      if (this.chipType() && this.selection !== "None") {
        if (callFromProperty) {
          var chipElements = this.element.querySelectorAll("." + classNames.chip);
          for (var i = 0; i < chipElements.length; i++) {
            chipElements[i].setAttribute("aria-selected", "false");
            chipElements[i].classList.remove(classNames.active);
          }
        }
        var fieldData = fields instanceof Array ? fields : [fields];
        for (var i = 0; i < fieldData.length; i++) {
          var chipElement = fieldData[i] instanceof HTMLElement ? fieldData[i] : this.element.querySelectorAll("." + classNames.chip)[fieldData[i]];
          if (selectionType !== "index") {
            for (var j = 0; j < this.chips.length; j++) {
              chipNodes = this.element.querySelectorAll("." + classNames.chip)[j];
              var fieldsData = this.getFieldValues(this.chips[j]);
              if (selectionType === "value") {
                if (fieldsData.value !== null) {
                  chipValue = chipNodes.dataset.value;
                }
              } else if (selectionType === "text") {
                chipValue = chipNodes.innerText;
              }
              if (chipValue === fieldData[i].toString()) {
                index = j;
                chipElement = this.element.querySelectorAll("." + classNames.chip)[index];
              }
            }
          }
          if (chipElement instanceof HTMLElement) {
            this.selectionHandler(chipElement);
          }
        }
      }
    };
    ChipList2.prototype.remove = function(fields) {
      var _this = this;
      if (this.chipType()) {
        var fieldData = fields instanceof Array ? fields : [fields];
        var chipElements_1 = [];
        var chipCollection_1 = this.element.querySelectorAll("." + classNames.chip);
        fieldData.forEach(function(data) {
          var chipElement = data instanceof HTMLElement ? data : chipCollection_1[data];
          if (chipElement instanceof HTMLElement) {
            chipElements_1.push(chipElement);
          }
        });
        chipElements_1.forEach(function(element2) {
          var chips = _this.element.querySelectorAll("." + classNames.chip);
          var index = Array.prototype.slice.call(chips).indexOf(element2);
          _this.deleteHandler(element2, index);
        });
      }
    };
    ChipList2.prototype.getSelectedChips = function() {
      var selectedChips;
      if (this.chipType() && this.selection !== "None") {
        var selectedItems = { texts: [], Indexes: [], data: [], elements: [] };
        var items = this.element.querySelectorAll("." + classNames.active);
        for (var i = 0; i < items.length; i++) {
          var chip = items[i];
          selectedItems.elements.push(chip);
          var index = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.chip)).indexOf(chip);
          selectedItems.Indexes.push(index);
          selectedItems.data.push(this.chips[index]);
          var text = typeof this.chips[index] === "object" ? this.chips[index].text ? this.chips[index].text.toString() : null : this.chips[index].toString();
          selectedItems.texts.push(text);
        }
        var selectedItem = {
          text: selectedItems.texts[0],
          index: selectedItems.Indexes[0],
          data: selectedItems.data[0],
          element: selectedItems.elements[0]
        };
        selectedChips = !isNullOrUndefined(selectedItem.index) ? this.selection === "Multiple" ? selectedItems : selectedItem : void 0;
      }
      return selectedChips;
    };
    ChipList2.prototype.wireEvent = function(unWireEvent) {
      if (!unWireEvent) {
        EventHandler.add(this.element, "click", this.clickHandler, this);
        EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
        EventHandler.add(this.element, "keydown", this.keyHandler, this);
        EventHandler.add(this.element, "keyup", this.keyHandler, this);
      } else {
        EventHandler.remove(this.element, "click", this.clickHandler);
        EventHandler.remove(this.element, "focusout", this.focusOutHandler);
        EventHandler.remove(this.element, "keydown", this.keyHandler);
        EventHandler.remove(this.element, "keyup", this.keyHandler);
      }
    };
    ChipList2.prototype.keyHandler = function(e) {
      if (e.target.classList.contains(classNames.chip)) {
        if (e.type === "keydown") {
          if (e.keyCode === 13 || e.keyCode === 32) {
            this.clickHandler(e);
          } else if (e.keyCode === 46 && this.enableDelete) {
            this.clickHandler(e, true);
          }
        } else if (e.keyCode === 9) {
          this.focusInHandler(e.target);
        }
      }
    };
    ChipList2.prototype.focusInHandler = function(chipWrapper) {
      if (!chipWrapper.classList.contains(classNames.focused)) {
        chipWrapper.classList.add(classNames.focused);
      }
    };
    ChipList2.prototype.focusOutHandler = function(e) {
      var chipWrapper = closest(e.target, "." + classNames.chip);
      var focusedElement = !this.chipType() ? this.element.classList.contains(classNames.focused) ? this.element : null : this.element.querySelector("." + classNames.focused);
      if (chipWrapper && focusedElement) {
        focusedElement.classList.remove(classNames.focused);
      }
    };
    ChipList2.prototype.clickHandler = function(e, del) {
      var _this = this;
      if (del === void 0) {
        del = false;
      }
      var chipWrapper = closest(e.target, "." + classNames.chip);
      if (chipWrapper) {
        var chipDataArgs = void 0;
        if (this.chipType()) {
          chipDataArgs = this.find(chipWrapper);
        } else {
          var index = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.chip)).indexOf(chipWrapper);
          chipDataArgs = {
            text: this.innerText ? this.innerText : this.text,
            element: chipWrapper,
            data: this.text,
            index
          };
        }
        chipDataArgs.event = e;
        chipDataArgs.cancel = false;
        this.trigger("beforeClick", chipDataArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.clickEventHandler(observedArgs.element, e, del);
          }
        });
      }
    };
    ChipList2.prototype.clickEventHandler = function(chipWrapper, e, del) {
      var _this = this;
      if (this.chipType()) {
        var chipData_1 = this.find(chipWrapper);
        chipData_1.event = e;
        var deleteElement = e.target.classList.contains(classNames.deleteIcon) ? e.target : del ? chipWrapper.querySelector("." + classNames.deleteIcon) : void 0;
        if (deleteElement && this.enableDelete) {
          chipData_1.cancel = false;
          var deletedItemArgs = chipData_1;
          this.trigger("delete", deletedItemArgs, function(observedArgs) {
            if (!observedArgs.cancel) {
              _this.deleteHandler(observedArgs.element, observedArgs.index);
              _this.selectionHandler(chipWrapper);
              chipData_1.selected = observedArgs.element.classList.contains(classNames.active);
              var selectedItemArgs2 = chipData_1;
              _this.trigger("click", selectedItemArgs2);
              var chipElement = _this.element.querySelectorAll("." + classNames.chip)[observedArgs.index];
              if (chipElement) {
                chipElement.focus();
                _this.focusInHandler(chipElement);
              }
            }
          });
        } else if (this.selection !== "None") {
          this.selectionHandler(chipWrapper);
          chipData_1.selected = chipWrapper.classList.contains(classNames.active);
          var selectedItemArgs = chipData_1;
          this.trigger("click", selectedItemArgs);
        } else {
          this.focusInHandler(chipWrapper);
          var clickedItemArgs = chipData_1;
          this.trigger("click", clickedItemArgs);
        }
      } else {
        this.focusInHandler(chipWrapper);
        var clickedItemArgs = {
          text: this.innerText ? this.innerText : this.text,
          element: chipWrapper,
          data: this.text,
          event: e
        };
        this.trigger("click", clickedItemArgs);
      }
    };
    ChipList2.prototype.selectionHandler = function(chipWrapper) {
      if (this.selection === "Single") {
        var activeElement = this.element.querySelector("." + classNames.active);
        if (activeElement && activeElement !== chipWrapper) {
          activeElement.classList.remove(classNames.active);
          activeElement.setAttribute("aria-selected", "false");
        }
        this.setProperties({ selectedChips: null }, true);
      } else {
        this.setProperties({ selectedChips: [] }, true);
      }
      if (chipWrapper.classList.contains(classNames.active)) {
        chipWrapper.classList.remove(classNames.active);
        chipWrapper.setAttribute("aria-selected", "false");
      } else {
        chipWrapper.classList.add(classNames.active);
        chipWrapper.setAttribute("aria-selected", "true");
      }
      this.updateSelectedChips();
    };
    ChipList2.prototype.updateSelectedChips = function() {
      var chipListEle = this.element.querySelectorAll(".e-chip");
      var chipCollIndex = [];
      var chipCollValue = [];
      var chip = null;
      var value;
      for (var i = 0; i < chipListEle.length; i++) {
        var selectedEle = this.element.querySelectorAll(".e-chip")[i];
        if (selectedEle.getAttribute("aria-selected") === "true") {
          value = selectedEle.getAttribute("data-value");
          if (this.selection === "Single" && selectedEle.classList.contains("e-active")) {
            chip = value ? value : i;
            break;
          } else {
            chip = value ? chipCollValue.push(value) : chipCollIndex.push(i);
          }
        }
      }
      this.setProperties({ selectedChips: this.selection === "Single" ? chip : value ? chipCollValue : chipCollIndex }, true);
    };
    ChipList2.prototype.deleteHandler = function(chipWrapper, index) {
      var deletedChipData = this.find(chipWrapper);
      this.chips.splice(index, 1);
      this.setProperties({ chips: this.chips }, true);
      detach(chipWrapper);
      this.trigger("deleted", deletedChipData);
    };
    ChipList2.prototype.destroy = function() {
      removeClass([this.element], [
        classNames.chipSet,
        classNames.chip,
        classNames.rtl,
        classNames.multiSelection,
        classNames.singleSelection,
        classNames.disabled,
        classNames.chipWrapper,
        classNames.iconWrapper,
        classNames.active,
        classNames.focused
      ].concat(this.cssClass.toString().split(" ").filter(function(css) {
        return css;
      })));
      this.removeMultipleAttributes(["tabindex", "role", "aria-label", "aria-multiselectable"], this.element);
      this.wireEvent(true);
      this.rippleFunction();
      _super.prototype.destroy.call(this);
      this.element.innerHTML = "";
      this.element.innerText = this.innerText;
    };
    ChipList2.prototype.removeMultipleAttributes = function(attributes2, element2) {
      attributes2.forEach(function(attr) {
        element2.removeAttribute(attr);
      });
    };
    ChipList2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    ChipList2.prototype.getModuleName = function() {
      return "chip-list";
    };
    ChipList2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var property;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "chips":
          case "text":
          case "avatarText":
          case "avatarIconCss":
          case "leadingIconCss":
          case "trailingIconCss":
          case "selection":
          case "enableDelete":
          case "enabled":
            this.refresh();
            break;
          case "cssClass":
            if (!this.chipType()) {
              removeClass([this.element], oldProp.cssClass.toString().split(" ").filter(function(css) {
                return css;
              }));
              addClass([this.element], newProp.cssClass.toString().split(" ").filter(function(css) {
                return css;
              }));
            } else {
              this.refresh();
            }
            break;
          case "selectedChips":
            removeClass(this.element.querySelectorAll(".e-active"), "e-active");
            if (this.selection === "Multiple") {
              this.multiSelectedChip = [];
              this.multiSelection(newProp.selectedChips);
              this.onSelect(this.multiSelectedChip, true, property);
              this.updateSelectedChips();
            } else {
              this.onSelect(newProp.selectedChips, true, property);
            }
            break;
          case "enableRtl":
            this.setRtl();
            break;
        }
      }
    };
    __decorate6([
      Property([])
    ], ChipList2.prototype, "chips", void 0);
    __decorate6([
      Property("")
    ], ChipList2.prototype, "text", void 0);
    __decorate6([
      Property("")
    ], ChipList2.prototype, "avatarText", void 0);
    __decorate6([
      Property("")
    ], ChipList2.prototype, "avatarIconCss", void 0);
    __decorate6([
      Property("")
    ], ChipList2.prototype, "htmlAttributes", void 0);
    __decorate6([
      Property("")
    ], ChipList2.prototype, "leadingIconCss", void 0);
    __decorate6([
      Property("")
    ], ChipList2.prototype, "trailingIconCss", void 0);
    __decorate6([
      Property("")
    ], ChipList2.prototype, "leadingIconUrl", void 0);
    __decorate6([
      Property("")
    ], ChipList2.prototype, "trailingIconUrl", void 0);
    __decorate6([
      Property("")
    ], ChipList2.prototype, "cssClass", void 0);
    __decorate6([
      Property(true)
    ], ChipList2.prototype, "enabled", void 0);
    __decorate6([
      Property([])
    ], ChipList2.prototype, "selectedChips", void 0);
    __decorate6([
      Property("None")
    ], ChipList2.prototype, "selection", void 0);
    __decorate6([
      Property(false)
    ], ChipList2.prototype, "enableDelete", void 0);
    __decorate6([
      Event()
    ], ChipList2.prototype, "created", void 0);
    __decorate6([
      Event()
    ], ChipList2.prototype, "click", void 0);
    __decorate6([
      Event()
    ], ChipList2.prototype, "beforeClick", void 0);
    __decorate6([
      Event()
    ], ChipList2.prototype, "delete", void 0);
    __decorate6([
      Event()
    ], ChipList2.prototype, "deleted", void 0);
    ChipList2 = __decorate6([
      NotifyPropertyChanges
    ], ChipList2);
    return ChipList2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-buttons/src/chips/chip.js
var Chip = (
  /** @class */
  function() {
    function Chip2() {
    }
    return Chip2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-buttons/src/floating-action-button/floating-action-button.js
var __extends9 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FABHIDDEN = "e-fab-hidden";
var FIXEDFAB = "e-fab-fixed";
var FABVERTDIST = "--fabVertDist";
var FABHORZDIST = "--fabHorzDist";
var FABTOP = "e-fab-top";
var FABBOTTOM = "e-fab-bottom";
var FABRIGHT = "e-fab-right";
var FABLEFT = "e-fab-left";
var FABMIDDLE = "e-fab-middle";
var FABCENTER = "e-fab-center";
var FabPosition;
(function(FabPosition2) {
  FabPosition2["TopLeft"] = "TopLeft";
  FabPosition2["TopCenter"] = "TopCenter";
  FabPosition2["TopRight"] = "TopRight";
  FabPosition2["MiddleLeft"] = "MiddleLeft";
  FabPosition2["MiddleCenter"] = "MiddleCenter";
  FabPosition2["MiddleRight"] = "MiddleRight";
  FabPosition2["BottomLeft"] = "BottomLeft";
  FabPosition2["BottomCenter"] = "BottomCenter";
  FabPosition2["BottomRight"] = "BottomRight";
})(FabPosition || (FabPosition = {}));
var Fab = (
  /** @class */
  function(_super) {
    __extends9(Fab2, _super);
    function Fab2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    Fab2.prototype.render = function() {
      _super.prototype.render.call(this);
      this.initializeFab();
    };
    Fab2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
    };
    Fab2.prototype.getPersistData = function() {
      _super.prototype.getPersistData.call(this);
      return this.addOnPersist([]);
    };
    Fab2.prototype.getModuleName = function() {
      return "fab";
    };
    Fab2.prototype.initializeFab = function() {
      this.element.classList.add("e-" + _super.prototype.getModuleName.call(this));
      this.checkTarget();
      this.setPosition();
      this.setVisibility();
      EventHandler.add(window, "resize", this.resizeHandler, this);
    };
    Fab2.prototype.checkTarget = function() {
      this.isFixed = true;
      if (this.target) {
        this.targetEle = typeof this.target === "string" ? select(this.target) : this.target;
        if (this.targetEle) {
          this.isFixed = false;
          this.targetEle.appendChild(this.element);
        }
      }
      this.element.classList[this.isFixed ? "add" : "remove"](FIXEDFAB);
    };
    Fab2.prototype.setVisibility = function() {
      this.element.classList[this.visible ? "remove" : "add"](FABHIDDEN);
    };
    Fab2.prototype.setPosition = function() {
      this.setVerticalPosition();
      this.setHorizontalPosition();
    };
    Fab2.prototype.setVerticalPosition = function() {
      if (["MiddleLeft", "MiddleRight", "MiddleCenter"].indexOf(this.position) !== -1) {
        var yoffset = ((this.isFixed ? window.innerHeight : this.targetEle.clientHeight) - this.element.offsetHeight) / 2;
        this.element.style.setProperty(FABVERTDIST, yoffset + "px");
        this.element.classList.add(FABMIDDLE);
      }
      this.element.classList.add(["BottomLeft", "BottomCenter", "BottomRight"].indexOf(this.position) !== -1 ? FABBOTTOM : FABTOP);
    };
    Fab2.prototype.setHorizontalPosition = function() {
      if (["TopCenter", "BottomCenter", "MiddleCenter"].indexOf(this.position) !== -1) {
        var xoffset = ((this.isFixed ? window.innerWidth : this.targetEle.clientWidth) - this.element.offsetWidth) / 2;
        this.element.style.setProperty(FABHORZDIST, xoffset + "px");
        this.element.classList.add(FABCENTER);
      }
      var isRight = ["TopRight", "MiddleRight", "BottomRight"].indexOf(this.position) !== -1;
      this.element.classList.add(!(this.enableRtl || isRight) || this.enableRtl && isRight ? FABLEFT : FABRIGHT);
    };
    Fab2.prototype.clearPosition = function() {
      this.element.style.removeProperty(FABVERTDIST);
      this.element.classList.remove(FABTOP, FABBOTTOM, FABMIDDLE);
      this.clearHorizontalPosition();
    };
    Fab2.prototype.clearHorizontalPosition = function() {
      this.element.style.removeProperty(FABHORZDIST);
      this.element.classList.remove(FABRIGHT, FABLEFT, FABCENTER);
    };
    Fab2.prototype.refreshPosition = function() {
      this.resizeHandler();
    };
    Fab2.prototype.resizeHandler = function() {
      this.setPosition();
    };
    Fab2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.element.classList.remove("e-" + _super.prototype.getModuleName.call(this), FIXEDFAB);
      this.clearPosition();
      EventHandler.remove(window, "resize", this.resizeHandler);
    };
    Fab2.prototype.onPropertyChanged = function(newProp, oldProp) {
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "enableRtl":
            this.clearHorizontalPosition();
            this.setHorizontalPosition();
            break;
          case "visible":
            this.setVisibility();
            break;
          case "position":
            this.clearPosition();
            this.setPosition();
            break;
          case "target":
            this.checkTarget();
            this.setPosition();
            break;
        }
      }
    };
    __decorate7([
      Property("BottomRight")
    ], Fab2.prototype, "position", void 0);
    __decorate7([
      Property("")
    ], Fab2.prototype, "target", void 0);
    __decorate7([
      Property(true)
    ], Fab2.prototype, "visible", void 0);
    __decorate7([
      Property(true)
    ], Fab2.prototype, "isPrimary", void 0);
    Fab2 = __decorate7([
      NotifyPropertyChanges
    ], Fab2);
    return Fab2;
  }(Button)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-buttons/src/speed-dial/speed-dial.js
var __extends10 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var topPosition = ["TopLeft", "TopCenter", "TopRight"];
var bottomPosition = ["BottomLeft", "BottomCenter", "BottomRight"];
var leftPosition = ["TopLeft", "MiddleLeft", "BottomLeft"];
var rightPosition = ["TopRight", "MiddleRight", "BottomRight"];
var SDHIDDEN = "e-speeddial-hidden";
var FIXEDSD = "e-speeddial-fixed";
var SPEEDDIAL = "e-speeddial";
var RTLCLASS = "e-rtl";
var HOVERSD = "e-speeddial-hover-open";
var RADIALSD = "e-speeddial-radial";
var LINEARSD = "e-speeddial-linear";
var TEMPLATESD = "e-speeddial-template";
var SDTEMPLATECONTAINER = "e-speeddial-template-container";
var SDOVERLAY = "e-speeddial-overlay";
var SDPOPUP = "e-speeddial-popup";
var SDUL = "e-speeddial-ul";
var SDLI = "e-speeddial-li";
var SDACTIVELI = "e-speeddial-li-active";
var SDLIICON = "e-speeddial-li-icon";
var SDLITEXT = "e-speeddial-li-text";
var SDLITEXTONLY = "e-speeddial-text-li";
var DISABLED3 = "e-disabled";
var SDVERTICALBOTTOM = "e-speeddial-vert-bottom";
var SDVERTICALRIGHT = "e-speeddial-vert-right";
var SDHORIZONTALTOP = "e-speeddial-horz-top";
var SDHORIZONTALLEFT = "e-speeddial-horz-left";
var SDHORIZONTALRIGHT = "e-speeddial-horz-right";
var SDOVERFLOW = "e-speeddial-overflow";
var SDVERTOVERFLOW = "e-speeddial-vert-overflow";
var SDHORZOVERFLOW = "e-speeddial-horz-overflow";
var SDTOP = "e-speeddial-top";
var SDBOTTOM = "e-speeddial-bottom";
var SDRIGHT = "e-speeddial-right";
var SDLEFT = "e-speeddial-left";
var SDMIDDLE = "e-speeddial-middle";
var SDCENTER = "e-speeddial-center";
var SDTOPLEFT = "e-speeddial-top-left";
var SDBOTTOMRIGHT = "e-speeddial-bottom-right";
var SDTOPRIGHT = "e-speeddial-top-right";
var SDBOTTOMLEFT = "e-speeddial-bottom-left";
var SDVERTDIST = "--speeddialVertDist";
var SDHORZDIST = "--speeddialHorzDist";
var SDRADICALANGLE = "--speeddialRadialAngle";
var SDRADICALOFFSET = "--speeddialRadialOffset";
var SDRADICALMINHEIGHT = "--speeddialRadialMinHeight";
var SDRADICALMINWIDTH = "--speeddialRadialMinWidth";
var SDOVERFLOWLIMIT = "--speeddialOverflowLimit";
var SpeedDialMode;
(function(SpeedDialMode2) {
  SpeedDialMode2["Linear"] = "Linear";
  SpeedDialMode2["Radial"] = "Radial";
})(SpeedDialMode || (SpeedDialMode = {}));
var LinearDirection;
(function(LinearDirection2) {
  LinearDirection2["Up"] = "Up";
  LinearDirection2["Down"] = "Down";
  LinearDirection2["Right"] = "Right";
  LinearDirection2["Left"] = "Left";
  LinearDirection2["Auto"] = "Auto";
})(LinearDirection || (LinearDirection = {}));
var RadialDirection;
(function(RadialDirection2) {
  RadialDirection2["Clockwise"] = "Clockwise";
  RadialDirection2["AntiClockwise"] = "AntiClockwise";
  RadialDirection2["Auto"] = "Auto";
})(RadialDirection || (RadialDirection = {}));
var SpeedDialAnimationEffect;
(function(SpeedDialAnimationEffect2) {
  SpeedDialAnimationEffect2["Fade"] = "Fade";
  SpeedDialAnimationEffect2["FadeZoom"] = "FadeZoom";
  SpeedDialAnimationEffect2["FlipLeftDown"] = "FlipLeftDown";
  SpeedDialAnimationEffect2["FlipLeftUp"] = "FlipLeftUp";
  SpeedDialAnimationEffect2["FlipRightDown"] = "FlipRightDown";
  SpeedDialAnimationEffect2["FlipRightUp"] = "FlipRightUp";
  SpeedDialAnimationEffect2["FlipXDown"] = "FlipXDown";
  SpeedDialAnimationEffect2["FlipXUp"] = "FlipXUp";
  SpeedDialAnimationEffect2["FlipYLeft"] = "FlipYLeft";
  SpeedDialAnimationEffect2["FlipYRight"] = "FlipYRight";
  SpeedDialAnimationEffect2["SlideBottom"] = "SlideBottom";
  SpeedDialAnimationEffect2["SlideLeft"] = "SlideLeft";
  SpeedDialAnimationEffect2["SlideRight"] = "SlideRight";
  SpeedDialAnimationEffect2["SlideTop"] = "SlideTop";
  SpeedDialAnimationEffect2["Zoom"] = "Zoom";
  SpeedDialAnimationEffect2["None"] = "None";
})(SpeedDialAnimationEffect || (SpeedDialAnimationEffect = {}));
var SpeedDialAnimationSettings = (
  /** @class */
  function(_super) {
    __extends10(SpeedDialAnimationSettings2, _super);
    function SpeedDialAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Property("Fade")
    ], SpeedDialAnimationSettings2.prototype, "effect", void 0);
    __decorate8([
      Property(400)
    ], SpeedDialAnimationSettings2.prototype, "duration", void 0);
    __decorate8([
      Property(0)
    ], SpeedDialAnimationSettings2.prototype, "delay", void 0);
    return SpeedDialAnimationSettings2;
  }(ChildProperty)
);
var RadialSettings = (
  /** @class */
  function(_super) {
    __extends10(RadialSettings2, _super);
    function RadialSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Property("Auto")
    ], RadialSettings2.prototype, "direction", void 0);
    __decorate8([
      Property(-1)
    ], RadialSettings2.prototype, "endAngle", void 0);
    __decorate8([
      Property("100px")
    ], RadialSettings2.prototype, "offset", void 0);
    __decorate8([
      Property(-1)
    ], RadialSettings2.prototype, "startAngle", void 0);
    return RadialSettings2;
  }(ChildProperty)
);
var SpeedDialItem = (
  /** @class */
  function(_super) {
    __extends10(SpeedDialItem2, _super);
    function SpeedDialItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Property("")
    ], SpeedDialItem2.prototype, "iconCss", void 0);
    __decorate8([
      Property("")
    ], SpeedDialItem2.prototype, "id", void 0);
    __decorate8([
      Property("")
    ], SpeedDialItem2.prototype, "text", void 0);
    __decorate8([
      Property("")
    ], SpeedDialItem2.prototype, "title", void 0);
    __decorate8([
      Property(false)
    ], SpeedDialItem2.prototype, "disabled", void 0);
    return SpeedDialItem2;
  }(ChildProperty)
);
var SpeedDial = (
  /** @class */
  function(_super) {
    __extends10(SpeedDial2, _super);
    function SpeedDial2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isMenuOpen = false;
      _this.isClock = true;
      _this.isVertical = true;
      _this.isControl = false;
      _this.focusedIndex = -1;
      return _this;
    }
    SpeedDial2.prototype.render = function() {
      this.initialize();
    };
    SpeedDial2.prototype.preRender = function() {
      this.keyConfigs = {
        space: "space",
        enter: "enter",
        end: "end",
        home: "home",
        moveDown: "downarrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        esc: "escape"
      };
      this.validateDirection();
    };
    SpeedDial2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    SpeedDial2.prototype.getModuleName = function() {
      return "speed-dial";
    };
    SpeedDial2.prototype.initialize = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      this.fab = new Fab({
        content: this.content,
        cssClass: this.cssClass ? SPEEDDIAL + " " + this.cssClass : SPEEDDIAL,
        disabled: this.disabled,
        enablePersistence: this.enablePersistence,
        enableRtl: this.enableRtl,
        iconCss: this.openIconCss,
        iconPosition: this.iconPosition,
        position: this.position,
        target: this.target,
        visible: this.visible
      });
      this.fab.appendTo(this.element);
      if (this.items.length > 0 || this.popupTemplate) {
        this.createPopup();
      }
      this.wireEvents();
    };
    SpeedDial2.prototype.wireEvents = function() {
      EventHandler.add(window, "resize", this.resizeHandler, this);
      EventHandler.add(document.body, "click", this.bodyClickHandler, this);
      if (this.opensOnHover) {
        this.wireFabHover();
      } else {
        this.wireFabClick();
      }
    };
    SpeedDial2.prototype.wirePopupEvents = function() {
      this.removeRippleEffect = rippleEffect(this.popupEle, { selector: "." + SDLIICON });
      this.keyboardModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      this.popupKeyboardModule = new KeyboardEvents(this.popupEle, {
        keyAction: this.popupKeyActionHandler.bind(this),
        keyConfigs: { esc: "escape" },
        eventName: "keydown"
      });
      EventHandler.add(this.popupEle, "click", this.popupClick, this);
      EventHandler.add(this.popupEle, "mouseleave", this.popupMouseLeaveHandle, this);
    };
    SpeedDial2.prototype.wireFabClick = function() {
      EventHandler.add(this.fab.element, "click", this.fabClick, this);
    };
    SpeedDial2.prototype.wireFabHover = function() {
      this.popupEle.classList.add(HOVERSD);
      EventHandler.add(this.fab.element, "mouseover", this.mouseOverHandle, this);
      EventHandler.add(this.element, "mouseleave", this.mouseLeaveHandle, this);
    };
    SpeedDial2.prototype.createPopup = function() {
      var className = SDPOPUP + " " + SDHIDDEN;
      className = this.enableRtl ? className + " " + RTLCLASS : className;
      className = this.cssClass ? className + " " + this.cssClass : className;
      this.popupEle = this.createElement("div", {
        className,
        id: this.element.id + "_popup"
      });
      this.element.insertAdjacentElement("afterend", this.popupEle);
      attributes(this.element, { "aria-expanded": "false", "aria-haspopup": "true", "aria-controls": this.popupEle.id });
      this.setPopupContent();
      if (this.modal) {
        this.createOverlay();
      }
      this.checkTarget();
      this.setPositionProps();
      this.wirePopupEvents();
    };
    SpeedDial2.prototype.createOverlay = function() {
      this.overlayEle = this.createElement("div", {
        id: this.element.id + "_overlay",
        className: (SDOVERLAY + (this.isMenuOpen ? "" : " " + SDHIDDEN) + " " + this.cssClass).trim()
      });
      this.element.insertAdjacentElement("beforebegin", this.overlayEle);
    };
    SpeedDial2.prototype.popupClick = function() {
      this.isControl = true;
    };
    SpeedDial2.prototype.bodyClickHandler = function(e) {
      if (this.isControl) {
        this.isControl = false;
        return;
      }
      if (this.isMenuOpen) {
        this.hidePopupEle(e);
      }
    };
    SpeedDial2.prototype.fabClick = function(e) {
      this.isControl = true;
      if (this.isMenuOpen) {
        this.hidePopupEle(e);
      } else {
        this.showPopupEle(e);
      }
    };
    SpeedDial2.prototype.setPopupContent = function() {
      this.popupEle.classList.remove(RADIALSD, LINEARSD, TEMPLATESD);
      if (!this.popupTemplate) {
        this.popupEle.classList.add(this.mode === "Radial" ? RADIALSD : LINEARSD);
        this.createUl();
        this.createItems();
      } else {
        this.popupEle.classList.add(TEMPLATESD);
        this.appendTemplate();
      }
      this.renderReactTemplates();
    };
    SpeedDial2.prototype.appendTemplate = function() {
      var templateContainer = this.createElement("div", { className: SDTEMPLATECONTAINER });
      append([templateContainer], this.popupEle);
      var templateFunction = this.getTemplateString(this.popupTemplate);
      append(templateFunction({}, this, "fabPopupTemplate", this.element.id + "popupTemplate", this.isStringTemplate), templateContainer);
    };
    SpeedDial2.prototype.getTemplateString = function(template) {
      var stringContent = "";
      try {
        var tempEle = select(template);
        if (typeof template !== "function" && tempEle) {
          stringContent = tempEle.tagName === "SCRIPT" ? tempEle.innerHTML : tempEle.outerHTML;
        } else {
          stringContent = template;
        }
      } catch (e) {
        stringContent = template;
      }
      return compile(stringContent);
    };
    SpeedDial2.prototype.updatePopupTemplate = function() {
      if (this.popupEle) {
        if (this.popupEle.querySelector("." + SDLI)) {
          this.clearItems();
          this.popupEle.classList.remove(RADIALSD, LINEARSD);
          this.popupEle.classList.add(TEMPLATESD);
        }
        while (this.popupEle.firstElementChild) {
          remove(this.popupEle.firstElementChild);
        }
        this.setPopupContent();
        this.updatePositionProperties();
      } else {
        this.createPopup();
      }
    };
    SpeedDial2.prototype.createUl = function() {
      var popupUlEle = this.createElement("ul", {
        className: SDUL,
        id: this.element.id + "_ul",
        attrs: { "role": "menu" }
      });
      this.popupEle.appendChild(popupUlEle);
    };
    SpeedDial2.prototype.createItems = function() {
      var _this = this;
      this.focusedIndex = -1;
      var ul = this.popupEle.querySelector("." + SDUL);
      var _loop_1 = function(index2) {
        var item = this_1.items[parseInt(index2.toString(), 10)];
        var li = this_1.createElement("li", {
          className: SDLI + " " + SDHIDDEN,
          id: item.id ? item.id : this_1.element.id + "_li_" + index2,
          attrs: { "role": "menuitem" }
        });
        if (item.text) {
          li.setAttribute("aria-label", item.text);
        }
        if (this_1.itemTemplate) {
          var templateFunction = this_1.getTemplateString(this_1.itemTemplate);
          append(templateFunction(item, this_1, "fabItemTemplate", this_1.element.id + "itemTemplate", this_1.isStringTemplate), li);
        } else {
          if (item.iconCss) {
            var iconSpan = this_1.createElement("span", {
              className: SDLIICON + " " + item.iconCss
            });
            li.appendChild(iconSpan);
          }
          if (item.text) {
            var textSpan = this_1.createElement("span", {
              className: SDLITEXT
            });
            textSpan.innerText = item.text;
            li.appendChild(textSpan);
            if (!item.iconCss) {
              li.classList.add(SDLITEXTONLY);
            }
          }
        }
        if (item.disabled) {
          li.classList.add(DISABLED3);
          li.setAttribute("aria-disabled", "true");
        } else {
          EventHandler.add(li, "click", function(e) {
            return _this.triggerItemClick(e, item);
          }, this_1);
        }
        if (item.title) {
          li.setAttribute("title", item.title);
        }
        var eventArgs = { element: li, item };
        this_1.trigger("beforeItemRender", eventArgs, function(args) {
          ul.appendChild(args.element);
        });
      };
      var this_1 = this;
      for (var index = 0; index < this.items.length; index++) {
        _loop_1(index);
      }
    };
    SpeedDial2.prototype.setRTL = function() {
      this.popupEle.classList[this.enableRtl ? "add" : "remove"](RTLCLASS);
      this.clearHorizontalPosition();
      if (!(this.popupTemplate || this.mode === "Radial")) {
        this.setLinearHorizontalPosition();
      } else {
        this.setHorizontalPosition();
      }
    };
    SpeedDial2.prototype.checkTarget = function() {
      this.isFixed = true;
      if (this.target) {
        this.targetEle = typeof this.target === "string" ? select(this.target) : this.target;
        if (this.targetEle) {
          this.targetEle.appendChild(this.element);
          this.isFixed = false;
        }
      }
      if (this.isFixed) {
        if (this.popupEle) {
          this.popupEle.classList.add(FIXEDSD);
        }
        if (this.overlayEle) {
          this.overlayEle.classList.add(FIXEDSD);
        }
      } else {
        if (this.popupEle) {
          this.popupEle.classList.remove(FIXEDSD);
        }
        if (this.overlayEle) {
          this.overlayEle.classList.remove(FIXEDSD);
        }
      }
    };
    SpeedDial2.prototype.setVisibility = function(val) {
      this.setProperties({ visible: val }, true);
      this.fab.setProperties({ visible: val });
    };
    SpeedDial2.prototype.popupMouseLeaveHandle = function(e) {
      var target = e.relatedTarget;
      if (this.opensOnHover && !(target.classList.contains(SPEEDDIAL) || closest(target, "." + SPEEDDIAL))) {
        this.hidePopupEle(e);
      }
    };
    SpeedDial2.prototype.mouseOverHandle = function(e) {
      this.showPopupEle(e);
    };
    SpeedDial2.prototype.mouseLeaveHandle = function(e) {
      var target = e.relatedTarget;
      if (!(target.classList.contains(SDPOPUP) || closest(target, "." + SDPOPUP))) {
        this.hidePopupEle(e);
      }
    };
    SpeedDial2.prototype.popupKeyActionHandler = function(e) {
      switch (e.action) {
        case "esc":
          this.hidePopupEle(e);
          break;
      }
    };
    SpeedDial2.prototype.keyActionHandler = function(e) {
      e.preventDefault();
      switch (e.action) {
        case "enter":
        case "space":
          if (this.isMenuOpen) {
            if (this.focusedIndex !== -1) {
              this.triggerItemClick(e, this.items[this.focusedIndex]);
            } else {
              this.hidePopupEle(e);
            }
          } else {
            this.showPopupEle(e);
          }
          break;
        case "esc":
          this.hidePopupEle(e);
          break;
        default:
          if (this.popupTemplate || !this.isMenuOpen) {
            break;
          }
          switch (e.action) {
            case "end":
              this.focusLastElement();
              break;
            case "home":
              this.focusFirstElement();
              break;
            case "moveRight":
              if (this.mode === "Radial") {
                this.focusLeftRightElement(false);
              } else {
                this.focusLinearElement(false);
              }
              break;
            case "moveDown":
              if (this.mode === "Radial") {
                this.focusUpDownElement(false);
              } else {
                this.focusLinearElement(false);
              }
              break;
            case "moveLeft":
              if (this.mode === "Radial") {
                this.focusLeftRightElement(true);
              } else {
                this.focusLinearElement(true);
              }
              break;
            case "moveUp":
              if (this.mode === "Radial") {
                this.focusUpDownElement(true);
              } else {
                this.focusLinearElement(true);
              }
              break;
          }
          break;
      }
    };
    SpeedDial2.prototype.focusFirstElement = function() {
      var ele = selectAll("." + SDLI, this.popupEle);
      var index = 0;
      while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED3)) {
        index++;
        if (index > ele.length - 1) {
          return;
        }
      }
      this.setFocus(index, ele[parseInt(index.toString(), 10)]);
    };
    SpeedDial2.prototype.focusLastElement = function() {
      var ele = selectAll("." + SDLI, this.popupEle);
      var index = ele.length - 1;
      while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED3)) {
        index--;
        if (index < 0) {
          return;
        }
      }
      this.setFocus(index, ele[parseInt(index.toString(), 10)]);
    };
    SpeedDial2.prototype.focusLinearElement = function(isLeftUp) {
      var isReversed = this.popupEle.classList.contains(SDVERTICALBOTTOM) || this.popupEle.classList.contains(SDHORIZONTALRIGHT);
      if (isReversed !== isLeftUp) {
        this.focusPrevElement();
      } else {
        this.focusNextElement();
      }
    };
    SpeedDial2.prototype.focusLeftRightElement = function(isLeft) {
      var isradialTop = ["TopLeft", "TopCenter", "TopRight", "MiddleLeft"].indexOf(this.position) !== -1;
      if (isradialTop && isLeft !== this.isClock || !isradialTop && isLeft === this.isClock) {
        this.focusPrevElement();
      } else {
        this.focusNextElement();
      }
    };
    SpeedDial2.prototype.focusUpDownElement = function(isUp) {
      var isradialRight = ["TopRight", "MiddleRight", "BottomRight", "BottomCenter"].indexOf(this.position) !== -1;
      if (isradialRight && isUp !== this.isClock || !isradialRight && isUp === this.isClock) {
        this.focusPrevElement();
      } else {
        this.focusNextElement();
      }
    };
    SpeedDial2.prototype.focusPrevElement = function() {
      var ele = selectAll("." + SDLI, this.popupEle);
      var index = this.focusedIndex;
      do {
        index--;
        if (index < 0) {
          this.setFocus(-1);
          return;
        }
      } while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED3));
      this.setFocus(index, ele[parseInt(index.toString(), 10)]);
    };
    SpeedDial2.prototype.focusNextElement = function() {
      var ele = selectAll("." + SDLI, this.popupEle);
      var index = this.focusedIndex;
      do {
        index++;
        if (index > ele.length - 1) {
          return;
        }
      } while (ele[parseInt(index.toString(), 10)].classList.contains(DISABLED3));
      this.setFocus(index, ele[parseInt(index.toString(), 10)]);
    };
    SpeedDial2.prototype.setFocus = function(index, ele) {
      this.removeFocus();
      if (ele) {
        ele.classList.add(SDACTIVELI);
      }
      this.focusedIndex = index;
    };
    SpeedDial2.prototype.removeFocus = function() {
      var preEle = select("." + SDACTIVELI, this.popupEle);
      if (preEle) {
        preEle.classList.remove(SDACTIVELI);
      }
    };
    SpeedDial2.prototype.updatePositionProperties = function() {
      this.hidePopupEle();
      this.clearPosition();
      this.validateDirection();
      this.setPositionProps();
    };
    SpeedDial2.prototype.setPositionProps = function() {
      if (this.popupTemplate) {
        this.setPosition();
      } else if (this.mode === "Radial") {
        this.setRadialPosition();
        this.setPosition();
      } else {
        this.setLinearPosition();
        this.setMaxSize();
      }
    };
    SpeedDial2.prototype.validateDirection = function() {
      switch (this.direction) {
        case "Up":
          this.actualLinDirection = topPosition.indexOf(this.position) !== -1 ? "Auto" : "Up";
          break;
        case "Down":
          this.actualLinDirection = bottomPosition.indexOf(this.position) !== -1 ? "Auto" : "Down";
          break;
        case "Right":
          this.actualLinDirection = rightPosition.indexOf(this.position) !== -1 ? "Auto" : "Right";
          break;
        case "Left":
          this.actualLinDirection = leftPosition.indexOf(this.position) !== -1 ? "Auto" : "Left";
          break;
        case "Auto":
        default:
          this.actualLinDirection = "Auto";
          break;
      }
      this.isVertical = !(this.actualLinDirection === "Left" || this.actualLinDirection === "Right");
    };
    SpeedDial2.prototype.setMaxSize = function() {
      var top = this.element.offsetTop;
      var left = this.element.offsetLeft;
      var bottom = (this.isFixed ? window.innerHeight : this.targetEle.clientHeight) - this.element.offsetTop - this.element.offsetHeight;
      var right = (this.isFixed ? window.innerWidth : this.targetEle.clientWidth) - this.element.offsetLeft - this.element.offsetWidth;
      var limit = 0;
      var popupUlEle = this.popupEle.querySelector("." + SDUL);
      if (this.isVertical) {
        limit = this.actualLinDirection === "Up" || this.actualLinDirection === "Auto" && topPosition.indexOf(this.position) === -1 ? top : bottom;
        if (limit < popupUlEle.offsetHeight) {
          this.popupEle.classList.add(SDOVERFLOW, SDVERTOVERFLOW);
          popupUlEle.style.setProperty(SDOVERFLOWLIMIT, limit + "px");
        }
      } else {
        limit = this.direction === "Right" ? right : left;
        if (limit < popupUlEle.offsetWidth) {
          this.popupEle.classList.add(SDOVERFLOW, SDHORZOVERFLOW);
          popupUlEle.style.setProperty(SDOVERFLOWLIMIT, limit + "px");
        }
      }
    };
    SpeedDial2.prototype.setLinearPosition = function() {
      var vertDist = 0;
      var isTop = this.actualLinDirection === "Down" || this.actualLinDirection === "Auto" && topPosition.indexOf(this.position) !== -1 || !this.isVertical && bottomPosition.indexOf(this.position) === -1;
      if (isTop) {
        vertDist = this.element.offsetTop + (this.isVertical ? this.element.offsetHeight : 0);
        if (!this.isVertical) {
          this.popupEle.classList.add(SDHORIZONTALTOP);
        }
      } else {
        vertDist = this.isFixed ? window.innerHeight : this.targetEle.clientHeight;
        vertDist = vertDist - this.element.offsetTop - (this.isVertical ? 0 : this.element.offsetHeight);
        if (this.isVertical) {
          this.popupEle.classList.add(SDVERTICALBOTTOM);
        }
      }
      this.popupEle.classList.add(isTop ? SDTOP : SDBOTTOM);
      this.popupEle.style.setProperty(SDVERTDIST, vertDist + "px");
      this.setLinearHorizontalPosition();
    };
    SpeedDial2.prototype.setLinearHorizontalPosition = function() {
      if (this.actualLinDirection === "Right" || this.isVertical && rightPosition.indexOf(this.position) === -1) {
        if (this.enableRtl) {
          this.setRight();
        } else {
          this.setLeft();
        }
        if (!this.isVertical) {
          this.popupEle.classList.add(SDHORIZONTALLEFT);
        }
      } else {
        if (this.enableRtl) {
          this.setLeft();
        } else {
          this.setRight();
        }
        this.popupEle.classList.add(this.isVertical ? SDVERTICALRIGHT : SDHORIZONTALRIGHT);
      }
    };
    SpeedDial2.prototype.setLeft = function() {
      var horzDist = this.element.offsetLeft + (this.isVertical ? 0 : this.element.offsetWidth);
      this.popupEle.style.setProperty(SDHORZDIST, horzDist + "px");
      this.popupEle.classList.add(SDLEFT);
    };
    SpeedDial2.prototype.setRight = function() {
      var horzDist = this.isFixed ? window.innerWidth : this.targetEle.clientWidth;
      horzDist = horzDist - this.element.offsetLeft - (this.isVertical ? this.element.offsetWidth : 0);
      this.popupEle.style.setProperty(SDHORZDIST, horzDist + "px");
      this.popupEle.classList.add(SDRIGHT);
    };
    SpeedDial2.prototype.setPosition = function() {
      if (["MiddleLeft", "MiddleRight", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(SDMIDDLE);
        var yoffset = ((this.isFixed ? window.innerHeight : this.targetEle.clientHeight) - this.popupEle.offsetHeight) / 2;
        this.popupEle.style.setProperty(SDVERTDIST, yoffset + "px");
      }
      this.popupEle.classList.add(bottomPosition.indexOf(this.position) === -1 ? SDTOP : SDBOTTOM);
      this.setHorizontalPosition();
    };
    SpeedDial2.prototype.setHorizontalPosition = function() {
      if (["TopCenter", "BottomCenter", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(SDCENTER);
        var xoffset = ((this.isFixed ? window.innerWidth : this.targetEle.clientWidth) - this.popupEle.offsetWidth) / 2;
        this.popupEle.style.setProperty(SDHORZDIST, xoffset + "px");
      }
      var isRight = rightPosition.indexOf(this.position) !== -1;
      this.popupEle.classList.add(!(this.enableRtl || isRight) || this.enableRtl && isRight ? SDLEFT : SDRIGHT);
    };
    SpeedDial2.prototype.setRadialPosition = function() {
      this.setRadialCorner();
      var range = this.getActualRange();
      this.isClock = range.direction === "Clockwise";
      var offset = formatUnit(range.offset);
      var li = selectAll("." + SDLI, this.popupEle);
      this.popupEle.style.setProperty(SDRADICALOFFSET, offset);
      this.popupEle.style.setProperty(SDRADICALMINHEIGHT, li[0].offsetHeight + "px");
      this.popupEle.style.setProperty(SDRADICALMINWIDTH, li[0].offsetWidth + "px");
      var availableAngle = Math.abs(range.endAngle - range.startAngle);
      var gaps = availableAngle === 360 || availableAngle === 0 ? li.length : li.length - 1;
      var perAngle = availableAngle / gaps;
      for (var i = 0; i < li.length; i++) {
        var ele = li[parseInt(i.toString(), 10)];
        var angle = this.isClock ? range.startAngle + perAngle * i : range.startAngle - perAngle * i;
        angle = angle % 360;
        ele.style.setProperty(SDRADICALANGLE, angle + "deg");
      }
    };
    SpeedDial2.prototype.setRadialCorner = function() {
      if (["TopLeft", "TopCenter", "MiddleLeft", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(this.enableRtl ? SDTOPRIGHT : SDTOPLEFT);
      }
      if (["TopRight", "TopCenter", "MiddleRight", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(this.enableRtl ? SDTOPLEFT : SDTOPRIGHT);
      }
      if (["BottomLeft", "BottomCenter", "MiddleLeft", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(this.enableRtl ? SDBOTTOMRIGHT : SDBOTTOMLEFT);
      }
      if (["BottomRight", "BottomCenter", "MiddleRight", "MiddleCenter"].indexOf(this.position) !== -1) {
        this.popupEle.classList.add(this.enableRtl ? SDBOTTOMLEFT : SDBOTTOMRIGHT);
      }
    };
    SpeedDial2.prototype.getActualRange = function() {
      var range = { offset: this.radialSettings.offset };
      var start = this.radialSettings.startAngle;
      var end = this.radialSettings.endAngle;
      var isClockwise;
      switch (this.position) {
        case "TopLeft":
        case "TopRight":
          if ("TopLeft" === this.position !== this.enableRtl) {
            isClockwise = this.radialSettings.direction === "Clockwise";
            this.checkAngleRange(start, end, range, isClockwise, 0, 90, false);
          } else {
            isClockwise = this.radialSettings.direction !== "AntiClockwise";
            this.checkAngleRange(start, end, range, isClockwise, 90, 180, false);
          }
          break;
        case "TopCenter":
          isClockwise = this.radialSettings.direction === "Clockwise";
          this.checkAngleRange(start, end, range, isClockwise, 0, 180, false);
          break;
        case "MiddleLeft":
        case "MiddleRight":
          if ("MiddleLeft" === this.position !== this.enableRtl) {
            isClockwise = this.radialSettings.direction === "Clockwise";
            start = isNullOrUndefined(start) || start < 0 || start > 360 || start > 90 && start < 270 ? isClockwise ? 270 : 90 : start;
            end = isNullOrUndefined(end) || end < 0 || end > 360 || end > 90 && end < 270 ? isClockwise ? 90 : 270 : end;
            start = start < 91 ? start + 360 : start;
            end = end < 91 ? end + 360 : end;
            var switchVal = isClockwise && end < start || !isClockwise && end > start;
            range.startAngle = switchVal ? end : start;
            range.endAngle = switchVal ? start : end;
          } else {
            isClockwise = this.radialSettings.direction !== "AntiClockwise";
            this.checkAngleRange(start, end, range, isClockwise, 90, 270, false);
          }
          break;
        case "MiddleCenter":
          isClockwise = this.radialSettings.direction !== "AntiClockwise";
          start = isNullOrUndefined(start) || start < 0 || start > 360 ? isClockwise ? 0 : 360 : start;
          end = isNullOrUndefined(end) || end < 0 || end > 360 ? isClockwise ? 360 : 0 : end;
          range.startAngle = !isClockwise && start <= end ? start + 360 : start;
          range.endAngle = isClockwise && end <= start ? end + 360 : end;
          break;
        case "BottomLeft":
        case "BottomRight":
          if ("BottomLeft" === this.position !== this.enableRtl) {
            isClockwise = this.radialSettings.direction === "Clockwise";
            this.checkAngleRange(start, end, range, isClockwise, 270, 360, true);
          } else {
            isClockwise = this.radialSettings.direction !== "AntiClockwise";
            this.checkAngleRange(start, end, range, isClockwise, 180, 270, true);
          }
          break;
        case "BottomCenter":
          isClockwise = this.radialSettings.direction !== "AntiClockwise";
          this.checkAngleRange(start, end, range, isClockwise, 180, 360, true);
          break;
      }
      range.direction = isClockwise ? "Clockwise" : "AntiClockwise";
      return range;
    };
    SpeedDial2.prototype.checkAngleRange = function(start, end, range, isClockwise, min, max, check0) {
      start = this.checkAngle(start, isClockwise, min, max, check0);
      end = this.checkAngle(end, !isClockwise, min, max, check0);
      var switchVal = isClockwise && end < start || !isClockwise && end > start;
      range.startAngle = switchVal ? end : start;
      range.endAngle = switchVal ? start : end;
    };
    SpeedDial2.prototype.checkAngle = function(val, isStart, min, max, check0) {
      if (isNullOrUndefined(val) || val < 0 || val > 360) {
        return isStart ? min : max;
      } else {
        val = check0 ? val === 0 ? 360 : val : val === 360 ? 0 : val;
        return val >= min && val <= max ? val : isStart ? min : max;
      }
    };
    SpeedDial2.prototype.clearPosition = function() {
      this.popupEle.style.removeProperty(SDRADICALOFFSET);
      this.popupEle.style.removeProperty(SDRADICALMINHEIGHT);
      this.popupEle.style.removeProperty(SDRADICALMINWIDTH);
      this.popupEle.classList.remove(SDTOPLEFT, SDTOPRIGHT, SDBOTTOMLEFT, SDBOTTOMRIGHT);
      this.popupEle.classList.remove(SDTOP, SDBOTTOM, SDMIDDLE);
      this.popupEle.classList.remove(SDHORIZONTALTOP, SDVERTICALBOTTOM);
      this.popupEle.style.removeProperty(SDVERTDIST);
      this.clearHorizontalPosition();
      this.clearOverflow();
    };
    SpeedDial2.prototype.clearHorizontalPosition = function() {
      this.popupEle.style.removeProperty(SDHORZDIST);
      this.popupEle.classList.remove(SDRIGHT, SDLEFT, SDCENTER);
      this.popupEle.classList.remove(SDVERTICALRIGHT, SDHORIZONTALLEFT, SDHORIZONTALRIGHT);
    };
    SpeedDial2.prototype.clearOverflow = function() {
      this.popupEle.classList.remove(SDOVERFLOW, SDVERTOVERFLOW, SDHORZOVERFLOW);
      this.popupEle.style.removeProperty(SDOVERFLOWLIMIT);
    };
    SpeedDial2.prototype.hidePopupEle = function(e) {
      var _this = this;
      if (!this.popupEle || !this.isMenuOpen) {
        return;
      }
      var eventArgs = { element: this.popupEle, event: e, cancel: false };
      this.trigger("beforeClose", eventArgs, function(args) {
        if (args.cancel) {
          return;
        }
        if (_this.animation.effect !== "None") {
          var closeAnimation_1 = {
            name: _this.animation.effect + "Out",
            timingFunction: "easeOut"
          };
          var eleArray_1 = _this.popupTemplate ? [_this.popupEle.firstElementChild] : selectAll("." + SDLI, _this.popupEle);
          var timeOutInterval_1 = _this.animation.duration / (eleArray_1.length + 1);
          closeAnimation_1.duration = 2 * timeOutInterval_1;
          var animateElement_1 = function(curIndex) {
            var ele2 = eleArray_1[parseInt(curIndex.toString(), 10)];
            closeAnimation_1.delay = curIndex === eleArray_1.length - 1 ? _this.animation.delay : 0;
            closeAnimation_1.begin = function() {
              if (curIndex === eleArray_1.length - 1) {
                _this.startHide();
              }
            };
            closeAnimation_1.end = function() {
              ele2.classList.add(SDHIDDEN);
              if (curIndex === 0) {
                _this.endHide();
              }
            };
            new Animation(closeAnimation_1).animate(ele2);
            if (curIndex !== 0) {
              var index_1 = curIndex - 1;
              setTimeout(function() {
                animateElement_1(index_1);
              }, timeOutInterval_1);
            }
          };
          animateElement_1(eleArray_1.length - 1);
        } else {
          _this.startHide();
          if (!_this.popupTemplate) {
            var ele = selectAll("." + SDLI, _this.popupEle);
            ele.forEach(function(element2) {
              element2.classList.add(SDHIDDEN);
            });
          }
          _this.endHide();
        }
      });
    };
    SpeedDial2.prototype.startHide = function() {
      this.element.setAttribute("aria-expanded", "false");
      this.removeFocus();
      this.isMenuOpen = false;
    };
    SpeedDial2.prototype.endHide = function() {
      this.fab.setProperties({ iconCss: this.openIconCss });
      this.popupEle.classList.add(SDHIDDEN);
      if (this.popupTemplate) {
        this.setVisibility(true);
      }
      this.toggleOverlay();
      if (this.popupTemplate) {
        this.popupEle.removeAttribute("tabindex");
      }
      this.trigger("onClose", { element: this.popupEle });
    };
    SpeedDial2.prototype.showPopupEle = function(e) {
      var _this = this;
      if (!this.popupEle || this.isMenuOpen) {
        return;
      }
      var eventArgs = { element: this.popupEle, event: e, cancel: false };
      this.trigger("beforeOpen", eventArgs, function(args) {
        if (args.cancel) {
          return;
        }
        if (_this.animation.effect !== "None") {
          var openAnimation_1 = {
            name: _this.animation.effect + "In",
            timingFunction: "easeIn"
          };
          var eleArray_2 = _this.popupTemplate ? [_this.popupEle.firstElementChild] : selectAll("." + SDLI, _this.popupEle);
          var timeOutInterval_2 = _this.animation.duration / (eleArray_2.length + 1);
          openAnimation_1.duration = 2 * timeOutInterval_2;
          var animateElement_2 = function(curIndex) {
            var ele2 = eleArray_2[parseInt(curIndex.toString(), 10)];
            openAnimation_1.delay = curIndex === 0 ? _this.animation.delay : 0;
            openAnimation_1.begin = function() {
              if (curIndex === 0) {
                _this.startShow();
              }
              ele2.classList.remove(SDHIDDEN);
            };
            openAnimation_1.end = function() {
              if (curIndex === eleArray_2.length - 1) {
                _this.endShow();
              }
            };
            new Animation(openAnimation_1).animate(ele2);
            if (curIndex !== eleArray_2.length - 1) {
              var index_2 = curIndex + 1;
              setTimeout(function() {
                animateElement_2(index_2);
              }, timeOutInterval_2);
            }
          };
          animateElement_2(0);
        } else {
          _this.startShow();
          if (!_this.popupTemplate) {
            var ele = selectAll("." + SDLI, _this.popupEle);
            ele.forEach(function(element2) {
              element2.classList.remove(SDHIDDEN);
            });
          }
          _this.endShow();
        }
      });
    };
    SpeedDial2.prototype.startShow = function() {
      this.element.setAttribute("aria-expanded", "true");
      this.isMenuOpen = true;
      this.toggleOverlay();
      this.popupEle.classList.remove(SDHIDDEN);
      if (this.popupTemplate) {
        this.setVisibility(false);
      }
    };
    SpeedDial2.prototype.endShow = function() {
      if (this.closeIconCss) {
        this.fab.setProperties({ iconCss: this.closeIconCss });
      }
      if (this.popupTemplate) {
        this.popupEle.setAttribute("tabindex", "1");
        this.popupEle.focus();
      }
      this.trigger("onOpen", { element: this.popupEle });
    };
    SpeedDial2.prototype.toggleOverlay = function() {
      if (!this.overlayEle) {
        return;
      }
      this.overlayEle.classList[this.isMenuOpen ? "remove" : "add"](SDHIDDEN);
    };
    SpeedDial2.prototype.removeOverlayEle = function() {
      if (!this.overlayEle) {
        return;
      }
      remove(this.overlayEle);
      this.overlayEle = void 0;
    };
    SpeedDial2.prototype.updatePopupItems = function() {
      if (this.popupEle) {
        this.hidePopupEle();
        this.clearItems();
        this.createItems();
        this.updatePositionProperties();
      } else {
        this.createPopup();
      }
    };
    SpeedDial2.prototype.handleResize = function(e) {
      if (!this.popupEle) {
        return;
      }
      this.hidePopupEle(e);
      this.clearOverflow();
      this.setPositionProps();
    };
    SpeedDial2.prototype.triggerItemClick = function(e, item) {
      var target = e.target;
      target = target.classList.contains(SDLI) ? target : closest(target, "." + SDLI);
      var eventArgs = { element: target, item, event: e };
      this.trigger("clicked", eventArgs);
      this.hidePopupEle(e);
    };
    SpeedDial2.prototype.show = function() {
      this.showPopupEle();
    };
    SpeedDial2.prototype.hide = function() {
      this.hidePopupEle();
    };
    SpeedDial2.prototype.refreshPosition = function() {
      this.fab.refreshPosition();
      this.resizeHandler();
    };
    SpeedDial2.prototype.resizeHandler = function(e) {
      this.handleResize(e);
    };
    SpeedDial2.prototype.clearItems = function() {
      var liList = selectAll("." + SDLI, this.popupEle);
      liList.forEach(function(element2) {
        remove(element2);
      });
    };
    SpeedDial2.prototype.unwireEvents = function() {
      EventHandler.remove(window, "resize", this.resizeHandler);
      EventHandler.remove(document.body, "click", this.bodyClickHandler);
      if (this.opensOnHover) {
        this.unwireFabHover();
      } else {
        this.unwireFabClick();
      }
    };
    SpeedDial2.prototype.unwireFabClick = function() {
      EventHandler.remove(this.fab.element, "click", this.fabClick);
    };
    SpeedDial2.prototype.unwireFabHover = function() {
      this.popupEle.classList.remove(HOVERSD);
      EventHandler.remove(this.fab.element, "mouseover", this.mouseOverHandle);
      EventHandler.remove(this.element, "mouseleave", this.mouseLeaveHandle);
    };
    SpeedDial2.prototype.unwirePopupEvents = function() {
      if (isRippleEnabled) {
        this.removeRippleEffect();
      }
      this.removeRippleEffect = null;
      this.keyboardModule.destroy();
      this.popupKeyboardModule.destroy();
      this.keyboardModule = null;
      this.popupKeyboardModule = null;
      EventHandler.remove(this.popupEle, "click", this.popupClick);
      EventHandler.remove(this.popupEle, "mouseleave", this.popupMouseLeaveHandle);
    };
    SpeedDial2.prototype.destroy = function() {
      var _this = this;
      _super.prototype.destroy.call(this);
      this.unwireEvents();
      ["aria-expanded", "aria-haspopup", "aria-controls"].forEach(function(attr) {
        _this.element.removeAttribute(attr);
      });
      if (this.popupEle) {
        this.unwirePopupEvents();
        remove(this.popupEle);
        this.popupEle = void 0;
      }
      this.removeOverlayEle();
      this.fab.destroy();
      this.fab = void 0;
    };
    SpeedDial2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var fabProplist = ["content", "cssClass", "disabled", "enablePersistence", "enableRtl", "iconPosition", "position", "target", "template", "title", "visible"];
      var fabModel = extend({}, newProp);
      for (var _i = 0, _a = Object.keys(fabModel); _i < _a.length; _i++) {
        var prop = _a[_i];
        if (fabProplist.indexOf(prop) < 0) {
          deleteObject(fabModel, prop);
        }
      }
      this.fab.setProperties(fabModel);
      for (var _b = 0, _c = Object.keys(newProp); _b < _c.length; _b++) {
        var prop = _c[_b];
        switch (prop) {
          case "cssClass":
            if (!this.popupEle) {
              break;
            }
            if (oldProp.cssClass) {
              removeClass(this.overlayEle ? [this.popupEle, this.overlayEle] : [this.popupEle], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass(this.overlayEle ? [this.popupEle, this.overlayEle] : [this.popupEle], newProp.cssClass.split(" "));
            }
            break;
          case "visible":
          case "disabled":
            this.hide();
            break;
          case "enableRtl":
            if (!this.popupEle) {
              break;
            }
            this.setRTL();
            break;
          case "openIconCss":
            if (!this.isMenuOpen) {
              this.fab.setProperties({ iconCss: this.openIconCss });
            }
            break;
          case "closeIconCss":
            if (this.isMenuOpen) {
              this.fab.setProperties({ iconCss: this.closeIconCss });
            }
            break;
          case "position":
            if (!this.popupEle) {
              break;
            }
            this.updatePositionProperties();
            break;
          case "direction":
            if (!this.popupEle || this.popupTemplate) {
              break;
            }
            this.updatePositionProperties();
            break;
          case "popupTemplate":
            this.updatePopupTemplate();
            break;
          case "target":
            this.hidePopupEle();
            this.checkTarget();
            if (this.overlayEle) {
              this.element.insertAdjacentElement("beforebegin", this.overlayEle);
            }
            if (!this.popupEle) {
              break;
            }
            this.element.insertAdjacentElement("afterend", this.popupEle);
            this.updatePositionProperties();
            break;
          case "items":
          case "itemTemplate":
            if (this.popupTemplate) {
              break;
            }
            this.updatePopupItems();
            break;
          case "modal":
            if (newProp.modal) {
              this.createOverlay();
            } else {
              this.removeOverlayEle();
            }
            break;
          case "mode":
            if (!this.popupEle || this.popupTemplate) {
              break;
            }
            this.popupEle.classList.remove(RADIALSD, LINEARSD);
            this.popupEle.classList.add(this.mode === "Radial" ? RADIALSD : LINEARSD);
            this.updatePositionProperties();
            break;
          case "radialSettings":
            if (this.popupEle && this.mode === "Radial" && !this.popupTemplate) {
              this.setRadialPosition();
            }
            break;
          case "opensOnHover":
            if (this.opensOnHover) {
              this.unwireFabClick();
              this.wireFabHover();
            } else {
              this.unwireFabHover();
              this.wireFabClick();
            }
            break;
        }
      }
    };
    __decorate8([
      Complex({}, SpeedDialAnimationSettings)
    ], SpeedDial2.prototype, "animation", void 0);
    __decorate8([
      Property("")
    ], SpeedDial2.prototype, "content", void 0);
    __decorate8([
      Property("")
    ], SpeedDial2.prototype, "closeIconCss", void 0);
    __decorate8([
      Property("")
    ], SpeedDial2.prototype, "cssClass", void 0);
    __decorate8([
      Property("Auto")
    ], SpeedDial2.prototype, "direction", void 0);
    __decorate8([
      Property(false)
    ], SpeedDial2.prototype, "disabled", void 0);
    __decorate8([
      Property("Left")
    ], SpeedDial2.prototype, "iconPosition", void 0);
    __decorate8([
      Collection([], SpeedDialItem)
    ], SpeedDial2.prototype, "items", void 0);
    __decorate8([
      Property("")
    ], SpeedDial2.prototype, "itemTemplate", void 0);
    __decorate8([
      Property("Linear")
    ], SpeedDial2.prototype, "mode", void 0);
    __decorate8([
      Property("")
    ], SpeedDial2.prototype, "openIconCss", void 0);
    __decorate8([
      Property(false)
    ], SpeedDial2.prototype, "opensOnHover", void 0);
    __decorate8([
      Property("BottomRight")
    ], SpeedDial2.prototype, "position", void 0);
    __decorate8([
      Property(false)
    ], SpeedDial2.prototype, "modal", void 0);
    __decorate8([
      Property("")
    ], SpeedDial2.prototype, "popupTemplate", void 0);
    __decorate8([
      Complex({}, RadialSettings)
    ], SpeedDial2.prototype, "radialSettings", void 0);
    __decorate8([
      Property("")
    ], SpeedDial2.prototype, "target", void 0);
    __decorate8([
      Property(true)
    ], SpeedDial2.prototype, "visible", void 0);
    __decorate8([
      Event()
    ], SpeedDial2.prototype, "beforeClose", void 0);
    __decorate8([
      Event()
    ], SpeedDial2.prototype, "beforeItemRender", void 0);
    __decorate8([
      Event()
    ], SpeedDial2.prototype, "beforeOpen", void 0);
    __decorate8([
      Event()
    ], SpeedDial2.prototype, "created", void 0);
    __decorate8([
      Event()
    ], SpeedDial2.prototype, "clicked", void 0);
    __decorate8([
      Event()
    ], SpeedDial2.prototype, "onClose", void 0);
    __decorate8([
      Event()
    ], SpeedDial2.prototype, "onOpen", void 0);
    SpeedDial2 = __decorate8([
      NotifyPropertyChanges
    ], SpeedDial2);
    return SpeedDial2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-popups/src/common/resize.js
var elementClass = ["north-west", "north", "north-east", "west", "east", "south-west", "south", "south-east"];
var RESIZE_HANDLER = "e-resize-handle";
var FOCUSED_HANDLER = "e-focused-handle";
var DIALOG_RESIZABLE = "e-dlg-resizable";
var RESTRICT_LEFT = ["e-restrict-left"];
var RESIZE_WITHIN_VIEWPORT = "e-resize-viewport";
var dialogBorderResize = ["north", "west", "east", "south"];
var targetElement;
var selectedHandler;
var originalWidth = 0;
var originalHeight = 0;
var originalX = 0;
var originalY = 0;
var originalMouseX = 0;
var originalMouseY = 0;
var minHeight;
var maxHeight;
var minWidth;
var maxWidth;
var containerElement;
var resizeStart = null;
var resize = null;
var resizeEnd = null;
var resizeWestWidth;
var setLeft = true;
var previousWidth = 0;
var setWidth = true;
var proxy;
function createResize(args) {
  resizeStart = args.resizeBegin;
  resize = args.resizing;
  resizeEnd = args.resizeComplete;
  targetElement = getDOMElement(args.element);
  containerElement = getDOMElement(args.boundary);
  var directions = args.direction.split(" ");
  for (var i = 0; i < directions.length; i++) {
    if (dialogBorderResize.indexOf(directions[i]) >= 0 && directions[i]) {
      setBorderResizeElm(directions[i]);
    } else if (directions[i].trim() !== "") {
      var resizeHandler = createElement("div", { className: "e-icons " + RESIZE_HANDLER + " e-" + directions[i] });
      targetElement.appendChild(resizeHandler);
    }
  }
  minHeight = args.minHeight;
  minWidth = args.minWidth;
  maxWidth = args.maxWidth;
  maxHeight = args.maxHeight;
  if (args.proxy && args.proxy.element && args.proxy.element.classList.contains("e-dialog")) {
    wireEvents(args.proxy);
  } else {
    wireEvents();
  }
}
function setBorderResizeElm(direction) {
  calculateValues();
  var borderBottom = createElement("span", {
    attrs: {
      "unselectable": "on",
      "contenteditable": "false"
    }
  });
  borderBottom.setAttribute("class", "e-dialog-border-resize e-" + direction);
  if (direction === "south") {
    borderBottom.style.height = "2px";
    borderBottom.style.width = "100%";
    borderBottom.style.bottom = "0px";
    borderBottom.style.left = "0px";
  }
  if (direction === "north") {
    borderBottom.style.height = "2px";
    borderBottom.style.width = "100%";
    borderBottom.style.top = "0px";
    borderBottom.style.left = "0px";
  }
  if (direction === "east") {
    borderBottom.style.height = "100%";
    borderBottom.style.width = "2px";
    borderBottom.style.right = "0px";
    borderBottom.style.top = "0px";
  }
  if (direction === "west") {
    borderBottom.style.height = "100%";
    borderBottom.style.width = "2px";
    borderBottom.style.left = "0px";
    borderBottom.style.top = "0px";
  }
  targetElement.appendChild(borderBottom);
}
function getDOMElement(element2) {
  var domElement;
  if (!isNullOrUndefined(element2)) {
    if (typeof element2 === "string") {
      domElement = document.querySelector(element2);
    } else {
      domElement = element2;
    }
  }
  return domElement;
}
function wireEvents(args) {
  if (isNullOrUndefined(args)) {
    args = this;
  }
  var resizers = targetElement.querySelectorAll("." + RESIZE_HANDLER);
  for (var i = 0; i < resizers.length; i++) {
    selectedHandler = resizers[i];
    EventHandler.add(selectedHandler, "mousedown", onMouseDown, args);
    var eventName = Browser.info.name === "msie" ? "pointerdown" : "touchstart";
    EventHandler.add(selectedHandler, eventName, onTouchStart, args);
  }
  var borderResizers = targetElement.querySelectorAll(".e-dialog-border-resize");
  if (!isNullOrUndefined(borderResizers)) {
    for (var i = 0; i < borderResizers.length; i++) {
      selectedHandler = borderResizers[i];
      EventHandler.add(selectedHandler, "mousedown", onMouseDown, args);
      var eventName = Browser.info.name === "msie" ? "pointerdown" : "touchstart";
      EventHandler.add(selectedHandler, eventName, onTouchStart, args);
    }
  }
}
function getEventType(e) {
  return e.indexOf("mouse") > -1 ? "mouse" : "touch";
}
function onMouseDown(e) {
  e.preventDefault();
  targetElement = e.target.parentElement;
  calculateValues();
  originalMouseX = e.pageX;
  originalMouseY = e.pageY;
  e.target.classList.add(FOCUSED_HANDLER);
  if (!isNullOrUndefined(resizeStart)) {
    proxy = this;
    if (resizeStart(e, proxy) === true) {
      return;
    }
  }
  if (this.targetEle && targetElement && targetElement.querySelector("." + DIALOG_RESIZABLE)) {
    containerElement = this.target === "body" ? null : this.targetEle;
    maxWidth = this.targetEle.clientWidth;
    maxHeight = this.targetEle.clientHeight;
  }
  var target = isNullOrUndefined(containerElement) ? document : containerElement;
  EventHandler.add(target, "mousemove", onMouseMove, this);
  EventHandler.add(document, "mouseup", onMouseUp, this);
  for (var i = 0; i < RESTRICT_LEFT.length; i++) {
    if (targetElement.classList.contains(RESTRICT_LEFT[i])) {
      setLeft = false;
    } else {
      setLeft = true;
    }
  }
}
function onMouseUp(e) {
  var touchMoveEvent = Browser.info.name === "msie" ? "pointermove" : "touchmove";
  var touchEndEvent = Browser.info.name === "msie" ? "pointerup" : "touchend";
  var target = isNullOrUndefined(containerElement) ? document : containerElement;
  var eventName = Browser.info.name === "msie" ? "pointerdown" : "touchstart";
  EventHandler.remove(target, "mousemove", onMouseMove);
  EventHandler.remove(target, touchMoveEvent, onMouseMove);
  EventHandler.remove(target, eventName, onMouseMove);
  if (!isNullOrUndefined(document.body.querySelector("." + FOCUSED_HANDLER))) {
    document.body.querySelector("." + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER);
  }
  if (!isNullOrUndefined(resizeEnd)) {
    proxy = this;
    resizeEnd(e, proxy);
  }
  EventHandler.remove(document, "mouseup", onMouseUp);
  EventHandler.remove(document, touchEndEvent, onMouseUp);
}
function calculateValues() {
  originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue("width").replace("px", ""));
  originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue("height").replace("px", ""));
  originalX = targetElement.getBoundingClientRect().left;
  originalY = targetElement.getBoundingClientRect().top;
}
function onTouchStart(e) {
  targetElement = e.target.parentElement;
  calculateValues();
  var dialogResizeElement = targetElement.classList.contains("e-dialog");
  if ((e.target.classList.contains(RESIZE_HANDLER) || e.target.classList.contains("e-dialog-border-resize")) && dialogResizeElement) {
    e.target.classList.add(FOCUSED_HANDLER);
  }
  var coordinates = e.touches ? e.changedTouches[0] : e;
  originalMouseX = coordinates.pageX;
  originalMouseY = coordinates.pageY;
  if (!isNullOrUndefined(resizeStart)) {
    proxy = this;
    if (resizeStart(e, proxy) === true) {
      return;
    }
  }
  var touchMoveEvent = Browser.info.name === "msie" ? "pointermove" : "touchmove";
  var touchEndEvent = Browser.info.name === "msie" ? "pointerup" : "touchend";
  var target = isNullOrUndefined(containerElement) ? document : containerElement;
  EventHandler.add(target, touchMoveEvent, onMouseMove, this);
  EventHandler.add(document, touchEndEvent, onMouseUp, this);
}
function onMouseMove(e) {
  if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER)) {
    selectedHandler = e.target;
  } else if (!isNullOrUndefined(document.body.querySelector("." + FOCUSED_HANDLER))) {
    selectedHandler = document.body.querySelector("." + FOCUSED_HANDLER);
  }
  if (!isNullOrUndefined(selectedHandler)) {
    var resizeTowards = "";
    for (var i = 0; i < elementClass.length; i++) {
      if (selectedHandler.classList.contains("e-" + elementClass[i])) {
        resizeTowards = elementClass[i];
      }
    }
    if (!isNullOrUndefined(resize)) {
      proxy = this;
      resize(e, proxy);
    }
    switch (resizeTowards) {
      case "south":
        resizeSouth(e);
        break;
      case "north":
        resizeNorth(e);
        break;
      case "west":
        resizeWest(e);
        break;
      case "east":
        resizeEast(e);
        break;
      case "south-east":
        resizeSouth(e);
        resizeEast(e);
        break;
      case "south-west":
        resizeSouth(e);
        resizeWest(e);
        break;
      case "north-east":
        resizeNorth(e);
        resizeEast(e);
        break;
      case "north-west":
        resizeNorth(e);
        resizeWest(e);
        break;
      default:
        break;
    }
  }
}
function getClientRectValues(element2) {
  return element2.getBoundingClientRect();
}
function resizeSouth(e) {
  var documentHeight = document.documentElement.clientHeight;
  var calculateValue = false;
  var coordinates = e.touches ? e.changedTouches[0] : e;
  var currentpageY = coordinates.pageY;
  var targetRectValues = getClientRectValues(targetElement);
  var containerRectValues;
  if (!isNullOrUndefined(containerElement)) {
    containerRectValues = getClientRectValues(containerElement);
  }
  if (!isNullOrUndefined(containerElement)) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && (documentHeight - currentpageY >= 0 || targetRectValues.top < 0)) {
    calculateValue = true;
  }
  var calculatedHeight = originalHeight + (currentpageY - originalMouseY);
  calculatedHeight = calculatedHeight > minHeight ? calculatedHeight : minHeight;
  var containerTop = 0;
  if (!isNullOrUndefined(containerElement)) {
    containerTop = containerRectValues.top;
  }
  var borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;
  var topWithoutborder = targetRectValues.top - containerTop - borderValue / 2;
  topWithoutborder = topWithoutborder < 0 ? 0 : topWithoutborder;
  if (targetRectValues.top > 0 && topWithoutborder + calculatedHeight > maxHeight) {
    calculateValue = false;
    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
      return;
    }
    targetElement.style.height = maxHeight - parseInt(topWithoutborder.toString(), 10) + "px";
    return;
  }
  var targetTop = 0;
  if (calculateValue) {
    if (targetRectValues.top < 0 && documentHeight + (targetRectValues.height + targetRectValues.top) > 0) {
      targetTop = targetRectValues.top;
      if (calculatedHeight + targetTop <= 30) {
        calculatedHeight = targetRectValues.height - (targetRectValues.height + targetRectValues.top) + 30;
      }
    }
    if (calculatedHeight + targetRectValues.top >= maxHeight) {
      targetElement.style.height = targetRectValues.height + (documentHeight - (targetRectValues.height + targetRectValues.top)) + "px";
    }
    var calculatedTop = isNullOrUndefined(containerElement) ? targetTop : topWithoutborder;
    if (calculatedHeight >= minHeight && calculatedHeight + calculatedTop <= maxHeight) {
      targetElement.style.height = calculatedHeight + "px";
    }
  }
}
function resizeNorth(e) {
  var calculateValue = false;
  var boundaryRectValues;
  var pageY = getEventType(e.type) === "mouse" ? e.pageY : e.touches[0].pageY;
  var targetRectValues = getClientRectValues(targetElement);
  if (!isNullOrUndefined(containerElement)) {
    boundaryRectValues = getClientRectValues(containerElement);
  }
  if (!isNullOrUndefined(containerElement) && targetRectValues.top - boundaryRectValues.top > 0) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && pageY > 0) {
    calculateValue = true;
  }
  var currentHeight = originalHeight - (pageY - originalMouseY);
  if (calculateValue) {
    if (currentHeight >= minHeight && currentHeight <= maxHeight) {
      var containerTop = 0;
      if (!isNullOrUndefined(containerElement)) {
        containerTop = boundaryRectValues.top;
      }
      var top_1 = originalY - containerTop + (pageY - originalMouseY);
      top_1 = top_1 > 0 ? top_1 : 1;
      targetElement.style.height = currentHeight + "px";
      targetElement.style.top = top_1 + "px";
    }
  }
}
function resizeWest(e) {
  var documentWidth = document.documentElement.clientWidth;
  var calculateValue = false;
  var rectValues;
  if (!isNullOrUndefined(containerElement)) {
    rectValues = getClientRectValues(containerElement);
  }
  var pageX = getEventType(e.type) === "mouse" ? e.pageX : e.touches[0].pageX;
  var targetRectValues = getClientRectValues(targetElement);
  var borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth;
  var left = isNullOrUndefined(containerElement) ? 0 : rectValues.left;
  var containerWidth = isNullOrUndefined(containerElement) ? 0 : rectValues.width;
  if (isNullOrUndefined(resizeWestWidth)) {
    if (!isNullOrUndefined(containerElement)) {
      resizeWestWidth = targetRectValues.left - left - borderValue / 2 + targetRectValues.width;
      resizeWestWidth = resizeWestWidth + (containerWidth - borderValue - resizeWestWidth);
    } else {
      resizeWestWidth = documentWidth;
    }
  }
  if (!isNullOrUndefined(containerElement) && Math.floor(targetRectValues.left - rectValues.left + targetRectValues.width + (rectValues.right - targetRectValues.right)) - borderValue <= maxWidth) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && pageX >= 0) {
    calculateValue = true;
  }
  var calculatedWidth = originalWidth - (pageX - originalMouseX);
  if (setLeft) {
    calculatedWidth = calculatedWidth > resizeWestWidth ? resizeWestWidth : calculatedWidth;
  }
  if (calculateValue) {
    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
      var containerLeft = 0;
      if (!isNullOrUndefined(containerElement)) {
        containerLeft = rectValues.left;
      }
      var left_1 = originalX - containerLeft + (pageX - originalMouseX);
      left_1 = left_1 > 0 ? left_1 : 1;
      if (calculatedWidth !== previousWidth && setWidth) {
        targetElement.style.width = calculatedWidth + "px";
      }
      if (setLeft) {
        targetElement.style.left = left_1 + "px";
        if (left_1 === 1) {
          setWidth = false;
        } else {
          setWidth = true;
        }
      }
    }
  }
  previousWidth = calculatedWidth;
}
function resizeEast(e) {
  var documentWidth = document.documentElement.clientWidth;
  var calculateValue = false;
  var containerRectValues;
  if (!isNullOrUndefined(containerElement)) {
    containerRectValues = getClientRectValues(containerElement);
  }
  var coordinates = e.touches ? e.changedTouches[0] : e;
  var pageX = coordinates.pageX;
  var targetRectValues = getClientRectValues(targetElement);
  if (!isNullOrUndefined(containerElement) && (targetRectValues.left - containerRectValues.left + targetRectValues.width <= maxWidth || targetRectValues.right - containerRectValues.left >= targetRectValues.width)) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && documentWidth - pageX > 0) {
    calculateValue = true;
  }
  var calculatedWidth = originalWidth + (pageX - originalMouseX);
  var containerLeft = 0;
  if (!isNullOrUndefined(containerElement)) {
    containerLeft = containerRectValues.left;
  }
  if (targetRectValues.left - containerLeft + calculatedWidth > maxWidth) {
    calculateValue = false;
    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
      return;
    }
    targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + "px";
  }
  if (calculateValue) {
    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
      targetElement.style.width = calculatedWidth + "px";
    }
  }
}
function setMinHeight(minimumHeight) {
  minHeight = minimumHeight;
}
function setMaxWidth(value) {
  maxWidth = value;
}
function setMaxHeight(value) {
  maxHeight = value;
}
function removeResize() {
  var handlers = targetElement.querySelectorAll("." + RESIZE_HANDLER);
  for (var i = 0; i < handlers.length; i++) {
    detach(handlers[i]);
  }
  var borderResizers = targetElement.querySelectorAll(".e-dialog-border-resize");
  if (!isNullOrUndefined(borderResizers)) {
    for (var i = 0; i < borderResizers.length; i++) {
      detach(borderResizers[i]);
    }
  }
}

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-popups/src/dialog/dialog.js
var __extends11 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ButtonProps = (
  /** @class */
  function(_super) {
    __extends11(ButtonProps2, _super);
    function ButtonProps2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate9([
      Property(true)
    ], ButtonProps2.prototype, "isFlat", void 0);
    __decorate9([
      Property()
    ], ButtonProps2.prototype, "buttonModel", void 0);
    __decorate9([
      Property("Button")
    ], ButtonProps2.prototype, "type", void 0);
    __decorate9([
      Event()
    ], ButtonProps2.prototype, "click", void 0);
    return ButtonProps2;
  }(ChildProperty)
);
var AnimationSettings = (
  /** @class */
  function(_super) {
    __extends11(AnimationSettings2, _super);
    function AnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate9([
      Property("Fade")
    ], AnimationSettings2.prototype, "effect", void 0);
    __decorate9([
      Property(400)
    ], AnimationSettings2.prototype, "duration", void 0);
    __decorate9([
      Property(0)
    ], AnimationSettings2.prototype, "delay", void 0);
    return AnimationSettings2;
  }(ChildProperty)
);
var ROOT = "e-dialog";
var RTL4 = "e-rtl";
var DLG_HEADER_CONTENT = "e-dlg-header-content";
var DLG_HEADER = "e-dlg-header";
var DLG_FOOTER_CONTENT = "e-footer-content";
var MODAL_DLG = "e-dlg-modal";
var DLG_CONTENT = "e-dlg-content";
var DLG_CLOSE_ICON = "e-icon-dlg-close";
var DLG_OVERLAY = "e-dlg-overlay";
var DLG_TARGET = "e-dlg-target";
var DLG_CONTAINER = "e-dlg-container";
var SCROLL_DISABLED = "e-scroll-disabled";
var DLG_PRIMARY_BUTTON = "e-primary";
var ICON = "e-icons";
var POPUP_ROOT = "e-popup";
var DEVICE = "e-device";
var FULLSCREEN = "e-dlg-fullscreen";
var DLG_CLOSE_ICON_BTN = "e-dlg-closeicon-btn";
var DLG_HIDE = "e-popup-close";
var DLG_SHOW = "e-popup-open";
var DLG_UTIL_DEFAULT_TITLE = "Information";
var DLG_UTIL_ROOT = "e-scroll-disabled";
var DLG_UTIL_ALERT = "e-alert-dialog";
var DLG_UTIL_CONFIRM = "e-confirm-dialog";
var DLG_RESIZABLE = "e-dlg-resizable";
var DLG_RESTRICT_LEFT_VALUE = "e-restrict-left";
var DLG_RESTRICT_WIDTH_VALUE = "e-resize-viewport";
var DLG_REF_ELEMENT = "e-dlg-ref-element";
var DLG_USER_ACTION_CLOSED = "user action";
var DLG_CLOSE_ICON_CLOSED = "close icon";
var DLG_ESCAPE_CLOSED = "escape";
var DLG_OVERLAYCLICK_CLOSED = "overlayClick";
var DLG_DRAG = "e-draggable";
var Dialog = (
  /** @class */
  function(_super) {
    __extends11(Dialog2, _super);
    function Dialog2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.needsID = true;
      return _this;
    }
    Dialog2.prototype.render = function() {
      this.initialize();
      this.initRender();
      this.wireEvents();
      if (this.width === "100%") {
        this.element.style.width = "";
      }
      if (this.minHeight !== "") {
        this.element.style.minHeight = formatUnit(this.minHeight);
      }
      if (this.enableResize) {
        this.setResize();
        if (this.animationSettings.effect === "None") {
          this.getMinHeight();
        }
      }
      this.renderComplete();
    };
    Dialog2.prototype.initializeValue = function() {
      this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
    };
    Dialog2.prototype.preRender = function() {
      var _this = this;
      this.initializeValue();
      this.headerContent = null;
      this.allowMaxHeight = true;
      this.preventVisibility = true;
      this.clonedEle = this.element.cloneNode(true);
      this.closeIconClickEventHandler = function(event) {
        _this.dlgClosedBy = DLG_CLOSE_ICON_CLOSED;
        _this.hide(event);
      };
      this.dlgOverlayClickEventHandler = function(event) {
        _this.dlgClosedBy = DLG_OVERLAYCLICK_CLOSED;
        event.preventFocus = false;
        _this.trigger("overlayClick", event, function(overlayClickEventArgs) {
          if (!overlayClickEventArgs.preventFocus) {
            _this.focusContent();
          }
          _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
        });
      };
      var localeText = { close: "Close" };
      this.l10n = new L10n("dialog", localeText, this.locale);
      this.checkPositionData();
      if (isNullOrUndefined(this.target)) {
        var prevOnChange = this.isProtectedOnChange;
        this.isProtectedOnChange = true;
        this.target = document.body;
        this.isProtectedOnChange = prevOnChange;
      }
    };
    Dialog2.prototype.updatePersistData = function() {
      if (this.enablePersistence) {
        this.setProperties({
          width: parseFloat(this.element.style.width),
          height: parseFloat(this.element.style.height),
          position: { X: parseFloat(this.dragObj.element.style.left), Y: parseFloat(this.dragObj.element.style.top) }
        }, true);
      }
    };
    Dialog2.prototype.isNumberValue = function(value) {
      var isNumber = /^[-+]?\d*\.?\d+$/.test(value);
      return isNumber;
    };
    Dialog2.prototype.checkPositionData = function() {
      if (!isNullOrUndefined(this.position)) {
        if (!isNullOrUndefined(this.position.X) && typeof this.position.X !== "number") {
          var isNumber = this.isNumberValue(this.position.X);
          if (isNumber) {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            this.position.X = parseFloat(this.position.X);
            this.isProtectedOnChange = prevOnChange;
          }
        }
        if (!isNullOrUndefined(this.position.Y) && typeof this.position.Y !== "number") {
          var isNumber = this.isNumberValue(this.position.Y);
          if (isNumber) {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            this.position.Y = parseFloat(this.position.Y);
            this.isProtectedOnChange = prevOnChange;
          }
        }
      }
    };
    Dialog2.prototype.getEle = function(list, selector) {
      var element2 = void 0;
      for (var i = 0; i < list.length; i++) {
        if (list[i].classList.contains(selector)) {
          element2 = list[i];
          break;
        }
      }
      return element2;
    };
    Dialog2.prototype.getMinHeight = function() {
      var computedHeaderHeight = "0px";
      var computedFooterHeight = "0px";
      if (!isNullOrUndefined(this.element.querySelector("." + DLG_HEADER_CONTENT))) {
        computedHeaderHeight = getComputedStyle(this.headerContent).height;
      }
      var footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);
      if (!isNullOrUndefined(footerEle)) {
        computedFooterHeight = getComputedStyle(footerEle).height;
      }
      var headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf("p")), 10);
      var footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf("p")), 10);
      setMinHeight(headerHeight + 30 + (isNaN(footerHeight) ? 0 : footerHeight));
      return headerHeight + 30 + footerHeight;
    };
    Dialog2.prototype.onResizeStart = function(args, dialogObj) {
      dialogObj.trigger("resizeStart", args);
      return args.cancel;
    };
    Dialog2.prototype.onResizing = function(args, dialogObj) {
      dialogObj.trigger("resizing", args);
    };
    Dialog2.prototype.onResizeComplete = function(args, dialogObj) {
      dialogObj.trigger("resizeStop", args);
      this.updatePersistData();
    };
    Dialog2.prototype.setResize = function() {
      if (this.enableResize) {
        if (this.isBlazorServerRender() && !isNullOrUndefined(this.element.querySelector(".e-icons.e-resize-handle"))) {
          return;
        }
        this.element.classList.add(DLG_RESIZABLE);
        var computedHeight = getComputedStyle(this.element).minHeight;
        var computedWidth = getComputedStyle(this.element).minWidth;
        var direction = "";
        for (var i = 0; i < this.resizeHandles.length; i++) {
          if (this.resizeHandles[i] === "All") {
            direction = "south north east west north-east north-west south-east south-west";
            break;
          } else {
            var directionValue = "";
            switch (this.resizeHandles[i].toString()) {
              case "SouthEast":
                directionValue = "south-east";
                break;
              case "SouthWest":
                directionValue = "south-west";
                break;
              case "NorthEast":
                directionValue = "north-east";
                break;
              case "NorthWest":
                directionValue = "north-west";
                break;
              default:
                directionValue = this.resizeHandles[i].toString();
                break;
            }
            direction += directionValue.toLocaleLowerCase() + " ";
          }
        }
        if (this.enableRtl && direction.trim() === "south-east") {
          direction = "south-west";
        } else if (this.enableRtl && direction.trim() === "south-west") {
          direction = "south-east";
        }
        if (this.isModal && this.enableRtl) {
          this.element.classList.add(DLG_RESTRICT_LEFT_VALUE);
        } else if (this.isModal && this.target === document.body) {
          this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE);
        }
        createResize({
          element: this.element,
          direction,
          minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf("p")), 10),
          maxHeight: this.targetEle.clientHeight,
          minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf("p")), 10),
          maxWidth: this.targetEle.clientWidth,
          boundary: this.target === document.body ? null : this.targetEle,
          resizeBegin: this.onResizeStart.bind(this),
          resizeComplete: this.onResizeComplete.bind(this),
          resizing: this.onResizing.bind(this),
          proxy: this
        });
        this.wireWindowResizeEvent();
      } else {
        removeResize();
        this.unWireWindowResizeEvent();
        if (this.isModal) {
          this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
        } else {
          this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE);
        }
        this.element.classList.remove(DLG_RESIZABLE);
      }
    };
    Dialog2.prototype.getFocusElement = function(target) {
      var value = 'input,select,textarea,button:enabled,a,[contenteditable="true"],[tabindex]';
      var items = target.querySelectorAll(value);
      return { element: items[items.length - 1] };
    };
    Dialog2.prototype.keyDown = function(event) {
      var _this = this;
      if (event.keyCode === 9) {
        if (this.isModal) {
          var buttonObj = void 0;
          if (!isNullOrUndefined(this.btnObj)) {
            buttonObj = this.btnObj[this.btnObj.length - 1];
          }
          if (isNullOrUndefined(this.btnObj) && !isNullOrUndefined(this.ftrTemplateContent)) {
            buttonObj = this.getFocusElement(this.ftrTemplateContent);
          }
          if (isNullOrUndefined(this.btnObj) && isNullOrUndefined(this.ftrTemplateContent) && !isNullOrUndefined(this.contentEle)) {
            buttonObj = this.getFocusElement(this.contentEle);
          }
          if (!isNullOrUndefined(buttonObj) && document.activeElement === buttonObj.element && !event.shiftKey) {
            event.preventDefault();
            this.focusableElements(this.element).focus();
          }
          if (document.activeElement === this.focusableElements(this.element) && event.shiftKey) {
            event.preventDefault();
            if (!isNullOrUndefined(buttonObj)) {
              buttonObj.element.focus();
            }
          }
        }
      }
      var element2 = document.activeElement;
      var isTagName = ["input", "textarea"].indexOf(element2.tagName.toLowerCase()) > -1;
      var isContentEdit = false;
      if (!isTagName) {
        isContentEdit = element2.hasAttribute("contenteditable") && element2.getAttribute("contenteditable") === "true";
      }
      if (event.keyCode === 27 && this.closeOnEscape) {
        this.dlgClosedBy = DLG_ESCAPE_CLOSED;
        var query = document.querySelector(".e-popup-open:not(.e-dialog)");
        if (!(!isNullOrUndefined(query) && !query.classList.contains("e-toolbar-pop"))) {
          this.hide(event);
        }
      }
      if (event.keyCode === 13 && !event.ctrlKey && element2.tagName.toLowerCase() !== "textarea" && isTagName && !isNullOrUndefined(this.primaryButtonEle) || event.keyCode === 13 && event.ctrlKey && (element2.tagName.toLowerCase() === "textarea" || isContentEdit) && !isNullOrUndefined(this.primaryButtonEle)) {
        var buttonIndex_1;
        var firstPrimary = this.buttons.some(function(data, index) {
          buttonIndex_1 = index;
          var buttonModel = data.buttonModel;
          return !isNullOrUndefined(buttonModel) && buttonModel.isPrimary === true;
        });
        if (firstPrimary && typeof this.buttons[buttonIndex_1].click === "function") {
          setTimeout(function() {
            _this.buttons[buttonIndex_1].click.call(_this, event);
          });
        }
      }
    };
    Dialog2.prototype.initialize = function() {
      if (!isNullOrUndefined(this.target)) {
        this.targetEle = typeof this.target === "string" ? document.querySelector(this.target) : this.target;
      }
      if (!this.isBlazorServerRender()) {
        addClass([this.element], ROOT);
      }
      if (Browser.isDevice) {
        addClass([this.element], DEVICE);
      }
      if (!this.isBlazorServerRender()) {
        this.setCSSClass();
      }
      this.setMaxHeight();
    };
    Dialog2.prototype.initRender = function() {
      var _this = this;
      this.initialRender = true;
      if (!this.isBlazorServerRender()) {
        attributes(this.element, { role: "dialog" });
      }
      if (this.zIndex === 1e3) {
        this.setzIndex(this.element, false);
        this.calculatezIndex = true;
      } else {
        this.calculatezIndex = false;
      }
      if (this.isBlazorServerRender() && isNullOrUndefined(this.headerContent)) {
        this.headerContent = this.element.getElementsByClassName("e-dlg-header-content")[0];
      }
      if (this.isBlazorServerRender() && isNullOrUndefined(this.contentEle)) {
        this.contentEle = this.element.querySelector("#" + this.element.id + "_dialog-content");
      }
      if (!this.isBlazorServerRender()) {
        this.setTargetContent();
        if (this.header !== "" && !isNullOrUndefined(this.header)) {
          this.setHeader();
        }
        this.renderCloseIcon();
        this.setContent();
        if (this.footerTemplate !== "" && !isNullOrUndefined(this.footerTemplate)) {
          this.setFooterTemplate();
        } else if (!isNullOrUndefined(this.buttons[0].buttonModel)) {
          this.setButton();
        }
      }
      if (this.isBlazorServerRender()) {
        if (!isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === "") {
          this.setButton();
        }
      }
      if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {
        this.setAllowDragging();
      }
      if (!this.isBlazorServerRender()) {
        attributes(this.element, { "aria-modal": this.isModal ? "true" : "false" });
        if (this.isModal) {
          this.setIsModal();
        }
      }
      if (this.isBlazorServerRender() && isNullOrUndefined(this.dlgContainer)) {
        this.dlgContainer = this.element.parentElement;
        for (var i = 0, childNodes = this.dlgContainer.children; i < childNodes.length; i++) {
          if (childNodes[i].classList.contains("e-dlg-overlay")) {
            this.dlgOverlay = childNodes[i];
          }
        }
      }
      if (this.element.classList.contains(DLG_UTIL_ALERT) !== true && this.element.classList.contains(DLG_UTIL_CONFIRM) !== true && !isNullOrUndefined(this.element.parentElement)) {
        var parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;
        this.refElement = this.createElement("div", { className: DLG_REF_ELEMENT });
        parentEle.insertBefore(this.refElement, this.isModal ? this.dlgContainer : this.element);
      }
      if (!isNullOrUndefined(this.targetEle)) {
        this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);
      }
      this.popupObj = new Popup(this.element, {
        height: this.height,
        width: this.width,
        zIndex: this.zIndex,
        relateTo: this.target,
        actionOnScroll: "none",
        enableRtl: this.enableRtl,
        // eslint-disable-next-line
        open: function(event) {
          var eventArgs = {
            container: _this.isModal ? _this.dlgContainer : _this.element,
            element: _this.element,
            target: _this.target,
            preventFocus: false
          };
          if (_this.enableResize) {
            _this.resetResizeIcon();
          }
          _this.trigger("open", eventArgs, function(openEventArgs) {
            if (!openEventArgs.preventFocus) {
              _this.focusContent();
            }
          });
        },
        // eslint-disable-next-line
        close: function(event) {
          if (_this.isModal) {
            addClass([_this.dlgOverlay], "e-fade");
          }
          _this.unBindEvent(_this.element);
          if (_this.isModal) {
            _this.dlgContainer.style.display = "none";
          }
          _this.trigger("close", _this.closeArgs);
          var activeEle = document.activeElement;
          if (!isNullOrUndefined(activeEle) && !isNullOrUndefined(activeEle.blur)) {
            activeEle.blur();
          }
          if (!isNullOrUndefined(_this.storeActiveElement) && !isNullOrUndefined(_this.storeActiveElement.focus)) {
            _this.storeActiveElement.focus();
          }
        }
      });
      this.positionChange();
      this.setEnableRTL();
      if (!this.isBlazorServerRender()) {
        addClass([this.element], DLG_HIDE);
        if (this.isModal) {
          this.setOverlayZindex();
        }
      }
      if (this.visible) {
        this.show();
      } else {
        if (this.isModal) {
          this.dlgOverlay.style.display = "none";
        }
      }
      this.initialRender = false;
    };
    Dialog2.prototype.resetResizeIcon = function() {
      var dialogConHeight = this.getMinHeight();
      if (this.targetEle.offsetHeight < dialogConHeight) {
        var className = this.enableRtl ? "e-south-west" : "e-south-east";
        var resizeIcon = this.element.querySelector("." + className);
        if (!isNullOrUndefined(resizeIcon)) {
          resizeIcon.style.bottom = "-" + dialogConHeight.toString() + "px";
        }
      }
    };
    Dialog2.prototype.setOverlayZindex = function(zIndexValue) {
      var zIndex;
      if (isNullOrUndefined(zIndexValue)) {
        zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;
      } else {
        zIndex = zIndexValue;
      }
      this.dlgOverlay.style.zIndex = (zIndex - 1).toString();
      this.dlgContainer.style.zIndex = zIndex.toString();
    };
    Dialog2.prototype.positionChange = function() {
      if (this.isModal) {
        if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
          this.setPopupPosition();
        } else if (!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)) || isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
          this.setPopupPosition();
        } else {
          this.element.style.top = "0px";
          this.element.style.left = "0px";
          this.dlgContainer.classList.add("e-dlg-" + this.position.X + "-" + this.position.Y);
        }
      } else {
        this.setPopupPosition();
      }
    };
    Dialog2.prototype.setPopupPosition = function() {
      this.popupObj.setProperties({
        position: {
          X: this.position.X,
          Y: this.position.Y
        }
      });
    };
    Dialog2.prototype.setAllowDragging = function() {
      var _this = this;
      var handleContent = "." + DLG_HEADER_CONTENT;
      if (!this.element.classList.contains(DLG_DRAG)) {
        this.dragObj = new Draggable(this.element, {
          clone: false,
          isDragScroll: true,
          abort: ".e-dlg-closeicon-btn",
          handle: handleContent,
          dragStart: function(event) {
            _this.trigger("dragStart", event, function(dragEventArgs) {
              if (isBlazor()) {
                dragEventArgs.bindEvents(event.dragElement);
              }
            });
          },
          dragStop: function(event) {
            if (_this.isModal) {
              if (!isNullOrUndefined(_this.position)) {
                _this.dlgContainer.classList.remove("e-dlg-" + _this.position.X + "-" + _this.position.Y);
              }
              _this.element.style.position = "relative";
            }
            _this.trigger("dragStop", event);
            _this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
            _this.updatePersistData();
          },
          drag: function(event) {
            _this.trigger("drag", event);
          }
        });
        if (!isNullOrUndefined(this.targetEle)) {
          this.dragObj.dragArea = this.targetEle;
        }
      }
    };
    Dialog2.prototype.setButton = function() {
      if (!this.isBlazorServerRender()) {
        this.buttonContent = [];
        this.btnObj = [];
        var primaryBtnFlag = true;
        for (var i = 0; i < this.buttons.length; i++) {
          var buttonType = !isNullOrUndefined(this.buttons[i].type) ? this.buttons[i].type.toLowerCase() : "button";
          var btn = this.createElement("button", { className: this.cssClass, attrs: { type: buttonType } });
          this.buttonContent.push(btn.outerHTML);
        }
        this.setFooterTemplate();
      }
      var footerBtn;
      for (var i = 0, childNodes = this.element.children; i < childNodes.length; i++) {
        if (childNodes[i].classList.contains(DLG_FOOTER_CONTENT)) {
          footerBtn = childNodes[i].querySelectorAll("button");
        }
      }
      for (var i = 0; i < this.buttons.length; i++) {
        if (!this.isBlazorServerRender()) {
          this.btnObj[i] = new Button(this.buttons[i].buttonModel);
        }
        if (this.isBlazorServerRender()) {
          this.ftrTemplateContent = this.element.querySelector("." + DLG_FOOTER_CONTENT);
        }
        if (!isNullOrUndefined(this.ftrTemplateContent) && footerBtn.length > 0) {
          if (typeof this.buttons[i].click === "function") {
            EventHandler.add(footerBtn[i], "click", this.buttons[i].click, this);
          }
          if (typeof this.buttons[i].click === "object") {
            EventHandler.add(footerBtn[i], "click", this.buttonClickHandler.bind(this, i), this);
          }
        }
        if (!this.isBlazorServerRender() && !isNullOrUndefined(this.ftrTemplateContent)) {
          this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]);
          if (this.buttons[i].isFlat) {
            this.btnObj[i].element.classList.add("e-flat");
          }
          this.primaryButtonEle = this.element.getElementsByClassName("e-primary")[0];
        }
      }
    };
    Dialog2.prototype.buttonClickHandler = function(index) {
      this.trigger("buttons[" + index + "].click", {});
    };
    Dialog2.prototype.setContent = function() {
      this.contentEle = this.createElement("div", { className: DLG_CONTENT, id: this.element.id + "_dialog-content" });
      if (this.innerContentElement) {
        this.contentEle.appendChild(this.innerContentElement);
      } else if (!isNullOrUndefined(this.content) && this.content !== "" || !this.initialRender) {
        var blazorContain = Object.keys(window);
        if (typeof this.content === "string" && !isBlazor()) {
          this.setTemplate(this.content, this.contentEle, "content");
        } else if (this.content instanceof HTMLElement) {
          this.contentEle.appendChild(this.content);
        } else {
          this.setTemplate(this.content, this.contentEle, "content");
        }
      }
      if (!isNullOrUndefined(this.headerContent)) {
        this.element.insertBefore(this.contentEle, this.element.children[1]);
      } else {
        this.element.insertBefore(this.contentEle, this.element.children[0]);
      }
      if (this.height === "auto") {
        if (!this.isBlazorServerRender() && Browser.isIE && this.element.style.width === "" && !isNullOrUndefined(this.width)) {
          this.element.style.width = formatUnit(this.width);
        }
        this.setMaxHeight();
      }
    };
    Dialog2.prototype.setTemplate = function(template, toElement, prop) {
      var templateFn;
      var templateProps;
      var blazorContain = Object.keys(window);
      if (toElement.classList.contains(DLG_HEADER)) {
        templateProps = this.element.id + "header";
      } else if (toElement.classList.contains(DLG_FOOTER_CONTENT)) {
        templateProps = this.element.id + "footerTemplate";
      } else {
        templateProps = this.element.id + "content";
      }
      var templateValue;
      if (!isNullOrUndefined(template.outerHTML)) {
        toElement.appendChild(template);
      } else if (typeof template === "string" || typeof template !== "string" || isBlazor() && !this.isStringTemplate) {
        if (typeof template === "string") {
          template = this.sanitizeHelper(template);
        }
        if (this.isVue || typeof template !== "string") {
          templateFn = compile(template);
          templateValue = template;
        } else {
          toElement.innerHTML = template;
        }
      }
      var fromElements = [];
      if (!isNullOrUndefined(templateFn)) {
        var isString = isBlazor() && !this.isStringTemplate && templateValue.indexOf("<div>Blazor") === 0 ? this.isStringTemplate : true;
        for (var _i = 0, _a = templateFn({}, this, prop, templateProps, isString); _i < _a.length; _i++) {
          var item = _a[_i];
          fromElements.push(item);
        }
        append([].slice.call(fromElements), toElement);
      }
    };
    Dialog2.prototype.sanitizeHelper = function(value) {
      if (this.enableHtmlSanitizer) {
        var dialogItem = SanitizeHtmlHelper.beforeSanitize();
        var beforeEvent = {
          cancel: false,
          helper: null
        };
        extend(dialogItem, dialogItem, beforeEvent);
        this.trigger("beforeSanitizeHtml", dialogItem);
        if (dialogItem.cancel && !isNullOrUndefined(dialogItem.helper)) {
          value = dialogItem.helper(value);
        } else if (!dialogItem.cancel) {
          value = SanitizeHtmlHelper.serializeValue(dialogItem, value);
        }
      }
      return value;
    };
    Dialog2.prototype.setMaxHeight = function() {
      if (!this.allowMaxHeight) {
        return;
      }
      var display = this.element.style.display;
      this.element.style.display = "none";
      this.element.style.maxHeight = !isNullOrUndefined(this.target) && this.targetEle.offsetHeight < window.innerHeight ? this.targetEle.offsetHeight - 20 + "px" : window.innerHeight - 20 + "px";
      this.element.style.display = display;
      if (Browser.isIE && this.height === "auto" && !isNullOrUndefined(this.contentEle) && this.element.offsetHeight < this.contentEle.offsetHeight) {
        this.element.style.height = "inherit";
      }
    };
    Dialog2.prototype.setEnableRTL = function() {
      if (!this.isBlazorServerRender()) {
        this.enableRtl ? addClass([this.element], RTL4) : removeClass([this.element], RTL4);
      }
      if (!isNullOrUndefined(this.element.querySelector(".e-resize-handle"))) {
        removeResize();
        this.setResize();
      }
    };
    Dialog2.prototype.setTargetContent = function() {
      var _this = this;
      if (isNullOrUndefined(this.content) || this.content === "") {
        var isContent = this.element.innerHTML.replace(/\s|<(\/?|\/?)(!--!--)>/g, "") !== "";
        if (this.element.children.length > 0 || isContent) {
          this.innerContentElement = document.createDocumentFragment();
          [].slice.call(this.element.childNodes).forEach(function(el) {
            if (el.nodeType !== 8) {
              _this.innerContentElement.appendChild(el);
            }
          });
        }
      }
    };
    Dialog2.prototype.setHeader = function() {
      if (this.headerEle) {
        this.headerEle.innerHTML = "";
      } else {
        this.headerEle = this.createElement("div", { id: this.element.id + "_title", className: DLG_HEADER });
      }
      this.createHeaderContent();
      this.headerContent.appendChild(this.headerEle);
      this.setTemplate(this.header, this.headerEle, "header");
      attributes(this.element, { "aria-labelledby": this.element.id + "_title" });
      this.element.insertBefore(this.headerContent, this.element.children[0]);
      if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {
        this.setAllowDragging();
      }
    };
    Dialog2.prototype.setFooterTemplate = function() {
      if (this.ftrTemplateContent) {
        this.ftrTemplateContent.innerHTML = "";
      } else {
        this.ftrTemplateContent = this.createElement("div", {
          className: DLG_FOOTER_CONTENT
        });
      }
      if (this.footerTemplate !== "" && !isNullOrUndefined(this.footerTemplate)) {
        this.setTemplate(this.footerTemplate, this.ftrTemplateContent, "footerTemplate");
      } else {
        this.ftrTemplateContent.innerHTML = this.buttonContent.join("");
      }
      this.element.appendChild(this.ftrTemplateContent);
    };
    Dialog2.prototype.createHeaderContent = function() {
      if (isNullOrUndefined(this.headerContent)) {
        this.headerContent = this.createElement("div", { id: this.element.id + "_dialog-header", className: DLG_HEADER_CONTENT });
      }
    };
    Dialog2.prototype.renderCloseIcon = function() {
      if (this.showCloseIcon) {
        this.closeIcon = this.createElement("button", { className: DLG_CLOSE_ICON_BTN, attrs: { type: "button" } });
        this.closeIconBtnObj = new Button({ cssClass: "e-flat", iconCss: DLG_CLOSE_ICON + " " + ICON });
        this.closeIconTitle();
        if (!isNullOrUndefined(this.headerContent)) {
          prepend([this.closeIcon], this.headerContent);
        } else {
          this.createHeaderContent();
          prepend([this.closeIcon], this.headerContent);
          this.element.insertBefore(this.headerContent, this.element.children[0]);
        }
        this.closeIconBtnObj.appendTo(this.closeIcon);
      }
    };
    Dialog2.prototype.closeIconTitle = function() {
      this.l10n.setLocale(this.locale);
      var closeIconTitle = this.l10n.getConstant("close");
      this.closeIcon.setAttribute("title", closeIconTitle);
      this.closeIcon.setAttribute("aria-label", closeIconTitle);
    };
    Dialog2.prototype.setCSSClass = function(oldCSSClass) {
      if (oldCSSClass) {
        removeClass([this.element], oldCSSClass.split(" "));
        if (this.isModal && !isNullOrUndefined(this.dlgContainer)) {
          removeClass([this.dlgContainer], oldCSSClass.split(" "));
        }
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
        if (this.isModal && !isNullOrUndefined(this.dlgContainer)) {
          addClass([this.dlgContainer], this.cssClass.split(" "));
        }
      }
    };
    Dialog2.prototype.setIsModal = function() {
      this.dlgContainer = this.createElement("div", { className: DLG_CONTAINER });
      this.setCSSClass();
      this.element.classList.remove(DLG_SHOW);
      this.element.parentNode.insertBefore(this.dlgContainer, this.element);
      this.dlgContainer.appendChild(this.element);
      addClass([this.element], MODAL_DLG);
      this.dlgOverlay = this.createElement("div", { className: DLG_OVERLAY });
      this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
      this.dlgContainer.appendChild(this.dlgOverlay);
    };
    Dialog2.prototype.getValidFocusNode = function(items) {
      var node;
      for (var u = 0; u < items.length; u++) {
        node = items[u];
        if ((node.clientHeight > 0 || node.tagName.toLowerCase() === "a" && node.hasAttribute("href")) && node.tabIndex > -1 && !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled="true"],[type="hidden"]')) {
          return node;
        } else {
          node = null;
        }
      }
      return node;
    };
    Dialog2.prototype.focusableElements = function(content) {
      if (!isNullOrUndefined(content)) {
        var value = 'input,select,textarea,button,a,[contenteditable="true"],[tabindex]';
        var items = content.querySelectorAll(value);
        return this.getValidFocusNode(items);
      }
      return null;
    };
    Dialog2.prototype.getAutoFocusNode = function(container) {
      var node = container.querySelector("." + DLG_CLOSE_ICON_BTN);
      var value = "[autofocus]";
      var items = container.querySelectorAll(value);
      var validNode = this.getValidFocusNode(items);
      if (isBlazor()) {
        this.primaryButtonEle = this.element.getElementsByClassName("e-primary")[0];
      }
      if (!isNullOrUndefined(validNode)) {
        node = validNode;
      } else {
        validNode = this.focusableElements(this.contentEle);
        if (!isNullOrUndefined(validNode)) {
          return node = validNode;
        } else if (!isNullOrUndefined(this.primaryButtonEle)) {
          return this.element.querySelector("." + DLG_PRIMARY_BUTTON);
        }
      }
      return node;
    };
    Dialog2.prototype.disableElement = function(element2, t) {
      var elementMatch = element2 ? element2.matches || element2.webkitMatchesSelector || element2.msGetRegionContent : null;
      if (elementMatch) {
        for (; element2; element2 = element2.parentNode) {
          if (element2 instanceof Element && elementMatch.call(element2, t)) {
            return element2;
          }
        }
      }
      return null;
    };
    Dialog2.prototype.focusContent = function() {
      var element2 = this.getAutoFocusNode(this.element);
      var node = !isNullOrUndefined(element2) ? element2 : this.element;
      var userAgent = Browser.userAgent;
      if (userAgent.indexOf("MSIE ") > 0 || userAgent.indexOf("Trident/") > 0) {
        this.element.focus();
      }
      node.focus();
      this.unBindEvent(this.element);
      this.bindEvent(this.element);
    };
    Dialog2.prototype.bindEvent = function(element2) {
      EventHandler.add(element2, "keydown", this.keyDown, this);
    };
    Dialog2.prototype.unBindEvent = function(element2) {
      EventHandler.remove(element2, "keydown", this.keyDown);
    };
    Dialog2.prototype.updateSanitizeContent = function() {
      if (!this.isBlazorServerRender()) {
        this.contentEle.innerHTML = this.sanitizeHelper(this.content);
      }
    };
    Dialog2.prototype.isBlazorServerRender = function() {
      return isBlazor() && this.isServerRendered;
    };
    Dialog2.prototype.getModuleName = function() {
      return "dialog";
    };
    Dialog2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (!this.element.classList.contains(ROOT)) {
        return;
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "content":
            if (!isNullOrUndefined(this.content) && this.content !== "") {
              if (this.isBlazorServerRender()) {
                this.contentEle = this.element.querySelector(".e-dlg-content");
              }
              if (!isNullOrUndefined(this.contentEle) && this.contentEle.getAttribute("role") !== "dialog") {
                if (!this.isBlazorServerRender()) {
                  this.contentEle.innerHTML = "";
                }
                if (typeof this.content === "function") {
                  this.clearTemplate(["content"]);
                  detach(this.contentEle);
                  this.contentEle = null;
                  this.setContent();
                } else {
                  typeof this.content === "string" ? this.isBlazorServerRender() && this.contentEle.innerText === "" ? this.contentEle.insertAdjacentHTML("beforeend", this.sanitizeHelper(this.content)) : this.updateSanitizeContent() : this.contentEle.appendChild(this.content);
                }
                this.setMaxHeight();
              } else {
                if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector(".e-dlg-content"))) {
                  this.setContent();
                }
              }
            } else if (!isNullOrUndefined(this.contentEle)) {
              detach(this.contentEle);
              this.contentEle = null;
            }
            break;
          case "header":
            if (this.header === "" || isNullOrUndefined(this.header)) {
              if (this.headerEle) {
                detach(this.headerEle);
                this.headerEle = null;
              }
            } else {
              if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector(".e-dlg-header-content"))) {
                this.setHeader();
              }
            }
            break;
          case "footerTemplate":
            if (this.footerTemplate === "" || isNullOrUndefined(this.footerTemplate)) {
              if (!this.ftrTemplateContent) {
                return;
              }
              detach(this.ftrTemplateContent);
              this.ftrTemplateContent = null;
              this.buttons = [{}];
            } else {
              if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector(".e-footer-content"))) {
                this.setFooterTemplate();
              }
              this.buttons = [{}];
            }
            break;
          case "showCloseIcon":
            if (this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0) {
              if (!this.showCloseIcon && (this.header === "" || isNullOrUndefined(this.header))) {
                detach(this.headerContent);
                this.headerContent = null;
              } else if (!this.showCloseIcon) {
                detach(this.closeIcon);
              } else {
                if (this.isBlazorServerRender()) {
                  this.wireEvents();
                }
              }
            } else {
              if (!this.isBlazorServerRender()) {
                this.renderCloseIcon();
              }
              this.wireEvents();
            }
            break;
          case "locale":
            if (this.showCloseIcon) {
              this.closeIconTitle();
            }
            break;
          case "visible":
            this.visible ? this.show() : this.hide();
            break;
          case "isModal":
            this.updateIsModal();
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(newProp.height) });
            this.updatePersistData();
            break;
          case "width":
            setStyleAttribute(this.element, { "width": formatUnit(newProp.width) });
            this.updatePersistData();
            break;
          case "zIndex":
            this.popupObj.zIndex = this.zIndex;
            if (this.isModal) {
              this.setOverlayZindex(this.zIndex);
            }
            if (this.element.style.zIndex !== this.zIndex.toString()) {
              this.calculatezIndex = false;
            }
            break;
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
          case "buttons": {
            var buttonCount = this.buttons.length;
            if (!isNullOrUndefined(this.ftrTemplateContent) && !this.isBlazorServerRender()) {
              detach(this.ftrTemplateContent);
              this.ftrTemplateContent = null;
            }
            for (var i = 0; i < buttonCount; i++) {
              if (!isNullOrUndefined(this.buttons[i].buttonModel)) {
                this.footerTemplate = "";
                this.setButton();
              }
            }
            break;
          }
          case "allowDragging":
            if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {
              this.setAllowDragging();
            } else {
              this.dragObj.destroy();
            }
            break;
          case "target":
            this.setTarget(newProp.target);
            break;
          case "position":
            this.checkPositionData();
            if (this.isModal) {
              var positionX = !isNullOrUndefined(oldProp.position) && !isNullOrUndefined(oldProp.position.X) ? oldProp.position.X : this.position.X;
              var positionY = !isNullOrUndefined(oldProp.position) && !isNullOrUndefined(oldProp.position.Y) ? oldProp.position.Y : this.position.Y;
              if (this.dlgContainer.classList.contains("e-dlg-" + positionX + "-" + positionY)) {
                this.dlgContainer.classList.remove("e-dlg-" + positionX + "-" + positionY);
              }
            }
            this.positionChange();
            this.updatePersistData();
            break;
          case "enableRtl":
            this.setEnableRTL();
            break;
          case "enableResize":
            this.setResize();
            break;
          case "minHeight":
            if (this.minHeight !== "") {
              this.element.style.minHeight = formatUnit(this.minHeight);
            }
            break;
        }
      }
    };
    Dialog2.prototype.setTarget = function(target) {
      this.popupObj.relateTo = target;
      this.target = target;
      this.targetEle = typeof this.target === "string" ? document.querySelector(this.target) : this.target;
      if (this.dragObj) {
        this.dragObj.dragArea = this.targetEle;
      }
      this.setMaxHeight();
      if (this.isModal) {
        this.updateIsModal();
      }
      if (this.enableResize) {
        this.setResize();
      }
    };
    Dialog2.prototype.updateIsModal = function() {
      this.element.setAttribute("aria-modal", this.isModal ? "true" : "false");
      if (this.isModal) {
        if (isNullOrUndefined(this.dlgOverlay)) {
          this.setIsModal();
          this.element.style.top = "0px";
          this.element.style.left = "0px";
          if (!isNullOrUndefined(this.targetEle)) {
            this.targetEle.appendChild(this.dlgContainer);
          }
        }
      } else {
        removeClass([this.element], MODAL_DLG);
        removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        detach(this.dlgOverlay);
        while (this.dlgContainer.firstChild) {
          this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);
        }
        this.dlgContainer.parentElement.removeChild(this.dlgContainer);
      }
      if (this.visible) {
        this.show();
      }
      this.positionChange();
      if (this.isModal && this.dlgOverlay) {
        EventHandler.add(this.dlgOverlay, "click", this.dlgOverlayClickEventHandler, this);
      }
    };
    Dialog2.prototype.setzIndex = function(zIndexElement, setPopupZindex) {
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      var currentzIndex = getZindexPartial(zIndexElement);
      this.zIndex = currentzIndex > this.zIndex ? currentzIndex : this.zIndex;
      this.isProtectedOnChange = prevOnChange;
      if (setPopupZindex) {
        this.popupObj.zIndex = this.zIndex;
      }
    };
    Dialog2.prototype.windowResizeHandler = function() {
      setMaxWidth(this.targetEle.clientWidth);
      setMaxHeight(this.targetEle.clientHeight);
      this.setMaxHeight();
    };
    Dialog2.prototype.getPersistData = function() {
      return this.addOnPersist(["width", "height", "position"]);
    };
    Dialog2.prototype.destroy = function() {
      if (this.isDestroyed) {
        return;
      }
      var classArray = [RTL4, MODAL_DLG, DLG_RESIZABLE, DLG_RESTRICT_LEFT_VALUE, FULLSCREEN, DEVICE];
      var attrs = ["role", "aria-modal", "aria-labelledby", "aria-describedby", "aria-grabbed", "tabindex", "style"];
      removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
      if (!isNullOrUndefined(this.element) && this.element.classList.contains(FULLSCREEN)) {
        removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
      }
      if (this.isModal) {
        removeClass([!isNullOrUndefined(this.targetEle) ? this.targetEle : document.body], SCROLL_DISABLED);
      }
      this.unWireEvents();
      if (!isNullOrUndefined(this.btnObj)) {
        for (var i = 0; i < this.btnObj.length; i++) {
          this.btnObj[i].destroy();
        }
      }
      if (!isNullOrUndefined(this.closeIconBtnObj)) {
        this.closeIconBtnObj.destroy();
      }
      if (!isNullOrUndefined(this.dragObj)) {
        this.dragObj.destroy();
      }
      if (!isNullOrUndefined(this.popupObj.element) && this.popupObj.element.classList.contains(POPUP_ROOT)) {
        this.popupObj.destroy();
      }
      removeClass([this.element], classArray);
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        removeClass([this.element], this.cssClass.split(" "));
      }
      if (!isNullOrUndefined(this.refElement) && !isNullOrUndefined(this.refElement.parentElement)) {
        this.refElement.parentElement.insertBefore(this.isModal ? this.dlgContainer : this.element, this.refElement);
        detach(this.refElement);
        this.refElement = void 0;
      }
      if (this.isModal && !this.isBlazorServerRender()) {
        detach(this.dlgOverlay);
        this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);
        detach(this.dlgContainer);
      }
      if (!this.isBlazorServerRender()) {
        this.element.innerHTML = this.clonedEle.innerHTML;
      }
      if (this.isBlazorServerRender()) {
        if (!isNullOrUndefined(this.element.children)) {
          for (var i = 0; i <= this.element.children.length; i++) {
            i = i - i;
            detach(this.element.children[i]);
          }
        }
      }
      for (var i = 0; i < attrs.length; i++) {
        this.element.removeAttribute(attrs[i]);
      }
      if (!this.isBlazorServerRender()) {
        _super.prototype.destroy.call(this);
      } else {
        this.isDestroyed = true;
      }
      if (this.isReact) {
        this.clearTemplate();
      }
    };
    Dialog2.prototype.wireWindowResizeEvent = function() {
      window.addEventListener("resize", this.windowResizeHandler.bind(this));
    };
    Dialog2.prototype.unWireWindowResizeEvent = function() {
      window.removeEventListener("resize", this.windowResizeHandler.bind(this));
    };
    Dialog2.prototype.wireEvents = function() {
      if (this.isBlazorServerRender() && this.showCloseIcon) {
        this.closeIcon = this.element.getElementsByClassName("e-dlg-closeicon-btn")[0];
      }
      if (this.showCloseIcon) {
        EventHandler.add(this.closeIcon, "click", this.closeIconClickEventHandler, this);
      }
      if (this.isModal && this.dlgOverlay) {
        EventHandler.add(this.dlgOverlay, "click", this.dlgOverlayClickEventHandler, this);
      }
    };
    Dialog2.prototype.unWireEvents = function() {
      if (this.showCloseIcon) {
        EventHandler.remove(this.closeIcon, "click", this.closeIconClickEventHandler);
      }
      if (this.isModal) {
        EventHandler.remove(this.dlgOverlay, "click", this.dlgOverlayClickEventHandler);
      }
      if (this.buttons.length > 0 && !isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === "") {
        for (var i = 0; i < this.buttons.length; i++) {
          if (typeof this.buttons[i].click === "function") {
            EventHandler.remove(this.ftrTemplateContent.children[i], "click", this.buttons[i].click);
          }
        }
      }
    };
    Dialog2.prototype.refreshPosition = function() {
      this.popupObj.refreshPosition();
    };
    Dialog2.prototype.getDimension = function() {
      var dialogWidth = this.element.offsetWidth;
      var dialogHeight = this.element.offsetHeight;
      return { width: dialogWidth, height: dialogHeight };
    };
    Dialog2.prototype.show = function(isFullScreen) {
      var _this = this;
      if (!this.element.classList.contains(ROOT)) {
        return;
      }
      if (!this.element.classList.contains(DLG_SHOW) || !isNullOrUndefined(isFullScreen)) {
        if (!isNullOrUndefined(isFullScreen)) {
          this.fullScreen(isFullScreen);
        }
        var eventArgs_1 = isBlazor() ? {
          cancel: false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          maxHeight: this.element.style.maxHeight
        } : {
          cancel: false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          target: this.target,
          maxHeight: this.element.style.maxHeight
        };
        this.trigger("beforeOpen", eventArgs_1, function(beforeOpenArgs) {
          if (!beforeOpenArgs.cancel) {
            if (_this.element.style.maxHeight !== eventArgs_1.maxHeight) {
              _this.allowMaxHeight = false;
              _this.element.style.maxHeight = eventArgs_1.maxHeight;
            }
            _this.storeActiveElement = document.activeElement;
            _this.element.tabIndex = -1;
            if (_this.isModal && !isNullOrUndefined(_this.dlgOverlay)) {
              _this.dlgOverlay.style.display = "block";
              _this.dlgContainer.style.display = "flex";
              removeClass([_this.dlgOverlay], "e-fade");
              if (!isNullOrUndefined(_this.targetEle)) {
                if (_this.targetEle === document.body) {
                  _this.dlgContainer.style.position = "fixed";
                } else {
                  _this.dlgContainer.style.position = "absolute";
                }
                _this.dlgOverlay.style.position = "absolute";
                _this.element.style.position = "relative";
                addClass([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
              } else {
                addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
              }
            }
            var openAnimation = {
              name: _this.animationSettings.effect + "In",
              duration: _this.animationSettings.duration,
              delay: _this.animationSettings.delay
            };
            var zIndexElement = _this.isModal ? _this.element.parentElement : _this.element;
            if (_this.calculatezIndex) {
              _this.setzIndex(zIndexElement, true);
              setStyleAttribute(_this.element, { "zIndex": _this.zIndex });
              if (_this.isModal) {
                _this.setOverlayZindex(_this.zIndex);
              }
            }
            _this.animationSettings.effect === "None" ? _this.popupObj.show() : _this.popupObj.show(openAnimation);
            _this.dialogOpen = true;
            var prevOnChange = _this.isProtectedOnChange;
            _this.isProtectedOnChange = true;
            _this.visible = true;
            _this.preventVisibility = true;
            _this.isProtectedOnChange = prevOnChange;
          }
        });
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Dialog2.prototype.hide = function(event) {
      var _this = this;
      if (!this.element.classList.contains(ROOT)) {
        return;
      }
      if (this.preventVisibility) {
        var eventArgs = isBlazor() ? {
          cancel: false,
          isInteracted: event ? true : false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          event
        } : {
          cancel: false,
          isInteracted: event ? true : false,
          element: this.element,
          target: this.target,
          container: this.isModal ? this.dlgContainer : this.element,
          event,
          closedBy: this.dlgClosedBy
        };
        this.closeArgs = eventArgs;
        this.trigger("beforeClose", eventArgs, function(beforeCloseArgs) {
          if (!beforeCloseArgs.cancel) {
            if (_this.isModal) {
              if (!isNullOrUndefined(_this.targetEle)) {
                removeClass([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
              }
            }
            if (document.body.classList.contains(DLG_TARGET) && document.body.classList.contains(SCROLL_DISABLED)) {
              removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
            }
            var closeAnimation = {
              name: _this.animationSettings.effect + "Out",
              duration: _this.animationSettings.duration,
              delay: _this.animationSettings.delay
            };
            _this.animationSettings.effect === "None" ? _this.popupObj.hide() : _this.popupObj.hide(closeAnimation);
            _this.dialogOpen = false;
            var prevOnChange = _this.isProtectedOnChange;
            _this.isProtectedOnChange = true;
            _this.visible = false;
            _this.preventVisibility = false;
            _this.isProtectedOnChange = prevOnChange;
          }
          _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
        });
      }
    };
    Dialog2.prototype.fullScreen = function(args) {
      var top = this.element.offsetTop;
      var left = this.element.offsetLeft;
      if (args) {
        this.element.style.top = document.scrollingElement.scrollTop + "px";
        addClass([this.element], FULLSCREEN);
        var display = this.element.style.display;
        this.element.style.display = "none";
        this.element.style.maxHeight = !isNullOrUndefined(this.target) ? this.targetEle.offsetHeight + "px" : window.innerHeight + "px";
        this.element.style.display = display;
        addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        if (this.allowDragging && !isNullOrUndefined(this.dragObj)) {
          this.dragObj.destroy();
        }
      } else {
        removeClass([this.element], FULLSCREEN);
        removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {
          this.setAllowDragging();
        }
      }
      return args;
    };
    Dialog2.prototype.getButtons = function(index) {
      if (!isNullOrUndefined(index)) {
        return this.btnObj[index];
      }
      return this.btnObj;
    };
    __decorate9([
      Property("")
    ], Dialog2.prototype, "content", void 0);
    __decorate9([
      Property(true)
    ], Dialog2.prototype, "enableHtmlSanitizer", void 0);
    __decorate9([
      Property(false)
    ], Dialog2.prototype, "enablePersistence", void 0);
    __decorate9([
      Property(false)
    ], Dialog2.prototype, "showCloseIcon", void 0);
    __decorate9([
      Property(false)
    ], Dialog2.prototype, "isModal", void 0);
    __decorate9([
      Property("")
    ], Dialog2.prototype, "header", void 0);
    __decorate9([
      Property(true)
    ], Dialog2.prototype, "visible", void 0);
    __decorate9([
      Property(false)
    ], Dialog2.prototype, "enableResize", void 0);
    __decorate9([
      Property(["South-East"])
    ], Dialog2.prototype, "resizeHandles", void 0);
    __decorate9([
      Property("auto")
    ], Dialog2.prototype, "height", void 0);
    __decorate9([
      Property("")
    ], Dialog2.prototype, "minHeight", void 0);
    __decorate9([
      Property("100%")
    ], Dialog2.prototype, "width", void 0);
    __decorate9([
      Property("")
    ], Dialog2.prototype, "cssClass", void 0);
    __decorate9([
      Property(1e3)
    ], Dialog2.prototype, "zIndex", void 0);
    __decorate9([
      Property(null)
    ], Dialog2.prototype, "target", void 0);
    __decorate9([
      Property("")
    ], Dialog2.prototype, "footerTemplate", void 0);
    __decorate9([
      Property(false)
    ], Dialog2.prototype, "allowDragging", void 0);
    __decorate9([
      Collection([{}], ButtonProps)
    ], Dialog2.prototype, "buttons", void 0);
    __decorate9([
      Property(true)
    ], Dialog2.prototype, "closeOnEscape", void 0);
    __decorate9([
      Complex({}, AnimationSettings)
    ], Dialog2.prototype, "animationSettings", void 0);
    __decorate9([
      Complex({ X: "center", Y: "center" }, PositionData)
    ], Dialog2.prototype, "position", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "created", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "open", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "beforeSanitizeHtml", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "beforeOpen", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "close", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "beforeClose", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "dragStart", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "dragStop", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "drag", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "overlayClick", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "resizeStart", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "resizing", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "resizeStop", void 0);
    __decorate9([
      Event()
    ], Dialog2.prototype, "destroyed", void 0);
    Dialog2 = __decorate9([
      NotifyPropertyChanges
    ], Dialog2);
    return Dialog2;
  }(Component)
);
var DialogUtility;
(function(DialogUtility2) {
  function alert(args) {
    var dialogComponent;
    var dialogElement = createElement("div", { "className": DLG_UTIL_ALERT });
    document.body.appendChild(dialogElement);
    var alertDialogObj;
    var okButtonModel = [{
      buttonModel: { isPrimary: true, content: "OK" },
      click: function() {
        this.hide();
      }
    }];
    if (typeof args === "string") {
      alertDialogObj = createDialog({
        content: args,
        position: { X: "center", Y: "top" },
        isModal: true,
        header: DLG_UTIL_DEFAULT_TITLE,
        buttons: okButtonModel
      }, dialogElement);
    } else {
      alertDialogObj = createDialog(alertOptions(args), dialogElement);
    }
    alertDialogObj.close = function() {
      if (args && args.close) {
        args.close.apply(alertDialogObj);
      }
      alertDialogObj.destroy();
      if (alertDialogObj.element.classList.contains("e-dlg-modal")) {
        alertDialogObj.element.parentElement.remove();
        alertDialogObj.target.classList.remove(DLG_UTIL_ROOT);
      } else {
        alertDialogObj.element.remove();
      }
    };
    return alertDialogObj;
  }
  DialogUtility2.alert = alert;
  function confirm(args) {
    var dialogComponent;
    var dialogElement = createElement("div", { "className": DLG_UTIL_CONFIRM });
    document.body.appendChild(dialogElement);
    var confirmDialogObj;
    var okCancelButtonModel = [{
      buttonModel: { isPrimary: true, content: "OK" },
      click: function() {
        this.hide();
      }
    }, {
      buttonModel: { content: "Cancel" },
      click: function() {
        this.hide();
      }
    }];
    if (typeof args === "string") {
      confirmDialogObj = createDialog({
        position: { X: "center", Y: "top" },
        content: args,
        isModal: true,
        header: DLG_UTIL_DEFAULT_TITLE,
        buttons: okCancelButtonModel
      }, dialogElement);
    } else {
      confirmDialogObj = createDialog(confirmOptions(args), dialogElement);
    }
    confirmDialogObj.close = function() {
      if (args && args.close) {
        args.close.apply(confirmDialogObj);
      }
      confirmDialogObj.destroy();
      if (confirmDialogObj.element.classList.contains("e-dlg-modal")) {
        confirmDialogObj.element.parentElement.remove();
        confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT);
      } else {
        confirmDialogObj.element.remove();
      }
    };
    return confirmDialogObj;
  }
  DialogUtility2.confirm = confirm;
  function createDialog(options, element2) {
    var dialogObject = new Dialog(options);
    dialogObject.appendTo(element2);
    return dialogObject;
  }
  function alertOptions(option) {
    var options = {};
    options.buttons = [];
    options = formOptions(options, option);
    options = setAlertButtonModel(options, option);
    return options;
  }
  function confirmOptions(option) {
    var options = {};
    options.buttons = [];
    options = formOptions(options, option);
    options = setConfirmButtonModel(options, option);
    return options;
  }
  function formOptions(options, option) {
    options.header = !isNullOrUndefined(option.title) ? option.title : DLG_UTIL_DEFAULT_TITLE;
    options.content = !isNullOrUndefined(option.content) ? option.content : "";
    options.isModal = !isNullOrUndefined(option.isModal) ? option.isModal : true;
    options.showCloseIcon = !isNullOrUndefined(option.showCloseIcon) ? option.showCloseIcon : false;
    options.allowDragging = !isNullOrUndefined(option.isDraggable) ? option.isDraggable : false;
    options.closeOnEscape = !isNullOrUndefined(option.closeOnEscape) ? option.closeOnEscape : false;
    options.position = !isNullOrUndefined(option.position) ? option.position : { X: "center", Y: "top" };
    options.animationSettings = !isNullOrUndefined(option.animationSettings) ? option.animationSettings : { effect: "Fade", duration: 400, delay: 0 };
    options.cssClass = !isNullOrUndefined(option.cssClass) ? option.cssClass : "";
    options.zIndex = !isNullOrUndefined(option.zIndex) ? option.zIndex : 1e3;
    options.open = !isNullOrUndefined(option.open) ? option.open : null;
    options.width = !isNullOrUndefined(option.width) ? option.width : "auto";
    options.height = !isNullOrUndefined(option.height) ? option.height : "auto";
    return options;
  }
  function setAlertButtonModel(options, option) {
    var alertButtonModel = [{
      buttonModel: { isPrimary: true, content: "OK" },
      click: function() {
        this.hide();
      }
    }];
    if (!isNullOrUndefined(option.okButton)) {
      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]);
    } else {
      options.buttons = alertButtonModel;
    }
    return options;
  }
  function setConfirmButtonModel(options, option) {
    var okButtonModel = {
      buttonModel: { isPrimary: true, content: "OK" },
      click: function() {
        this.hide();
      }
    };
    var cancelButtonModel = {
      buttonModel: { content: "Cancel" },
      click: function() {
        this.hide();
      }
    };
    if (!isNullOrUndefined(option.okButton)) {
      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel);
    } else {
      options.buttons[0] = okButtonModel;
    }
    if (!isNullOrUndefined(option.cancelButton)) {
      options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel);
    } else {
      options.buttons[1] = cancelButtonModel;
    }
    return options;
  }
  function formButtonModel(buttonModel, option, buttonPropModel) {
    var buttonProps = buttonPropModel;
    if (!isNullOrUndefined(option.text)) {
      buttonProps.buttonModel.content = option.text;
    }
    if (!isNullOrUndefined(option.icon)) {
      buttonProps.buttonModel.iconCss = option.icon;
    }
    if (!isNullOrUndefined(option.cssClass)) {
      buttonProps.buttonModel.cssClass = option.cssClass;
    }
    if (!isNullOrUndefined(option.click)) {
      buttonProps.click = option.click;
    }
    return buttonProps;
  }
})(DialogUtility || (DialogUtility = {}));

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-popups/src/tooltip/tooltip.js
var __extends12 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TOUCHEND_HIDE_DELAY = 1500;
var TAPHOLD_THRESHOLD = 500;
var SHOW_POINTER_TIP_GAP = 0;
var HIDE_POINTER_TIP_GAP = 8;
var MOUSE_TRAIL_GAP = 2;
var POINTER_ADJUST = 2;
var ROOT2 = "e-tooltip";
var RTL5 = "e-rtl";
var DEVICE2 = "e-bigger";
var ICON2 = "e-icons";
var CLOSE = "e-tooltip-close";
var TOOLTIP_WRAP = "e-tooltip-wrap";
var CONTENT = "e-tip-content";
var ARROW_TIP = "e-arrow-tip";
var ARROW_TIP_OUTER = "e-arrow-tip-outer";
var ARROW_TIP_INNER = "e-arrow-tip-inner";
var TIP_BOTTOM = "e-tip-bottom";
var TIP_TOP = "e-tip-top";
var TIP_LEFT = "e-tip-left";
var TIP_RIGHT = "e-tip-right";
var POPUP_ROOT2 = "e-popup";
var POPUP_OPEN = "e-popup-open";
var POPUP_CLOSE = "e-popup-close";
var POPUP_LIB = "e-lib";
var HIDE_POPUP = "e-hidden";
var POPUP_CONTAINER = "e-tooltip-popup-container";
var Animation2 = (
  /** @class */
  function(_super) {
    __extends12(Animation3, _super);
    function Animation3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate10([
      Property({ effect: "FadeIn", duration: 150, delay: 0 })
    ], Animation3.prototype, "open", void 0);
    __decorate10([
      Property({ effect: "FadeOut", duration: 150, delay: 0 })
    ], Animation3.prototype, "close", void 0);
    return Animation3;
  }(ChildProperty)
);
var Tooltip = (
  /** @class */
  function(_super) {
    __extends12(Tooltip2, _super);
    function Tooltip2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.mouseMoveEvent = null;
      _this.mouseMoveTarget = null;
      _this.containerElement = null;
      _this.isBodyContainer = true;
      return _this;
    }
    Tooltip2.prototype.initialize = function() {
      this.formatPosition();
      addClass([this.element], ROOT2);
    };
    Tooltip2.prototype.formatPosition = function() {
      var _a, _b;
      if (this.position.indexOf("Top") === 0 || this.position.indexOf("Bottom") === 0) {
        _a = this.position.split(/(?=[A-Z])/), this.tooltipPositionY = _a[0], this.tooltipPositionX = _a[1];
      } else {
        _b = this.position.split(/(?=[A-Z])/), this.tooltipPositionX = _b[0], this.tooltipPositionY = _b[1];
      }
    };
    Tooltip2.prototype.renderArrow = function() {
      this.setTipClass(this.position);
      var tip = this.createElement("div", { className: ARROW_TIP + " " + this.tipClass });
      tip.appendChild(this.createElement("div", { className: ARROW_TIP_OUTER + " " + this.tipClass }));
      tip.appendChild(this.createElement("div", { className: ARROW_TIP_INNER + " " + this.tipClass }));
      this.tooltipEle.appendChild(tip);
    };
    Tooltip2.prototype.setTipClass = function(position) {
      if (position.indexOf("Right") === 0) {
        this.tipClass = TIP_LEFT;
      } else if (position.indexOf("Bottom") === 0) {
        this.tipClass = TIP_TOP;
      } else if (position.indexOf("Left") === 0) {
        this.tipClass = TIP_RIGHT;
      } else {
        this.tipClass = TIP_BOTTOM;
      }
    };
    Tooltip2.prototype.renderPopup = function(target) {
      var elePos = this.mouseTrail ? { top: 0, left: 0 } : this.getTooltipPosition(target);
      this.tooltipEle.classList.remove(POPUP_LIB);
      this.popupObj = new Popup(this.tooltipEle, {
        height: this.height,
        width: this.width,
        position: { X: elePos.left, Y: elePos.top },
        enableRtl: this.enableRtl,
        open: this.openPopupHandler.bind(this),
        close: this.closePopupHandler.bind(this)
      });
    };
    Tooltip2.prototype.getTooltipPosition = function(target) {
      this.tooltipEle.style.display = "block";
      var pos = calculatePosition(target, this.tooltipPositionX, this.tooltipPositionY, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
      var offsetPos = this.calculateTooltipOffset(this.position);
      var collisionPosition = this.calculateElementPosition(pos, offsetPos);
      var collisionLeft = collisionPosition[0];
      var collisionTop = collisionPosition[1];
      var elePos = this.collisionFlipFit(target, collisionLeft, collisionTop);
      this.tooltipEle.style.display = "";
      return elePos;
    };
    Tooltip2.prototype.windowResize = function() {
      this.reposition(this.findTarget());
    };
    Tooltip2.prototype.reposition = function(target) {
      if (this.popupObj && target) {
        var elePos = this.getTooltipPosition(target);
        this.popupObj.position = { X: elePos.left, Y: elePos.top };
        this.popupObj.dataBind();
      }
    };
    Tooltip2.prototype.openPopupHandler = function() {
      if (!this.mouseTrail && this.needTemplateReposition()) {
        this.reposition(this.findTarget());
      }
      this.trigger("afterOpen", this.tooltipEventArgs);
      this.tooltipEventArgs = null;
    };
    Tooltip2.prototype.closePopupHandler = function() {
      if (this.isReact && !(this.opensOn === "Click" && typeof this.content === "function")) {
        this.clearTemplate(["content"]);
      }
      this.clear();
      this.trigger("afterClose", this.tooltipEventArgs);
      this.tooltipEventArgs = null;
    };
    Tooltip2.prototype.calculateTooltipOffset = function(position) {
      var pos = { top: 0, left: 0 };
      var tooltipEleWidth = this.tooltipEle.offsetWidth;
      var tooltipEleHeight = this.tooltipEle.offsetHeight;
      var arrowEle = select("." + ARROW_TIP, this.tooltipEle);
      var tipWidth = arrowEle ? arrowEle.offsetWidth : 0;
      var tipHeight = arrowEle ? arrowEle.offsetHeight : 0;
      var tipAdjust = this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP;
      var tipHeightAdjust = tipHeight / 2 + POINTER_ADJUST + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);
      var tipWidthAdjust = tipWidth / 2 + POINTER_ADJUST + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);
      if (this.mouseTrail) {
        tipAdjust += MOUSE_TRAIL_GAP;
      }
      switch (position) {
        case "RightTop":
          pos.left += tipWidth + tipAdjust;
          pos.top -= tooltipEleHeight - tipHeightAdjust;
          break;
        case "RightCenter":
          pos.left += tipWidth + tipAdjust;
          pos.top -= tooltipEleHeight / 2;
          break;
        case "RightBottom":
          pos.left += tipWidth + tipAdjust;
          pos.top -= tipHeightAdjust;
          break;
        case "BottomRight":
          pos.top += tipHeight + tipAdjust;
          pos.left -= tipWidthAdjust;
          break;
        case "BottomCenter":
          pos.top += tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth / 2;
          break;
        case "BottomLeft":
          pos.top += tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth - tipWidthAdjust;
          break;
        case "LeftBottom":
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tipHeightAdjust;
          break;
        case "LeftCenter":
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tooltipEleHeight / 2;
          break;
        case "LeftTop":
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tooltipEleHeight - tipHeightAdjust;
          break;
        case "TopLeft":
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth - tipWidthAdjust;
          break;
        case "TopRight":
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tipWidthAdjust;
          break;
        default:
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth / 2;
          break;
      }
      pos.left += this.offsetX;
      pos.top += this.offsetY;
      return pos;
    };
    Tooltip2.prototype.updateTipPosition = function(position) {
      var selEle = selectAll("." + ARROW_TIP + ",." + ARROW_TIP_OUTER + ",." + ARROW_TIP_INNER, this.tooltipEle);
      var removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];
      removeClass(selEle, removeList);
      this.setTipClass(position);
      addClass(selEle, this.tipClass);
    };
    Tooltip2.prototype.adjustArrow = function(target, position, tooltipPositionX, tooltipPositionY) {
      if (this.showTipPointer === false) {
        return;
      }
      this.updateTipPosition(position);
      var leftValue;
      var topValue;
      this.tooltipEle.style.display = "block";
      var tooltipWidth = this.tooltipEle.clientWidth;
      var tooltipHeight = this.tooltipEle.clientHeight;
      var arrowEle = select("." + ARROW_TIP, this.tooltipEle);
      var arrowInnerELe = select("." + ARROW_TIP_INNER, this.tooltipEle);
      var tipWidth = arrowEle.offsetWidth;
      var tipHeight = arrowEle.offsetHeight;
      this.tooltipEle.style.display = "";
      if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {
        if (this.tipClass === TIP_BOTTOM) {
          topValue = "99.9%";
          arrowInnerELe.style.top = "-" + (tipHeight - 2) + "px";
        } else {
          topValue = -(tipHeight - 1) + "px";
          arrowInnerELe.style.top = "-" + (tipHeight - 6) + "px";
        }
        if (target) {
          var tipPosExclude = tooltipPositionX !== "Center" || tooltipWidth > target.offsetWidth || this.mouseTrail;
          if (tipPosExclude && tooltipPositionX === "Left" || !tipPosExclude && this.tipPointerPosition === "End") {
            leftValue = tooltipWidth - tipWidth - POINTER_ADJUST + "px";
          } else if (tipPosExclude && tooltipPositionX === "Right" || !tipPosExclude && this.tipPointerPosition === "Start") {
            leftValue = POINTER_ADJUST + "px";
          } else if (tipPosExclude && (this.tipPointerPosition === "End" || this.tipPointerPosition === "Start")) {
            leftValue = this.tipPointerPosition === "End" ? target.offsetWidth + (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 - POINTER_ADJUST + "px" : (this.tooltipEle.offsetWidth - target.offsetWidth) / 2 - tipWidth / 2 + POINTER_ADJUST + "px";
          } else {
            leftValue = tooltipWidth / 2 - tipWidth / 2 + "px";
          }
        }
      } else {
        if (this.tipClass === TIP_RIGHT) {
          leftValue = "99.9%";
          arrowInnerELe.style.left = "-" + (tipWidth - 2) + "px";
        } else {
          leftValue = -(tipWidth - 1) + "px";
          arrowInnerELe.style.left = -tipWidth + (tipWidth - 2) + "px";
        }
        var tipPosExclude = tooltipPositionY !== "Center" || tooltipHeight > target.offsetHeight || this.mouseTrail;
        if (tipPosExclude && tooltipPositionY === "Top" || !tipPosExclude && this.tipPointerPosition === "End") {
          topValue = tooltipHeight - tipHeight - POINTER_ADJUST + "px";
        } else if (tipPosExclude && tooltipPositionY === "Bottom" || !tipPosExclude && this.tipPointerPosition === "Start") {
          topValue = POINTER_ADJUST + "px";
        } else {
          topValue = tooltipHeight / 2 - tipHeight / 2 + "px";
        }
      }
      arrowEle.style.top = topValue;
      arrowEle.style.left = leftValue;
    };
    Tooltip2.prototype.renderContent = function(target) {
      var tooltipContent = select("." + CONTENT, this.tooltipEle);
      if (this.cssClass) {
        addClass([this.tooltipEle], this.cssClass.split(" "));
      }
      if (target && !isNullOrUndefined(target.getAttribute("title"))) {
        target.setAttribute("data-content", target.getAttribute("title"));
        target.removeAttribute("title");
      }
      if (!isNullOrUndefined(this.content)) {
        tooltipContent.innerHTML = "";
        if (this.content instanceof HTMLElement) {
          tooltipContent.appendChild(this.content);
        } else if (typeof this.content === "string") {
          if (this.enableHtmlSanitizer) {
            this.setProperties({ content: SanitizeHtmlHelper.sanitize(this.content) }, true);
          }
          var tempFunction = compile(this.content);
          var tempArr = tempFunction({}, this, "content", this.element.id + "content", void 0, void 0, tooltipContent);
          if (tempArr) {
            if (this.enableHtmlParse) {
              var nodeList = tempArr.length;
              for (var i = 0; i < nodeList; i++) {
                tooltipContent[append(tempArr, tooltipContent), "innerHTML"] = this.content;
              }
            } else {
              tooltipContent["textContent"] = this.content;
            }
          }
        } else {
          var templateFunction = compile(this.content);
          var tempArr = templateFunction({}, this, "content", this.element.id + "content", void 0, void 0, tooltipContent);
          if (tempArr) {
            append(tempArr, tooltipContent);
          }
          this.renderReactTemplates();
        }
      } else {
        if (target && !isNullOrUndefined(target.getAttribute("data-content"))) {
          tooltipContent.innerHTML = target.getAttribute("data-content");
        }
      }
    };
    Tooltip2.prototype.renderCloseIcon = function() {
      if (!this.isSticky) {
        return;
      }
      var tipClose = this.createElement("div", { className: ICON2 + " " + CLOSE });
      this.tooltipEle.appendChild(tipClose);
      EventHandler.add(tipClose, Browser.touchStartEvent, this.onStickyClose, this);
    };
    Tooltip2.prototype.addDataTooltipId = function(target, id) {
      attributes(target, { "data-tooltip-id": id });
    };
    Tooltip2.prototype.removeDataTooltipId = function(target) {
      target.removeAttribute("data-tooltip-id");
    };
    Tooltip2.prototype.tapHoldHandler = function(evt) {
      clearTimeout(this.autoCloseTimer);
      this.targetHover(evt.originalEvent);
    };
    Tooltip2.prototype.touchEndHandler = function(e) {
      var _this = this;
      if (this.isSticky) {
        return;
      }
      var close = function() {
        _this.close();
      };
      this.autoCloseTimer = setTimeout(close, TOUCHEND_HIDE_DELAY);
    };
    Tooltip2.prototype.targetClick = function(e) {
      var target;
      if (this.target) {
        target = closest(e.target, this.target);
      } else {
        target = this.element;
      }
      if (isNullOrUndefined(target)) {
        return;
      }
      if (target.getAttribute("data-tooltip-id") === null) {
        this.targetHover(e);
      } else if (!this.isSticky) {
        this.hideTooltip(this.animation.close, e, target);
      }
    };
    Tooltip2.prototype.targetHover = function(e) {
      var target;
      if (this.target) {
        target = closest(e.target, this.target);
      } else {
        target = this.element;
      }
      if (isNullOrUndefined(target) || target.getAttribute("data-tooltip-id") !== null && this.closeDelay === 0) {
        return;
      }
      var targetList = [].slice.call(selectAll('[data-tooltip-id= "' + this.ctrlId + '_content"]', document));
      for (var _i = 0, targetList_1 = targetList; _i < targetList_1.length; _i++) {
        var target_1 = targetList_1[_i];
        this.restoreElement(target_1);
      }
      this.showTooltip(target, this.animation.open, e);
    };
    Tooltip2.prototype.mouseMoveBeforeOpen = function(e) {
      this.mouseMoveEvent = e;
    };
    Tooltip2.prototype.mouseMoveBeforeRemove = function() {
      if (this.mouseMoveTarget) {
        EventHandler.remove(this.mouseMoveTarget, "mousemove touchstart", this.mouseMoveBeforeOpen);
      }
    };
    Tooltip2.prototype.showTooltip = function(target, showAnimation, e) {
      var _this = this;
      clearTimeout(this.showTimer);
      clearTimeout(this.hideTimer);
      if (this.openDelay && this.mouseTrail) {
        this.mouseMoveBeforeRemove();
        this.mouseMoveTarget = target;
        EventHandler.add(this.mouseMoveTarget, "mousemove touchstart", this.mouseMoveBeforeOpen, this);
      }
      this.tooltipEventArgs = {
        type: e ? e.type : null,
        cancel: false,
        target,
        event: e ? e : null,
        element: this.tooltipEle,
        isInteracted: !isNullOrUndefined(e)
      };
      var observeCallback = function(beforeRenderArgs) {
        _this.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);
      };
      this.trigger("beforeRender", this.tooltipEventArgs, observeCallback.bind(this));
    };
    Tooltip2.prototype.beforeRenderCallback = function(beforeRenderArgs, target, e, showAnimation) {
      if (beforeRenderArgs.cancel) {
        this.isHidden = true;
        this.clear();
        this.mouseMoveBeforeRemove();
      } else {
        this.isHidden = false;
        if (isNullOrUndefined(this.tooltipEle)) {
          this.ctrlId = this.element.getAttribute("id") ? getUniqueID(this.element.getAttribute("id")) : getUniqueID("tooltip");
          this.tooltipEle = this.createElement("div", {
            className: TOOLTIP_WRAP + " " + POPUP_ROOT2 + " " + POPUP_LIB,
            attrs: {
              role: "tooltip",
              "aria-hidden": "false",
              "id": this.ctrlId + "_content"
            },
            styles: "width:" + formatUnit(this.width) + ";height:" + formatUnit(this.height) + ";position:absolute;"
          });
          if (Object.keys(this.htmlAttributes).length !== 0) {
            for (var attr in this.htmlAttributes) {
              if (attr === "class") {
                this.tooltipEle.classList.add(this.htmlAttributes["" + attr]);
              } else {
                this.tooltipEle.setAttribute(attr, this.htmlAttributes["" + attr]);
              }
            }
          }
          this.tooltipBeforeRender(target, this);
          this.tooltipAfterRender(target, e, showAnimation, this);
        } else {
          if (target) {
            this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY);
            this.addDataTooltipId(target, this.ctrlId + "_content");
            this.renderContent(target);
            Animation.stop(this.tooltipEle);
            this.reposition(target);
            this.tooltipAfterRender(target, e, showAnimation, this);
          }
        }
      }
    };
    Tooltip2.prototype.appendContainer = function(ctrlObj) {
      if (typeof this.container == "string") {
        if (this.container === "body") {
          this.containerElement = document.body;
        } else {
          this.isBodyContainer = false;
          this.containerElement = select(this.container, document);
        }
      } else if (this.container instanceof HTMLElement) {
        this.containerElement = this.container;
        this.isBodyContainer = this.containerElement.tagName === "BODY";
      }
      if (!this.isBodyContainer) {
        addClass([this.containerElement], POPUP_CONTAINER);
      }
      this.containerElement.appendChild(ctrlObj.tooltipEle);
    };
    Tooltip2.prototype.tooltipBeforeRender = function(target, ctrlObj) {
      if (target) {
        if (Browser.isDevice) {
          addClass([ctrlObj.tooltipEle], DEVICE2);
        }
        if (ctrlObj.width !== "auto") {
          ctrlObj.tooltipEle.style.maxWidth = formatUnit(ctrlObj.width);
        }
        ctrlObj.tooltipEle.appendChild(ctrlObj.createElement("div", { className: CONTENT }));
        this.appendContainer(ctrlObj);
        removeClass([ctrlObj.tooltipEle], HIDE_POPUP);
        ctrlObj.addDataTooltipId(target, ctrlObj.ctrlId + "_content");
        ctrlObj.renderContent(target);
        addClass([ctrlObj.tooltipEle], POPUP_OPEN);
        if (ctrlObj.showTipPointer) {
          ctrlObj.renderArrow();
        }
        ctrlObj.renderCloseIcon();
        ctrlObj.renderPopup(target);
        ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY);
        Animation.stop(ctrlObj.tooltipEle);
        ctrlObj.reposition(target);
      }
    };
    Tooltip2.prototype.tooltipAfterRender = function(target, e, showAnimation, ctrlObj) {
      if (target) {
        removeClass([ctrlObj.tooltipEle], POPUP_OPEN);
        addClass([ctrlObj.tooltipEle], POPUP_CLOSE);
        ctrlObj.tooltipEventArgs = {
          type: e ? e.type : null,
          cancel: false,
          target,
          event: e ? e : null,
          element: ctrlObj.tooltipEle,
          isInteracted: !isNullOrUndefined(e)
        };
        if (ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail) {
          ctrlObj.tooltipEle.style.display = "none";
        }
        var observeCallback = function(observedArgs) {
          ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);
        };
        ctrlObj.trigger("beforeOpen", ctrlObj.tooltipEventArgs, observeCallback.bind(ctrlObj));
      }
    };
    Tooltip2.prototype.beforeOpenCallback = function(observedArgs, target, showAnimation, e) {
      var _this = this;
      if (observedArgs.cancel) {
        this.isHidden = true;
        this.clear();
        this.mouseMoveBeforeRemove();
        this.restoreElement(target);
      } else {
        var openAnimation_1 = {
          name: showAnimation.effect,
          duration: showAnimation.duration,
          delay: showAnimation.delay,
          timingFunction: "easeOut"
        };
        if (showAnimation.effect === "None") {
          openAnimation_1 = void 0;
        }
        if (this.openDelay > 0) {
          var show = function() {
            if (_this.mouseTrail) {
              EventHandler.add(target, "mousemove touchstart mouseenter", _this.onMouseMove, _this);
            }
            if (_this.popupObj) {
              _this.popupObj.show(openAnimation_1, target);
              if (_this.mouseMoveEvent && _this.mouseTrail) {
                _this.onMouseMove(_this.mouseMoveEvent);
              }
            }
          };
          this.showTimer = setTimeout(show, this.openDelay);
        } else {
          if (this.popupObj) {
            this.popupObj.show(openAnimation_1, target);
          }
        }
      }
      if (e) {
        this.wireMouseEvents(e, target);
      }
    };
    Tooltip2.prototype.needTemplateReposition = function() {
      var tooltip = this;
      return !isNullOrUndefined(tooltip.viewContainerRef) && typeof tooltip.viewContainerRef !== "string";
    };
    Tooltip2.prototype.checkCollision = function(target, x, y) {
      var elePos = {
        left: x,
        top: y,
        position: this.position,
        horizontal: this.tooltipPositionX,
        vertical: this.tooltipPositionY
      };
      var affectedPos = isCollide(this.tooltipEle, this.checkCollideTarget(), x, y);
      if (affectedPos.length > 0) {
        elePos.horizontal = affectedPos.indexOf("left") >= 0 ? "Right" : affectedPos.indexOf("right") >= 0 ? "Left" : this.tooltipPositionX;
        elePos.vertical = affectedPos.indexOf("top") >= 0 ? "Bottom" : affectedPos.indexOf("bottom") >= 0 ? "Top" : this.tooltipPositionY;
      }
      return elePos;
    };
    Tooltip2.prototype.calculateElementPosition = function(pos, offsetPos) {
      return [
        this.isBodyContainer ? pos.left + offsetPos.left : pos.left - this.containerElement.offsetLeft + offsetPos.left + window.pageXOffset + this.containerElement.scrollLeft,
        this.isBodyContainer ? pos.top + offsetPos.top : pos.top - this.containerElement.offsetTop + offsetPos.top + window.pageYOffset + this.containerElement.scrollTop
      ];
    };
    Tooltip2.prototype.collisionFlipFit = function(target, x, y) {
      var elePos = this.checkCollision(target, x, y);
      var newpos = elePos.position;
      if (this.tooltipPositionY !== elePos.vertical) {
        newpos = this.position.indexOf("Bottom") === 0 || this.position.indexOf("Top") === 0 ? elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical;
      }
      if (this.tooltipPositionX !== elePos.horizontal) {
        if (newpos.indexOf("Left") === 0) {
          elePos.vertical = newpos === "LeftTop" || newpos === "LeftCenter" ? "Top" : "Bottom";
          newpos = elePos.vertical + "Left";
        }
        if (newpos.indexOf("Right") === 0) {
          elePos.vertical = newpos === "RightTop" || newpos === "RightCenter" ? "Top" : "Bottom";
          newpos = elePos.vertical + "Right";
        }
        elePos.horizontal = this.tooltipPositionX;
      }
      this.tooltipEventArgs = {
        type: null,
        cancel: false,
        target,
        event: null,
        element: this.tooltipEle,
        collidedPosition: newpos
      };
      this.trigger("beforeCollision", this.tooltipEventArgs);
      if (this.tooltipEventArgs.cancel) {
        newpos = this.position;
      } else {
        var elePosVertical = elePos.vertical;
        var elePosHorizontal = elePos.horizontal;
        if (elePos.position !== newpos) {
          var pos = calculatePosition(target, elePosHorizontal, elePosVertical, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
          this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);
          var offsetPos = this.calculateTooltipOffset(newpos);
          offsetPos.top -= this.getOffSetPosition("TopBottom", newpos, this.offsetY);
          offsetPos.left -= this.getOffSetPosition("RightLeft", newpos, this.offsetX);
          elePos.position = newpos;
          var elePosition = this.calculateElementPosition(pos, offsetPos);
          elePos.left = elePosition[0];
          elePos.top = elePosition[1];
        } else {
          this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);
        }
      }
      var eleOffset = { left: elePos.left, top: elePos.top };
      var left = this.isBodyContainer ? fit(this.tooltipEle, this.checkCollideTarget(), { X: true, Y: false }, eleOffset).left : eleOffset.left;
      this.tooltipEle.style.display = "block";
      if (this.showTipPointer && (newpos.indexOf("Bottom") === 0 || newpos.indexOf("Top") === 0)) {
        var arrowEle = select("." + ARROW_TIP, this.tooltipEle);
        var arrowleft = parseInt(arrowEle.style.left, 10) - (left - elePos.left);
        if (arrowleft < 0) {
          arrowleft = 0;
        } else if (arrowleft + arrowEle.offsetWidth > this.tooltipEle.clientWidth) {
          arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;
        }
        arrowEle.style.left = arrowleft.toString() + "px";
      }
      this.tooltipEle.style.display = "";
      eleOffset.left = left;
      return eleOffset;
    };
    Tooltip2.prototype.getOffSetPosition = function(positionString, newPos, offsetType) {
      return positionString.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1 && positionString.indexOf(newPos.split(/(?=[A-Z])/)[0]) !== -1 ? 2 * offsetType : 0;
    };
    Tooltip2.prototype.checkCollideTarget = function() {
      return !this.windowCollision && this.target ? this.element : null;
    };
    Tooltip2.prototype.hideTooltip = function(hideAnimation, e, targetElement2) {
      var _this = this;
      if (this.closeDelay > 0) {
        clearTimeout(this.hideTimer);
        clearTimeout(this.showTimer);
        var hide = function() {
          if (_this.closeDelay && _this.tooltipEle && _this.isTooltipOpen) {
            return;
          }
          _this.tooltipHide(hideAnimation, e, targetElement2);
        };
        this.hideTimer = setTimeout(hide, this.closeDelay);
      } else {
        this.tooltipHide(hideAnimation, e, targetElement2);
      }
    };
    Tooltip2.prototype.tooltipHide = function(hideAnimation, e, targetElement2) {
      var _this = this;
      var target;
      if (e) {
        target = this.target ? targetElement2 || e.target : this.element;
      } else {
        target = select('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
      }
      this.tooltipEventArgs = {
        type: e ? e.type : null,
        cancel: false,
        target,
        event: e ? e : null,
        element: this.tooltipEle,
        isInteracted: !isNullOrUndefined(e)
      };
      this.trigger("beforeClose", this.tooltipEventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          _this.mouseMoveBeforeRemove();
          _this.popupHide(hideAnimation, target);
        } else {
          _this.isHidden = false;
        }
      });
      this.tooltipEventArgs = null;
    };
    Tooltip2.prototype.popupHide = function(hideAnimation, target) {
      if (target) {
        this.restoreElement(target);
      }
      this.isHidden = true;
      var closeAnimation = {
        name: hideAnimation.effect,
        duration: hideAnimation.duration,
        delay: hideAnimation.delay,
        timingFunction: "easeIn"
      };
      if (hideAnimation.effect === "None") {
        closeAnimation = void 0;
      }
      if (this.popupObj) {
        this.popupObj.hide(closeAnimation);
      }
    };
    Tooltip2.prototype.restoreElement = function(target) {
      this.unwireMouseEvents(target);
      if (!isNullOrUndefined(target.getAttribute("data-content"))) {
        target.setAttribute("title", target.getAttribute("data-content"));
        target.removeAttribute("data-content");
      }
      this.removeDataTooltipId(target);
    };
    Tooltip2.prototype.clear = function() {
      if (this.tooltipEle) {
        removeClass([this.tooltipEle], POPUP_CLOSE);
        addClass([this.tooltipEle], POPUP_OPEN);
      }
      if (this.isHidden) {
        if (this.popupObj) {
          this.popupObj.destroy();
        }
        if (this.tooltipEle) {
          remove(this.tooltipEle);
        }
        this.tooltipEle = null;
        this.popupObj = null;
      }
    };
    Tooltip2.prototype.tooltipHover = function(e) {
      if (this.tooltipEle) {
        this.isTooltipOpen = true;
      }
    };
    Tooltip2.prototype.tooltipMouseOut = function(e) {
      this.isTooltipOpen = false;
      this.hideTooltip(this.animation.close, e, this.findTarget());
    };
    Tooltip2.prototype.onMouseOut = function(e) {
      var enteredElement = e.relatedTarget;
      if (enteredElement && !this.mouseTrail) {
        var checkForTooltipElement = closest(enteredElement, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT2);
        if (checkForTooltipElement) {
          EventHandler.add(checkForTooltipElement, "mouseleave", this.tooltipElementMouseOut, this);
        } else {
          this.hideTooltip(this.animation.close, e, this.findTarget());
          if (this.closeDelay === 0) {
            this.clear();
          }
        }
      } else {
        this.hideTooltip(this.animation.close, e, this.findTarget());
        this.clear();
      }
    };
    Tooltip2.prototype.tooltipElementMouseOut = function(e) {
      this.hideTooltip(this.animation.close, e, this.findTarget());
      EventHandler.remove(this.element, "mouseleave", this.tooltipElementMouseOut);
      this.clear();
    };
    Tooltip2.prototype.onStickyClose = function(e) {
      this.close();
    };
    Tooltip2.prototype.onMouseMove = function(event) {
      var eventPageX = 0;
      var eventPageY = 0;
      if (event.type.indexOf("touch") > -1) {
        event.preventDefault();
        eventPageX = event.touches[0].pageX;
        eventPageY = event.touches[0].pageY;
      } else {
        eventPageX = event.pageX;
        eventPageY = event.pageY;
      }
      Animation.stop(this.tooltipEle);
      removeClass([this.tooltipEle], POPUP_CLOSE);
      addClass([this.tooltipEle], POPUP_OPEN);
      this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);
      var pos = this.calculateTooltipOffset(this.position);
      var x = eventPageX + pos.left + this.offsetX;
      var y = eventPageY + pos.top + this.offsetY;
      var elePos = this.checkCollision(event.target, x, y);
      if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {
        var newpos = this.position.indexOf("Bottom") === 0 || this.position.indexOf("Top") === 0 ? elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;
        elePos.position = newpos;
        this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);
        var colpos = this.calculateTooltipOffset(elePos.position);
        elePos.left = eventPageX + colpos.left - this.offsetX;
        elePos.top = eventPageY + colpos.top - this.offsetY;
      }
      this.tooltipEle.style.left = elePos.left + "px";
      this.tooltipEle.style.top = elePos.top + "px";
    };
    Tooltip2.prototype.keyDown = function(event) {
      if (!isNullOrUndefined(this.targetsList) && !isNullOrUndefined(this.target)) {
        var target = [].slice.call(selectAll(this.target, this.element));
        if (target.length !== this.targetsList.length) {
          this.unwireEvents(this.opensOn);
          this.wireEvents(this.opensOn);
        }
      }
      if (this.tooltipEle && event.keyCode === 27) {
        this.close();
      }
    };
    Tooltip2.prototype.touchEnd = function(e) {
      if (this.tooltipEle && closest(e.target, "." + ROOT2) === null && !this.isSticky) {
        this.close();
      }
    };
    Tooltip2.prototype.scrollHandler = function(e) {
      if (this.tooltipEle) {
        if (!closest(e.target, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT2)) {
          this.close();
        }
      }
    };
    Tooltip2.prototype.render = function() {
      this.initialize();
      this.wireEvents(this.opensOn);
      this.renderComplete();
    };
    Tooltip2.prototype.preRender = function() {
      this.tipClass = TIP_BOTTOM;
      this.tooltipPositionX = "Center";
      this.tooltipPositionY = "Top";
      this.isHidden = true;
    };
    Tooltip2.prototype.wireEvents = function(trigger) {
      var triggerList = this.getTriggerList(trigger);
      for (var _i = 0, triggerList_1 = triggerList; _i < triggerList_1.length; _i++) {
        var opensOn = triggerList_1[_i];
        if (opensOn === "Custom") {
          return;
        }
        if (opensOn === "Focus") {
          this.wireFocusEvents();
        }
        if (opensOn === "Click") {
          EventHandler.add(this.element, Browser.touchStartEvent, this.targetClick, this);
        }
        if (opensOn === "Hover") {
          if (Browser.isDevice) {
            this.touchModule = new Touch(this.element, {
              tapHoldThreshold: TAPHOLD_THRESHOLD,
              tapHold: this.tapHoldHandler.bind(this)
            });
            EventHandler.add(this.element, Browser.touchEndEvent, this.touchEndHandler, this);
          } else {
            EventHandler.add(this.element, "mouseover", this.targetHover, this);
          }
        }
      }
      EventHandler.add(document, "touchend", this.touchEnd, this);
      EventHandler.add(document, "scroll wheel", this.scrollHandler, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      EventHandler.add(document, "keydown", this.keyDown, this);
    };
    Tooltip2.prototype.getTriggerList = function(trigger) {
      if (trigger === "Auto") {
        trigger = Browser.isDevice ? "Hover" : "Hover Focus";
      }
      return trigger.split(" ");
    };
    Tooltip2.prototype.wireFocusEvents = function() {
      if (!isNullOrUndefined(this.target)) {
        if (this.element.nodeName !== "BODY") {
          EventHandler.add(this.element, "focusin", this.targetHover, this);
        } else {
          var targetList = [].slice.call(selectAll(this.target, this.element));
          this.targetsList = targetList;
          for (var _i = 0, targetList_2 = targetList; _i < targetList_2.length; _i++) {
            var target = targetList_2[_i];
            EventHandler.add(target, "focus", this.targetHover, this);
          }
        }
      } else {
        EventHandler.add(this.element, "focus", this.targetHover, this);
      }
    };
    Tooltip2.prototype.wireMouseEvents = function(e, target) {
      if (this.tooltipEle) {
        if (!this.isSticky) {
          if (e.type === "focus") {
            EventHandler.add(target, "blur", this.onMouseOut, this);
          }
          if (e.type === "focusin") {
            EventHandler.add(target, "focusout", this.onMouseOut, this);
          }
          if (e.type === "mouseover") {
            EventHandler.add(target, "mouseleave", this.onMouseOut, this);
          }
          if (this.closeDelay) {
            EventHandler.add(this.tooltipEle, "mouseenter", this.tooltipHover, this);
            EventHandler.add(this.tooltipEle, "mouseleave", this.tooltipMouseOut, this);
          }
        }
        if (this.mouseTrail && this.openDelay === 0) {
          EventHandler.add(target, "mousemove touchstart mouseenter", this.onMouseMove, this);
        }
      }
    };
    Tooltip2.prototype.unwireEvents = function(trigger) {
      var triggerList = this.getTriggerList(trigger);
      for (var _i = 0, triggerList_2 = triggerList; _i < triggerList_2.length; _i++) {
        var opensOn = triggerList_2[_i];
        if (opensOn === "Custom") {
          return;
        }
        if (opensOn === "Focus") {
          this.unwireFocusEvents();
        }
        if (opensOn === "Click") {
          EventHandler.remove(this.element, Browser.touchStartEvent, this.targetClick);
        }
        if (opensOn === "Hover") {
          if (Browser.isDevice) {
            if (this.touchModule) {
              this.touchModule.destroy();
            }
            EventHandler.remove(this.element, Browser.touchEndEvent, this.touchEndHandler);
          } else {
            EventHandler.remove(this.element, "mouseover", this.targetHover);
          }
        }
      }
      EventHandler.remove(document, "touchend", this.touchEnd);
      EventHandler.remove(document, "scroll wheel", this.scrollHandler);
      EventHandler.remove(window, "resize", this.windowResize);
      EventHandler.remove(document, "keydown", this.keyDown);
    };
    Tooltip2.prototype.unwireFocusEvents = function() {
      if (!isNullOrUndefined(this.target)) {
        if (this.element.nodeName === "BODY") {
          EventHandler.remove(this.element, "focusin", this.targetHover);
        } else {
          var targetList = [].slice.call(selectAll(this.target, this.element));
          for (var _i = 0, targetList_3 = targetList; _i < targetList_3.length; _i++) {
            var target = targetList_3[_i];
            EventHandler.remove(target, "focus", this.targetHover);
          }
        }
      } else {
        EventHandler.remove(this.element, "focus", this.targetHover);
      }
    };
    Tooltip2.prototype.unwireMouseEvents = function(target) {
      if (!this.isSticky) {
        var triggerList = this.getTriggerList(this.opensOn);
        for (var _i = 0, triggerList_3 = triggerList; _i < triggerList_3.length; _i++) {
          var opensOn = triggerList_3[_i];
          if (opensOn === "Focus") {
            EventHandler.remove(target, "blur", this.onMouseOut);
            EventHandler.remove(target, "focusout", this.onMouseOut);
          }
          if (opensOn === "Hover" && !Browser.isDevice) {
            EventHandler.remove(target, "mouseleave", this.onMouseOut);
          }
        }
        if (this.closeDelay) {
          EventHandler.remove(target, "mouseenter", this.tooltipHover);
          EventHandler.remove(target, "mouseleave", this.tooltipMouseOut);
        }
      }
      if (this.mouseTrail) {
        EventHandler.remove(target, "mousemove touchstart mouseenter", this.onMouseMove);
      }
    };
    Tooltip2.prototype.findTarget = function() {
      var target = select('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
      return target;
    };
    Tooltip2.prototype.getModuleName = function() {
      return "tooltip";
    };
    Tooltip2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Tooltip2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var targetElement2 = this.findTarget();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            if (this.tooltipEle && targetElement2) {
              this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = formatUnit(newProp.width);
              this.reposition(targetElement2);
            }
            break;
          case "height":
            if (this.tooltipEle && targetElement2) {
              this.tooltipEle.style.height = formatUnit(newProp.height);
              this.reposition(targetElement2);
            }
            break;
          case "content":
            if (this.tooltipEle) {
              this.renderContent();
            }
            break;
          case "opensOn":
            this.unwireEvents(oldProp.opensOn);
            this.wireEvents(newProp.opensOn);
            break;
          case "position":
            this.formatPosition();
            if (this.tooltipEle && targetElement2) {
              var arrowInnerELe = select("." + ARROW_TIP_INNER, this.tooltipEle);
              arrowInnerELe.style.top = arrowInnerELe.style.left = null;
              this.reposition(targetElement2);
            }
            break;
          case "tipPointerPosition":
            if (this.tooltipEle && targetElement2) {
              this.reposition(targetElement2);
            }
            break;
          case "offsetX":
            if (this.tooltipEle) {
              var x = newProp.offsetX - oldProp.offsetX;
              this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + x).toString() + "px";
            }
            break;
          case "offsetY":
            if (this.tooltipEle) {
              var y = newProp.offsetY - oldProp.offsetY;
              this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + y).toString() + "px";
            }
            break;
          case "cssClass":
            if (this.tooltipEle) {
              if (oldProp.cssClass) {
                removeClass([this.tooltipEle], oldProp.cssClass.split(" "));
              }
              if (newProp.cssClass) {
                addClass([this.tooltipEle], newProp.cssClass.split(" "));
              }
            }
            break;
          case "enableRtl":
            if (this.tooltipEle) {
              if (this.enableRtl) {
                addClass([this.tooltipEle], RTL5);
              } else {
                removeClass([this.tooltipEle], RTL5);
              }
            }
            break;
          case "container":
            if (!isNullOrUndefined(this.containerElement)) {
              removeClass([this.containerElement], POPUP_CONTAINER);
            }
            this.container = newProp.container;
            if (this.tooltipEle && targetElement2) {
              this.appendContainer(this);
              this.reposition(targetElement2);
            }
        }
      }
    };
    Tooltip2.prototype.open = function(element2, animation) {
      if (isNullOrUndefined(animation)) {
        animation = this.animation.open;
      }
      if (isNullOrUndefined(element2)) {
        element2 = this.element;
      }
      if (element2.style.display === "none") {
        return;
      }
      this.showTooltip(element2, animation);
    };
    Tooltip2.prototype.close = function(animation) {
      if (!animation) {
        animation = this.animation.close;
      }
      this.hideTooltip(animation);
    };
    Tooltip2.prototype.refresh = function(target) {
      if (this.tooltipEle) {
        this.renderContent(target);
      }
      if (this.popupObj && target) {
        this.reposition(target);
      }
    };
    Tooltip2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.tooltipEle) {
        remove(this.tooltipEle);
      }
      if (this.popupObj) {
        this.popupObj.destroy();
      }
      removeClass([this.element], ROOT2);
      this.unwireEvents(this.opensOn);
      this.unwireMouseEvents(this.element);
      this.tooltipEle = null;
      this.popupObj = null;
      var currentTarget = selectAll('[data-tooltip-id= "' + this.ctrlId + '_content"]', this.element);
      for (var _i = 0, currentTarget_1 = currentTarget; _i < currentTarget_1.length; _i++) {
        var target = currentTarget_1[_i];
        this.restoreElement(target);
      }
    };
    __decorate10([
      Property("auto")
    ], Tooltip2.prototype, "width", void 0);
    __decorate10([
      Property("auto")
    ], Tooltip2.prototype, "height", void 0);
    __decorate10([
      Property()
    ], Tooltip2.prototype, "content", void 0);
    __decorate10([
      Property("body")
    ], Tooltip2.prototype, "container", void 0);
    __decorate10([
      Property()
    ], Tooltip2.prototype, "target", void 0);
    __decorate10([
      Property("TopCenter")
    ], Tooltip2.prototype, "position", void 0);
    __decorate10([
      Property(0)
    ], Tooltip2.prototype, "offsetX", void 0);
    __decorate10([
      Property(0)
    ], Tooltip2.prototype, "offsetY", void 0);
    __decorate10([
      Property(true)
    ], Tooltip2.prototype, "showTipPointer", void 0);
    __decorate10([
      Property(true)
    ], Tooltip2.prototype, "enableHtmlParse", void 0);
    __decorate10([
      Property(false)
    ], Tooltip2.prototype, "windowCollision", void 0);
    __decorate10([
      Property("Auto")
    ], Tooltip2.prototype, "tipPointerPosition", void 0);
    __decorate10([
      Property("Auto")
    ], Tooltip2.prototype, "opensOn", void 0);
    __decorate10([
      Property(false)
    ], Tooltip2.prototype, "mouseTrail", void 0);
    __decorate10([
      Property(false)
    ], Tooltip2.prototype, "isSticky", void 0);
    __decorate10([
      Complex({}, Animation2)
    ], Tooltip2.prototype, "animation", void 0);
    __decorate10([
      Property(0)
    ], Tooltip2.prototype, "openDelay", void 0);
    __decorate10([
      Property(0)
    ], Tooltip2.prototype, "closeDelay", void 0);
    __decorate10([
      Property()
    ], Tooltip2.prototype, "cssClass", void 0);
    __decorate10([
      Property(false)
    ], Tooltip2.prototype, "enableHtmlSanitizer", void 0);
    __decorate10([
      Property("")
    ], Tooltip2.prototype, "htmlAttributes", void 0);
    __decorate10([
      Event()
    ], Tooltip2.prototype, "beforeRender", void 0);
    __decorate10([
      Event()
    ], Tooltip2.prototype, "beforeOpen", void 0);
    __decorate10([
      Event()
    ], Tooltip2.prototype, "afterOpen", void 0);
    __decorate10([
      Event()
    ], Tooltip2.prototype, "beforeClose", void 0);
    __decorate10([
      Event()
    ], Tooltip2.prototype, "afterClose", void 0);
    __decorate10([
      Event()
    ], Tooltip2.prototype, "beforeCollision", void 0);
    __decorate10([
      Event()
    ], Tooltip2.prototype, "created", void 0);
    __decorate10([
      Event()
    ], Tooltip2.prototype, "destroyed", void 0);
    Tooltip2 = __decorate10([
      NotifyPropertyChanges
    ], Tooltip2);
    return Tooltip2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-popups/src/spinner/spinner.js
var globalTimeOut = {};
var DEFT_MAT_WIDTH = 30;
var DEFT_MAT3_WIDTH = 30;
var DEFT_FAB_WIDTH = 30;
var DEFT_FLUENT_WIDTH = 30;
var DEFT_BOOT_WIDTH = 30;
var DEFT_BOOT4_WIDTH = 36;
var DEFT_BOOT5_WIDTH = 36;
var CLS_SHOWSPIN = "e-spin-show";
var CLS_HIDESPIN = "e-spin-hide";
var CLS_MATERIALSPIN = "e-spin-material";
var CLS_MATERIAL3SPIN = "e-spin-material3";
var CLS_FABRICSPIN = "e-spin-fabric";
var CLS_FLUENTSPIN = "e-spin-fluent";
var CLS_TAILWINDSPIN = "e-spin-tailwind";
var CLS_BOOTSPIN = "e-spin-bootstrap";
var CLS_BOOT4SPIN = "e-spin-bootstrap4";
var CLS_BOOT5SPIN = "e-spin-bootstrap5";
var CLS_HIGHCONTRASTSPIN = "e-spin-high-contrast";
var CLS_SPINWRAP = "e-spinner-pane";
var CLS_SPININWRAP = "e-spinner-inner";
var CLS_SPINCIRCLE = "e-path-circle";
var CLS_SPINARC = "e-path-arc";
var CLS_SPINLABEL = "e-spin-label";
var CLS_SPINTEMPLATE = "e-spin-template";
var spinTemplate = null;
var spinCSSClass = null;
function createSpinner(args, internalCreateElement) {
  if (!args.target) {
    return;
  }
  var radius;
  var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
  var container = create_spinner_container(args.target, makeElement);
  if (!isNullOrUndefined(args.cssClass)) {
    container.wrap.classList.add(args.cssClass);
  }
  if (!isNullOrUndefined(args.template) || !isNullOrUndefined(spinTemplate)) {
    var template = !isNullOrUndefined(args.template) ? args.template : spinTemplate;
    container.wrap.classList.add(CLS_SPINTEMPLATE);
    replaceContent(container.wrap, template, spinCSSClass);
  } else {
    var theme = !isNullOrUndefined(args.type) ? args.type : getTheme(container.wrap);
    var width = !isNullOrUndefined(args.width) ? args.width : void 0;
    radius = calculateRadius(width, theme);
    setTheme(theme, container.wrap, radius, makeElement);
    if (!isNullOrUndefined(args.label)) {
      createLabel(container.inner_wrap, args.label, makeElement);
    }
  }
  container.wrap.classList.add(CLS_HIDESPIN);
  container = null;
}
function createLabel(container, label, makeElement) {
  var labelEle = makeElement("div", {});
  labelEle.classList.add(CLS_SPINLABEL);
  labelEle.innerHTML = label;
  container.appendChild(labelEle);
  return labelEle;
}
function createMaterialSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = { timeOut: 0, type: "Material", radius };
  create_material_element(container, uniqueID, makeElement, CLS_MATERIALSPIN);
  mat_calculate_attributes(radius, container, "Material", CLS_MATERIALSPIN);
}
function createMaterial3Spinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = { timeOut: 0, type: "Material3", radius };
  create_material_element(container, uniqueID, makeElement, CLS_MATERIAL3SPIN);
  mat_calculate_attributes(radius, container, "Material3", CLS_MATERIAL3SPIN);
}
function createBootstrap4Spinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = { timeOut: 0, type: "Bootstrap4", radius };
  create_material_element(container, uniqueID, makeElement, CLS_BOOT4SPIN);
  mat_calculate_attributes(radius, container, "Bootstrap4", CLS_BOOT4SPIN);
}
function createBootstrap5Spinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = { timeOut: 0, type: "Bootstrap5", radius };
  create_material_element(container, uniqueID, makeElement, CLS_BOOT5SPIN);
  mat_calculate_attributes(radius, container, "Bootstrap5", CLS_BOOT5SPIN);
}
function startMatAnimate(container, uniqueID, radius) {
  var globalObject = {};
  var timeOutVar = 0;
  globalTimeOut["" + uniqueID].timeOut = 0;
  globalObject["" + uniqueID] = globalVariables(uniqueID, radius, 0, 0);
  var spinnerInfo = { uniqueID, container, globalInfo: globalObject, timeOutVar };
  animateMaterial(spinnerInfo);
}
function createFabricSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = { timeOut: 0, type: "Fabric", radius };
  create_fabric_element(container, uniqueID, CLS_FABRICSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_FABRICSPIN);
}
function createFluentSinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = { timeOut: 0, type: "Fluent", radius };
  create_fabric_element(container, uniqueID, CLS_FLUENTSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_FLUENTSPIN);
}
function createTailwindSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = { timeOut: 0, type: "Tailwind", radius };
  create_fabric_element(container, uniqueID, CLS_TAILWINDSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_TAILWINDSPIN);
}
function createHighContrastSpinner(container, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = { timeOut: 0, type: "HighContrast", radius };
  create_fabric_element(container, uniqueID, CLS_HIGHCONTRASTSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_HIGHCONTRASTSPIN);
}
function getTheme(container) {
  var theme = window.getComputedStyle(container, ":after").getPropertyValue("content");
  return theme.replace(/['"]+/g, "");
}
function setTheme(theme, container, radius, makeElement) {
  var innerContainer = container.querySelector("." + CLS_SPININWRAP);
  var svg = innerContainer.querySelector("svg");
  if (!isNullOrUndefined(svg)) {
    innerContainer.removeChild(svg);
  }
  switch (theme) {
    case "Material":
      createMaterialSpinner(innerContainer, radius, makeElement);
      break;
    case "Material3":
      createMaterial3Spinner(innerContainer, radius, makeElement);
      break;
    case "Fabric":
      createFabricSpinner(innerContainer, radius, makeElement);
      break;
    case "Fluent":
      createFluentSinner(innerContainer, radius, makeElement);
      break;
    case "Bootstrap":
      createBootstrapSpinner(innerContainer, radius, makeElement);
      break;
    case "HighContrast":
      createHighContrastSpinner(innerContainer, radius, makeElement);
      break;
    case "Bootstrap4":
      createBootstrap4Spinner(innerContainer, radius, makeElement);
      break;
    case "Bootstrap5":
      createBootstrap5Spinner(innerContainer, radius, makeElement);
      break;
    case "Tailwind":
    case "Tailwind-dark":
      createTailwindSpinner(innerContainer, radius, makeElement);
      break;
  }
}
function createBootstrapSpinner(innerContainer, radius, makeElement) {
  var uniqueID = random_generator();
  globalTimeOut["" + uniqueID] = { timeOut: 0, type: "Bootstrap", radius };
  create_bootstrap_element(innerContainer, uniqueID, makeElement);
  boot_calculate_attributes(innerContainer, radius);
}
function create_bootstrap_element(innerContainer, uniqueID, makeElement) {
  var svgBoot = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  var viewBoxValue = 64;
  var trans = 32;
  var defaultRadius = 2;
  svgBoot.setAttribute("id", uniqueID);
  svgBoot.setAttribute("class", CLS_BOOTSPIN);
  svgBoot.setAttribute("viewBox", "0 0 " + viewBoxValue + " " + viewBoxValue);
  innerContainer.insertBefore(svgBoot, innerContainer.firstChild);
  for (var item = 0; item <= 7; item++) {
    var bootCircle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    bootCircle.setAttribute("class", CLS_SPINCIRCLE + "_" + item);
    bootCircle.setAttribute("r", defaultRadius + "");
    bootCircle.setAttribute("transform", "translate(" + trans + "," + trans + ")");
    svgBoot.appendChild(bootCircle);
  }
}
function boot_calculate_attributes(innerContainer, radius) {
  var svg = innerContainer.querySelector("svg.e-spin-bootstrap");
  var x = 0;
  var y = 0;
  var rad = 24;
  svg.style.width = svg.style.height = radius + "px";
  var startArc = 90;
  for (var item = 0; item <= 7; item++) {
    var start = defineArcPoints(x, y, rad, startArc);
    var circleEle = svg.querySelector("." + CLS_SPINCIRCLE + "_" + item);
    circleEle.setAttribute("cx", start.x + "");
    circleEle.setAttribute("cy", start.y + "");
    startArc = startArc >= 360 ? 0 : startArc;
    startArc = startArc + 45;
  }
}
function generateSeries(begin, stop) {
  var series = [];
  var start = begin;
  var end = stop;
  var increment = false, count = 1;
  formSeries(start);
  function formSeries(i) {
    series.push(i);
    if (i !== end || count === 1) {
      if (i <= start && i > 1 && !increment) {
        i = parseFloat((i - 0.2).toFixed(2));
      } else if (i === 1) {
        i = 7;
        i = parseFloat((i + 0.2).toFixed(2));
        increment = true;
      } else if (i < 8 && increment) {
        i = parseFloat((i + 0.2).toFixed(2));
        if (i === 8) {
          increment = false;
        }
      } else if (i <= 8 && !increment) {
        i = parseFloat((i - 0.2).toFixed(2));
      }
      ++count;
      formSeries(i);
    }
  }
  return series;
}
function animateBootstrap(innerContainer) {
  var svg = innerContainer.querySelector("svg.e-spin-bootstrap");
  var id = svg.getAttribute("id");
  for (var i = 1; i <= 8; i++) {
    var circleEle = innerContainer.getElementsByClassName("e-path-circle_" + (i === 8 ? 0 : i))[0];
    rotation(circleEle, i, i, generateSeries(i, i), id);
  }
  function rotation(circle, start, end, series, id2) {
    var count = 0;
    boot_animate(start);
    function boot_animate(radius) {
      if (globalTimeOut["" + id2].isAnimate) {
        ++count;
        circle.setAttribute("r", radius + "");
        if (count >= series.length) {
          count = 0;
        }
        globalTimeOut[id2].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18);
      }
    }
  }
}
function replaceContent(container, template, cssClass2) {
  if (!isNullOrUndefined(cssClass2)) {
    container.classList.add(cssClass2);
  }
  var inner = container.querySelector(".e-spinner-inner");
  inner.innerHTML = template;
}
function calculateRadius(width, theme) {
  var defaultSize;
  switch (theme) {
    case "Material":
      defaultSize = DEFT_MAT_WIDTH;
      break;
    case "Material3":
      defaultSize = DEFT_MAT3_WIDTH;
      break;
    case "Fabric":
      defaultSize = DEFT_FAB_WIDTH;
      break;
    case "Tailwind":
    case "Tailwind-dark":
      defaultSize = DEFT_FAB_WIDTH;
      break;
    case "Fluent":
      defaultSize = DEFT_FLUENT_WIDTH;
      break;
    case "Bootstrap4":
      defaultSize = DEFT_BOOT4_WIDTH;
      break;
    case "Bootstrap5":
      defaultSize = DEFT_BOOT5_WIDTH;
      break;
    default:
      defaultSize = DEFT_BOOT_WIDTH;
  }
  width = width ? parseFloat(width + "") : defaultSize;
  return theme === "Bootstrap" ? width : width / 2;
}
function globalVariables(id, radius, count, previousId) {
  return {
    radius,
    count,
    previousId
  };
}
function random_generator() {
  var random = "";
  var combine = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for (var i = 0; i < 5; i++) {
    random += combine.charAt(Math.floor(Math.random() * combine.length));
  }
  return random;
}
function create_fabric_element(innerCon, uniqueID, themeClass, makeElement) {
  var svgFabric = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  svgFabric.setAttribute("id", uniqueID);
  svgFabric.setAttribute("class", themeClass);
  var fabricCirclePath = document.createElementNS("http://www.w3.org/2000/svg", "path");
  fabricCirclePath.setAttribute("class", CLS_SPINCIRCLE);
  var fabricCircleArc = document.createElementNS("http://www.w3.org/2000/svg", "path");
  fabricCircleArc.setAttribute("class", CLS_SPINARC);
  innerCon.insertBefore(svgFabric, innerCon.firstChild);
  svgFabric.appendChild(fabricCirclePath);
  svgFabric.appendChild(fabricCircleArc);
}
function create_material_element(innerContainer, uniqueID, makeElement, cls) {
  var svgMaterial = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  var matCirclePath = document.createElementNS("http://www.w3.org/2000/svg", "path");
  svgMaterial.setAttribute("class", cls);
  svgMaterial.setAttribute("id", uniqueID);
  matCirclePath.setAttribute("class", CLS_SPINCIRCLE);
  innerContainer.insertBefore(svgMaterial, innerContainer.firstChild);
  svgMaterial.appendChild(matCirclePath);
}
function create_spinner_container(target, makeElement) {
  var spinnerContainer = makeElement("div", {});
  var spinnerInnerContainer = makeElement("div", {});
  spinnerContainer.classList.add(CLS_SPINWRAP);
  spinnerInnerContainer.classList.add(CLS_SPININWRAP);
  target.appendChild(spinnerContainer);
  spinnerContainer.appendChild(spinnerInnerContainer);
  return { wrap: spinnerContainer, inner_wrap: spinnerInnerContainer };
}
function animateMaterial(spinnerInfo) {
  var start = 1;
  var end = 149;
  var duration = 1333;
  var max = 75;
  createCircle(start, end, easeAnimation, duration, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, max, spinnerInfo);
  spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;
}
function createCircle(start, end, easing, duration, count, max, spinnerInfo) {
  var id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId;
  var startTime = (/* @__PURE__ */ new Date()).getTime();
  var change = end - start;
  var diameter = getSize(spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius * 2 + "");
  var strokeSize = getStrokeSize(diameter);
  var rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);
  mat_animation(spinnerInfo);
  function mat_animation(spinnerInfo2) {
    var currentTime = Math.max(0, Math.min((/* @__PURE__ */ new Date()).getTime() - startTime, duration));
    updatePath(easing(currentTime, start, change, duration), spinnerInfo2.container);
    if (id === spinnerInfo2.globalInfo[spinnerInfo2.uniqueID].previousId && currentTime < duration) {
      globalTimeOut[spinnerInfo2.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo2), 1);
    } else {
      animateMaterial(spinnerInfo2);
    }
  }
  function updatePath(value, container) {
    if (!isNullOrUndefined(container.querySelector("svg.e-spin-material")) || !isNullOrUndefined(container.querySelector("svg.e-spin-material3"))) {
      var svg = void 0;
      if (!isNullOrUndefined(container.querySelector("svg.e-spin-material")) && !isNullOrUndefined(container.querySelector("svg.e-spin-material").querySelector("path.e-path-circle"))) {
        svg = container.querySelector("svg.e-spin-material");
      } else if (!isNullOrUndefined(container.querySelector("svg.e-spin-material3")) && !isNullOrUndefined(container.querySelector("svg.e-spin-material3").querySelector("path.e-path-circle"))) {
        svg = container.querySelector("svg.e-spin-material3");
      }
      if (!isNullOrUndefined(svg)) {
        var path = svg.querySelector("path.e-path-circle");
        path.setAttribute("stroke-dashoffset", getDashOffset(diameter, strokeSize, value, max) + "");
        path.setAttribute("transform", "rotate(" + rotate + " " + diameter / 2 + " " + diameter / 2 + ")");
      }
    }
  }
}
function mat_calculate_attributes(radius, container, type, cls) {
  var diameter = radius * 2;
  var svg = container.querySelector("svg." + cls);
  var path = svg.querySelector("path.e-path-circle");
  var strokeSize = getStrokeSize(diameter);
  var transformOrigin = diameter / 2 + "px";
  svg.setAttribute("viewBox", "0 0 " + diameter + " " + diameter);
  svg.style.width = svg.style.height = diameter + "px";
  svg.style.transformOrigin = transformOrigin + " " + transformOrigin + " " + transformOrigin;
  path.setAttribute("d", drawArc(diameter, strokeSize));
  if (type === "Material" || type === "Material3") {
    path.setAttribute("stroke-width", strokeSize + "");
    path.setAttribute("stroke-dasharray", (diameter - strokeSize) * Math.PI * 0.75 + "");
    path.setAttribute("stroke-dashoffset", getDashOffset(diameter, strokeSize, 1, 75) + "");
  }
}
function getSize(value) {
  var parsed = parseFloat(value);
  return parsed;
}
function drawArc(diameter, strokeSize) {
  var radius = diameter / 2;
  var offset = strokeSize / 2;
  return "M" + radius + "," + offset + "A" + (radius - offset) + "," + (radius - offset) + " 0 1 1 " + offset + "," + radius;
}
function getStrokeSize(diameter) {
  return 10 / 100 * diameter;
}
function getDashOffset(diameter, strokeSize, value, max) {
  return (diameter - strokeSize) * Math.PI * (3 * max / 100 - value / 100);
}
function easeAnimation(current, start, change, duration) {
  var timestamp = (current /= duration) * current;
  var timecount = timestamp * current;
  return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);
}
function fb_calculate_attributes(radius, innerConainer, trgClass) {
  var centerX = radius;
  var centerY = radius;
  var diameter = radius * 2;
  var startArc = 315, endArc = 45;
  var svg = innerConainer.querySelector("." + trgClass);
  var circle = svg.querySelector(".e-path-circle");
  var path = svg.querySelector(".e-path-arc");
  var transformOrigin = diameter / 2 + "px";
  circle.setAttribute("d", defineCircle(centerX, centerY, radius));
  path.setAttribute("d", defineArc(centerX, centerY, radius, startArc, endArc));
  svg.setAttribute("viewBox", "0 0 " + diameter + " " + diameter);
  svg.style.transformOrigin = transformOrigin + " " + transformOrigin + " " + transformOrigin;
  svg.style.width = svg.style.height = diameter + "px";
}
function defineArcPoints(centerX, centerY, radius, angle) {
  var radians = (angle - 90) * Math.PI / 180;
  return {
    x: centerX + radius * Math.cos(radians),
    y: centerY + radius * Math.sin(radians)
  };
}
function defineArc(x, y, radius, startArc, endArc) {
  var start = defineArcPoints(x, y, radius, endArc);
  var end = defineArcPoints(x, y, radius, startArc);
  var d = [
    "M",
    start.x,
    start.y,
    "A",
    radius,
    radius,
    0,
    0,
    0,
    end.x,
    end.y
  ].join(" ");
  return d;
}
function defineCircle(x, y, radius) {
  var d = [
    "M",
    x,
    y,
    "m",
    -radius,
    0,
    "a",
    radius,
    radius,
    0,
    1,
    0,
    radius * 2,
    0,
    "a",
    radius,
    radius,
    0,
    1,
    0,
    -radius * 2,
    0
  ].join(" ");
  return d;
}
function showSpinner(container) {
  showHideSpinner(container, false);
  container = null;
}
function showHideSpinner(container, isHide) {
  var spinnerWrap;
  if (container) {
    if (container.classList.contains(CLS_SPINWRAP)) {
      spinnerWrap = container;
    } else {
      var spinWrapCollection = void 0;
      spinWrapCollection = container.querySelectorAll("." + CLS_SPINWRAP);
      spinnerWrap = Array.from(spinWrapCollection).find(function(wrap) {
        return wrap.parentElement === container;
      }) || null;
    }
  }
  if (container && spinnerWrap) {
    var inner = spinnerWrap.querySelector("." + CLS_SPININWRAP);
    var spinCheck = void 0;
    spinCheck = isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) : !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN);
    if (spinCheck) {
      var svgEle = spinnerWrap.querySelector("svg");
      if (isNullOrUndefined(svgEle)) {
        return;
      }
      var id = svgEle.getAttribute("id");
      globalTimeOut["" + id].isAnimate = !isHide;
      switch (globalTimeOut["" + id].type) {
        case "Material":
        case "Material3":
          isHide ? clearTimeout(globalTimeOut[id].timeOut) : startMatAnimate(inner, id, globalTimeOut[id].radius);
          break;
        case "Bootstrap":
          isHide ? clearTimeout(globalTimeOut[id].timeOut) : animateBootstrap(inner);
          break;
      }
    }
    isHide ? classList(spinnerWrap, [CLS_HIDESPIN], [CLS_SHOWSPIN]) : classList(spinnerWrap, [CLS_SHOWSPIN], [CLS_HIDESPIN]);
    container = null;
  }
}
function hideSpinner(container) {
  showHideSpinner(container, true);
  container = null;
}

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-data/src/query.js
var Query = (
  /** @class */
  function() {
    function Query2(from) {
      this.subQuery = null;
      this.isChild = false;
      this.distincts = [];
      this.queries = [];
      this.key = "";
      this.fKey = "";
      if (typeof from === "string") {
        this.fromTable = from;
      } else if (from && from instanceof Array) {
        this.lookups = from;
      }
      this.expands = [];
      this.sortedColumns = [];
      this.groupedColumns = [];
      this.subQuery = null;
      this.isChild = false;
      this.params = [];
      this.lazyLoad = [];
      return this;
    }
    Query2.prototype.setKey = function(field) {
      this.key = field;
      return this;
    };
    Query2.prototype.using = function(dataManager) {
      this.dataManager = dataManager;
      return this;
    };
    Query2.prototype.execute = function(dataManager, done, fail, always) {
      dataManager = dataManager || this.dataManager;
      if (dataManager) {
        return dataManager.executeQuery(this, done, fail, always);
      }
      return DataUtil.throwError('Query - execute() : dataManager needs to be is set using "using" function or should be passed as argument');
    };
    Query2.prototype.executeLocal = function(dataManager) {
      dataManager = dataManager || this.dataManager;
      if (dataManager) {
        return dataManager.executeLocal(this);
      }
      return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using "using" function or should be passed as argument');
    };
    Query2.prototype.clone = function() {
      var cloned = new Query2();
      cloned.queries = this.queries.slice(0);
      cloned.key = this.key;
      cloned.isChild = this.isChild;
      cloned.dataManager = this.dataManager;
      cloned.fromTable = this.fromTable;
      cloned.params = this.params.slice(0);
      cloned.expands = this.expands.slice(0);
      cloned.sortedColumns = this.sortedColumns.slice(0);
      cloned.groupedColumns = this.groupedColumns.slice(0);
      cloned.subQuerySelector = this.subQuerySelector;
      cloned.subQuery = this.subQuery;
      cloned.fKey = this.fKey;
      cloned.isCountRequired = this.isCountRequired;
      cloned.distincts = this.distincts.slice(0);
      cloned.lazyLoad = this.lazyLoad.slice(0);
      return cloned;
    };
    Query2.prototype.from = function(tableName) {
      this.fromTable = tableName;
      return this;
    };
    Query2.prototype.addParams = function(key, value) {
      if (typeof value === "function") {
        this.params.push({ key, fn: value });
      } else {
        this.params.push({ key, value });
      }
      return this;
    };
    Query2.prototype.distinct = function(fields) {
      if (typeof fields === "string") {
        this.distincts = [].slice.call([fields], 0);
      } else {
        this.distincts = fields.slice(0);
      }
      return this;
    };
    Query2.prototype.expand = function(tables) {
      if (typeof tables === "string") {
        this.expands = [].slice.call([tables], 0);
      } else {
        this.expands = tables.slice(0);
      }
      return this;
    };
    Query2.prototype.where = function(fieldName, operator, value, ignoreCase, ignoreAccent, matchCase) {
      operator = operator ? operator.toLowerCase() : null;
      var predicate = null;
      if (typeof fieldName === "string") {
        predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent, matchCase);
      } else if (fieldName instanceof Predicate) {
        predicate = fieldName;
      }
      this.queries.push({
        fn: "onWhere",
        e: predicate
      });
      return this;
    };
    Query2.prototype.search = function(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {
      if (typeof fieldNames === "string") {
        fieldNames = [fieldNames];
      }
      if (!operator || operator === "none") {
        operator = "contains";
      }
      var comparer = DataUtil.fnOperators[operator];
      this.queries.push({
        fn: "onSearch",
        e: {
          fieldNames,
          operator,
          searchKey,
          ignoreCase,
          ignoreAccent,
          comparer
        }
      });
      return this;
    };
    Query2.prototype.sortBy = function(fieldName, comparer, isFromGroup) {
      return this.sortByForeignKey(fieldName, comparer, isFromGroup);
    };
    Query2.prototype.sortByForeignKey = function(fieldName, comparer, isFromGroup, direction) {
      var order = !isNullOrUndefined(direction) ? direction : "ascending";
      var sorts;
      var temp;
      if (typeof fieldName === "string" && DataUtil.endsWith(fieldName.toLowerCase(), " desc")) {
        fieldName = fieldName.replace(/ desc$/i, "");
        comparer = "descending";
      }
      if (!comparer || typeof comparer === "string") {
        order = comparer ? comparer.toLowerCase() : "ascending";
        comparer = DataUtil.fnSort(comparer);
      }
      if (isFromGroup) {
        sorts = Query2.filterQueries(this.queries, "onSortBy");
        for (var i = 0; i < sorts.length; i++) {
          temp = sorts[i].e.fieldName;
          if (typeof temp === "string") {
            if (temp === fieldName) {
              return this;
            }
          } else if (temp instanceof Array) {
            for (var j = 0; j < temp.length; j++) {
              if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + " desc") {
                return this;
              }
            }
          }
        }
      }
      this.queries.push({
        fn: "onSortBy",
        e: {
          fieldName,
          comparer,
          direction: order
        }
      });
      return this;
    };
    Query2.prototype.sortByDesc = function(fieldName) {
      return this.sortBy(fieldName, "descending");
    };
    Query2.prototype.group = function(fieldName, fn, format) {
      this.sortBy(fieldName, null, true);
      this.queries.push({
        fn: "onGroup",
        e: {
          fieldName,
          comparer: fn ? fn : null,
          format: format ? format : null
        }
      });
      return this;
    };
    Query2.prototype.page = function(pageIndex, pageSize) {
      this.queries.push({
        fn: "onPage",
        e: {
          pageIndex,
          pageSize
        }
      });
      return this;
    };
    Query2.prototype.range = function(start, end) {
      this.queries.push({
        fn: "onRange",
        e: {
          start,
          end
        }
      });
      return this;
    };
    Query2.prototype.take = function(nos) {
      this.queries.push({
        fn: "onTake",
        e: {
          nos
        }
      });
      return this;
    };
    Query2.prototype.skip = function(nos) {
      this.queries.push({
        fn: "onSkip",
        e: { nos }
      });
      return this;
    };
    Query2.prototype.select = function(fieldNames) {
      if (typeof fieldNames === "string") {
        fieldNames = [].slice.call([fieldNames], 0);
      }
      this.queries.push({
        fn: "onSelect",
        e: { fieldNames }
      });
      return this;
    };
    Query2.prototype.hierarchy = function(query, selectorFn) {
      this.subQuerySelector = selectorFn;
      this.subQuery = query;
      return this;
    };
    Query2.prototype.foreignKey = function(key) {
      this.fKey = key;
      return this;
    };
    Query2.prototype.requiresCount = function() {
      this.isCountRequired = true;
      return this;
    };
    Query2.prototype.aggregate = function(type, field) {
      this.queries.push({
        fn: "onAggregates",
        e: { field, type }
      });
      return this;
    };
    Query2.filterQueries = function(queries, name) {
      return queries.filter(function(q) {
        return q.fn === name;
      });
    };
    Query2.filterQueryLists = function(queries, singles) {
      var filtered = queries.filter(function(q) {
        return singles.indexOf(q.fn) !== -1;
      });
      var res = {};
      for (var i = 0; i < filtered.length; i++) {
        if (!res[filtered[i].fn]) {
          res[filtered[i].fn] = filtered[i].e;
        }
      }
      return res;
    };
    return Query2;
  }()
);
var Predicate = (
  /** @class */
  function() {
    function Predicate2(field, operator, value, ignoreCase, ignoreAccent, matchCase) {
      if (ignoreCase === void 0) {
        ignoreCase = false;
      }
      this.ignoreAccent = false;
      this.isComplex = false;
      if (typeof field === "string") {
        this.field = field;
        this.operator = operator.toLowerCase();
        this.value = value;
        this.matchCase = matchCase;
        this.ignoreCase = ignoreCase;
        this.ignoreAccent = ignoreAccent;
        this.isComplex = false;
        this.comparer = DataUtil.fnOperators.processOperator(this.operator);
      } else if (field instanceof Predicate2 && value instanceof Predicate2 || value instanceof Array) {
        this.isComplex = true;
        this.condition = operator.toLowerCase();
        this.predicates = [field];
        this.matchCase = field.matchCase;
        this.ignoreCase = field.ignoreCase;
        this.ignoreAccent = field.ignoreAccent;
        if (value instanceof Array) {
          [].push.apply(this.predicates, value);
        } else {
          this.predicates.push(value);
        }
      }
      return this;
    }
    Predicate2.and = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "and");
    };
    Predicate2.prototype.and = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "and", ignoreCase, ignoreAccent);
    };
    Predicate2.or = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "or");
    };
    Predicate2.prototype.or = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "or", ignoreCase, ignoreAccent);
    };
    Predicate2.ornot = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "or not");
    };
    Predicate2.prototype.ornot = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "ornot", ignoreCase, ignoreAccent);
    };
    Predicate2.andnot = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "and not");
    };
    Predicate2.prototype.andnot = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "andnot", ignoreCase, ignoreAccent);
    };
    Predicate2.fromJson = function(json) {
      if (json instanceof Array) {
        var res = [];
        for (var i = 0, len = json.length; i < len; i++) {
          res.push(this.fromJSONData(json[i]));
        }
        return res;
      }
      var pred = json;
      return this.fromJSONData(pred);
    };
    Predicate2.prototype.validate = function(record) {
      var predicate = this.predicates ? this.predicates : [];
      var ret;
      var isAnd;
      if (!this.isComplex && this.comparer) {
        if (this.condition && this.condition.indexOf("not") !== -1) {
          this.condition = this.condition.split("not")[0] === "" ? void 0 : this.condition.split("not")[0];
          return !this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
        } else {
          return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
        }
      }
      if (this.condition && this.condition.indexOf("not") !== -1) {
        isAnd = this.condition.indexOf("and") !== -1;
      } else {
        isAnd = this.condition === "and";
      }
      for (var i = 0; i < predicate.length; i++) {
        if (i > 0 && this.condition && this.condition.indexOf("not") !== -1) {
          predicate[i].condition = predicate[i].condition ? predicate[i].condition + "not" : "not";
        }
        ret = predicate[i].validate(record);
        if (isAnd) {
          if (!ret) {
            return false;
          }
        } else {
          if (ret) {
            return true;
          }
        }
      }
      return isAnd;
    };
    Predicate2.prototype.toJson = function() {
      var predicates;
      var p;
      if (this.isComplex) {
        predicates = [];
        p = this.predicates;
        for (var i = 0; i < p.length; i++) {
          predicates.push(p[i].toJson());
        }
      }
      return {
        isComplex: this.isComplex,
        field: this.field,
        operator: this.operator,
        value: this.value,
        ignoreCase: this.ignoreCase,
        ignoreAccent: this.ignoreAccent,
        condition: this.condition,
        predicates,
        matchCase: this.matchCase
      };
    };
    Predicate2.combinePredicates = function(predicates, operator) {
      if (predicates.length === 1) {
        if (!(predicates[0] instanceof Array)) {
          return predicates[0];
        }
        predicates = predicates[0];
      }
      return new Predicate2(predicates[0], operator, predicates.slice(1));
    };
    Predicate2.combine = function(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {
      if (field instanceof Predicate2) {
        return Predicate2[condition](pred, field);
      }
      if (typeof field === "string") {
        return Predicate2[condition](pred, new Predicate2(field, operator, value, ignoreCase, ignoreAccent));
      }
      return DataUtil.throwError("Predicate - " + condition + " : invalid arguments");
    };
    Predicate2.fromJSONData = function(json) {
      var preds = json.predicates || [];
      var len = preds.length;
      var predicates = [];
      var result;
      for (var i = 0; i < len; i++) {
        predicates.push(this.fromJSONData(preds[i]));
      }
      if (!json.isComplex) {
        result = new Predicate2(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);
      } else {
        result = new Predicate2(predicates[0], json.condition, predicates.slice(1));
      }
      return result;
    };
    return Predicate2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-data/src/util.js
var consts = { GroupGuid: "{271bbba0-1ee7}" };
var DataUtil = (
  /** @class */
  function() {
    function DataUtil2() {
    }
    DataUtil2.getValue = function(value, inst) {
      if (typeof value === "function") {
        return value.call(inst || {});
      }
      return value;
    };
    DataUtil2.endsWith = function(input, substr) {
      return input.slice && input.slice(-substr.length) === substr;
    };
    DataUtil2.notEndsWith = function(input, substr) {
      return input.slice && input.slice(-substr.length) !== substr;
    };
    DataUtil2.startsWith = function(input, start) {
      return input.slice(0, start.length) === start;
    };
    DataUtil2.notStartsWith = function(input, start) {
      return input.slice(0, start.length) !== start;
    };
    DataUtil2.wildCard = function(input, pattern) {
      var asteriskSplit;
      var optionalSplit;
      if (pattern.indexOf("(") !== -1) {
        pattern = pattern.split("(").join("[(]");
      }
      if (pattern.indexOf(")") !== -1) {
        pattern = pattern.split(")").join("[)]");
      }
      if (pattern.indexOf("*") !== -1) {
        if (pattern.charAt(0) !== "*") {
          pattern = "^" + pattern;
        }
        if (pattern.charAt(pattern.length - 1) !== "*") {
          pattern = pattern + "$";
        }
        asteriskSplit = pattern.split("*");
        for (var i = 0; i < asteriskSplit.length; i++) {
          if (asteriskSplit[i].indexOf(".") === -1) {
            asteriskSplit[i] = asteriskSplit[i] + ".*";
          } else {
            asteriskSplit[i] = asteriskSplit[i] + "*";
          }
        }
        pattern = asteriskSplit.join("");
      }
      if (pattern.indexOf("%3f") !== -1 || pattern.indexOf("?") !== -1) {
        optionalSplit = pattern.indexOf("%3f") !== -1 ? pattern.split("%3f") : pattern.split("?");
        pattern = optionalSplit.join(".");
      }
      var regexPattern = new RegExp(pattern, "g");
      return regexPattern.test(input);
    };
    DataUtil2.like = function(input, pattern) {
      if (pattern.indexOf("%") !== -1) {
        if (pattern.charAt(0) === "%" && pattern.lastIndexOf("%") < 2) {
          pattern = pattern.substring(1, pattern.length);
          return DataUtil2.startsWith(DataUtil2.toLowerCase(input), DataUtil2.toLowerCase(pattern));
        } else if (pattern.charAt(pattern.length - 1) === "%" && pattern.indexOf("%") > pattern.length - 3) {
          pattern = pattern.substring(0, pattern.length - 1);
          return DataUtil2.endsWith(DataUtil2.toLowerCase(input), DataUtil2.toLowerCase(pattern));
        } else if (pattern.lastIndexOf("%") !== pattern.indexOf("%") && pattern.lastIndexOf("%") > pattern.indexOf("%") + 1) {
          pattern = pattern.substring(pattern.indexOf("%") + 1, pattern.lastIndexOf("%"));
          return input.indexOf(pattern) !== -1;
        } else {
          return input.indexOf(pattern) !== -1;
        }
      } else {
        return false;
      }
    };
    DataUtil2.fnSort = function(order) {
      order = order ? DataUtil2.toLowerCase(order) : "ascending";
      if (order === "ascending") {
        return this.fnAscending;
      }
      return this.fnDescending;
    };
    DataUtil2.fnAscending = function(x, y) {
      if (isNullOrUndefined(x) && isNullOrUndefined(y)) {
        return -1;
      }
      if (y === null || y === void 0) {
        return -1;
      }
      if (typeof x === "string") {
        return x.localeCompare(y);
      }
      if (x === null || x === void 0) {
        return 1;
      }
      return x - y;
    };
    DataUtil2.fnDescending = function(x, y) {
      if (isNullOrUndefined(x) && isNullOrUndefined(y)) {
        return -1;
      }
      if (y === null || y === void 0) {
        return 1;
      }
      if (typeof x === "string") {
        return x.localeCompare(y) * -1;
      }
      if (x === null || x === void 0) {
        return -1;
      }
      return y - x;
    };
    DataUtil2.extractFields = function(obj, fields) {
      var newObj = {};
      for (var i = 0; i < fields.length; i++) {
        newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);
      }
      return newObj;
    };
    DataUtil2.select = function(jsonArray, fields) {
      var newData = [];
      for (var i = 0; i < jsonArray.length; i++) {
        newData.push(this.extractFields(jsonArray[i], fields));
      }
      return newData;
    };
    DataUtil2.group = function(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {
      level = level || 1;
      var jsonData = jsonArray;
      var guid = "GroupGuid";
      if (jsonData.GroupGuid === consts[guid]) {
        var _loop_1 = function(j2) {
          if (!isNullOrUndefined(groupDs)) {
            var indx = -1;
            var temp = groupDs.filter(function(e) {
              return e.key === jsonData[j2].key;
            });
            indx = groupDs.indexOf(temp[0]);
            jsonData[j2].items = this_1.group(jsonData[j2].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);
            jsonData[j2].count = groupDs[indx].count;
          } else {
            jsonData[j2].items = this_1.group(jsonData[j2].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);
            jsonData[j2].count = jsonData[j2].items.length;
          }
        };
        var this_1 = this;
        for (var j = 0; j < jsonData.length; j++) {
          _loop_1(j);
        }
        jsonData.childLevels += 1;
        return jsonData;
      }
      var grouped = {};
      var groupedArray = [];
      groupedArray.GroupGuid = consts[guid];
      groupedArray.level = level;
      groupedArray.childLevels = 0;
      groupedArray.records = jsonData;
      var _loop_2 = function(i2) {
        var val = this_2.getVal(jsonData, i2, field);
        if (!isNullOrUndefined(format)) {
          val = format(val, field);
        }
        if (!grouped[val]) {
          grouped[val] = {
            key: val,
            count: 0,
            items: [],
            aggregates: {},
            field
          };
          groupedArray.push(grouped[val]);
          if (!isNullOrUndefined(groupDs)) {
            var tempObj = groupDs.filter(function(e) {
              return e.key === grouped[val].key;
            });
            grouped[val].count = tempObj[0].count;
          }
        }
        grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;
        if (!isLazyLoad || isLazyLoad && aggregates.length) {
          grouped[val].items.push(jsonData[i2]);
        }
      };
      var this_2 = this;
      for (var i = 0; i < jsonData.length; i++) {
        _loop_2(i);
      }
      if (aggregates && aggregates.length) {
        var _loop_3 = function(i2) {
          var res = {};
          var fn = void 0;
          var aggs = aggregates;
          for (var j2 = 0; j2 < aggregates.length; j2++) {
            fn = DataUtil2.aggregates[aggregates[j2].type];
            if (!isNullOrUndefined(groupDs)) {
              var temp = groupDs.filter(function(e) {
                return e.key === groupedArray[i2].key;
              });
              if (fn) {
                res[aggs[j2].field + " - " + aggs[j2].type] = fn(temp[0].items, aggs[j2].field);
              }
            } else {
              if (fn) {
                res[aggs[j2].field + " - " + aggs[j2].type] = fn(groupedArray[i2].items, aggs[j2].field);
              }
            }
          }
          groupedArray[i2].aggregates = res;
        };
        for (var i = 0; i < groupedArray.length; i++) {
          _loop_3(i);
        }
      }
      if (isLazyLoad && groupedArray.length && aggregates.length) {
        for (var i = 0; i < groupedArray.length; i++) {
          groupedArray[i].items = [];
        }
      }
      return jsonData.length && groupedArray || jsonData;
    };
    DataUtil2.buildHierarchy = function(fKey, from, source, lookup, pKey) {
      var i;
      var grp = {};
      var temp;
      if (lookup.result) {
        lookup = lookup.result;
      }
      if (lookup.GroupGuid) {
        this.throwError("DataManager: Do not have support Grouping in hierarchy");
      }
      for (i = 0; i < lookup.length; i++) {
        var fKeyData = this.getObject(fKey, lookup[i]);
        temp = grp[fKeyData] || (grp[fKeyData] = []);
        temp.push(lookup[i]);
      }
      for (i = 0; i < source.length; i++) {
        var fKeyData = this.getObject(pKey || fKey, source[i]);
        source[i][from] = grp[fKeyData];
      }
    };
    DataUtil2.getFieldList = function(obj, fields, prefix) {
      if (prefix === void 0) {
        prefix = "";
      }
      if (fields === void 0 || fields === null) {
        return this.getFieldList(obj, [], prefix);
      }
      var copyObj = obj;
      var keys = Object.keys(obj);
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var prop = keys_1[_i];
        if (typeof copyObj[prop] === "object" && !(copyObj[prop] instanceof Array)) {
          this.getFieldList(copyObj[prop], fields, prefix + prop + ".");
        } else {
          fields.push(prefix + prop);
        }
      }
      return fields;
    };
    DataUtil2.getObject = function(nameSpace, from) {
      if (!nameSpace) {
        return from;
      }
      if (!from) {
        return void 0;
      }
      if (nameSpace.indexOf(".") === -1) {
        var lowerCaseNameSpace = nameSpace.charAt(0).toLowerCase() + nameSpace.slice(1);
        var upperCaseNameSpace = nameSpace.charAt(0).toUpperCase() + nameSpace.slice(1);
        if (!isNullOrUndefined(from[nameSpace])) {
          return from[nameSpace];
        } else {
          if (!isNullOrUndefined(from[lowerCaseNameSpace])) {
            return from[lowerCaseNameSpace];
          } else if (!isNullOrUndefined(from[upperCaseNameSpace])) {
            return from[upperCaseNameSpace];
          } else {
            return null;
          }
        }
      }
      var value = from;
      var splits = nameSpace.split(".");
      for (var i = 0; i < splits.length; i++) {
        if (value == null) {
          break;
        }
        value = value[splits[i]];
        if (value === void 0) {
          var casing = splits[i].charAt(0).toUpperCase() + splits[i].slice(1);
          value = from[casing] || from[casing.charAt(0).toLowerCase() + casing.slice(1)] || null;
        }
        from = value;
      }
      return value;
    };
    DataUtil2.setValue = function(nameSpace, value, obj) {
      var keys = nameSpace.toString().split(".");
      var start = obj || {};
      var fromObj = start;
      var i;
      var length = keys.length;
      var key;
      for (i = 0; i < length; i++) {
        key = keys[i];
        if (i + 1 === length) {
          fromObj[key] = value === void 0 ? void 0 : value;
        } else if (isNullOrUndefined(fromObj[key])) {
          fromObj[key] = {};
        }
        fromObj = fromObj[key];
      }
      return start;
    };
    DataUtil2.sort = function(ds, field, comparer) {
      if (ds.length <= 1) {
        return ds;
      }
      var middle = parseInt((ds.length / 2).toString(), 10);
      var left = ds.slice(0, middle);
      var right = ds.slice(middle);
      left = this.sort(left, field, comparer);
      right = this.sort(right, field, comparer);
      return this.merge(left, right, field, comparer);
    };
    DataUtil2.ignoreDiacritics = function(value) {
      if (typeof value !== "string") {
        return value;
      }
      var result = value.split("");
      var newValue = result.map(function(temp) {
        return temp in DataUtil2.diacritics ? DataUtil2.diacritics[temp] : temp;
      });
      return newValue.join("");
    };
    DataUtil2.merge = function(left, right, fieldName, comparer) {
      var result = [];
      var current;
      while (left.length > 0 || right.length > 0) {
        if (left.length > 0 && right.length > 0) {
          if (comparer) {
            current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;
          } else {
            current = left[0][fieldName] < left[0][fieldName] ? left : right;
          }
        } else {
          current = left.length > 0 ? left : right;
        }
        result.push(current.shift());
      }
      return result;
    };
    DataUtil2.getVal = function(array, index, field) {
      return field ? this.getObject(field, array[index]) : array[index];
    };
    DataUtil2.toLowerCase = function(val) {
      return val ? typeof val === "string" ? val.toLowerCase() : val.toString() : val === 0 || val === false ? val.toString() : "";
    };
    DataUtil2.callAdaptorFunction = function(adaptor, fnName, param1, param2) {
      if (fnName in adaptor) {
        var res = adaptor[fnName](param1, param2);
        if (!isNullOrUndefined(res)) {
          param1 = res;
        }
      }
      return param1;
    };
    DataUtil2.getAddParams = function(adp, dm, query) {
      var req = {};
      DataUtil2.callAdaptorFunction(adp, "addParams", {
        dm,
        query,
        params: query.params,
        reqParams: req
      });
      return req;
    };
    DataUtil2.isPlainObject = function(obj) {
      return !!obj && obj.constructor === Object;
    };
    DataUtil2.isCors = function() {
      var xhr = null;
      var request = "XMLHttpRequest";
      try {
        xhr = new window[request]();
      } catch (e) {
      }
      return !!xhr && "withCredentials" in xhr;
    };
    DataUtil2.getGuid = function(prefix) {
      var hexs = "0123456789abcdef";
      var rand;
      return (prefix || "") + "00000000-0000-4000-0000-000000000000".replace(/0/g, function(val, i) {
        if ("crypto" in window && "getRandomValues" in crypto) {
          var arr = new Uint8Array(1);
          window.crypto.getRandomValues(arr);
          rand = arr[0] % 16 | 0;
        } else {
          rand = Math.random() * 16 | 0;
        }
        return hexs[i === 19 ? rand & 3 | 8 : rand];
      });
    };
    DataUtil2.isNull = function(val) {
      return val === void 0 || val === null;
    };
    DataUtil2.getItemFromComparer = function(array, field, comparer) {
      var keyVal;
      var current;
      var key;
      var i = 0;
      var castRequired = typeof DataUtil2.getVal(array, 0, field) === "string";
      if (array.length) {
        while (isNullOrUndefined(keyVal) && i < array.length) {
          keyVal = DataUtil2.getVal(array, i, field);
          key = array[i++];
        }
      }
      for (; i < array.length; i++) {
        current = DataUtil2.getVal(array, i, field);
        if (isNullOrUndefined(current)) {
          continue;
        }
        if (castRequired) {
          keyVal = +keyVal;
          current = +current;
        }
        if (comparer(keyVal, current) > 0) {
          keyVal = current;
          key = array[i];
        }
      }
      return key;
    };
    DataUtil2.distinct = function(json, fieldName, requiresCompleteRecord) {
      requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;
      var result = [];
      var val;
      var tmp = {};
      json.forEach(function(data, index) {
        val = typeof json[index] === "object" ? DataUtil2.getVal(json, index, fieldName) : json[index];
        if (!(val in tmp)) {
          result.push(!requiresCompleteRecord ? val : json[index]);
          tmp[val] = 1;
        }
      });
      return result;
    };
    DataUtil2.processData = function(dm, records) {
      var query = this.prepareQuery(dm);
      var sampledata = new DataManager(records);
      if (dm.requiresCounts) {
        query.requiresCount();
      }
      var result = sampledata.executeLocal(query);
      var returnValue = {
        result: dm.requiresCounts ? result.result : result,
        count: result.count,
        aggregates: JSON.stringify(result.aggregates)
      };
      return dm.requiresCounts ? returnValue : result;
    };
    DataUtil2.prepareQuery = function(dm) {
      var _this = this;
      var query = new Query();
      if (dm.select) {
        query.select(dm.select);
      }
      if (dm.where) {
        var where = DataUtil2.parse.parseJson(dm.where);
        where.filter(function(pred) {
          if (isNullOrUndefined(pred.condition)) {
            query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);
          } else {
            var predicateList = [];
            if (pred.field) {
              predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));
            } else {
              predicateList = predicateList.concat(_this.getPredicate(pred.predicates));
            }
            if (pred.condition === "or") {
              query.where(Predicate.or(predicateList));
            } else if (pred.condition === "and") {
              query.where(Predicate.and(predicateList));
            }
          }
        });
      }
      if (dm.search) {
        var search = DataUtil2.parse.parseJson(dm.search);
        search.filter(function(e) {
          return query.search(
            e.key,
            e.fields,
            e["operator"],
            // tslint:disable-next-line:no-string-literal
            e["ignoreCase"],
            e["ignoreAccent"]
          );
        });
      }
      if (dm.aggregates) {
        dm.aggregates.filter(function(e) {
          return query.aggregate(e.type, e.field);
        });
      }
      if (dm.sorted) {
        dm.sorted.filter(function(e) {
          return query.sortBy(e.name, e.direction);
        });
      }
      if (dm.skip) {
        query.skip(dm.skip);
      }
      if (dm.take) {
        query.take(dm.take);
      }
      if (dm.group) {
        dm.group.filter(function(grp) {
          return query.group(grp);
        });
      }
      return query;
    };
    DataUtil2.getPredicate = function(pred) {
      var mainPred = [];
      for (var i = 0; i < pred.length; i++) {
        var e = pred[i];
        if (e.field) {
          mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));
        } else {
          var childPred = [];
          var cpre = this.getPredicate(e.predicates);
          for (var _i = 0, _a = Object.keys(cpre); _i < _a.length; _i++) {
            var prop = _a[_i];
            childPred.push(cpre[prop]);
          }
          mainPred.push(e.condition === "or" ? Predicate.or(childPred) : Predicate.and(childPred));
        }
      }
      return mainPred;
    };
    DataUtil2.serverTimezoneOffset = null;
    DataUtil2.timeZoneHandling = true;
    DataUtil2.throwError = function(error) {
      try {
        throw new Error(error);
      } catch (e) {
        throw e.message + "\n" + e.stack;
      }
    };
    DataUtil2.aggregates = {
      /**
       * Calculate sum of the given field in the data.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      sum: function(ds, field) {
        var result = 0;
        var val;
        var castRequired = typeof DataUtil2.getVal(ds, 0, field) !== "number";
        for (var i = 0; i < ds.length; i++) {
          val = DataUtil2.getVal(ds, i, field);
          if (!isNaN(val) && val !== null) {
            if (castRequired) {
              val = +val;
            }
            result += val;
          }
        }
        return result;
      },
      /**
       * Calculate average value of the given field in the data.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      average: function(ds, field) {
        return DataUtil2.aggregates.sum(ds, field) / ds.length;
      },
      /**
       * Returns the min value of the data based on the field.
       *
       * @param  {Object[]} ds
       * @param  {string|Function} field
       */
      min: function(ds, field) {
        var comparer;
        if (typeof field === "function") {
          comparer = field;
          field = null;
        }
        return DataUtil2.getObject(field, DataUtil2.getItemFromComparer(ds, field, comparer || DataUtil2.fnAscending));
      },
      /**
       * Returns the max value of the data based on the field.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       * @returns number
       */
      max: function(ds, field) {
        var comparer;
        if (typeof field === "function") {
          comparer = field;
          field = null;
        }
        return DataUtil2.getObject(field, DataUtil2.getItemFromComparer(ds, field, comparer || DataUtil2.fnDescending));
      },
      /**
       * Returns the total number of true value present in the data based on the given boolean field name.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      truecount: function(ds, field) {
        return new DataManager(ds).executeLocal(new Query().where(field, "equal", true, true)).length;
      },
      /**
       * Returns the total number of false value present in the data based on the given boolean field name.
       *
       * @param  {Object[]} ds
       * @param  {string} field
       */
      falsecount: function(ds, field) {
        return new DataManager(ds).executeLocal(new Query().where(field, "equal", false, true)).length;
      },
      /**
       * Returns the length of the given data.
       *
       * @param {Object[]} ds
       * @param {string} field?
       * @param field
       * @returns number
       */
      count: function(ds, field) {
        return ds.length;
      }
    };
    DataUtil2.operatorSymbols = {
      "<": "lessthan",
      ">": "greaterthan",
      "<=": "lessthanorequal",
      ">=": "greaterthanorequal",
      "==": "equal",
      "!=": "notequal",
      "*=": "contains",
      "$=": "endswith",
      "^=": "startswith"
    };
    DataUtil2.odBiOperator = {
      "<": " lt ",
      ">": " gt ",
      "<=": " le ",
      ">=": " ge ",
      "==": " eq ",
      "!=": " ne ",
      "lessthan": " lt ",
      "lessthanorequal": " le ",
      "greaterthan": " gt ",
      "greaterthanorequal": " ge ",
      "equal": " eq ",
      "notequal": " ne "
    };
    DataUtil2.odUniOperator = {
      "$=": "endswith",
      "^=": "startswith",
      "*=": "substringof",
      "endswith": "endswith",
      "startswith": "startswith",
      "contains": "substringof",
      "doesnotendwith": "not endswith",
      "doesnotstartwith": "not startswith",
      "doesnotcontain": "not substringof",
      "wildcard": "wildcard",
      "like": "like"
    };
    DataUtil2.odv4UniOperator = {
      "$=": "endswith",
      "^=": "startswith",
      "*=": "contains",
      "endswith": "endswith",
      "startswith": "startswith",
      "contains": "contains",
      "doesnotendwith": "not endswith",
      "doesnotstartwith": "not startswith",
      "doesnotcontain": "not contains",
      "wildcard": "wildcard",
      "like": "like"
    };
    DataUtil2.diacritics = {
      "Ⓐ": "A",
      "Ａ": "A",
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ầ": "A",
      "Ấ": "A",
      "Ẫ": "A",
      "Ẩ": "A",
      "Ã": "A",
      "Ā": "A",
      "Ă": "A",
      "Ằ": "A",
      "Ắ": "A",
      "Ẵ": "A",
      "Ẳ": "A",
      "Ȧ": "A",
      "Ǡ": "A",
      "Ä": "A",
      "Ǟ": "A",
      "Ả": "A",
      "Å": "A",
      "Ǻ": "A",
      "Ǎ": "A",
      "Ȁ": "A",
      "Ȃ": "A",
      "Ạ": "A",
      "Ậ": "A",
      "Ặ": "A",
      "Ḁ": "A",
      "Ą": "A",
      "Ⱥ": "A",
      "Ɐ": "A",
      "Ꜳ": "AA",
      "Æ": "AE",
      "Ǽ": "AE",
      "Ǣ": "AE",
      "Ꜵ": "AO",
      "Ꜷ": "AU",
      "Ꜹ": "AV",
      "Ꜻ": "AV",
      "Ꜽ": "AY",
      "Ⓑ": "B",
      "Ｂ": "B",
      "Ḃ": "B",
      "Ḅ": "B",
      "Ḇ": "B",
      "Ƀ": "B",
      "Ƃ": "B",
      "Ɓ": "B",
      "Ⓒ": "C",
      "Ｃ": "C",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "Ç": "C",
      "Ḉ": "C",
      "Ƈ": "C",
      "Ȼ": "C",
      "Ꜿ": "C",
      "Ⓓ": "D",
      "Ｄ": "D",
      "Ḋ": "D",
      "Ď": "D",
      "Ḍ": "D",
      "Ḑ": "D",
      "Ḓ": "D",
      "Ḏ": "D",
      "Đ": "D",
      "Ƌ": "D",
      "Ɗ": "D",
      "Ɖ": "D",
      "Ꝺ": "D",
      "Ǳ": "DZ",
      "Ǆ": "DZ",
      "ǲ": "Dz",
      "ǅ": "Dz",
      "Ⓔ": "E",
      "Ｅ": "E",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ề": "E",
      "Ế": "E",
      "Ễ": "E",
      "Ể": "E",
      "Ẽ": "E",
      "Ē": "E",
      "Ḕ": "E",
      "Ḗ": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ë": "E",
      "Ẻ": "E",
      "Ě": "E",
      "Ȅ": "E",
      "Ȇ": "E",
      "Ẹ": "E",
      "Ệ": "E",
      "Ȩ": "E",
      "Ḝ": "E",
      "Ę": "E",
      "Ḙ": "E",
      "Ḛ": "E",
      "Ɛ": "E",
      "Ǝ": "E",
      "Ⓕ": "F",
      "Ｆ": "F",
      "Ḟ": "F",
      "Ƒ": "F",
      "Ꝼ": "F",
      "Ⓖ": "G",
      "Ｇ": "G",
      "Ǵ": "G",
      "Ĝ": "G",
      "Ḡ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ǧ": "G",
      "Ģ": "G",
      "Ǥ": "G",
      "Ɠ": "G",
      "Ꞡ": "G",
      "Ᵹ": "G",
      "Ꝿ": "G",
      "Ⓗ": "H",
      "Ｈ": "H",
      "Ĥ": "H",
      "Ḣ": "H",
      "Ḧ": "H",
      "Ȟ": "H",
      "Ḥ": "H",
      "Ḩ": "H",
      "Ḫ": "H",
      "Ħ": "H",
      "Ⱨ": "H",
      "Ⱶ": "H",
      "Ɥ": "H",
      "Ⓘ": "I",
      "Ｉ": "I",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "İ": "I",
      "Ï": "I",
      "Ḯ": "I",
      "Ỉ": "I",
      "Ǐ": "I",
      "Ȉ": "I",
      "Ȋ": "I",
      "Ị": "I",
      "Į": "I",
      "Ḭ": "I",
      "Ɨ": "I",
      "Ⓙ": "J",
      "Ｊ": "J",
      "Ĵ": "J",
      "Ɉ": "J",
      "Ⓚ": "K",
      "Ｋ": "K",
      "Ḱ": "K",
      "Ǩ": "K",
      "Ḳ": "K",
      "Ķ": "K",
      "Ḵ": "K",
      "Ƙ": "K",
      "Ⱪ": "K",
      "Ꝁ": "K",
      "Ꝃ": "K",
      "Ꝅ": "K",
      "Ꞣ": "K",
      "Ⓛ": "L",
      "Ｌ": "L",
      "Ŀ": "L",
      "Ĺ": "L",
      "Ľ": "L",
      "Ḷ": "L",
      "Ḹ": "L",
      "Ļ": "L",
      "Ḽ": "L",
      "Ḻ": "L",
      "Ł": "L",
      "Ƚ": "L",
      "Ɫ": "L",
      "Ⱡ": "L",
      "Ꝉ": "L",
      "Ꝇ": "L",
      "Ꞁ": "L",
      "Ǉ": "LJ",
      "ǈ": "Lj",
      "Ⓜ": "M",
      "Ｍ": "M",
      "Ḿ": "M",
      "Ṁ": "M",
      "Ṃ": "M",
      "Ɱ": "M",
      "Ɯ": "M",
      "Ⓝ": "N",
      "Ｎ": "N",
      "Ǹ": "N",
      "Ń": "N",
      "Ñ": "N",
      "Ṅ": "N",
      "Ň": "N",
      "Ṇ": "N",
      "Ņ": "N",
      "Ṋ": "N",
      "Ṉ": "N",
      "Ƞ": "N",
      "Ɲ": "N",
      "Ꞑ": "N",
      "Ꞥ": "N",
      "Ǌ": "NJ",
      "ǋ": "Nj",
      "Ⓞ": "O",
      "Ｏ": "O",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Ồ": "O",
      "Ố": "O",
      "Ỗ": "O",
      "Ổ": "O",
      "Õ": "O",
      "Ṍ": "O",
      "Ȭ": "O",
      "Ṏ": "O",
      "Ō": "O",
      "Ṑ": "O",
      "Ṓ": "O",
      "Ŏ": "O",
      "Ȯ": "O",
      "Ȱ": "O",
      "Ö": "O",
      "Ȫ": "O",
      "Ỏ": "O",
      "Ő": "O",
      "Ǒ": "O",
      "Ȍ": "O",
      "Ȏ": "O",
      "Ơ": "O",
      "Ờ": "O",
      "Ớ": "O",
      "Ỡ": "O",
      "Ở": "O",
      "Ợ": "O",
      "Ọ": "O",
      "Ộ": "O",
      "Ǫ": "O",
      "Ǭ": "O",
      "Ø": "O",
      "Ǿ": "O",
      "Ɔ": "O",
      "Ɵ": "O",
      "Ꝋ": "O",
      "Ꝍ": "O",
      "Ƣ": "OI",
      "Ꝏ": "OO",
      "Ȣ": "OU",
      "Ⓟ": "P",
      "Ｐ": "P",
      "Ṕ": "P",
      "Ṗ": "P",
      "Ƥ": "P",
      "Ᵽ": "P",
      "Ꝑ": "P",
      "Ꝓ": "P",
      "Ꝕ": "P",
      "Ⓠ": "Q",
      "Ｑ": "Q",
      "Ꝗ": "Q",
      "Ꝙ": "Q",
      "Ɋ": "Q",
      "Ⓡ": "R",
      "Ｒ": "R",
      "Ŕ": "R",
      "Ṙ": "R",
      "Ř": "R",
      "Ȑ": "R",
      "Ȓ": "R",
      "Ṛ": "R",
      "Ṝ": "R",
      "Ŗ": "R",
      "Ṟ": "R",
      "Ɍ": "R",
      "Ɽ": "R",
      "Ꝛ": "R",
      "Ꞧ": "R",
      "Ꞃ": "R",
      "Ⓢ": "S",
      "Ｓ": "S",
      "ẞ": "S",
      "Ś": "S",
      "Ṥ": "S",
      "Ŝ": "S",
      "Ṡ": "S",
      "Š": "S",
      "Ṧ": "S",
      "Ṣ": "S",
      "Ṩ": "S",
      "Ș": "S",
      "Ş": "S",
      "Ȿ": "S",
      "Ꞩ": "S",
      "Ꞅ": "S",
      "Ⓣ": "T",
      "Ｔ": "T",
      "Ṫ": "T",
      "Ť": "T",
      "Ṭ": "T",
      "Ț": "T",
      "Ţ": "T",
      "Ṱ": "T",
      "Ṯ": "T",
      "Ŧ": "T",
      "Ƭ": "T",
      "Ʈ": "T",
      "Ⱦ": "T",
      "Ꞇ": "T",
      "Ꜩ": "TZ",
      "Ⓤ": "U",
      "Ｕ": "U",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ũ": "U",
      "Ṹ": "U",
      "Ū": "U",
      "Ṻ": "U",
      "Ŭ": "U",
      "Ü": "U",
      "Ǜ": "U",
      "Ǘ": "U",
      "Ǖ": "U",
      "Ǚ": "U",
      "Ủ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ǔ": "U",
      "Ȕ": "U",
      "Ȗ": "U",
      "Ư": "U",
      "Ừ": "U",
      "Ứ": "U",
      "Ữ": "U",
      "Ử": "U",
      "Ự": "U",
      "Ụ": "U",
      "Ṳ": "U",
      "Ų": "U",
      "Ṷ": "U",
      "Ṵ": "U",
      "Ʉ": "U",
      "Ⓥ": "V",
      "Ｖ": "V",
      "Ṽ": "V",
      "Ṿ": "V",
      "Ʋ": "V",
      "Ꝟ": "V",
      "Ʌ": "V",
      "Ꝡ": "VY",
      "Ⓦ": "W",
      "Ｗ": "W",
      "Ẁ": "W",
      "Ẃ": "W",
      "Ŵ": "W",
      "Ẇ": "W",
      "Ẅ": "W",
      "Ẉ": "W",
      "Ⱳ": "W",
      "Ⓧ": "X",
      "Ｘ": "X",
      "Ẋ": "X",
      "Ẍ": "X",
      "Ⓨ": "Y",
      "Ｙ": "Y",
      "Ỳ": "Y",
      "Ý": "Y",
      "Ŷ": "Y",
      "Ỹ": "Y",
      "Ȳ": "Y",
      "Ẏ": "Y",
      "Ÿ": "Y",
      "Ỷ": "Y",
      "Ỵ": "Y",
      "Ƴ": "Y",
      "Ɏ": "Y",
      "Ỿ": "Y",
      "Ⓩ": "Z",
      "Ｚ": "Z",
      "Ź": "Z",
      "Ẑ": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "Ẓ": "Z",
      "Ẕ": "Z",
      "Ƶ": "Z",
      "Ȥ": "Z",
      "Ɀ": "Z",
      "Ⱬ": "Z",
      "Ꝣ": "Z",
      "ⓐ": "a",
      "ａ": "a",
      "ẚ": "a",
      "à": "a",
      "á": "a",
      "â": "a",
      "ầ": "a",
      "ấ": "a",
      "ẫ": "a",
      "ẩ": "a",
      "ã": "a",
      "ā": "a",
      "ă": "a",
      "ằ": "a",
      "ắ": "a",
      "ẵ": "a",
      "ẳ": "a",
      "ȧ": "a",
      "ǡ": "a",
      "ä": "a",
      "ǟ": "a",
      "ả": "a",
      "å": "a",
      "ǻ": "a",
      "ǎ": "a",
      "ȁ": "a",
      "ȃ": "a",
      "ạ": "a",
      "ậ": "a",
      "ặ": "a",
      "ḁ": "a",
      "ą": "a",
      "ⱥ": "a",
      "ɐ": "a",
      "ꜳ": "aa",
      "æ": "ae",
      "ǽ": "ae",
      "ǣ": "ae",
      "ꜵ": "ao",
      "ꜷ": "au",
      "ꜹ": "av",
      "ꜻ": "av",
      "ꜽ": "ay",
      "ⓑ": "b",
      "ｂ": "b",
      "ḃ": "b",
      "ḅ": "b",
      "ḇ": "b",
      "ƀ": "b",
      "ƃ": "b",
      "ɓ": "b",
      "ⓒ": "c",
      "ｃ": "c",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "ç": "c",
      "ḉ": "c",
      "ƈ": "c",
      "ȼ": "c",
      "ꜿ": "c",
      "ↄ": "c",
      "ⓓ": "d",
      "ｄ": "d",
      "ḋ": "d",
      "ď": "d",
      "ḍ": "d",
      "ḑ": "d",
      "ḓ": "d",
      "ḏ": "d",
      "đ": "d",
      "ƌ": "d",
      "ɖ": "d",
      "ɗ": "d",
      "ꝺ": "d",
      "ǳ": "dz",
      "ǆ": "dz",
      "ⓔ": "e",
      "ｅ": "e",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ề": "e",
      "ế": "e",
      "ễ": "e",
      "ể": "e",
      "ẽ": "e",
      "ē": "e",
      "ḕ": "e",
      "ḗ": "e",
      "ĕ": "e",
      "ė": "e",
      "ë": "e",
      "ẻ": "e",
      "ě": "e",
      "ȅ": "e",
      "ȇ": "e",
      "ẹ": "e",
      "ệ": "e",
      "ȩ": "e",
      "ḝ": "e",
      "ę": "e",
      "ḙ": "e",
      "ḛ": "e",
      "ɇ": "e",
      "ɛ": "e",
      "ǝ": "e",
      "ⓕ": "f",
      "ｆ": "f",
      "ḟ": "f",
      "ƒ": "f",
      "ꝼ": "f",
      "ⓖ": "g",
      "ｇ": "g",
      "ǵ": "g",
      "ĝ": "g",
      "ḡ": "g",
      "ğ": "g",
      "ġ": "g",
      "ǧ": "g",
      "ģ": "g",
      "ǥ": "g",
      "ɠ": "g",
      "ꞡ": "g",
      "ᵹ": "g",
      "ꝿ": "g",
      "ⓗ": "h",
      "ｈ": "h",
      "ĥ": "h",
      "ḣ": "h",
      "ḧ": "h",
      "ȟ": "h",
      "ḥ": "h",
      "ḩ": "h",
      "ḫ": "h",
      "ẖ": "h",
      "ħ": "h",
      "ⱨ": "h",
      "ⱶ": "h",
      "ɥ": "h",
      "ƕ": "hv",
      "ⓘ": "i",
      "ｉ": "i",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "ï": "i",
      "ḯ": "i",
      "ỉ": "i",
      "ǐ": "i",
      "ȉ": "i",
      "ȋ": "i",
      "ị": "i",
      "į": "i",
      "ḭ": "i",
      "ɨ": "i",
      "ı": "i",
      "ⓙ": "j",
      "ｊ": "j",
      "ĵ": "j",
      "ǰ": "j",
      "ɉ": "j",
      "ⓚ": "k",
      "ｋ": "k",
      "ḱ": "k",
      "ǩ": "k",
      "ḳ": "k",
      "ķ": "k",
      "ḵ": "k",
      "ƙ": "k",
      "ⱪ": "k",
      "ꝁ": "k",
      "ꝃ": "k",
      "ꝅ": "k",
      "ꞣ": "k",
      "ⓛ": "l",
      "ｌ": "l",
      "ŀ": "l",
      "ĺ": "l",
      "ľ": "l",
      "ḷ": "l",
      "ḹ": "l",
      "ļ": "l",
      "ḽ": "l",
      "ḻ": "l",
      "ſ": "l",
      "ł": "l",
      "ƚ": "l",
      "ɫ": "l",
      "ⱡ": "l",
      "ꝉ": "l",
      "ꞁ": "l",
      "ꝇ": "l",
      "ǉ": "lj",
      "ⓜ": "m",
      "ｍ": "m",
      "ḿ": "m",
      "ṁ": "m",
      "ṃ": "m",
      "ɱ": "m",
      "ɯ": "m",
      "ⓝ": "n",
      "ｎ": "n",
      "ǹ": "n",
      "ń": "n",
      "ñ": "n",
      "ṅ": "n",
      "ň": "n",
      "ṇ": "n",
      "ņ": "n",
      "ṋ": "n",
      "ṉ": "n",
      "ƞ": "n",
      "ɲ": "n",
      "ŉ": "n",
      "ꞑ": "n",
      "ꞥ": "n",
      "ǌ": "nj",
      "ⓞ": "o",
      "ｏ": "o",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "ồ": "o",
      "ố": "o",
      "ỗ": "o",
      "ổ": "o",
      "õ": "o",
      "ṍ": "o",
      "ȭ": "o",
      "ṏ": "o",
      "ō": "o",
      "ṑ": "o",
      "ṓ": "o",
      "ŏ": "o",
      "ȯ": "o",
      "ȱ": "o",
      "ö": "o",
      "ȫ": "o",
      "ỏ": "o",
      "ő": "o",
      "ǒ": "o",
      "ȍ": "o",
      "ȏ": "o",
      "ơ": "o",
      "ờ": "o",
      "ớ": "o",
      "ỡ": "o",
      "ở": "o",
      "ợ": "o",
      "ọ": "o",
      "ộ": "o",
      "ǫ": "o",
      "ǭ": "o",
      "ø": "o",
      "ǿ": "o",
      "ɔ": "o",
      "ꝋ": "o",
      "ꝍ": "o",
      "ɵ": "o",
      "ƣ": "oi",
      "ȣ": "ou",
      "ꝏ": "oo",
      "ⓟ": "p",
      "ｐ": "p",
      "ṕ": "p",
      "ṗ": "p",
      "ƥ": "p",
      "ᵽ": "p",
      "ꝑ": "p",
      "ꝓ": "p",
      "ꝕ": "p",
      "ⓠ": "q",
      "ｑ": "q",
      "ɋ": "q",
      "ꝗ": "q",
      "ꝙ": "q",
      "ⓡ": "r",
      "ｒ": "r",
      "ŕ": "r",
      "ṙ": "r",
      "ř": "r",
      "ȑ": "r",
      "ȓ": "r",
      "ṛ": "r",
      "ṝ": "r",
      "ŗ": "r",
      "ṟ": "r",
      "ɍ": "r",
      "ɽ": "r",
      "ꝛ": "r",
      "ꞧ": "r",
      "ꞃ": "r",
      "ⓢ": "s",
      "ｓ": "s",
      "ß": "s",
      "ś": "s",
      "ṥ": "s",
      "ŝ": "s",
      "ṡ": "s",
      "š": "s",
      "ṧ": "s",
      "ṣ": "s",
      "ṩ": "s",
      "ș": "s",
      "ş": "s",
      "ȿ": "s",
      "ꞩ": "s",
      "ꞅ": "s",
      "ẛ": "s",
      "ⓣ": "t",
      "ｔ": "t",
      "ṫ": "t",
      "ẗ": "t",
      "ť": "t",
      "ṭ": "t",
      "ț": "t",
      "ţ": "t",
      "ṱ": "t",
      "ṯ": "t",
      "ŧ": "t",
      "ƭ": "t",
      "ʈ": "t",
      "ⱦ": "t",
      "ꞇ": "t",
      "ꜩ": "tz",
      "ⓤ": "u",
      "ｕ": "u",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ũ": "u",
      "ṹ": "u",
      "ū": "u",
      "ṻ": "u",
      "ŭ": "u",
      "ü": "u",
      "ǜ": "u",
      "ǘ": "u",
      "ǖ": "u",
      "ǚ": "u",
      "ủ": "u",
      "ů": "u",
      "ű": "u",
      "ǔ": "u",
      "ȕ": "u",
      "ȗ": "u",
      "ư": "u",
      "ừ": "u",
      "ứ": "u",
      "ữ": "u",
      "ử": "u",
      "ự": "u",
      "ụ": "u",
      "ṳ": "u",
      "ų": "u",
      "ṷ": "u",
      "ṵ": "u",
      "ʉ": "u",
      "ⓥ": "v",
      "ｖ": "v",
      "ṽ": "v",
      "ṿ": "v",
      "ʋ": "v",
      "ꝟ": "v",
      "ʌ": "v",
      "ꝡ": "vy",
      "ⓦ": "w",
      "ｗ": "w",
      "ẁ": "w",
      "ẃ": "w",
      "ŵ": "w",
      "ẇ": "w",
      "ẅ": "w",
      "ẘ": "w",
      "ẉ": "w",
      "ⱳ": "w",
      "ⓧ": "x",
      "ｘ": "x",
      "ẋ": "x",
      "ẍ": "x",
      "ⓨ": "y",
      "ｙ": "y",
      "ỳ": "y",
      "ý": "y",
      "ŷ": "y",
      "ỹ": "y",
      "ȳ": "y",
      "ẏ": "y",
      "ÿ": "y",
      "ỷ": "y",
      "ẙ": "y",
      "ỵ": "y",
      "ƴ": "y",
      "ɏ": "y",
      "ỿ": "y",
      "ⓩ": "z",
      "ｚ": "z",
      "ź": "z",
      "ẑ": "z",
      "ż": "z",
      "ž": "z",
      "ẓ": "z",
      "ẕ": "z",
      "ƶ": "z",
      "ȥ": "z",
      "ɀ": "z",
      "ⱬ": "z",
      "ꝣ": "z",
      "Ά": "Α",
      "Έ": "Ε",
      "Ή": "Η",
      "Ί": "Ι",
      "Ϊ": "Ι",
      "Ό": "Ο",
      "Ύ": "Υ",
      "Ϋ": "Υ",
      "Ώ": "Ω",
      "ά": "α",
      "έ": "ε",
      "ή": "η",
      "ί": "ι",
      "ϊ": "ι",
      "ΐ": "ι",
      "ό": "ο",
      "ύ": "υ",
      "ϋ": "υ",
      "ΰ": "υ",
      "ω": "ω",
      "ς": "σ"
    };
    DataUtil2.fnOperators = {
      /**
       * Returns true when the actual input is equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param {boolean} ignoreAccent?
       * @param ignoreCase
       * @param ignoreAccent
       */
      equal: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) === DataUtil2.toLowerCase(expected);
        }
        return actual === expected;
      },
      /**
       * Returns true when the actual input is not equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      notequal: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        return !DataUtil2.fnOperators.equal(actual, expected, ignoreCase);
      },
      /**
       * Returns true when the actual input is less than to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      lessthan: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) < DataUtil2.toLowerCase(expected);
        }
        if (isNullOrUndefined(actual)) {
          actual = void 0;
        }
        return actual < expected;
      },
      /**
       * Returns true when the actual input is greater than to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      greaterthan: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) > DataUtil2.toLowerCase(expected);
        }
        return actual > expected;
      },
      /**
       * Returns true when the actual input is less than or equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      lessthanorequal: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) <= DataUtil2.toLowerCase(expected);
        }
        if (isNullOrUndefined(actual)) {
          actual = void 0;
        }
        return actual <= expected;
      },
      /**
       * Returns true when the actual input is greater than or equal to the given input.
       *
       * @param {string|number|boolean} actual
       * @param {string|number|boolean} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       */
      greaterthanorequal: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) >= DataUtil2.toLowerCase(expected);
        }
        return actual >= expected;
      },
      /**
       * Returns true when the actual input contains the given string.
       *
       * @param {string|number} actual
       * @param {string|number} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      contains: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && DataUtil2.toLowerCase(actual).indexOf(DataUtil2.toLowerCase(expected)) !== -1;
        }
        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && actual.toString().indexOf(expected) !== -1;
      },
      /**
       * Returns true when the actual input not contains the given string.
       *
       * @param  {string|number} actual
       * @param  {string|number} expected
       * @param  {boolean} ignoreCase?
       */
      doesnotcontain: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && DataUtil2.toLowerCase(actual).indexOf(DataUtil2.toLowerCase(expected)) === -1;
        }
        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && actual.toString().indexOf(expected) === -1;
      },
      /**
       * Returns true when the given input value is not null.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isnotnull: function(actual) {
        return actual !== null && actual !== void 0;
      },
      /**
       * Returns true when the given input value is null.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isnull: function(actual) {
        return actual === null || actual === void 0;
      },
      /**
       * Returns true when the actual input starts with the given string
       *
       * @param {string} actual
       * @param {string} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      startswith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.startsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.startsWith(actual, expected);
      },
      /**
       * Returns true when the actual input not starts with the given string
       *
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      doesnotstartwith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.notStartsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.notStartsWith(actual, expected);
      },
      /**
       * Returns true when the actual input like with the given string.
       *
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      like: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.like(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.like(actual, expected);
      },
      /**
       * Returns true when the given input value is empty.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isempty: function(actual) {
        return actual === void 0 || actual === "";
      },
      /**
       * Returns true when the given input value is not empty.
       *
       * @param  {string|number} actual
       * @returns boolean
       */
      isnotempty: function(actual) {
        return actual !== void 0 && actual !== "";
      },
      /**
       * Returns true when the actual input pattern(wildcard) matches with the given string.
       *
       * @param  {string|Date} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      wildcard: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return (actual || typeof actual === "boolean") && expected && typeof actual !== "object" && DataUtil2.wildCard(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return (actual || typeof actual === "boolean") && expected && DataUtil2.wildCard(actual, expected);
      },
      /**
       * Returns true when the actual input ends with the given string.
       *
       * @param {string} actual
       * @param {string} expected
       * @param {boolean} ignoreCase?
       * @param ignoreCase
       * @param ignoreAccent
       */
      endswith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.endsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.endsWith(actual, expected);
      },
      /**
       * Returns true when the actual input not ends with the given string.
       *
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      doesnotendwith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.notEndsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.notEndsWith(actual, expected);
      },
      /**
       * It will return the filter operator based on the filter symbol.
       *
       * @param  {string} operator
       * @hidden
       */
      processSymbols: function(operator) {
        var fnName = DataUtil2.operatorSymbols[operator];
        if (fnName) {
          var fn = DataUtil2.fnOperators[fnName];
          return fn;
        }
        return DataUtil2.throwError("Query - Process Operator : Invalid operator");
      },
      /**
       * It will return the valid filter operator based on the specified operators.
       *
       * @param  {string} operator
       * @hidden
       */
      processOperator: function(operator) {
        var fn = DataUtil2.fnOperators[operator];
        if (fn) {
          return fn;
        }
        return DataUtil2.fnOperators.processSymbols(operator);
      }
    };
    DataUtil2.parse = {
      /**
       * Parse the given string to the plain JavaScript object.
       *
       * @param  {string|Object|Object[]} jsonText
       */
      parseJson: function(jsonText) {
        if (typeof jsonText === "string") {
          jsonText = JSON.parse(jsonText, DataUtil2.parse.jsonReviver);
        } else if (jsonText instanceof Array) {
          DataUtil2.parse.iterateAndReviveArray(jsonText);
        } else if (typeof jsonText === "object" && jsonText !== null) {
          DataUtil2.parse.iterateAndReviveJson(jsonText);
        }
        return jsonText;
      },
      /**
       * It will perform on array of values.
       *
       * @param  {string[]|Object[]} array
       * @hidden
       */
      iterateAndReviveArray: function(array) {
        for (var i = 0; i < array.length; i++) {
          if (typeof array[i] === "object" && array[i] !== null) {
            DataUtil2.parse.iterateAndReviveJson(array[i]);
          } else if (typeof array[i] === "string" && !/^[\s]*\[|^[\s]*\{(.)+:|\"/g.test(array[i])) {
            array[i] = DataUtil2.parse.jsonReviver("", array[i]);
          } else {
            array[i] = DataUtil2.parse.parseJson(array[i]);
          }
        }
      },
      /**
       * It will perform on JSON values
       *
       * @param  {JSON} json
       * @hidden
       */
      iterateAndReviveJson: function(json) {
        var value;
        var keys = Object.keys(json);
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
          var prop = keys_2[_i];
          if (DataUtil2.startsWith(prop, "__")) {
            continue;
          }
          value = json[prop];
          if (typeof value === "object") {
            if (value instanceof Array) {
              DataUtil2.parse.iterateAndReviveArray(value);
            } else if (value) {
              DataUtil2.parse.iterateAndReviveJson(value);
            }
          } else {
            json[prop] = DataUtil2.parse.jsonReviver(json[prop], value);
          }
        }
      },
      /**
       * It will perform on JSON values
       *
       * @param  {string} field
       * @param  {string|Date} value
       * @hidden
       */
      jsonReviver: function(field, value) {
        if (typeof value === "string") {
          var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
          var offSet = DataUtil2.timeZoneHandling ? DataUtil2.serverTimezoneOffset : null;
          if (ms) {
            return DataUtil2.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);
          } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
            var isUTC = value.indexOf("Z") > -1 || value.indexOf("z") > -1;
            var arr = value.split(/[^0-9.]/);
            if (isUTC) {
              if (arr[5].indexOf(".") > -1) {
                var secondsMs = arr[5].split(".");
                arr[5] = secondsMs[0];
                arr[6] = new Date(value).getUTCMilliseconds().toString();
              } else {
                arr[6] = "00";
              }
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10), parseInt(arr[6], 10)), DataUtil2.serverTimezoneOffset, false);
            } else {
              var utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));
              var hrs = parseInt(arr[6], 10);
              var mins = parseInt(arr[7], 10);
              if (isNaN(hrs) && isNaN(mins)) {
                return utcFormat;
              }
              if (value.indexOf("+") > -1) {
                utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);
              } else {
                utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);
              }
              value = DataUtil2.dateParse.toTimeZone(utcFormat, DataUtil2.serverTimezoneOffset, false);
            }
            if (DataUtil2.serverTimezoneOffset == null) {
              value = DataUtil2.dateParse.addSelfOffset(value);
            }
          } else if (/^\d{4}-\d{2}-\d{2}$/.test(value)) {
            var arr = value.split(/[^0-9.]/);
            return new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10));
          }
        }
        return value;
      },
      /**
       * Check wheather the given value is JSON or not.
       *
       * @param  {Object[]} jsonData
       */
      isJson: function(jsonData) {
        if (typeof jsonData[0] === "string") {
          return jsonData;
        }
        return DataUtil2.parse.parseJson(jsonData);
      },
      /**
       * Checks wheather the given value is GUID or not.
       *
       * @param  {string} value
       */
      isGuid: function(value) {
        var regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;
        var match = regex.exec(value);
        return match != null;
      },
      /**
       * The method used to replace the value based on the type.
       *
       * @param  {Object} value
       * @param  {boolean} stringify
       * @hidden
       */
      replacer: function(value, stringify) {
        if (DataUtil2.isPlainObject(value)) {
          return DataUtil2.parse.jsonReplacer(value, stringify);
        }
        if (value instanceof Array) {
          return DataUtil2.parse.arrayReplacer(value);
        }
        if (value instanceof Date) {
          return DataUtil2.parse.jsonReplacer({ val: value }, stringify).val;
        }
        return value;
      },
      /**
       * It will replace the JSON value.
       *
       * @param {string} key
       * @param {Object} val
       * @param stringify
       * @hidden
       */
      jsonReplacer: function(val, stringify) {
        var value;
        var keys = Object.keys(val);
        for (var _i = 0, keys_3 = keys; _i < keys_3.length; _i++) {
          var prop = keys_3[_i];
          value = val[prop];
          if (!(value instanceof Date)) {
            continue;
          }
          var d = value;
          if (DataUtil2.serverTimezoneOffset == null) {
            val[prop] = DataUtil2.dateParse.toTimeZone(d, null).toJSON();
          } else {
            d = new Date(+d + DataUtil2.serverTimezoneOffset * 36e5);
            val[prop] = DataUtil2.dateParse.toTimeZone(DataUtil2.dateParse.addSelfOffset(d), null).toJSON();
          }
        }
        return val;
      },
      /**
       * It will replace the Array of value.
       *
       * @param  {string} key
       * @param  {Object[]} val
       * @hidden
       */
      arrayReplacer: function(val) {
        for (var i = 0; i < val.length; i++) {
          if (DataUtil2.isPlainObject(val[i])) {
            val[i] = DataUtil2.parse.jsonReplacer(val[i]);
          } else if (val[i] instanceof Date) {
            val[i] = DataUtil2.parse.jsonReplacer({ date: val[i] }).date;
          }
        }
        return val;
      },
      /**
       * It will replace the Date object with respective to UTC format value.
       *
       * @param  {string} key
       * @param  {any} value
       * @hidden
       */
      /* eslint-disable @typescript-eslint/no-explicit-any */
      /* tslint:disable-next-line:no-any */
      jsonDateReplacer: function(key, value) {
        if (key === "value" && value) {
          if (typeof value === "string") {
            var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
            if (ms) {
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);
            } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
              var arr = value.split(/[^0-9]/);
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);
            }
          }
          if (value instanceof Date) {
            value = DataUtil2.dateParse.addSelfOffset(value);
            if (DataUtil2.serverTimezoneOffset === null) {
              return DataUtil2.dateParse.toTimeZone(DataUtil2.dateParse.addSelfOffset(value), null).toJSON();
            } else {
              value = DataUtil2.dateParse.toTimeZone(value, value.getTimezoneOffset() / 60 * 2 - DataUtil2.serverTimezoneOffset, false);
              return value.toJSON();
            }
          }
        }
        return value;
      }
    };
    DataUtil2.dateParse = {
      addSelfOffset: function(input) {
        return new Date(+input - input.getTimezoneOffset() * 6e4);
      },
      toUTC: function(input) {
        return new Date(+input + input.getTimezoneOffset() * 6e4);
      },
      toTimeZone: function(input, offset, utc) {
        if (offset === null) {
          return input;
        }
        var unix = utc ? DataUtil2.dateParse.toUTC(input) : input;
        return new Date(+unix - offset * 36e5);
      },
      toLocalTime: function(input) {
        var datefn = input;
        var timeZone = -datefn.getTimezoneOffset();
        var differenceString = timeZone >= 0 ? "+" : "-";
        var localtimefn = function(num) {
          var norm = Math.floor(Math.abs(num));
          return (norm < 10 ? "0" : "") + norm;
        };
        var val = datefn.getFullYear() + "-" + localtimefn(datefn.getMonth() + 1) + "-" + localtimefn(datefn.getDate()) + "T" + localtimefn(datefn.getHours()) + ":" + localtimefn(datefn.getMinutes()) + ":" + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ":" + localtimefn(timeZone % 60);
        return val;
      }
    };
    return DataUtil2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-data/src/adaptors.js
var __extends13 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var consts2 = { GroupGuid: "{271bbba0-1ee7}" };
var Adaptor = (
  /** @class */
  function() {
    function Adaptor2(ds) {
      this.options = {
        from: "table",
        requestType: "json",
        sortBy: "sorted",
        select: "select",
        skip: "skip",
        group: "group",
        take: "take",
        search: "search",
        count: "requiresCounts",
        where: "where",
        aggregates: "aggregates",
        expand: "expand"
      };
      this.type = Adaptor2;
      this.dataSource = ds;
      this.pvt = {};
    }
    Adaptor2.prototype.processResponse = function(data, ds, query, xhr) {
      return data;
    };
    return Adaptor2;
  }()
);
var JsonAdaptor = (
  /** @class */
  function(_super) {
    __extends13(JsonAdaptor2, _super);
    function JsonAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    JsonAdaptor2.prototype.processQuery = function(dataManager, query) {
      var result = dataManager.dataSource.json.slice(0);
      var count = result.length;
      var countFlg = true;
      var ret;
      var key;
      var lazyLoad = {};
      var keyCount = 0;
      var group = [];
      var page;
      for (var i = 0; i < query.lazyLoad.length; i++) {
        keyCount++;
        lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;
      }
      var agg = {};
      for (var i = 0; i < query.queries.length; i++) {
        key = query.queries[i];
        if ((key.fn === "onPage" || key.fn === "onGroup") && query.lazyLoad.length) {
          if (key.fn === "onGroup") {
            group.push(key.e);
          }
          if (key.fn === "onPage") {
            page = key.e;
          }
          continue;
        }
        ret = this[key.fn].call(this, result, key.e, query);
        if (key.fn === "onAggregates") {
          agg[key.e.field + " - " + key.e.type] = ret;
        } else {
          result = ret !== void 0 ? ret : result;
        }
        if (key.fn === "onPage" || key.fn === "onSkip" || key.fn === "onTake" || key.fn === "onRange") {
          countFlg = false;
        }
        if (countFlg) {
          count = result.length;
        }
      }
      if (keyCount) {
        var args = {
          query,
          lazyLoad,
          result,
          group,
          page
        };
        var lazyLoadData = this.lazyLoadGroup(args);
        result = lazyLoadData.result;
        count = lazyLoadData.count;
      }
      if (query.isCountRequired) {
        result = {
          result,
          count,
          aggregates: agg
        };
      }
      return result;
    };
    JsonAdaptor2.prototype.lazyLoadGroup = function(args) {
      var count = 0;
      var agg = this.getAggregate(args.query);
      var result = args.result;
      if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {
        var req = args.lazyLoad.onDemandGroupInfo;
        for (var i = req.where.length - 1; i >= 0; i--) {
          result = this.onWhere(result, req.where[i]);
        }
        if (args.group.length !== req.level) {
          var field = args.group[req.level].fieldName;
          result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);
        }
        count = result.length;
        var data = result;
        result = result.slice(req.skip);
        result = result.slice(0, req.take);
        if (args.group.length !== req.level) {
          this.formGroupResult(result, data);
        }
      } else {
        var field = args.group[0].fieldName;
        result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);
        count = result.length;
        var data = result;
        if (args.page) {
          result = this.onPage(result, args.page, args.query);
        }
        this.formGroupResult(result, data);
      }
      return { result, count };
    };
    JsonAdaptor2.prototype.formGroupResult = function(result, data) {
      if (result.length && data.length) {
        var uid = "GroupGuid";
        var childLevel = "childLevels";
        var level = "level";
        var records = "records";
        result[uid] = data[uid];
        result[childLevel] = data[childLevel];
        result[level] = data[level];
        result[records] = data[records];
      }
      return result;
    };
    JsonAdaptor2.prototype.getAggregate = function(query) {
      var aggQuery = Query.filterQueries(query.queries, "onAggregates");
      var agg = [];
      if (aggQuery.length) {
        var tmp = void 0;
        for (var i = 0; i < aggQuery.length; i++) {
          tmp = aggQuery[i].e;
          agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });
        }
      }
      return agg;
    };
    JsonAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      var i;
      var deletedRecordsLen = changes.deletedRecords.length;
      for (i = 0; i < changes.addedRecords.length; i++) {
        this.insert(dm, changes.addedRecords[i]);
      }
      for (i = 0; i < changes.changedRecords.length; i++) {
        this.update(dm, e.key, changes.changedRecords[i]);
      }
      for (i = 0; i < deletedRecordsLen; i++) {
        this.remove(dm, e.key, changes.deletedRecords[i]);
      }
      return changes;
    };
    JsonAdaptor2.prototype.onWhere = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.filter(function(obj) {
        if (e) {
          return e.validate(obj);
        }
      });
    };
    JsonAdaptor2.prototype.onAggregates = function(ds, e) {
      var fn = DataUtil.aggregates[e.type];
      if (!ds || !fn || ds.length === 0) {
        return null;
      }
      return fn(ds, e.field);
    };
    JsonAdaptor2.prototype.onSearch = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      if (e.fieldNames.length === 0) {
        DataUtil.getFieldList(ds[0], e.fieldNames);
      }
      return ds.filter(function(obj) {
        for (var j = 0; j < e.fieldNames.length; j++) {
          if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {
            return true;
          }
        }
        return false;
      });
    };
    JsonAdaptor2.prototype.onSortBy = function(ds, e, query) {
      if (!ds || !ds.length) {
        return ds;
      }
      var fnCompare;
      var field = DataUtil.getValue(e.fieldName, query);
      if (!field) {
        return ds.sort(e.comparer);
      }
      if (field instanceof Array) {
        field = field.slice(0);
        for (var i = field.length - 1; i >= 0; i--) {
          if (!field[i]) {
            continue;
          }
          fnCompare = e.comparer;
          if (DataUtil.endsWith(field[i], " desc")) {
            fnCompare = DataUtil.fnSort("descending");
            field[i] = field[i].replace(" desc", "");
          }
          ds = DataUtil.sort(ds, field[i], fnCompare);
        }
        return ds;
      }
      return DataUtil.sort(ds, field, e.comparer);
    };
    JsonAdaptor2.prototype.onGroup = function(ds, e, query) {
      if (!ds || !ds.length) {
        return ds;
      }
      var agg = this.getAggregate(query);
      return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);
    };
    JsonAdaptor2.prototype.onPage = function(ds, e, query) {
      var size = DataUtil.getValue(e.pageSize, query);
      var start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;
      var end = start + size;
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(start, end);
    };
    JsonAdaptor2.prototype.onRange = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));
    };
    JsonAdaptor2.prototype.onTake = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(0, DataUtil.getValue(e.nos));
    };
    JsonAdaptor2.prototype.onSkip = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(DataUtil.getValue(e.nos));
    };
    JsonAdaptor2.prototype.onSelect = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));
    };
    JsonAdaptor2.prototype.insert = function(dm, data, tableName, query, position) {
      if (isNullOrUndefined(position)) {
        return dm.dataSource.json.push(data);
      } else {
        return dm.dataSource.json.splice(position, 0, data);
      }
    };
    JsonAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      var ds = dm.dataSource.json;
      var i;
      if (typeof value === "object" && !(value instanceof Date)) {
        value = DataUtil.getObject(keyField, value);
      }
      for (i = 0; i < ds.length; i++) {
        if (DataUtil.getObject(keyField, ds[i]) === value) {
          break;
        }
      }
      return i !== ds.length ? ds.splice(i, 1) : null;
    };
    JsonAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      var ds = dm.dataSource.json;
      var i;
      var key;
      if (!isNullOrUndefined(keyField)) {
        key = getValue(keyField, value);
      }
      for (i = 0; i < ds.length; i++) {
        if (!isNullOrUndefined(keyField) && getValue(keyField, ds[i]) === key) {
          break;
        }
      }
      return i < ds.length ? merge(ds[i], value) : null;
    };
    return JsonAdaptor2;
  }(Adaptor)
);
var UrlAdaptor = (
  /** @class */
  function(_super) {
    __extends13(UrlAdaptor2, _super);
    function UrlAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    UrlAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var queries = this.getQueryRequest(query);
      var singles = Query.filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]);
      var params = query.params;
      var url = dm.dataSource.url;
      var temp;
      var skip;
      var take = null;
      var options = this.options;
      var request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };
      if ("onPage" in singles) {
        temp = singles.onPage;
        skip = DataUtil.getValue(temp.pageIndex, query);
        take = DataUtil.getValue(temp.pageSize, query);
        skip = (skip - 1) * take;
      } else if ("onRange" in singles) {
        temp = singles.onRange;
        skip = temp.start;
        take = temp.end - temp.start;
      }
      for (var i = 0; i < queries.sorts.length; i++) {
        temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);
        request.sorts.push(DataUtil.callAdaptorFunction(this, "onEachSort", { name: temp, direction: queries.sorts[i].e.direction }, query));
      }
      if (hierarchyFilters) {
        temp = this.getFiltersFrom(hierarchyFilters, query);
        if (temp) {
          request.filters.push(DataUtil.callAdaptorFunction(this, "onEachWhere", temp.toJson(), query));
        }
      }
      for (var i = 0; i < queries.filters.length; i++) {
        var res = DataUtil.callAdaptorFunction(this, "onEachWhere", queries.filters[i].e.toJson(), query);
        if (this.getModuleName && this.getModuleName() === "ODataV4Adaptor" && !isNullOrUndefined(queries.filters[i].e.key) && queries.filters.length > 1) {
          res = "(" + res + ")";
        }
        request.filters.push(res);
        var keys_3 = typeof request.filters[i] === "object" ? Object.keys(request.filters[i]) : [];
        for (var _i = 0, keys_1 = keys_3; _i < keys_1.length; _i++) {
          var prop = keys_1[_i];
          if (DataUtil.isNull(request[prop])) {
            delete request[prop];
          }
        }
      }
      for (var i = 0; i < queries.searches.length; i++) {
        temp = queries.searches[i].e;
        request.searches.push(DataUtil.callAdaptorFunction(this, "onEachSearch", {
          fields: temp.fieldNames,
          operator: temp.operator,
          key: temp.searchKey,
          ignoreCase: temp.ignoreCase
        }, query));
      }
      for (var i = 0; i < queries.groups.length; i++) {
        request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));
      }
      for (var i = 0; i < queries.aggregates.length; i++) {
        temp = queries.aggregates[i].e;
        request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });
      }
      var req = {};
      this.getRequestQuery(options, query, singles, request, req);
      DataUtil.callAdaptorFunction(this, "addParams", { dm, query, params, reqParams: req });
      if (query.lazyLoad.length) {
        for (var i = 0; i < query.lazyLoad.length; i++) {
          req[query.lazyLoad[i].key] = query.lazyLoad[i].value;
        }
      }
      var keys = Object.keys(req);
      for (var _a = 0, keys_2 = keys; _a < keys_2.length; _a++) {
        var prop = keys_2[_a];
        if (DataUtil.isNull(req[prop]) || req[prop] === "" || req[prop].length === 0) {
          delete req[prop];
        }
      }
      if (!(options.skip in req && options.take in req) && take !== null) {
        req[options.skip] = DataUtil.callAdaptorFunction(this, "onSkip", skip, query);
        req[options.take] = DataUtil.callAdaptorFunction(this, "onTake", take, query);
      }
      var p = this.pvt;
      this.pvt = {};
      if (this.options.requestType === "json") {
        return {
          data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),
          url,
          pvtData: p,
          type: "POST",
          contentType: "application/json; charset=utf-8"
        };
      }
      temp = this.convertToQueryString(req, query, dm);
      temp = (dm.dataSource.url.indexOf("?") !== -1 ? "&" : "/") + temp;
      return {
        type: "GET",
        url: temp.length ? url.replace(/\/*$/, temp) : url,
        pvtData: p
      };
    };
    UrlAdaptor2.prototype.getRequestQuery = function(options, query, singles, request, request1) {
      var param = "param";
      var req = request1;
      req[options.from] = query.fromTable;
      if (options.apply && query.distincts.length) {
        req[options.apply] = "onDistinct" in this ? DataUtil.callAdaptorFunction(this, "onDistinct", query.distincts) : "";
      }
      if (!query.distincts.length && options.expand) {
        req[options.expand] = "onExpand" in this && "onSelect" in singles ? DataUtil.callAdaptorFunction(this, "onExpand", { selects: DataUtil.getValue(singles.onSelect.fieldNames, query), expands: query.expands }, query) : query.expands;
      }
      req[options.select] = "onSelect" in singles && !query.distincts.length ? DataUtil.callAdaptorFunction(this, "onSelect", DataUtil.getValue(singles.onSelect.fieldNames, query), query) : "";
      req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, "onCount", query.isCountRequired, query) : "";
      req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, "onSearch", request.searches, query) : "";
      req[options.skip] = "onSkip" in singles ? DataUtil.callAdaptorFunction(this, "onSkip", DataUtil.getValue(singles.onSkip.nos, query), query) : "";
      req[options.take] = "onTake" in singles ? DataUtil.callAdaptorFunction(this, "onTake", DataUtil.getValue(singles.onTake.nos, query), query) : "";
      req[options.where] = request.filters.length || request.searches.length ? DataUtil.callAdaptorFunction(this, "onWhere", request.filters, query) : "";
      req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, "onSortBy", request.sorts, query) : "";
      req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, "onGroup", request.groups, query) : "";
      req[options.aggregates] = request.aggregates.length ? DataUtil.callAdaptorFunction(this, "onAggregates", request.aggregates, query) : "";
      req[param] = [];
    };
    UrlAdaptor2.prototype.convertToQueryString = function(request, query, dm) {
      return "";
    };
    UrlAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("application/json") !== -1) {
        var handleTimeZone = DataUtil.timeZoneHandling;
        if (ds && !ds.timeZoneHandling) {
          DataUtil.timeZoneHandling = false;
        }
        data = DataUtil.parse.parseJson(data);
        DataUtil.timeZoneHandling = handleTimeZone;
      }
      var requests = request;
      var pvt = requests.pvtData || {};
      var groupDs = data ? data.groupDs : [];
      if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") !== -1) {
        return query.isCountRequired ? { result: [], count: 0 } : [];
      }
      var d = JSON.parse(requests.data);
      if (d && d.action === "batch" && data && data.addedRecords) {
        changes.addedRecords = data.addedRecords;
        return changes;
      }
      if (data && data.d) {
        data = data.d;
      }
      var args = {};
      if (data && "count" in data) {
        args.count = data.count;
      }
      args.result = data && data.result ? data.result : data;
      var isExpand = false;
      if (Array.isArray(data.result) && data.result.length) {
        var key = "key";
        var val = "value";
        var level = "level";
        if (!isNullOrUndefined(data.result[0][key])) {
          args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);
        }
        if (query && query.lazyLoad.length && pvt.groups.length) {
          for (var i = 0; i < query.lazyLoad.length; i++) {
            if (query.lazyLoad[i][key] === "onDemandGroupInfo") {
              var value = query.lazyLoad[i][val][level];
              if (pvt.groups.length === value) {
                isExpand = true;
              }
            }
          }
        }
      }
      if (!isExpand) {
        this.getAggregateResult(pvt, data, args, groupDs, query);
      }
      return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };
    };
    UrlAdaptor2.prototype.formRemoteGroupedData = function(data, level, childLevel) {
      for (var i = 0; i < data.length; i++) {
        if (data[i].items.length && Object.keys(data[i].items[0]).indexOf("key") > -1) {
          this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);
        }
      }
      var uid = "GroupGuid";
      var childLvl = "childLevels";
      var lvl = "level";
      var records = "records";
      data[uid] = consts2[uid];
      data[lvl] = level;
      data[childLvl] = childLevel;
      data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];
      return data;
    };
    UrlAdaptor2.prototype.getGroupedRecords = function(data, hasRecords) {
      var childGroupedRecords = [];
      var records = "records";
      for (var i = 0; i < data.length; i++) {
        if (!hasRecords) {
          for (var j = 0; j < data[i].items.length; j++) {
            childGroupedRecords.push(data[i].items[j]);
          }
        } else {
          childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);
        }
      }
      return childGroupedRecords;
    };
    UrlAdaptor2.prototype.onGroup = function(e) {
      this.pvt.groups = e;
      return e;
    };
    UrlAdaptor2.prototype.onAggregates = function(e) {
      this.pvt.aggregates = e;
    };
    UrlAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var url;
      var key;
      return {
        type: "POST",
        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(extend({}, {
          changed: changes.changedRecords,
          added: changes.addedRecords,
          deleted: changes.deletedRecords,
          action: "batch",
          table: e[url],
          key: e[key]
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.beforeSend = function(dm, request) {
    };
    UrlAdaptor2.prototype.insert = function(dm, data, tableName, query) {
      return {
        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: data,
          table: tableName,
          action: "insert"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.remove = function(dm, keyField, value, tableName, query) {
      return {
        type: "POST",
        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          key: value,
          keyColumn: keyField,
          table: tableName,
          action: "remove"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.update = function(dm, keyField, value, tableName, query) {
      return {
        type: "POST",
        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value,
          action: "update",
          keyColumn: keyField,
          key: DataUtil.getObject(keyField, value),
          table: tableName
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.getFiltersFrom = function(data, query) {
      var key = query.fKey;
      var value;
      var prop = key;
      var pKey = query.key;
      var predicats = [];
      if (typeof data[0] !== "object") {
        prop = null;
      }
      for (var i = 0; i < data.length; i++) {
        if (typeof data[0] === "object") {
          value = DataUtil.getObject(pKey || prop, data[i]);
        } else {
          value = data[i];
        }
        predicats.push(new Predicate(key, "equal", value));
      }
      return Predicate.or(predicats);
    };
    UrlAdaptor2.prototype.getAggregateResult = function(pvt, data, args, groupDs, query) {
      var pData = data;
      if (data && data.result) {
        pData = data.result;
      }
      if (pvt && pvt.aggregates && pvt.aggregates.length) {
        var agg = pvt.aggregates;
        var fn = void 0;
        var aggregateData = pData;
        var res = {};
        if (data.aggregate) {
          aggregateData = data.aggregate;
        }
        for (var i = 0; i < agg.length; i++) {
          fn = DataUtil.aggregates[agg[i].type];
          if (fn) {
            res[agg[i].field + " - " + agg[i].type] = fn(aggregateData, agg[i].field);
          }
        }
        args.aggregates = res;
      }
      var key = "key";
      var isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);
      if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {
        var groups = pvt.groups;
        for (var i = 0; i < groups.length; i++) {
          var level = null;
          if (!isNullOrUndefined(groupDs)) {
            groupDs = DataUtil.group(groupDs, groups[i]);
          }
          var groupQuery = Query.filterQueries(query.queries, "onGroup")[i].e;
          pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);
        }
        args.result = pData;
      }
      return args;
    };
    UrlAdaptor2.prototype.getQueryRequest = function(query) {
      var req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };
      req.sorts = Query.filterQueries(query.queries, "onSortBy");
      req.groups = Query.filterQueries(query.queries, "onGroup");
      req.filters = Query.filterQueries(query.queries, "onWhere");
      req.searches = Query.filterQueries(query.queries, "onSearch");
      req.aggregates = Query.filterQueries(query.queries, "onAggregates");
      return req;
    };
    UrlAdaptor2.prototype.addParams = function(options) {
      var req = options.reqParams;
      if (options.params.length) {
        req.params = {};
      }
      for (var _i = 0, _a = options.params; _i < _a.length; _i++) {
        var tmp = _a[_i];
        if (req[tmp.key]) {
          throw new Error("Query() - addParams: Custom Param is conflicting other request arguments");
        }
        req[tmp.key] = tmp.value;
        if (tmp.fn) {
          req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);
        }
        req.params[tmp.key] = req[tmp.key];
      }
    };
    return UrlAdaptor2;
  }(Adaptor)
);
var ODataAdaptor = (
  /** @class */
  function(_super) {
    __extends13(ODataAdaptor2, _super);
    function ODataAdaptor2(props) {
      var _this = _super.call(this) || this;
      _this.options = extend({}, _this.options, {
        requestType: "get",
        accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
        multipartAccept: "multipart/mixed",
        sortBy: "$orderby",
        select: "$select",
        skip: "$skip",
        take: "$top",
        count: "$inlinecount",
        where: "$filter",
        expand: "$expand",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 ",
        updateType: "PUT"
      });
      extend(_this.options, props || {});
      return _this;
    }
    ODataAdaptor2.prototype.getModuleName = function() {
      return "ODataAdaptor";
    };
    ODataAdaptor2.prototype.onPredicate = function(predicate, query, requiresCast) {
      var returnValue = "";
      var operator;
      var guid;
      var val = predicate.value;
      var type = typeof val;
      var field = predicate.field ? ODataAdaptor2.getField(predicate.field) : null;
      if (val instanceof Date) {
        val = "datetime'" + DataUtil.parse.replacer(val) + "'";
      }
      if (type === "string") {
        val = val.replace(/'/g, "''");
        if (predicate.ignoreCase) {
          val = val.toLowerCase();
        }
        if (predicate.operator !== "like") {
          val = encodeURIComponent(val);
        }
        if (predicate.operator !== "wildcard" && predicate.operator !== "like") {
          val = "'" + val + "'";
        }
        if (requiresCast) {
          field = "cast(" + field + ", 'Edm.String')";
        }
        if (DataUtil.parse.isGuid(val)) {
          guid = "guid";
        }
        if (predicate.ignoreCase) {
          if (!guid) {
            field = "tolower(" + field + ")";
          }
          val = val.toLowerCase();
        }
      }
      if (predicate.operator === "isempty" || predicate.operator === "isnull" || predicate.operator === "isnotempty" || predicate.operator === "isnotnull") {
        operator = predicate.operator.indexOf("isnot") !== -1 ? DataUtil.odBiOperator["notequal"] : DataUtil.odBiOperator["equal"];
        val = predicate.operator === "isnull" || predicate.operator === "isnotnull" ? null : "''";
      } else {
        operator = DataUtil.odBiOperator[predicate.operator];
      }
      if (operator) {
        returnValue += field;
        returnValue += operator;
        if (guid) {
          returnValue += guid;
        }
        return returnValue + val;
      }
      if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor") {
        operator = DataUtil.odv4UniOperator[predicate.operator];
      } else {
        operator = DataUtil.odUniOperator[predicate.operator];
      }
      if (operator === "like") {
        val = val;
        if (val.indexOf("%") !== -1) {
          if (val.charAt(0) === "%" && val.lastIndexOf("%") < 2) {
            val = val.substring(1, val.length);
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["startswith"] : DataUtil.odUniOperator["startswith"];
          } else if (val.charAt(val.length - 1) === "%" && val.indexOf("%") > val.length - 3) {
            val = val.substring(0, val.length - 1);
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["endswith"] : DataUtil.odUniOperator["endswith"];
          } else if (val.lastIndexOf("%") !== val.indexOf("%") && val.lastIndexOf("%") > val.indexOf("%") + 1) {
            val = val.substring(val.indexOf("%") + 1, val.lastIndexOf("%"));
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
          } else {
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
          }
        }
        val = encodeURIComponent(val);
        val = "'" + val + "'";
      } else if (operator === "wildcard") {
        val = val;
        if (val.indexOf("*") !== -1) {
          var splittedStringValue = val.split("*");
          var splittedValue = void 0;
          var count = 0;
          if (val.indexOf("*") !== 0 && splittedStringValue[0].indexOf("%3f") === -1 && splittedStringValue[0].indexOf("?") === -1) {
            splittedValue = splittedStringValue[0];
            splittedValue = "'" + splittedValue + "'";
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["startswith"] : DataUtil.odUniOperator["startswith"];
            returnValue += operator + "(";
            returnValue += field + ",";
            if (guid) {
              returnValue += guid;
            }
            returnValue += splittedValue + ")";
            count++;
          }
          if (val.lastIndexOf("*") !== val.length - 1 && splittedStringValue[splittedStringValue.length - 1].indexOf("%3f") === -1 && splittedStringValue[splittedStringValue.length - 1].indexOf("?") === -1) {
            splittedValue = splittedStringValue[splittedStringValue.length - 1];
            splittedValue = "'" + splittedValue + "'";
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["endswith"] : DataUtil.odUniOperator["endswith"];
            if (count > 0) {
              returnValue += " and ";
            }
            returnValue += operator + "(";
            returnValue += field + ",";
            if (guid) {
              returnValue += guid;
            }
            returnValue += splittedValue + ")";
            count++;
          }
          if (splittedStringValue.length > 2) {
            for (var i = 1; i < splittedStringValue.length - 1; i++) {
              if (splittedStringValue[i].indexOf("%3f") === -1 && splittedStringValue[i].indexOf("?") === -1) {
                splittedValue = splittedStringValue[i];
                splittedValue = "'" + splittedValue + "'";
                operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
                if (count > 0) {
                  returnValue += " and ";
                }
                if (operator === "substringof" || operator === "not substringof") {
                  var temp = splittedValue;
                  splittedValue = field;
                  field = temp;
                }
                returnValue += operator + "(";
                returnValue += field + ",";
                if (guid) {
                  returnValue += guid;
                }
                returnValue += splittedValue + ")";
                count++;
              }
            }
          }
          if (count === 0) {
            operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
            if (val.indexOf("?") !== -1 || val.indexOf("%3f") !== -1) {
              val = val.indexOf("?") !== -1 ? val.split("?").join("") : val.split("%3f").join("");
            }
            val = "'" + val + "'";
          } else {
            operator = "wildcard";
          }
        } else {
          operator = !isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor" ? DataUtil.odv4UniOperator["contains"] : DataUtil.odUniOperator["contains"];
          if (val.indexOf("?") !== -1 || val.indexOf("%3f") !== -1) {
            val = val.indexOf("?") !== -1 ? val.split("?").join("") : val.split("%3f").join("");
          }
          val = "'" + val + "'";
        }
      }
      if (operator === "substringof" || operator === "not substringof") {
        var temp = val;
        val = field;
        field = temp;
      }
      if (operator !== "wildcard") {
        returnValue += operator + "(";
        returnValue += field + ",";
        if (guid) {
          returnValue += guid;
        }
        returnValue += val + ")";
      }
      return returnValue;
    };
    ODataAdaptor2.prototype.addParams = function(options) {
      _super.prototype.addParams.call(this, options);
      delete options.reqParams.params;
    };
    ODataAdaptor2.prototype.onComplexPredicate = function(predicate, query, requiresCast) {
      var res = [];
      for (var i = 0; i < predicate.predicates.length; i++) {
        res.push("(" + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ")");
      }
      return res.join(" " + predicate.condition + " ");
    };
    ODataAdaptor2.prototype.onEachWhere = function(filter, query, requiresCast) {
      return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);
    };
    ODataAdaptor2.prototype.onWhere = function(filters) {
      if (this.pvt.search) {
        filters.push(this.onEachWhere(this.pvt.search, null, true));
      }
      return filters.join(" and ");
    };
    ODataAdaptor2.prototype.onEachSearch = function(e) {
      if (e.fields && e.fields.length === 0) {
        DataUtil.throwError("Query() - Search : oData search requires list of field names to search");
      }
      var filter = this.pvt.search || [];
      for (var i = 0; i < e.fields.length; i++) {
        filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));
      }
      this.pvt.search = filter;
    };
    ODataAdaptor2.prototype.onSearch = function(e) {
      this.pvt.search = Predicate.or(this.pvt.search);
      return "";
    };
    ODataAdaptor2.prototype.onEachSort = function(e) {
      var res = [];
      if (e.name instanceof Array) {
        for (var i = 0; i < e.name.length; i++) {
          res.push(ODataAdaptor2.getField(e.name[i]) + (e.direction === "descending" ? " desc" : ""));
        }
      } else {
        res.push(ODataAdaptor2.getField(e.name) + (e.direction === "descending" ? " desc" : ""));
      }
      return res.join(",");
    };
    ODataAdaptor2.prototype.onSortBy = function(e) {
      return e.reverse().join(",");
    };
    ODataAdaptor2.prototype.onGroup = function(e) {
      this.pvt.groups = e;
      return [];
    };
    ODataAdaptor2.prototype.onSelect = function(e) {
      for (var i = 0; i < e.length; i++) {
        e[i] = ODataAdaptor2.getField(e[i]);
      }
      return e.join(",");
    };
    ODataAdaptor2.prototype.onAggregates = function(e) {
      this.pvt.aggregates = e;
      return "";
    };
    ODataAdaptor2.prototype.onCount = function(e) {
      return e === true ? "allpages" : "";
    };
    ODataAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === "post") {
        request.setRequestHeader("Accept", this.options.multipartAccept);
        request.setRequestHeader("DataServiceVersion", "2.0");
        request.overrideMimeType("text/plain; charset=x-user-defined");
      } else {
        request.setRequestHeader("Accept", this.options.accept);
      }
      request.setRequestHeader("DataServiceVersion", "2.0");
      request.setRequestHeader("MaxDataServiceVersion", "2.0");
    };
    ODataAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var metaCheck = "odata.metadata";
      if (request && request.type === "GET" && !this.rootUrl && data[metaCheck]) {
        var dataUrls = data[metaCheck].split("/$metadata#");
        this.rootUrl = dataUrls[0];
        this.resourceTableName = dataUrls[1];
      }
      var pvtData = "pvtData";
      if (!isNullOrUndefined(data.d)) {
        var dataCopy = query && query.isCountRequired ? data.d.results : data.d;
        var metaData = "__metadata";
        if (!isNullOrUndefined(dataCopy)) {
          for (var i = 0; i < dataCopy.length; i++) {
            if (!isNullOrUndefined(dataCopy[i][metaData])) {
              delete dataCopy[i][metaData];
            }
          }
        }
      }
      var pvt = request && request[pvtData];
      var emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);
      if (emptyAndBatch) {
        return emptyAndBatch;
      }
      var versionCheck = xhr && request.getResponseHeader("DataServiceVersion");
      var count = null;
      var version = versionCheck && parseInt(versionCheck, 10) || 2;
      if (query && query.isCountRequired) {
        var oDataCount = "__count";
        if (data[oDataCount] || data["odata.count"]) {
          count = data[oDataCount] || data["odata.count"];
        }
        if (data.d) {
          data = data.d;
        }
        if (data[oDataCount] || data["odata.count"]) {
          count = data[oDataCount] || data["odata.count"];
        }
      }
      if (version === 3 && data.value) {
        data = data.value;
      }
      if (data.d) {
        data = data.d;
      }
      if (version < 3 && data.results) {
        data = data.results;
      }
      var args = {};
      args.count = count;
      args.result = data;
      this.getAggregateResult(pvt, data, args, null, query);
      return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };
    };
    ODataAdaptor2.prototype.convertToQueryString = function(request, query, dm) {
      var res = [];
      var table = "table";
      var tableName = request[table] || "";
      var format = "$format";
      delete request[table];
      if (dm.dataSource.requiresFormat) {
        request[format] = "json";
      }
      var keys = Object.keys(request);
      for (var _i = 0, keys_4 = keys; _i < keys_4.length; _i++) {
        var prop = keys_4[_i];
        res.push(prop + "=" + request[prop]);
      }
      res = res.join("&");
      if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1 && !tableName) {
        return res;
      }
      return res.length ? tableName + "?" + res : tableName || "";
    };
    ODataAdaptor2.prototype.localTimeReplacer = function(key, convertObj) {
      for (var _i = 0, _a = !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []; _i < _a.length; _i++) {
        var prop = _a[_i];
        if (convertObj[prop] instanceof Date) {
          convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);
        }
      }
      return convertObj;
    };
    ODataAdaptor2.prototype.insert = function(dm, data, tableName) {
      return {
        url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : ""),
        data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)
      };
    };
    ODataAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      var url;
      if (typeof value === "string" && !DataUtil.parse.isGuid(value)) {
        url = "('" + value + "')";
      } else {
        url = "(" + value + ")";
      }
      return {
        type: "DELETE",
        url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : "") + url
      };
    };
    ODataAdaptor2.prototype.update = function(dm, keyField, value, tableName, query, original) {
      if (this.options.updateType === "PATCH" && !isNullOrUndefined(original)) {
        value = this.compareAndRemove(value, original, keyField);
      }
      var url;
      if (typeof value[keyField] === "string" && !DataUtil.parse.isGuid(value[keyField])) {
        url = "('" + value[keyField] + "')";
      } else {
        url = "(" + value[keyField] + ")";
      }
      return {
        type: this.options.updateType,
        url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : "") + url,
        data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),
        accept: this.options.accept
      };
    };
    ODataAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);
      var url = this.rootUrl ? this.rootUrl + "/" + this.options.batch : dm.dataSource.url.replace(/\/*$/, "/" + this.options.batch);
      e.url = this.resourceTableName ? this.resourceTableName : e.url;
      var args = {
        url: e.url,
        key: e.key,
        cid: 1,
        cSet: DataUtil.getGuid(this.options.changeSet)
      };
      var req = "--" + initialGuid + "\n";
      req += "Content-Type: multipart/mixed; boundary=" + args.cSet.replace("--", "") + "\n";
      this.pvt.changeSet = 0;
      req += this.generateInsertRequest(changes.addedRecords, args, dm);
      req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);
      req += this.generateDeleteRequest(changes.deletedRecords, args, dm);
      req += args.cSet + "--\n";
      req += "--" + initialGuid + "--";
      return {
        type: "POST",
        url,
        dataType: "json",
        contentType: "multipart/mixed; charset=UTF-8;boundary=" + initialGuid,
        data: req
      };
    };
    ODataAdaptor2.prototype.generateDeleteRequest = function(arr, e, dm) {
      if (!arr) {
        return "";
      }
      var req = "";
      var stat = {
        "method": "DELETE ",
        "url": function(data, i, key) {
          var url = DataUtil.getObject(key, data[i]);
          if (typeof url === "number" || DataUtil.parse.isGuid(url)) {
            return "(" + url + ")";
          } else if (url instanceof Date) {
            var dateTime = data[i][key];
            return "(" + dateTime.toJSON() + ")";
          } else {
            return "('" + url + "')";
          }
        },
        "data": function(data, i) {
          return "";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req + "\n";
    };
    ODataAdaptor2.prototype.generateInsertRequest = function(arr, e, dm) {
      if (!arr) {
        return "";
      }
      var req = "";
      var stat = {
        "method": "POST ",
        "url": function(data, i, key) {
          return "";
        },
        "data": function(data, i) {
          return JSON.stringify(data[i]) + "\n\n";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req;
    };
    ODataAdaptor2.prototype.generateUpdateRequest = function(arr, e, dm, org) {
      var _this = this;
      if (!arr) {
        return "";
      }
      var req = "";
      arr.forEach(function(change) {
        return change = _this.compareAndRemove(change, org.filter(function(o) {
          return DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change);
        })[0], e.key);
      });
      var stat = {
        "method": this.options.updateType + " ",
        "url": function(data, i, key) {
          if (typeof data[i][key] === "number" || DataUtil.parse.isGuid(data[i][key])) {
            return "(" + data[i][key] + ")";
          } else if (data[i][key] instanceof Date) {
            var date = data[i][key];
            return "(" + date.toJSON() + ")";
          } else {
            return "('" + data[i][key] + "')";
          }
        },
        "data": function(data, i) {
          return JSON.stringify(data[i]) + "\n\n";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req;
    };
    ODataAdaptor2.getField = function(prop) {
      return prop.replace(/\./g, "/");
    };
    ODataAdaptor2.prototype.generateBodyContent = function(arr, e, stat, dm) {
      var req = "";
      for (var i = 0; i < arr.length; i++) {
        req += "\n" + e.cSet + "\n";
        req += this.options.changeSetContent + "\n\n";
        req += stat.method;
        if (stat.method === "POST ") {
          req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        } else if (stat.method === "PUT " || stat.method === "PATCH ") {
          req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        } else if (stat.method === "DELETE ") {
          req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        }
        req += "Accept: " + this.options.accept + "\n";
        req += "Content-Id: " + this.pvt.changeSet++ + "\n";
        req += this.options.batchChangeSetContentType + "\n";
        if (!isNullOrUndefined(arr[i]["@odata.etag"])) {
          req += "If-Match: " + arr[i]["@odata.etag"] + "\n\n";
          delete arr[i]["@odata.etag"];
        } else {
          req += "\n";
        }
        req += stat.data(arr, i);
      }
      return req;
    };
    ODataAdaptor2.prototype.processBatchResponse = function(data, query, xhr, request, changes) {
      if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") !== -1) {
        return query.isCountRequired ? { result: [], count: 0 } : [];
      }
      if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === "post") {
        var guid = xhr.getResponseHeader("Content-Type");
        var cIdx = void 0;
        var jsonObj = void 0;
        var d = data + "";
        guid = guid.substring(guid.indexOf("=batchresponse") + 1);
        d = d.split(guid);
        if (d.length < 2) {
          return {};
        }
        d = d[1];
        var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);
        if (exVal) {
          d.replace(exVal[0], "");
        }
        var changeGuid = exVal ? exVal[1] : "";
        d = d.split(changeGuid);
        for (var i = d.length; i > -1; i--) {
          if (!/\bContent-ID:/i.test(d[i]) || !/\bHTTP.+201/.test(d[i])) {
            continue;
          }
          cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(d[i])[1], 10);
          if (changes.addedRecords[cIdx]) {
            jsonObj = DataUtil.parse.parseJson(/^\{.+\}/m.exec(d[i])[0]);
            extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));
          }
        }
        return changes;
      }
      return null;
    };
    ODataAdaptor2.prototype.compareAndRemove = function(data, original, key) {
      var _this = this;
      if (isNullOrUndefined(original)) {
        return data;
      }
      Object.keys(data).forEach(function(prop) {
        if (prop !== key && prop !== "@odata.etag") {
          if (DataUtil.isPlainObject(data[prop])) {
            _this.compareAndRemove(data[prop], original[prop]);
            var final = Object.keys(data[prop]).filter(function(data2) {
              return data2 !== "@odata.etag";
            });
            if (final.length === 0) {
              delete data[prop];
            }
          } else if (data[prop] === original[prop]) {
            delete data[prop];
          } else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {
            delete data[prop];
          }
        }
      });
      return data;
    };
    return ODataAdaptor2;
  }(UrlAdaptor)
);
var ODataV4Adaptor = (
  /** @class */
  function(_super) {
    __extends13(ODataV4Adaptor2, _super);
    function ODataV4Adaptor2(props) {
      var _this = _super.call(this, props) || this;
      _this.options = extend({}, _this.options, {
        requestType: "get",
        accept: "application/json, text/javascript, */*; q=0.01",
        multipartAccept: "multipart/mixed",
        sortBy: "$orderby",
        select: "$select",
        skip: "$skip",
        take: "$top",
        count: "$count",
        search: "$search",
        where: "$filter",
        expand: "$expand",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 ",
        updateType: "PATCH",
        localTime: false,
        apply: "$apply"
      });
      extend(_this.options, props || {});
      return _this;
    }
    ODataV4Adaptor2.prototype.getModuleName = function() {
      return "ODataV4Adaptor";
    };
    ODataV4Adaptor2.prototype.onCount = function(e) {
      return e === true ? "true" : "";
    };
    ODataV4Adaptor2.prototype.onPredicate = function(predicate, query, requiresCast) {
      var returnValue = "";
      var val = predicate.value;
      var isDate = val instanceof Date;
      if (query instanceof Query) {
        var queries = this.getQueryRequest(query);
        for (var i = 0; i < queries.filters.length; i++) {
          if (queries.filters[i].e.key === predicate.value) {
            requiresCast = true;
          }
        }
      }
      returnValue = _super.prototype.onPredicate.call(this, predicate, query, requiresCast);
      if (isDate) {
        returnValue = returnValue.replace(/datetime'(.*)'$/, "$1");
      }
      if (DataUtil.parse.isGuid(val)) {
        returnValue = returnValue.replace("guid", "").replace(/'/g, "");
      }
      return returnValue;
    };
    ODataV4Adaptor2.prototype.onEachSearch = function(e) {
      var search = this.pvt.searches || [];
      search.push(e.key);
      this.pvt.searches = search;
    };
    ODataV4Adaptor2.prototype.onSearch = function(e) {
      return this.pvt.searches.join(" OR ");
    };
    ODataV4Adaptor2.prototype.onExpand = function(e) {
      var _this = this;
      var selected = {};
      var expanded = {};
      var expands = e.expands.slice();
      var exArr = [];
      var selects = e.selects.filter(function(item) {
        return item.indexOf(".") > -1;
      });
      selects.forEach(function(select2) {
        var splits = select2.split(".");
        if (!(splits[0] in selected)) {
          selected[splits[0]] = [];
        }
        if (splits.length === 2) {
          if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1) {
            if (selected[splits[0]][0].indexOf("$expand") !== -1 && selected[splits[0]][0].indexOf(";$select=") === -1) {
              selected[splits[0]][0] = selected[splits[0]][0] + ";$select=" + splits[1];
            } else {
              selected[splits[0]][0] = selected[splits[0]][0] + "," + splits[1];
            }
          } else {
            selected[splits[0]].push("$select=" + splits[1]);
          }
        } else {
          var sel = "$select=" + splits[splits.length - 1];
          var exp = "";
          var close_1 = "";
          for (var i = 1; i < splits.length - 1; i++) {
            exp = exp + "$expand=" + splits[i] + "(";
            close_1 = close_1 + ")";
          }
          var combineVal = exp + sel + close_1;
          if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1 && _this.expandQueryIndex(selected[splits[0]], true)) {
            var idx = _this.expandQueryIndex(selected[splits[0]]);
            selected[splits[0]][idx] = selected[splits[0]][idx] + combineVal.replace("$expand=", ",");
          } else {
            selected[splits[0]].push(combineVal);
          }
        }
      });
      Object.keys(selected).forEach(function(expand) {
        if (expands.indexOf(expand) === -1) {
          expands.push(expand);
        }
      });
      expands.forEach(function(expand) {
        expanded[expand] = expand in selected ? expand + "(" + selected[expand].join(";") + ")" : expand;
      });
      Object.keys(expanded).forEach(function(ex) {
        return exArr.push(expanded[ex]);
      });
      return exArr.join(",");
    };
    ODataV4Adaptor2.prototype.expandQueryIndex = function(query, isExpand) {
      for (var i = 0; i < query.length; i++) {
        if (query[i].indexOf("$expand") !== -1) {
          return isExpand ? true : i;
        }
      }
      return isExpand ? false : 0;
    };
    ODataV4Adaptor2.prototype.onDistinct = function(distinctFields) {
      var fields = distinctFields.map(function(field) {
        return ODataAdaptor.getField(field);
      }).join(",");
      return "groupby((" + fields + "))";
    };
    ODataV4Adaptor2.prototype.onSelect = function(e) {
      return _super.prototype.onSelect.call(this, e.filter(function(item) {
        return item.indexOf(".") === -1;
      }));
    };
    ODataV4Adaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (settings.type === "POST" || settings.type === "PUT" || settings.type === "PATCH") {
        request.setRequestHeader("Prefer", "return=representation");
      }
      request.setRequestHeader("Accept", this.options.accept);
    };
    ODataV4Adaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var metaName = "@odata.context";
      var metaV4Name = "@context";
      if (request && request.type === "GET" && !this.rootUrl && (data[metaName] || data[metaV4Name])) {
        var dataUrl = data[metaName] ? data[metaName].split("/$metadata#") : data[metaV4Name].split("/$metadata#");
        this.rootUrl = dataUrl[0];
        this.resourceTableName = dataUrl[1];
      }
      var pvtData = "pvtData";
      var pvt = request && request[pvtData];
      var emptyAndBatch = _super.prototype.processBatchResponse.call(this, data, query, xhr, request, changes);
      if (emptyAndBatch) {
        return emptyAndBatch;
      }
      var count = null;
      var dataCount = "@odata.count";
      var dataV4Count = "@count";
      if (query && query.isCountRequired) {
        if (dataCount in data) {
          count = data[dataCount];
        } else if (dataV4Count in data) {
          count = data[dataV4Count];
        }
      }
      data = !isNullOrUndefined(data.value) ? data.value : data;
      var args = {};
      args.count = count;
      args.result = data;
      this.getAggregateResult(pvt, data, args, null, query);
      return DataUtil.isNull(count) ? args.result : { result: args.result, count, aggregates: args.aggregates };
    };
    return ODataV4Adaptor2;
  }(ODataAdaptor)
);
var WebApiAdaptor = (
  /** @class */
  function(_super) {
    __extends13(WebApiAdaptor2, _super);
    function WebApiAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    WebApiAdaptor2.prototype.getModuleName = function() {
      return "WebApiAdaptor";
    };
    WebApiAdaptor2.prototype.insert = function(dm, data, tableName) {
      return {
        type: "POST",
        url: dm.dataSource.url,
        data: JSON.stringify(data)
      };
    };
    WebApiAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      return {
        type: "DELETE",
        url: dm.dataSource.url + "/" + value,
        data: JSON.stringify(value)
      };
    };
    WebApiAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      return {
        type: "PUT",
        url: dm.dataSource.url,
        data: JSON.stringify(value)
      };
    };
    WebApiAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      var _this = this;
      var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);
      var url = dm.dataSource.url.replace(/\/*$/, "/" + this.options.batch);
      e.url = this.resourceTableName ? this.resourceTableName : e.url;
      var req = [];
      var _loop_1 = function(i2, x2) {
        changes.addedRecords.forEach(function(j, d) {
          var stat = {
            "method": "POST ",
            "url": function(data, i3, key) {
              return "";
            },
            "data": function(data, i3) {
              return JSON.stringify(data[i3]) + "\n\n";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("POST /api/" + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.addedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.addedRecords.length; i < x; i++) {
        _loop_1(i, x);
      }
      var _loop_2 = function(i2, x2) {
        changes.changedRecords.forEach(function(j, d) {
          var stat = {
            "method": _this.options.updateType + " ",
            "url": function(data, i3, key) {
              return "";
            },
            "data": function(data, i3) {
              return JSON.stringify(data[i3]) + "\n\n";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("PUT /api/" + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.changedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.changedRecords.length; i < x; i++) {
        _loop_2(i, x);
      }
      var _loop_3 = function(i2, x2) {
        changes.deletedRecords.forEach(function(j, d) {
          var state = {
            "mtd": "DELETE ",
            "url": function(data, i3, key) {
              var url2 = DataUtil.getObject(key, data[i3]);
              if (typeof url2 === "number" || DataUtil.parse.isGuid(url2)) {
                return "/" + url2;
              } else if (url2 instanceof Date) {
                var datTime = data[i3][key];
                return "/" + datTime.toJSON();
              } else {
                return "/'" + url2 + "'";
              }
            },
            "data": function(data, i3) {
              return "";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("DELETE /api/" + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + state.url(changes.deletedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.deletedRecords.length; i < x; i++) {
        _loop_3(i, x);
      }
      req.push("--" + initialGuid + "--", "");
      return {
        type: "POST",
        url,
        contentType: "multipart/mixed; boundary=" + initialGuid,
        data: req.join("\r\n")
      };
    };
    WebApiAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      request.setRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01");
    };
    WebApiAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var pvtData = "pvtData";
      var pvt = request && request[pvtData];
      var count = null;
      var args = {};
      if (request && request.type.toLowerCase() !== "post") {
        var versionCheck = xhr && request.getResponseHeader("DataServiceVersion");
        var version = versionCheck && parseInt(versionCheck, 10) || 2;
        if (query && query.isCountRequired) {
          if (!DataUtil.isNull(data.Count)) {
            count = data.Count;
          }
        }
        if (version < 3 && data.Items) {
          data = data.Items;
        }
        args.count = count;
        args.result = data;
        this.getAggregateResult(pvt, data, args, null, query);
      }
      args.result = args.result || data;
      return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };
    };
    return WebApiAdaptor2;
  }(ODataAdaptor)
);
var WebMethodAdaptor = (
  /** @class */
  function(_super) {
    __extends13(WebMethodAdaptor2, _super);
    function WebMethodAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    WebMethodAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);
      var getData = "data";
      var data = DataUtil.parse.parseJson(obj[getData]);
      var result = {};
      var value = "value";
      if (data.param) {
        for (var i = 0; i < data.param.length; i++) {
          var param = data.param[i];
          var key = Object.keys(param)[0];
          result[key] = param[key];
        }
      }
      result[value] = data;
      var pvtData = "pvtData";
      var url = "url";
      return {
        data: JSON.stringify(result),
        url: obj[url],
        pvtData: obj[pvtData],
        type: "POST",
        contentType: "application/json; charset=utf-8"
      };
    };
    return WebMethodAdaptor2;
  }(UrlAdaptor)
);
var RemoteSaveAdaptor = (
  /** @class */
  function(_super) {
    __extends13(RemoteSaveAdaptor2, _super);
    function RemoteSaveAdaptor2() {
      var _this = _super.call(this) || this;
      setValue("beforeSend", UrlAdaptor.prototype.beforeSend, _this);
      return _this;
    }
    RemoteSaveAdaptor2.prototype.insert = function(dm, data, tableName, query, position) {
      this.pvt.position = position;
      this.updateType = "add";
      return {
        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: data,
          table: tableName,
          action: "insert"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.remove = function(dm, keyField, val, tableName, query) {
      _super.prototype.remove.call(this, dm, keyField, val);
      return {
        type: "POST",
        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          key: val,
          keyColumn: keyField,
          table: tableName,
          action: "remove"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.update = function(dm, keyField, val, tableName, query) {
      this.updateType = "update";
      this.updateKey = keyField;
      return {
        type: "POST",
        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: val,
          action: "update",
          keyColumn: keyField,
          key: val[keyField],
          table: tableName
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes, e) {
      var i;
      var newData = request ? JSON.parse(request.data) : data;
      data = newData.action === "batch" ? DataUtil.parse.parseJson(data) : data;
      if (this.updateType === "add") {
        _super.prototype.insert.call(this, ds, data, null, null, this.pvt.position);
      }
      if (this.updateType === "update") {
        _super.prototype.update.call(this, ds, this.updateKey, data);
      }
      this.updateType = void 0;
      if (data.added) {
        for (i = 0; i < data.added.length; i++) {
          _super.prototype.insert.call(this, ds, data.added[i]);
        }
      }
      if (data.changed) {
        for (i = 0; i < data.changed.length; i++) {
          _super.prototype.update.call(this, ds, e.key, data.changed[i]);
        }
      }
      if (data.deleted) {
        for (i = 0; i < data.deleted.length; i++) {
          _super.prototype.remove.call(this, ds, e.key, data.deleted[i]);
        }
      }
      return data;
    };
    RemoteSaveAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      return {
        type: "POST",
        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(extend({}, {
          changed: changes.changedRecords,
          added: changes.addedRecords,
          deleted: changes.deletedRecords,
          action: "batch",
          table: e.url,
          key: e.key
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.addParams = function(options) {
      var urlParams = new UrlAdaptor();
      urlParams.addParams(options);
    };
    return RemoteSaveAdaptor2;
  }(JsonAdaptor)
);
var CustomDataAdaptor = (
  /** @class */
  function(_super) {
    __extends13(CustomDataAdaptor2, _super);
    function CustomDataAdaptor2(props) {
      var _this = _super.call(this) || this;
      _this.options = extend({}, _this.options, {
        getData: new Function(),
        addRecord: new Function(),
        updateRecord: new Function(),
        deleteRecord: new Function(),
        batchUpdate: new Function()
      });
      extend(_this.options, props || {});
      return _this;
    }
    CustomDataAdaptor2.prototype.getModuleName = function() {
      return "CustomDataAdaptor";
    };
    return CustomDataAdaptor2;
  }(UrlAdaptor)
);
var GraphQLAdaptor = (
  /** @class */
  function(_super) {
    __extends13(GraphQLAdaptor2, _super);
    function GraphQLAdaptor2(options) {
      var _this = _super.call(this) || this;
      _this.opt = options;
      _this.schema = _this.opt.response;
      _this.query = _this.opt.query;
      _this.getVariables = _this.opt.getVariables ? _this.opt.getVariables : function() {
      };
      _this.getQuery = function() {
        return _this.query;
      };
      return _this;
    }
    GraphQLAdaptor2.prototype.getModuleName = function() {
      return "GraphQLAdaptor";
    };
    GraphQLAdaptor2.prototype.processQuery = function(datamanager, query) {
      var urlQuery = _super.prototype.processQuery.apply(this, arguments);
      var dm = JSON.parse(urlQuery.data);
      var keys = [
        "skip",
        "take",
        "sorted",
        "table",
        "select",
        "where",
        "search",
        "requiresCounts",
        "aggregates",
        "params"
      ];
      var temp = {};
      var str = "searchwhereparams";
      keys.filter(function(e) {
        temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];
      });
      var vars = this.getVariables() || {};
      vars["datamanager"] = temp;
      var data = JSON.stringify({
        query: this.getQuery(),
        variables: vars
      });
      urlQuery.data = data;
      return urlQuery;
    };
    GraphQLAdaptor2.prototype.processResponse = function(resData, ds, query, xhr, request) {
      var res = resData;
      var count;
      var aggregates;
      var result = getValue(this.schema.result, res.data);
      if (this.schema.count) {
        count = getValue(this.schema.count, res.data);
      }
      if (this.schema.aggregates) {
        aggregates = getValue(this.schema.aggregates, res.data);
        aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;
      }
      var pvt = request.pvtData || {};
      var args = { result, aggregates };
      var data = args;
      if (pvt && pvt.groups && pvt.groups.length) {
        this.getAggregateResult(pvt, data, args, null, query);
      }
      return !isNullOrUndefined(count) ? { result: args.result, count, aggregates } : args.result;
    };
    GraphQLAdaptor2.prototype.insert = function() {
      var inserted = _super.prototype.insert.apply(this, arguments);
      return this.generateCrudData(inserted, "insert");
    };
    GraphQLAdaptor2.prototype.update = function() {
      var inserted = _super.prototype.update.apply(this, arguments);
      return this.generateCrudData(inserted, "update");
    };
    GraphQLAdaptor2.prototype.remove = function() {
      var inserted = _super.prototype.remove.apply(this, arguments);
      return this.generateCrudData(inserted, "remove");
    };
    GraphQLAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var batch = _super.prototype.batchRequest.apply(this, arguments);
      var bData = JSON.parse(batch.data);
      bData.key = e.key;
      batch.data = JSON.stringify(bData);
      return this.generateCrudData(batch, "batch");
    };
    GraphQLAdaptor2.prototype.generateCrudData = function(crudData, action) {
      var parsed = JSON.parse(crudData.data);
      crudData.data = JSON.stringify({
        query: this.opt.getMutation(action),
        variables: parsed
      });
      return crudData;
    };
    return GraphQLAdaptor2;
  }(UrlAdaptor)
);
var CacheAdaptor = (
  /** @class */
  function(_super) {
    __extends13(CacheAdaptor2, _super);
    function CacheAdaptor2(adaptor, timeStamp, pageSize) {
      var _this = _super.call(this) || this;
      _this.isCrudAction = false;
      _this.isInsertAction = false;
      if (!isNullOrUndefined(adaptor)) {
        _this.cacheAdaptor = adaptor;
      }
      _this.pageSize = pageSize;
      _this.guidId = DataUtil.getGuid("cacheAdaptor");
      var obj = { keys: [], results: [] };
      window.localStorage.setItem(_this.guidId, JSON.stringify(obj));
      var guid = _this.guidId;
      if (!isNullOrUndefined(timeStamp)) {
        setInterval(function() {
          var data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));
          var forDel = [];
          for (var i = 0; i < data.results.length; i++) {
            var currentTime = +/* @__PURE__ */ new Date();
            var requestTime = +new Date(data.results[i].timeStamp);
            data.results[i].timeStamp = currentTime - requestTime;
            if (currentTime - requestTime > timeStamp) {
              forDel.push(i);
            }
          }
          for (var i = 0; i < forDel.length; i++) {
            data.results.splice(forDel[i], 1);
            data.keys.splice(forDel[i], 1);
          }
          window.localStorage.removeItem(guid);
          window.localStorage.setItem(guid, JSON.stringify(data));
        }, timeStamp);
      }
      return _this;
    }
    CacheAdaptor2.prototype.generateKey = function(url, query) {
      var queries = this.getQueryRequest(query);
      var singles = Query.filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]);
      var key = url;
      var page = "onPage";
      if (page in singles) {
        key += singles[page].pageIndex;
      }
      queries.sorts.forEach(function(obj) {
        key += obj.e.direction + obj.e.fieldName;
      });
      queries.groups.forEach(function(obj) {
        key += obj.e.fieldName;
      });
      queries.searches.forEach(function(obj) {
        key += obj.e.searchKey;
      });
      for (var filter = 0; filter < queries.filters.length; filter++) {
        var currentFilter = queries.filters[filter];
        if (currentFilter.e.isComplex) {
          var newQuery = query.clone();
          newQuery.queries = [];
          for (var i = 0; i < currentFilter.e.predicates.length; i++) {
            newQuery.queries.push({ fn: "onWhere", e: currentFilter.e.predicates[i], filter: query.queries.filter });
          }
          key += currentFilter.e.condition + this.generateKey(url, newQuery);
        } else {
          key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;
        }
      }
      return key;
    };
    CacheAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var key = this.generateKey(dm.dataSource.url, query);
      var cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
      var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;
      if (data != null && !this.isCrudAction && !this.isInsertAction) {
        return data;
      }
      this.isCrudAction = null;
      this.isInsertAction = null;
      return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
    };
    CacheAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      if (this.isInsertAction || request && this.cacheAdaptor.options.batch && DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === "post") {
        return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
      }
      data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
      var key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;
      var obj = {};
      obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
      var index = obj.keys.indexOf(key);
      if (index !== -1) {
        obj.results.splice(index, 1);
        obj.keys.splice(index, 1);
      }
      obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: /* @__PURE__ */ new Date(), count: data.count };
      while (obj.results.length > this.pageSize) {
        obj.results.splice(0, 1);
        obj.keys.splice(0, 1);
      }
      window.localStorage.setItem(this.guidId, JSON.stringify(obj));
      return data;
    };
    CacheAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === "post") {
        request.setRequestHeader("Accept", this.cacheAdaptor.options.multipartAccept);
      }
      if (!dm.dataSource.crossDomain) {
        request.setRequestHeader("Accept", this.cacheAdaptor.options.accept);
      }
    };
    CacheAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      this.isCrudAction = true;
      return this.cacheAdaptor.update(dm, keyField, value, tableName);
    };
    CacheAdaptor2.prototype.insert = function(dm, data, tableName) {
      this.isInsertAction = true;
      return this.cacheAdaptor.insert(dm, data, tableName);
    };
    CacheAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      this.isCrudAction = true;
      return this.cacheAdaptor.remove(dm, keyField, value, tableName);
    };
    CacheAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      return this.cacheAdaptor.batchRequest(dm, changes, e);
    };
    return CacheAdaptor2;
  }(UrlAdaptor)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-data/src/manager.js
var DataManager = (
  /** @class */
  function() {
    function DataManager2(dataSource, query, adaptor) {
      var _this = this;
      this.dateParse = true;
      this.timeZoneHandling = true;
      this.persistQuery = {};
      this.isInitialLoad = false;
      this.requests = [];
      this.isInitialLoad = true;
      if (!dataSource && !this.dataSource) {
        dataSource = [];
      }
      adaptor = adaptor || dataSource.adaptor;
      if (dataSource && dataSource.timeZoneHandling === false) {
        this.timeZoneHandling = dataSource.timeZoneHandling;
      }
      var data;
      if (dataSource instanceof Array) {
        data = {
          json: dataSource,
          offline: true
        };
      } else if (typeof dataSource === "object") {
        if (!dataSource.json) {
          dataSource.json = [];
        }
        if (!dataSource.enablePersistence) {
          dataSource.enablePersistence = false;
        }
        if (!dataSource.id) {
          dataSource.id = "";
        }
        if (!dataSource.ignoreOnPersist) {
          dataSource.ignoreOnPersist = [];
        }
        data = {
          url: dataSource.url,
          insertUrl: dataSource.insertUrl,
          removeUrl: dataSource.removeUrl,
          updateUrl: dataSource.updateUrl,
          crudUrl: dataSource.crudUrl,
          batchUrl: dataSource.batchUrl,
          json: dataSource.json,
          headers: dataSource.headers,
          accept: dataSource.accept,
          data: dataSource.data,
          timeTillExpiration: dataSource.timeTillExpiration,
          cachingPageSize: dataSource.cachingPageSize,
          enableCaching: dataSource.enableCaching,
          requestType: dataSource.requestType,
          key: dataSource.key,
          crossDomain: dataSource.crossDomain,
          jsonp: dataSource.jsonp,
          dataType: dataSource.dataType,
          offline: dataSource.offline !== void 0 ? dataSource.offline : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ? false : dataSource.url ? false : true,
          requiresFormat: dataSource.requiresFormat,
          enablePersistence: dataSource.enablePersistence,
          id: dataSource.id,
          ignoreOnPersist: dataSource.ignoreOnPersist
        };
      } else {
        DataUtil.throwError("DataManager: Invalid arguments");
      }
      if (data.requiresFormat === void 0 && !DataUtil.isCors()) {
        data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;
      }
      if (data.dataType === void 0) {
        data.dataType = "json";
      }
      this.dataSource = data;
      this.defaultQuery = query;
      if (this.dataSource.enablePersistence && this.dataSource.id) {
        window.addEventListener("unload", this.setPersistData.bind(this));
      }
      if (data.url && data.offline && !data.json.length) {
        this.isDataAvailable = false;
        this.adaptor = adaptor || new ODataAdaptor();
        this.dataSource.offline = false;
        this.ready = this.executeQuery(query || new Query());
        this.ready.then(function(e) {
          _this.dataSource.offline = true;
          _this.isDataAvailable = true;
          data.json = e.result;
          _this.adaptor = new JsonAdaptor();
        });
      } else {
        this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();
      }
      if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {
        data.jsonp = "callback";
      }
      this.adaptor = adaptor || this.adaptor;
      if (data.enableCaching) {
        this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);
      }
      return this;
    }
    DataManager2.prototype.getPersistedData = function(id) {
      var persistedData = localStorage.getItem(id || this.dataSource.id);
      return JSON.parse(persistedData);
    };
    DataManager2.prototype.setPersistData = function(e, id, persistData) {
      localStorage.setItem(id || this.dataSource.id, JSON.stringify(persistData || this.persistQuery));
    };
    DataManager2.prototype.setPersistQuery = function(query) {
      var _this = this;
      var persistedQuery = this.getPersistedData();
      if (this.isInitialLoad && persistedQuery && Object.keys(persistedQuery).length) {
        this.persistQuery = persistedQuery;
        this.persistQuery.queries = this.persistQuery.queries.filter(function(query2) {
          if (_this.dataSource.ignoreOnPersist && _this.dataSource.ignoreOnPersist.length) {
            if (query2.fn && _this.dataSource.ignoreOnPersist.some(function(keyword) {
              return query2.fn === keyword;
            })) {
              return false;
            }
          }
          if (query2.fn === "onWhere") {
            var e = query2.e;
            if (e && e.isComplex && e.predicates instanceof Array) {
              var predicates = e.predicates.map(function(predicateObj) {
                var field = predicateObj.field, operator = predicateObj.operator, value = predicateObj.value, ignoreCase = predicateObj.ignoreCase, ignoreAccent = predicateObj.ignoreAccent, matchCase = predicateObj.matchCase;
                return new Predicate(field, operator, value, ignoreCase, ignoreAccent, matchCase);
              });
              query2.e = new Predicate(predicates[0], e.condition, predicates.slice(1));
            }
          }
          return true;
        });
        var newQuery = extend(new Query(), this.persistQuery);
        this.isInitialLoad = false;
        return newQuery;
      } else {
        this.persistQuery = query;
        this.isInitialLoad = false;
        return query;
      }
    };
    DataManager2.prototype.setDefaultQuery = function(query) {
      this.defaultQuery = query;
      return this;
    };
    DataManager2.prototype.executeLocal = function(query) {
      if (!this.defaultQuery && !(query instanceof Query)) {
        DataUtil.throwError("DataManager - executeLocal() : A query is required to execute");
      }
      if (!this.dataSource.json) {
        DataUtil.throwError("DataManager - executeLocal() : Json data is required to execute");
      }
      if (this.dataSource.enablePersistence && this.dataSource.id) {
        query = this.setPersistQuery(query);
      }
      query = query || this.defaultQuery;
      var result = this.adaptor.processQuery(this, query);
      if (query.subQuery) {
        var from = query.subQuery.fromTable;
        var lookup = query.subQuery.lookups;
        var res = query.isCountRequired ? result.result : result;
        if (lookup && lookup instanceof Array) {
          DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);
        }
        for (var j = 0; j < res.length; j++) {
          if (res[j][from] instanceof Array) {
            res[j] = extend({}, {}, res[j]);
            res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager2(res[j][from].slice(0))).executeLocal(), this, query);
          }
        }
      }
      return this.adaptor.processResponse(result, this, query);
    };
    DataManager2.prototype.executeQuery = function(query, done, fail, always) {
      var _this = this;
      var makeRequest = "makeRequest";
      if (this.dataSource.enablePersistence && this.dataSource.id) {
        query = this.setPersistQuery(query);
      }
      if (typeof query === "function") {
        always = fail;
        fail = done;
        done = query;
        query = null;
      }
      if (!query) {
        query = this.defaultQuery;
      }
      if (!(query instanceof Query)) {
        DataUtil.throwError("DataManager - executeQuery() : A query is required to execute");
      }
      var deffered = new Deferred();
      var args = { query };
      if (!this.dataSource.offline && (this.dataSource.url !== void 0 && this.dataSource.url !== "") || !isNullOrUndefined(this.adaptor[makeRequest]) || this.isCustomDataAdaptor(this.adaptor)) {
        var result = this.adaptor.processQuery(this, query);
        if (!isNullOrUndefined(this.adaptor[makeRequest])) {
          this.adaptor[makeRequest](result, deffered, args, query);
        } else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {
          this.requests = [];
          this.makeRequest(result, deffered, args, query);
        } else {
          args = DataManager2.getDeferedArgs(query, result, args);
          deffered.resolve(args);
        }
      } else {
        DataManager2.nextTick(function() {
          var res = _this.executeLocal(query);
          args = DataManager2.getDeferedArgs(query, res, args);
          deffered.resolve(args);
        });
      }
      if (done || fail) {
        deffered.promise.then(done, fail);
      }
      if (always) {
        deffered.promise.then(always, always);
      }
      return deffered.promise;
    };
    DataManager2.getDeferedArgs = function(query, result, args) {
      if (query.isCountRequired) {
        args.result = result.result;
        args.count = result.count;
        args.aggregates = result.aggregates;
      } else {
        args.result = result;
      }
      return args;
    };
    DataManager2.nextTick = function(fn) {
      (window.setImmediate || window.setTimeout)(fn, 0);
    };
    DataManager2.prototype.extendRequest = function(url, fnSuccess, fnFail) {
      return extend({}, {
        type: "GET",
        dataType: this.dataSource.dataType,
        crossDomain: this.dataSource.crossDomain,
        jsonp: this.dataSource.jsonp,
        cache: true,
        processData: false,
        onSuccess: fnSuccess,
        onFailure: fnFail
      }, url);
    };
    DataManager2.prototype.makeRequest = function(url, deffered, args, query) {
      var _this = this;
      var isSelector = !!query.subQuerySelector;
      var fnFail = function(e) {
        args.error = e;
        deffered.reject(args);
      };
      var process = function(data, count, xhr, request2, actual, aggregates, virtualSelectRecords) {
        args.xhr = xhr;
        args.count = count ? parseInt(count.toString(), 10) : 0;
        args.result = data;
        args.request = request2;
        args.aggregates = aggregates;
        args.actual = actual;
        args.virtualSelectRecords = virtualSelectRecords;
        deffered.resolve(args);
      };
      var fnQueryChild = function(data, selector) {
        var subDeffer = new Deferred();
        var childArgs = { parent: args };
        query.subQuery.isChild = true;
        var subUrl = _this.adaptor.processQuery(_this, query.subQuery, data ? _this.adaptor.processResponse(data) : selector);
        var childReq = _this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);
        if (!isSelector) {
          subDeffer.then(function(subData) {
            if (data) {
              DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);
              process(data, subData.count, subData.xhr);
            }
          }, fnFail);
        }
        return childReq;
      };
      var fnSuccess = function(data, request2) {
        if (_this.isGraphQLAdaptor(_this.adaptor)) {
          if (!isNullOrUndefined(data["errors"])) {
            return fnFail(data["errors"], request2);
          }
        }
        if (_this.isCustomDataAdaptor(_this.adaptor)) {
          request2 = extend({}, _this.ajaxReqOption, request2);
        }
        if (request2.httpRequest.getResponseHeader("Content-Type").indexOf("xml") === -1 && _this.dateParse) {
          data = DataUtil.parse.parseJson(data);
        }
        var result = _this.adaptor.processResponse(data, _this, query, request2.httpRequest, request2);
        var count = 0;
        var aggregates = null;
        var virtualSelectRecords = "virtualSelectRecords";
        var virtualRecords = data[virtualSelectRecords];
        if (query.isCountRequired) {
          count = result.count;
          aggregates = result.aggregates;
          result = result.result;
        }
        if (!query.subQuery) {
          process(result, count, request2.httpRequest, request2.type, data, aggregates, virtualRecords);
          return;
        }
        if (!isSelector) {
          fnQueryChild(result, request2);
        }
      };
      var req = this.extendRequest(url, fnSuccess, fnFail);
      if (!this.isCustomDataAdaptor(this.adaptor)) {
        var ajax_1 = new Ajax(req);
        ajax_1.beforeSend = function() {
          _this.beforeSend(ajax_1.httpRequest, ajax_1);
        };
        req = ajax_1.send();
        req.catch(function(e) {
          return true;
        });
        this.requests.push(ajax_1);
      } else {
        this.ajaxReqOption = req;
        var request = req;
        this.adaptor.options.getData({
          data: request.data,
          onSuccess: request.onSuccess,
          onFailure: request.onFailure
        });
      }
      if (isSelector) {
        var promise = void 0;
        var res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });
        if (res && res.length) {
          promise = Promise.all([req, fnQueryChild(null, res)]);
          promise.then(function() {
            var args2 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args2[_i] = arguments[_i];
            }
            var result = args2[0];
            var pResult = _this.adaptor.processResponse(result[0], _this, query, _this.requests[0].httpRequest, _this.requests[0]);
            var count = 0;
            if (query.isCountRequired) {
              count = pResult.count;
              pResult = pResult.result;
            }
            var cResult = _this.adaptor.processResponse(result[1], _this, query.subQuery, _this.requests[1].httpRequest, _this.requests[1]);
            count = 0;
            if (query.subQuery.isCountRequired) {
              count = cResult.count;
              cResult = cResult.result;
            }
            DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);
            isSelector = false;
            process(pResult, count, _this.requests[0].httpRequest);
          });
        } else {
          isSelector = false;
        }
      }
      return req;
    };
    DataManager2.prototype.beforeSend = function(request, settings) {
      this.adaptor.beforeSend(this, request, settings);
      var headers = this.dataSource.headers;
      var props;
      for (var i = 0; headers && i < headers.length; i++) {
        props = [];
        var keys = Object.keys(headers[i]);
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var prop = keys_1[_i];
          props.push(prop);
          request.setRequestHeader(prop, headers[i][prop]);
        }
      }
    };
    DataManager2.prototype.saveChanges = function(changes, key, tableName, query, original) {
      var _this = this;
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var args = {
        url: tableName,
        key: key || this.dataSource.key
      };
      var req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);
      var doAjaxRequest = "doAjaxRequest";
      if (this.dataSource.offline) {
        return req;
      }
      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](req);
      } else if (!this.isCustomDataAdaptor(this.adaptor)) {
        var deff_1 = new Deferred();
        var ajax_2 = new Ajax(req);
        ajax_2.beforeSend = function() {
          _this.beforeSend(ajax_2.httpRequest, ajax_2);
        };
        ajax_2.onSuccess = function(data, request) {
          if (_this.isGraphQLAdaptor(_this.adaptor)) {
            if (!isNullOrUndefined(data["errors"])) {
              ajax_2.onFailure(JSON.stringify(data["errors"]));
            }
          }
          deff_1.resolve(_this.adaptor.processResponse(data, _this, null, request.httpRequest, request, changes, args));
        };
        ajax_2.onFailure = function(e) {
          deff_1.reject([{ error: e }]);
        };
        ajax_2.send().catch(function(e) {
          return true;
        });
        return deff_1.promise;
      } else {
        return this.doAjaxRequest(req, this.adaptor.options.batchUpdate);
      }
    };
    DataManager2.prototype.insert = function(data, tableName, query, position) {
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var req = this.adaptor.insert(this, data, tableName, query, position);
      var doAjaxRequest = "doAjaxRequest";
      if (this.dataSource.offline) {
        return req;
      }
      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](req);
      } else {
        return this.doAjaxRequest(req, this.adaptor.options.addRecord);
      }
    };
    DataManager2.prototype.remove = function(keyField, value, tableName, query) {
      if (typeof value === "object") {
        value = DataUtil.getObject(keyField, value);
      }
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var res = this.adaptor.remove(this, keyField, value, tableName, query);
      var doAjaxRequest = "doAjaxRequest";
      if (this.dataSource.offline) {
        return res;
      }
      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](res);
      } else {
        var remove2 = this.adaptor.options.deleteRecord;
        return this.doAjaxRequest(res, remove2);
      }
    };
    DataManager2.prototype.update = function(keyField, value, tableName, query, original) {
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var res = this.adaptor.update(this, keyField, value, tableName, query, original);
      var doAjaxRequest = "doAjaxRequest";
      if (this.dataSource.offline) {
        return res;
      }
      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](res);
      } else {
        var update = this.adaptor.options.updateRecord;
        return this.doAjaxRequest(res, update);
      }
    };
    DataManager2.prototype.isCustomDataAdaptor = function(dataSource) {
      return this.adaptor.getModuleName && this.adaptor.getModuleName() === "CustomDataAdaptor";
    };
    DataManager2.prototype.isGraphQLAdaptor = function(dataSource) {
      return this.adaptor.getModuleName && this.adaptor.getModuleName() === "GraphQLAdaptor";
    };
    DataManager2.prototype.successFunc = function(record, request) {
      if (this.isGraphQLAdaptor(this.adaptor)) {
        var data = JSON.parse(record);
        if (!isNullOrUndefined(data["errors"])) {
          this.failureFunc(JSON.stringify(data["errors"]));
        }
      }
      if (this.isCustomDataAdaptor(this.adaptor)) {
        request = extend({}, this.ajaxReqOption, request);
      }
      try {
        DataUtil.parse.parseJson(record);
      } catch (e) {
        record = [];
      }
      record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);
      this.ajaxDeffered.resolve(record);
    };
    DataManager2.prototype.failureFunc = function(e) {
      this.ajaxDeffered.reject([{ error: e }]);
    };
    DataManager2.prototype.doAjaxRequest = function(res, ajaxFunc) {
      var _this = this;
      res = extend({}, {
        type: "POST",
        contentType: "application/json; charset=utf-8",
        processData: false
      }, res);
      this.ajaxDeffered = new Deferred();
      if (!this.isCustomDataAdaptor(this.adaptor)) {
        var ajax_3 = new Ajax(res);
        ajax_3.beforeSend = function() {
          _this.beforeSend(ajax_3.httpRequest, ajax_3);
        };
        ajax_3.onSuccess = this.successFunc.bind(this);
        ajax_3.onFailure = this.failureFunc.bind(this);
        ajax_3.send().catch(function(e) {
          return true;
        });
      } else {
        this.ajaxReqOption = res;
        ajaxFunc.call(this, {
          data: res.data,
          onSuccess: this.successFunc.bind(this),
          onFailure: this.failureFunc.bind(this)
        });
      }
      return this.ajaxDeffered.promise;
    };
    DataManager2.prototype.clearPersistence = function() {
      window.removeEventListener("unload", this.setPersistData.bind(this));
      this.dataSource.enablePersistence = false;
      this.persistQuery = {};
      window.localStorage.setItem(this.dataSource.id, "[]");
    };
    return DataManager2;
  }()
);
var Deferred = (
  /** @class */
  function() {
    function Deferred2() {
      var _this = this;
      this.promise = new Promise(function(resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
      this.then = this.promise.then.bind(this.promise);
      this.catch = this.promise.catch.bind(this.promise);
    }
    return Deferred2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/base/constant.js
var actionBegin = "actionBegin";
var actionComplete = "actionComplete";
var actionFailure = "actionFailure";
var cardClick = "cardClick";
var cardDoubleClick = "cardDoubleClick";
var cardRendered = "cardRendered";
var queryCellInfo = "queryCellInfo";
var dataBinding = "dataBinding";
var dataBound = "dataBound";
var dragStart = "dragStart";
var drag = "drag";
var dragStop = "dragStop";
var documentClick = "document-click";
var dialogOpen = "dialogOpen";
var dialogClose = "dialogClose";
var contentReady = "content-ready";
var dataReady = "data-ready";
var bottomSpace = 25;
var cardSpace = 16;
var toggleWidth = 50;
var dataSourceChanged = "dataSourceChanged";
var dataStateChange = "dataStateChange";

// node_modules/@syncfusion/ej2-kanban/src/kanban/base/data.js
var Data = (
  /** @class */
  function() {
    function Data2(parent) {
      this.dataState = { isPending: false, resolver: null, isDataChanged: false };
      this.parent = parent;
      this.keyField = this.parent.cardSettings.headerField;
      this.dataState = { isDataChanged: false };
      this.isObservable = false;
      this.initDataManager(parent.dataSource, parent.query);
      this.refreshDataManager();
    }
    Data2.prototype.initDataManager = function(dataSource, query) {
      this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);
      this.query = query instanceof Query ? query : new Query();
      this.kanbanData = new DataManager(this.parent.kanbanData);
    };
    Data2.prototype.isRemote = function() {
      return this.dataManager.dataSource.offline !== true && this.dataManager.dataSource.url !== void 0 && this.dataManager.dataSource.url !== "";
    };
    Data2.prototype.columnKeyFields = function() {
      var columns = [];
      for (var _i = 0, _a = this.parent.columns; _i < _a.length; _i++) {
        var column = _a[_i];
        if (column.keyField.toString().split(",").length > 1) {
          for (var _b = 0, _c = column.keyField.toString().split(","); _b < _c.length; _b++) {
            var innerColumns = _c[_b];
            columns.push(innerColumns.trim());
          }
        } else {
          columns.push(column.keyField.toString());
        }
      }
      return columns;
    };
    Data2.prototype.getQuery = function(parameter) {
      var query = this.query.clone();
      if (this.isRemote() && this.parent.enableVirtualization) {
        var cardHeight = this.parent.cardHeight === "auto" ? 100 : parseInt(formatUnit(this.parent.cardHeight).split("px")[0], 10);
        var take = this.parent.height === "auto" ? Math.ceil(window.innerHeight / cardHeight) * 2 : Math.ceil(parseInt(formatUnit(this.parent.height).split("px")[0], 10) / cardHeight) * 2;
        var columns = this.columnKeyFields();
        for (var i = 0; i < columns.length; i++) {
          query.where(this.parent.keyField, "equal", columns[i]);
        }
        query.take(take);
        if (isNullOrUndefined(parameter)) {
          parameter = "KanbanVirtualization";
        }
        query.addParams("KanbanVirtualization", parameter);
      }
      return query;
    };
    Data2.prototype.getData = function(query) {
      if (this.parent.dataSource && "result" in this.parent.dataSource) {
        var def = this.eventPromise({ requestType: "" }, query);
        this.isObservable = true;
        return def.promise;
      }
      return this.dataManager.executeQuery(query);
    };
    Data2.prototype.setState = function(state) {
      return this.dataState = state;
    };
    Data2.prototype.getStateEventArgument = function(query) {
      var adaptr = new UrlAdaptor();
      var dm = new DataManager({ url: "", adaptor: new UrlAdaptor() });
      var state = adaptr.processQuery(dm, query);
      var data = JSON.parse(state.data);
      return extend(data, state.pvtData);
    };
    Data2.prototype.eventPromise = function(args, query, index) {
      var _this = this;
      var dataArgs = args;
      var state = this.getStateEventArgument(query);
      var def = new Deferred();
      var deff = new Deferred();
      if (args.requestType !== void 0 && this.dataState.isDataChanged !== false) {
        state.action = args;
        if (args.requestType === "cardChanged" || args.requestType === "cardRemoved" || args.requestType === "cardCreated") {
          var editArgs_1 = args;
          editArgs_1.promise = deff.promise;
          editArgs_1.state = state;
          editArgs_1.index = index;
          this.setState({ isPending: true, resolver: deff.resolve });
          dataArgs.endEdit = deff.resolve;
          dataArgs.cancelEdit = deff.reject;
          this.parent.trigger(dataSourceChanged, editArgs_1);
          deff.promise.then(function() {
            _this.setState({ isPending: true, resolver: def.resolve });
            _this.parent.trigger(dataStateChange, state);
            editArgs_1.addedRecords.forEach(function(data) {
              _this.parent.kanbanData.push(data);
            });
            editArgs_1.changedRecords.forEach(function(changedRecord) {
              var cardObj = _this.parent.kanbanData.filter(function(data) {
                return data[_this.parent.cardSettings.headerField] === changedRecord[_this.parent.cardSettings.headerField];
              })[0];
              extend(cardObj, changedRecord);
            });
            editArgs_1.deletedRecords.forEach(function(deletedRecord) {
              var index2 = _this.parent.kanbanData.findIndex(function(data) {
                return data[_this.parent.cardSettings.headerField] === deletedRecord[_this.parent.cardSettings.headerField];
              });
              _this.parent.kanbanData.splice(index2, 1);
            });
          }).catch(function() {
            _this.parent.hideSpinner();
          });
        } else {
          this.setState({ isPending: true, resolver: def.resolve });
          this.parent.trigger(dataStateChange, state);
        }
      } else {
        this.setState({});
        def.resolve(this.parent.dataSource);
      }
      return def;
    };
    Data2.prototype.getTable = function() {
      if (this.parent.query) {
        var query = this.getQuery();
        return query.fromTable;
      } else {
        return null;
      }
    };
    Data2.prototype.refreshDataManager = function() {
      var _this = this;
      var dataManager = this.getData(this.getQuery());
      dataManager.then(function(e) {
        return _this.dataManagerSuccess(e);
      }).catch(function(e) {
        return _this.dataManagerFailure(e);
      });
    };
    Data2.prototype.dataManagerSuccess = function(e, type, offlineArgs, index) {
      var _this = this;
      if (this.parent.isDestroyed) {
        return;
      }
      if (type) {
        this.updateKanbanData(e);
        if (this.parent.enableVirtualization && this.isRemote()) {
          this.parent.virtualLayoutModule.refresh();
        }
      } else {
        this.parent.trigger(dataBinding, e, function(args) {
          _this.updateKanbanData(args);
          _this.parent.notify(dataReady, { processedData: _this.parent.kanbanData });
          _this.parent.trigger(dataBound, null, function() {
            return _this.parent.hideSpinner();
          });
        });
      }
    };
    Data2.prototype.updateKanbanData = function(args) {
      var resultData = extend([], !isNullOrUndefined(args.result.result) ? args.result.result : args.result, null, true);
      if (this.isRemote() && this.parent.enableVirtualization && resultData.length > 0 && !isNullOrUndefined(args.result.count)) {
        var columnsKeyFields = this.columnKeyFields();
        for (var i = 0; i < columnsKeyFields.length; i++) {
          if (args.result.count[i].Key === columnsKeyFields[i]) {
            this.parent.columnDataCount[columnsKeyFields[i]] = args.result.count[i].Value;
          }
        }
      }
      this.parent.kanbanData = resultData;
    };
    Data2.prototype.dataManagerFailure = function(e) {
      var _this = this;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.trigger(actionFailure, { error: e }, function() {
        return _this.parent.hideSpinner();
      });
    };
    Data2.prototype.updateDataManager = function(updateType, params, type, data, index, isDropped, dataDropIndexKeyFieldValue, draggedKey, droppedKey, isMultipleDrag) {
      var _this = this;
      this.parent.showSpinner();
      var promise;
      var actionArgs = {
        requestType: type,
        cancel: false,
        addedRecords: params.addedRecords,
        changedRecords: params.changedRecords,
        deletedRecords: params.deletedRecords
      };
      this.setState({ isDataChanged: true });
      this.eventPromise(actionArgs, this.query, index);
      this.parent.trigger(actionComplete, actionArgs, function(offlineArgs) {
        if (!offlineArgs.cancel) {
          switch (updateType) {
            case "insert":
              promise = _this.dataManager.insert(data, _this.getTable(), _this.getQuery());
              break;
            case "update":
              if (_this.parent.enableVirtualization && !_this.parent.dataModule.isRemote() && isDropped) {
                promise = _this.dataManager.remove(_this.keyField, data, _this.getTable(), _this.getQuery());
                promise = _this.dataManager.insert(data, _this.getTable(), _this.getQuery(), _this.dataManager.dataSource.json.findIndex(function(data2) {
                  return data2[_this.parent.cardSettings.headerField] === dataDropIndexKeyFieldValue;
                }));
              } else {
                promise = _this.dataManager.update(_this.keyField, data, _this.getTable(), _this.getQuery());
              }
              break;
            case "delete":
              promise = _this.dataManager.remove(_this.keyField, data, _this.getTable(), _this.getQuery());
              break;
            case "batch":
              if (!_this.parent.dataModule.isRemote() && isDropped && _this.parent.enableVirtualization && data) {
                for (var i = 0; i < data.length; i++) {
                  promise = _this.dataManager.remove(_this.keyField, data[i], _this.getTable(), _this.getQuery());
                }
                var currentIndex = _this.dataManager.dataSource.json.findIndex(function(data2) {
                  return data2[_this.parent.cardSettings.headerField] === dataDropIndexKeyFieldValue;
                });
                for (var i = 0; i < data.length; i++, currentIndex++) {
                  promise = _this.dataManager.insert(data[i], _this.getTable(), _this.getQuery(), currentIndex);
                }
              } else {
                promise = _this.dataManager.saveChanges(params, _this.keyField, _this.getTable(), _this.getQuery());
              }
              break;
          }
          if (_this.dataManager.dataSource.offline) {
            if (!_this.isObservable) {
              _this.kanbanData = _this.dataManager;
              _this.parent.kanbanData = _this.dataManager.dataSource.json;
              index = draggedKey === droppedKey && isMultipleDrag ? index - 1 : index;
              _this.refreshUI(offlineArgs, index, isDropped);
              if (_this.parent.enableVirtualization) {
                _this.parent.virtualLayoutModule.refreshColumnData(draggedKey, droppedKey, offlineArgs.requestType, data[_this.parent.keyField]);
              }
            }
          } else {
            promise.then(function(args) {
              if (_this.parent.isDestroyed) {
                return;
              }
              var dataManager = _this.getData(_this.getQuery());
              dataManager.then(function(e) {
                return _this.dataManagerSuccess(e, "DataSourceChange", offlineArgs, index);
              }).catch(function(e) {
                return _this.dataManagerFailure(e);
              });
              if (offlineArgs.requestType === "cardCreated") {
                if (!Array.isArray(args)) {
                  offlineArgs.addedRecords[0] = extend(offlineArgs.addedRecords[0], args);
                } else {
                  _this.modifyArrayData(offlineArgs.addedRecords, args);
                }
              } else if (offlineArgs.requestType === "cardChanged") {
                if (!Array.isArray(args)) {
                  offlineArgs.changedRecords[0] = extend(offlineArgs.changedRecords[0], args);
                } else {
                  _this.modifyArrayData(offlineArgs.changedRecords, args);
                }
              } else if (offlineArgs.requestType === "cardRemoved") {
                if (!Array.isArray(args)) {
                  offlineArgs.deletedRecords[0] = extend(offlineArgs.deletedRecords[0], args);
                } else {
                  _this.modifyArrayData(offlineArgs.deletedRecords, args);
                }
              }
              index = draggedKey === droppedKey && isMultipleDrag ? index - 1 : index;
              _this.refreshUI(offlineArgs, index, isDropped);
              if (_this.parent.enableVirtualization) {
                _this.parent.virtualLayoutModule.refreshColumnData(draggedKey, droppedKey, offlineArgs.requestType, data[_this.parent.keyField]);
              }
            }).catch(function(e) {
              _this.dataManagerFailure(e);
            });
          }
        }
      });
    };
    Data2.prototype.modifyArrayData = function(onLineData, e) {
      if (onLineData.length === e.length) {
        for (var i = 0; i < e.length; i++) {
          onLineData[i] = extend(onLineData[i], e[i]);
        }
      }
      return onLineData;
    };
    Data2.prototype.refreshUI = function(args, position, isDropped) {
      var _this = this;
      if (this.parent.enableVirtualization) {
        this.parent.virtualLayoutModule.columnData = this.parent.virtualLayoutModule.getColumnCards();
        args.addedRecords.forEach(function(data, index) {
          _this.parent.virtualLayoutModule.renderCardBasedOnIndex(data, position + index, isDropped, args.requestType);
        });
        args.changedRecords.forEach(function(data) {
          _this.parent.virtualLayoutModule.removeCard(data);
          _this.parent.virtualLayoutModule.renderCardBasedOnIndex(data, position, isDropped, args.requestType);
          if (_this.parent.virtualLayoutModule.isSelectedCard) {
            _this.parent.actionModule.SingleCardSelection(data);
          }
          if (_this.parent.sortSettings.field && _this.parent.sortSettings.sortBy === "Index" && _this.parent.sortSettings.direction === "Descending" && position > 0) {
            --position;
          } else {
            position++;
          }
        });
        args.deletedRecords.forEach(function(data) {
          _this.parent.virtualLayoutModule.removeCard(data);
        });
        this.parent.virtualLayoutModule.refresh();
      } else {
        this.parent.layoutModule.columnData = this.parent.layoutModule.getColumnCards();
        if (this.parent.swimlaneSettings.keyField) {
          this.parent.layoutModule.kanbanRows = this.parent.layoutModule.getRows();
          this.parent.layoutModule.swimlaneData = this.parent.layoutModule.getSwimlaneCards();
        }
        args.addedRecords.forEach(function(data, index) {
          if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {
            data[_this.parent.swimlaneSettings.keyField] = "";
          }
          _this.parent.layoutModule.renderCardBasedOnIndex(data, position + index);
        });
        args.changedRecords.forEach(function(data) {
          if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {
            data[_this.parent.swimlaneSettings.keyField] = "";
          }
          _this.parent.layoutModule.removeCard(data);
          _this.parent.layoutModule.renderCardBasedOnIndex(data, position);
          if (_this.parent.layoutModule.isSelectedCard) {
            _this.parent.actionModule.SingleCardSelection(data);
          }
          if (_this.parent.sortSettings.field && _this.parent.sortSettings.sortBy === "Index" && _this.parent.sortSettings.direction === "Descending" && position > 0) {
            --position;
          } else {
            position++;
          }
        });
        args.deletedRecords.forEach(function(data) {
          _this.parent.layoutModule.removeCard(data);
        });
        this.parent.layoutModule.refresh();
      }
      this.parent.renderTemplates();
      this.parent.notify(contentReady, {});
      this.parent.trigger(dataBound, args, function() {
        return _this.parent.hideSpinner();
      });
    };
    return Data2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/models/swimlane-settings.js
var __extends14 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate11 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SwimlaneSettings = (
  /** @class */
  function(_super) {
    __extends14(SwimlaneSettings2, _super);
    function SwimlaneSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate11([
      Property()
    ], SwimlaneSettings2.prototype, "keyField", void 0);
    __decorate11([
      Property()
    ], SwimlaneSettings2.prototype, "textField", void 0);
    __decorate11([
      Property(false)
    ], SwimlaneSettings2.prototype, "showEmptyRow", void 0);
    __decorate11([
      Property(true)
    ], SwimlaneSettings2.prototype, "showItemCount", void 0);
    __decorate11([
      Property(false)
    ], SwimlaneSettings2.prototype, "allowDragAndDrop", void 0);
    __decorate11([
      Property()
    ], SwimlaneSettings2.prototype, "template", void 0);
    __decorate11([
      Property("Ascending")
    ], SwimlaneSettings2.prototype, "sortDirection", void 0);
    __decorate11([
      Property()
    ], SwimlaneSettings2.prototype, "sortComparer", void 0);
    __decorate11([
      Property(true)
    ], SwimlaneSettings2.prototype, "showUnassignedRow", void 0);
    __decorate11([
      Property(false)
    ], SwimlaneSettings2.prototype, "enableFrozenRows", void 0);
    return SwimlaneSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/models/card-settings.js
var __extends15 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate12 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CardSettings = (
  /** @class */
  function(_super) {
    __extends15(CardSettings2, _super);
    function CardSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate12([
      Property(true)
    ], CardSettings2.prototype, "showHeader", void 0);
    __decorate12([
      Property()
    ], CardSettings2.prototype, "headerField", void 0);
    __decorate12([
      Property()
    ], CardSettings2.prototype, "contentField", void 0);
    __decorate12([
      Property()
    ], CardSettings2.prototype, "tagsField", void 0);
    __decorate12([
      Property()
    ], CardSettings2.prototype, "grabberField", void 0);
    __decorate12([
      Property()
    ], CardSettings2.prototype, "footerCssField", void 0);
    __decorate12([
      Property()
    ], CardSettings2.prototype, "template", void 0);
    __decorate12([
      Property("Single")
    ], CardSettings2.prototype, "selectionType", void 0);
    return CardSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/models/dialog-settings.js
var __extends16 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate13 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DialogSettings = (
  /** @class */
  function(_super) {
    __extends16(DialogSettings2, _super);
    function DialogSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property()
    ], DialogSettings2.prototype, "template", void 0);
    __decorate13([
      Property([])
    ], DialogSettings2.prototype, "fields", void 0);
    __decorate13([
      Property(null)
    ], DialogSettings2.prototype, "model", void 0);
    return DialogSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/models/columns.js
var __extends17 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate14 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Columns = (
  /** @class */
  function(_super) {
    __extends17(Columns2, _super);
    function Columns2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate14([
      Property()
    ], Columns2.prototype, "keyField", void 0);
    __decorate14([
      Property()
    ], Columns2.prototype, "headerText", void 0);
    __decorate14([
      Property()
    ], Columns2.prototype, "template", void 0);
    __decorate14([
      Property(false)
    ], Columns2.prototype, "allowToggle", void 0);
    __decorate14([
      Property(true)
    ], Columns2.prototype, "isExpanded", void 0);
    __decorate14([
      Property()
    ], Columns2.prototype, "minCount", void 0);
    __decorate14([
      Property()
    ], Columns2.prototype, "maxCount", void 0);
    __decorate14([
      Property(true)
    ], Columns2.prototype, "showItemCount", void 0);
    __decorate14([
      Property(false)
    ], Columns2.prototype, "showAddButton", void 0);
    __decorate14([
      Property(true)
    ], Columns2.prototype, "allowDrag", void 0);
    __decorate14([
      Property(true)
    ], Columns2.prototype, "allowDrop", void 0);
    __decorate14([
      Property([])
    ], Columns2.prototype, "transitionColumns", void 0);
    return Columns2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/models/stacked-headers.js
var __extends18 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate15 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var StackedHeaders = (
  /** @class */
  function(_super) {
    __extends18(StackedHeaders2, _super);
    function StackedHeaders2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate15([
      Property()
    ], StackedHeaders2.prototype, "text", void 0);
    __decorate15([
      Property()
    ], StackedHeaders2.prototype, "keyFields", void 0);
    return StackedHeaders2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/models/sort-settings.js
var __extends19 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate16 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SortSettings = (
  /** @class */
  function(_super) {
    __extends19(SortSettings2, _super);
    function SortSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate16([
      Property("Index")
    ], SortSettings2.prototype, "sortBy", void 0);
    __decorate16([
      Property()
    ], SortSettings2.prototype, "field", void 0);
    __decorate16([
      Property("Ascending")
    ], SortSettings2.prototype, "direction", void 0);
    return SortSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/base/css-constant.js
var ROOT_CLASS = "e-kanban";
var RTL_CLASS = "e-rtl";
var DEVICE_CLASS = "e-device";
var ICON_CLASS = "e-icons";
var TEMPLATE_CLASS = "e-template";
var SWIMLANE_CLASS = "e-swimlane";
var TABLE_CLASS = "e-kanban-table";
var HEADER_CLASS = "e-kanban-header";
var HEADER_TABLE_CLASS = "e-header-table";
var HEADER_CELLS_CLASS = "e-header-cells";
var HEADER_WRAP_CLASS = "e-header-wrap";
var HEADER_TITLE_CLASS = "e-header-title";
var HEADER_TEXT_CLASS = "e-header-text";
var HEADER_ICON_CLASS = "e-header-icon";
var STACKED_HEADER_ROW_CLASS = "e-stacked-header-row";
var STACKED_HEADER_CELL_CLASS = "e-stacked-header-cell";
var CONTENT_CELLS_CLASS = "e-content-cells";
var CONTENT_CLASS = "e-kanban-content";
var CONTENT_TABLE_CLASS = "e-content-table";
var HEADER_ROW_TOGGLE_CLASS = "e-toggle-header";
var HEADER_ROW_CLASS = "e-header-row";
var CONTENT_ROW_CLASS = "e-content-row";
var SWIMLANE_ROW_CLASS = "e-swimlane-row";
var SWIMLANE_ROW_EXPAND_CLASS = "e-swimlane-row-expand";
var SWIMLANE_ROW_COLLAPSE_CLASS = "e-swimlane-row-collapse";
var SWIMLANE_ROW_TEXT_CLASS = "e-swimlane-text";
var CARD_ITEM_COUNT_CLASS = "e-item-count";
var CARD_WRAPPER_CLASS = "e-card-wrapper";
var CARD_VIRTUAL_WRAPPER_CLASS = "e-card-virtual-wrapper";
var CARD_CLASS = "e-card";
var DROPPABLE_CLASS = "e-droppable";
var DRAG_CLASS = "e-drag";
var DROP_CLASS = "e-drop";
var DISABLED_CLASS = "e-disabled";
var CARD_HEADER_CLASS = "e-card-header";
var CARD_CONTENT_CLASS = "e-card-content";
var CARD_HEADER_TEXT_CLASS = "e-card-header-caption";
var CARD_HEADER_TITLE_CLASS = "e-card-header-title";
var CARD_TAGS_CLASS = "e-card-tags";
var CARD_TAG_CLASS = "e-card-tag";
var CARD_COLOR_CLASS = "e-card-color";
var CARD_LABEL_CLASS = "e-card-label";
var CARD_FOOTER_CLASS = "e-card-footer";
var EMPTY_CARD_CLASS = "e-empty-card";
var CARD_FOOTER_CSS_CLASS = "e-card-footer-css";
var COLUMN_EXPAND_CLASS = "e-column-expand";
var COLUMN_COLLAPSE_CLASS = "e-column-collapse";
var COLLAPSE_HEADER_TEXT_CLASS = "e-collapse-header-text";
var COLLAPSED_CLASS = "e-collapsed";
var DIALOG_CLASS = "e-kanban-dialog";
var FORM_CLASS = "e-kanban-form";
var FORM_WRAPPER_CLASS = "e-kanban-form-wrapper";
var ERROR_VALIDATION_CLASS = "e-kanban-error";
var FIELD_CLASS = "e-field";
var DRAGGED_CLONE_CLASS = "e-target-dragged-clone";
var CLONED_CARD_CLASS = "e-cloned-card";
var DRAGGED_CARD_CLASS = "e-kanban-dragged-card";
var DROPPED_CLONE_CLASS = "e-target-dropped-clone";
var DROPPING_CLASS = "e-dropping";
var BORDER_CLASS = "e-kanban-border";
var TOGGLE_VISIBLE_CLASS = "e-toggle-visible";
var MULTI_CARD_WRAPPER_CLASS = "e-multi-card-wrapper";
var MULTI_ACTIVE_CLASS = "e-multi-active";
var TARGET_MULTI_CLONE_CLASS = "e-target-multi-clone";
var MULTI_COLUMN_KEY_CLASS = "e-column-key";
var CARD_SELECTION_CLASS = "e-selection";
var TOOLTIP_CLASS = "e-kanban-tooltip";
var TOOLTIP_TEXT_CLASS = "e-tooltip-text";
var SWIMLANE_HEADER_CLASS = "e-swimlane-header";
var SWIMLANE_HEADER_TOOLBAR_CLASS = "e-swimlane-header-toolbar";
var TOOLBAR_MENU_CLASS = "e-toolbar-menu";
var TOOLBAR_MENU_ICON_CLASS = "e-icon-menu";
var TOOLBAR_LEVEL_TITLE_CLASS = "e-toolbar-level-title";
var TOOLBAR_SWIMLANE_NAME_CLASS = "e-toolbar-swimlane-name";
var SWIMLANE_OVERLAY_CLASS = "e-swimlane-overlay";
var SWIMLANE_CONTENT_CLASS = "e-swimlane-content";
var SWIMLANE_RESOURCE_CLASS = "e-swimlane-resource";
var SWIMLANE_TREE_CLASS = "e-swimlane-tree";
var LIMITS_CLASS = "e-limits";
var MAX_COUNT_CLASS = "e-max-count";
var MIN_COUNT_CLASS = "e-min-count";
var MAX_COLOR_CLASS = "e-max-color";
var MIN_COLOR_CLASS = "e-min-color";
var POPUP_HEADER_CLASS = "e-popup-header";
var CLOSE_CLASS = "e-close";
var POPUP_CONTENT_CLASS = "e-popup-content";
var POPUP_WRAPPER_CLASS = "e-mobile-popup-wrapper";
var CLOSE_ICON_CLASS = "e-close-icon";
var POPUP_OPEN_CLASS = "e-popup-open";
var DIALOG_CONTENT_CONTAINER = "e-kanban-dialog-content";
var SHOW_ADD_BUTTON = "e-show-add-button";
var SHOW_ADD_ICON = "e-show-add-icon";
var SHOW_ADD_FOCUS = "e-show-add-focus";
var FROZEN_SWIMLANE_ROW_CLASS = "e-frozen-swimlane-row";
var FROZEN_ROW_CLASS = "e-frozen-row";

// node_modules/@syncfusion/ej2-kanban/src/kanban/actions/action.js
var Action = (
  /** @class */
  function() {
    function Action2(parent) {
      this.parent = parent;
      this.columnToggleArray = [];
      this.selectionArray = [];
      this.lastCardSelection = null;
      this.lastSelectionRow = null;
      this.lastCard = null;
      this.selectedCardsElement = [];
      this.selectedCardsData = [];
      this.hideColumnKeys = [];
    }
    Action2.prototype.clickHandler = function(e) {
      var elementSelector = "." + CARD_CLASS + ",." + HEADER_ICON_CLASS + ",." + CONTENT_ROW_CLASS + "." + SWIMLANE_ROW_CLASS + ",." + SHOW_ADD_BUTTON + ",." + FROZEN_SWIMLANE_ROW_CLASS + ",." + CONTENT_ROW_CLASS + ":not(." + SWIMLANE_ROW_CLASS + ") ." + CONTENT_CELLS_CLASS;
      var target = closest(e.target, elementSelector);
      if (!target) {
        return;
      }
      if (target.classList.contains(CARD_CLASS)) {
        if (this.parent.allowKeyboard) {
          this.parent.keyboardModule.cardTabIndexRemove();
        }
        this.cardClick(e);
      } else if (target.classList.contains(HEADER_ICON_CLASS)) {
        this.columnExpandCollapse(e);
      } else if (target.classList.contains(CONTENT_ROW_CLASS) && target.classList.contains(SWIMLANE_ROW_CLASS)) {
        this.rowExpandCollapse(e);
      } else if (target.classList.contains(SHOW_ADD_BUTTON)) {
        this.addButtonClick(target);
      } else if (target.classList.contains(FROZEN_SWIMLANE_ROW_CLASS)) {
        var swimlaneRows = [].slice.call(this.parent.element.querySelectorAll("." + SWIMLANE_ROW_CLASS));
        var targetIcon = this.parent.layoutModule.frozenSwimlaneRow.querySelector("." + ICON_CLASS);
        this.rowExpandCollapse(e, swimlaneRows[this.parent.layoutModule.frozenOrder]);
        var isCollapsed = targetIcon.classList.contains(SWIMLANE_ROW_COLLAPSE_CLASS) ? true : false;
        if (isCollapsed) {
          classList(targetIcon, [SWIMLANE_ROW_EXPAND_CLASS], [SWIMLANE_ROW_COLLAPSE_CLASS]);
        } else {
          classList(targetIcon, [SWIMLANE_ROW_COLLAPSE_CLASS], [SWIMLANE_ROW_EXPAND_CLASS]);
        }
      }
    };
    Action2.prototype.addButtonClick = function(target) {
      var _this = this;
      var newData = {};
      if (this.parent.kanbanData.length === 0) {
        newData[this.parent.cardSettings.headerField] = 1;
      } else if (typeof this.parent.kanbanData[0][this.parent.cardSettings.headerField] === "number") {
        var id = this.parent.kanbanData.map(function(obj) {
          return parseInt(obj[_this.parent.cardSettings.headerField], 10);
        });
        newData[this.parent.cardSettings.headerField] = Math.max.apply(Math, id) + 1;
      }
      newData[this.parent.keyField] = closest(target, "." + CONTENT_CELLS_CLASS).getAttribute("data-key");
      if (this.parent.sortSettings.sortBy === "Index") {
        newData[this.parent.sortSettings.field] = 1;
        if (closest(target, "." + CONTENT_CELLS_CLASS).querySelector("." + CARD_CLASS)) {
          var card = this.parent.sortSettings.direction === "Ascending" ? target.nextElementSibling.classList.contains(BORDER_CLASS) ? target.nextElementSibling.nextElementSibling.lastElementChild : target.nextElementSibling.lastElementChild : target.nextElementSibling.classList.contains(BORDER_CLASS) ? target.nextElementSibling.nextElementSibling.firstElementChild : target.nextElementSibling.firstElementChild;
          var data = this.parent.getCardDetails(card);
          newData[this.parent.sortSettings.field] = data[this.parent.sortSettings.field] + 1;
        }
      }
      if (this.parent.kanbanData.length !== 0 && this.parent.swimlaneSettings.keyField && closest(target, "." + CONTENT_ROW_CLASS).previousElementSibling) {
        newData[this.parent.swimlaneSettings.keyField] = closest(target, "." + CONTENT_ROW_CLASS).previousElementSibling.getAttribute("data-key");
      }
      this.parent.openDialog("Add", newData);
    };
    Action2.prototype.doubleClickHandler = function(e) {
      var target = closest(e.target, "." + CARD_CLASS);
      if (target) {
        this.cardDoubleClick(e);
      }
    };
    Action2.prototype.cardClick = function(e, selectedCard) {
      var _this = this;
      var target = closest(selectedCard ? selectedCard : e.target, "." + CARD_CLASS);
      var cardClickObj = this.parent.getCardDetails(target);
      if (cardClickObj) {
        this.parent.activeCardData = { data: cardClickObj, element: target };
        var args = { data: cardClickObj, element: target, cancel: false, event: e };
        this.parent.trigger(cardClick, args, function(clickArgs) {
          if (!clickArgs.cancel) {
            if (target.classList.contains(CARD_SELECTION_CLASS) && e.type === "click") {
              removeClass([target], CARD_SELECTION_CLASS);
              if (_this.parent.enableVirtualization) {
                _this.parent.virtualLayoutModule.disableAttributeSelection(target);
              } else {
                _this.parent.layoutModule.disableAttributeSelection(target);
              }
            } else {
              var isCtrlKey = e.ctrlKey;
              if (_this.parent.isAdaptive && _this.parent.touchModule) {
                isCtrlKey = _this.parent.touchModule.mobilePopup && _this.parent.touchModule.tabHold || isCtrlKey;
              }
              _this.cardSelection(target, isCtrlKey, e.shiftKey);
            }
            if (_this.parent.isAdaptive && _this.parent.touchModule) {
              _this.parent.touchModule.updatePopupContent();
            }
            var cell = closest(target, "." + CONTENT_CELLS_CLASS);
            if (_this.parent.allowKeyboard) {
              var element2 = [].slice.call(cell.querySelectorAll("." + CARD_CLASS));
              element2.forEach(function(e2) {
                e2.setAttribute("tabindex", "0");
              });
              _this.parent.keyboardModule.addRemoveTabIndex("Remove");
            }
          }
        });
      }
    };
    Action2.prototype.cardDoubleClick = function(e) {
      var _this = this;
      var target = closest(e.target, "." + CARD_CLASS);
      var cardDoubleClickObj = this.parent.getCardDetails(target);
      this.parent.activeCardData = { data: cardDoubleClickObj, element: target };
      this.cardSelection(target, false, false);
      var args = { data: cardDoubleClickObj, element: target, cancel: false, event: e };
      this.parent.trigger(cardDoubleClick, args, function(doubleClickArgs) {
        if (!doubleClickArgs.cancel) {
          _this.parent.dialogModule.openDialog("Edit", args.data);
        }
      });
    };
    Action2.prototype.rowExpandCollapse = function(e, isFrozenElem) {
      var _this = this;
      var headerTarget = e instanceof HTMLElement ? e : e.target;
      var currentSwimlaneHeader = !isNullOrUndefined(isFrozenElem) ? isFrozenElem : headerTarget;
      var args = { cancel: false, target: headerTarget, requestType: "rowExpandCollapse" };
      this.parent.trigger(actionBegin, args, function(actionArgs) {
        if (!actionArgs.cancel) {
          var target = closest(currentSwimlaneHeader, "." + SWIMLANE_ROW_CLASS);
          var key = target.getAttribute("data-key");
          var tgtRow = _this.parent.element.querySelector("." + CONTENT_ROW_CLASS + (":nth-child(" + (target.rowIndex + 2) + ")"));
          var targetIcon = target.querySelector("." + SWIMLANE_ROW_EXPAND_CLASS + ",." + SWIMLANE_ROW_COLLAPSE_CLASS);
          var isCollapsed = target.classList.contains(COLLAPSED_CLASS) ? true : false;
          var tabIndex_1;
          if (isCollapsed) {
            removeClass([tgtRow, target], COLLAPSED_CLASS);
            classList(targetIcon, [SWIMLANE_ROW_EXPAND_CLASS], [SWIMLANE_ROW_COLLAPSE_CLASS]);
            _this.parent.swimlaneToggleArray.splice(_this.parent.swimlaneToggleArray.indexOf(key), 1);
            tabIndex_1 = "0";
          } else {
            addClass([tgtRow, target], COLLAPSED_CLASS);
            classList(targetIcon, [SWIMLANE_ROW_COLLAPSE_CLASS], [SWIMLANE_ROW_EXPAND_CLASS]);
            _this.parent.swimlaneToggleArray.push(key);
            tabIndex_1 = "-1";
          }
          targetIcon.setAttribute("aria-label", isCollapsed ? key + " Expand" : key + " Collapse");
          target.setAttribute("aria-expanded", isCollapsed.toString());
          tgtRow.setAttribute("aria-expanded", isCollapsed.toString());
          var rows = [].slice.call(tgtRow.querySelectorAll("." + CONTENT_CELLS_CLASS));
          rows.forEach(function(cell) {
            cell.setAttribute("tabindex", tabIndex_1);
          });
          _this.parent.notify(contentReady, {});
          _this.parent.trigger(actionComplete, { target: headerTarget, requestType: "rowExpandCollapse" });
        }
      });
    };
    Action2.prototype.columnExpandCollapse = function(e) {
      var _this = this;
      var headerTarget = e instanceof HTMLElement ? e : e.target;
      var args = { cancel: false, target: headerTarget, requestType: "columnExpandCollapse" };
      this.parent.trigger(actionBegin, args, function(actionArgs) {
        if (!actionArgs.cancel) {
          var target = closest(headerTarget, "." + HEADER_CELLS_CLASS);
          var colIndex = target.cellIndex;
          _this.columnToggle(target);
          var collapsed = _this.parent.element.querySelectorAll("." + HEADER_CELLS_CLASS + "." + COLLAPSED_CLASS).length;
          if (collapsed === _this.parent.columns.length - _this.hideColumnKeys.length) {
            var index = colIndex + 1 === collapsed ? 1 : colIndex + 2;
            var headerSelector = "." + HEADER_CELLS_CLASS + ":not(." + STACKED_HEADER_CELL_CLASS + "):nth-child(" + index + ")";
            var nextCol = _this.parent.element.querySelector(headerSelector);
            addClass([nextCol], COLLAPSED_CLASS);
            _this.columnToggle(nextCol);
          }
          _this.parent.notify(contentReady, {});
          _this.parent.trigger(actionComplete, { target: headerTarget, requestType: "columnExpandCollapse" });
        }
      });
    };
    Action2.prototype.columnToggle = function(target) {
      var _this = this;
      var colIndex = target.cellIndex;
      var elementSelector = "." + CONTENT_ROW_CLASS + ":not(." + SWIMLANE_ROW_CLASS + ")";
      var targetRow = [].slice.call(this.parent.element.querySelectorAll(elementSelector));
      var colSelector = "." + TABLE_CLASS + " col:nth-child(" + (colIndex + 1) + ")";
      var targetIcon = target.querySelector("." + COLUMN_EXPAND_CLASS + ",." + COLUMN_COLLAPSE_CLASS);
      var colGroup = [].slice.call(this.parent.element.querySelectorAll(colSelector));
      if (target.classList.contains(COLLAPSED_CLASS)) {
        removeClass(colGroup, COLLAPSED_CLASS);
        if (this.parent.isAdaptive) {
          if (this.parent.enableVirtualization) {
            colGroup.forEach(function(col) {
              return col.style.width = formatUnit(_this.parent.virtualLayoutModule.getWidth());
            });
          } else {
            colGroup.forEach(function(col) {
              return col.style.width = formatUnit(_this.parent.layoutModule.getWidth());
            });
          }
        }
        classList(targetIcon, [COLUMN_EXPAND_CLASS], [COLUMN_COLLAPSE_CLASS]);
        var _loop_1 = function(row2) {
          var targetCol = row2.querySelector("." + CONTENT_CELLS_CLASS + ":nth-child(" + (colIndex + 1) + ")");
          removeClass([targetCol, target], COLLAPSED_CLASS);
          remove(targetCol.querySelector("." + COLLAPSE_HEADER_TEXT_CLASS));
          target.setAttribute("aria-expanded", "true");
          targetCol.setAttribute("aria-expanded", "true");
          var collapsedCell = [].slice.call(targetCol.parentElement.querySelectorAll("." + COLLAPSED_CLASS));
          collapsedCell.forEach(function(cell) {
            var collapasedText = cell.querySelector("." + COLLAPSE_HEADER_TEXT_CLASS);
            collapasedText.style.height = "auto";
            if (collapasedText && targetCol.getBoundingClientRect().height < collapasedText.getBoundingClientRect().height + 10) {
              collapasedText.style.height = targetCol.getBoundingClientRect().height - 4 + "px";
            }
          });
        };
        for (var _i = 0, targetRow_1 = targetRow; _i < targetRow_1.length; _i++) {
          var row = targetRow_1[_i];
          _loop_1(row);
        }
        this.columnToggleArray.splice(this.columnToggleArray.indexOf(target.getAttribute("data-key")), 1);
        this.parent.columns[colIndex].setProperties({ isExpanded: true }, true);
        target.querySelector(".e-header-icon").setAttribute("aria-label", target.getAttribute("data-key") + " Expand");
      } else {
        addClass(colGroup, COLLAPSED_CLASS);
        if (this.parent.isAdaptive) {
          colGroup.forEach(function(col) {
            return col.style.width = formatUnit(toggleWidth);
          });
        }
        classList(targetIcon, [COLUMN_COLLAPSE_CLASS], [COLUMN_EXPAND_CLASS]);
        var key = target.getAttribute("data-key");
        var _loop_2 = function(row2) {
          var targetCol = row2.querySelector("." + CONTENT_CELLS_CLASS + '[data-key="' + key + '"]');
          var index = targetCol.cellIndex;
          var text = void 0;
          if (!this_1.parent.enableVirtualization) {
            text = (this_1.parent.columns[index].showItemCount ? "[" + targetCol.querySelectorAll("." + CARD_CLASS).length + "] " : "") + this_1.parent.columns[index].headerText;
          } else {
            var value = this_1.parent.dataModule.isRemote() ? this_1.parent.columnDataCount[this_1.parent.columns[index].keyField] : this_1.parent.virtualLayoutModule.columnData[this_1.parent.columns[index].keyField].length;
            text = (this_1.parent.columns[index].showItemCount ? "[" + value + "] " : "") + this_1.parent.columns[index].headerText;
          }
          targetCol.appendChild(createElement("div", { className: COLLAPSE_HEADER_TEXT_CLASS, innerHTML: text }));
          addClass([targetCol, target], COLLAPSED_CLASS);
          target.setAttribute("aria-expanded", "false");
          targetCol.setAttribute("aria-expanded", "false");
          var collapsedCell = [].slice.call(targetCol.parentElement.querySelectorAll("." + COLLAPSED_CLASS));
          collapsedCell.forEach(function(cell) {
            var collapasedText = cell.querySelector("." + COLLAPSE_HEADER_TEXT_CLASS);
            if (collapasedText && targetCol.getBoundingClientRect().height < collapasedText.getBoundingClientRect().height + 10) {
              collapasedText.style.height = targetCol.getBoundingClientRect().height - 4 + "px";
            }
          });
        };
        var this_1 = this;
        for (var _a = 0, targetRow_2 = targetRow; _a < targetRow_2.length; _a++) {
          var row = targetRow_2[_a];
          _loop_2(row);
        }
        this.columnToggleArray.push(target.getAttribute("data-key"));
        this.parent.columns[colIndex].setProperties({ isExpanded: false }, true);
        target.querySelector(".e-header-icon").setAttribute("aria-label", key + " Collapse");
      }
    };
    Action2.prototype.cardSelection = function(target, isCtrl, isShift) {
      var _this = this;
      if (!target) {
        return;
      }
      var cards = this.parent.getSelectedCards();
      if (this.parent.cardSettings.selectionType !== "None") {
        var contentRow = closest(target, "." + CONTENT_ROW_CLASS);
        var index = !isNullOrUndefined(this.lastSelectionRow) ? this.lastSelectionRow.rowIndex : contentRow.rowIndex;
        if (index !== contentRow.rowIndex && (isCtrl || isShift) && this.parent.cardSettings.selectionType === "Multiple") {
          return;
        }
        if (cards.length !== 0 && (!isCtrl || this.parent.cardSettings.selectionType === "Single")) {
          removeClass(cards, CARD_SELECTION_CLASS);
          if (this.parent.enableVirtualization) {
            this.parent.virtualLayoutModule.disableAttributeSelection(cards);
          } else {
            this.parent.layoutModule.disableAttributeSelection(cards);
          }
          cards.forEach(function(el) {
            _this.selectionArray.splice(_this.selectionArray.indexOf(el.getAttribute("data-id")), 1);
            _this.selectedCardsElement.splice(_this.selectedCardsElement.indexOf(el), 1);
            _this.selectedCardsData.splice(_this.selectedCardsData.indexOf(_this.parent.getCardDetails(el), 1));
          });
        }
        if (cards.length > 0 && isShift && this.parent.cardSettings.selectionType === "Multiple") {
          var curCards_1 = [];
          var start = void 0;
          var end = void 0;
          var i = void 0;
          var allCards = [].slice.call(contentRow.querySelectorAll("." + CARD_CLASS));
          allCards.forEach(function(el) {
            return curCards_1.push(el.getAttribute("data-id"));
          });
          var curId = target.getAttribute("data-id");
          var lastId = this.lastCard.getAttribute("data-id");
          var curIndex = end = curCards_1.indexOf(curId);
          var lastIndex = start = curCards_1.indexOf(lastId);
          var select2 = curIndex > lastIndex ? "next" : "prev";
          if (select2 === "prev") {
            start = curIndex;
            end = lastIndex;
          }
          for (i = start; i <= end; i++) {
            var card = allCards[i];
            addClass([card], CARD_SELECTION_CLASS);
            card.setAttribute("aria-selected", "true");
            card.setAttribute("tabindex", "0");
            this.selectionArray.push(card.getAttribute("data-id"));
            this.selectedCardsElement.push(card);
            this.selectedCardsData.push(this.parent.getCardDetails(card));
            this.lastCardSelection = card;
            if (select2 === "prev") {
              this.lastCardSelection = allCards[start];
            }
          }
        } else {
          addClass([target], CARD_SELECTION_CLASS);
          target.setAttribute("aria-selected", "true");
          target.setAttribute("tabindex", "0");
          this.selectionArray.push(target.getAttribute("data-id"));
          this.selectedCardsElement.push(target);
          this.selectedCardsData.push(this.parent.getCardDetails(target));
          this.lastCard = this.lastCardSelection = target;
          this.lastSelectionRow = closest(target, "." + CONTENT_ROW_CLASS);
          if (this.lastSelectionRow.previousElementSibling) {
            var elementSelector = "." + SWIMLANE_ROW_EXPAND_CLASS + ",." + SWIMLANE_ROW_COLLAPSE_CLASS;
            var parentEle = this.lastSelectionRow.previousElementSibling.querySelector(elementSelector);
            if (parentEle && parentEle.classList.contains(SWIMLANE_ROW_COLLAPSE_CLASS)) {
              this.rowExpandCollapse(parentEle);
            }
          }
        }
      }
    };
    Action2.prototype.addColumn = function(columnOptions, index) {
      var addColumn = createInstance(Columns, [this.parent, "columns", columnOptions, true]);
      this.parent.columns.splice(index, 0, addColumn);
      this.parent.notify(dataReady, { processedData: this.parent.kanbanData });
    };
    Action2.prototype.deleteColumn = function(index) {
      var listKey = this.parent.element.querySelectorAll("." + HEADER_CELLS_CLASS).item(index);
      if (listKey && listKey.classList.contains(HEADER_ROW_TOGGLE_CLASS)) {
        this.columnToggleArray.splice(this.columnToggleArray.indexOf(listKey.getAttribute("data-key"), 0));
      }
      this.parent.columns.splice(index, 1);
      if (this.parent.columns.length === 0) {
        detach(this.parent.element.querySelector("." + HEADER_CLASS));
        detach(this.parent.element.querySelector("." + CONTENT_CLASS));
      } else {
        this.parent.notify(dataReady, { processedData: this.parent.kanbanData });
      }
    };
    Action2.prototype.showColumn = function(key) {
      var index = this.hideColumnKeys.indexOf(key.toString());
      if (index !== -1) {
        this.hideColumnKeys.splice(index, 1);
        this.parent.notify(dataReady, { processedData: this.parent.kanbanData });
      }
    };
    Action2.prototype.hideColumn = function(key) {
      this.hideColumnKeys.push(key.toString());
      this.parent.notify(dataReady, { processedData: this.parent.kanbanData });
    };
    Action2.prototype.SingleCardSelection = function(data) {
      if (this.parent.cardSettings.selectionType !== "None" && data[this.parent.cardSettings.headerField]) {
        var card = this.parent.element.querySelector('.e-card[data-id="' + // eslint-disable-next-line no-useless-escape
        data[this.parent.cardSettings.headerField].toString() + '"]');
        if (card) {
          addClass([card], CARD_SELECTION_CLASS);
          card.setAttribute("aria-selected", "true");
          card.setAttribute("tabindex", "0");
        }
      }
    };
    return Action2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/actions/crud.js
var Crud = (
  /** @class */
  function() {
    function Crud2(parent) {
      this.parent = parent;
    }
    Crud2.prototype.addCard = function(cardData, index) {
      var _this = this;
      var args = {
        cancel: false,
        requestType: "cardCreate",
        addedRecords: cardData instanceof Array ? cardData : [cardData],
        changedRecords: [],
        deletedRecords: []
      };
      this.parent.trigger(actionBegin, args, function(addArgs) {
        if (!addArgs.cancel) {
          var modifiedData_1 = [];
          if (_this.parent.sortSettings.field && _this.parent.sortSettings.sortBy === "Index") {
            if (cardData instanceof Array) {
              modifiedData_1 = cardData;
            } else {
              modifiedData_1.push(cardData);
            }
            modifiedData_1.forEach(function(data, index2) {
              if (!data[_this.parent.sortSettings.field]) {
                var columnData = _this.parent.getColumnData(data[_this.parent.keyField]);
                if (_this.parent.sortSettings.direction === "Ascending" && columnData.length > 0) {
                  data[_this.parent.sortSettings.field] = columnData[columnData.length - 1][_this.parent.sortSettings.field] + index2 + 1;
                } else if (_this.parent.sortSettings.direction === "Descending" && columnData.length > 0) {
                  data[_this.parent.sortSettings.field] = columnData[0][_this.parent.sortSettings.field] + index2 + 1;
                }
                if (columnData.length === 0) {
                  data[_this.parent.sortSettings.field] = 1;
                }
              }
            });
            if (!(cardData instanceof Array)) {
              if (!index && _this.parent.sortSettings.direction === "Descending") {
                _this.parent.getColumnData(modifiedData_1[0][_this.parent.keyField]).filter(function(obj, count) {
                  if (obj[_this.parent.sortSettings.field] === modifiedData_1[0][_this.parent.sortSettings.field]) {
                    index = count + 1;
                  }
                });
              }
            }
            if (index !== 0 && !index && _this.parent.sortSettings.direction === "Descending") {
              index = 0;
            }
            modifiedData_1 = _this.priorityOrder(modifiedData_1, index);
          }
          var addedRecords = cardData instanceof Array ? cardData : [cardData];
          var changedRecords = _this.parent.sortSettings.field && _this.parent.sortSettings.sortBy === "Index" ? modifiedData_1 : [];
          var editParms = { addedRecords, changedRecords, deletedRecords: [] };
          var type = cardData instanceof Array || modifiedData_1.length > 0 ? "batch" : "insert";
          _this.parent.dataModule.updateDataManager(type, editParms, "cardCreated", cardData, index);
        }
      });
    };
    Crud2.prototype.getIndexFromData = function(data) {
      var cardElement = this.parent.element.querySelector("." + CARD_CLASS + '[data-id="' + data[this.parent.cardSettings.headerField] + '"]');
      var element2 = closest(cardElement, "." + CONTENT_CELLS_CLASS);
      var index = [].slice.call(element2.querySelectorAll("." + CARD_CLASS)).indexOf(cardElement);
      return index;
    };
    Crud2.prototype.updateCard = function(cardData, index, isDropped, dataDropIndexKeyFieldValue, draggedKey, droppedKey, isMultipleDrag) {
      var _this = this;
      var args = {
        requestType: "cardChange",
        cancel: false,
        addedRecords: [],
        changedRecords: cardData instanceof Array ? cardData : [cardData],
        deletedRecords: []
      };
      index = isNullOrUndefined(index) ? this.getIndexFromData(args.changedRecords[0]) : index;
      this.parent.trigger(actionBegin, args, function(updateArgs) {
        if (!updateArgs.cancel) {
          if (_this.parent.sortSettings.field && _this.parent.sortSettings.sortBy === "Index") {
            var modifiedData = [];
            if (cardData instanceof Array) {
              modifiedData = cardData;
            } else {
              modifiedData.push(cardData);
            }
            cardData = _this.priorityOrder(modifiedData, index);
          }
          var editParms = {
            addedRecords: [],
            changedRecords: cardData instanceof Array ? cardData : [cardData],
            deletedRecords: []
          };
          var type = cardData instanceof Array ? "batch" : "update";
          _this.parent.dataModule.updateDataManager(type, editParms, "cardChanged", cardData, index, isDropped, dataDropIndexKeyFieldValue, draggedKey, droppedKey, isMultipleDrag);
        }
      });
    };
    Crud2.prototype.deleteCard = function(cardData) {
      var _this = this;
      var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };
      if (typeof cardData === "string" || typeof cardData === "number") {
        editParms.deletedRecords = this.parent.kanbanData.filter(function(data) {
          return data[_this.parent.cardSettings.headerField] === cardData;
        });
      } else {
        editParms.deletedRecords = cardData instanceof Array ? cardData : [cardData];
      }
      var args = {
        requestType: "cardRemove",
        cancel: false,
        addedRecords: [],
        changedRecords: [],
        deletedRecords: editParms.deletedRecords
      };
      this.parent.trigger(actionBegin, args, function(deleteArgs) {
        if (!deleteArgs.cancel) {
          var type = editParms.deletedRecords.length > 1 ? "batch" : "delete";
          var cardData_1 = editParms.deletedRecords;
          _this.parent.dataModule.updateDataManager(type, editParms, "cardRemoved", cardData_1[0]);
        }
      });
    };
    Crud2.prototype.priorityOrder = function(cardData, cardIndex) {
      var _this = this;
      var cardsId = cardData.map(function(obj) {
        return obj[_this.parent.cardSettings.headerField];
      });
      var num = cardData[cardData.length - 1][this.parent.sortSettings.field];
      var allModifiedKeys = cardData.map(function(obj) {
        return obj[_this.parent.keyField];
      });
      var modifiedKey = allModifiedKeys.filter(function(key, index) {
        return allModifiedKeys.indexOf(key) === index;
      }).sort();
      var columnAllDatas;
      var finalData = [];
      var originalIndex = [];
      var _loop_1 = function(columnKey2) {
        var keyData = cardData.filter(function(cardObj) {
          return cardObj[_this.parent.keyField] === columnKey2;
        });
        columnAllDatas = this_1.parent.enableVirtualization ? this_1.parent.virtualLayoutModule.getColumnData(columnKey2) : this_1.parent.layoutModule.getColumnData(columnKey2);
        for (var _i2 = 0, _a = keyData; _i2 < _a.length; _i2++) {
          var data = _a[_i2];
          if (this_1.parent.swimlaneSettings.keyField) {
            var swimlaneDatas = this_1.parent.getSwimlaneData(data[this_1.parent.swimlaneSettings.keyField]);
            columnAllDatas = this_1.parent.getColumnData(columnKey2, swimlaneDatas);
          }
        }
        keyData.forEach(function(key) {
          return finalData.push(key);
        });
        if (!isNullOrUndefined(cardIndex)) {
          var _loop_2 = function(j2) {
            columnAllDatas.filter(function(data2, index) {
              if (data2[_this.parent.cardSettings.headerField] === cardsId[j2] && index <= cardIndex) {
                originalIndex.push(index);
              }
            });
          };
          for (var j = 0; j < cardsId.length; j++) {
            _loop_2(j);
          }
          if (originalIndex.length > 0) {
            cardIndex = cardIndex + originalIndex.length;
          }
          if (this_1.parent.sortSettings.direction === "Ascending") {
            for (var i = cardIndex; i < columnAllDatas.length; i++) {
              if (cardsId.indexOf(columnAllDatas[i][this_1.parent.cardSettings.headerField]) === -1) {
                columnAllDatas[i][this_1.parent.sortSettings.field] = ++num;
                finalData.push(columnAllDatas[i]);
              }
            }
          } else {
            for (var i = cardIndex - 1; i >= 0; i--) {
              if (cardsId.indexOf(columnAllDatas[i][this_1.parent.cardSettings.headerField]) === -1) {
                columnAllDatas[i][this_1.parent.sortSettings.field] = ++num;
                finalData.push(columnAllDatas[i]);
              }
            }
          }
        }
      };
      var this_1 = this;
      for (var _i = 0, modifiedKey_1 = modifiedKey; _i < modifiedKey_1.length; _i++) {
        var columnKey = modifiedKey_1[_i];
        _loop_1(columnKey);
      }
      return finalData;
    };
    return Crud2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/actions/drag.js
var DragAndDrop = (
  /** @class */
  function() {
    function DragAndDrop2(parent) {
      this.insertClone = "afterend";
      this.parent = parent;
      this.dragObj = {
        element: null,
        cloneElement: null,
        instance: null,
        targetClone: null,
        draggedClone: null,
        targetCloneMulti: null,
        selectedCards: [],
        pageX: 0,
        pageY: 0,
        navigationInterval: null,
        cardDetails: [],
        modifiedData: []
      };
      this.dragEdges = { left: false, right: false, top: false, bottom: false };
      this.isDragging = false;
      this.isExternalDrop = false;
    }
    DragAndDrop2.prototype.wireDragEvents = function(element2) {
      var dragContainment;
      if (!this.parent.element != null && this.parent.externalDropId.length === 0) {
        dragContainment = this.parent.element.querySelector("." + CONTENT_CLASS);
      }
      this.dragObj.instance = new Draggable(element2, {
        clone: true,
        enableTapHold: this.parent.isAdaptive,
        enableTailMode: true,
        cursorAt: { top: -10, left: -10 },
        dragArea: dragContainment,
        dragStart: this.dragStart.bind(this),
        drag: this.drag.bind(this),
        dragStop: this.dragStop.bind(this),
        enableAutoScroll: false,
        helper: this.dragHelper.bind(this)
      });
    };
    DragAndDrop2.prototype.dragHelper = function(e) {
      if (this.parent.isAdaptive && this.parent.touchModule.mobilePopup && this.parent.touchModule.mobilePopup.element.classList.contains(POPUP_OPEN_CLASS)) {
        this.parent.touchModule.mobilePopup.hide();
      }
      this.dragObj.element = closest(e.sender.target, "." + CARD_CLASS);
      if (isNullOrUndefined(this.dragObj.element)) {
        return null;
      }
      this.dragObj.element.style.width = formatUnit(this.dragObj.element.offsetWidth);
      var cloneWrapper = createElement("div", { innerHTML: this.dragObj.element.outerHTML });
      this.dragObj.cloneElement = cloneWrapper.children.item(0);
      addClass([this.dragObj.cloneElement], CLONED_CARD_CLASS);
      this.dragObj.element.parentElement.appendChild(this.dragObj.cloneElement);
      this.dragObj.targetCloneMulti = createElement("div", { className: TARGET_MULTI_CLONE_CLASS });
      this.dragObj.targetClone = createElement("div", {
        className: DROPPED_CLONE_CLASS,
        styles: "width:100%;height:" + formatUnit(this.dragObj.element.offsetHeight)
      });
      this.dragObj.modifiedData = [];
      return this.dragObj.cloneElement;
    };
    DragAndDrop2.prototype.dragStart = function(e) {
      var _this = this;
      this.dragObj.selectedCards = this.dragObj.element;
      this.borderElm = this.parent.element.querySelectorAll("." + BORDER_CLASS);
      if (this.dragObj.element.classList.contains(CARD_SELECTION_CLASS)) {
        var className = "." + CARD_CLASS + "." + CARD_SELECTION_CLASS + ":not(." + CLONED_CARD_CLASS + ")";
        var closestEle = closest(this.dragObj.element, "." + CONTENT_ROW_CLASS);
        this.dragObj.selectedCards = [].slice.call(closestEle.querySelectorAll(className));
        this.dragObj.selectedCards.forEach(function(element2) {
          _this.dragObj.cardDetails.push(_this.parent.getCardDetails(element2));
        });
      } else {
        this.dragObj.cardDetails = [this.parent.getCardDetails(this.dragObj.element)];
      }
      if (!isNullOrUndefined(this.dragObj.selectedCards) && !isNullOrUndefined(this.dragObj.selectedCards.length) && this.dragObj.selectedCards.length >= 1) {
        this.dragObj.selectedCards[0].closest(".e-content-cells").classList.add("e-dragged-column");
      } else if (!isNullOrUndefined(this.dragObj.selectedCards) && !isNullOrUndefined(this.dragObj.selectedCards.closest(".e-content-cells"))) {
        this.dragObj.selectedCards.closest(".e-content-cells").classList.add("e-dragged-column");
      }
      var dragArgs = { cancel: false, data: this.dragObj.cardDetails, event: e, element: this.dragObj.selectedCards };
      this.parent.trigger(dragStart, dragArgs, function(dragEventArgs) {
        if (dragEventArgs.cancel) {
          _this.removeElement(_this.dragObj.cloneElement);
          _this.dragObj.instance.intDestroy(e);
          _this.dragObj.element = null;
          _this.dragObj.targetClone = null;
          _this.dragObj.draggedClone = null;
          _this.dragObj.cloneElement = null;
          _this.dragObj.targetCloneMulti = null;
          return;
        }
        if (_this.dragObj.element.classList.contains(CARD_SELECTION_CLASS)) {
          _this.dragObj.selectedCards.forEach(function(element2) {
            _this.draggedClone(element2);
          });
          if (_this.dragObj.selectedCards.length > 1) {
            _this.dragObj.cloneElement.innerHTML = "";
            var drag2 = createElement("div", {
              className: "e-multi-card-text",
              innerHTML: _this.dragObj.selectedCards.length + " Cards"
            });
            _this.dragObj.cloneElement.appendChild(drag2);
            classList(_this.dragObj.cloneElement, ["e-multi-card-clone"], [CARD_SELECTION_CLASS]);
            if (_this.parent.enableVirtualization) {
              _this.parent.virtualLayoutModule.disableAttributeSelection(_this.dragObj.cloneElement);
            } else {
              _this.parent.layoutModule.disableAttributeSelection(_this.dragObj.cloneElement);
            }
            _this.dragObj.cloneElement.style.width = "90px";
          }
        } else {
          _this.draggedClone(_this.dragObj.element);
        }
        EventHandler.add(document.body, "keydown", _this.keydownHandler, _this);
        _this.parent.notify(contentReady, {});
      });
    };
    DragAndDrop2.prototype.draggedClone = function(element2) {
      this.dragObj.draggedClone = createElement("div", {
        className: DRAGGED_CLONE_CLASS,
        styles: "width:" + formatUnit(element2.offsetWidth - 1) + ";height:" + formatUnit(element2.offsetHeight)
      });
      element2.insertAdjacentElement("afterend", this.dragObj.draggedClone);
      addClass([element2], DRAGGED_CARD_CLASS);
    };
    DragAndDrop2.prototype.drag = function(e) {
      var _this = this;
      if (!e.target) {
        return;
      }
      var cardElement = closest(e.target, "." + ROOT_CLASS + " ." + CARD_CLASS);
      if (!isNullOrUndefined(cardElement) && this.parent.enableVirtualization && !isNullOrUndefined(e.target.previousElementSibling) && !isNullOrUndefined(e.target.previousElementSibling.querySelector(".e-target-dropped-clone"))) {
        cardElement = e.target.previousElementSibling.querySelector(".e-target-dropped-clone").nextElementSibling;
      }
      var target = cardElement || e.target;
      var selector = "." + CONTENT_ROW_CLASS + ":not(." + SWIMLANE_ROW_CLASS + ") ." + CONTENT_CELLS_CLASS + "." + DROPPABLE_CLASS;
      var contentCell = closest(target, selector);
      var cellDimension;
      var borderElem;
      var dropElement;
      if (target.nextElementSibling && target.nextElementSibling.lastChild) {
        dropElement = target.nextElementSibling.lastChild.previousElementSibling;
      }
      this.externalDrop(target);
      this.kanbanObj = this.parent.isExternalKanbanDrop ? this.parent.externalDropObj : this.parent;
      this.calculateArgs(e);
      if (contentCell && document.body.style.cursor !== "not-allowed") {
        var targetKey = this.getColumnKey(contentCell);
        var keys = targetKey.split(",");
        this.multiCloneRemove();
        var isDrag = targetKey === this.getColumnKey(closest(this.dragObj.draggedClone, "." + CONTENT_CELLS_CLASS)) ? true : false;
        if (keys.length === 1 || isDrag) {
          if (target.classList.contains(DRAGGED_CLONE_CLASS)) {
            this.removeElement(this.dragObj.targetClone, this.kanbanObj);
          }
          if (target.classList.contains(CARD_CLASS) || this.insertClone === "beforebegin") {
            var element2 = target.classList.contains(DRAGGED_CLONE_CLASS) ? target.previousElementSibling.classList.contains(DRAGGED_CARD_CLASS) ? null : target.previousElementSibling : target.previousElementSibling;
            this.insertClone = "afterend";
            if (isNullOrUndefined(element2)) {
              var pageY = target.classList.contains(DRAGGED_CLONE_CLASS) ? this.dragObj.pageY / 2 : this.dragObj.pageY;
              var height = target.classList.contains(DRAGGED_CLONE_CLASS) ? target.offsetHeight : target.offsetHeight / 2;
              if (pageY - (this.kanbanObj.element.getBoundingClientRect().top + target.offsetTop) < height) {
                this.insertClone = "beforebegin";
              }
            }
            if (target.classList.contains(CARD_CLASS)) {
              if (this.parent.enableVirtualization) {
                this.insertClone = this.isTargetElementVisible(target) ? this.insertClone : "beforebegin";
              }
              target.insertAdjacentElement(this.insertClone, this.dragObj.targetClone);
            }
          } else if (target.classList.contains(CONTENT_CELLS_CLASS) && !closest(target, "." + SWIMLANE_ROW_CLASS)) {
            if (target.querySelectorAll("." + DRAGGED_CARD_CLASS).length !== 0 && target.querySelectorAll("." + CARD_CLASS + ":not(.e-kanban-dragged-card):not(.e-cloned-card)").length === 0) {
              return;
            } else {
              target.querySelector("." + CARD_WRAPPER_CLASS).appendChild(this.dragObj.targetClone);
            }
          } else if (target.classList.contains(CARD_WRAPPER_CLASS) && !closest(target, "." + SWIMLANE_ROW_CLASS) && contentCell.querySelectorAll("." + CARD_CLASS).length === 0) {
            target.appendChild(this.dragObj.targetClone);
          } else if (target.classList.contains(BORDER_CLASS) && !closest(target, "." + SWIMLANE_ROW_CLASS) && (target.nextElementSibling && target.nextElementSibling.classList.contains(CARD_WRAPPER_CLASS)) && this.dragObj.targetClone && (!dropElement || !dropElement.classList.contains(DROPPED_CLONE_CLASS))) {
            if (!this.parent.enableVirtualization && !this.isTargetElementVisible(target.nextElementSibling)) {
              target.nextElementSibling.appendChild(this.dragObj.targetClone);
            }
          }
        } else if (keys.length > 1 && (contentCell.classList.contains(DROPPING_CLASS) || contentCell.firstChild && contentCell.firstChild.classList.contains(DROPPING_CLASS))) {
          this.multiCloneCreate(keys, contentCell);
        }
        this.kanbanObj.notify(contentReady, {});
      }
      if (this.kanbanObj.element.querySelectorAll("." + DROPPING_CLASS).length === 0) {
        this.cellDropping();
      }
      var isCollapsed = false;
      if (contentCell) {
        isCollapsed = contentCell.classList.contains(COLLAPSED_CLASS) && contentCell.classList.contains(DROPPING_CLASS);
        if (contentCell.getAttribute("aria-expanded") === "true" || !contentCell.parentElement.hasAttribute("aria-expanded")) {
          cellDimension = contentCell.getBoundingClientRect();
          this.updateDimension(cellDimension);
        }
        borderElem = contentCell.querySelector("." + BORDER_CLASS);
      }
      if (target && target.tagName === "TABLE" && !isNullOrUndefined(target.querySelector("." + CONTENT_ROW_CLASS))) {
        cellDimension = target.querySelector("." + CONTENT_ROW_CLASS).getBoundingClientRect();
        this.updateDimension(cellDimension, target);
      }
      if (isCollapsed) {
        this.toggleVisible(target);
        addClass([contentCell], TOGGLE_VISIBLE_CLASS);
      }
      var tColumn = [].slice.call(this.kanbanObj.element.querySelectorAll("." + TOGGLE_VISIBLE_CLASS));
      if (tColumn.length > 0 && !target.classList.contains(TOGGLE_VISIBLE_CLASS) && !closest(target, "." + TOGGLE_VISIBLE_CLASS)) {
        this.toggleVisible(target, tColumn.slice(-1)[0]);
        removeClass(tColumn, TOGGLE_VISIBLE_CLASS);
      }
      this.kanbanObj.notify(contentReady, {});
      var multiKeyTarget = closest(target, "." + MULTI_COLUMN_KEY_CLASS);
      if (multiKeyTarget) {
        var columnKeys = [].slice.call(this.kanbanObj.element.querySelectorAll("." + MULTI_COLUMN_KEY_CLASS + ":not(." + DISABLED_CLASS + ")")).filter(function(element3) {
          return _this.getColumnKey(element3) === _this.getColumnKey(multiKeyTarget);
        });
        if (columnKeys.length > 0) {
          addClass(columnKeys, MULTI_ACTIVE_CLASS);
          if (columnKeys[0].previousElementSibling) {
            addClass([columnKeys[0].previousElementSibling], "e-multi-bottom-border");
          }
        }
      }
      document.body.style.cursor = contentCell && contentCell.classList.contains(DROPPING_CLASS) || contentCell && borderElem && borderElem.classList.contains(DROPPING_CLASS) ? "" : "not-allowed";
      if (cardElement && !closest(cardElement, "." + CONTENT_CELLS_CLASS).classList.contains(DROPPING_CLASS) && !(contentCell && borderElem && borderElem.classList.contains(DROPPING_CLASS))) {
        cardElement.style.cursor = "not-allowed";
        document.body.style.cursor = "not-allowed";
      }
      if (this.isExternalDrop && document.body.style.cursor === "not-allowed") {
        document.body.style.cursor = "";
      }
      if (document.body.style.cursor === "not-allowed") {
        this.removeElement(this.dragObj.targetClone, this.kanbanObj);
        this.multiCloneRemove();
      }
      this.updateScrollPosition();
      var dragArgs = { data: this.dragObj.cardDetails, event: e, element: this.dragObj.selectedCards };
      this.kanbanObj.trigger(drag, dragArgs);
      this.parent.isExternalKanbanDrop = false;
      this.isExternalDrop = false;
    };
    DragAndDrop2.prototype.removeElement = function(element2, kanbanObj) {
      kanbanObj = kanbanObj ? kanbanObj : this.parent;
      if (kanbanObj.element.getElementsByClassName(element2.className).length > 0) {
        remove(element2);
      }
    };
    DragAndDrop2.prototype.isTargetElementVisible = function(targetElem) {
      var wrapperElem = closest(targetElem, "." + CARD_WRAPPER_CLASS);
      if (!isNullOrUndefined(wrapperElem)) {
        var wrapperElemBottom = wrapperElem.getBoundingClientRect().bottom;
        var targetElemBottom = targetElem.getBoundingClientRect().bottom;
        if (targetElemBottom > wrapperElemBottom) {
          return false;
        }
        return true;
      }
      return true;
    };
    DragAndDrop2.prototype.externalDrop = function(target) {
      var _this = this;
      this.parent.externalDropId.forEach(function(externalDropId) {
        var targetRootElement = closest(target, externalDropId);
        if (targetRootElement) {
          if (targetRootElement.classList.contains("e-kanban")) {
            _this.parent.externalDropObj = document.querySelector(externalDropId).ej2_instances[0];
            _this.parent.isExternalKanbanDrop = true;
            var className = "." + CONTENT_ROW_CLASS + ":not(." + SWIMLANE_ROW_CLASS + "):not(." + COLLAPSED_CLASS + ") ." + CONTENT_CELLS_CLASS;
            var cells = [].slice.call(_this.parent.externalDropObj.element.querySelectorAll(className));
            addClass(cells, DROPPING_CLASS);
          } else {
            _this.isExternalDrop = true;
          }
        }
      });
    };
    DragAndDrop2.prototype.multiCloneCreate = function(keys, contentCell) {
      var offsetHeight = contentCell.offsetHeight;
      var limitEle = contentCell.querySelector("." + LIMITS_CLASS);
      if (limitEle) {
        offsetHeight -= limitEle.offsetHeight;
      }
      this.dragObj.targetCloneMulti.style.height = formatUnit(offsetHeight);
      if (contentCell.querySelector("." + SHOW_ADD_BUTTON)) {
        addClass([contentCell.querySelector("." + SHOW_ADD_BUTTON)], MULTI_CARD_WRAPPER_CLASS);
      }
      addClass([contentCell.querySelector("." + CARD_WRAPPER_CLASS)], MULTI_CARD_WRAPPER_CLASS);
      contentCell.querySelector("." + CARD_WRAPPER_CLASS).style.height = "auto";
      contentCell.style.borderStyle = "none";
      this.removeElement(this.dragObj.targetClone);
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        var dragCell = closest(this.dragObj.draggedClone, "." + CONTENT_CELLS_CLASS);
        var transition = this.kanbanObj.columns[dragCell.cellIndex].transitionColumns;
        var allowTransition = this.allowedTransition(this.dragObj.element.getAttribute("data-key"), key, transition);
        var name_1 = allowTransition ? "" : " " + DISABLED_CLASS;
        var colKey = createElement("div", {
          className: MULTI_COLUMN_KEY_CLASS + name_1,
          attrs: { "data-key": key.trim() }
        });
        var text = createElement("div", { className: "e-text", innerHTML: key.trim() });
        contentCell.appendChild(this.dragObj.targetCloneMulti).appendChild(colKey).appendChild(text);
        colKey.style.cursor = allowTransition ? "" : "not-allowed";
        colKey.style.lineHeight = colKey.style.height = formatUnit(offsetHeight / keys.length);
        text.style.top = formatUnit(offsetHeight / 2 - text.offsetHeight / 2);
      }
    };
    DragAndDrop2.prototype.allowedTransition = function(currentCardKey, targetCardKey, allowedKey) {
      var allowTransition = true;
      var targetKey = targetCardKey.split(",");
      for (var i = 0; i < targetKey.length; i++) {
        if (currentCardKey === targetKey[i].trim()) {
          return true;
        }
        if (allowedKey) {
          if (allowedKey.length === 1 && allowedKey[0].length === 0) {
            return true;
          }
          for (var j = 0; j < allowedKey.length; j++) {
            if (targetKey[i].trim() === allowedKey[j].trim()) {
              return true;
            } else {
              allowTransition = false;
            }
          }
        }
      }
      return allowTransition;
    };
    DragAndDrop2.prototype.cellDropping = function() {
      var _this = this;
      var dragCell = closest(this.dragObj.draggedClone, "." + CONTENT_CELLS_CLASS);
      var dragRow = closest(this.dragObj.draggedClone, "." + CONTENT_ROW_CLASS);
      if (dragCell && dragCell.classList.contains(DROP_CLASS)) {
        addClass([dragCell], DROPPING_CLASS);
      }
      this.addDropping(dragRow, dragCell);
      if (this.kanbanObj.swimlaneSettings.keyField && this.kanbanObj.swimlaneSettings.allowDragAndDrop) {
        var className = "." + CONTENT_ROW_CLASS + ":not(." + SWIMLANE_ROW_CLASS + "):not(." + COLLAPSED_CLASS + ")";
        var rows = [].slice.call(this.kanbanObj.element.querySelectorAll(className));
        [].slice.call(rows).forEach(function(row) {
          if (dragRow !== row) {
            _this.addDropping(row, dragCell);
          }
        });
      }
    };
    DragAndDrop2.prototype.addDropping = function(dragRow, dragCell) {
      var _this = this;
      if (dragCell && this.borderElm && this.borderElm.length !== 0) {
        if (dragCell.classList.contains(DROPPING_CLASS)) {
          removeClass([dragCell], DROPPING_CLASS);
        }
        var cellDimension = dragCell.getBoundingClientRect();
        this.updateDimension(cellDimension);
      } else if (dragCell && dragRow) {
        [].slice.call(dragRow.children).forEach(function(cell) {
          var transition = _this.kanbanObj.columns[dragCell.cellIndex].transitionColumns;
          if (cell !== dragCell && cell.classList.contains(DROP_CLASS) && _this.allowedTransition(dragCell.getAttribute("data-key"), cell.getAttribute("data-key"), transition)) {
            addClass([cell], DROPPING_CLASS);
          }
        });
      }
    };
    DragAndDrop2.prototype.updateDimension = function(dimensions, target) {
      [].slice.call(this.borderElm).forEach(function(element2) {
        if (element2.parentElement && (element2.parentElement.getAttribute("aria-expanded") === "true" || !element2.parentElement.hasAttribute("aria-expanded"))) {
          addClass([element2], DROPPING_CLASS);
        }
        var hasAddButton = element2.previousElementSibling;
        element2.style.height = parseInt(dimensions.height.toString(), 10) - (hasAddButton && hasAddButton.classList.contains(SHOW_ADD_BUTTON) ? hasAddButton.offsetHeight + hasAddButton.offsetTop : 0) + "px";
        if (!target || target.tagName !== "TABLE") {
          element2.style.width = parseInt(dimensions.width.toString(), 10) + "px";
        }
        element2.style.left = element2.parentElement.getBoundingClientRect().left - closest(element2, ".e-kanban").getBoundingClientRect().left + "px";
      });
    };
    DragAndDrop2.prototype.keydownHandler = function(e) {
      if (e.code === "Escape" && this.dragObj.cloneElement) {
        EventHandler.remove(this.dragObj.cloneElement, "keydown", this.keydownHandler);
        this.dragObj.element.removeAttribute("aria-grabbed");
        this.dragStopClear();
        this.dragStopPostClear();
      }
    };
    DragAndDrop2.prototype.dragStop = function(e) {
      var _this = this;
      var contentCell = closest(this.dragObj.targetClone, "." + CONTENT_CELLS_CLASS);
      if (this.parent.enableVirtualization && !isNullOrUndefined(contentCell)) {
        contentCell.classList.add("e-dropped-column");
      }
      var columnKey;
      var dropIndex;
      var dataDropIndexKeyfieldValue;
      var isMultipleDrag;
      EventHandler.remove(document.body, "keydown", this.keydownHandler);
      [].slice.call(this.borderElm).forEach(function(element3) {
        element3.classList.remove(DROPPING_CLASS);
      });
      if (this.dragObj.targetClone.parentElement) {
        isMultipleDrag = this.dragObj.selectedCards && this.dragObj.selectedCards.length > 1 && this.parent.sortSettings.sortBy === "Index";
        var className = !isMultipleDrag ? "." + CARD_CLASS + ":not(." + DRAGGED_CARD_CLASS + ", ." + CLONED_CARD_CLASS + "),." + DROPPED_CLONE_CLASS : "." + CARD_CLASS + ":not(." + CLONED_CARD_CLASS + "),." + DROPPED_CLONE_CLASS;
        var element2 = [].slice.call(this.dragObj.targetClone.parentElement.querySelectorAll(className));
        dropIndex = element2.indexOf(this.dragObj.targetClone);
        if (this.parent.enableVirtualization && !isNullOrUndefined(this.dragObj.targetClone.nextElementSibling)) {
          dataDropIndexKeyfieldValue = this.dragObj.targetClone.nextElementSibling.getAttribute("data-id");
        }
      }
      if (!isNullOrUndefined(this.kanbanObj) && this.kanbanObj.element.querySelector("." + TARGET_MULTI_CLONE_CLASS)) {
        columnKey = closest(e.target, "." + MULTI_COLUMN_KEY_CLASS + ":not(." + DISABLED_CLASS + ")");
      }
      if (contentCell || columnKey) {
        var cardStatus_1;
        if (contentCell) {
          cardStatus_1 = this.getColumnKey(contentCell);
        } else {
          cardStatus_1 = this.getColumnKey(columnKey);
          contentCell = closest(columnKey, "." + CONTENT_CELLS_CLASS);
        }
        if (this.dragObj.selectedCards instanceof HTMLElement) {
          this.updateDroppedData(this.dragObj.selectedCards, cardStatus_1, contentCell);
        } else {
          this.dragObj.selectedCards.forEach(function(element3) {
            _this.updateDroppedData(element3, cardStatus_1, contentCell);
          });
        }
        if (this.parent.sortSettings.field && this.parent.sortSettings.sortBy === "Index") {
          this.changeOrder(this.dragObj.modifiedData, e.helper);
        }
      }
      if (this.dragObj.modifiedData.length === 0) {
        this.dragObj.modifiedData = this.dragObj.cardDetails;
      }
      var dragArgs = {
        cancel: false,
        data: this.dragObj.modifiedData,
        event: e,
        element: this.dragObj.selectedCards,
        dropIndex
      };
      this.parent.trigger(dragStop, dragArgs, function(dragEventArgs) {
        _this.dragStopClear();
        if (!dragEventArgs.cancel) {
          if (contentCell || columnKey) {
            var updateCard = dragEventArgs.data instanceof Array && dragEventArgs.data.length > 1 ? dragEventArgs.data : dragEventArgs.data[0];
            var draggedColumnKey = void 0;
            var droppedColumnKey = void 0;
            if (_this.parent.enableVirtualization) {
              draggedColumnKey = contentCell.closest(".e-kanban").querySelector(".e-dragged-column").getAttribute("data-key");
              droppedColumnKey = contentCell.getAttribute("data-key");
            }
            _this.parent.crudModule.updateCard(updateCard, dragEventArgs.dropIndex, true, dataDropIndexKeyfieldValue, draggedColumnKey, droppedColumnKey, isMultipleDrag);
            if (_this.parent.enableVirtualization) {
              _this.parent.virtualLayoutModule.refreshColumnData(draggedColumnKey, droppedColumnKey);
              _this.parent.virtualLayoutModule.ensureColumnNotEmpty(draggedColumnKey);
            }
          }
        }
        _this.dragStopPostClear();
      });
    };
    DragAndDrop2.prototype.dragStopClear = function() {
      this.removeElement(this.dragObj.draggedClone);
      this.removeElement(this.dragObj.targetClone, this.kanbanObj);
      this.removeElement(this.dragObj.cloneElement);
      var dragMultiClone = [].slice.call(this.parent.element.querySelectorAll("." + DRAGGED_CLONE_CLASS));
      dragMultiClone.forEach(function(clone) {
        remove(clone);
      });
      this.dragObj.element.style.removeProperty("width");
      this.multiCloneRemove();
      if (this.dragObj.selectedCards instanceof HTMLElement) {
        removeClass([this.dragObj.selectedCards], DRAGGED_CARD_CLASS);
      } else {
        removeClass(this.dragObj.selectedCards, DRAGGED_CARD_CLASS);
      }
      clearInterval(this.dragObj.navigationInterval);
      this.dragObj.navigationInterval = null;
      if (document.body.style.cursor === "not-allowed") {
        document.body.style.cursor = "";
      }
      var styleCards = [].slice.call(this.parent.element.querySelectorAll("." + CARD_CLASS + "[style]"));
      styleCards.forEach(function(styleCard) {
        styleCard.style.cursor = "";
      });
      var className = "." + CONTENT_ROW_CLASS + ":not(." + SWIMLANE_ROW_CLASS + ")";
      var cells = [].slice.call(this.parent.element.querySelectorAll(className + " ." + CONTENT_CELLS_CLASS));
      cells.forEach(function(cell) {
        return removeClass([cell], DROPPING_CLASS);
      });
      if (this.parent.externalDropObj) {
        var externalCells = [].slice.call(this.parent.externalDropObj.element.querySelectorAll(className + " ." + CONTENT_CELLS_CLASS));
        externalCells.forEach(function(externalCell) {
          return removeClass([externalCell], DROPPING_CLASS);
        });
      }
    };
    DragAndDrop2.prototype.dragStopPostClear = function() {
      if (this.parent.isAdaptive) {
        this.parent.touchModule.tabHold = false;
      }
      if (this.parent.element.querySelector(".e-dragged-column")) {
        this.parent.element.querySelector(".e-dragged-column").classList.remove("e-dragged-column");
      }
      if (this.parent.element.querySelector(".e-dropped-column")) {
        this.parent.element.querySelector(".e-dropped-column").classList.remove("e-dropped-column");
      }
      this.dragObj.cardDetails = this.dragObj.modifiedData = [];
      this.isDragging = false;
      this.parent.isExternalKanbanDrop = false;
      this.parent.externalDropObj = null;
    };
    DragAndDrop2.prototype.updateDroppedData = function(element2, cardStatus, contentCell) {
      var crudObj = this.parent.getCardDetails(element2);
      var crudData = extend({}, crudObj, null, true);
      if (cardStatus.split(",").length === 1) {
        crudData[this.parent.keyField] = cardStatus;
      }
      if (this.parent.swimlaneSettings.keyField && this.parent.swimlaneSettings.allowDragAndDrop) {
        var prev = closest(contentCell, "." + CONTENT_ROW_CLASS).previousElementSibling;
        if (this.parent.isAdaptive) {
          var keyField = this.parent.layoutModule.kanbanRows[this.parent.layoutModule.swimlaneIndex].keyField;
          crudData[this.parent.swimlaneSettings.keyField] = keyField;
        } else {
          crudData[this.parent.swimlaneSettings.keyField] = this.getColumnKey(prev);
        }
      }
      this.dragObj.modifiedData.push(crudData);
    };
    DragAndDrop2.prototype.changeOrder = function(modifieddata, draggedCard) {
      var _this = this;
      var prevele = false;
      var element2;
      if (this.kanbanObj.sortSettings.direction === "Ascending") {
        element2 = draggedCard === this.dragObj.targetClone.previousElementSibling && (this.dragObj.targetClone.previousElementSibling && this.dragObj.targetClone.previousElementSibling.previousElementSibling) ? this.dragObj.targetClone.previousElementSibling.previousElementSibling : this.dragObj.targetClone.previousElementSibling;
      } else {
        element2 = this.dragObj.targetClone.nextElementSibling;
      }
      if (element2 && !element2.classList.contains(DRAGGED_CARD_CLASS) && !element2.classList.contains(CLONED_CARD_CLASS) && !element2.classList.contains(DRAGGED_CLONE_CLASS)) {
        prevele = true;
      } else if (this.dragObj.targetClone.nextElementSibling && this.kanbanObj.sortSettings.direction === "Ascending") {
        element2 = this.dragObj.targetClone.nextElementSibling;
      } else if (this.dragObj.targetClone.previousElementSibling && this.kanbanObj.sortSettings.direction === "Descending") {
        element2 = this.dragObj.targetClone.previousElementSibling;
      } else {
        return;
      }
      if (element2.classList.contains(CARD_CLASS)) {
        var obj = this.kanbanObj.getCardDetails(element2);
        var keyIndex_1 = obj[this.kanbanObj.sortSettings.field];
        if (modifieddata.length > 1 && this.kanbanObj.sortSettings.direction === "Descending") {
          modifieddata = modifieddata.reverse();
        }
        modifieddata.forEach(function(data, index) {
          if (prevele) {
            data[_this.kanbanObj.sortSettings.field] = ++keyIndex_1;
          } else if (keyIndex_1 !== 1 && index <= data[_this.kanbanObj.sortSettings.field]) {
            data[_this.kanbanObj.sortSettings.field] = --keyIndex_1;
          } else if (keyIndex_1 === 1) {
            data[_this.kanbanObj.sortSettings.field] = index + 1;
          }
        });
      }
    };
    DragAndDrop2.prototype.toggleVisible = function(target, tColumn) {
      var _this = this;
      var headerCells = "." + HEADER_CELLS_CLASS + ":not(." + STACKED_HEADER_CELL_CLASS + ")";
      var lists = [].slice.call(this.kanbanObj.element.querySelectorAll(headerCells));
      lists.forEach(function(list) {
        if (_this.getColumnKey(list) === _this.getColumnKey(tColumn || target)) {
          _this.kanbanObj.actionModule.columnToggle(list);
        }
      });
      var cloneTarget = closest(this.dragObj.draggedClone, "." + CONTENT_CELLS_CLASS);
      if (cloneTarget) {
        var width = formatUnit(cloneTarget.offsetWidth - cardSpace);
        this.dragObj.draggedClone.style.width = width;
        this.dragObj.cloneElement.style.width = width;
      }
    };
    DragAndDrop2.prototype.multiCloneRemove = function() {
      var cloneMulti = !isNullOrUndefined(this.kanbanObj) ? [].slice.call(this.kanbanObj.element.querySelectorAll("." + TARGET_MULTI_CLONE_CLASS)) : [];
      if (cloneMulti.length > 0) {
        var columnKey = [].slice.call(this.kanbanObj.element.querySelectorAll("." + MULTI_COLUMN_KEY_CLASS));
        columnKey.forEach(function(node) {
          return remove(node);
        });
        cloneMulti.forEach(function(node) {
          var cell = closest(node, "." + CONTENT_CELLS_CLASS);
          if (cell) {
            cell.style.borderStyle = "";
            if (cell.querySelector("." + SHOW_ADD_BUTTON)) {
              removeClass([cell.querySelector("." + SHOW_ADD_BUTTON)], MULTI_CARD_WRAPPER_CLASS);
            }
            removeClass([cell.querySelector("." + CARD_WRAPPER_CLASS)], MULTI_CARD_WRAPPER_CLASS);
          }
        });
        this.removeElement(this.dragObj.targetCloneMulti, this.kanbanObj);
      }
    };
    DragAndDrop2.prototype.calculateArgs = function(e) {
      var eventArgs = this.getPageCoordinates(e);
      this.dragObj.pageY = eventArgs.pageY;
      this.dragObj.pageX = eventArgs.pageX;
      this.isDragging = true;
      if (this.kanbanObj.isAdaptive && this.kanbanObj.tooltipModule) {
        this.kanbanObj.tooltipModule.tooltipObj.close();
      }
    };
    DragAndDrop2.prototype.getPageCoordinates = function(e) {
      var eventArgs = e.event;
      return eventArgs && eventArgs.changedTouches ? eventArgs.changedTouches[0] : e.changedTouches ? e.changedTouches[0] : eventArgs || e;
    };
    DragAndDrop2.prototype.getColumnKey = function(target) {
      if (target && target.getAttribute("data-key")) {
        return target.getAttribute("data-key").trim();
      }
      return "";
    };
    DragAndDrop2.prototype.updateScrollPosition = function() {
      var _this = this;
      if (isNullOrUndefined(this.dragObj.navigationInterval)) {
        this.dragObj.navigationInterval = window.setInterval(function() {
          _this.autoScroll();
        }, 100);
      }
    };
    DragAndDrop2.prototype.autoScrollValidation = function() {
      var pageY = this.dragObj.pageY;
      var pageX = this.dragObj.pageX;
      var autoScrollDistance = 30;
      var dragEdges = { left: false, right: false, top: false, bottom: false };
      var viewBoundaries = this.kanbanObj.element.querySelector("." + CONTENT_CLASS).getBoundingClientRect();
      if (pageY < viewBoundaries.top + autoScrollDistance + window.pageYOffset && pageY > viewBoundaries.top + window.pageYOffset) {
        dragEdges.top = true;
      }
      if (pageY > viewBoundaries.bottom - autoScrollDistance + window.pageYOffset && pageY < viewBoundaries.bottom + window.pageYOffset) {
        dragEdges.bottom = true;
      }
      if (pageX < viewBoundaries.left + autoScrollDistance + window.pageXOffset && pageX > viewBoundaries.left + window.pageXOffset) {
        dragEdges.left = true;
      }
      if (pageX > viewBoundaries.right - autoScrollDistance + window.pageXOffset && pageX < viewBoundaries.right + window.pageXOffset) {
        dragEdges.right = true;
      }
      this.dragEdges = dragEdges;
    };
    DragAndDrop2.prototype.autoScroll = function() {
      this.autoScrollValidation();
      var scrollSensitivity = 30;
      if (this.kanbanObj.isAdaptive) {
        var parent_1;
        if (this.dragEdges.top || this.dragEdges.bottom) {
          if (this.dragObj.targetClone) {
            parent_1 = closest(this.dragObj.targetClone, "." + CARD_WRAPPER_CLASS);
          } else {
            parent_1 = closest(this.dragObj.draggedClone, "." + CARD_WRAPPER_CLASS);
          }
        } else if (this.dragEdges.right || this.dragEdges.left) {
          parent_1 = this.kanbanObj.element.querySelector("." + CONTENT_CLASS);
        }
        if (parent_1) {
          var yIsScrollable = parent_1.offsetHeight <= parent_1.scrollHeight;
          var xIsScrollable = parent_1.offsetWidth <= parent_1.scrollWidth;
          var yInBounds = parent_1.scrollTop >= 0 && parent_1.scrollTop + parent_1.offsetHeight <= parent_1.scrollHeight;
          var xInBounds = parent_1.scrollLeft >= 0 && parent_1.scrollLeft + parent_1.offsetWidth <= parent_1.scrollWidth;
          if (yIsScrollable && yInBounds && (this.dragEdges.top || this.dragEdges.bottom)) {
            parent_1.scrollTop += this.dragEdges.top ? -(scrollSensitivity + 36) : scrollSensitivity;
          }
          if (xIsScrollable && xInBounds && (this.dragEdges.left || this.dragEdges.right)) {
            var width = this.parent.enableVirtualization ? this.kanbanObj.virtualLayoutModule.getWidth() : this.kanbanObj.layoutModule.getWidth();
            var scroll_1 = width * (this.kanbanObj.columns.length - 1) > parent_1.scrollLeft;
            if (scroll_1 || this.dragEdges.left) {
              parent_1.scrollLeft += this.dragEdges.left ? -scrollSensitivity : scrollSensitivity;
            }
          }
        }
      } else {
        var parent_2 = this.kanbanObj.element.querySelector("." + CONTENT_CLASS);
        var column = this.dragObj.targetClone.parentElement;
        var yScrollable = parent_2.offsetHeight <= parent_2.scrollHeight;
        var xScrollable = parent_2.offsetWidth <= parent_2.scrollWidth;
        var yBounds = yScrollable && parent_2.scrollTop >= 0 && parent_2.scrollTop + parent_2.offsetHeight <= parent_2.scrollHeight;
        var xBounds = xScrollable && parent_2.scrollLeft >= 0 && parent_2.scrollLeft + parent_2.offsetWidth <= parent_2.scrollWidth;
        if (yBounds && (this.dragEdges.top || this.dragEdges.bottom)) {
          parent_2.scrollTop += this.dragEdges.top ? -scrollSensitivity : scrollSensitivity;
          if (this.parent.swimlaneSettings.enableFrozenRows) {
            this.dragObj.cloneElement.style.top = !this.dragEdges.top ? parseInt(this.dragObj.cloneElement.style.top, 10) + scrollSensitivity + "px" : parseInt(this.dragObj.cloneElement.style.top, 10) - scrollSensitivity + "px";
          }
          if (column) {
            column.scrollTop += this.dragEdges.top ? -scrollSensitivity : scrollSensitivity;
          }
        }
        if (xBounds && (this.dragEdges.left || this.dragEdges.right)) {
          parent_2.scrollLeft += this.dragEdges.left ? -scrollSensitivity : scrollSensitivity;
          if (column) {
            column.scrollLeft += this.dragEdges.left ? -scrollSensitivity : scrollSensitivity;
          }
        }
        if (this.dragObj.pageY - window.scrollY < scrollSensitivity) {
          window.scrollTo(window.scrollX, window.scrollY - scrollSensitivity);
        } else if (window.innerHeight - (this.dragObj.pageY - window.scrollY) < scrollSensitivity) {
          window.scrollTo(window.scrollX, window.scrollY + scrollSensitivity);
        }
      }
    };
    DragAndDrop2.prototype.unWireDragEvents = function(element2) {
      if (!isNullOrUndefined(element2) && !isNullOrUndefined(element2.ej2_instances[0])) {
        var dragInstance = element2.ej2_instances[0];
        if (dragInstance && !dragInstance.isDestroyed) {
          dragInstance.destroy();
        }
      }
    };
    return DragAndDrop2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/common/incremental-search.js
var queryString = "";
var prevString = "";
var matches2 = [];
var activeClass = "e-active";
var prevElementId = "";
function incrementalSearch(keyCode, items, selectedIndex, ignoreCase, elementId) {
  queryString += String.fromCharCode(keyCode);
  setTimeout(function() {
    queryString = "";
  }, 1e3);
  var index;
  queryString = ignoreCase ? queryString.toLowerCase() : queryString;
  if (prevElementId === elementId && prevString === queryString) {
    for (var i = 0; i < matches2.length; i++) {
      if (matches2[i].classList.contains(activeClass)) {
        index = i;
        break;
      }
    }
    index = index + 1;
    return matches2[index] ? matches2[index] : matches2[0];
  } else {
    var listItems = items;
    var strLength = queryString.length;
    var text = void 0;
    var item = void 0;
    selectedIndex = selectedIndex ? selectedIndex + 1 : 0;
    var i = selectedIndex;
    matches2 = [];
    do {
      if (i === listItems.length) {
        i = -1;
      }
      if (i === -1) {
        index = 0;
      } else {
        index = i;
      }
      item = listItems[index];
      text = ignoreCase ? item.innerText.toLowerCase() : item.innerText;
      if (text.substr(0, strLength) === queryString) {
        matches2.push(listItems[index]);
      }
      i++;
    } while (i !== selectedIndex);
    prevString = queryString;
    prevElementId = elementId;
    return matches2[0];
  }
}
function Search(inputVal, items, searchType, ignoreCase, dataSource, fields, type) {
  var listItems = items;
  ignoreCase = ignoreCase !== void 0 && ignoreCase !== null ? ignoreCase : true;
  var itemData = { item: null, index: null };
  if (inputVal && inputVal.length) {
    var strLength = inputVal.length;
    var queryStr = ignoreCase ? inputVal.toLocaleLowerCase() : inputVal;
    queryStr = escapeCharRegExp(queryStr);
    var _loop_1 = function(i2, itemsData2) {
      var item = itemsData2[i2];
      var text = void 0;
      var filterValue;
      if (items && dataSource) {
        var checkField_1 = item;
        var fieldValue_1 = fields.text.split(".");
        dataSource.filter(function(data) {
          Array.prototype.slice.call(fieldValue_1).forEach(function(value) {
            if (type === "object" && (!data.isHeader && checkField_1.textContent.toString().indexOf(data[value]) !== -1) && checkField_1.getAttribute("data-value") === data[fields.value].toString() || type === "string" && checkField_1.textContent.toString().indexOf(data) !== -1) {
              filterValue = type === "object" ? data[value] : data;
            }
          });
        });
      }
      text = dataSource && filterValue ? (ignoreCase ? filterValue.toLocaleLowerCase() : filterValue).replace(/^\s+|\s+$/g, "") : (ignoreCase ? item.textContent.toLocaleLowerCase() : item.textContent).replace(/^\s+|\s+$/g, "");
      if (searchType === "Equal" && text === queryStr || searchType === "StartsWith" && text.substr(0, strLength) === queryStr || searchType === "EndsWith" && text.substr(text.length - queryStr.length) === queryStr || searchType === "Contains" && new RegExp(queryStr, "g").test(text)) {
        itemData.item = item;
        itemData.index = i2;
        return { value: { item, index: i2 } };
      }
    };
    for (var i = 0, itemsData = listItems; i < itemsData.length; i++) {
      var state_1 = _loop_1(i, itemsData);
      if (typeof state_1 === "object")
        return state_1.value;
    }
    return itemData;
  }
  return itemData;
}
function escapeCharRegExp(value) {
  return value.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function resetIncrementalSearchValues(elementId) {
  if (prevElementId === elementId) {
    prevElementId = "";
    prevString = "";
    queryString = "";
    matches2 = [];
  }
}

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/common/highlight-search.js
function highlightSearch(element2, query, ignoreCase, type) {
  if (query === "") {
    return;
  } else {
    var ignoreRegex = ignoreCase ? "gim" : "gm";
    query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    var replaceQuery = type === "StartsWith" ? "^(" + query + ")" : type === "EndsWith" ? "(" + query + ")$" : "(" + query + ")";
    findTextNode(element2, new RegExp(replaceQuery, ignoreRegex));
  }
}
function findTextNode(element2, pattern) {
  for (var index = 0; element2.childNodes && index < element2.childNodes.length; index++) {
    if (element2.childNodes[index].nodeType === 3 && element2.childNodes[index].textContent.trim() !== "") {
      var value = element2.childNodes[index].nodeValue.trim().replace(pattern, '<span class="e-highlight">$1</span>');
      element2.childNodes[index].nodeValue = "";
      element2.innerHTML = element2.innerHTML.trim() + value;
      break;
    } else {
      findTextNode(element2.childNodes[index], pattern);
    }
  }
}
function revertHighlightSearch(content) {
  var contentElement = content.querySelectorAll(".e-highlight");
  for (var i = contentElement.length - 1; i >= 0; i--) {
    var parent_1 = contentElement[i].parentNode;
    var text = document.createTextNode(contentElement[i].textContent);
    parent_1.replaceChild(text, contentElement[i]);
  }
}

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/drop-down-base/drop-down-base.js
var __extends20 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate17 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FieldSettings = (
  /** @class */
  function(_super) {
    __extends20(FieldSettings3, _super);
    function FieldSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate17([
      Property()
    ], FieldSettings3.prototype, "text", void 0);
    __decorate17([
      Property()
    ], FieldSettings3.prototype, "value", void 0);
    __decorate17([
      Property()
    ], FieldSettings3.prototype, "iconCss", void 0);
    __decorate17([
      Property()
    ], FieldSettings3.prototype, "groupBy", void 0);
    __decorate17([
      Property()
    ], FieldSettings3.prototype, "htmlAttributes", void 0);
    return FieldSettings3;
  }(ChildProperty)
);
var dropDownBaseClasses = {
  root: "e-dropdownbase",
  rtl: "e-rtl",
  content: "e-content",
  selected: "e-active",
  hover: "e-hover",
  noData: "e-nodata",
  fixedHead: "e-fixed-head",
  focus: "e-item-focus",
  li: "e-list-item",
  group: "e-list-group-item",
  disabled: "e-disabled",
  grouping: "e-dd-group"
};
var ITEMTEMPLATE_PROPERTY = "ItemTemplate";
var DISPLAYTEMPLATE_PROPERTY = "DisplayTemplate";
var SPINNERTEMPLATE_PROPERTY = "SpinnerTemplate";
var VALUETEMPLATE_PROPERTY = "ValueTemplate";
var GROUPTEMPLATE_PROPERTY = "GroupTemplate";
var HEADERTEMPLATE_PROPERTY = "HeaderTemplate";
var FOOTERTEMPLATE_PROPERTY = "FooterTemplate";
var NORECORDSTEMPLATE_PROPERTY = "NoRecordsTemplate";
var ACTIONFAILURETEMPLATE_PROPERTY = "ActionFailureTemplate";
var HIDE_GROUPLIST = "e-hide-group-header";
var DropDownBase = (
  /** @class */
  function(_super) {
    __extends20(DropDownBase2, _super);
    function DropDownBase2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.preventChange = false;
      _this.isAngular = false;
      _this.isPreventChange = false;
      _this.isDynamicDataChange = false;
      _this.addedNewItem = false;
      return _this;
    }
    DropDownBase2.prototype.getPropObject = function(prop, newProp, oldProp) {
      var newProperty = new Object();
      var oldProperty = new Object();
      var propName = function(prop2) {
        return prop2;
      };
      newProperty[propName(prop)] = newProp[propName(prop)];
      oldProperty[propName(prop)] = oldProp[propName(prop)];
      var data = new Object();
      data.newProperty = newProperty;
      data.oldProperty = oldProperty;
      return data;
    };
    DropDownBase2.prototype.getValueByText = function(text, ignoreCase, ignoreAccent) {
      var value = null;
      if (!isNullOrUndefined(this.listData)) {
        if (ignoreCase) {
          value = this.checkValueCase(text, true, ignoreAccent);
        } else {
          value = this.checkValueCase(text, false, ignoreAccent);
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkValueCase = function(text, ignoreCase, ignoreAccent, isTextByValue) {
      var _this = this;
      var value = null;
      if (isTextByValue) {
        value = text;
      }
      var dataSource = this.listData;
      var fields = this.fields;
      var type = this.typeOfData(dataSource).typeof;
      if (type === "string" || type === "number" || type === "boolean") {
        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {
          var item = dataSource_1[_i];
          if (!isNullOrUndefined(item)) {
            if (ignoreAccent) {
              value = this.checkingAccent(String(item), text, ignoreCase);
            } else {
              if (ignoreCase) {
                if (this.checkIgnoreCase(String(item), text)) {
                  value = this.getItemValue(String(item), text, ignoreCase);
                }
              } else {
                if (this.checkNonIgnoreCase(String(item), text)) {
                  value = this.getItemValue(String(item), text, ignoreCase, isTextByValue);
                }
              }
            }
          }
        }
      } else {
        if (ignoreCase) {
          dataSource.filter(function(item2) {
            var itemValue = getValue(fields.value, item2);
            if (!isNullOrUndefined(itemValue) && _this.checkIgnoreCase(getValue(fields.text, item2).toString(), text)) {
              value = getValue(fields.value, item2);
            }
          });
        } else {
          if (isTextByValue) {
            var compareValue_1 = null;
            compareValue_1 = value;
            dataSource.filter(function(item2) {
              var itemValue = getValue(fields.value, item2);
              if (!isNullOrUndefined(itemValue) && !isNullOrUndefined(value) && itemValue.toString() === compareValue_1.toString()) {
                value = getValue(fields.text, item2);
              }
            });
          } else {
            dataSource.filter(function(item2) {
              if (_this.checkNonIgnoreCase(getValue(fields.text, item2), text)) {
                value = getValue(fields.value, item2);
              }
            });
          }
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkingAccent = function(item, text, ignoreCase) {
      var dataItem = DataUtil.ignoreDiacritics(String(item));
      var textItem = DataUtil.ignoreDiacritics(text.toString());
      var value = null;
      if (ignoreCase) {
        if (this.checkIgnoreCase(dataItem, textItem)) {
          value = this.getItemValue(String(item), text, ignoreCase);
        }
      } else {
        if (this.checkNonIgnoreCase(String(item), text)) {
          value = this.getItemValue(String(item), text, ignoreCase);
        }
      }
      return value;
    };
    DropDownBase2.prototype.checkIgnoreCase = function(item, text) {
      return String(item).toLowerCase() === text.toString().toLowerCase() ? true : false;
    };
    DropDownBase2.prototype.checkNonIgnoreCase = function(item, text) {
      return String(item) === text.toString() ? true : false;
    };
    DropDownBase2.prototype.getItemValue = function(dataItem, typedText, ignoreCase, isTextByValue) {
      var value = null;
      var dataSource = this.listData;
      var type = this.typeOfData(dataSource).typeof;
      if (isTextByValue) {
        value = dataItem.toString();
      } else {
        if (ignoreCase) {
          value = type === "string" ? String(dataItem) : this.getFormattedValue(String(dataItem));
        } else {
          value = type === "string" ? typedText : this.getFormattedValue(typedText);
        }
      }
      return value;
    };
    DropDownBase2.prototype.templateCompiler = function(baseTemplate) {
      var checkTemplate = false;
      if (typeof baseTemplate !== "function" && baseTemplate) {
        try {
          checkTemplate = selectAll(baseTemplate, document).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    DropDownBase2.prototype.l10nUpdate = function(actionFailure2) {
      var ele = this.getModuleName() === "listbox" ? this.ulElement : this.list;
      if (this.noRecordsTemplate !== "No records found" || this.actionFailureTemplate !== "Request failed") {
        var template = actionFailure2 ? this.actionFailureTemplate : this.noRecordsTemplate;
        var compiledString = void 0;
        var templateId = actionFailure2 ? this.actionFailureTemplateId : this.noRecordsTemplateId;
        ele.innerHTML = "";
        var tempaltecheck = this.templateCompiler(template);
        if (typeof template !== "function" && tempaltecheck) {
          compiledString = compile(select(template, document).innerHTML.trim());
        } else {
          compiledString = compile(template);
        }
        var templateName = actionFailure2 ? "actionFailureTemplate" : "noRecordsTemplate";
        var noDataCompTemp = compiledString({}, this, templateName, templateId, this.isStringTemplate, null, ele);
        if (noDataCompTemp && noDataCompTemp.length > 0) {
          for (var i = 0; i < noDataCompTemp.length; i++) {
            if (this.getModuleName() === "listbox" && templateName === "noRecordsTemplate") {
              if (noDataCompTemp[i].nodeName === "#text") {
                var liElem = this.createElement("li");
                liElem.textContent = noDataCompTemp[i].textContent;
                liElem.classList.add("e-list-nrt");
                liElem.setAttribute("role", "option");
                ele.appendChild(liElem);
              } else {
                noDataCompTemp[i].classList.add("e-list-nr-template");
                ele.appendChild(noDataCompTemp[i]);
              }
            } else {
              ele.appendChild(noDataCompTemp[i]);
            }
          }
        }
        this.renderReactTemplates();
      } else {
        var l10nLocale = { noRecordsTemplate: "No records found", actionFailureTemplate: "Request failed" };
        var componentLocale = new L10n(this.getLocaleName(), {}, this.locale);
        if (componentLocale.getConstant("actionFailureTemplate") !== "") {
          this.l10n = componentLocale;
        } else {
          this.l10n = new L10n(this.getModuleName() === "listbox" ? "listbox" : this.getModuleName() === "mention" ? "mention" : "dropdowns", l10nLocale, this.locale);
        }
        var content = actionFailure2 ? this.l10n.getConstant("actionFailureTemplate") : this.l10n.getConstant("noRecordsTemplate");
        if (this.getModuleName() === "listbox") {
          var liElem = this.createElement("li");
          liElem.textContent = content;
          ele.appendChild(liElem);
          liElem.classList.add("e-list-nrt");
          liElem.setAttribute("role", "option");
        } else {
          if (!isNullOrUndefined(ele)) {
            ele.innerHTML = content;
          }
        }
      }
    };
    DropDownBase2.prototype.getLocaleName = function() {
      return "drop-down-base";
    };
    DropDownBase2.prototype.getTextByValue = function(value) {
      var text = this.checkValueCase(value, false, false, true);
      return text;
    };
    DropDownBase2.prototype.getFormattedValue = function(value) {
      if (this.listData && this.listData.length) {
        var item = void 0;
        if (this.properties.allowCustomValue && this.properties.value && this.properties.value instanceof Array && this.properties.value.length > 0) {
          item = this.typeOfData(this.properties.value);
        } else {
          item = this.typeOfData(this.listData);
        }
        if (typeof getValue(this.fields.value ? this.fields.value : "value", item.item) === "number" || item.typeof === "number") {
          return parseFloat(value);
        }
        if (typeof getValue(this.fields.value ? this.fields.value : "value", item.item) === "boolean" || item.typeof === "boolean") {
          return value === "true" || "" + value === "true";
        }
      }
      return value;
    };
    DropDownBase2.prototype.setEnableRtl = function() {
      if (!isNullOrUndefined(this.enableRtlElements)) {
        if (this.list) {
          this.enableRtlElements.push(this.list);
        }
        if (this.enableRtl) {
          addClass(this.enableRtlElements, dropDownBaseClasses.rtl);
        } else {
          removeClass(this.enableRtlElements, dropDownBaseClasses.rtl);
        }
      }
    };
    DropDownBase2.prototype.initialize = function(e) {
      this.bindEvent = true;
      this.actionFailureTemplateId = "" + this.element.id + ACTIONFAILURETEMPLATE_PROPERTY;
      if (this.element.tagName === "UL") {
        var jsonElement = ListBase.createJsonFromElement(this.element);
        this.setProperties({ fields: { text: "text", value: "text" } }, true);
        this.resetList(jsonElement, this.fields);
      } else if (this.element.tagName === "SELECT") {
        var dataSource = this.dataSource instanceof Array ? this.dataSource.length > 0 ? true : false : !isNullOrUndefined(this.dataSource) ? true : false;
        if (!dataSource) {
          this.renderItemsBySelect();
        } else if (this.isDynamicDataChange) {
          this.setListData(this.dataSource, this.fields, this.query);
        }
      } else {
        this.setListData(this.dataSource, this.fields, this.query, e);
      }
    };
    DropDownBase2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    DropDownBase2.prototype.updateDataAttribute = function(value) {
      var invalidAttr = ["class", "style", "id", "type", "aria-expanded", "aria-autocomplete", "aria-readonly"];
      var attr = {};
      for (var a = 0; a < this.element.attributes.length; a++) {
        if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.getModuleName() === "dropdownlist" && this.element.attributes[a].name === "readonly")) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      }
      extend(attr, value, attr);
      this.setProperties({ htmlAttributes: attr }, true);
    };
    DropDownBase2.prototype.renderItemsBySelect = function() {
      var element2 = this.element;
      var fields = { value: "value", text: "text" };
      var jsonElement = [];
      var group = element2.querySelectorAll("select>optgroup");
      var option = element2.querySelectorAll("select>option");
      this.getJSONfromOption(jsonElement, option, fields);
      if (group.length) {
        for (var i = 0; i < group.length; i++) {
          var item = group[i];
          var optionGroup = {};
          optionGroup[fields.text] = item.label;
          optionGroup.isHeader = true;
          var child = item.querySelectorAll("option");
          jsonElement.push(optionGroup);
          this.getJSONfromOption(jsonElement, child, fields);
        }
        element2.querySelectorAll("select>option");
      }
      this.updateFields(fields.text, fields.value, this.fields.groupBy, this.fields.htmlAttributes, this.fields.iconCss);
      this.resetList(jsonElement, fields);
    };
    DropDownBase2.prototype.updateFields = function(text, value, groupBy, htmlAttributes, iconCss) {
      var field = {
        "fields": {
          text,
          value,
          groupBy: !isNullOrUndefined(groupBy) ? groupBy : this.fields && this.fields.groupBy,
          htmlAttributes: !isNullOrUndefined(htmlAttributes) ? htmlAttributes : this.fields && this.fields.htmlAttributes,
          iconCss: !isNullOrUndefined(iconCss) ? iconCss : this.fields && this.fields.iconCss
        }
      };
      this.setProperties(field, true);
    };
    DropDownBase2.prototype.getJSONfromOption = function(items, options, fields) {
      for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
        var option = options_1[_i];
        var json = {};
        json[fields.text] = option.innerText;
        json[fields.value] = !isNullOrUndefined(option.getAttribute(fields.value)) ? option.getAttribute(fields.value) : option.innerText;
        items.push(json);
      }
    };
    DropDownBase2.prototype.preRender = function() {
      this.scrollTimer = -1;
      this.enableRtlElements = [];
      this.isRequested = false;
      this.isDataFetched = false;
      this.itemTemplateId = "" + this.element.id + ITEMTEMPLATE_PROPERTY;
      this.displayTemplateId = "" + this.element.id + DISPLAYTEMPLATE_PROPERTY;
      this.spinnerTemplateId = "" + this.element.id + SPINNERTEMPLATE_PROPERTY;
      this.valueTemplateId = "" + this.element.id + VALUETEMPLATE_PROPERTY;
      this.groupTemplateId = "" + this.element.id + GROUPTEMPLATE_PROPERTY;
      this.headerTemplateId = "" + this.element.id + HEADERTEMPLATE_PROPERTY;
      this.footerTemplateId = "" + this.element.id + FOOTERTEMPLATE_PROPERTY;
      this.noRecordsTemplateId = "" + this.element.id + NORECORDSTEMPLATE_PROPERTY;
    };
    DropDownBase2.prototype.setListData = function(dataSource, fields, query, event) {
      var _this = this;
      fields = fields ? fields : this.fields;
      var ulElement;
      this.isActive = true;
      var eventArgs = { cancel: false, data: dataSource, query };
      this.isPreventChange = this.isAngular && this.preventChange ? true : this.isPreventChange;
      this.trigger("actionBegin", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          _this.showSpinner();
          if (dataSource instanceof DataManager) {
            _this.isRequested = true;
            if (_this.isDataFetched) {
              _this.emptyDataRequest(fields);
              return;
            }
            eventArgs2.data.executeQuery(_this.getQuery(eventArgs2.query)).then(function(e) {
              _this.isPreventChange = _this.isAngular && _this.preventChange ? true : _this.isPreventChange;
              _this.trigger("actionComplete", e, function(e2) {
                if (!e2.cancel) {
                  var listItems2 = e2.result;
                  if (listItems2.length === 0) {
                    _this.isDataFetched = true;
                  }
                  ulElement = _this.renderItems(listItems2, fields);
                  _this.onActionComplete(ulElement, listItems2, e2);
                  if (_this.groupTemplate) {
                    _this.renderGroupTemplate(ulElement);
                  }
                  _this.isRequested = false;
                  _this.bindChildItems(listItems2, ulElement, fields, e2);
                }
              });
            }).catch(function(e) {
              _this.isRequested = false;
              _this.onActionFailure(e);
              _this.hideSpinner();
            });
          } else {
            var dataManager = new DataManager(eventArgs2.data);
            var listItems = _this.getQuery(eventArgs2.query).executeLocal(dataManager);
            var localDataArgs = { cancel: false, result: listItems };
            _this.isPreventChange = _this.isAngular && _this.preventChange ? true : _this.isPreventChange;
            _this.trigger("actionComplete", localDataArgs, function(localDataArgs2) {
              if (!localDataArgs2.cancel) {
                ulElement = _this.renderItems(localDataArgs2.result, fields);
                _this.onActionComplete(ulElement, localDataArgs2.result, event);
                if (_this.groupTemplate) {
                  _this.renderGroupTemplate(ulElement);
                }
                _this.bindChildItems(localDataArgs2.result, ulElement, fields);
                setTimeout(function() {
                  if (_this.getModuleName() === "multiselect" && _this.itemTemplate != null && (ulElement.childElementCount > 0 && (ulElement.children[0].childElementCount > 0 || _this.fields.groupBy && ulElement.children[1] && ulElement.children[1].childElementCount > 0))) {
                    _this.updateDataList();
                  }
                });
              }
            });
          }
        }
      });
    };
    DropDownBase2.prototype.bindChildItems = function(listItems, ulElement, fields, e) {
      var _this = this;
      if (listItems.length >= 100 && this.getModuleName() === "autocomplete") {
        setTimeout(function() {
          var childNode = _this.remainingItems(_this.sortedData, fields);
          append(childNode, ulElement);
          _this.liCollections = _this.list.querySelectorAll("." + dropDownBaseClasses.li);
          _this.updateListValues();
          _this.raiseDataBound(listItems, e);
        }, 0);
      } else {
        this.raiseDataBound(listItems, e);
      }
    };
    DropDownBase2.prototype.updateListValues = function() {
    };
    DropDownBase2.prototype.findListElement = function(list, findNode, attribute, value) {
      var liElement = null;
      if (list) {
        var listArr = [].slice.call(list.querySelectorAll(findNode));
        for (var index = 0; index < listArr.length; index++) {
          if (listArr[index].getAttribute(attribute) === value + "") {
            liElement = listArr[index];
            break;
          }
        }
      }
      return liElement;
    };
    DropDownBase2.prototype.raiseDataBound = function(listItems, e) {
      this.hideSpinner();
      var dataBoundEventArgs = {
        items: listItems,
        e
      };
      this.trigger("dataBound", dataBoundEventArgs);
    };
    DropDownBase2.prototype.remainingItems = function(dataSource, fields) {
      var spliceData = new DataManager(dataSource).executeLocal(new Query().skip(100));
      if (this.itemTemplate) {
        var listElements = this.templateListItem(spliceData, fields);
        return [].slice.call(listElements.childNodes);
      }
      var type = this.typeOfData(spliceData).typeof;
      if (type === "string" || type === "number" || type === "boolean") {
        return ListBase.createListItemFromArray(this.createElement, spliceData, true, this.listOption(spliceData, fields), this);
      }
      return ListBase.createListItemFromJson(this.createElement, spliceData, this.listOption(spliceData, fields), 1, true, this);
    };
    DropDownBase2.prototype.emptyDataRequest = function(fields) {
      var listItems = [];
      this.onActionComplete(this.renderItems(listItems, fields), listItems);
      this.isRequested = false;
      this.hideSpinner();
    };
    DropDownBase2.prototype.showSpinner = function() {
    };
    DropDownBase2.prototype.hideSpinner = function() {
    };
    DropDownBase2.prototype.onActionFailure = function(e) {
      this.liCollections = [];
      this.trigger("actionFailure", e);
      this.l10nUpdate(true);
      if (!isNullOrUndefined(this.list)) {
        addClass([this.list], dropDownBaseClasses.noData);
      }
    };
    DropDownBase2.prototype.onActionComplete = function(ulElement, list, e) {
      this.listData = list;
      if (this.getModuleName() !== "listbox") {
        ulElement.setAttribute("tabindex", "0");
      }
      if (this.isReact) {
        this.clearTemplate(["itemTemplate", "groupTemplate", "actionFailureTemplate", "noRecordsTemplate"]);
      }
      this.fixedHeaderElement = isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement : null;
      if (this.getModuleName() === "multiselect" && this.properties.allowCustomValue && this.fields.groupBy) {
        for (var i = 0; i < ulElement.childElementCount; i++) {
          if (ulElement.children[i].classList.contains("e-list-group-item")) {
            if (isNullOrUndefined(ulElement.children[i].innerHTML) || ulElement.children[i].innerHTML == "") {
              addClass([ulElement.children[i]], HIDE_GROUPLIST);
            }
          }
        }
      }
      if (!isNullOrUndefined(this.list)) {
        this.list.innerHTML = "";
        this.list.appendChild(ulElement);
        this.liCollections = this.list.querySelectorAll("." + dropDownBaseClasses.li);
        this.ulElement = this.list.querySelector("ul");
        this.postRender(this.list, list, this.bindEvent);
      }
    };
    DropDownBase2.prototype.postRender = function(listElement, list, bindEvent) {
      var focusItem = listElement.querySelector("." + dropDownBaseClasses.li);
      var selectedItem = listElement.querySelector("." + dropDownBaseClasses.selected);
      if (focusItem && !selectedItem) {
        focusItem.classList.add(dropDownBaseClasses.focus);
      }
      if (list.length <= 0) {
        this.l10nUpdate();
        addClass([listElement], dropDownBaseClasses.noData);
      } else {
        listElement.classList.remove(dropDownBaseClasses.noData);
      }
    };
    DropDownBase2.prototype.getQuery = function(query) {
      return query ? query : this.query ? this.query : new Query();
    };
    DropDownBase2.prototype.renderGroupTemplate = function(listEle) {
      if (this.fields.groupBy !== null && this.dataSource || this.element.querySelector("." + dropDownBaseClasses.group)) {
        var dataSource = this.dataSource;
        var option = { groupTemplateID: this.groupTemplateId, isStringTemplate: this.isStringTemplate };
        var headerItems = listEle.querySelectorAll("." + dropDownBaseClasses.group);
        var groupcheck = this.templateCompiler(this.groupTemplate);
        if (typeof this.groupTemplate !== "function" && groupcheck) {
          var groupValue = select(this.groupTemplate, document).innerHTML.trim();
          var tempHeaders = ListBase.renderGroupTemplate(groupValue, dataSource, this.fields.properties, headerItems, option, this);
          if (this.isGroupChecking) {
            for (var i = 0; i < tempHeaders.length; i++) {
              this.notify("addItem", { module: "CheckBoxSelection", item: tempHeaders[i] });
            }
          }
        } else {
          var tempHeaders = ListBase.renderGroupTemplate(this.groupTemplate, dataSource, this.fields.properties, headerItems, option, this);
          if (this.isGroupChecking) {
            for (var i = 0; i < tempHeaders.length; i++) {
              this.notify("addItem", { module: "CheckBoxSelection", item: tempHeaders[i] });
            }
          }
        }
        this.renderReactTemplates();
      }
    };
    DropDownBase2.prototype.createListItems = function(dataSource, fields) {
      if (dataSource && fields.groupBy || this.element.querySelector("optgroup")) {
        if (fields.groupBy) {
          if (this.sortOrder !== "None") {
            dataSource = this.getSortedDataSource(dataSource);
          }
          dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);
        }
        addClass([this.list], dropDownBaseClasses.grouping);
      } else {
        dataSource = this.getSortedDataSource(dataSource);
      }
      var options = this.listOption(dataSource, fields);
      var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;
      this.sortedData = dataSource;
      return ListBase.createList(this.createElement, this.getModuleName() === "autocomplete" ? spliceData : dataSource, options, true, this);
    };
    DropDownBase2.prototype.listOption = function(dataSource, fields) {
      var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;
      var fieldValues = !isNullOrUndefined(fields.properties) ? fields.properties : fields;
      var options = fields.text !== null || fields.value !== null ? {
        fields: fieldValues,
        showIcon: iconCss,
        ariaAttributes: { groupItemRole: "presentation" }
      } : { fields: { value: "text" } };
      return extend({}, options, fields, true);
    };
    DropDownBase2.prototype.setFloatingHeader = function(e) {
      if (!isNullOrUndefined(this.list) && !this.list.classList.contains(dropDownBaseClasses.noData)) {
        if (isNullOrUndefined(this.fixedHeaderElement)) {
          this.fixedHeaderElement = this.createElement("div", { className: dropDownBaseClasses.fixedHead });
          if (!isNullOrUndefined(this.list) && !this.list.querySelector("li").classList.contains(dropDownBaseClasses.group)) {
            this.fixedHeaderElement.style.display = "none";
          }
          if (!isNullOrUndefined(this.fixedHeaderElement) && !isNullOrUndefined(this.list)) {
            prepend([this.fixedHeaderElement], this.list);
          }
          this.setFixedHeader();
        }
        if (!isNullOrUndefined(this.fixedHeaderElement) && this.fixedHeaderElement.style.zIndex === "0") {
          this.setFixedHeader();
        }
        this.scrollStop(e);
      }
    };
    DropDownBase2.prototype.scrollStop = function(e) {
      var target = !isNullOrUndefined(e) ? e.target : this.list;
      var liHeight = parseInt(getComputedStyle(this.getValidLi(), null).getPropertyValue("height"), 10);
      var topIndex = Math.round(target.scrollTop / liHeight);
      var liCollections = this.list.querySelectorAll("li:not(.e-hide-listitem)");
      for (var i = topIndex; i > -1; i--) {
        if (!isNullOrUndefined(liCollections[i]) && liCollections[i].classList.contains(dropDownBaseClasses.group)) {
          var currentLi = liCollections[i];
          this.fixedHeaderElement.innerHTML = currentLi.innerHTML;
          this.fixedHeaderElement.style.top = target.scrollTop + "px";
          this.fixedHeaderElement.style.display = "block";
          break;
        } else {
          this.fixedHeaderElement.style.display = "none";
          this.fixedHeaderElement.style.top = "none";
        }
      }
    };
    DropDownBase2.prototype.getValidLi = function() {
      return this.liCollections[0];
    };
    DropDownBase2.prototype.renderItems = function(listData, fields) {
      var ulElement;
      if (this.itemTemplate && listData) {
        var dataSource = listData;
        if (dataSource && fields.groupBy) {
          if (this.sortOrder !== "None") {
            dataSource = this.getSortedDataSource(dataSource);
          }
          dataSource = ListBase.groupDataSource(dataSource, fields.properties, this.sortOrder);
        } else {
          dataSource = this.getSortedDataSource(dataSource);
        }
        this.sortedData = dataSource;
        var spliceData = dataSource.length > 100 ? new DataManager(dataSource).executeLocal(new Query().take(100)) : dataSource;
        ulElement = this.templateListItem(this.getModuleName() === "autocomplete" ? spliceData : dataSource, fields);
      } else {
        ulElement = this.createListItems(listData, fields);
      }
      return ulElement;
    };
    DropDownBase2.prototype.templateListItem = function(dataSource, fields) {
      var option = this.listOption(dataSource, fields);
      option.templateID = this.itemTemplateId;
      option.isStringTemplate = this.isStringTemplate;
      var itemcheck = this.templateCompiler(this.itemTemplate);
      if (typeof this.itemTemplate !== "function" && itemcheck) {
        var itemValue = select(this.itemTemplate, document).innerHTML.trim();
        return ListBase.renderContentTemplate(this.createElement, itemValue, dataSource, fields.properties, option, this);
      } else {
        return ListBase.renderContentTemplate(this.createElement, this.itemTemplate, dataSource, fields.properties, option, this);
      }
    };
    DropDownBase2.prototype.typeOfData = function(items) {
      var item = { typeof: null, item: null };
      for (var i = 0; !isNullOrUndefined(items) && i < items.length; i++) {
        if (!isNullOrUndefined(items[i])) {
          var listDataType = typeof items[i] === "string" || typeof items[i] === "number" || typeof items[i] === "boolean";
          var isNullData = listDataType ? isNullOrUndefined(items[i]) : isNullOrUndefined(getValue(this.fields.value ? this.fields.value : "value", items[i]));
          if (!isNullData) {
            return item = { typeof: typeof items[i], item: items[i] };
          }
        }
      }
      return item;
    };
    DropDownBase2.prototype.setFixedHeader = function() {
      if (!isNullOrUndefined(this.list)) {
        this.list.parentElement.style.display = "block";
      }
      var borderWidth = 0;
      if (this.list && this.list.parentElement) {
        borderWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-width"), 10);
        if (isNaN(borderWidth)) {
          var borderTopWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-top-width"), 10);
          var borderBottomWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-bottom-width"), 10);
          var borderLeftWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-left-width"), 10);
          var borderRightWidth = parseInt(document.defaultView.getComputedStyle(this.list.parentElement, null).getPropertyValue("border-right-width"), 10);
          borderWidth = borderTopWidth + borderBottomWidth + borderLeftWidth + borderRightWidth;
        }
      }
      if (!isNullOrUndefined(this.liCollections)) {
        var liWidth = this.getValidLi().offsetWidth - borderWidth;
        this.fixedHeaderElement.style.width = liWidth.toString() + "px";
      }
      setStyleAttribute(this.fixedHeaderElement, { zIndex: 10 });
      var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses.group + ":not(.e-hide-listitem)");
      this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
    };
    DropDownBase2.prototype.getSortedDataSource = function(dataSource) {
      if (dataSource && this.sortOrder !== "None") {
        var textField = this.fields.text ? this.fields.text : "text";
        if (this.typeOfData(dataSource).typeof === "string" || this.typeOfData(dataSource).typeof === "number" || this.typeOfData(dataSource).typeof === "boolean") {
          textField = "";
        }
        dataSource = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, textField));
      }
      return dataSource;
    };
    DropDownBase2.prototype.getIndexByValue = function(value) {
      var index;
      var listItems = this.getItems();
      for (var i = 0; i < listItems.length; i++) {
        if (!isNullOrUndefined(value) && listItems[i].getAttribute("data-value") === value.toString()) {
          index = i;
          break;
        }
      }
      return index;
    };
    DropDownBase2.prototype.dispatchEvent = function(element2, type) {
      var evt = document.createEvent("HTMLEvents");
      evt.initEvent(type, false, true);
      if (element2) {
        element2.dispatchEvent(evt);
      }
    };
    DropDownBase2.prototype.setFields = function() {
      if (this.fields.value && !this.fields.text) {
        this.updateFields(this.fields.value, this.fields.value);
      } else if (!this.fields.value && this.fields.text) {
        this.updateFields(this.fields.text, this.fields.text);
      } else if (!this.fields.value && !this.fields.text) {
        this.updateFields("text", "text");
      }
    };
    DropDownBase2.prototype.resetList = function(dataSource, fields, query, e) {
      if (this.list) {
        if (this.element.tagName === "SELECT" && this.element.options.length > 0 || this.element.tagName === "UL" && this.element.childNodes.length > 0) {
          var data = dataSource instanceof Array ? dataSource.length > 0 : !isNullOrUndefined(dataSource);
          if (!data && this.selectData && this.selectData.length > 0) {
            dataSource = this.selectData;
          }
        }
        dataSource = this.getModuleName() === "combobox" && this.selectData && dataSource instanceof Array && dataSource.length < this.selectData.length && this.addedNewItem ? this.selectData : dataSource;
        this.addedNewItem = false;
        this.setListData(dataSource, fields, query, e);
      }
    };
    DropDownBase2.prototype.updateSelectElementData = function(isFiltering) {
      if (isFiltering && isNullOrUndefined(this.selectData) && this.listData && this.listData.length > 0) {
        this.selectData = this.listData;
      }
    };
    DropDownBase2.prototype.updateSelection = function() {
    };
    DropDownBase2.prototype.renderList = function() {
      this.render();
    };
    DropDownBase2.prototype.updateDataSource = function(props) {
      this.resetList(this.dataSource);
    };
    DropDownBase2.prototype.setUpdateInitial = function(props, newProp) {
      this.isDataFetched = false;
      var updateData = {};
      for (var j = 0; props.length > j; j++) {
        if (newProp[props[j]] && props[j] === "fields") {
          this.setFields();
          updateData[props[j]] = newProp[props[j]];
        } else if (newProp[props[j]]) {
          updateData[props[j]] = newProp[props[j]];
        }
      }
      if (Object.keys(updateData).length > 0) {
        if (Object.keys(updateData).indexOf("dataSource") === -1) {
          updateData.dataSource = this.dataSource;
        }
        this.updateDataSource(updateData);
      }
    };
    DropDownBase2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "dropdownbase") {
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      this.setUpdateInitial(["sortOrder", "itemTemplate"], newProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "query":
          case "sortOrder":
          case "dataSource":
          case "itemTemplate":
            break;
          case "enableRtl":
            this.setEnableRtl();
            break;
          case "groupTemplate":
            this.renderGroupTemplate(this.list);
            if (this.ulElement && this.fixedHeaderElement) {
              var firstLi = this.ulElement.querySelector("." + dropDownBaseClasses.group);
              this.fixedHeaderElement.innerHTML = firstLi.innerHTML;
            }
            break;
          case "locale":
            if (this.list && (!isNullOrUndefined(this.liCollections) && this.liCollections.length === 0)) {
              this.l10nUpdate();
            }
            break;
          case "zIndex":
            this.setProperties({ zIndex: newProp.zIndex }, true);
            this.setZIndex();
            break;
        }
      }
    };
    DropDownBase2.prototype.render = function(e, isEmptyData) {
      if (this.getModuleName() === "listbox") {
        this.list = this.createElement("div", { className: dropDownBaseClasses.content, attrs: { "tabindex": "0" } });
      } else {
        this.list = this.createElement("div", { className: dropDownBaseClasses.content });
      }
      this.list.classList.add(dropDownBaseClasses.root);
      this.setFields();
      var rippleModel = { duration: 300, selector: "." + dropDownBaseClasses.li };
      this.rippleFun = rippleEffect(this.list, rippleModel);
      var group = this.element.querySelector("select>optgroup");
      if ((this.fields.groupBy || !isNullOrUndefined(group)) && !this.isGroupChecking) {
        EventHandler.add(this.list, "scroll", this.setFloatingHeader, this);
      }
      if (this.getModuleName() === "dropdownbase") {
        if (this.element.getAttribute("tabindex")) {
          this.list.setAttribute("tabindex", this.element.getAttribute("tabindex"));
        }
        removeClass([this.element], dropDownBaseClasses.root);
        this.element.style.display = "none";
        var wrapperElement = this.createElement("div");
        this.element.parentElement.insertBefore(wrapperElement, this.element);
        wrapperElement.appendChild(this.element);
        wrapperElement.appendChild(this.list);
      }
      this.setEnableRtl();
      if (!isEmptyData) {
        this.initialize(e);
      }
    };
    DropDownBase2.prototype.getModuleName = function() {
      return "dropdownbase";
    };
    DropDownBase2.prototype.getItems = function() {
      return this.ulElement.querySelectorAll("." + dropDownBaseClasses.li);
    };
    DropDownBase2.prototype.addItem = function(items, itemIndex) {
      if (!this.list || this.list.textContent === this.noRecordsTemplate && this.getModuleName() !== "listbox") {
        this.renderList();
      }
      if (this.sortOrder !== "None" && isNullOrUndefined(itemIndex)) {
        var newList = [].slice.call(this.listData);
        newList.push(items);
        newList = this.getSortedDataSource(newList);
        if (this.fields.groupBy) {
          newList = ListBase.groupDataSource(newList, this.fields.properties, this.sortOrder);
          itemIndex = newList.indexOf(items);
        } else {
          itemIndex = newList.indexOf(items);
        }
      }
      var itemsCount = this.getItems().length;
      var selectedItemValue = this.list.querySelector("." + dropDownBaseClasses.selected);
      items = items instanceof Array ? items : [items];
      var index;
      index = isNullOrUndefined(itemIndex) || itemIndex < 0 || itemIndex > itemsCount - 1 ? itemsCount : itemIndex;
      var fields = this.fields;
      if (items && fields.groupBy) {
        items = ListBase.groupDataSource(items, fields.properties);
      }
      var liCollections = [];
      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var isHeader = item.isHeader;
        var li = this.createElement("li", { className: isHeader ? dropDownBaseClasses.group : dropDownBaseClasses.li, id: "option-add-" + i });
        var itemText = item instanceof Object ? getValue(fields.text, item) : item;
        if (isHeader) {
          li.innerText = itemText;
        }
        if (this.itemTemplate && !isHeader) {
          var itemCheck = this.templateCompiler(this.itemTemplate);
          var compiledString = typeof this.itemTemplate !== "function" && itemCheck ? compile(select(this.itemTemplate, document).innerHTML.trim()) : compile(this.itemTemplate);
          var addItemTemplate = compiledString(item, this, "itemTemplate", this.itemTemplateId, this.isStringTemplate, null, li);
          if (addItemTemplate) {
            append(addItemTemplate, li);
          }
        } else if (!isHeader) {
          li.appendChild(document.createTextNode(itemText));
        }
        li.setAttribute("data-value", item instanceof Object ? getValue(fields.value, item) : item);
        li.setAttribute("role", "option");
        this.notify("addItem", { module: "CheckBoxSelection", item: li });
        liCollections.push(li);
        this.listData.push(item);
        if (this.sortOrder === "None" && isNullOrUndefined(itemIndex) && index === 0) {
          index = null;
        }
        this.updateActionCompleteData(li, item, index);
        this.trigger("beforeItemRender", { element: li, item });
      }
      if (itemsCount === 0 && isNullOrUndefined(this.list.querySelector("ul"))) {
        if (!isNullOrUndefined(this.list)) {
          this.list.innerHTML = "";
          this.list.classList.remove(dropDownBaseClasses.noData);
          if (!isNullOrUndefined(this.ulElement)) {
            this.list.appendChild(this.ulElement);
          }
        }
        this.liCollections = liCollections;
        if (!isNullOrUndefined(liCollections) && !isNullOrUndefined(this.ulElement)) {
          append(liCollections, this.ulElement);
        }
        this.updateAddItemList(this.list, itemsCount);
      } else {
        if (this.getModuleName() === "listbox" && itemsCount === 0) {
          this.ulElement.innerHTML = "";
        }
        var attr = [];
        for (var i = 0; i < items.length; i++) {
          var listGroupItem = this.ulElement.querySelectorAll(".e-list-group-item");
          for (var j = 0; j < listGroupItem.length; j++) {
            attr[j] = listGroupItem[j].innerText;
          }
          if (attr.indexOf(liCollections[i].innerText) > -1 && fields.groupBy) {
            for (var j = 0; j < listGroupItem.length; j++) {
              if (attr[j] === liCollections[i].innerText) {
                if (this.sortOrder === "None") {
                  this.ulElement.insertBefore(liCollections[i + 1], listGroupItem[j + 1]);
                } else {
                  this.ulElement.insertBefore(liCollections[i + 1], this.ulElement.childNodes[itemIndex]);
                }
                i = i + 1;
                break;
              }
            }
          } else {
            if (this.liCollections[index]) {
              this.liCollections[index].parentNode.insertBefore(liCollections[i], this.liCollections[index]);
            } else {
              this.ulElement.appendChild(liCollections[i]);
            }
          }
          var tempLi = [].slice.call(this.liCollections);
          tempLi.splice(index, 0, liCollections[i]);
          this.liCollections = tempLi;
          index += 1;
          if (this.getModuleName() === "multiselect") {
            this.updateDataList();
          }
        }
      }
      if (this.getModuleName() === "listbox" && this.isReact) {
        this.renderReactTemplates();
      }
      if (selectedItemValue || itemIndex === 0) {
        this.updateSelection();
      }
      this.addedNewItem = true;
    };
    DropDownBase2.prototype.validationAttribute = function(target, hidden) {
      var name = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      hidden.setAttribute("name", name);
      target.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (!target.getAttribute(attributes2[i])) {
          continue;
        }
        var attr = target.getAttribute(attributes2[i]);
        hidden.setAttribute(attributes2[i], attr);
        target.removeAttribute(attributes2[i]);
      }
    };
    DropDownBase2.prototype.setZIndex = function() {
    };
    DropDownBase2.prototype.updateActionCompleteData = function(li, item, index) {
    };
    DropDownBase2.prototype.updateAddItemList = function(list, itemCount) {
    };
    DropDownBase2.prototype.updateDataList = function() {
    };
    DropDownBase2.prototype.getDataByValue = function(value) {
      if (!isNullOrUndefined(this.listData)) {
        var type = this.typeOfData(this.listData).typeof;
        if (type === "string" || type === "number" || type === "boolean") {
          for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
            var item = _a[_i];
            if (!isNullOrUndefined(item) && item === value) {
              return item;
            }
          }
        } else {
          for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
            var item = _c[_b];
            if (!isNullOrUndefined(item) && getValue(this.fields.value ? this.fields.value : "value", item) === value) {
              return item;
            }
          }
        }
      }
      return null;
    };
    DropDownBase2.prototype.destroy = function() {
      if (document.body.contains(this.list)) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
        if (!isNullOrUndefined(this.rippleFun)) {
          this.rippleFun();
        }
        detach(this.list);
      }
      this.liCollections = null;
      this.ulElement = null;
      this.list = null;
      this.enableRtlElements = null;
      this.rippleFun = null;
      _super.prototype.destroy.call(this);
    };
    __decorate17([
      Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)
    ], DropDownBase2.prototype, "fields", void 0);
    __decorate17([
      Property(null)
    ], DropDownBase2.prototype, "itemTemplate", void 0);
    __decorate17([
      Property(null)
    ], DropDownBase2.prototype, "groupTemplate", void 0);
    __decorate17([
      Property("No records found")
    ], DropDownBase2.prototype, "noRecordsTemplate", void 0);
    __decorate17([
      Property("Request failed")
    ], DropDownBase2.prototype, "actionFailureTemplate", void 0);
    __decorate17([
      Property("None")
    ], DropDownBase2.prototype, "sortOrder", void 0);
    __decorate17([
      Property([])
    ], DropDownBase2.prototype, "dataSource", void 0);
    __decorate17([
      Property(null)
    ], DropDownBase2.prototype, "query", void 0);
    __decorate17([
      Property("StartsWith")
    ], DropDownBase2.prototype, "filterType", void 0);
    __decorate17([
      Property(true)
    ], DropDownBase2.prototype, "ignoreCase", void 0);
    __decorate17([
      Property(1e3)
    ], DropDownBase2.prototype, "zIndex", void 0);
    __decorate17([
      Property(false)
    ], DropDownBase2.prototype, "ignoreAccent", void 0);
    __decorate17([
      Property()
    ], DropDownBase2.prototype, "locale", void 0);
    __decorate17([
      Event()
    ], DropDownBase2.prototype, "actionBegin", void 0);
    __decorate17([
      Event()
    ], DropDownBase2.prototype, "actionComplete", void 0);
    __decorate17([
      Event()
    ], DropDownBase2.prototype, "actionFailure", void 0);
    __decorate17([
      Event()
    ], DropDownBase2.prototype, "select", void 0);
    __decorate17([
      Event()
    ], DropDownBase2.prototype, "dataBound", void 0);
    __decorate17([
      Event()
    ], DropDownBase2.prototype, "created", void 0);
    __decorate17([
      Event()
    ], DropDownBase2.prototype, "destroyed", void 0);
    DropDownBase2 = __decorate17([
      NotifyPropertyChanges
    ], DropDownBase2);
    return DropDownBase2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/drop-down-list/drop-down-list.js
var __extends21 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate18 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var dropDownListClasses = {
  root: "e-dropdownlist",
  hover: dropDownBaseClasses.hover,
  selected: dropDownBaseClasses.selected,
  rtl: dropDownBaseClasses.rtl,
  li: dropDownBaseClasses.li,
  disable: dropDownBaseClasses.disabled,
  base: dropDownBaseClasses.root,
  focus: dropDownBaseClasses.focus,
  input: "e-input-group",
  inputFocus: "e-input-focus",
  icon: "e-input-group-icon e-ddl-icon",
  iconAnimation: "e-icon-anim",
  value: "e-input-value",
  device: "e-ddl-device",
  backIcon: "e-input-group-icon e-back-icon e-icons",
  filterBarClearIcon: "e-input-group-icon e-clear-icon e-icons",
  filterInput: "e-input-filter",
  filterParent: "e-filter-parent",
  mobileFilter: "e-ddl-device-filter",
  footer: "e-ddl-footer",
  header: "e-ddl-header",
  clearIcon: "e-clear-icon",
  clearIconHide: "e-clear-icon-hide",
  popupFullScreen: "e-popup-full-page",
  disableIcon: "e-ddl-disable-icon",
  hiddenElement: "e-ddl-hidden"
};
var inputObject = {
  container: null,
  buttons: []
};
var DropDownList = (
  /** @class */
  function(_super) {
    __extends21(DropDownList2, _super);
    function DropDownList2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isListSearched = false;
      _this.preventChange = false;
      _this.isAngular = false;
      return _this;
    }
    DropDownList2.prototype.preRender = function() {
      this.valueTempElement = null;
      this.element.style.opacity = "0";
      this.initializeData();
      _super.prototype.preRender.call(this);
      this.activeIndex = this.index;
      this.queryString = "";
    };
    DropDownList2.prototype.initializeData = function() {
      this.isPopupOpen = false;
      this.isDocumentClick = false;
      this.isInteracted = false;
      this.isFilterFocus = false;
      this.beforePopupOpen = false;
      this.initial = true;
      this.initRemoteRender = false;
      this.isNotSearchList = false;
      this.isTyped = false;
      this.isSelected = false;
      this.preventFocus = false;
      this.preventAutoFill = false;
      this.isValidKey = false;
      this.typedString = "";
      this.isEscapeKey = false;
      this.isPreventBlur = false;
      this.isTabKey = false;
      this.actionCompleteData = { isUpdated: false };
      this.actionData = { isUpdated: false };
      this.prevSelectPoints = {};
      this.isSelectCustom = false;
      this.isDropDownClick = false;
      this.preventAltUp = false;
      this.isCustomFilter = false;
      this.isSecondClick = false;
      this.previousValue = null;
      this.keyConfigure = {
        tab: "tab",
        enter: "13",
        escape: "27",
        end: "35",
        home: "36",
        down: "40",
        up: "38",
        pageUp: "33",
        pageDown: "34",
        open: "alt+40",
        close: "shift+tab",
        hide: "alt+38",
        space: "32"
      };
    };
    DropDownList2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({ "zIndex": this.zIndex });
      }
    };
    DropDownList2.prototype.renderList = function(e, isEmptyData) {
      _super.prototype.render.call(this, e, isEmptyData);
      this.unWireListEvents();
      this.wireListEvents();
    };
    DropDownList2.prototype.floatLabelChange = function() {
      if (this.getModuleName() === "dropdownlist" && this.floatLabelType === "Auto") {
        var floatElement = this.inputWrapper.container.querySelector(".e-float-text");
        if (this.inputElement.value !== "" || this.isInteracted) {
          classList(floatElement, ["e-label-top"], ["e-label-bottom"]);
        } else {
          classList(floatElement, ["e-label-bottom"], ["e-label-top"]);
        }
      }
    };
    DropDownList2.prototype.resetHandler = function(e) {
      e.preventDefault();
      this.clearAll(e);
    };
    DropDownList2.prototype.resetFocusElement = function() {
      this.removeHover();
      this.removeSelection();
      this.removeFocus();
      this.list.scrollTop = 0;
      if (this.getModuleName() !== "autocomplete" && !isNullOrUndefined(this.ulElement)) {
        var li = this.ulElement.querySelector("." + dropDownListClasses.li);
        if (li) {
          li.classList.add(dropDownListClasses.focus);
        }
      }
    };
    DropDownList2.prototype.clearAll = function(e, properties) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      if (isNullOrUndefined(properties) || !isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {
        this.isActive = true;
        this.resetSelection(properties);
      }
      var dataItem = this.getItemData();
      if (this.previousValue === dataItem.value) {
        return;
      }
      this.onChangeEvent(e);
    };
    DropDownList2.prototype.resetSelection = function(properties) {
      if (this.list) {
        if (!isNullOrUndefined(properties) && (isNullOrUndefined(properties.dataSource) || !(properties.dataSource instanceof DataManager) && properties.dataSource.length === 0)) {
          this.selectedLI = null;
          this.actionCompleteData.isUpdated = false;
          this.actionCompleteData.ulElement = null;
          this.actionCompleteData.list = null;
          this.resetList(properties.dataSource);
        } else {
          if (this.allowFiltering && this.getModuleName() !== "autocomplete" && !isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list) && this.actionCompleteData.list.length > 0) {
            this.onActionComplete(this.actionCompleteData.ulElement.cloneNode(true), this.actionCompleteData.list);
          }
          this.resetFocusElement();
        }
      }
      if (!isNullOrUndefined(this.hiddenElement)) {
        this.hiddenElement.innerHTML = "";
      }
      if (!isNullOrUndefined(this.inputElement)) {
        this.inputElement.value = "";
      }
      this.value = null;
      this.itemData = null;
      this.text = null;
      this.index = null;
      this.activeIndex = null;
      this.item = null;
      this.queryString = "";
      if (this.valueTempElement) {
        detach(this.valueTempElement);
        this.inputElement.style.display = "block";
        this.valueTempElement = null;
      }
      this.setSelection(null, null);
      this.isSelectCustom = false;
      this.updateIconState();
      this.cloneElements();
    };
    DropDownList2.prototype.setHTMLAttributes = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          if (htmlAttr === "class") {
            var updatedClassValue = this.htmlAttributes["" + htmlAttr].replace(/\s+/g, " ").trim();
            if (updatedClassValue !== "") {
              addClass([this.inputWrapper.container], updatedClassValue.split(" "));
            }
          } else if (htmlAttr === "disabled" && this.htmlAttributes["" + htmlAttr] === "disabled") {
            this.enabled = false;
            this.setEnable();
          } else if (htmlAttr === "readonly" && !isNullOrUndefined(this.htmlAttributes["" + htmlAttr])) {
            this.readonly = true;
            this.dataBind();
          } else if (htmlAttr === "style") {
            this.inputWrapper.container.setAttribute("style", this.htmlAttributes["" + htmlAttr]);
          } else if (htmlAttr === "aria-label") {
            if (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") {
              this.inputElement.setAttribute("aria-label", this.htmlAttributes["" + htmlAttr]);
            } else {
              this.inputWrapper.container.setAttribute("aria-label", this.htmlAttributes["" + htmlAttr]);
            }
          } else {
            var defaultAttr = [
              "title",
              "id",
              "placeholder",
              "role",
              "autocomplete",
              "autocapitalize",
              "spellcheck",
              "minlength",
              "maxlength"
            ];
            var validateAttr = ["name", "required"];
            if (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") {
              defaultAttr.push("tabindex");
            }
            if (validateAttr.indexOf(htmlAttr) > -1 || htmlAttr.indexOf("data") === 0) {
              this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            } else if (defaultAttr.indexOf(htmlAttr) > -1) {
              if (htmlAttr === "placeholder") {
                Input.setPlaceholder(this.htmlAttributes["" + htmlAttr], this.inputElement);
              } else {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
            } else {
              this.inputWrapper.container.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            }
          }
        }
      }
      if (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") {
        this.inputWrapper.container.removeAttribute("tabindex");
      }
    };
    DropDownList2.prototype.getAriaAttributes = function() {
      return {
        "aria-disabled": "false",
        "role": "combobox",
        "aria-expanded": "false",
        "aria-live": "polite",
        "aria-labelledby": this.hiddenElement.id
      };
    };
    DropDownList2.prototype.setEnableRtl = function() {
      Input.setEnableRtl(this.enableRtl, [this.inputElement.parentElement]);
      if (this.popupObj) {
        this.popupObj.enableRtl = this.enableRtl;
        this.popupObj.dataBind();
      }
    };
    DropDownList2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputElement);
      if (this.enabled) {
        removeClass([this.inputWrapper.container], dropDownListClasses.disable);
        this.inputElement.setAttribute("aria-disabled", "false");
        this.targetElement().setAttribute("tabindex", this.tabIndex);
      } else {
        this.hidePopup();
        addClass([this.inputWrapper.container], dropDownListClasses.disable);
        this.inputElement.setAttribute("aria-disabled", "true");
        this.targetElement().tabIndex = -1;
      }
    };
    DropDownList2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    DropDownList2.prototype.getLocaleName = function() {
      return "drop-down-list";
    };
    DropDownList2.prototype.preventTabIndex = function(element2) {
      if (this.getModuleName() === "dropdownlist") {
        element2.tabIndex = -1;
      }
    };
    DropDownList2.prototype.targetElement = function() {
      return !isNullOrUndefined(this.inputWrapper) ? this.inputWrapper.container : null;
    };
    DropDownList2.prototype.getNgDirective = function() {
      return "EJS-DROPDOWNLIST";
    };
    DropDownList2.prototype.getElementByText = function(text) {
      return this.getElementByValue(this.getValueByText(text));
    };
    DropDownList2.prototype.getElementByValue = function(value) {
      var item;
      var listItems = this.getItems();
      for (var _i = 0, listItems_1 = listItems; _i < listItems_1.length; _i++) {
        var liItem = listItems_1[_i];
        if (this.getFormattedValue(liItem.getAttribute("data-value")) === value) {
          item = liItem;
          break;
        }
      }
      return item;
    };
    DropDownList2.prototype.initValue = function() {
      this.renderList();
      if (this.dataSource instanceof DataManager) {
        this.initRemoteRender = true;
      } else {
        this.updateValues();
      }
    };
    DropDownList2.prototype.updateValues = function() {
      if (!isNullOrUndefined(this.value)) {
        this.setSelection(this.getElementByValue(this.value), null);
      } else if (this.text && isNullOrUndefined(this.value)) {
        var element2 = this.getElementByText(this.text);
        if (isNullOrUndefined(element2)) {
          this.setProperties({ text: null });
          return;
        } else {
          this.setSelection(element2, null);
        }
      } else {
        this.setSelection(this.liCollections[this.activeIndex], null);
      }
      this.setHiddenValue();
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    DropDownList2.prototype.onBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      var target = e.relatedTarget;
      var currentTarget = e.target;
      var isPreventBlur = this.isPreventBlur;
      this.isPreventBlur = false;
      if (isPreventBlur && !this.isDocumentClick && this.isPopupOpen && (!isNullOrUndefined(currentTarget) || !this.isFilterLayout() && isNullOrUndefined(target))) {
        if (this.getModuleName() === "dropdownlist" && this.allowFiltering && this.isPopupOpen) {
          this.filterInput.focus();
        } else {
          this.targetElement().focus();
        }
        return;
      }
      if (this.isDocumentClick || !isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && this.popupObj.element.classList.contains(dropDownListClasses.mobileFilter)) {
        if (!this.beforePopupOpen) {
          this.isDocumentClick = false;
        }
        return;
      }
      if (this.getModuleName() === "dropdownlist" && !this.isFilterFocus && target !== this.inputElement && (document.activeElement !== target || document.activeElement === target && currentTarget.classList.contains(dropDownListClasses.inputFocus)) || isNullOrUndefined(target) && this.getModuleName() === "dropdownlist" && this.allowFiltering && currentTarget !== this.inputWrapper.container || this.getModuleName() !== "dropdownlist" && !this.inputWrapper.container.contains(target) || this.isTabKey) {
        this.isDocumentClick = this.isPopupOpen ? true : false;
        this.focusOutAction(e);
        this.isTabKey = false;
      }
      if (this.isRequested && !this.isPopupOpen && !this.isPreventBlur) {
        this.isActive = false;
        this.beforePopupOpen = false;
      }
    };
    DropDownList2.prototype.focusOutAction = function(e) {
      this.isInteracted = false;
      this.focusOut(e);
      this.onFocusOut();
    };
    DropDownList2.prototype.onFocusOut = function() {
      if (!this.enabled) {
        return;
      }
      if (this.isSelected) {
        this.isSelectCustom = false;
        this.onChangeEvent(null);
      }
      this.floatLabelChange();
      this.dispatchEvent(this.hiddenElement, "change");
      if (this.getModuleName() === "dropdownlist" && this.element.tagName !== "INPUT") {
        this.dispatchEvent(this.inputElement, "blur");
      }
      if (this.inputWrapper.clearButton) {
        addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
      }
      this.trigger("blur");
    };
    DropDownList2.prototype.onFocus = function(e) {
      if (!this.isInteracted) {
        this.isInteracted = true;
        var args = { isInteracted: e ? true : false, event: e };
        this.trigger("focus", args);
      }
      this.updateIconState();
    };
    DropDownList2.prototype.resetValueHandler = function(e) {
      var formElement = closest(this.inputElement, "form");
      if (formElement && e.target === formElement) {
        var val = this.element.tagName === this.getNgDirective() ? null : this.inputElement.getAttribute("value");
        this.text = val;
      }
    };
    DropDownList2.prototype.wireEvent = function() {
      EventHandler.add(this.inputWrapper.container, "mousedown", this.dropDownClick, this);
      EventHandler.add(this.inputWrapper.container, "focus", this.focusIn, this);
      EventHandler.add(this.inputWrapper.container, "keypress", this.onSearch, this);
      this.bindCommonEvent();
    };
    DropDownList2.prototype.bindCommonEvent = function() {
      EventHandler.add(this.targetElement(), "blur", this.onBlurHandler, this);
      var formElement = closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      if (!Browser.isDevice) {
        this.keyboardModule = new KeyboardEvents(this.targetElement(), {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
      } else {
        this.keyboardModule = new KeyboardEvents(this.targetElement(), {
          keyAction: this.mobileKeyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
      }
      this.bindClearEvent();
    };
    DropDownList2.prototype.bindClearEvent = function() {
      if (this.showClearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
    };
    DropDownList2.prototype.unBindCommonEvent = function() {
      if (!isNullOrUndefined(this.inputWrapper) && this.targetElement()) {
        EventHandler.remove(this.targetElement(), "blur", this.onBlurHandler);
      }
      var formElement = this.inputElement && closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.remove(formElement, "reset", this.resetValueHandler);
      }
      if (!Browser.isDevice) {
        this.keyboardModule.destroy();
      }
      if (this.showClearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown", this.resetHandler);
      }
    };
    DropDownList2.prototype.updateIconState = function() {
      if (this.showClearButton) {
        if (this.inputElement.value !== "" && !this.readonly) {
          removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        } else {
          addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        }
      }
    };
    DropDownList2.prototype.wireListEvents = function() {
      if (!isNullOrUndefined(this.list)) {
        EventHandler.add(this.list, "click", this.onMouseClick, this);
        EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
      }
    };
    DropDownList2.prototype.onSearch = function(e) {
      if (e.charCode !== 32 && e.charCode !== 13) {
        if (this.list === void 0) {
          this.renderList();
        }
        this.searchKeyEvent = e;
        this.onServerIncrementalSearch(e);
      }
    };
    DropDownList2.prototype.onServerIncrementalSearch = function(e) {
      if (!this.isRequested && !isNullOrUndefined(this.list) && !isNullOrUndefined(this.list.querySelector("li")) && this.enabled && !this.readonly) {
        this.incrementalSearch(e);
      }
    };
    DropDownList2.prototype.onMouseClick = function(e) {
      var target = e.target;
      var li = closest(target, "." + dropDownBaseClasses.li);
      if (!this.isValidLI(li)) {
        return;
      }
      this.setSelection(li, e);
      if (Browser.isDevice && this.isFilterLayout()) {
        history.back();
      } else {
        var delay = 100;
        this.closePopup(delay, e);
      }
    };
    DropDownList2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      this.setHover(currentLi);
    };
    DropDownList2.prototype.setHover = function(li) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      }
    };
    DropDownList2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    DropDownList2.prototype.removeHover = function() {
      if (this.list) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.hover);
        }
      }
    };
    DropDownList2.prototype.isValidLI = function(li) {
      return li && li.hasAttribute("role") && li.getAttribute("role") === "option";
    };
    DropDownList2.prototype.incrementalSearch = function(e) {
      if (this.liCollections.length > 0) {
        var li = incrementalSearch(e.charCode, this.liCollections, this.activeIndex, true, this.element.id);
        if (!isNullOrUndefined(li)) {
          this.setSelection(li, e);
          this.setScrollPosition();
        }
      }
    };
    DropDownList2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], dropDownListClasses.disableIcon);
        this.spinnerElement.innerHTML = "";
        this.spinnerElement = null;
      }
    };
    DropDownList2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        this.spinnerElement = Browser.isDevice && !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[1] || !isNullOrUndefined(this.filterInputObj) && this.filterInputObj.buttons[0] || this.inputWrapper.buttons[0];
        addClass([this.spinnerElement], dropDownListClasses.disableIcon);
        createSpinner({
          target: this.spinnerElement,
          width: Browser.isDevice ? "16px" : "14px"
        }, this.createElement);
        showSpinner(this.spinnerElement);
      }
    };
    DropDownList2.prototype.keyActionHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      var preventAction = e.action === "pageUp" || e.action === "pageDown";
      var preventHomeEnd = this.getModuleName() !== "dropdownlist" && (e.action === "home" || e.action === "end");
      this.isEscapeKey = e.action === "escape";
      this.isTabKey = !this.isPopupOpen && e.action === "tab";
      var isNavigation = e.action === "down" || e.action === "up" || e.action === "pageUp" || e.action === "pageDown" || e.action === "home" || e.action === "end";
      if ((this.isEditTextBox() || preventAction || preventHomeEnd) && !this.isPopupOpen) {
        return;
      }
      if (!this.readonly) {
        var isTabAction = e.action === "tab" || e.action === "close";
        if (isNullOrUndefined(this.list) && !this.isRequested && !isTabAction && e.action !== "escape") {
          this.searchKeyEvent = e;
          this.renderList(e);
        }
        if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {
          return;
        }
        if (isTabAction && this.getModuleName() !== "autocomplete" && this.isPopupOpen || e.action === "escape") {
          e.preventDefault();
        }
        this.isSelected = e.action === "escape" ? false : this.isSelected;
        this.isTyped = isNavigation || e.action === "escape" ? false : this.isTyped;
        switch (e.action) {
          case "down":
          case "up":
            this.updateUpDownAction(e);
            break;
          case "pageUp":
            this.pageUpSelection(this.activeIndex - this.getPageCount(), e);
            e.preventDefault();
            break;
          case "pageDown":
            this.pageDownSelection(this.activeIndex + this.getPageCount(), e);
            e.preventDefault();
            break;
          case "home":
            this.updateHomeEndAction(e);
            break;
          case "end":
            this.updateHomeEndAction(e);
            break;
          case "space":
            if (this.getModuleName() === "dropdownlist") {
              if (!this.beforePopupOpen) {
                this.showPopup();
              }
            }
            break;
          case "open":
            this.showPopup(e);
            break;
          case "hide":
            this.preventAltUp = this.isPopupOpen;
            this.hidePopup(e);
            this.focusDropDown(e);
            break;
          case "enter":
            this.selectCurrentItem(e);
            break;
          case "tab":
            this.selectCurrentValueOnTab(e);
            break;
          case "escape":
          case "close":
            if (this.isPopupOpen) {
              this.hidePopup(e);
              this.focusDropDown(e);
            }
            break;
        }
      }
    };
    DropDownList2.prototype.updateUpDownAction = function(e) {
      var focusEle = this.list.querySelector("." + dropDownListClasses.focus);
      if (this.isSelectFocusItem(focusEle)) {
        this.setSelection(focusEle, e);
      } else if (!isNullOrUndefined(this.liCollections)) {
        var index = e.action === "down" ? this.activeIndex + 1 : this.activeIndex - 1;
        var startIndex = 0;
        if (this.getModuleName() === "autocomplete") {
          startIndex = e.action === "down" && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;
          index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;
        }
        var nextItem = void 0;
        if (this.getModuleName() !== "autocomplete" || this.getModuleName() === "autocomplete" && this.isPopupOpen) {
          nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];
        }
        if (!isNullOrUndefined(nextItem)) {
          this.setSelection(nextItem, e);
        }
      }
      e.preventDefault();
    };
    DropDownList2.prototype.updateHomeEndAction = function(e) {
      if (this.getModuleName() === "dropdownlist") {
        var findLi = 0;
        if (e.action === "home") {
          findLi = 0;
        } else {
          findLi = this.getItems().length - 1;
        }
        e.preventDefault();
        if (this.activeIndex === findLi) {
          return;
        }
        this.setSelection(this.liCollections[findLi], e);
      }
    };
    DropDownList2.prototype.selectCurrentValueOnTab = function(e) {
      if (this.getModuleName() === "autocomplete") {
        this.selectCurrentItem(e);
      } else {
        if (this.isPopupOpen) {
          this.hidePopup(e);
          this.focusDropDown(e);
        }
      }
    };
    DropDownList2.prototype.mobileKeyActionHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isEditTextBox() && !this.isPopupOpen) {
        return;
      }
      if (!this.readonly) {
        if (this.list === void 0 && !this.isRequested) {
          this.searchKeyEvent = e;
          this.renderList();
        }
        if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0 || this.isRequested) {
          return;
        }
        if (e.action === "enter") {
          this.selectCurrentItem(e);
        }
      }
    };
    DropDownList2.prototype.selectCurrentItem = function(e) {
      if (this.isPopupOpen) {
        var li = this.list.querySelector("." + dropDownListClasses.focus);
        if (li) {
          this.setSelection(li, e);
          this.isTyped = false;
        }
        if (this.isSelected) {
          this.isSelectCustom = false;
          this.onChangeEvent(e);
        }
        this.hidePopup(e);
        this.focusDropDown(e);
      } else {
        this.showPopup();
      }
    };
    DropDownList2.prototype.isSelectFocusItem = function(element2) {
      return !isNullOrUndefined(element2);
    };
    DropDownList2.prototype.getPageCount = function() {
      var liHeight = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue("height");
      return Math.round(this.list.getBoundingClientRect().height / parseInt(liHeight, 10));
    };
    DropDownList2.prototype.pageUpSelection = function(steps, event) {
      var previousItem = steps >= 0 ? this.liCollections[steps + 1] : this.liCollections[0];
      this.setSelection(previousItem, event);
    };
    DropDownList2.prototype.pageDownSelection = function(steps, event) {
      var list = this.getItems();
      var previousItem = steps <= list.length ? this.liCollections[steps - 1] : this.liCollections[list.length - 1];
      this.setSelection(previousItem, event);
    };
    DropDownList2.prototype.unWireEvent = function() {
      if (!isNullOrUndefined(this.inputWrapper)) {
        EventHandler.remove(this.inputWrapper.container, "mousedown", this.dropDownClick);
        EventHandler.remove(this.inputWrapper.container, "keypress", this.onSearch);
        EventHandler.remove(this.inputWrapper.container, "focus", this.focusIn);
      }
      this.unBindCommonEvent();
    };
    DropDownList2.prototype.unWireListEvents = function() {
      if (this.list) {
        EventHandler.remove(this.list, "click", this.onMouseClick);
        EventHandler.remove(this.list, "mouseover", this.onMouseOver);
        EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
      }
    };
    DropDownList2.prototype.checkSelector = function(id) {
      return '[id="' + id.replace(/(:|\.|\[|\]|,|=|@|\\|\/|#)/g, "\\$1") + '"]';
    };
    DropDownList2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (!(!isNullOrUndefined(this.popupObj) && closest(target, this.checkSelector(this.popupObj.element.id))) && !isNullOrUndefined(this.inputWrapper) && !this.inputWrapper.container.contains(e.target)) {
        if (this.inputWrapper.container.classList.contains(dropDownListClasses.inputFocus) || this.isPopupOpen) {
          this.isDocumentClick = true;
          var isActive = this.isRequested;
          this.isInteracted = false;
          this.hidePopup(e);
          if (!isActive) {
            this.onFocusOut();
            this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
          }
        }
      } else if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && !(this.getModuleName() === "combobox" && !this.allowFiltering && Browser.isDevice && target === this.inputWrapper.buttons[0])) {
        this.isPreventBlur = (Browser.isIE || Browser.info.name === "edge") && (document.activeElement === this.targetElement() || document.activeElement === this.filterInput);
        e.preventDefault();
      }
    };
    DropDownList2.prototype.activeStateChange = function() {
      if (this.isDocumentClick) {
        this.hidePopup();
        this.onFocusOut();
        this.inputWrapper.container.classList.remove(dropDownListClasses.inputFocus);
      }
    };
    DropDownList2.prototype.focusDropDown = function(e) {
      if (!this.initial && this.isFilterLayout()) {
        this.focusIn(e);
      }
    };
    DropDownList2.prototype.dropDownClick = function(e) {
      if (e.which === 3 || e.button === 2) {
        return;
      }
      if (this.targetElement().classList.contains(dropDownListClasses.disable) || this.inputWrapper.clearButton === e.target) {
        return;
      }
      var target = e.target;
      if (target !== this.inputElement && !(this.allowFiltering && target === this.filterInput) && this.getModuleName() !== "combobox") {
        e.preventDefault();
      }
      if (!this.readonly) {
        if (this.isPopupOpen) {
          this.hidePopup(e);
          if (this.isFilterLayout()) {
            this.focusDropDown(e);
          }
        } else {
          this.focusIn(e);
          this.floatLabelChange();
          this.queryString = this.inputElement.value.trim() === "" ? null : this.inputElement.value;
          this.isDropDownClick = true;
          this.showPopup(e);
        }
        var proxy_1 = this;
        var duration = this.element.tagName === this.getNgDirective() && this.itemTemplate ? 500 : 100;
        if (!this.isSecondClick) {
          setTimeout(function() {
            proxy_1.cloneElements();
            proxy_1.isSecondClick = true;
          }, duration);
        }
      } else {
        this.focusIn(e);
      }
    };
    DropDownList2.prototype.cloneElements = function() {
      if (this.list) {
        var ulElement = this.list.querySelector("ul");
        if (ulElement) {
          ulElement = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
          this.actionCompleteData.ulElement = ulElement;
        }
      }
    };
    DropDownList2.prototype.updateSelectedItem = function(li, e, preventSelect, isSelection) {
      var _this = this;
      this.removeSelection();
      li.classList.add(dropDownBaseClasses.selected);
      this.removeHover();
      var value = li.getAttribute("data-value") !== "null" ? this.getFormattedValue(li.getAttribute("data-value")) : null;
      var selectedData = this.getDataByValue(value);
      if (!this.initial && !preventSelect && !isNullOrUndefined(e)) {
        var items = this.detachChanges(selectedData);
        this.isSelected = true;
        var eventArgs = {
          e,
          item: li,
          itemData: items,
          isInteracted: e ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            li.classList.remove(dropDownBaseClasses.selected);
          } else {
            _this.selectEventCallback(li, e, preventSelect, selectedData, value);
            if (isSelection) {
              _this.setSelectOptions(li, e);
            }
          }
        });
      } else {
        this.selectEventCallback(li, e, preventSelect, selectedData, value);
        if (isSelection) {
          this.setSelectOptions(li, e);
        }
      }
    };
    DropDownList2.prototype.selectEventCallback = function(li, e, preventSelect, selectedData, value) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      if (this.itemData != selectedData) {
        this.previousValue = !isNullOrUndefined(this.itemData) ? typeof this.itemData == "object" ? this.checkFieldValue(this.itemData, this.fields.value.split(".")) : this.itemData : null;
      }
      this.item = li;
      this.itemData = selectedData;
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (focusedItem) {
        removeClass([focusedItem], dropDownBaseClasses.focus);
      }
      li.setAttribute("aria-selected", "true");
      this.activeIndex = this.getIndexByValue(value);
    };
    DropDownList2.prototype.activeItem = function(li) {
      if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.selected)) {
        this.removeSelection();
        li.classList.add(dropDownBaseClasses.selected);
        this.removeHover();
        li.setAttribute("aria-selected", "true");
      }
    };
    DropDownList2.prototype.setValue = function(e) {
      var dataItem = this.getItemData();
      if (dataItem.value === null) {
        Input.setValue(null, this.inputElement, this.floatLabelType, this.showClearButton);
      } else {
        Input.setValue(dataItem.text, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      if (this.valueTemplate && this.itemData !== null) {
        this.setValueTemplate();
      } else if (!isNullOrUndefined(this.valueTempElement) && this.inputElement.previousSibling === this.valueTempElement) {
        detach(this.valueTempElement);
        this.inputElement.style.display = "block";
      }
      var clearIcon2 = dropDownListClasses.clearIcon;
      var isFilterElement = this.isFiltering() && this.filterInput && this.getModuleName() === "combobox";
      var clearElement = isFilterElement && this.filterInput.parentElement.querySelector("." + clearIcon2);
      if (this.isFiltering() && clearElement) {
        clearElement.style.removeProperty("visibility");
      }
      if (this.previousValue === dataItem.value) {
        this.isSelected = false;
        return true;
      } else {
        this.isSelected = !this.initial ? true : false;
        this.isSelectCustom = false;
        if (this.getModuleName() === "dropdownlist") {
          this.updateIconState();
        }
        return false;
      }
    };
    DropDownList2.prototype.setSelection = function(li, e) {
      if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {
        this.updateSelectedItem(li, e, false, true);
      } else {
        this.setSelectOptions(li, e);
      }
    };
    DropDownList2.prototype.setSelectOptions = function(li, e) {
      if (this.list) {
        this.removeHover();
      }
      this.previousSelectedLI = !isNullOrUndefined(this.selectedLI) ? this.selectedLI : null;
      this.selectedLI = li;
      if (this.setValue(e)) {
        return;
      }
      if (!this.isPopupOpen && !isNullOrUndefined(li) || this.isPopupOpen && !isNullOrUndefined(e) && (e.type !== "keydown" || e.type === "keydown" && e.action === "enter")) {
        this.isSelectCustom = false;
        this.onChangeEvent(e);
      }
      if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI) && this.itemData !== null && (!e || e.type !== "click")) {
        this.setScrollPosition(e);
      }
      if (Browser.info.name !== "mozilla") {
        if (this.targetElement()) {
          attributes(this.targetElement(), { "aria-describedby": this.inputElement.id !== "" ? this.inputElement.id : this.element.id });
          this.targetElement().removeAttribute("aria-live");
        }
      }
      if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
        attributes(this.targetElement(), { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
      } else if (this.isPopupOpen && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-active")[0])) {
        attributes(this.targetElement(), { "aria-activedescendant": this.ulElement.getElementsByClassName("e-active")[0].id });
      }
    };
    DropDownList2.prototype.dropdownCompiler = function(dropdownTemplate) {
      var checkTemplate = false;
      if (typeof dropdownTemplate !== "function" && dropdownTemplate) {
        try {
          checkTemplate = document.querySelectorAll(dropdownTemplate).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    DropDownList2.prototype.setValueTemplate = function() {
      var compiledString;
      if (this.isReact) {
        this.clearTemplate(["valueTemplate"]);
        if (this.valueTempElement) {
          detach(this.valueTempElement);
          this.inputElement.style.display = "block";
          this.valueTempElement = null;
        }
      }
      if (!this.valueTempElement) {
        this.valueTempElement = this.createElement("span", { className: dropDownListClasses.value });
        this.inputElement.parentElement.insertBefore(this.valueTempElement, this.inputElement);
        this.inputElement.style.display = "none";
      }
      if (!this.isReact) {
        this.valueTempElement.innerHTML = "";
      }
      var valuecheck = this.dropdownCompiler(this.valueTemplate);
      if (typeof this.valueTemplate !== "function" && valuecheck) {
        compiledString = compile(document.querySelector(this.valueTemplate).innerHTML.trim());
      } else {
        compiledString = compile(this.valueTemplate);
      }
      var valueCompTemp = compiledString(this.itemData, this, "valueTemplate", this.valueTemplateId, this.isStringTemplate, null, this.valueTempElement);
      if (valueCompTemp && valueCompTemp.length > 0) {
        append(valueCompTemp, this.valueTempElement);
      }
      this.renderReactTemplates();
    };
    DropDownList2.prototype.removeSelection = function() {
      if (this.list) {
        var selectedItems = this.list.querySelectorAll("." + dropDownBaseClasses.selected);
        if (selectedItems.length) {
          removeClass(selectedItems, dropDownBaseClasses.selected);
          selectedItems[0].removeAttribute("aria-selected");
        }
      }
    };
    DropDownList2.prototype.getItemData = function() {
      var fields = this.fields;
      var dataItem = null;
      dataItem = this.itemData;
      var dataValue;
      var dataText;
      if (!isNullOrUndefined(dataItem)) {
        dataValue = getValue(fields.value, dataItem);
        dataText = getValue(fields.text, dataItem);
      }
      var value = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataValue : dataItem;
      var text = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataText : dataItem;
      return { value, text };
    };
    DropDownList2.prototype.onChangeEvent = function(eve) {
      var dataItem = this.getItemData();
      var index = this.isSelectCustom ? null : this.activeIndex;
      this.setProperties({ "index": index, "text": dataItem.text, "value": dataItem.value }, true);
      this.detachChangeEvent(eve);
    };
    DropDownList2.prototype.detachChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    DropDownList2.prototype.detachChangeEvent = function(eve) {
      this.isSelected = false;
      this.previousValue = this.value;
      this.activeIndex = this.index;
      this.typedString = !isNullOrUndefined(this.text) ? this.text : "";
      if (!this.initial) {
        var items = this.detachChanges(this.itemData);
        var preItems = void 0;
        if (typeof this.previousItemData === "string" || typeof this.previousItemData === "boolean" || typeof this.previousItemData === "number") {
          preItems = Object.defineProperties({}, {
            value: {
              value: this.previousItemData,
              enumerable: true
            },
            text: {
              value: this.previousItemData,
              enumerable: true
            }
          });
        } else {
          preItems = this.previousItemData;
        }
        this.setHiddenValue();
        var eventArgs = {
          e: eve,
          item: this.item,
          itemData: items,
          previousItem: this.previousSelectedLI,
          previousItemData: preItems,
          isInteracted: eve ? true : false,
          value: this.value,
          element: this.element,
          event: eve
        };
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", eventArgs);
        }
      }
      if ((isNullOrUndefined(this.value) || this.value === "") && this.floatLabelType !== "Always") {
        removeClass([this.inputWrapper.container], "e-valid-input");
      }
    };
    DropDownList2.prototype.setHiddenValue = function() {
      if (!isNullOrUndefined(this.value)) {
        if (this.hiddenElement.querySelector("option")) {
          var selectedElement = this.hiddenElement.querySelector("option");
          selectedElement.textContent = this.text;
          selectedElement.setAttribute("value", this.value.toString());
        } else {
          if (!isNullOrUndefined(this.hiddenElement)) {
            this.hiddenElement.innerHTML = "<option selected>" + this.text + "</option>";
            var selectedElement = this.hiddenElement.querySelector("option");
            selectedElement.setAttribute("value", this.value.toString());
          }
        }
      } else {
        this.hiddenElement.innerHTML = "";
      }
    };
    DropDownList2.prototype.onFilterUp = function(e) {
      if (!(e.ctrlKey && e.keyCode === 86) && (this.isValidKey || e.keyCode === 40 || e.keyCode === 38)) {
        this.isValidKey = false;
        switch (e.keyCode) {
          case 38:
          case 40:
            if (this.getModuleName() === "autocomplete" && !this.isPopupOpen && !this.preventAltUp && !this.isRequested) {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else {
              this.preventAutoFill = false;
            }
            this.preventAltUp = false;
            if (this.getModuleName() === "autocomplete" && !isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
              attributes(this.targetElement(), { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
            }
            e.preventDefault();
            break;
          case 46:
          case 8:
            this.typedString = this.filterInput.value;
            if (!this.isPopupOpen && this.typedString !== "" || this.isPopupOpen && this.queryString.length > 0) {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else if (this.typedString === "" && this.queryString === "" && this.getModuleName() !== "autocomplete") {
              this.preventAutoFill = true;
              this.searchLists(e);
            } else if (this.typedString === "") {
              if (this.list) {
                this.resetFocusElement();
              }
              this.activeIndex = null;
              if (this.getModuleName() !== "dropdownlist") {
                this.preventAutoFill = true;
                this.searchLists(e);
                if (this.getModuleName() === "autocomplete") {
                  this.hidePopup();
                }
              }
            }
            e.preventDefault();
            break;
          default:
            this.typedString = this.filterInput.value;
            this.preventAutoFill = false;
            this.searchLists(e);
            break;
        }
      } else {
        this.isValidKey = false;
      }
    };
    DropDownList2.prototype.onFilterDown = function(e) {
      switch (e.keyCode) {
        case 13:
          break;
        case 40:
        case 38:
          this.queryString = this.filterInput.value;
          e.preventDefault();
          break;
        case 9:
          if (this.isPopupOpen && this.getModuleName() !== "autocomplete") {
            e.preventDefault();
          }
          break;
        default:
          this.prevSelectPoints = this.getSelectionPoints();
          this.queryString = this.filterInput.value;
          break;
      }
    };
    DropDownList2.prototype.removeFillSelection = function() {
      if (this.isInteracted) {
        var selection = this.getSelectionPoints();
        this.inputElement.setSelectionRange(selection.end, selection.end);
      }
    };
    DropDownList2.prototype.getQuery = function(query) {
      var filterQuery;
      if (!this.isCustomFilter && this.allowFiltering && this.filterInput) {
        filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
        var filterType = this.typedString === "" ? "contains" : this.filterType;
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
        } else {
          var fields = this.fields.text ? this.fields.text : "";
          filterQuery.where(fields, filterType, this.typedString, this.ignoreCase, this.ignoreAccent);
        }
      } else {
        filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      }
      return filterQuery;
    };
    DropDownList2.prototype.getSelectionPoints = function() {
      var input = this.inputElement;
      return { start: Math.abs(input.selectionStart), end: Math.abs(input.selectionEnd) };
    };
    DropDownList2.prototype.searchLists = function(e) {
      var _this = this;
      this.isTyped = true;
      this.activeIndex = null;
      this.isListSearched = true;
      if (this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon)) {
        var clearElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
        clearElement.style.visibility = this.filterInput.value === "" ? "hidden" : "visible";
      }
      this.isDataFetched = false;
      if (this.isFiltering()) {
        var eventArgs_1 = {
          preventDefaultAction: false,
          text: this.filterInput.value,
          updateData: function(dataSource, query, fields) {
            if (eventArgs_1.cancel) {
              return;
            }
            _this.isCustomFilter = true;
            _this.filteringAction(dataSource, query, fields);
          },
          baseEventArgs: e,
          cancel: false
        };
        this.trigger("filtering", eventArgs_1, function(eventArgs) {
          if (!eventArgs.cancel && !_this.isCustomFilter && !eventArgs.preventDefaultAction) {
            _this.filteringAction(_this.dataSource, null, _this.fields);
          }
        });
      }
    };
    DropDownList2.prototype.filter = function(dataSource, query, fields) {
      this.isCustomFilter = true;
      this.filteringAction(dataSource, query, fields);
    };
    DropDownList2.prototype.filteringAction = function(dataSource, query, fields) {
      if (!isNullOrUndefined(this.filterInput)) {
        this.beforePopupOpen = !this.isPopupOpen && this.getModuleName() === "combobox" && this.filterInput.value === "" ? false : true;
        if (this.filterInput.value.trim() === "" && !this.itemTemplate) {
          this.actionCompleteData.isUpdated = false;
          this.isTyped = false;
          if (!isNullOrUndefined(this.actionCompleteData.ulElement) && !isNullOrUndefined(this.actionCompleteData.list)) {
            this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list);
          }
          this.isTyped = true;
          if (!isNullOrUndefined(this.itemData) && this.getModuleName() === "dropdownlist") {
            this.focusIndexItem();
            this.setScrollPosition();
          }
          this.isNotSearchList = true;
        } else {
          this.isNotSearchList = false;
          query = this.filterInput.value.trim() === "" ? null : query;
          this.resetList(dataSource, fields, query);
        }
        this.renderReactTemplates();
      }
    };
    DropDownList2.prototype.setSearchBox = function(popupElement) {
      if (this.isFiltering()) {
        var parentElement = popupElement.querySelector("." + dropDownListClasses.filterParent) ? popupElement.querySelector("." + dropDownListClasses.filterParent) : this.createElement("span", {
          className: dropDownListClasses.filterParent
        });
        this.filterInput = this.createElement("input", {
          attrs: { type: "text" },
          className: dropDownListClasses.filterInput
        });
        this.element.parentNode.insertBefore(this.filterInput, this.element);
        var backIcon = false;
        if (Browser.isDevice) {
          backIcon = true;
        }
        this.filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: backIcon ? [dropDownListClasses.backIcon, dropDownListClasses.filterBarClearIcon] : [dropDownListClasses.filterBarClearIcon],
          properties: { placeholder: this.filterBarPlaceholder }
        }, this.createElement);
        if (!isNullOrUndefined(this.cssClass)) {
          if (this.cssClass.split(" ").indexOf("e-outline") !== -1) {
            addClass([this.filterInputObj.container], "e-outline");
          } else if (this.cssClass.split(" ").indexOf("e-filled") !== -1) {
            addClass([this.filterInputObj.container], "e-filled");
          }
        }
        append([this.filterInputObj.container], parentElement);
        prepend([parentElement], popupElement);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "role": "combobox",
          "autocomplete": "off",
          "autocapitalize": "off",
          "spellcheck": "false"
        });
        this.clearIconElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
        if (!Browser.isDevice && this.clearIconElement) {
          EventHandler.add(this.clearIconElement, "click", this.clearText, this);
          this.clearIconElement.style.visibility = "hidden";
        }
        if (!Browser.isDevice) {
          this.searchKeyModule = new KeyboardEvents(this.filterInput, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigure,
            eventName: "keydown"
          });
        } else {
          this.searchKeyModule = new KeyboardEvents(this.filterInput, {
            keyAction: this.mobileKeyActionHandler.bind(this),
            keyConfigs: this.keyConfigure,
            eventName: "keydown"
          });
        }
        EventHandler.add(this.filterInput, "input", this.onInput, this);
        EventHandler.add(this.filterInput, "keyup", this.onFilterUp, this);
        EventHandler.add(this.filterInput, "keydown", this.onFilterDown, this);
        EventHandler.add(this.filterInput, "blur", this.onBlurHandler, this);
        EventHandler.add(this.filterInput, "paste", this.pasteHandler, this);
        return this.filterInputObj;
      } else {
        return inputObject;
      }
    };
    DropDownList2.prototype.onInput = function(e) {
      this.isValidKey = true;
      if (this.getModuleName() === "combobox") {
        this.updateIconState();
      }
      if (Browser.isDevice && Browser.info.name === "mozilla") {
        this.typedString = this.filterInput.value;
        this.preventAutoFill = true;
        this.searchLists(e);
      }
    };
    DropDownList2.prototype.pasteHandler = function(e) {
      var _this = this;
      setTimeout(function() {
        _this.typedString = _this.filterInput.value;
        _this.searchLists(e);
      });
    };
    DropDownList2.prototype.onActionFailure = function(e) {
      _super.prototype.onActionFailure.call(this, e);
      if (this.beforePopupOpen) {
        this.renderPopup();
      }
    };
    DropDownList2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      var _this = this;
      if (this.isNotSearchList) {
        this.isNotSearchList = false;
        return;
      }
      if (this.isActive) {
        var selectedItem = this.selectedLI ? this.selectedLI.cloneNode(true) : null;
        _super.prototype.onActionComplete.call(this, ulElement, list, e);
        this.updateSelectElementData(this.allowFiltering);
        if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent) && this.searchKeyEvent.type === "keydown") {
          this.isRequested = false;
          this.keyActionHandler(this.searchKeyEvent);
          this.searchKeyEvent = null;
        }
        if (this.isRequested && !isNullOrUndefined(this.searchKeyEvent)) {
          this.incrementalSearch(this.searchKeyEvent);
          this.searchKeyEvent = null;
        }
        this.list.scrollTop = 0;
        if (!isNullOrUndefined(ulElement)) {
          attributes(ulElement, { "id": this.element.id + "_options", "role": "listbox", "aria-hidden": "false" });
        }
        if (this.initRemoteRender) {
          this.initial = true;
          this.activeIndex = this.index;
          this.initRemoteRender = false;
          if (this.value && this.dataSource instanceof DataManager) {
            var checkField_1 = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;
            var fieldValue_1 = this.fields.value.split(".");
            var checkVal = list.some(function(x) {
              return isNullOrUndefined(x[checkField_1]) && fieldValue_1.length > 1 ? _this.checkFieldValue(x, fieldValue_1) === _this.value : x[checkField_1] === _this.value;
            });
            if (!checkVal) {
              this.dataSource.executeQuery(this.getQuery(this.query).where(new Predicate(checkField_1, "equal", this.value))).then(function(e2) {
                if (e2.result.length > 0) {
                  _this.addItem(e2.result, list.length);
                  _this.updateValues();
                } else {
                  _this.updateValues();
                }
              });
            } else {
              this.updateValues();
            }
          } else {
            this.updateValues();
          }
          this.initial = false;
        } else if (this.getModuleName() === "autocomplete" && this.value) {
          this.setInputValue();
        }
        if (this.getModuleName() !== "autocomplete" && this.isFiltering() && !this.isTyped) {
          if (!this.actionCompleteData.isUpdated || (!this.isCustomFilter && !this.isFilterFocus || isNullOrUndefined(this.itemData) && this.allowFiltering && (this.dataSource instanceof DataManager || !isNullOrUndefined(this.dataSource) && !isNullOrUndefined(this.dataSource.length) && this.dataSource.length !== 0))) {
            if (this.itemTemplate && this.element.tagName === "EJS-COMBOBOX" && this.allowFiltering) {
              setTimeout(function() {
                _this.updateActionCompleteDataValues(ulElement, list);
              }, 0);
            } else {
              this.updateActionCompleteDataValues(ulElement, list);
            }
          }
          this.addNewItem(list, selectedItem);
          if (!isNullOrUndefined(this.itemData)) {
            this.focusIndexItem();
          }
        }
        if (this.beforePopupOpen) {
          this.renderPopup(e);
        }
      }
    };
    DropDownList2.prototype.checkFieldValue = function(list, fieldValue) {
      var checkField = list;
      fieldValue.forEach(function(value) {
        checkField = checkField[value];
      });
      return checkField;
    };
    DropDownList2.prototype.updateActionCompleteDataValues = function(ulElement, list) {
      this.actionCompleteData = { ulElement: ulElement.cloneNode(true), list, isUpdated: true };
      if (this.actionData.list !== this.actionCompleteData.list && this.actionCompleteData.ulElement && this.actionCompleteData.list) {
        this.actionData = this.actionCompleteData;
      }
    };
    DropDownList2.prototype.addNewItem = function(listData, newElement) {
      var _this = this;
      if (!isNullOrUndefined(this.itemData) && !isNullOrUndefined(newElement)) {
        var value_1 = this.getItemData().value;
        var isExist = listData.some(function(data) {
          return (typeof data === "string" || typeof data === "number") && data === value_1 || getValue(_this.fields.value, data) === value_1;
        });
        if (!isExist) {
          this.addItem(this.itemData);
        }
      }
    };
    DropDownList2.prototype.updateActionCompleteData = function(li, item, index) {
      var _this = this;
      if (this.getModuleName() !== "autocomplete" && this.actionCompleteData.ulElement) {
        if (this.itemTemplate && this.element.tagName === "EJS-COMBOBOX" && this.allowFiltering) {
          setTimeout(function() {
            _this.actionCompleteDataUpdate(li, item, index);
          }, 0);
        } else {
          this.actionCompleteDataUpdate(li, item, index);
        }
      }
    };
    DropDownList2.prototype.actionCompleteDataUpdate = function(li, item, index) {
      if (index !== null) {
        this.actionCompleteData.ulElement.insertBefore(li.cloneNode(true), this.actionCompleteData.ulElement.childNodes[index]);
      } else {
        this.actionCompleteData.ulElement.appendChild(li.cloneNode(true));
      }
      if (this.isFiltering() && this.actionCompleteData.list.indexOf(item) < 0) {
        this.actionCompleteData.list.push(item);
      }
    };
    DropDownList2.prototype.focusIndexItem = function() {
      var value = this.getItemData().value;
      this.activeIndex = this.getIndexByValue(value);
      var element2 = this.findListElement(this.list, "li", "data-value", value);
      this.selectedLI = element2;
      this.activeItem(element2);
      this.removeFocus();
    };
    DropDownList2.prototype.updateSelection = function() {
      var selectedItem = this.list.querySelector("." + dropDownBaseClasses.selected);
      if (selectedItem) {
        this.setProperties({ "index": this.getIndexByValue(selectedItem.getAttribute("data-value")) });
        this.activeIndex = this.index;
      } else {
        this.removeFocus();
        this.list.querySelector("." + dropDownBaseClasses.li).classList.add(dropDownListClasses.focus);
      }
    };
    DropDownList2.prototype.removeFocus = function() {
      var highlightedItem = this.list.querySelectorAll("." + dropDownListClasses.focus);
      if (highlightedItem && highlightedItem.length) {
        removeClass(highlightedItem, dropDownListClasses.focus);
      }
    };
    DropDownList2.prototype.renderPopup = function(e) {
      var _this = this;
      if (this.popupObj && document.body.contains(this.popupObj.element)) {
        this.refreshPopup();
        return;
      }
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          var popupEle = _this.createElement("div", {
            id: _this.element.id + "_popup",
            className: "e-ddl e-popup " + (_this.cssClass !== null ? _this.cssClass : "")
          });
          var searchBox = _this.setSearchBox(popupEle);
          _this.listHeight = formatUnit(_this.popupHeight);
          if (_this.headerTemplate) {
            _this.setHeaderTemplate(popupEle);
          }
          append([_this.list], popupEle);
          if (_this.footerTemplate) {
            _this.setFooterTemplate(popupEle);
          }
          document.body.appendChild(popupEle);
          popupEle.style.visibility = "hidden";
          if (_this.popupHeight !== "auto") {
            _this.searchBoxHeight = 0;
            if (!isNullOrUndefined(searchBox.container)) {
              _this.searchBoxHeight = searchBox.container.parentElement.getBoundingClientRect().height;
              _this.listHeight = (parseInt(_this.listHeight, 10) - _this.searchBoxHeight).toString() + "px";
            }
            if (_this.headerTemplate) {
              _this.header = _this.header ? _this.header : popupEle.querySelector(".e-ddl-header");
              var height = Math.round(_this.header.getBoundingClientRect().height);
              _this.listHeight = (parseInt(_this.listHeight, 10) - (height + _this.searchBoxHeight)).toString() + "px";
            }
            if (_this.footerTemplate) {
              _this.footer = _this.footer ? _this.footer : popupEle.querySelector(".e-ddl-footer");
              var height = Math.round(_this.footer.getBoundingClientRect().height);
              _this.listHeight = (parseInt(_this.listHeight, 10) - (height + _this.searchBoxHeight)).toString() + "px";
            }
            _this.list.style.maxHeight = (parseInt(_this.listHeight, 10) - 2).toString() + "px";
            popupEle.style.maxHeight = formatUnit(_this.popupHeight);
          } else {
            popupEle.style.height = "auto";
          }
          var offsetValue = 0;
          var left = void 0;
          if (!isNullOrUndefined(_this.selectedLI) && (!isNullOrUndefined(_this.activeIndex) && _this.activeIndex >= 0)) {
            _this.setScrollPosition();
          } else {
            _this.list.scrollTop = 0;
          }
          if (Browser.isDevice && (!_this.allowFiltering && (_this.getModuleName() === "dropdownlist" || _this.isDropDownClick && _this.getModuleName() === "combobox"))) {
            offsetValue = _this.getOffsetValue(popupEle);
            var firstItem = _this.isEmptyList() ? _this.list : _this.liCollections[0];
            if (!isNullOrUndefined(_this.inputElement)) {
              left = -(parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(_this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(_this.inputElement.parentElement).borderLeftWidth, 10));
            }
          }
          _this.getFocusElement();
          _this.createPopup(popupEle, offsetValue, left);
          _this.checkCollision(popupEle);
          if (Browser.isDevice) {
            _this.popupObj.element.classList.add(dropDownListClasses.device);
            if (_this.getModuleName() === "dropdownlist" || _this.getModuleName() === "combobox" && !_this.allowFiltering && _this.isDropDownClick) {
              _this.popupObj.collision = { X: "fit", Y: "fit" };
            }
            if (_this.isFilterLayout()) {
              _this.popupObj.element.classList.add(dropDownListClasses.mobileFilter);
              _this.popupObj.position = { X: 0, Y: 0 };
              _this.popupObj.dataBind();
              attributes(_this.popupObj.element, { style: "left:0px;right:0px;top:0px;bottom:0px;" });
              addClass([document.body, _this.popupObj.element], dropDownListClasses.popupFullScreen);
              _this.setSearchBoxPosition();
              _this.backIconElement = searchBox.container.querySelector(".e-back-icon");
              _this.clearIconElement = searchBox.container.querySelector("." + dropDownListClasses.clearIcon);
              EventHandler.add(_this.backIconElement, "click", _this.clickOnBackIcon, _this);
              EventHandler.add(_this.clearIconElement, "click", _this.clearText, _this);
            }
          }
          popupEle.style.visibility = "visible";
          addClass([popupEle], "e-popup-close");
          var scrollParentElements = _this.popupObj.getScrollableParent(_this.inputWrapper.container);
          for (var _i = 0, scrollParentElements_1 = scrollParentElements; _i < scrollParentElements_1.length; _i++) {
            var element2 = scrollParentElements_1[_i];
            EventHandler.add(element2, "scroll", _this.scrollHandler, _this);
          }
          if (!isNullOrUndefined(_this.list)) {
            _this.unWireListEvents();
            _this.wireListEvents();
          }
          _this.selectedElementID = _this.selectedLI ? _this.selectedLI.id : null;
          attributes(_this.targetElement(), { "aria-expanded": "true", "aria-owns": _this.inputElement.id + "_options" });
          _this.inputElement.setAttribute("aria-expanded", "true");
          var inputParent = _this.isFiltering() ? _this.filterInput.parentElement : _this.inputWrapper.container;
          addClass([inputParent], [dropDownListClasses.inputFocus]);
          var animModel = { name: "FadeIn", duration: 100 };
          _this.beforePopupOpen = true;
          var popupInstance = _this.popupObj;
          var eventArgs = { popup: popupInstance, event: e, cancel: false, animation: animModel };
          _this.trigger("open", eventArgs, function(eventArgs2) {
            if (!eventArgs2.cancel) {
              if (!isNullOrUndefined(_this.inputWrapper)) {
                addClass([_this.inputWrapper.container], [dropDownListClasses.iconAnimation]);
              }
              _this.renderReactTemplates();
              if (!isNullOrUndefined(_this.popupObj)) {
                _this.popupObj.show(new Animation(eventArgs2.animation), _this.zIndex === 1e3 ? _this.element : null);
              }
            } else {
              _this.beforePopupOpen = false;
              _this.destroyPopup();
            }
          });
        } else {
          _this.beforePopupOpen = false;
        }
      });
    };
    DropDownList2.prototype.checkCollision = function(popupEle) {
      if (!Browser.isDevice || Browser.isDevice && !(this.getModuleName() === "dropdownlist" || this.isDropDownClick)) {
        var collision = isCollide(popupEle);
        if (collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px";
        }
        this.popupObj.resolveCollision();
      }
    };
    DropDownList2.prototype.getOffsetValue = function(popupEle) {
      var popupStyles = getComputedStyle(popupEle);
      var borderTop = parseInt(popupStyles.borderTopWidth, 10);
      var borderBottom = parseInt(popupStyles.borderBottomWidth, 10);
      return this.setPopupPosition(borderTop + borderBottom);
    };
    DropDownList2.prototype.createPopup = function(element2, offsetValue, left) {
      var _this = this;
      this.popupObj = new Popup(element2, {
        width: this.setWidth(),
        targetType: "relative",
        relateTo: this.inputWrapper.container,
        collision: { X: "flip", Y: "flip" },
        offsetY: offsetValue,
        enableRtl: this.enableRtl,
        offsetX: left,
        position: { X: "left", Y: "bottom" },
        zIndex: this.zIndex,
        close: function() {
          if (!_this.isDocumentClick) {
            _this.focusDropDown();
          }
          if (_this.isReact) {
            _this.clearTemplate(["headerTemplate", "footerTemplate"]);
          }
          _this.isNotSearchList = false;
          _this.isDocumentClick = false;
          _this.destroyPopup();
          if (_this.isFiltering() && _this.actionCompleteData.list && _this.actionCompleteData.list[0]) {
            _this.isActive = true;
            _this.onActionComplete(_this.actionCompleteData.ulElement, _this.actionCompleteData.list, null, true);
          }
        },
        open: function() {
          EventHandler.add(document, "mousedown", _this.onDocumentClick, _this);
          _this.isPopupOpen = true;
          var actionList = _this.actionCompleteData && _this.actionCompleteData.ulElement && _this.actionCompleteData.ulElement.querySelector("li");
          var ulElement = _this.list.querySelector("ul li");
          if (!isNullOrUndefined(_this.ulElement) && !isNullOrUndefined(_this.ulElement.getElementsByClassName("e-item-focus")[0])) {
            attributes(_this.targetElement(), { "aria-activedescendant": _this.ulElement.getElementsByClassName("e-item-focus")[0].id });
          } else if (!isNullOrUndefined(_this.ulElement) && !isNullOrUndefined(_this.ulElement.getElementsByClassName("e-active")[0])) {
            attributes(_this.targetElement(), { "aria-activedescendant": _this.ulElement.getElementsByClassName("e-active")[0].id });
          }
          if (_this.isFiltering() && _this.itemTemplate && _this.element.tagName === _this.getNgDirective() && (actionList && ulElement && actionList.textContent !== ulElement.textContent) && _this.element.tagName !== "EJS-COMBOBOX") {
            _this.cloneElements();
          }
          if (_this.isFilterLayout()) {
            removeClass([_this.inputWrapper.container], [dropDownListClasses.inputFocus]);
            _this.isFilterFocus = true;
            _this.filterInput.focus();
            if (_this.inputWrapper.clearButton) {
              addClass([_this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
            }
          }
          _this.activeStateChange();
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hidePopup();
          }
        }
      });
    };
    DropDownList2.prototype.isEmptyList = function() {
      return !isNullOrUndefined(this.liCollections) && this.liCollections.length === 0;
    };
    DropDownList2.prototype.getFocusElement = function() {
    };
    DropDownList2.prototype.isFilterLayout = function() {
      return this.getModuleName() === "dropdownlist" && this.allowFiltering;
    };
    DropDownList2.prototype.scrollHandler = function() {
      if (Browser.isDevice && (this.getModuleName() === "dropdownlist" && !this.isFilterLayout() || this.getModuleName() === "combobox" && !this.allowFiltering && this.isDropDownClick)) {
        this.hidePopup();
      }
    };
    DropDownList2.prototype.setSearchBoxPosition = function() {
      var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
      this.popupObj.element.style.maxHeight = "100%";
      this.popupObj.element.style.width = "100%";
      this.list.style.maxHeight = window.innerHeight - searchBoxHeight + "px";
      this.list.style.height = window.innerHeight - searchBoxHeight + "px";
      var clearElement = this.filterInput.parentElement.querySelector("." + dropDownListClasses.clearIcon);
      detach(this.filterInput);
      clearElement.parentElement.insertBefore(this.filterInput, clearElement);
    };
    DropDownList2.prototype.setPopupPosition = function(border) {
      var offsetValue;
      var popupOffset = border;
      var selectedLI = this.list.querySelector("." + dropDownListClasses.focus) || this.selectedLI;
      var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
      var lastItem = this.isEmptyList() ? this.list : this.liCollections[this.getItems().length - 1];
      var liHeight = firstItem.getBoundingClientRect().height;
      var listHeight = this.list.offsetHeight / 2;
      var height = isNullOrUndefined(selectedLI) ? firstItem.offsetTop : selectedLI.offsetTop;
      var lastItemOffsetValue = lastItem.offsetTop;
      if (lastItemOffsetValue - listHeight < height && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0 && !isNullOrUndefined(selectedLI)) {
        var count = this.list.offsetHeight / liHeight;
        var paddingBottom = parseInt(getComputedStyle(this.list).paddingBottom, 10);
        offsetValue = (count - (this.liCollections.length - this.activeIndex)) * liHeight - popupOffset + paddingBottom;
        this.list.scrollTop = selectedLI.offsetTop;
      } else if (height > listHeight) {
        offsetValue = listHeight - liHeight / 2;
        this.list.scrollTop = height - listHeight + liHeight / 2;
      } else {
        offsetValue = height;
      }
      var inputHeight = this.inputWrapper.container.offsetHeight;
      offsetValue = offsetValue + liHeight + popupOffset - (liHeight - inputHeight) / 2;
      return -offsetValue;
    };
    DropDownList2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.inputWrapper.container.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      if (Browser.isDevice && (!this.allowFiltering && (this.getModuleName() === "dropdownlist" || this.isDropDownClick && this.getModuleName() === "combobox"))) {
        var firstItem = this.isEmptyList() ? this.list : this.liCollections[0];
        width = parseInt(width, 10) + (parseInt(getComputedStyle(firstItem).textIndent, 10) - parseInt(getComputedStyle(this.inputElement).paddingLeft, 10) + parseInt(getComputedStyle(this.inputElement.parentElement).borderLeftWidth, 10)) * 2 + "px";
      }
      return width;
    };
    DropDownList2.prototype.scrollBottom = function(isInitial) {
      if (!isNullOrUndefined(this.selectedLI)) {
        var currentOffset = this.list.offsetHeight;
        var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
        nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = nextOffset;
        }
      }
    };
    DropDownList2.prototype.scrollTop = function() {
      if (!isNullOrUndefined(this.selectedLI)) {
        var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;
        nextOffset = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextOffset < 0) {
          this.list.scrollTop = this.list.scrollTop + nextOffset;
        } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = this.selectedLI.offsetTop - (this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
        }
      }
    };
    DropDownList2.prototype.isEditTextBox = function() {
      return false;
    };
    DropDownList2.prototype.isFiltering = function() {
      return this.allowFiltering;
    };
    DropDownList2.prototype.isPopupButton = function() {
      return true;
    };
    DropDownList2.prototype.setScrollPosition = function(e) {
      if (!isNullOrUndefined(e)) {
        switch (e.action) {
          case "pageDown":
          case "down":
          case "end":
            this.scrollBottom();
            break;
          default:
            this.scrollTop();
            break;
        }
      } else {
        this.scrollBottom(true);
      }
    };
    DropDownList2.prototype.clearText = function() {
      this.filterInput.value = this.typedString = "";
      this.searchLists(null);
    };
    DropDownList2.prototype.setEleWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.inputWrapper.container.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.inputWrapper.container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    DropDownList2.prototype.closePopup = function(delay, e) {
      var _this = this;
      this.isTyped = false;
      if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {
        return;
      }
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.isActive = false;
      this.filterInputObj = null;
      this.isDropDownClick = false;
      this.preventAutoFill = false;
      var scrollableParentElements = this.popupObj.getScrollableParent(this.inputWrapper.container);
      for (var _i = 0, scrollableParentElements_1 = scrollableParentElements; _i < scrollableParentElements_1.length; _i++) {
        var element2 = scrollableParentElements_1[_i];
        EventHandler.remove(element2, "scroll", this.scrollHandler);
      }
      if (Browser.isDevice && this.isFilterLayout()) {
        removeClass([document.body, this.popupObj.element], dropDownListClasses.popupFullScreen);
      }
      if (this.isFilterLayout()) {
        if (!Browser.isDevice) {
          this.searchKeyModule.destroy();
          if (this.clearIconElement) {
            EventHandler.remove(this.clearIconElement, "click", this.clearText);
          }
        }
        if (this.backIconElement) {
          EventHandler.remove(this.backIconElement, "click", this.clickOnBackIcon);
          EventHandler.remove(this.clearIconElement, "click", this.clearText);
        }
        if (!isNullOrUndefined(this.filterInput)) {
          EventHandler.remove(this.filterInput, "input", this.onInput);
          EventHandler.remove(this.filterInput, "keyup", this.onFilterUp);
          EventHandler.remove(this.filterInput, "keydown", this.onFilterDown);
          EventHandler.remove(this.filterInput, "blur", this.onBlurHandler);
          EventHandler.remove(this.filterInput, "paste", this.pasteHandler);
        }
        this.filterInput = null;
      }
      attributes(this.targetElement(), { "aria-expanded": "false" });
      this.inputElement.setAttribute("aria-expanded", "false");
      this.targetElement().removeAttribute("aria-owns");
      this.targetElement().removeAttribute("aria-activedescendant");
      this.inputWrapper.container.classList.remove(dropDownListClasses.iconAnimation);
      if (this.isFiltering()) {
        this.actionCompleteData.isUpdated = false;
      }
      this.beforePopupOpen = false;
      var animModel = {
        name: "FadeOut",
        duration: 100,
        delay: delay ? delay : 0
      };
      var popupInstance = this.popupObj;
      var eventArgs = { popup: popupInstance, cancel: false, animation: animModel, event: e || null };
      this.trigger("close", eventArgs, function(eventArgs2) {
        if (!isNullOrUndefined(_this.popupObj) && !isNullOrUndefined(_this.popupObj.element.querySelector(".e-fixed-head"))) {
          var fixedHeader = _this.popupObj.element.querySelector(".e-fixed-head");
          fixedHeader.parentNode.removeChild(fixedHeader);
          _this.fixedHeaderElement = null;
        }
        if (!eventArgs2.cancel) {
          if (_this.getModuleName() === "autocomplete") {
            _this.rippleFun();
          }
          if (_this.isPopupOpen) {
            _this.popupObj.hide(new Animation(eventArgs2.animation));
          } else {
            _this.destroyPopup();
          }
        }
      });
    };
    DropDownList2.prototype.destroyPopup = function() {
      this.isPopupOpen = false;
      this.isFilterFocus = false;
      if (this.popupObj) {
        this.popupObj.destroy();
        detach(this.popupObj.element);
      }
    };
    DropDownList2.prototype.clickOnBackIcon = function() {
      this.hidePopup();
      this.focusIn();
    };
    DropDownList2.prototype.render = function() {
      if (this.element.tagName === "INPUT") {
        this.inputElement = this.element;
        if (isNullOrUndefined(this.inputElement.getAttribute("role"))) {
          this.inputElement.setAttribute("role", "combobox");
        }
        if (isNullOrUndefined(this.inputElement.getAttribute("type"))) {
          this.inputElement.setAttribute("type", "text");
        }
        this.inputElement.setAttribute("aria-expanded", "false");
      } else {
        this.inputElement = this.createElement("input", { attrs: { role: "combobox", type: "text" } });
        if (this.element.tagName !== this.getNgDirective()) {
          this.element.style.display = "none";
        }
        this.element.parentElement.insertBefore(this.inputElement, this.element);
        this.preventTabIndex(this.inputElement);
      }
      var updatedCssClassValues = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        buttons: this.isPopupButton() ? [dropDownListClasses.icon] : null,
        floatLabelType: this.floatLabelType,
        properties: {
          readonly: this.getModuleName() === "dropdownlist" ? true : this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValues,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        }
      }, this.createElement);
      if (this.element.tagName === this.getNgDirective()) {
        this.element.appendChild(this.inputWrapper.container);
      } else {
        this.inputElement.parentElement.insertBefore(this.element, this.inputElement);
      }
      this.hiddenElement = this.createElement("select", {
        attrs: { "aria-hidden": "true", "tabindex": "-1", "class": dropDownListClasses.hiddenElement }
      });
      prepend([this.hiddenElement], this.inputWrapper.container);
      this.validationAttribute(this.element, this.hiddenElement);
      this.setReadOnly();
      this.setFields();
      this.inputWrapper.container.style.width = formatUnit(this.width);
      this.inputWrapper.container.classList.add("e-ddl");
      if (this.floatLabelType === "Auto") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && this.inputWrapper.container.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never") {
        this.inputWrapper.container.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
      this.wireEvent();
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      var id = this.element.getAttribute("id") ? this.element.getAttribute("id") : getUniqueID("ej2_dropdownlist");
      this.element.id = id;
      this.hiddenElement.id = id + "_hidden";
      this.targetElement().setAttribute("tabindex", this.tabIndex);
      if (this.getModuleName() === "autocomplete" || this.getModuleName() === "combobox") {
        this.inputElement.setAttribute("aria-label", this.getModuleName());
      } else {
        attributes(this.targetElement(), { "aria-label": this.getModuleName() });
      }
      attributes(this.targetElement(), this.getAriaAttributes());
      this.updateDataAttribute(this.htmlAttributes);
      this.setHTMLAttributes();
      if (this.targetElement() === this.inputElement) {
        this.inputElement.removeAttribute("aria-labelledby");
      }
      if (this.value !== null || this.activeIndex !== null || this.text !== null) {
        this.initValue();
      } else if (this.element.tagName === "SELECT" && this.element.options[0]) {
        var selectElement = this.element;
        this.value = selectElement.options[selectElement.selectedIndex].value;
        this.text = isNullOrUndefined(this.value) ? null : selectElement.options[selectElement.selectedIndex].textContent;
        this.initValue();
      }
      this.setEnabled();
      this.preventTabIndex(this.element);
      if (!this.enabled) {
        this.targetElement().tabIndex = -1;
      }
      this.initial = false;
      this.element.style.opacity = "";
      this.inputElement.onselect = function(e) {
        e.stopImmediatePropagation();
      };
      this.inputElement.onchange = function(e) {
        e.stopImmediatePropagation();
      };
      if (this.element.hasAttribute("autofocus")) {
        this.focusIn();
      }
      if (!isNullOrUndefined(this.text)) {
        this.inputElement.setAttribute("value", this.text);
      }
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      var floatLabelElement = this.inputWrapper.container.getElementsByClassName("e-float-text")[0];
      if (!isNullOrUndefined(this.element.id) && this.element.id !== "" && !isNullOrUndefined(floatLabelElement)) {
        floatLabelElement.id = "label_" + this.element.id.replace(/ /g, "_");
        attributes(this.inputElement, { "aria-labelledby": floatLabelElement.id });
      }
      this.renderComplete();
    };
    DropDownList2.prototype.setFooterTemplate = function(popupEle) {
      var compiledString;
      if (this.footer) {
        if (this.isReact) {
          this.clearTemplate(["footerTemplate"]);
        } else {
          this.footer.innerHTML = "";
        }
      } else {
        this.footer = this.createElement("div");
        addClass([this.footer], dropDownListClasses.footer);
      }
      var footercheck = this.dropdownCompiler(this.footerTemplate);
      if (typeof this.footerTemplate !== "function" && footercheck) {
        compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.footerTemplate);
      }
      var footerCompTemp = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, null, this.footer);
      if (footerCompTemp && footerCompTemp.length > 0) {
        append(footerCompTemp, this.footer);
      }
      append([this.footer], popupEle);
    };
    DropDownList2.prototype.setHeaderTemplate = function(popupEle) {
      var compiledString;
      if (this.header) {
        this.header.innerHTML = "";
      } else {
        this.header = this.createElement("div");
        addClass([this.header], dropDownListClasses.header);
      }
      var headercheck = this.dropdownCompiler(this.headerTemplate);
      if (typeof this.headerTemplate !== "function" && headercheck) {
        compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.headerTemplate);
      }
      var headerCompTemp = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, null, this.header);
      if (headerCompTemp && headerCompTemp.length) {
        append(headerCompTemp, this.header);
      }
      var contentEle = popupEle.querySelector("div.e-content");
      popupEle.insertBefore(this.header, contentEle);
    };
    DropDownList2.prototype.setEnabled = function() {
      this.element.setAttribute("aria-disabled", this.enabled ? "false" : "true");
    };
    DropDownList2.prototype.setOldText = function(text) {
      this.text = text;
    };
    DropDownList2.prototype.setOldValue = function(value) {
      this.value = value;
    };
    DropDownList2.prototype.refreshPopup = function() {
      if (!isNullOrUndefined(this.popupObj) && document.body.contains(this.popupObj.element) && (this.allowFiltering && !(Browser.isDevice && this.isFilterLayout()) || this.getModuleName() === "autocomplete")) {
        removeClass([this.popupObj.element], "e-popup-close");
        this.popupObj.refreshPosition(this.inputWrapper.container);
        this.popupObj.resolveCollision();
      }
    };
    DropDownList2.prototype.checkData = function(newProp) {
      if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) && this.itemTemplate && this.allowFiltering && !(this.isListSearched && newProp.dataSource instanceof DataManager)) {
        this.list = null;
        this.actionCompleteData = { ulElement: null, list: null, isUpdated: false };
      }
      this.isListSearched = false;
      var isChangeValue = Object.keys(newProp).indexOf("value") !== -1 && isNullOrUndefined(newProp.value);
      var isChangeText = Object.keys(newProp).indexOf("text") !== -1 && isNullOrUndefined(newProp.text);
      if (this.getModuleName() !== "autocomplete" && this.allowFiltering && (isChangeValue || isChangeText)) {
        this.itemData = null;
      }
      if (this.allowFiltering && newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource))) {
        this.actionCompleteData = { ulElement: null, list: null, isUpdated: false };
        this.actionData = this.actionCompleteData;
      } else if (this.allowFiltering && newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {
        this.actionCompleteData = this.getModuleName() === "combobox" ? { ulElement: null, list: null, isUpdated: false } : this.actionCompleteData;
        this.actionData = this.actionCompleteData;
      }
    };
    DropDownList2.prototype.updateDataSource = function(props) {
      if (this.inputElement.value !== "" || !isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) {
        this.clearAll(null, props);
      }
      if (this.fields.groupBy && props.fields && !this.isGroupChecking && this.list) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
        EventHandler.add(this.list, "scroll", this.setFloatingHeader, this);
      }
      if (!(!isNullOrUndefined(props) && (isNullOrUndefined(props.dataSource) || !(props.dataSource instanceof DataManager) && props.dataSource.length === 0)) || !(props.dataSource === [])) {
        this.typedString = "";
        this.resetList(this.dataSource);
      }
      if (!this.isCustomFilter && !this.isFilterFocus && document.activeElement !== this.filterInput) {
        this.checkCustomValue();
      }
    };
    DropDownList2.prototype.checkCustomValue = function() {
      this.itemData = this.getDataByValue(this.value);
      var dataItem = this.getItemData();
      this.setProperties({ "text": dataItem.text, "value": dataItem.value });
    };
    DropDownList2.prototype.updateInputFields = function() {
      if (this.getModuleName() === "dropdownlist") {
        Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
      }
    };
    DropDownList2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      if (this.getModuleName() === "dropdownlist") {
        this.checkData(newProp);
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      var _loop_1 = function(prop2) {
        switch (prop2) {
          case "query":
          case "dataSource":
            break;
          case "htmlAttributes":
            this_1.setHTMLAttributes();
            break;
          case "width":
            this_1.setEleWidth(newProp.width);
            Input.calculateWidth(this_1.inputElement, this_1.inputWrapper.container);
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this_1.inputElement);
            break;
          case "filterBarPlaceholder":
            if (this_1.filterInput) {
              Input.setPlaceholder(newProp.filterBarPlaceholder, this_1.filterInput);
            }
            break;
          case "readonly":
            if (this_1.getModuleName() !== "dropdownlist") {
              Input.setReadonly(newProp.readonly, this_1.inputElement);
            }
            this_1.setReadOnly();
            break;
          case "cssClass":
            this_1.setCssClass(newProp.cssClass, oldProp.cssClass);
            Input.calculateWidth(this_1.inputElement, this_1.inputWrapper.container);
            break;
          case "enableRtl":
            this_1.setEnableRtl();
            break;
          case "enabled":
            this_1.setEnable();
            break;
          case "text":
            if (newProp.text === null) {
              this_1.clearAll();
              break;
            }
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initRemoteRender) {
              var li = this_1.getElementByText(newProp.text);
              if (!this_1.checkValidLi(li)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.text, oldProp.text, "text");
                } else if (newProp.text && this_1.dataSource instanceof DataManager) {
                  var listLength_1 = this_1.getItems().length;
                  var checkField = isNullOrUndefined(this_1.fields.text) ? this_1.fields.value : this_1.fields.text;
                  this_1.typedString = "";
                  this_1.dataSource.executeQuery(this_1.getQuery(this_1.query).where(new Predicate(checkField, "equal", newProp.text))).then(function(e) {
                    if (e.result.length > 0) {
                      _this.addItem(e.result, listLength_1);
                      _this.updateValues();
                    } else {
                      _this.setOldText(oldProp.text);
                    }
                  });
                } else if (this_1.getModuleName() === "autocomplete") {
                  this_1.setInputValue(newProp, oldProp);
                } else {
                  this_1.setOldText(oldProp.text);
                }
              }
              this_1.updateInputFields();
            }
            break;
          case "value":
            if (newProp.value === null) {
              this_1.clearAll();
              break;
            }
            this_1.notify("beforeValueChange", { newProp });
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initRemoteRender) {
              var item = this_1.getElementByValue(newProp.value);
              if (!this_1.checkValidLi(item)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.value, oldProp.value, "value");
                } else if (newProp.value && this_1.dataSource instanceof DataManager) {
                  var listLength_2 = this_1.getItems().length;
                  var checkField = isNullOrUndefined(this_1.fields.value) ? this_1.fields.text : this_1.fields.value;
                  this_1.typedString = "";
                  this_1.dataSource.executeQuery(this_1.getQuery(this_1.query).where(new Predicate(checkField, "equal", newProp.value))).then(function(e) {
                    if (e.result.length > 0) {
                      _this.addItem(e.result, listLength_2);
                      _this.updateValues();
                    } else {
                      _this.setOldValue(oldProp.value);
                    }
                  });
                } else if (this_1.getModuleName() === "autocomplete") {
                  this_1.setInputValue(newProp, oldProp);
                } else {
                  this_1.setOldValue(oldProp.value);
                }
              }
              this_1.updateInputFields();
              this_1.preventChange = this_1.isAngular && this_1.preventChange ? !this_1.preventChange : this_1.preventChange;
            }
            break;
          case "index":
            if (newProp.index === null) {
              this_1.clearAll();
              break;
            }
            if (!this_1.list) {
              if (this_1.dataSource instanceof DataManager) {
                this_1.initRemoteRender = true;
              }
              this_1.renderList();
            }
            if (!this_1.initRemoteRender && this_1.liCollections) {
              var element2 = this_1.liCollections[newProp.index];
              if (!this_1.checkValidLi(element2)) {
                if (this_1.liCollections && this_1.liCollections.length === 100 && this_1.getModuleName() === "autocomplete" && this_1.listData.length > 100) {
                  this_1.setSelectionData(newProp.index, oldProp.index, "index");
                } else {
                  this_1.index = oldProp.index;
                }
              }
              this_1.updateInputFields();
            }
            break;
          case "footerTemplate":
            if (this_1.popupObj) {
              this_1.setFooterTemplate(this_1.popupObj.element);
            }
            break;
          case "headerTemplate":
            if (this_1.popupObj) {
              this_1.setHeaderTemplate(this_1.popupObj.element);
            }
            break;
          case "valueTemplate":
            if (!isNullOrUndefined(this_1.itemData) && this_1.valueTemplate !== null) {
              this_1.setValueTemplate();
            }
            break;
          case "allowFiltering":
            if (this_1.allowFiltering) {
              this_1.actionCompleteData = {
                ulElement: this_1.ulElement,
                list: this_1.listData,
                isUpdated: true
              };
              this_1.actionData = this_1.actionCompleteData;
              this_1.updateSelectElementData(this_1.allowFiltering);
            }
            break;
          case "floatLabelType":
            Input.removeFloating(this_1.inputWrapper);
            Input.addFloating(this_1.inputElement, newProp.floatLabelType, this_1.placeholder, this_1.createElement);
            if (!isNullOrUndefined(this_1.inputWrapper.buttons[0]) && this_1.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0] && this_1.floatLabelType !== "Never") {
              this_1.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
            }
            break;
          case "showClearButton":
            Input.setClearButton(newProp.showClearButton, this_1.inputElement, this_1.inputWrapper, null, this_1.createElement);
            this_1.bindClearEvent();
            break;
          default:
            {
              var ddlProps = this_1.getPropObject(prop2, newProp, oldProp);
              _super.prototype.onPropertyChanged.call(this_1, ddlProps.newProperty, ddlProps.oldProperty);
            }
            break;
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        _loop_1(prop);
      }
    };
    DropDownList2.prototype.checkValidLi = function(element2) {
      if (this.isValidLI(element2)) {
        this.setSelection(element2, null);
        return true;
      }
      return false;
    };
    DropDownList2.prototype.setSelectionData = function(newProp, oldProp, prop) {
      var _this = this;
      var li;
      this.updateListValues = function() {
        if (prop === "text") {
          li = _this.getElementByText(newProp);
          if (!_this.checkValidLi(li)) {
            _this.setOldText(oldProp);
          }
        } else if (prop === "value") {
          li = _this.getElementByValue(newProp);
          if (!_this.checkValidLi(li)) {
            _this.setOldValue(oldProp);
          }
        } else if (prop === "index") {
          li = _this.liCollections[newProp];
          if (!_this.checkValidLi(li)) {
            _this.index = oldProp;
          }
        }
      };
    };
    DropDownList2.prototype.setReadOnly = function() {
      if (this.readonly) {
        addClass([this.inputWrapper.container], ["e-readonly"]);
      } else {
        removeClass([this.inputWrapper.container], ["e-readonly"]);
      }
    };
    DropDownList2.prototype.setInputValue = function(newProp, oldProp) {
    };
    DropDownList2.prototype.setCssClass = function(newClass, oldClass) {
      if (!isNullOrUndefined(oldClass)) {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newClass)) {
        newClass = newClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(newClass, [this.inputWrapper.container], oldClass);
      if (this.popupObj) {
        Input.setCssClass(newClass, [this.popupObj.element], oldClass);
      }
    };
    DropDownList2.prototype.getModuleName = function() {
      return "dropdownlist";
    };
    DropDownList2.prototype.showPopup = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isFiltering() && this.dataSource instanceof DataManager && this.actionData.list !== this.actionCompleteData.list && this.actionData.list && this.actionData.ulElement) {
        this.actionCompleteData = this.actionData;
        this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);
      }
      if (this.beforePopupOpen) {
        this.refreshPopup();
        return;
      }
      this.beforePopupOpen = true;
      if (this.isFiltering() && !this.isActive && this.actionCompleteData.list && this.actionCompleteData.list[0]) {
        this.isActive = true;
        this.onActionComplete(this.actionCompleteData.ulElement, this.actionCompleteData.list, null, true);
      } else if (isNullOrUndefined(this.list) || !isUndefined(this.list) && (this.list.classList.contains(dropDownBaseClasses.noData) || this.list.querySelectorAll("." + dropDownBaseClasses.li).length <= 0)) {
        this.renderList(e);
      }
      this.invokeRenderPopup(e);
    };
    DropDownList2.prototype.invokeRenderPopup = function(e) {
      if (Browser.isDevice && this.isFilterLayout()) {
        var proxy_2 = this;
        window.onpopstate = function() {
          proxy_2.hidePopup();
        };
        history.pushState({}, "");
      }
      if (!isNullOrUndefined(this.list) && (!isNullOrUndefined(this.list.children[0]) || this.list.classList.contains(dropDownBaseClasses.noData))) {
        this.renderPopup(e);
      }
    };
    DropDownList2.prototype.renderHightSearch = function() {
    };
    DropDownList2.prototype.hidePopup = function(e) {
      if (this.isEscapeKey && this.getModuleName() === "dropdownlist") {
        if (!isNullOrUndefined(this.inputElement)) {
          Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
        }
        this.isEscapeKey = false;
        if (!isNullOrUndefined(this.index)) {
          var element2 = this.findListElement(this.ulElement, "li", "data-value", this.value);
          this.selectedLI = this.liCollections[this.index] || element2;
          if (this.selectedLI) {
            this.updateSelectedItem(this.selectedLI, null, true);
            if (this.valueTemplate && this.itemData !== null) {
              this.setValueTemplate();
            }
          }
        } else {
          this.resetSelection();
        }
      }
      this.closePopup(0, e);
      var dataItem = this.getItemData();
      var isSelectVal = !isNullOrUndefined(this.selectedLI);
      if (this.inputElement && this.inputElement.value.trim() === "" && !this.isInteracted && (this.isSelectCustom || isSelectVal && this.inputElement.value !== dataItem.text)) {
        this.isSelectCustom = false;
        this.clearAll(e);
      }
    };
    DropDownList2.prototype.focusIn = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.targetElement().classList.contains(dropDownListClasses.disable)) {
        return;
      }
      var isFocused = false;
      if (this.preventFocus && Browser.isDevice) {
        this.inputWrapper.container.tabIndex = 1;
        this.inputWrapper.container.focus();
        this.preventFocus = false;
        isFocused = true;
      }
      if (!isFocused) {
        this.targetElement().focus();
      }
      addClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
      this.onFocus(e);
      if (this.floatLabelType === "Auto") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
    };
    DropDownList2.prototype.focusOut = function(e) {
      if (!this.enabled) {
        return;
      }
      this.isTyped = true;
      this.hidePopup(e);
      if (this.targetElement()) {
        this.targetElement().blur();
      }
      removeClass([this.inputWrapper.container], [dropDownListClasses.inputFocus]);
      if (this.floatLabelType === "Auto" && this.inputElement.value === "") {
        Input.calculateWidth(this.inputElement, this.inputWrapper.container);
      }
    };
    DropDownList2.prototype.destroy = function() {
      this.isActive = false;
      resetIncrementalSearchValues(this.element.id);
      if (this.isReact) {
        this.clearTemplate();
      }
      this.hidePopup();
      this.unWireEvent();
      if (this.list) {
        this.unWireListEvents();
      }
      if (this.element && !this.element.classList.contains("e-" + this.getModuleName())) {
        return;
      }
      if (this.inputElement) {
        var attrArray = [
          "readonly",
          "aria-disabled",
          "placeholder",
          "aria-labelledby",
          "aria-expanded",
          "autocomplete",
          "aria-readonly",
          "autocapitalize",
          "spellcheck",
          "aria-autocomplete",
          "aria-live",
          "aria-describedby",
          "aria-label"
        ];
        for (var i = 0; i < attrArray.length; i++) {
          this.inputElement.removeAttribute(attrArray[i]);
        }
        this.inputElement.setAttribute("tabindex", this.tabIndex);
        this.inputElement.classList.remove("e-input");
        Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      }
      this.element.style.display = "block";
      if (this.inputWrapper.container.parentElement.tagName === this.getNgDirective()) {
        detach(this.inputWrapper.container);
      } else {
        this.inputWrapper.container.parentElement.insertBefore(this.element, this.inputWrapper.container);
        detach(this.inputWrapper.container);
      }
      this.hiddenElement = null;
      this.inputWrapper = null;
      this.keyboardModule = null;
      this.ulElement = null;
      this.list = null;
      this.popupObj = null;
      this.rippleFun = null;
      this.selectedLI = null;
      this.liCollections = null;
      this.item = null;
      this.inputWrapper = null;
      this.footer = null;
      this.header = null;
      this.previousSelectedLI = null;
      this.valueTempElement = null;
      this.actionData.ulElement = null;
      _super.prototype.destroy.call(this);
    };
    DropDownList2.prototype.getItems = function() {
      if (!this.list) {
        if (this.dataSource instanceof DataManager) {
          this.initRemoteRender = true;
        }
        this.renderList();
      }
      return this.ulElement ? _super.prototype.getItems.call(this) : [];
    };
    DropDownList2.prototype.getDataByValue = function(value) {
      return _super.prototype.getDataByValue.call(this, value);
    };
    DropDownList2.prototype.clear = function() {
      this.value = null;
    };
    __decorate18([
      Property(null)
    ], DropDownList2.prototype, "cssClass", void 0);
    __decorate18([
      Property("100%")
    ], DropDownList2.prototype, "width", void 0);
    __decorate18([
      Property(true)
    ], DropDownList2.prototype, "enabled", void 0);
    __decorate18([
      Property(false)
    ], DropDownList2.prototype, "enablePersistence", void 0);
    __decorate18([
      Property("300px")
    ], DropDownList2.prototype, "popupHeight", void 0);
    __decorate18([
      Property("100%")
    ], DropDownList2.prototype, "popupWidth", void 0);
    __decorate18([
      Property(null)
    ], DropDownList2.prototype, "placeholder", void 0);
    __decorate18([
      Property(null)
    ], DropDownList2.prototype, "filterBarPlaceholder", void 0);
    __decorate18([
      Property({})
    ], DropDownList2.prototype, "htmlAttributes", void 0);
    __decorate18([
      Property(null)
    ], DropDownList2.prototype, "query", void 0);
    __decorate18([
      Property(null)
    ], DropDownList2.prototype, "valueTemplate", void 0);
    __decorate18([
      Property(null)
    ], DropDownList2.prototype, "headerTemplate", void 0);
    __decorate18([
      Property(null)
    ], DropDownList2.prototype, "footerTemplate", void 0);
    __decorate18([
      Property(false)
    ], DropDownList2.prototype, "allowFiltering", void 0);
    __decorate18([
      Property(false)
    ], DropDownList2.prototype, "readonly", void 0);
    __decorate18([
      Property(null)
    ], DropDownList2.prototype, "text", void 0);
    __decorate18([
      Property(null)
    ], DropDownList2.prototype, "value", void 0);
    __decorate18([
      Property(null)
    ], DropDownList2.prototype, "index", void 0);
    __decorate18([
      Property("Never")
    ], DropDownList2.prototype, "floatLabelType", void 0);
    __decorate18([
      Property(false)
    ], DropDownList2.prototype, "showClearButton", void 0);
    __decorate18([
      Event()
    ], DropDownList2.prototype, "filtering", void 0);
    __decorate18([
      Event()
    ], DropDownList2.prototype, "change", void 0);
    __decorate18([
      Event()
    ], DropDownList2.prototype, "beforeOpen", void 0);
    __decorate18([
      Event()
    ], DropDownList2.prototype, "open", void 0);
    __decorate18([
      Event()
    ], DropDownList2.prototype, "close", void 0);
    __decorate18([
      Event()
    ], DropDownList2.prototype, "blur", void 0);
    __decorate18([
      Event()
    ], DropDownList2.prototype, "focus", void 0);
    DropDownList2 = __decorate18([
      NotifyPropertyChanges
    ], DropDownList2);
    return DropDownList2;
  }(DropDownBase)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/common/h-scroll.js
var __extends22 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate19 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ROOT = "e-hscroll";
var CLS_RTL = "e-rtl";
var CLS_DISABLE = "e-overlay";
var CLS_HSCROLLBAR = "e-hscroll-bar";
var CLS_HSCROLLCON = "e-hscroll-content";
var CLS_NAVARROW = "e-nav-arrow";
var CLS_NAVRIGHTARROW = "e-nav-right-arrow";
var CLS_NAVLEFTARROW = "e-nav-left-arrow";
var CLS_HSCROLLNAV = "e-scroll-nav";
var CLS_HSCROLLNAVRIGHT = "e-scroll-right-nav";
var CLS_HSCROLLNAVLEFT = "e-scroll-left-nav";
var CLS_DEVICE = "e-scroll-device";
var CLS_OVERLAY = "e-scroll-overlay";
var CLS_RIGHTOVERLAY = "e-scroll-right-overlay";
var CLS_LEFTOVERLAY = "e-scroll-left-overlay";
var OVERLAY_MAXWID = 40;
var HScroll = (
  /** @class */
  function(_super) {
    __extends22(HScroll2, _super);
    function HScroll2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    HScroll2.prototype.preRender = function() {
      this.browser = Browser.info.name;
      this.browserCheck = this.browser === "mozilla";
      this.isDevice = Browser.isDevice;
      this.customStep = true;
      var element2 = this.element;
      this.ieCheck = this.browser === "edge" || this.browser === "msie";
      this.initialize();
      if (element2.id === "") {
        element2.id = getUniqueID("hscroll");
        this.uniqueId = true;
      }
      element2.style.display = "block";
      if (this.enableRtl) {
        element2.classList.add(CLS_RTL);
      }
    };
    HScroll2.prototype.render = function() {
      this.touchModule = new Touch(this.element, { scroll: this.touchHandler.bind(this), swipe: this.swipeHandler.bind(this) });
      EventHandler.add(this.scrollEle, "scroll", this.scrollHandler, this);
      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE);
        this.createOverlay(this.element);
      }
      this.setScrollState();
    };
    HScroll2.prototype.setScrollState = function() {
      if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetWidth;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };
    HScroll2.prototype.initialize = function() {
      var scrollEle = this.createElement("div", { className: CLS_HSCROLLCON });
      var scrollDiv = this.createElement("div", { className: CLS_HSCROLLBAR });
      scrollDiv.setAttribute("tabindex", "-1");
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);
      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollEle.appendChild(ele_1);
      }
      scrollDiv.appendChild(scrollEle);
      ele.appendChild(scrollDiv);
      scrollDiv.style.overflowX = "hidden";
      this.scrollEle = scrollDiv;
      this.scrollItems = scrollEle;
    };
    HScroll2.prototype.getPersistData = function() {
      var keyEntity = ["scrollStep"];
      return this.addOnPersist(keyEntity);
    };
    HScroll2.prototype.getModuleName = function() {
      return "hScroll";
    };
    HScroll2.prototype.destroy = function() {
      var ele = this.element;
      ele.style.display = "";
      ele.classList.remove(CLS_ROOT);
      ele.classList.remove(CLS_DEVICE);
      ele.classList.remove(CLS_RTL);
      var nav = selectAll(".e-" + ele.id + "_nav." + CLS_HSCROLLNAV, ele);
      var overlay = selectAll("." + CLS_OVERLAY, ele);
      [].slice.call(overlay).forEach(function(ele2) {
        detach(ele2);
      });
      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        ele.appendChild(elem);
      }
      if (this.uniqueId) {
        this.element.removeAttribute("id");
      }
      detach(this.scrollEle);
      if (nav.length > 0) {
        detach(nav[0]);
        if (!isNullOrUndefined(nav[1])) {
          detach(nav[1]);
        }
      }
      EventHandler.remove(this.scrollEle, "scroll", this.scrollHandler);
      this.touchModule.destroy();
      this.touchModule = null;
      _super.prototype.destroy.call(this);
    };
    HScroll2.prototype.disable = function(value) {
      var navEles = selectAll(".e-scroll-nav:not(." + CLS_DISABLE + ")", this.element);
      if (value) {
        this.element.classList.add(CLS_DISABLE);
      } else {
        this.element.classList.remove(CLS_DISABLE);
      }
      [].slice.call(navEles).forEach(function(el) {
        el.setAttribute("tabindex", !value ? "0" : "-1");
      });
    };
    HScroll2.prototype.createOverlay = function(element2) {
      var id = element2.id.concat("_nav");
      var rightOverlayEle = this.createElement("div", { className: CLS_OVERLAY + " " + CLS_RIGHTOVERLAY });
      var clsRight = "e-" + element2.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVRIGHT);
      var rightEle = this.createElement("div", { id: id.concat("_right"), className: clsRight });
      var navItem = this.createElement("div", { className: CLS_NAVRIGHTARROW + " " + CLS_NAVARROW + " e-icons" });
      rightEle.appendChild(navItem);
      var leftEle = this.createElement("div", { className: CLS_OVERLAY + " " + CLS_LEFTOVERLAY });
      if (this.ieCheck) {
        rightEle.classList.add("e-ie-align");
      }
      element2.appendChild(rightOverlayEle);
      element2.appendChild(rightEle);
      element2.insertBefore(leftEle, element2.firstChild);
      this.eventBinding([rightEle]);
    };
    HScroll2.prototype.createNavIcon = function(element2) {
      var id = element2.id.concat("_nav");
      var clsRight = "e-" + element2.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVRIGHT);
      var rightAttributes = { "role": "button", "id": id.concat("_right"), "aria-label": "Scroll right" };
      var nav = this.createElement("div", { className: clsRight, attrs: rightAttributes });
      nav.setAttribute("aria-disabled", "false");
      var navItem = this.createElement("div", { className: CLS_NAVRIGHTARROW + " " + CLS_NAVARROW + " e-icons" });
      var clsLeft = "e-" + element2.id.concat("_nav " + CLS_HSCROLLNAV + " " + CLS_HSCROLLNAVLEFT);
      var leftAttributes = { "role": "button", "id": id.concat("_left"), "aria-label": "Scroll left" };
      var navEle = this.createElement("div", { className: clsLeft + " " + CLS_DISABLE, attrs: leftAttributes });
      navEle.setAttribute("aria-disabled", "true");
      var navLeftItem = this.createElement("div", { className: CLS_NAVLEFTARROW + " " + CLS_NAVARROW + " e-icons" });
      navEle.appendChild(navLeftItem);
      nav.appendChild(navItem);
      element2.appendChild(nav);
      element2.insertBefore(navEle, element2.firstChild);
      if (this.ieCheck) {
        nav.classList.add("e-ie-align");
        navEle.classList.add("e-ie-align");
      }
      this.eventBinding([nav, navEle]);
    };
    HScroll2.prototype.onKeyPress = function(e) {
      var _this = this;
      if (e.key === "Enter") {
        var timeoutFun_1 = function() {
          _this.keyTimeout = true;
          _this.eleScrolling(10, e.target, true);
        };
        this.keyTimer = window.setTimeout(function() {
          timeoutFun_1();
        }, 100);
      }
    };
    HScroll2.prototype.onKeyUp = function(e) {
      if (e.key !== "Enter") {
        return;
      }
      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        e.target.click();
      }
      clearTimeout(this.keyTimer);
    };
    HScroll2.prototype.eventBinding = function(ele) {
      var _this = this;
      [].slice.call(ele).forEach(function(el) {
        new Touch(el, { tapHold: _this.tabHoldHandler.bind(_this), tapHoldThreshold: 500 });
        el.addEventListener("keydown", _this.onKeyPress.bind(_this));
        el.addEventListener("keyup", _this.onKeyUp.bind(_this));
        el.addEventListener("mouseup", _this.repeatScroll.bind(_this));
        el.addEventListener("touchend", _this.repeatScroll.bind(_this));
        el.addEventListener("contextmenu", function(e) {
          e.preventDefault();
        });
        EventHandler.add(el, "click", _this.clickEventHandler, _this);
      });
    };
    HScroll2.prototype.repeatScroll = function() {
      clearInterval(this.timeout);
    };
    HScroll2.prototype.tabHoldHandler = function(e) {
      var _this = this;
      var trgt = e.originalEvent.target;
      trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDis = 10;
      var timeoutFun = function() {
        _this.eleScrolling(scrollDis, trgt, true);
      };
      this.timeout = window.setInterval(function() {
        timeoutFun();
      }, 50);
    };
    HScroll2.prototype.contains = function(ele, className) {
      return ele.classList.contains(className);
    };
    HScroll2.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
      var rootEle = this.element;
      var classList2 = trgt.classList;
      if (classList2.contains(CLS_HSCROLLNAV)) {
        classList2 = trgt.querySelector("." + CLS_NAVARROW).classList;
      }
      if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {
        scrollDis = -scrollDis;
      }
      if (!this.contains(rootEle, CLS_RTL) || this.browserCheck || this.ieCheck) {
        if (classList2.contains(CLS_NAVRIGHTARROW)) {
          this.frameScrollRequest(scrollDis, "add", isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, "", isContinuous);
        }
      } else {
        if (classList2.contains(CLS_NAVLEFTARROW)) {
          this.frameScrollRequest(scrollDis, "add", isContinuous);
        } else {
          this.frameScrollRequest(scrollDis, "", isContinuous);
        }
      }
    };
    HScroll2.prototype.clickEventHandler = function(e) {
      this.eleScrolling(this.scrollStep, e.target, false);
    };
    HScroll2.prototype.swipeHandler = function(e) {
      var swipeEle = this.scrollEle;
      var distance;
      if (e.velocity <= 1) {
        distance = e.distanceX / (e.velocity * 10);
      } else {
        distance = e.distanceX / e.velocity;
      }
      var start = 0.5;
      var animate = function() {
        var step = Math.sin(start);
        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === "Left") {
            swipeEle.scrollLeft += distance * step;
          } else if (e.swipeDirection === "Right") {
            swipeEle.scrollLeft -= distance * step;
          }
          start -= 0.5;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    HScroll2.prototype.scrollUpdating = function(scrollVal, action) {
      if (action === "add") {
        this.scrollEle.scrollLeft += scrollVal;
      } else {
        this.scrollEle.scrollLeft -= scrollVal;
      }
      if (this.enableRtl && this.scrollEle.scrollLeft > 0) {
        this.scrollEle.scrollLeft = 0;
      }
    };
    HScroll2.prototype.frameScrollRequest = function(scrollVal, action, isContinuous) {
      var _this = this;
      var step = 10;
      if (isContinuous) {
        this.scrollUpdating(scrollVal, action);
        return;
      }
      if (!this.customStep) {
        [].slice.call(selectAll("." + CLS_OVERLAY, this.element)).forEach(function(el) {
          scrollVal -= el.offsetWidth;
        });
      }
      var animate = function() {
        var scrollValue;
        var scrollStep;
        if (_this.contains(_this.element, CLS_RTL) && _this.browserCheck) {
          scrollValue = -scrollVal;
          scrollStep = -step;
        } else {
          scrollValue = scrollVal;
          scrollStep = step;
        }
        if (scrollValue < step) {
          window.cancelAnimationFrame(scrollStep);
        } else {
          _this.scrollUpdating(scrollStep, action);
          scrollVal -= scrollStep;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    HScroll2.prototype.touchHandler = function(e) {
      var ele = this.scrollEle;
      var distance = e.distanceX;
      if (this.ieCheck && this.contains(this.element, CLS_RTL)) {
        distance = -distance;
      }
      if (e.scrollDirection === "Left") {
        ele.scrollLeft = ele.scrollLeft + distance;
      } else if (e.scrollDirection === "Right") {
        ele.scrollLeft = ele.scrollLeft - distance;
      }
    };
    HScroll2.prototype.arrowDisabling = function(addDisable, removeDisable) {
      if (this.isDevice) {
        var arrowEle = isNullOrUndefined(addDisable) ? removeDisable : addDisable;
        var arrowIcon = arrowEle.querySelector("." + CLS_NAVARROW);
        if (isNullOrUndefined(addDisable)) {
          classList(arrowIcon, [CLS_NAVRIGHTARROW], [CLS_NAVLEFTARROW]);
        } else {
          classList(arrowIcon, [CLS_NAVLEFTARROW], [CLS_NAVRIGHTARROW]);
        }
      } else if (addDisable && removeDisable) {
        addDisable.classList.add(CLS_DISABLE);
        addDisable.setAttribute("aria-disabled", "true");
        addDisable.removeAttribute("tabindex");
        removeDisable.classList.remove(CLS_DISABLE);
        removeDisable.setAttribute("aria-disabled", "false");
        removeDisable.setAttribute("tabindex", "0");
      }
      this.repeatScroll();
    };
    HScroll2.prototype.scrollHandler = function(e) {
      var target = e.target;
      var width = target.offsetWidth;
      var rootEle = this.element;
      var navLeftEle = this.element.querySelector("." + CLS_HSCROLLNAVLEFT);
      var navRightEle = this.element.querySelector("." + CLS_HSCROLLNAVRIGHT);
      var leftOverlay = this.element.querySelector("." + CLS_LEFTOVERLAY);
      var rightOverlay = this.element.querySelector("." + CLS_RIGHTOVERLAY);
      var scrollLeft = target.scrollLeft;
      if (scrollLeft <= 0) {
        scrollLeft = -scrollLeft;
      }
      if (this.isDevice) {
        if (this.enableRtl && !(this.browserCheck || this.ieCheck)) {
          leftOverlay = this.element.querySelector("." + CLS_RIGHTOVERLAY);
          rightOverlay = this.element.querySelector("." + CLS_LEFTOVERLAY);
        }
        if (scrollLeft < OVERLAY_MAXWID) {
          leftOverlay.style.width = scrollLeft + "px";
        } else {
          leftOverlay.style.width = "40px";
        }
        if (target.scrollWidth - Math.ceil(width + scrollLeft) < OVERLAY_MAXWID) {
          rightOverlay.style.width = target.scrollWidth - Math.ceil(width + scrollLeft) + "px";
        } else {
          rightOverlay.style.width = "40px";
        }
      }
      if (scrollLeft === 0) {
        this.arrowDisabling(navLeftEle, navRightEle);
      } else if (Math.ceil(width + scrollLeft + 0.1) >= target.scrollWidth) {
        this.arrowDisabling(navRightEle, navLeftEle);
      } else {
        var disEle = this.element.querySelector("." + CLS_HSCROLLNAV + "." + CLS_DISABLE);
        if (disEle) {
          disEle.classList.remove(CLS_DISABLE);
          disEle.setAttribute("aria-disabled", "false");
          disEle.setAttribute("tabindex", "0");
        }
      }
    };
    HScroll2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "scrollStep":
            this.setScrollState();
            break;
          case "enableRtl":
            newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);
            break;
        }
      }
    };
    __decorate19([
      Property(null)
    ], HScroll2.prototype, "scrollStep", void 0);
    HScroll2 = __decorate19([
      NotifyPropertyChanges
    ], HScroll2);
    return HScroll2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/common/v-scroll.js
var __extends23 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate20 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ROOT2 = "e-vscroll";
var CLS_RTL2 = "e-rtl";
var CLS_DISABLE2 = "e-overlay";
var CLS_VSCROLLBAR = "e-vscroll-bar";
var CLS_VSCROLLCON = "e-vscroll-content";
var CLS_NAVARROW2 = "e-nav-arrow";
var CLS_NAVUPARROW = "e-nav-up-arrow";
var CLS_NAVDOWNARROW = "e-nav-down-arrow";
var CLS_VSCROLLNAV = "e-scroll-nav";
var CLS_VSCROLLNAVUP = "e-scroll-up-nav";
var CLS_VSCROLLNAVDOWN = "e-scroll-down-nav";
var CLS_DEVICE2 = "e-scroll-device";
var CLS_OVERLAY2 = "e-scroll-overlay";
var CLS_UPOVERLAY = "e-scroll-up-overlay";
var CLS_DOWNOVERLAY = "e-scroll-down-overlay";
var OVERLAY_MAXWID2 = 40;
var VScroll = (
  /** @class */
  function(_super) {
    __extends23(VScroll2, _super);
    function VScroll2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    VScroll2.prototype.preRender = function() {
      this.browser = Browser.info.name;
      this.browserCheck = this.browser === "mozilla";
      this.isDevice = Browser.isDevice;
      this.customStep = true;
      var ele = this.element;
      this.ieCheck = this.browser === "edge" || this.browser === "msie";
      this.initialize();
      if (ele.id === "") {
        ele.id = getUniqueID("vscroll");
        this.uniqueId = true;
      }
      ele.style.display = "block";
      if (this.enableRtl) {
        ele.classList.add(CLS_RTL2);
      }
    };
    VScroll2.prototype.render = function() {
      this.touchModule = new Touch(this.element, { scroll: this.touchHandler.bind(this), swipe: this.swipeHandler.bind(this) });
      EventHandler.add(this.scrollEle, "scroll", this.scrollEventHandler, this);
      if (!this.isDevice) {
        this.createNavIcon(this.element);
      } else {
        this.element.classList.add(CLS_DEVICE2);
        this.createOverlayElement(this.element);
      }
      this.setScrollState();
      EventHandler.add(this.element, "wheel", this.wheelEventHandler, this);
    };
    VScroll2.prototype.setScrollState = function() {
      if (isNullOrUndefined(this.scrollStep) || this.scrollStep < 0) {
        this.scrollStep = this.scrollEle.offsetHeight;
        this.customStep = false;
      } else {
        this.customStep = true;
      }
    };
    VScroll2.prototype.initialize = function() {
      var scrollCnt = createElement("div", { className: CLS_VSCROLLCON });
      var scrollBar = createElement("div", { className: CLS_VSCROLLBAR });
      scrollBar.setAttribute("tabindex", "-1");
      var ele = this.element;
      var innerEle = [].slice.call(ele.children);
      for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
        var ele_1 = innerEle_1[_i];
        scrollCnt.appendChild(ele_1);
      }
      scrollBar.appendChild(scrollCnt);
      ele.appendChild(scrollBar);
      scrollBar.style.overflow = "hidden";
      this.scrollEle = scrollBar;
      this.scrollItems = scrollCnt;
    };
    VScroll2.prototype.getPersistData = function() {
      var keyEntity = ["scrollStep"];
      return this.addOnPersist(keyEntity);
    };
    VScroll2.prototype.getModuleName = function() {
      return "vScroll";
    };
    VScroll2.prototype.destroy = function() {
      var el = this.element;
      el.style.display = "";
      removeClass([this.element], [CLS_ROOT2, CLS_DEVICE2, CLS_RTL2]);
      var navs = selectAll(".e-" + el.id + "_nav." + CLS_VSCROLLNAV, el);
      var overlays = selectAll("." + CLS_OVERLAY2, el);
      [].slice.call(overlays).forEach(function(ele) {
        detach(ele);
      });
      for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
        var elem = _a[_i];
        el.appendChild(elem);
      }
      if (this.uniqueId) {
        this.element.removeAttribute("id");
      }
      detach(this.scrollEle);
      if (navs.length > 0) {
        detach(navs[0]);
        if (!isNullOrUndefined(navs[1])) {
          detach(navs[1]);
        }
      }
      EventHandler.remove(this.scrollEle, "scroll", this.scrollEventHandler);
      this.touchModule.destroy();
      this.touchModule = null;
      _super.prototype.destroy.call(this);
    };
    VScroll2.prototype.disable = function(value) {
      var navEle = selectAll(".e-scroll-nav:not(." + CLS_DISABLE2 + ")", this.element);
      if (value) {
        this.element.classList.add(CLS_DISABLE2);
      } else {
        this.element.classList.remove(CLS_DISABLE2);
      }
      [].slice.call(navEle).forEach(function(el) {
        el.setAttribute("tabindex", !value ? "0" : "-1");
      });
    };
    VScroll2.prototype.createOverlayElement = function(element2) {
      var id = element2.id.concat("_nav");
      var downOverlayEle = createElement("div", { className: CLS_OVERLAY2 + " " + CLS_DOWNOVERLAY });
      var clsDown = "e-" + element2.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVDOWN);
      var downEle = createElement("div", { id: id.concat("down"), className: clsDown });
      var navItem = createElement("div", { className: CLS_NAVDOWNARROW + " " + CLS_NAVARROW2 + " e-icons" });
      downEle.appendChild(navItem);
      var upEle = createElement("div", { className: CLS_OVERLAY2 + " " + CLS_UPOVERLAY });
      if (this.ieCheck) {
        downEle.classList.add("e-ie-align");
      }
      element2.appendChild(downOverlayEle);
      element2.appendChild(downEle);
      element2.insertBefore(upEle, element2.firstChild);
      this.eventBinding([downEle]);
    };
    VScroll2.prototype.createNavIcon = function(element2) {
      var id = element2.id.concat("_nav");
      var clsDown = "e-" + element2.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVDOWN);
      var nav = createElement("div", { id: id.concat("_down"), className: clsDown });
      nav.setAttribute("aria-disabled", "false");
      var navItem = createElement("div", { className: CLS_NAVDOWNARROW + " " + CLS_NAVARROW2 + " e-icons" });
      var clsUp = "e-" + element2.id.concat("_nav " + CLS_VSCROLLNAV + " " + CLS_VSCROLLNAVUP);
      var navElement = createElement("div", { id: id.concat("_up"), className: clsUp + " " + CLS_DISABLE2 });
      navElement.setAttribute("aria-disabled", "true");
      var navUpItem = createElement("div", { className: CLS_NAVUPARROW + " " + CLS_NAVARROW2 + " e-icons" });
      navElement.appendChild(navUpItem);
      nav.appendChild(navItem);
      nav.setAttribute("tabindex", "0");
      element2.appendChild(nav);
      element2.insertBefore(navElement, element2.firstChild);
      if (this.ieCheck) {
        nav.classList.add("e-ie-align");
        navElement.classList.add("e-ie-align");
      }
      this.eventBinding([nav, navElement]);
    };
    VScroll2.prototype.onKeyPress = function(ev) {
      var _this = this;
      if (ev.key === "Enter") {
        var timeoutFun_1 = function() {
          _this.keyTimeout = true;
          _this.eleScrolling(10, ev.target, true);
        };
        this.keyTimer = window.setTimeout(function() {
          timeoutFun_1();
        }, 100);
      }
    };
    VScroll2.prototype.onKeyUp = function(ev) {
      if (ev.key !== "Enter") {
        return;
      }
      if (this.keyTimeout) {
        this.keyTimeout = false;
      } else {
        ev.target.click();
      }
      clearTimeout(this.keyTimer);
    };
    VScroll2.prototype.eventBinding = function(element2) {
      var _this = this;
      [].slice.call(element2).forEach(function(ele) {
        new Touch(ele, { tapHold: _this.tabHoldHandler.bind(_this), tapHoldThreshold: 500 });
        ele.addEventListener("keydown", _this.onKeyPress.bind(_this));
        ele.addEventListener("keyup", _this.onKeyUp.bind(_this));
        ele.addEventListener("mouseup", _this.repeatScroll.bind(_this));
        ele.addEventListener("touchend", _this.repeatScroll.bind(_this));
        ele.addEventListener("contextmenu", function(e) {
          e.preventDefault();
        });
        EventHandler.add(ele, "click", _this.clickEventHandler, _this);
      });
    };
    VScroll2.prototype.repeatScroll = function() {
      clearInterval(this.timeout);
    };
    VScroll2.prototype.tabHoldHandler = function(ev) {
      var _this = this;
      var trgt = ev.originalEvent.target;
      trgt = this.contains(trgt, CLS_VSCROLLNAV) ? trgt.firstElementChild : trgt;
      var scrollDistance = 10;
      var timeoutFun = function() {
        _this.eleScrolling(scrollDistance, trgt, true);
      };
      this.timeout = window.setInterval(function() {
        timeoutFun();
      }, 50);
    };
    VScroll2.prototype.contains = function(element2, className) {
      return element2.classList.contains(className);
    };
    VScroll2.prototype.eleScrolling = function(scrollDis, trgt, isContinuous) {
      var classList2 = trgt.classList;
      if (classList2.contains(CLS_VSCROLLNAV)) {
        classList2 = trgt.querySelector("." + CLS_NAVARROW2).classList;
      }
      if (classList2.contains(CLS_NAVDOWNARROW)) {
        this.frameScrollRequest(scrollDis, "add", isContinuous);
      } else if (classList2.contains(CLS_NAVUPARROW)) {
        this.frameScrollRequest(scrollDis, "", isContinuous);
      }
    };
    VScroll2.prototype.clickEventHandler = function(event) {
      this.eleScrolling(this.scrollStep, event.target, false);
    };
    VScroll2.prototype.wheelEventHandler = function(e) {
      e.preventDefault();
      this.frameScrollRequest(this.scrollStep, e.deltaY > 0 ? "add" : "", false);
    };
    VScroll2.prototype.swipeHandler = function(e) {
      var swipeElement = this.scrollEle;
      var distance;
      if (e.velocity <= 1) {
        distance = e.distanceY / (e.velocity * 10);
      } else {
        distance = e.distanceY / e.velocity;
      }
      var start = 0.5;
      var animate = function() {
        var step = Math.sin(start);
        if (step <= 0) {
          window.cancelAnimationFrame(step);
        } else {
          if (e.swipeDirection === "Up") {
            swipeElement.scrollTop += distance * step;
          } else if (e.swipeDirection === "Down") {
            swipeElement.scrollTop -= distance * step;
          }
          start -= 0.02;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    VScroll2.prototype.scrollUpdating = function(scrollVal, action) {
      if (action === "add") {
        this.scrollEle.scrollTop += scrollVal;
      } else {
        this.scrollEle.scrollTop -= scrollVal;
      }
    };
    VScroll2.prototype.frameScrollRequest = function(scrollValue, action, isContinuous) {
      var _this = this;
      var step = 10;
      if (isContinuous) {
        this.scrollUpdating(scrollValue, action);
        return;
      }
      if (!this.customStep) {
        [].slice.call(selectAll("." + CLS_OVERLAY2, this.element)).forEach(function(el) {
          scrollValue -= el.offsetHeight;
        });
      }
      var animate = function() {
        if (scrollValue < step) {
          window.cancelAnimationFrame(step);
        } else {
          _this.scrollUpdating(step, action);
          scrollValue -= step;
          window.requestAnimationFrame(animate);
        }
      };
      animate();
    };
    VScroll2.prototype.touchHandler = function(e) {
      var el = this.scrollEle;
      var distance = e.distanceY;
      if (e.scrollDirection === "Up") {
        el.scrollTop = el.scrollTop + distance;
      } else if (e.scrollDirection === "Down") {
        el.scrollTop = el.scrollTop - distance;
      }
    };
    VScroll2.prototype.arrowDisabling = function(addDisableCls, removeDisableCls) {
      if (this.isDevice) {
        var arrowEle = isNullOrUndefined(addDisableCls) ? removeDisableCls : addDisableCls;
        var arrowIcon = arrowEle.querySelector("." + CLS_NAVARROW2);
        if (isNullOrUndefined(addDisableCls)) {
          classList(arrowIcon, [CLS_NAVDOWNARROW], [CLS_NAVUPARROW]);
        } else {
          classList(arrowIcon, [CLS_NAVUPARROW], [CLS_NAVDOWNARROW]);
        }
      } else {
        addDisableCls.classList.add(CLS_DISABLE2);
        addDisableCls.setAttribute("aria-disabled", "true");
        addDisableCls.removeAttribute("tabindex");
        removeDisableCls.classList.remove(CLS_DISABLE2);
        removeDisableCls.setAttribute("aria-disabled", "false");
        removeDisableCls.setAttribute("tabindex", "0");
      }
      this.repeatScroll();
    };
    VScroll2.prototype.scrollEventHandler = function(e) {
      var target = e.target;
      var height = target.offsetHeight;
      var navUpEle = this.element.querySelector("." + CLS_VSCROLLNAVUP);
      var navDownEle = this.element.querySelector("." + CLS_VSCROLLNAVDOWN);
      var upOverlay = this.element.querySelector("." + CLS_UPOVERLAY);
      var downOverlay = this.element.querySelector("." + CLS_DOWNOVERLAY);
      var scrollTop = target.scrollTop;
      if (scrollTop <= 0) {
        scrollTop = -scrollTop;
      }
      if (this.isDevice) {
        if (scrollTop < OVERLAY_MAXWID2) {
          upOverlay.style.height = scrollTop + "px";
        } else {
          upOverlay.style.height = "40px";
        }
        if (target.scrollHeight - Math.ceil(height + scrollTop) < OVERLAY_MAXWID2) {
          downOverlay.style.height = target.scrollHeight - Math.ceil(height + scrollTop) + "px";
        } else {
          downOverlay.style.height = "40px";
        }
      }
      if (scrollTop === 0) {
        this.arrowDisabling(navUpEle, navDownEle);
      } else if (Math.ceil(height + scrollTop + 0.1) >= target.scrollHeight) {
        this.arrowDisabling(navDownEle, navUpEle);
      } else {
        var disEle = this.element.querySelector("." + CLS_VSCROLLNAV + "." + CLS_DISABLE2);
        if (disEle) {
          disEle.classList.remove(CLS_DISABLE2);
          disEle.setAttribute("aria-disabled", "false");
          disEle.setAttribute("tabindex", "0");
        }
      }
    };
    VScroll2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "scrollStep":
            this.setScrollState();
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.element.classList.add(CLS_RTL2);
            } else {
              this.element.classList.remove(CLS_RTL2);
            }
            break;
        }
      }
    };
    __decorate20([
      Property(null)
    ], VScroll2.prototype, "scrollStep", void 0);
    VScroll2 = __decorate20([
      NotifyPropertyChanges
    ], VScroll2);
    return VScroll2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/common/menu-scroll.js
function addScrolling(createElement3, container, content, scrollType, enableRtl, offset) {
  var containerOffset;
  var contentOffset;
  var parentElem = container.parentElement;
  if (scrollType === "vscroll") {
    containerOffset = offset || container.getBoundingClientRect().height;
    contentOffset = content.getBoundingClientRect().height;
  } else {
    containerOffset = container.getBoundingClientRect().width;
    contentOffset = content.getBoundingClientRect().width;
  }
  if (containerOffset < contentOffset) {
    return createScrollbar(createElement3, container, content, scrollType, enableRtl, offset);
  } else if (parentElem) {
    var width = parentElem.getBoundingClientRect().width;
    if (width < containerOffset && scrollType === "hscroll") {
      contentOffset = width;
      container.style.maxWidth = width + "px";
      return createScrollbar(createElement3, container, content, scrollType, enableRtl, offset);
    }
    return content;
  } else {
    return content;
  }
}
function createScrollbar(createElement3, container, content, scrollType, enableRtl, offset) {
  var scrollEle = createElement3("div", { className: "e-menu-" + scrollType });
  container.appendChild(scrollEle);
  scrollEle.appendChild(content);
  if (offset) {
    scrollEle.style.overflow = "hidden";
    scrollEle.style.height = offset + "px";
  } else {
    scrollEle.style.maxHeight = container.style.maxHeight;
    container.style.overflow = "hidden";
  }
  var scrollObj;
  if (scrollType === "vscroll") {
    scrollObj = new VScroll({ enableRtl }, scrollEle);
    scrollObj.scrollStep = select(".e-" + scrollType + "-bar", container).offsetHeight / 2;
  } else {
    scrollObj = new HScroll({ enableRtl }, scrollEle);
    scrollObj.scrollStep = select(".e-" + scrollType + "-bar", container).offsetWidth;
  }
  return scrollEle;
}
function destroyScroll(scrollObj, element2, skipEle) {
  if (scrollObj) {
    var menu = select(".e-menu-parent", element2);
    if (menu) {
      if (!skipEle || skipEle === menu) {
        scrollObj.destroy();
        element2.parentElement.appendChild(menu);
        detach(element2);
      }
    } else {
      scrollObj.destroy();
      detach(element2);
    }
  }
}

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/common/menu-base.js
var __extends24 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate21 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ENTER = "enter";
var ESCAPE = "escape";
var FOCUSED = "e-focused";
var HEADER = "e-menu-header";
var SELECTED = "e-selected";
var SEPARATOR = "e-separator";
var UPARROW = "uparrow";
var DOWNARROW = "downarrow";
var LEFTARROW = "leftarrow";
var RIGHTARROW = "rightarrow";
var HOME = "home";
var END = "end";
var TAB = "tab";
var CARET = "e-caret";
var ITEM = "e-menu-item";
var DISABLED4 = "e-disabled";
var HIDE = "e-menu-hide";
var ICONS = "e-icons";
var RTL6 = "e-rtl";
var POPUP = "e-menu-popup";
var TEMPLATE_PROPERTY = "Template";
var FieldSettings2 = (
  /** @class */
  function(_super) {
    __extends24(FieldSettings3, _super);
    function FieldSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate21([
      Property("id")
    ], FieldSettings3.prototype, "itemId", void 0);
    __decorate21([
      Property("parentId")
    ], FieldSettings3.prototype, "parentId", void 0);
    __decorate21([
      Property("text")
    ], FieldSettings3.prototype, "text", void 0);
    __decorate21([
      Property("iconCss")
    ], FieldSettings3.prototype, "iconCss", void 0);
    __decorate21([
      Property("url")
    ], FieldSettings3.prototype, "url", void 0);
    __decorate21([
      Property("separator")
    ], FieldSettings3.prototype, "separator", void 0);
    __decorate21([
      Property("items")
    ], FieldSettings3.prototype, "children", void 0);
    return FieldSettings3;
  }(ChildProperty)
);
var MenuItem = (
  /** @class */
  function(_super) {
    __extends24(MenuItem2, _super);
    function MenuItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate21([
      Property(null)
    ], MenuItem2.prototype, "iconCss", void 0);
    __decorate21([
      Property("")
    ], MenuItem2.prototype, "id", void 0);
    __decorate21([
      Property(false)
    ], MenuItem2.prototype, "separator", void 0);
    __decorate21([
      Collection([], MenuItem2)
    ], MenuItem2.prototype, "items", void 0);
    __decorate21([
      Property("")
    ], MenuItem2.prototype, "text", void 0);
    __decorate21([
      Property("")
    ], MenuItem2.prototype, "url", void 0);
    return MenuItem2;
  }(ChildProperty)
);
var MenuAnimationSettings = (
  /** @class */
  function(_super) {
    __extends24(MenuAnimationSettings2, _super);
    function MenuAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate21([
      Property("SlideDown")
    ], MenuAnimationSettings2.prototype, "effect", void 0);
    __decorate21([
      Property(400)
    ], MenuAnimationSettings2.prototype, "duration", void 0);
    __decorate21([
      Property("ease")
    ], MenuAnimationSettings2.prototype, "easing", void 0);
    return MenuAnimationSettings2;
  }(ChildProperty)
);
var MenuBase = (
  /** @class */
  function(_super) {
    __extends24(MenuBase2, _super);
    function MenuBase2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.navIdx = [];
      _this.animation = new Animation({});
      _this.isTapHold = false;
      _this.tempItem = [];
      _this.showSubMenuOn = "Auto";
      return _this;
    }
    MenuBase2.prototype.preRender = function() {
      if (!this.isMenu) {
        var ul = void 0;
        if (this.element.tagName === "EJS-CONTEXTMENU") {
          ul = this.createElement("ul", {
            id: getUniqueID(this.getModuleName()),
            className: "e-control e-lib e-" + this.getModuleName()
          });
          var ejInst = getValue("ej2_instances", this.element);
          removeClass([this.element], ["e-control", "e-lib", "e-" + this.getModuleName()]);
          this.clonedElement = this.element;
          this.element = ul;
          setValue("ej2_instances", ejInst, this.element);
        } else {
          ul = this.createElement("ul", { id: getUniqueID(this.getModuleName()) });
          append([].slice.call(this.element.cloneNode(true).children), ul);
          var refEle = this.element.nextElementSibling;
          if (refEle) {
            this.element.parentElement.insertBefore(ul, refEle);
          } else {
            this.element.parentElement.appendChild(ul);
          }
          this.clonedElement = ul;
        }
        this.clonedElement.style.display = "none";
      }
      if (this.element.tagName === "EJS-MENU") {
        var ele = this.element;
        var ejInstance = getValue("ej2_instances", ele);
        var ul = this.createElement("ul");
        var wrapper = this.createElement("EJS-MENU", { className: "e-" + this.getModuleName() + "-wrapper" });
        for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
          ul.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
        }
        ele.parentNode.insertBefore(wrapper, ele);
        detach(ele);
        ele = ul;
        wrapper.appendChild(ele);
        setValue("ej2_instances", ejInstance, ele);
        this.clonedElement = wrapper;
        this.element = ele;
        if (!this.element.id) {
          this.element.id = getUniqueID(this.getModuleName());
        }
      }
    };
    MenuBase2.prototype.render = function() {
      var _this = this;
      this.initialize();
      this.renderItems();
      this.wireEvents();
      this.renderComplete();
      var wrapper = this.getWrapper();
      if (this.template && this.enableScrolling && (this.isReact || this.isAngular)) {
        requestAnimationFrame(function() {
          addScrolling(_this.createElement, wrapper, _this.element, "hscroll", _this.enableRtl);
        });
      }
    };
    MenuBase2.prototype.initialize = function() {
      var wrapper = this.getWrapper();
      if (!wrapper) {
        wrapper = this.createElement("div", { className: "e-" + this.getModuleName() + "-wrapper" });
        if (this.isMenu) {
          this.element.parentElement.insertBefore(wrapper, this.element);
        } else {
          document.body.appendChild(wrapper);
        }
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        wrapper.classList.add(RTL6);
      }
      wrapper.appendChild(this.element);
      if (this.isMenu && this.hamburgerMode) {
        if (!this.target) {
          this.createHeaderContainer(wrapper);
        }
      }
      this.defaultOption = this.showItemOnClick;
    };
    MenuBase2.prototype.renderItems = function() {
      if (!this.items.length) {
        var items = ListBase.createJsonFromElement(this.element, { fields: { child: "items" } });
        this.setProperties({ items }, true);
        if (isBlazor() && !this.isMenu) {
          this.element = this.removeChildElement(this.element);
        } else {
          this.element.innerHTML = "";
        }
      }
      var ul = this.createItems(this.items);
      append(Array.prototype.slice.call(ul.children), this.element);
      this.element.classList.add("e-menu-parent");
      if (this.isMenu) {
        if (!this.hamburgerMode && this.element.classList.contains("e-vertical")) {
          this.setBlankIconStyle(this.element);
        }
        if (this.enableScrolling) {
          var wrapper = this.getWrapper();
          if (this.element.classList.contains("e-vertical")) {
            addScrolling(this.createElement, wrapper, this.element, "vscroll", this.enableRtl);
          } else {
            addScrolling(this.createElement, wrapper, this.element, "hscroll", this.enableRtl);
          }
        }
      }
    };
    MenuBase2.prototype.wireEvents = function() {
      var wrapper = this.getWrapper();
      if (this.target) {
        var target = void 0;
        var targetElems = selectAll(this.target);
        for (var i = 0, len = targetElems.length; i < len; i++) {
          target = targetElems[i];
          if (this.isMenu) {
            EventHandler.add(target, "click", this.menuHeaderClickHandler, this);
          } else {
            if (Browser.isIos) {
              new Touch(target, { tapHold: this.touchHandler.bind(this) });
            } else {
              EventHandler.add(target, "contextmenu", this.cmenuHandler, this);
            }
          }
        }
        this.targetElement = target;
        if (!this.isMenu) {
          EventHandler.add(this.targetElement, "mousewheel DOMMouseScroll", this.scrollHandler, this);
          for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
            var parent_1 = _a[_i];
            EventHandler.add(parent_1, "mousewheel DOMMouseScroll", this.scrollHandler, this);
          }
        }
      }
      if (!Browser.isDevice) {
        this.delegateMoverHandler = this.moverHandler.bind(this);
        this.delegateMouseDownHandler = this.mouseDownHandler.bind(this);
        EventHandler.add(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler, this);
        EventHandler.add(document, "mousedown", this.delegateMouseDownHandler, this);
      }
      this.delegateClickHandler = this.clickHandler.bind(this);
      EventHandler.add(document, "click", this.delegateClickHandler, this);
      this.wireKeyboardEvent(wrapper);
      this.rippleFn = rippleEffect(wrapper, { selector: "." + ITEM });
    };
    MenuBase2.prototype.wireKeyboardEvent = function(element2) {
      var keyConfigs = {
        downarrow: DOWNARROW,
        uparrow: UPARROW,
        enter: ENTER,
        leftarrow: LEFTARROW,
        rightarrow: RIGHTARROW,
        escape: ESCAPE
      };
      if (this.isMenu) {
        keyConfigs.home = HOME;
        keyConfigs.end = END;
        keyConfigs.tab = TAB;
      }
      new KeyboardEvents(element2, {
        keyAction: this.keyBoardHandler.bind(this),
        keyConfigs
      });
    };
    MenuBase2.prototype.mouseDownHandler = function(e) {
      if (closest(e.target, ".e-" + this.getModuleName() + "-wrapper") !== this.getWrapper() && !closest(e.target, ".e-" + this.getModuleName() + "-popup")) {
        this.closeMenu(this.isMenu ? null : this.navIdx.length, e);
      }
    };
    MenuBase2.prototype.keyHandler = function(e) {
      if (e.keyCode === 38 || e.keyCode === 40) {
        if (e.target && (e.target.classList.contains("e-contextmenu") || e.target.classList.contains("e-menu-item"))) {
          e.preventDefault();
        }
      }
    };
    MenuBase2.prototype.keyBoardHandler = function(e) {
      var actionName = "";
      var trgt = e.target;
      var actionNeeded = this.isMenu && !this.hamburgerMode && !this.element.classList.contains("e-vertical") && this.navIdx.length < 1;
      e.preventDefault();
      if (this.enableScrolling && e.keyCode === 13 && trgt.classList.contains("e-scroll-nav")) {
        this.removeLIStateByClass([FOCUSED, SELECTED], [closest(trgt, ".e-" + this.getModuleName() + "-wrapper")]);
      }
      if (actionNeeded) {
        switch (e.action) {
          case RIGHTARROW:
            actionName = RIGHTARROW;
            e.action = DOWNARROW;
            break;
          case LEFTARROW:
            actionName = LEFTARROW;
            e.action = UPARROW;
            break;
          case DOWNARROW:
            actionName = DOWNARROW;
            e.action = RIGHTARROW;
            break;
          case UPARROW:
            actionName = UPARROW;
            e.action = "";
            break;
        }
      } else if (this.enableRtl) {
        switch (e.action) {
          case LEFTARROW:
            actionNeeded = true;
            actionName = LEFTARROW;
            e.action = RIGHTARROW;
            break;
          case RIGHTARROW:
            actionNeeded = true;
            actionName = RIGHTARROW;
            e.action = LEFTARROW;
            break;
        }
      }
      switch (e.action) {
        case DOWNARROW:
        case UPARROW:
        case END:
        case HOME:
        case TAB:
          this.upDownKeyHandler(e);
          break;
        case RIGHTARROW:
          this.rightEnterKeyHandler(e);
          break;
        case LEFTARROW:
          this.leftEscKeyHandler(e);
          break;
        case ENTER:
          if (this.hamburgerMode && trgt.tagName === "SPAN" && trgt.classList.contains("e-menu-icon")) {
            this.menuHeaderClickHandler(e);
          } else {
            this.rightEnterKeyHandler(e);
          }
          break;
        case ESCAPE:
          this.leftEscKeyHandler(e);
          break;
      }
      if (actionNeeded) {
        e.action = actionName;
      }
    };
    MenuBase2.prototype.upDownKeyHandler = function(e) {
      var cul = this.getUlByNavIdx();
      var defaultIdx = e.action === DOWNARROW || e.action === HOME || e.action === TAB ? 0 : cul.childElementCount - 1;
      var fliIdx = defaultIdx;
      var fli = this.getLIByClass(cul, FOCUSED);
      if (fli) {
        if (e.action !== END && e.action !== HOME) {
          fliIdx = this.getIdx(cul, fli);
        }
        fli.classList.remove(FOCUSED);
        if (e.action !== END && e.action !== HOME) {
          if (e.action === DOWNARROW) {
            fliIdx++;
          } else {
            fliIdx--;
          }
          if (fliIdx === (e.action === DOWNARROW ? cul.childElementCount : -1)) {
            fliIdx = defaultIdx;
          }
        }
      }
      var cli = cul.children[fliIdx];
      fliIdx = this.isValidLI(cli, fliIdx, e.action);
      cul.children[fliIdx].classList.add(FOCUSED);
      cul.children[fliIdx].focus();
    };
    MenuBase2.prototype.isValidLI = function(cli, index, action) {
      var cul = this.getUlByNavIdx();
      var defaultIdx = action === DOWNARROW || action === HOME || action === TAB ? 0 : cul.childElementCount - 1;
      if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED4) || cli.classList.contains(HIDE)) {
        if (action === DOWNARROW && index === cul.childElementCount - 1) {
          index = defaultIdx;
        } else if (action === UPARROW && index === 0) {
          index = defaultIdx;
        } else if (action === DOWNARROW || action === RIGHTARROW) {
          index++;
        } else {
          index--;
        }
      }
      cli = cul.children[index];
      if (cli.classList.contains(SEPARATOR) || cli.classList.contains(DISABLED4) || cli.classList.contains(HIDE)) {
        index = this.isValidLI(cli, index, action);
      }
      return index;
    };
    MenuBase2.prototype.getUlByNavIdx = function(navIdxLen) {
      var _this = this;
      if (navIdxLen === void 0) {
        navIdxLen = this.navIdx.length;
      }
      if (this.isMenu) {
        var popup = [this.getWrapper()].concat([].slice.call(selectAll("." + POPUP)))[navIdxLen];
        var popups_1 = [];
        var allPopup = selectAll("." + POPUP);
        allPopup.forEach(function(elem) {
          if (_this.element.id === elem.id.split("-")[2]) {
            popups_1.push(elem);
          }
        });
        popup = [this.getWrapper()].concat([].slice.call(popups_1))[navIdxLen];
        return isNullOrUndefined(popup) ? null : select(".e-menu-parent", popup);
      } else {
        return this.getWrapper().children[navIdxLen];
      }
    };
    MenuBase2.prototype.rightEnterKeyHandler = function(e) {
      var eventArgs;
      var cul = this.getUlByNavIdx();
      var fli = this.getLIByClass(cul, FOCUSED);
      if (fli) {
        var fliIdx = this.getIdx(cul, fli);
        var navIdx = this.navIdx.concat(fliIdx);
        var item = this.getItem(navIdx);
        if (item.items.length) {
          this.navIdx.push(fliIdx);
          this.keyType = "right";
          this.action = e.action;
          this.openMenu(fli, item, -1, -1, e);
        } else {
          if (e.action === ENTER) {
            if (this.isMenu && this.navIdx.length === 0) {
              this.removeLIStateByClass([SELECTED], [this.getWrapper()]);
            } else {
              fli.classList.remove(FOCUSED);
            }
            fli.classList.add(SELECTED);
            eventArgs = { element: fli, item, event: e };
            this.trigger("select", eventArgs);
            this.closeMenu(null, e);
          }
        }
      }
    };
    MenuBase2.prototype.leftEscKeyHandler = function(e) {
      if (this.navIdx.length) {
        this.keyType = "left";
        this.closeMenu(this.navIdx.length, e);
      } else {
        if (e.action === ESCAPE) {
          this.closeMenu(null, e);
        }
      }
    };
    MenuBase2.prototype.scrollHandler = function(e) {
      this.closeMenu(null, e);
    };
    MenuBase2.prototype.touchHandler = function(e) {
      this.isTapHold = true;
      this.cmenuHandler(e.originalEvent);
    };
    MenuBase2.prototype.cmenuHandler = function(e) {
      e.preventDefault();
      this.currentTarget = e.target;
      this.isCMenu = true;
      this.pageX = e.changedTouches ? e.changedTouches[0].pageX + 1 : e.pageX + 1;
      this.pageY = e.changedTouches ? e.changedTouches[0].pageY + 1 : e.pageY + 1;
      this.closeMenu(null, e);
      if (this.isCMenu) {
        if (this.canOpen(e.target)) {
          this.openMenu(null, null, this.pageY, this.pageX, e);
        }
        this.isCMenu = false;
      }
    };
    MenuBase2.prototype.closeMenu = function(ulIndex, e, isIterated) {
      var _this = this;
      if (ulIndex === void 0) {
        ulIndex = 0;
      }
      if (e === void 0) {
        e = null;
      }
      if (this.isMenuVisible()) {
        var sli = void 0;
        var item_1;
        var wrapper_1 = this.getWrapper();
        var beforeCloseArgs = void 0;
        var items_1;
        var popups = this.getPopups();
        var isClose = false;
        var cnt = this.isMenu ? popups.length + 1 : wrapper_1.childElementCount;
        var ul_1 = this.isMenu && cnt !== 1 ? select(".e-ul", popups[cnt - 2]) : selectAll(".e-menu-parent", wrapper_1)[cnt - 1];
        if (this.isMenu && ul_1.classList.contains("e-menu")) {
          sli = this.getLIByClass(ul_1, SELECTED);
          if (sli) {
            sli.classList.remove(SELECTED);
          }
          isClose = true;
        }
        if (!isClose) {
          var liElem_1 = e && e.target && this.getLI(e.target);
          if (liElem_1) {
            this.cli = liElem_1;
          } else {
            this.cli = ul_1.children[0];
          }
          item_1 = this.navIdx.length ? this.getItem(this.navIdx) : null;
          items_1 = item_1 ? item_1.items : this.items;
          beforeCloseArgs = { element: ul_1, parentItem: item_1, items: items_1, event: e, cancel: false, isFocused: true };
          this.trigger("beforeClose", beforeCloseArgs, function(observedCloseArgs) {
            var popupEle;
            var closeArgs;
            var popupId = "";
            var popupObj;
            var isOpen = !observedCloseArgs.cancel;
            if (isOpen || _this.isCMenu) {
              if (_this.isMenu) {
                popupEle = closest(ul_1, "." + POPUP);
                if (_this.hamburgerMode) {
                  popupEle.parentElement.style.minHeight = "";
                  closest(ul_1, ".e-menu-item").setAttribute("aria-expanded", "false");
                }
                _this.unWireKeyboardEvent(popupEle);
                destroyScroll(getInstance(popupEle.children[0], VScroll), popupEle.children[0]);
                popupObj = getInstance(popupEle, Popup);
                popupObj.hide();
                popupId = popupEle.id;
                popupObj.destroy();
                detach(popupEle);
              } else {
                _this.toggleAnimation(ul_1, false);
              }
              closeArgs = { element: ul_1, parentItem: item_1, items: items_1 };
              _this.trigger("onClose", closeArgs);
              _this.navIdx.pop();
              if (!_this.isMenu) {
                EventHandler.remove(ul_1, "keydown", _this.keyHandler);
                if (_this.keyType === "right") {
                  _this.keyType = "";
                }
              }
            }
            _this.updateReactTemplate();
            var trgtliId;
            var closedLi;
            var trgtLi;
            var trgtpopUp = _this.getWrapper() && _this.getUlByNavIdx();
            if (_this.isCMenu) {
              if (_this.canOpen(e.target)) {
                _this.openMenu(null, null, _this.pageY, _this.pageX, e);
              }
              _this.isCMenu = false;
            }
            if (_this.isMenu && trgtpopUp && popupId.length) {
              trgtliId = new RegExp("(.*)-ej2menu-" + _this.element.id + "-popup").exec(popupId)[1];
              closedLi = trgtpopUp.querySelector('[id="' + trgtliId + '"]');
              trgtLi = liElem_1 && trgtpopUp.querySelector('[id="' + liElem_1.id + '"]');
            } else if (trgtpopUp) {
              closedLi = trgtpopUp.querySelector(".e-menu-item.e-selected");
              trgtLi = liElem_1 && trgtpopUp.querySelector('[id="' + liElem_1.id + '"]');
            }
            var submenus = liElem_1 && liElem_1.querySelectorAll(".e-menu-item");
            if (isOpen && _this.hamburgerMode && ulIndex && !submenus.length) {
              _this.afterCloseMenu(e);
            } else if (isOpen && !_this.hamburgerMode && closedLi && !trgtLi && _this.keyType !== "left" && (_this.navIdx.length || !_this.isMenu && _this.navIdx.length === 0)) {
              var ele = e && e.target.classList.contains("e-vscroll") ? closest(e.target, ".e-menu-wrapper") : null;
              if (ele) {
                ele = ele.querySelector(".e-menu-item");
                if (_this.showItemOnClick || ele && _this.getIndex(ele.id, true).length <= _this.navIdx.length) {
                  _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e, true);
                }
              } else {
                _this.closeMenu(_this.navIdx[_this.navIdx.length - 1], e);
              }
            } else if (isOpen && !isIterated && !ulIndex && (_this.hamburgerMode && _this.navIdx.length || _this.navIdx.length === 1 && liElem_1 && trgtpopUp !== liElem_1.parentElement)) {
              _this.closeMenu(null, e);
            } else if (isOpen && isNullOrUndefined(ulIndex) && _this.navIdx.length) {
              _this.closeMenu(null, e);
            } else if (isOpen && !_this.isMenu && !ulIndex && _this.navIdx.length === 0 && !_this.isMenusClosed) {
              _this.isMenusClosed = true;
              _this.closeMenu(0, e);
            } else if (isOpen && _this.isMenu && e && e.target && _this.navIdx.length !== 0 && closest(e.target, ".e-menu-parent.e-control")) {
              _this.closeMenu(0, e);
            } else if (isOpen && !_this.isMenu && selectAll(".e-menu-parent", wrapper_1)[ulIndex - 1] && e.which === 3) {
              _this.closeMenu(null, e);
            } else {
              if (isOpen && (_this.keyType === "right" || _this.keyType === "click")) {
                _this.afterCloseMenu(e);
              } else {
                var cul = _this.getUlByNavIdx();
                var sli_1 = _this.getLIByClass(cul, SELECTED);
                if (sli_1) {
                  sli_1.setAttribute("aria-expanded", "false");
                  sli_1.classList.remove(SELECTED);
                  if (observedCloseArgs.isFocused && liElem_1 || _this.keyType === "left") {
                    sli_1.classList.add(FOCUSED);
                    if (!e.target || !e.target.classList.contains("e-edit-template")) {
                      sli_1.focus();
                    }
                  }
                }
                if (!isOpen && _this.hamburgerMode && liElem_1 && liElem_1.getAttribute("aria-expanded") === "false" && liElem_1.getAttribute("aria-haspopup") === "true") {
                  if (closest(liElem_1, ".e-menu-parent.e-control")) {
                    _this.navIdx = [];
                  } else {
                    _this.navIdx.pop();
                  }
                  _this.navIdx.push(_this.cliIdx);
                  var item_2 = _this.getItem(_this.navIdx);
                  liElem_1.setAttribute("aria-expanded", "true");
                  _this.openMenu(liElem_1, item_2, -1, -1, e);
                }
              }
              if (_this.navIdx.length < 1) {
                if (_this.showSubMenuOn === "Hover" || _this.showSubMenuOn === "Click") {
                  _this.showItemOnClick = _this.defaultOption;
                  _this.showSubMenuOn = "Auto";
                }
              }
            }
            _this.removeStateWrapper();
          });
        }
      }
    };
    MenuBase2.prototype.updateReactTemplate = function() {
      if (this.isReact && this.template && this.navIdx.length === 0) {
        var portals = this.portals.splice(0, this.items.length);
        this.clearTemplate(["template"]);
        this.portals = portals;
        this.renderReactTemplates();
      }
    };
    MenuBase2.prototype.getMenuItemModel = function(item, level) {
      if (isNullOrUndefined(item)) {
        return null;
      }
      if (isNullOrUndefined(level)) {
        level = 0;
      }
      var fields = this.getFields(level);
      return {
        text: item[fields.text],
        id: item[fields.id],
        items: item[fields.child],
        separator: item[fields.separator],
        iconCss: item[fields.iconCss],
        url: item[fields.url]
      };
    };
    MenuBase2.prototype.getPopups = function() {
      var _this = this;
      var popups = [];
      [].slice.call(document.querySelectorAll("." + POPUP)).forEach(function(elem) {
        if (!isNullOrUndefined(elem.querySelector("." + ITEM)) && _this.getIndex(elem.querySelector("." + ITEM).id, true).length) {
          popups.push(elem);
        }
      });
      return popups;
    };
    MenuBase2.prototype.isMenuVisible = function() {
      return this.navIdx.length > 0 || this.element.classList.contains("e-contextmenu") && isVisible(this.element).valueOf();
    };
    MenuBase2.prototype.canOpen = function(target) {
      var canOpen = true;
      if (this.filter) {
        canOpen = false;
        var filter = this.filter.split(" ");
        for (var i = 0, len = filter.length; i < len; i++) {
          if (closest(target, "." + filter[i])) {
            canOpen = true;
            break;
          }
        }
      }
      return canOpen;
    };
    MenuBase2.prototype.openMenu = function(li, item, top, left, e, target) {
      var _this = this;
      if (top === void 0) {
        top = 0;
      }
      if (left === void 0) {
        left = 0;
      }
      if (e === void 0) {
        e = null;
      }
      if (target === void 0) {
        target = this.targetElement;
      }
      var wrapper = this.getWrapper();
      this.lItem = li;
      var elemId = this.element.id !== "" ? this.element.id : "menu";
      this.isMenusClosed = false;
      if (isNullOrUndefined(top)) {
        top = -1;
      }
      if (isNullOrUndefined(left)) {
        left = -1;
      }
      if (li) {
        this.uList = this.createItems(item[this.getField("children", this.navIdx.length - 1)]);
        if (!this.isMenu && Browser.isDevice) {
          wrapper.lastChild.style.display = "none";
          var data = {
            text: item[this.getField("text")].toString(),
            iconCss: ICONS + " e-previous"
          };
          var hdata = new MenuItem(this.items[0], "items", data, true);
          var hli = this.createItems([hdata]).children[0];
          hli.classList.add(HEADER);
          this.uList.insertBefore(hli, this.uList.children[0]);
        }
        if (this.isMenu) {
          this.popupWrapper = this.createElement("div", {
            className: "e-" + this.getModuleName() + "-wrapper " + POPUP,
            id: li.id + "-ej2menu-" + elemId + "-popup"
          });
          if (this.hamburgerMode) {
            top = li.offsetHeight;
            li.appendChild(this.popupWrapper);
          } else {
            document.body.appendChild(this.popupWrapper);
          }
          this.isNestedOrVertical = this.element.classList.contains("e-vertical") || this.navIdx.length !== 1;
          this.popupObj = this.generatePopup(this.popupWrapper, this.uList, li, this.isNestedOrVertical);
          if (this.template) {
            this.renderReactTemplates();
          }
          if (this.hamburgerMode) {
            this.calculateIndentSize(this.uList, li);
          } else {
            if (this.cssClass) {
              addClass([this.popupWrapper], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            this.popupObj.hide();
          }
          if (!this.hamburgerMode && !this.showItemOnClick && this.hoverDelay) {
            window.clearInterval(this.timer);
            this.timer = window.setTimeout(function() {
              _this.triggerBeforeOpen(li, _this.uList, item, e, 0, 0, "menu");
            }, this.hoverDelay);
          } else {
            this.triggerBeforeOpen(li, this.uList, item, e, 0, 0, "menu");
          }
        } else {
          this.uList.style.zIndex = this.element.style.zIndex;
          wrapper.appendChild(this.uList);
          if (!this.showItemOnClick && this.hoverDelay) {
            window.clearInterval(this.timer);
            this.timer = window.setTimeout(function() {
              _this.triggerBeforeOpen(li, _this.uList, item, e, top, left, "none");
            }, this.hoverDelay);
          } else {
            this.triggerBeforeOpen(li, this.uList, item, e, top, left, "none");
          }
        }
      } else {
        this.uList = this.element;
        this.uList.style.zIndex = getZindexPartial(target ? target : this.element).toString();
        if (isNullOrUndefined(e)) {
          var ev = document.createEvent("MouseEvents");
          ev.initEvent("click", true, false);
          var targetEvent = this.copyObject(ev, {});
          targetEvent.target = targetEvent.srcElement = target;
          targetEvent.currentTarget = target;
          this.triggerBeforeOpen(li, this.uList, item, targetEvent, top, left, "none");
        } else {
          this.triggerBeforeOpen(li, this.uList, item, e, top, left, "none");
        }
      }
    };
    MenuBase2.prototype.copyObject = function(source, destination) {
      for (var prop in source) {
        destination["" + prop] = source["" + prop];
      }
      return destination;
    };
    MenuBase2.prototype.calculateIndentSize = function(ul, li) {
      var liStyle = getComputedStyle(li);
      var liIndent = parseInt(liStyle.textIndent, 10);
      if (this.navIdx.length < 2 && !li.classList.contains("e-blankicon")) {
        liIndent *= 2;
      } else {
        liIndent += liIndent / 4;
      }
      ul.style.textIndent = liIndent + "px";
      var blankIconElem = ul.querySelectorAll(".e-blankicon");
      if (blankIconElem && blankIconElem.length) {
        var menuIconElem = ul.querySelector(".e-menu-icon");
        var menuIconElemStyle = getComputedStyle(menuIconElem);
        var blankIconIndent = parseInt(menuIconElemStyle.marginRight, 10) + menuIconElem.offsetWidth + liIndent;
        for (var i = 0; i < blankIconElem.length; i++) {
          blankIconElem[i].style.textIndent = blankIconIndent + "px";
        }
      }
    };
    MenuBase2.prototype.generatePopup = function(popupWrapper, ul, li, isNestedOrVertical) {
      var _this = this;
      var popupObj = new Popup(popupWrapper, {
        actionOnScroll: this.hamburgerMode ? "none" : "reposition",
        relateTo: li,
        collision: this.hamburgerMode ? { X: "none", Y: "none" } : { X: isNestedOrVertical || this.enableRtl ? "none" : "flip", Y: "fit" },
        position: isNestedOrVertical && !this.hamburgerMode ? { X: "right", Y: "top" } : { X: "left", Y: "bottom" },
        targetType: "relative",
        enableRtl: this.enableRtl,
        content: ul,
        open: function() {
          var scrollEle = select(".e-menu-vscroll", popupObj.element);
          if (scrollEle) {
            scrollEle.style.height = "inherit";
            scrollEle.style.maxHeight = "";
          }
          var ul2 = select(".e-ul", popupObj.element);
          popupObj.element.style.maxHeight = "";
          ul2.focus();
          _this.triggerOpen(ul2);
        }
      });
      return popupObj;
    };
    MenuBase2.prototype.createHeaderContainer = function(wrapper) {
      wrapper = wrapper || this.getWrapper();
      var spanElem = this.createElement("span", { className: "e-" + this.getModuleName() + "-header" });
      var tempTitle = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.title) : this.title;
      var spanTitle = this.createElement("span", {
        className: "e-" + this.getModuleName() + "-title",
        innerHTML: tempTitle
      });
      var spanIcon = this.createElement("span", {
        className: "e-icons e-" + this.getModuleName() + "-icon",
        attrs: { "tabindex": "0" }
      });
      spanElem.appendChild(spanTitle);
      spanElem.appendChild(spanIcon);
      wrapper.insertBefore(spanElem, this.element);
    };
    MenuBase2.prototype.openHamburgerMenu = function(e) {
      if (this.hamburgerMode) {
        this.triggerBeforeOpen(null, this.element, null, e, 0, 0, "hamburger");
      }
    };
    MenuBase2.prototype.closeHamburgerMenu = function(e) {
      var _this = this;
      var beforeCloseArgs = {
        element: this.element,
        parentItem: null,
        event: e,
        items: this.items,
        cancel: false
      };
      this.trigger("beforeClose", beforeCloseArgs, function(observedHamburgerCloseArgs) {
        if (!observedHamburgerCloseArgs.cancel) {
          _this.closeMenu(null, e);
          _this.element.classList.add("e-hide-menu");
          _this.trigger("onClose", { element: _this.element, parentItem: null, items: _this.items });
        }
      });
    };
    MenuBase2.prototype.callFit = function(element2, x, y, top, left) {
      return fit(element2, null, { X: x, Y: y }, { top, left });
    };
    MenuBase2.prototype.triggerBeforeOpen = function(li, ul, item, e, top, left, type) {
      var _this = this;
      var items = li ? item[this.getField("children", this.navIdx.length - 1)] : this.items;
      var eventArgs = {
        element: ul,
        items,
        parentItem: item,
        event: e,
        cancel: false,
        top,
        left,
        showSubMenuOn: "Auto"
      };
      var menuType = type;
      this.trigger("beforeOpen", eventArgs, function(observedOpenArgs) {
        switch (menuType) {
          case "menu":
            if (!_this.hamburgerMode) {
              if (observedOpenArgs.showSubMenuOn !== "Auto") {
                _this.showItemOnClick = !_this.defaultOption;
                _this.showSubMenuOn = observedOpenArgs.showSubMenuOn;
              }
              _this.top = observedOpenArgs.top;
              _this.left = observedOpenArgs.left;
            }
            _this.popupWrapper.style.display = "block";
            if (!_this.hamburgerMode) {
              _this.popupWrapper.style.maxHeight = _this.popupWrapper.getBoundingClientRect().height + "px";
              if (_this.enableScrolling) {
                addScrolling(_this.createElement, _this.popupWrapper, _this.uList, "vscroll", _this.enableRtl);
              }
              _this.checkScrollOffset(e);
            }
            if (!_this.hamburgerMode && !_this.left && !_this.top) {
              _this.popupObj.refreshPosition(_this.lItem, true);
              _this.left = parseInt(_this.popupWrapper.style.left, 10);
              _this.top = parseInt(_this.popupWrapper.style.top, 10);
              if (_this.enableRtl) {
                _this.left = _this.isNestedOrVertical ? _this.left - _this.popupWrapper.offsetWidth - _this.lItem.parentElement.offsetWidth + 2 : _this.left - _this.popupWrapper.offsetWidth + _this.lItem.offsetWidth;
              }
              if (_this.template && (_this.isReact || _this.isAngular)) {
                requestAnimationFrame(function() {
                  _this.collision();
                  _this.popupWrapper.style.display = "";
                });
              } else {
                _this.collision();
                _this.popupWrapper.style.display = "";
              }
            } else {
              _this.popupObj.collision = { X: "none", Y: "none" };
              _this.popupWrapper.style.display = "";
            }
            break;
          case "none":
            _this.top = observedOpenArgs.top;
            _this.left = observedOpenArgs.left;
            break;
          case "hamburger":
            if (!observedOpenArgs.cancel) {
              _this.element.classList.remove("e-hide-menu");
              _this.triggerOpen(_this.element);
            }
            break;
        }
        if (menuType !== "hamburger") {
          if (observedOpenArgs.cancel) {
            if (_this.isMenu) {
              _this.popupObj.destroy();
              detach(_this.popupWrapper);
            } else if (ul.className.indexOf("e-ul") > -1) {
              detach(ul);
            }
            _this.navIdx.pop();
          } else {
            if (_this.isMenu) {
              if (_this.hamburgerMode) {
                _this.popupWrapper.style.top = _this.top + "px";
                _this.popupWrapper.style.left = "0px";
                _this.toggleAnimation(_this.popupWrapper);
              } else {
                _this.setBlankIconStyle(_this.popupWrapper);
                _this.wireKeyboardEvent(_this.popupWrapper);
                rippleEffect(_this.popupWrapper, { selector: "." + ITEM });
                _this.popupWrapper.style.left = _this.left + "px";
                _this.popupWrapper.style.top = _this.top + "px";
                var animationOptions = _this.animationSettings.effect !== "None" ? {
                  name: _this.animationSettings.effect,
                  duration: _this.animationSettings.duration,
                  timingFunction: _this.animationSettings.easing
                } : null;
                _this.popupObj.show(animationOptions, _this.lItem);
              }
            } else {
              _this.setBlankIconStyle(_this.uList);
              _this.setPosition(_this.lItem, _this.uList, _this.top, _this.left);
              _this.toggleAnimation(_this.uList);
            }
          }
        }
        if (_this.keyType === "right") {
          var cul = _this.getUlByNavIdx();
          li.classList.remove(FOCUSED);
          if (_this.isMenu && _this.navIdx.length === 1) {
            _this.removeLIStateByClass([SELECTED], [_this.getWrapper()]);
          }
          li.classList.add(SELECTED);
          if (_this.action === ENTER) {
            var eventArgs_1 = { element: li, item, event: e };
            _this.trigger("select", eventArgs_1);
          }
          li.focus();
          cul = _this.getUlByNavIdx();
          var index = _this.isValidLI(cul.children[0], 0, _this.action);
          cul.children[index].classList.add(FOCUSED);
          cul.children[index].focus();
        }
      });
    };
    MenuBase2.prototype.collision = function() {
      var collide;
      collide = isCollide(this.popupWrapper, null, this.left, this.top);
      if ((this.isNestedOrVertical || this.enableRtl) && (collide.indexOf("right") > -1 || collide.indexOf("left") > -1)) {
        this.popupObj.collision.X = "none";
        var offWidth = closest(this.lItem, ".e-" + this.getModuleName() + "-wrapper").offsetWidth;
        this.left = this.enableRtl ? calculatePosition(this.lItem, this.isNestedOrVertical ? "right" : "left", "top").left : this.left - this.popupWrapper.offsetWidth - offWidth + 2;
      }
      collide = isCollide(this.popupWrapper, null, this.left, this.top);
      if (collide.indexOf("left") > -1 || collide.indexOf("right") > -1) {
        this.left = this.callFit(this.popupWrapper, true, false, this.top, this.left).left;
      }
      this.popupWrapper.style.left = this.left + "px";
    };
    MenuBase2.prototype.setBlankIconStyle = function(menu) {
      var blankIconList = [].slice.call(menu.getElementsByClassName("e-blankicon"));
      if (!blankIconList.length) {
        return;
      }
      var iconLi = menu.querySelector(".e-menu-item:not(.e-blankicon):not(.e-separator)");
      if (!iconLi) {
        return;
      }
      var icon = iconLi.querySelector(".e-menu-icon");
      if (!icon) {
        return;
      }
      var cssProp = this.enableRtl ? { padding: "paddingRight", margin: "marginLeft" } : { padding: "paddingLeft", margin: "marginRight" };
      var iconCssProps = getComputedStyle(icon);
      var iconSize = parseInt(iconCssProps.fontSize, 10);
      if (!!parseInt(iconCssProps.width, 10) && parseInt(iconCssProps.width, 10) > iconSize) {
        iconSize = parseInt(iconCssProps.width, 10);
      }
      var size = iconSize + parseInt(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        iconCssProps[cssProp.margin],
        10
      ) + parseInt(getComputedStyle(iconLi)[cssProp.padding], 10) + "px";
      blankIconList.forEach(function(li) {
        li.style[cssProp.padding] = size;
      });
    };
    MenuBase2.prototype.checkScrollOffset = function(e) {
      var wrapper = this.getWrapper();
      if (wrapper.children[0].classList.contains("e-menu-hscroll") && this.navIdx.length === 1) {
        var trgt = isNullOrUndefined(e) ? this.element : closest(e.target, "." + ITEM);
        var offsetEle = select(".e-hscroll-bar", wrapper);
        if (offsetEle.scrollLeft > trgt.offsetLeft) {
          offsetEle.scrollLeft -= offsetEle.scrollLeft - trgt.offsetLeft;
        }
        var offsetLeft = offsetEle.scrollLeft + offsetEle.offsetWidth;
        var offsetRight = trgt.offsetLeft + trgt.offsetWidth;
        if (offsetLeft < offsetRight) {
          offsetEle.scrollLeft += offsetRight - offsetLeft;
        }
      }
    };
    MenuBase2.prototype.setPosition = function(li, ul, top, left) {
      var px = "px";
      this.toggleVisiblity(ul);
      if (ul === this.element || left > -1 && top > -1) {
        var collide = isCollide(ul, null, left, top);
        if (collide.indexOf("right") > -1) {
          left = left - ul.offsetWidth;
        }
        if (collide.indexOf("bottom") > -1) {
          var offset = this.callFit(ul, false, true, top, left);
          top = offset.top - 20;
          if (top < 0) {
            var newTop = pageYOffset + document.documentElement.clientHeight - ul.getBoundingClientRect().height;
            if (newTop > -1) {
              top = newTop;
            }
          }
        }
        collide = isCollide(ul, null, left, top);
        if (collide.indexOf("left") > -1) {
          var offset = this.callFit(ul, true, false, top, left);
          left = offset.left;
        }
      } else {
        if (Browser.isDevice) {
          top = Number(this.element.style.top.replace(px, ""));
          left = Number(this.element.style.left.replace(px, ""));
        } else {
          var x = this.enableRtl ? "left" : "right";
          var offset = calculatePosition(li, x, "top");
          top = offset.top;
          left = offset.left;
          var collide = isCollide(ul, null, this.enableRtl ? left - ul.offsetWidth : left, top);
          var xCollision = collide.indexOf("left") > -1 || collide.indexOf("right") > -1;
          if (xCollision) {
            offset = calculatePosition(li, this.enableRtl ? "right" : "left", "top");
            left = offset.left;
          }
          if (this.enableRtl || xCollision) {
            left = this.enableRtl && xCollision ? left : left - ul.offsetWidth;
          }
          if (collide.indexOf("bottom") > -1) {
            offset = this.callFit(ul, false, true, top, left);
            top = offset.top;
          }
        }
      }
      this.toggleVisiblity(ul, false);
      ul.style.top = top + px;
      ul.style.left = left + px;
    };
    MenuBase2.prototype.toggleVisiblity = function(ul, isVisible2) {
      if (isVisible2 === void 0) {
        isVisible2 = true;
      }
      ul.style.visibility = isVisible2 ? "hidden" : "";
      ul.style.display = isVisible2 ? "block" : "none";
    };
    MenuBase2.prototype.createItems = function(items) {
      var _this = this;
      var level = this.navIdx ? this.navIdx.length : 0;
      var fields = this.getFields(level);
      var showIcon = this.hasField(items, this.getField("iconCss", level));
      var listBaseOptions = {
        showIcon,
        moduleName: "menu",
        fields,
        template: this.template,
        itemNavigable: true,
        itemCreating: function(args) {
          if (!args.curData[args.fields[fields.id]]) {
            args.curData[args.fields[fields.id]] = getUniqueID("menuitem");
          }
          if (isNullOrUndefined(args.curData.htmlAttributes)) {
            args.curData.htmlAttributes = {};
          }
          Object.assign(args.curData.htmlAttributes, { role: "menuitem", tabindex: "-1" });
          if (_this.isMenu && !args.curData[_this.getField("separator", level)]) {
            args.curData.htmlAttributes["aria-label"] = args.curData[args.fields.text] ? args.curData[args.fields.text] : args.curData[args.fields.id];
          }
          if (args.curData[args.fields[fields.iconCss]] === "") {
            args.curData[args.fields[fields.iconCss]] = null;
          }
        },
        itemCreated: function(args) {
          if (args.curData[_this.getField("separator", level)]) {
            args.item.classList.add(SEPARATOR);
            args.item.setAttribute("role", "separator");
          }
          if (showIcon && !args.curData[args.fields.iconCss] && !args.curData[_this.getField("separator", level)]) {
            args.item.classList.add("e-blankicon");
          }
          if (args.curData[args.fields.child] && args.curData[args.fields.child].length) {
            var span = _this.createElement("span", { className: ICONS + " " + CARET });
            args.item.appendChild(span);
            args.item.setAttribute("aria-haspopup", "true");
            args.item.setAttribute("aria-expanded", "false");
            args.item.classList.add("e-menu-caret-icon");
          }
          if (_this.isMenu && _this.template) {
            args.item.setAttribute("id", args.curData[args.fields.id].toString());
            args.item.removeAttribute("data-uid");
            if (args.item.classList.contains("e-level-1")) {
              args.item.classList.remove("e-level-1");
            }
            if (args.item.classList.contains("e-has-child")) {
              args.item.classList.remove("e-has-child");
            }
            args.item.removeAttribute("aria-level");
          }
          var eventArgs = { item: args.curData, element: args.item };
          _this.trigger("beforeItemRender", eventArgs);
        }
      };
      this.setProperties({ "items": this.items }, true);
      if (this.isMenu) {
        listBaseOptions.templateID = this.element.id + TEMPLATE_PROPERTY;
      }
      var ul = ListBase.createList(this.createElement, items, listBaseOptions, !this.template, this);
      ul.setAttribute("tabindex", "0");
      if (this.isMenu) {
        ul.setAttribute("role", "menu");
      } else {
        ul.setAttribute("role", "menubar");
      }
      return ul;
    };
    MenuBase2.prototype.moverHandler = function(e) {
      var trgt = e.target;
      this.liTrgt = trgt;
      var cli = this.getLI(trgt);
      var wrapper = cli ? closest(cli, ".e-" + this.getModuleName() + "-wrapper") : this.getWrapper();
      var hdrWrapper = this.getWrapper();
      var regex = new RegExp("-ej2menu-(.*)-popup");
      var ulId;
      var isDifferentElem = false;
      if (!wrapper) {
        return;
      }
      if (wrapper.id !== "") {
        ulId = regex.exec(wrapper.id)[1];
      } else {
        ulId = wrapper.querySelector("ul").id;
      }
      if (ulId !== this.element.id) {
        this.removeLIStateByClass([FOCUSED, SELECTED], [this.getWrapper()]);
        if (this.navIdx.length) {
          isDifferentElem = true;
        } else {
          return;
        }
      }
      if (cli && closest(cli, ".e-" + this.getModuleName() + "-wrapper") && !isDifferentElem) {
        this.removeLIStateByClass([FOCUSED], this.isMenu ? [wrapper].concat(this.getPopups()) : [wrapper]);
        this.removeLIStateByClass([FOCUSED], this.isMenu ? [hdrWrapper].concat(this.getPopups()) : [hdrWrapper]);
        cli.classList.add(FOCUSED);
        if (!this.showItemOnClick) {
          this.clickHandler(e);
        }
      } else if (this.isMenu && this.showItemOnClick && !isDifferentElem) {
        this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
      }
      if (this.isMenu) {
        if (!this.showItemOnClick && (trgt.parentElement !== wrapper && !closest(trgt, ".e-" + this.getModuleName() + "-popup")) && (!cli || cli && !this.getIndex(cli.id, true).length) && this.showSubMenuOn !== "Hover") {
          this.removeLIStateByClass([FOCUSED], [wrapper]);
          if (this.navIdx.length) {
            this.isClosed = true;
            this.closeMenu(null, e);
          }
        } else if (isDifferentElem && !this.showItemOnClick) {
          if (this.navIdx.length) {
            this.isClosed = true;
            this.closeMenu(null, e);
          }
        }
        if (!this.isClosed) {
          this.removeStateWrapper();
        }
        this.isClosed = false;
      }
    };
    MenuBase2.prototype.removeStateWrapper = function() {
      if (this.liTrgt) {
        var wrapper = closest(this.liTrgt, ".e-menu-vscroll");
        if (this.liTrgt.tagName === "DIV" && wrapper) {
          this.removeLIStateByClass([FOCUSED, SELECTED], [wrapper]);
        }
      }
    };
    MenuBase2.prototype.removeLIStateByClass = function(classList2, element2) {
      var li;
      var _loop_1 = function(i2) {
        classList2.forEach(function(className) {
          li = select("." + className, element2[i2]);
          if (li) {
            li.classList.remove(className);
          }
        });
      };
      for (var i = 0; i < element2.length; i++) {
        _loop_1(i);
      }
    };
    MenuBase2.prototype.getField = function(propName, level) {
      if (level === void 0) {
        level = 0;
      }
      var fieldName = this.fields["" + propName];
      return typeof fieldName === "string" ? fieldName : !fieldName[level] ? fieldName[fieldName.length - 1].toString() : fieldName[level].toString();
    };
    MenuBase2.prototype.getFields = function(level) {
      if (level === void 0) {
        level = 0;
      }
      return {
        id: this.getField("itemId", level),
        iconCss: this.getField("iconCss", level),
        text: this.getField("text", level),
        url: this.getField("url", level),
        child: this.getField("children", level),
        separator: this.getField("separator", level)
      };
    };
    MenuBase2.prototype.hasField = function(items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i]["" + field]) {
          return true;
        }
      }
      return false;
    };
    MenuBase2.prototype.menuHeaderClickHandler = function(e) {
      if (closest(e.target, ".e-menu-wrapper").querySelector("ul.e-menu-parent").id !== this.element.id) {
        return;
      }
      if (this.element.className.indexOf("e-hide-menu") > -1) {
        this.openHamburgerMenu(e);
      } else {
        this.closeHamburgerMenu(e);
      }
    };
    MenuBase2.prototype.clickHandler = function(e) {
      if (this.isTapHold) {
        this.isTapHold = false;
      } else {
        var wrapper = this.getWrapper();
        var trgt = e.target;
        var cli = this.cli = this.getLI(trgt);
        var regex = new RegExp("-ej2menu-(.*)-popup");
        var cliWrapper = cli ? closest(cli, ".e-" + this.getModuleName() + "-wrapper") : null;
        var isInstLI = cli && cliWrapper && (this.isMenu ? this.getIndex(cli.id, true).length > 0 : wrapper.firstElementChild.id === cliWrapper.firstElementChild.id);
        if (Browser.isDevice && this.isMenu) {
          this.removeLIStateByClass([FOCUSED], [wrapper].concat(this.getPopups()));
          this.mouseDownHandler(e);
        }
        if (cli && cliWrapper && this.isMenu) {
          var cliWrapperId = cliWrapper.id ? regex.exec(cliWrapper.id)[1] : cliWrapper.querySelector(".e-menu-parent").id;
          if (this.element.id !== cliWrapperId) {
            return;
          }
        }
        if (isInstLI && e.type === "click" && !cli.classList.contains(HEADER)) {
          this.setLISelected(cli);
          var navIdx = this.getIndex(cli.id, true);
          var item = this.getItem(navIdx);
          var eventArgs = { element: cli, item, event: e };
          this.trigger("select", eventArgs);
        }
        if (isInstLI && (e.type === "mouseover" || Browser.isDevice || this.showItemOnClick)) {
          var ul = void 0;
          if (cli.classList.contains(HEADER)) {
            ul = wrapper.children[this.navIdx.length - 1];
            this.toggleAnimation(ul);
            var sli = this.getLIByClass(ul, SELECTED);
            if (sli) {
              sli.classList.remove(SELECTED);
            }
            detach(cli.parentNode);
            this.navIdx.pop();
          } else {
            if (!cli.classList.contains(SEPARATOR)) {
              this.showSubMenu = true;
              var cul = cli.parentNode;
              this.cliIdx = this.getIdx(cul, cli);
              if (this.isMenu || !Browser.isDevice) {
                var culIdx = this.isMenu ? Array.prototype.indexOf.call([wrapper].concat(this.getPopups()), closest(cul, ".e-" + this.getModuleName() + "-wrapper")) : this.getIdx(wrapper, cul);
                if (this.navIdx[culIdx] === this.cliIdx) {
                  this.showSubMenu = false;
                }
                if (culIdx !== this.navIdx.length && (e.type !== "mouseover" || this.showSubMenu)) {
                  var sli = this.getLIByClass(cul, SELECTED);
                  if (sli) {
                    sli.classList.remove(SELECTED);
                  }
                  this.isClosed = true;
                  this.keyType = "click";
                  if (this.showItemOnClick) {
                    this.setLISelected(cli);
                  }
                  this.closeMenu(culIdx + 1, e);
                  if (this.showItemOnClick) {
                    this.setLISelected(cli);
                  }
                }
              }
              if (!this.isClosed) {
                this.afterCloseMenu(e);
              }
              this.isClosed = false;
            }
          }
        } else {
          if (this.isMenu && trgt.tagName === "DIV" && this.navIdx.length && closest(trgt, ".e-menu-vscroll")) {
            var popupEle = closest(trgt, "." + POPUP);
            var cIdx = Array.prototype.indexOf.call(this.getPopups(), popupEle) + 1;
            if (cIdx < this.navIdx.length) {
              this.closeMenu(cIdx + 1, e);
              if (popupEle) {
                this.removeLIStateByClass([FOCUSED, SELECTED], [popupEle]);
              }
            }
          } else if (this.isMenu && this.hamburgerMode && trgt.tagName === "SPAN" && trgt.classList.contains("e-menu-icon")) {
            this.menuHeaderClickHandler(e);
          } else {
            if (trgt.tagName !== "UL" || (this.isMenu ? trgt.parentElement.classList.contains("e-menu-wrapper") && !this.getIndex(trgt.querySelector("." + ITEM).id, true).length : trgt.parentElement !== wrapper)) {
              if (!cli) {
                this.removeLIStateByClass([SELECTED], [wrapper]);
              }
              if (!cli || !cli.querySelector("." + CARET)) {
                this.closeMenu(null, e);
              }
            }
          }
        }
      }
    };
    MenuBase2.prototype.afterCloseMenu = function(e) {
      var isHeader;
      if (this.showSubMenu) {
        if (this.showItemOnClick && this.navIdx.length === 0) {
          isHeader = closest(e.target, ".e-menu-parent.e-control");
        } else {
          isHeader = closest(this.element, ".e-menu-parent.e-control");
        }
        var idx = this.navIdx.concat(this.cliIdx);
        var item = this.getItem(idx);
        if (item && item[this.getField("children", idx.length - 1)] && item[this.getField("children", idx.length - 1)].length) {
          if (e.type === "mouseover" || Browser.isDevice && this.isMenu) {
            this.setLISelected(this.cli);
          }
          if (!this.hamburgerMode && isHeader || this.hamburgerMode && this.cli.getAttribute("aria-expanded") === "false") {
            this.cli.setAttribute("aria-expanded", "true");
            this.navIdx.push(this.cliIdx);
            this.openMenu(this.cli, item, null, null, e);
          }
        } else {
          if (e.type !== "mouseover") {
            this.closeMenu(null, e);
          }
        }
        if (!isHeader) {
          var cul = this.getUlByNavIdx();
          var sli = this.getLIByClass(cul, SELECTED);
          if (sli) {
            sli.setAttribute("aria-expanded", "false");
            sli.classList.remove(SELECTED);
          }
        }
      }
      this.keyType = "";
    };
    MenuBase2.prototype.setLISelected = function(li) {
      var sli = this.getLIByClass(li.parentElement, SELECTED);
      if (sli) {
        sli.classList.remove(SELECTED);
      }
      if (!this.isMenu) {
        li.classList.remove(FOCUSED);
      }
      li.classList.add(SELECTED);
    };
    MenuBase2.prototype.getLIByClass = function(ul, classname) {
      for (var i = 0, len = ul.children.length; i < len; i++) {
        if (ul.children[i].classList.contains(classname)) {
          return ul.children[i];
        }
      }
      return null;
    };
    MenuBase2.prototype.getItemIndex = function(item, isUniqueId) {
      var idx;
      if (typeof item === "string") {
        idx = item;
      } else {
        idx = item.id;
      }
      var isText = isUniqueId === false ? false : true;
      var navIdx = this.getIndex(idx, isText);
      return navIdx;
    };
    MenuBase2.prototype.setItem = function(item, id, isUniqueId) {
      var idx;
      if (isUniqueId) {
        idx = id ? id : item.id;
      } else {
        idx = id ? id : item.text;
      }
      var navIdx = this.getIndex(idx, isUniqueId);
      var newItem = this.getItem(navIdx);
      Object.assign(newItem, item);
    };
    MenuBase2.prototype.getItem = function(navIdx) {
      navIdx = navIdx.slice();
      var idx = navIdx.pop();
      var items = this.getItems(navIdx);
      return items[idx];
    };
    MenuBase2.prototype.getItems = function(navIdx) {
      var items = this.items;
      for (var i = 0; i < navIdx.length; i++) {
        items = items[navIdx[i]][this.getField("children", i)];
      }
      return items;
    };
    MenuBase2.prototype.setItems = function(newItems, navIdx) {
      var items = this.getItems(navIdx);
      items.splice(0, items.length);
      for (var i = 0; i < newItems.length; i++) {
        items.splice(i, 0, newItems[i]);
      }
    };
    MenuBase2.prototype.getIdx = function(ul, li, skipHdr) {
      if (skipHdr === void 0) {
        skipHdr = true;
      }
      var idx = Array.prototype.indexOf.call(ul.children, li);
      if (skipHdr && ul.children[0].classList.contains(HEADER)) {
        idx--;
      }
      return idx;
    };
    MenuBase2.prototype.getLI = function(elem) {
      if (elem.tagName === "LI" && elem.classList.contains("e-menu-item")) {
        return elem;
      }
      return closest(elem, "li.e-menu-item");
    };
    MenuBase2.prototype.updateItemsByNavIdx = function() {
      var items = this.items;
      var count = 0;
      for (var index = 0; index < this.navIdx.length; index++) {
        items = items[index].items;
        if (!items) {
          break;
        }
        count++;
        var ul = this.getUlByNavIdx(count);
        if (!ul) {
          break;
        }
        this.updateItem(ul, items);
      }
    };
    MenuBase2.prototype.removeChildElement = function(elem) {
      while (elem.firstElementChild) {
        elem.removeChild(elem.firstElementChild);
      }
      return elem;
    };
    MenuBase2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      var wrapper = this.getWrapper();
      var _loop_2 = function(prop2) {
        switch (prop2) {
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrapper], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrapper], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            wrapper.classList.toggle(RTL6);
            break;
          case "showItemOnClick":
            this_1.unWireEvents();
            this_1.showItemOnClick = newProp.showItemOnClick;
            this_1.wireEvents();
            break;
          case "enableScrolling":
            if (newProp.enableScrolling) {
              var ul_2;
              if (this_1.element.classList.contains("e-vertical")) {
                addScrolling(this_1.createElement, wrapper, this_1.element, "vscroll", this_1.enableRtl);
              } else {
                addScrolling(this_1.createElement, wrapper, this_1.element, "hscroll", this_1.enableRtl);
              }
              this_1.getPopups().forEach(function(wrapper2) {
                ul_2 = select(".e-ul", wrapper2);
                addScrolling(_this.createElement, wrapper2, ul_2, "vscroll", _this.enableRtl);
              });
            } else {
              var ul_3 = wrapper.children[0];
              if (this_1.element.classList.contains("e-vertical")) {
                destroyScroll(getInstance(ul_3, VScroll), ul_3);
              } else {
                destroyScroll(getInstance(ul_3, HScroll), ul_3);
              }
              wrapper.style.overflow = "";
              wrapper.appendChild(this_1.element);
              this_1.getPopups().forEach(function(wrapper2) {
                ul_3 = wrapper2.children[0];
                destroyScroll(getInstance(ul_3, VScroll), ul_3);
                wrapper2.style.overflow = "";
              });
            }
            break;
          case "items": {
            var idx = void 0;
            var navIdx = void 0;
            var item = void 0;
            if (this_1.isReact && this_1.template) {
              this_1.clearTemplate(["template"]);
            }
            if (!Object.keys(oldProp.items).length) {
              this_1.updateItem(this_1.element, this_1.items);
              if (this_1.enableScrolling && this_1.element.parentElement.classList.contains("e-custom-scroll")) {
                if (this_1.element.classList.contains("e-vertical")) {
                  addScrolling(this_1.createElement, wrapper, this_1.element, "vscroll", this_1.enableRtl);
                } else {
                  addScrolling(this_1.createElement, wrapper, this_1.element, "hscroll", this_1.enableRtl);
                }
              }
              if (!this_1.hamburgerMode) {
                for (var i = 1, count = wrapper.childElementCount; i < count; i++) {
                  detach(wrapper.lastElementChild);
                }
              }
              this_1.navIdx = [];
            } else {
              var keys = Object.keys(newProp.items);
              for (var i = 0; i < keys.length; i++) {
                navIdx = this_1.getChangedItemIndex(newProp, [], Number(keys[i]));
                if (navIdx.length <= this_1.getWrapper().children.length) {
                  idx = navIdx.pop();
                  item = this_1.getItems(navIdx);
                  this_1.insertAfter([item[idx]], item[idx].text);
                  this_1.removeItem(item, navIdx, idx);
                  this_1.setItems(item, navIdx);
                }
                navIdx.length = 0;
              }
            }
            break;
          }
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        _loop_2(prop);
      }
    };
    MenuBase2.prototype.updateItem = function(ul, items) {
      if (isBlazor() && !this.isMenu) {
        ul = this.removeChildElement(ul);
      } else {
        if (this.enableScrolling) {
          var wrapper1 = this.getWrapper();
          var ul1 = wrapper1.children[0];
          if (this.element.classList.contains("e-vertical")) {
            destroyScroll(getInstance(ul1, VScroll), ul1);
          } else {
            destroyScroll(getInstance(ul1, HScroll), ul1);
          }
        }
        ul.innerHTML = "";
      }
      var lis = [].slice.call(this.createItems(items).children);
      lis.forEach(function(li) {
        ul.appendChild(li);
      });
    };
    MenuBase2.prototype.getChangedItemIndex = function(newProp, index, idx) {
      index.push(idx);
      var key = Object.keys(newProp.items[idx]).pop();
      if (key === "items") {
        var item = newProp.items[idx];
        var popStr = Object.keys(item.items).pop();
        if (popStr) {
          this.getChangedItemIndex(item, index, Number(popStr));
        }
      } else {
        if (key === "isParentArray" && index.length > 1) {
          index.pop();
        }
      }
      return index;
    };
    MenuBase2.prototype.removeItem = function(item, navIdx, idx) {
      item.splice(idx, 1);
      var uls = this.getWrapper().children;
      if (navIdx.length < uls.length) {
        detach(uls[navIdx.length].children[idx]);
      }
    };
    MenuBase2.prototype.unWireEvents = function(targetSelctor) {
      if (targetSelctor === void 0) {
        targetSelctor = this.target;
      }
      var wrapper = this.getWrapper();
      if (targetSelctor) {
        var target = void 0;
        var touchModule = void 0;
        var targetElems = selectAll(targetSelctor);
        for (var i = 0, len = targetElems.length; i < len; i++) {
          target = targetElems[i];
          if (this.isMenu) {
            EventHandler.remove(target, "click", this.menuHeaderClickHandler);
          } else {
            if (Browser.isIos) {
              touchModule = getInstance(target, Touch);
              if (touchModule) {
                touchModule.destroy();
              }
            } else {
              EventHandler.remove(target, "contextmenu", this.cmenuHandler);
            }
          }
        }
        if (!this.isMenu) {
          EventHandler.remove(this.targetElement, "mousewheel DOMMouseScroll", this.scrollHandler);
          for (var _i = 0, _a = getScrollableParent(this.targetElement); _i < _a.length; _i++) {
            var parent_2 = _a[_i];
            EventHandler.remove(parent_2, "mousewheel DOMMouseScroll", this.scrollHandler);
          }
        }
      }
      if (!Browser.isDevice) {
        EventHandler.remove(this.isMenu ? document : wrapper, "mouseover", this.delegateMoverHandler);
        EventHandler.remove(document, "mousedown", this.delegateMouseDownHandler);
      }
      EventHandler.remove(document, "click", this.delegateClickHandler);
      this.unWireKeyboardEvent(wrapper);
      this.rippleFn();
    };
    MenuBase2.prototype.unWireKeyboardEvent = function(element2) {
      var keyboardModule = getInstance(element2, KeyboardEvents);
      if (keyboardModule) {
        keyboardModule.destroy();
      }
    };
    MenuBase2.prototype.toggleAnimation = function(ul, isMenuOpen) {
      var _this = this;
      if (isMenuOpen === void 0) {
        isMenuOpen = true;
      }
      var pUlHeight;
      var pElement;
      if (this.animationSettings.effect === "None" || !isMenuOpen) {
        this.end(ul, isMenuOpen);
      } else {
        this.animation.animate(ul, {
          name: this.animationSettings.effect,
          duration: this.animationSettings.duration,
          timingFunction: this.animationSettings.easing,
          begin: function(options) {
            if (_this.hamburgerMode) {
              pElement = options.element.parentElement;
              options.element.style.position = "absolute";
              pUlHeight = pElement.offsetHeight;
              options.element.style.maxHeight = options.element.offsetHeight + "px";
              pElement.style.maxHeight = "";
            } else {
              options.element.style.display = "block";
              options.element.style.maxHeight = options.element.getBoundingClientRect().height + "px";
            }
          },
          progress: function(options) {
            if (_this.hamburgerMode) {
              pElement.style.minHeight = pUlHeight + options.element.offsetHeight + "px";
            }
          },
          end: function(options) {
            if (_this.hamburgerMode) {
              options.element.style.position = "";
              options.element.style.maxHeight = "";
              pElement.style.minHeight = "";
              options.element.style.top = "0px";
              options.element.children[0].focus();
              _this.triggerOpen(options.element.children[0]);
            } else {
              _this.end(options.element, isMenuOpen);
            }
          }
        });
      }
    };
    MenuBase2.prototype.triggerOpen = function(ul) {
      var item = this.navIdx.length ? this.getItem(this.navIdx) : null;
      var eventArgs = {
        element: ul,
        parentItem: item,
        items: item ? item.items : this.items
      };
      this.trigger("onOpen", eventArgs);
      if (!this.isMenu) {
        EventHandler.add(ul, "keydown", this.keyHandler, this);
      }
    };
    MenuBase2.prototype.end = function(ul, isMenuOpen) {
      if (isMenuOpen) {
        ul.style.display = "block";
        ul.style.maxHeight = "";
        this.triggerOpen(ul);
        if (ul.querySelector("." + FOCUSED)) {
          ul.querySelector("." + FOCUSED).focus();
        } else {
          var ele = this.getWrapper().children[this.getIdx(this.getWrapper(), ul) - 1];
          if (this.currentTarget) {
            if (!(this.currentTarget.classList.contains("e-numerictextbox") || this.currentTarget.classList.contains("e-textbox") || this.currentTarget.tagName === "INPUT")) {
              if (ele) {
                ele.querySelector("." + SELECTED).focus();
              } else {
                this.element.focus();
              }
            }
          } else {
            if (ele) {
              ele.querySelector("." + SELECTED).focus();
            } else {
              this.element.focus();
            }
          }
        }
      } else {
        if (ul === this.element) {
          var fli = this.getLIByClass(this.element, FOCUSED);
          if (fli) {
            fli.classList.remove(FOCUSED);
          }
          var sli = this.getLIByClass(this.element, SELECTED);
          if (sli) {
            sli.classList.remove(SELECTED);
          }
          ul.style.display = "none";
        } else {
          detach(ul);
        }
      }
    };
    MenuBase2.prototype.getPersistData = function() {
      return "";
    };
    MenuBase2.prototype.getWrapper = function() {
      return closest(this.element, ".e-" + this.getModuleName() + "-wrapper");
    };
    MenuBase2.prototype.getIndex = function(data, isUniqueId, items, nIndex, isCallBack, level) {
      if (items === void 0) {
        items = this.items;
      }
      if (nIndex === void 0) {
        nIndex = [];
      }
      if (isCallBack === void 0) {
        isCallBack = false;
      }
      if (level === void 0) {
        level = 0;
      }
      var item;
      level = isCallBack ? level + 1 : 0;
      for (var i = 0, len = items.length; i < len; i++) {
        item = items[i];
        if ((isUniqueId ? item[this.getField("itemId", level)] : item[this.getField("text", level)]) === data) {
          nIndex.push(i);
          break;
        } else if (item[this.getField("children", level)] && item[this.getField("children", level)].length) {
          nIndex = this.getIndex(data, isUniqueId, item[this.getField("children", level)], nIndex, true, level);
          if (nIndex[nIndex.length - 1] === -1) {
            if (i !== len - 1) {
              nIndex.pop();
            }
          } else {
            nIndex.unshift(i);
            break;
          }
        } else {
          if (i === len - 1) {
            nIndex.push(-1);
          }
        }
      }
      return !isCallBack && nIndex[0] === -1 ? [] : nIndex;
    };
    MenuBase2.prototype.enableItems = function(items, enable, isUniqueId) {
      if (enable === void 0) {
        enable = true;
      }
      var ul;
      var idx;
      var navIdx;
      var disabled = DISABLED4;
      var skipItem;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        if (this.navIdx.length) {
          if (navIdx.length !== 1) {
            skipItem = false;
            for (var i_1 = 0, len = navIdx.length - 1; i_1 < len; i_1++) {
              if (navIdx[i_1] !== this.navIdx[i_1]) {
                skipItem = true;
                break;
              }
            }
            if (skipItem) {
              continue;
            }
          }
        } else {
          if (navIdx.length !== 1) {
            continue;
          }
        }
        idx = navIdx.pop();
        ul = this.getUlByNavIdx(navIdx.length);
        if (ul && !isNullOrUndefined(idx)) {
          if (enable) {
            if (this.isMenu) {
              ul.children[idx].classList.remove(disabled);
              ul.children[idx].removeAttribute("aria-disabled");
            } else {
              if (Browser.isDevice && !ul.classList.contains("e-contextmenu")) {
                ul.children[idx + 1].classList.remove(disabled);
              } else {
                ul.children[idx].classList.remove(disabled);
              }
            }
          } else {
            if (this.isMenu) {
              ul.children[idx].classList.add(disabled);
              ul.children[idx].setAttribute("aria-disabled", "true");
            } else {
              if (Browser.isDevice && !ul.classList.contains("e-contextmenu")) {
                ul.children[idx + 1].classList.add(disabled);
              } else {
                ul.children[idx].classList.add(disabled);
              }
            }
          }
        }
      }
    };
    MenuBase2.prototype.showItems = function(items, isUniqueId) {
      this.showHideItems(items, false, isUniqueId);
    };
    MenuBase2.prototype.hideItems = function(items, isUniqueId) {
      this.showHideItems(items, true, isUniqueId);
    };
    MenuBase2.prototype.showHideItems = function(items, ishide, isUniqueId) {
      var ul;
      var index;
      var navIdx;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        index = navIdx.pop();
        ul = this.getUlByNavIdx(navIdx.length);
        if (ul) {
          var validUl = isUniqueId ? ul.children[index].id : ul.children[index].textContent;
          if (ishide && validUl === items[i]) {
            ul.children[index].classList.add(HIDE);
          } else {
            ul.children[index].classList.remove(HIDE);
          }
        }
      }
    };
    MenuBase2.prototype.removeItems = function(items, isUniqueId) {
      var idx;
      var navIdx;
      var iitems;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(items[i], isUniqueId);
        idx = navIdx.pop();
        iitems = this.getItems(navIdx);
        if (!isNullOrUndefined(idx)) {
          this.removeItem(iitems, navIdx, idx);
        }
      }
    };
    MenuBase2.prototype.insertAfter = function(items, text, isUniqueId) {
      this.insertItems(items, text, isUniqueId);
    };
    MenuBase2.prototype.insertBefore = function(items, text, isUniqueId) {
      this.insertItems(items, text, isUniqueId, false);
    };
    MenuBase2.prototype.insertItems = function(items, text, isUniqueId, isAfter) {
      if (isAfter === void 0) {
        isAfter = true;
      }
      var li;
      var idx;
      var navIdx;
      var iitems;
      var menuitem;
      for (var i = 0; i < items.length; i++) {
        navIdx = this.getIndex(text, isUniqueId);
        idx = navIdx.pop();
        iitems = this.getItems(navIdx);
        menuitem = new MenuItem(iitems[0], "items", items[i], true);
        iitems.splice(isAfter ? idx + 1 : idx, 0, menuitem);
        var uls = this.isMenu ? [this.getWrapper()].concat(this.getPopups()) : [].slice.call(this.getWrapper().children);
        if (!isNullOrUndefined(idx) && navIdx.length < uls.length) {
          idx = isAfter ? idx + 1 : idx;
          li = this.createItems(iitems).children[idx];
          var ul = this.isMenu ? select(".e-menu-parent", uls[navIdx.length]) : uls[navIdx.length];
          ul.insertBefore(li, ul.children[idx]);
        }
      }
    };
    MenuBase2.prototype.removeAttributes = function() {
      var _this = this;
      ["top", "left", "display", "z-index"].forEach(function(key) {
        _this.element.style.removeProperty(key);
      });
      ["role", "tabindex", "class", "style"].forEach(function(key) {
        if (key === "class" && _this.element.classList.contains("e-menu-parent")) {
          _this.element.classList.remove("e-menu-parent");
        }
        if (["class", "style"].indexOf(key) === -1 || !_this.element.getAttribute(key)) {
          _this.element.removeAttribute(key);
        }
        if (_this.isMenu && key === "class" && _this.element.classList.contains("e-vertical")) {
          _this.element.classList.remove("e-vertical");
        }
      });
    };
    MenuBase2.prototype.destroy = function() {
      var wrapper = this.getWrapper();
      if (wrapper) {
        this.unWireEvents();
        if (!this.isMenu) {
          this.clonedElement.style.display = "";
          if (this.clonedElement.tagName === "EJS-CONTEXTMENU") {
            addClass([this.clonedElement], ["e-control", "e-lib", "e-" + this.getModuleName()]);
            this.element = this.clonedElement;
          } else {
            if (this.refreshing && this.clonedElement.childElementCount && this.clonedElement.children[0].tagName === "LI") {
              this.setProperties({ "items": [] }, true);
            }
            if (document.getElementById(this.clonedElement.id)) {
              var refEle = this.clonedElement.nextElementSibling;
              if (refEle && refEle !== wrapper) {
                this.clonedElement.parentElement.insertBefore(this.element, refEle);
              } else {
                this.clonedElement.parentElement.appendChild(this.element);
              }
              if (isBlazor() && !this.isMenu) {
                this.element = this.removeChildElement(this.element);
              } else {
                this.element.innerHTML = "";
              }
              append([].slice.call(this.clonedElement.children), this.element);
              detach(this.clonedElement);
              this.removeAttributes();
            }
          }
          this.clonedElement = null;
        } else {
          this.closeMenu();
          if (isBlazor() && !this.isMenu) {
            this.element = this.removeChildElement(this.element);
          } else {
            this.element.innerHTML = "";
          }
          this.removeAttributes();
          wrapper.parentNode.insertBefore(this.element, wrapper);
          this.clonedElement = null;
        }
        if (this.isMenu && this.clonedElement) {
          detach(this.element);
          wrapper.style.display = "";
          wrapper.classList.remove("e-" + this.getModuleName() + "-wrapper");
          wrapper.removeAttribute("data-ripple");
        } else {
          detach(wrapper);
        }
        _super.prototype.destroy.call(this);
        if (this.template) {
          this.clearTemplate(["template"]);
        }
      }
      this.rippleFn = null;
    };
    __decorate21([
      Event()
    ], MenuBase2.prototype, "beforeItemRender", void 0);
    __decorate21([
      Event()
    ], MenuBase2.prototype, "beforeOpen", void 0);
    __decorate21([
      Event()
    ], MenuBase2.prototype, "onOpen", void 0);
    __decorate21([
      Event()
    ], MenuBase2.prototype, "beforeClose", void 0);
    __decorate21([
      Event()
    ], MenuBase2.prototype, "onClose", void 0);
    __decorate21([
      Event()
    ], MenuBase2.prototype, "select", void 0);
    __decorate21([
      Event()
    ], MenuBase2.prototype, "created", void 0);
    __decorate21([
      Property("")
    ], MenuBase2.prototype, "cssClass", void 0);
    __decorate21([
      Property(0)
    ], MenuBase2.prototype, "hoverDelay", void 0);
    __decorate21([
      Property(false)
    ], MenuBase2.prototype, "showItemOnClick", void 0);
    __decorate21([
      Property("")
    ], MenuBase2.prototype, "target", void 0);
    __decorate21([
      Property("")
    ], MenuBase2.prototype, "filter", void 0);
    __decorate21([
      Property(null)
    ], MenuBase2.prototype, "template", void 0);
    __decorate21([
      Property(false)
    ], MenuBase2.prototype, "enableScrolling", void 0);
    __decorate21([
      Property(false)
    ], MenuBase2.prototype, "enableHtmlSanitizer", void 0);
    __decorate21([
      Complex({ itemId: "id", text: "text", parentId: "parentId", iconCss: "iconCss", url: "url", separator: "separator", children: "items" }, FieldSettings2)
    ], MenuBase2.prototype, "fields", void 0);
    __decorate21([
      Collection([], MenuItem)
    ], MenuBase2.prototype, "items", void 0);
    __decorate21([
      Complex({ duration: 400, easing: "ease", effect: "SlideDown" }, MenuAnimationSettings)
    ], MenuBase2.prototype, "animationSettings", void 0);
    MenuBase2 = __decorate21([
      NotifyPropertyChanges
    ], MenuBase2);
    return MenuBase2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/toolbar/toolbar.js
var __extends25 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate22 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_VERTICAL = "e-vertical";
var CLS_ITEMS = "e-toolbar-items";
var CLS_ITEM = "e-toolbar-item";
var CLS_RTL3 = "e-rtl";
var CLS_SEPARATOR = "e-separator";
var CLS_POPUPICON = "e-popup-up-icon";
var CLS_POPUPDOWN = "e-popup-down-icon";
var CLS_POPUPOPEN = "e-popup-open";
var CLS_TEMPLATE = "e-template";
var CLS_DISABLE3 = "e-overlay";
var CLS_POPUPTEXT = "e-toolbar-text";
var CLS_TBARTEXT = "e-popup-text";
var CLS_TBAROVERFLOW = "e-overflow-show";
var CLS_POPOVERFLOW = "e-overflow-hide";
var CLS_TBARBTN = "e-tbar-btn";
var CLS_TBARNAV = "e-hor-nav";
var CLS_TBARSCRLNAV = "e-scroll-nav";
var CLS_TBARRIGHT = "e-toolbar-right";
var CLS_TBARLEFT = "e-toolbar-left";
var CLS_TBARCENTER = "e-toolbar-center";
var CLS_TBARPOS = "e-tbar-pos";
var CLS_HSCROLLCNT = "e-hscroll-content";
var CLS_VSCROLLCNT = "e-vscroll-content";
var CLS_HSCROLLBAR2 = "e-hscroll-bar";
var CLS_POPUPNAV = "e-hor-nav";
var CLS_POPUPCLASS = "e-toolbar-pop";
var CLS_POPUP = "e-toolbar-popup";
var CLS_TBARBTNTEXT = "e-tbar-btn-text";
var CLS_TBARNAVACT = "e-nav-active";
var CLS_TBARIGNORE = "e-ignore";
var CLS_POPPRI = "e-popup-alone";
var CLS_HIDDEN = "e-hidden";
var CLS_MULTIROW = "e-toolbar-multirow";
var CLS_MULTIROWPOS = "e-multirow-pos";
var CLS_MULTIROW_SEPARATOR = "e-multirow-separator";
var CLS_EXTENDABLE_SEPARATOR = "e-extended-separator";
var CLS_EXTEANDABLE_TOOLBAR = "e-extended-toolbar";
var CLS_EXTENDABLECLASS = "e-toolbar-extended";
var CLS_EXTENDPOPUP = "e-expended-nav";
var CLS_EXTENDEDPOPOPEN = "e-tbar-extended";
var Item = (
  /** @class */
  function(_super) {
    __extends25(Item2, _super);
    function Item2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate22([
      Property("")
    ], Item2.prototype, "id", void 0);
    __decorate22([
      Property("")
    ], Item2.prototype, "text", void 0);
    __decorate22([
      Property("auto")
    ], Item2.prototype, "width", void 0);
    __decorate22([
      Property("")
    ], Item2.prototype, "cssClass", void 0);
    __decorate22([
      Property(false)
    ], Item2.prototype, "showAlwaysInPopup", void 0);
    __decorate22([
      Property(false)
    ], Item2.prototype, "disabled", void 0);
    __decorate22([
      Property("")
    ], Item2.prototype, "prefixIcon", void 0);
    __decorate22([
      Property("")
    ], Item2.prototype, "suffixIcon", void 0);
    __decorate22([
      Property(true)
    ], Item2.prototype, "visible", void 0);
    __decorate22([
      Property("None")
    ], Item2.prototype, "overflow", void 0);
    __decorate22([
      Property("")
    ], Item2.prototype, "template", void 0);
    __decorate22([
      Property("Button")
    ], Item2.prototype, "type", void 0);
    __decorate22([
      Property("Both")
    ], Item2.prototype, "showTextOn", void 0);
    __decorate22([
      Property(null)
    ], Item2.prototype, "htmlAttributes", void 0);
    __decorate22([
      Property("")
    ], Item2.prototype, "tooltipText", void 0);
    __decorate22([
      Property("Left")
    ], Item2.prototype, "align", void 0);
    __decorate22([
      Event()
    ], Item2.prototype, "click", void 0);
    __decorate22([
      Property(-1)
    ], Item2.prototype, "tabIndex", void 0);
    return Item2;
  }(ChildProperty)
);
var Toolbar = (
  /** @class */
  function(_super) {
    __extends25(Toolbar2, _super);
    function Toolbar2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.resizeContext = _this.resize.bind(_this);
      _this.keyConfigs = {
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow",
        popupOpen: "enter",
        popupClose: "escape",
        tab: "tab",
        home: "home",
        end: "end"
      };
      return _this;
    }
    Toolbar2.prototype.destroy = function() {
      var _this = this;
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      var btnItems = this.element.querySelectorAll(".e-control.e-btn");
      [].slice.call(btnItems).forEach(function(el) {
        if (!isNullOrUndefined(el) && !isNullOrUndefined(el.ej2_instances) && !isNullOrUndefined(el.ej2_instances[0]) && !el.ej2_instances[0].isDestroyed) {
          el.ej2_instances[0].destroy();
        }
      });
      this.unwireEvents();
      this.tempId.forEach(function(ele) {
        if (!isNullOrUndefined(_this.element.querySelector(ele))) {
          document.body.appendChild(_this.element.querySelector(ele)).style.display = "none";
        }
      });
      this.destroyItems();
      while (this.element.lastElementChild) {
        this.element.removeChild(this.element.lastElementChild);
      }
      if (this.trgtEle) {
        this.element.appendChild(this.ctrlTem);
        this.trgtEle = null;
        this.ctrlTem = null;
      }
      if (this.popObj) {
        this.popObj.destroy();
        detach(this.popObj.element);
      }
      if (this.activeEle) {
        this.activeEle = null;
      }
      this.popObj = null;
      this.tbarAlign = null;
      this.tbarItemsCol = [];
      this.remove(this.element, "e-toolpop");
      if (this.cssClass) {
        removeClass([this.element], this.cssClass.split(" "));
      }
      this.element.removeAttribute("style");
      ["aria-disabled", "aria-orientation", "role"].forEach(function(attrb) {
        return _this.element.removeAttribute(attrb);
      });
      _super.prototype.destroy.call(this);
    };
    Toolbar2.prototype.preRender = function() {
      var eventArgs = { enableCollision: this.enableCollision, scrollStep: this.scrollStep };
      this.trigger("beforeCreate", eventArgs);
      this.enableCollision = eventArgs.enableCollision;
      this.scrollStep = eventArgs.scrollStep;
      this.scrollModule = null;
      this.popObj = null;
      this.tempId = [];
      this.tbarItemsCol = this.items;
      this.isVertical = this.element.classList.contains(CLS_VERTICAL) ? true : false;
      this.isExtendedOpen = false;
      this.popupPriCount = 0;
      if (this.enableRtl) {
        this.add(this.element, CLS_RTL3);
      }
    };
    Toolbar2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.clickHandler, this);
      window.addEventListener("resize", this.resizeContext);
      if (this.allowKeyboard) {
        this.wireKeyboardEvent();
      }
    };
    Toolbar2.prototype.wireKeyboardEvent = function() {
      this.keyModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs
      });
      EventHandler.add(this.element, "keydown", this.docKeyDown, this);
      this.updateTabIndex("0");
    };
    Toolbar2.prototype.updateTabIndex = function(tabIndex) {
      var ele = this.element.querySelector("." + CLS_ITEM + ":not(." + CLS_DISABLE3 + " ):not(." + CLS_SEPARATOR + " ):not(." + CLS_HIDDEN + " )");
      if (!isNullOrUndefined(ele) && !isNullOrUndefined(ele.firstElementChild)) {
        var dataTabIndex = ele.firstElementChild.getAttribute("data-tabindex");
        if (dataTabIndex && dataTabIndex === "-1" && ele.firstElementChild.tagName !== "INPUT") {
          ele.firstElementChild.setAttribute("tabindex", tabIndex);
        }
      }
    };
    Toolbar2.prototype.unwireKeyboardEvent = function() {
      if (this.keyModule) {
        EventHandler.remove(this.element, "keydown", this.docKeyDown);
        this.keyModule.destroy();
        this.keyModule = null;
      }
    };
    Toolbar2.prototype.docKeyDown = function(e) {
      if (e.target.tagName === "INPUT") {
        return;
      }
      var popCheck = !isNullOrUndefined(this.popObj) && isVisible(this.popObj.element) && this.overflowMode !== "Extended";
      if (e.keyCode === 9 && e.target.classList.contains("e-hor-nav") === true && popCheck) {
        this.popObj.hide({ name: "FadeOut", duration: 100 });
      }
      var keyCheck = e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 35 || e.keyCode === 36;
      if (keyCheck) {
        e.preventDefault();
      }
    };
    Toolbar2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, "click", this.clickHandler);
      this.destroyScroll();
      this.unwireKeyboardEvent();
      window.removeEventListener("resize", this.resizeContext);
      EventHandler.remove(document, "scroll", this.docEvent);
      EventHandler.remove(document, "click", this.docEvent);
    };
    Toolbar2.prototype.clearProperty = function() {
      this.tbarEle = [];
      this.tbarAlgEle = { lefts: [], centers: [], rights: [] };
    };
    Toolbar2.prototype.docEvent = function(e) {
      var popEle = closest(e.target, ".e-popup");
      if (this.popObj && isVisible(this.popObj.element) && !popEle && this.overflowMode === "Popup") {
        this.popObj.hide({ name: "FadeOut", duration: 100 });
      }
    };
    Toolbar2.prototype.destroyScroll = function() {
      if (this.scrollModule) {
        if (this.tbarAlign) {
          this.add(this.scrollModule.element, CLS_TBARPOS);
        }
        this.scrollModule.destroy();
        this.scrollModule = null;
      }
    };
    Toolbar2.prototype.destroyItems = function() {
      if (this.element) {
        [].slice.call(this.element.querySelectorAll("." + CLS_ITEM)).forEach(function(el) {
          detach(el);
        });
      }
      if (this.tbarAlign) {
        var tbarItems = this.element.querySelector("." + CLS_ITEMS);
        [].slice.call(tbarItems.children).forEach(function(el) {
          detach(el);
        });
        this.tbarAlign = false;
        this.remove(tbarItems, CLS_TBARPOS);
      }
      this.clearProperty();
    };
    Toolbar2.prototype.destroyMode = function() {
      if (this.scrollModule) {
        this.remove(this.scrollModule.element, CLS_RTL3);
        this.destroyScroll();
      }
      this.remove(this.element, CLS_EXTENDEDPOPOPEN);
      this.remove(this.element, CLS_EXTEANDABLE_TOOLBAR);
      var tempEle = this.element.querySelector(".e-toolbar-multirow");
      if (tempEle) {
        this.remove(tempEle, CLS_MULTIROW);
      }
      if (this.popObj) {
        this.popupRefresh(this.popObj.element, true);
      }
    };
    Toolbar2.prototype.add = function(ele, val) {
      ele.classList.add(val);
    };
    Toolbar2.prototype.remove = function(ele, val) {
      ele.classList.remove(val);
    };
    Toolbar2.prototype.elementFocus = function(ele) {
      var fChild = ele.firstElementChild;
      if (fChild) {
        fChild.focus();
        this.activeEleSwitch(ele);
      } else {
        ele.focus();
      }
    };
    Toolbar2.prototype.clstElement = function(tbrNavChk, trgt) {
      var clst;
      if (tbrNavChk && this.popObj && isVisible(this.popObj.element)) {
        clst = this.popObj.element.querySelector("." + CLS_ITEM);
      } else if (this.element === trgt || tbrNavChk) {
        clst = this.element.querySelector("." + CLS_ITEM + ":not(." + CLS_DISABLE3 + " ):not(." + CLS_SEPARATOR + " ):not(." + CLS_HIDDEN + " )");
      } else {
        clst = closest(trgt, "." + CLS_ITEM);
      }
      return clst;
    };
    Toolbar2.prototype.keyHandling = function(clst, e, trgt, navChk, scrollChk) {
      var popObj = this.popObj;
      var rootEle = this.element;
      var popAnimate = { name: "FadeOut", duration: 100 };
      var value = e.action === "moveUp" ? "previous" : "next";
      var ele;
      var nodes;
      switch (e.action) {
        case "moveRight":
          if (this.isVertical) {
            return;
          }
          if (rootEle === trgt) {
            this.elementFocus(clst);
          } else if (!navChk) {
            this.eleFocus(clst, "next");
          }
          break;
        case "moveLeft":
          if (this.isVertical) {
            return;
          }
          if (!navChk) {
            this.eleFocus(clst, "previous");
          }
          break;
        case "home":
        case "end":
          if (clst) {
            var popupCheck = closest(clst, ".e-popup");
            var extendedPopup = this.element.querySelector("." + CLS_EXTENDABLECLASS);
            if (this.overflowMode === "Extended" && extendedPopup && extendedPopup.classList.contains("e-popup-open")) {
              popupCheck = e.action === "end" ? extendedPopup : null;
            }
            if (popupCheck) {
              if (isVisible(this.popObj.element)) {
                nodes = [].slice.call(popupCheck.children);
                if (e.action === "home") {
                  ele = this.focusFirstVisibleEle(nodes);
                } else {
                  ele = this.focusLastVisibleEle(nodes);
                }
              }
            } else {
              nodes = this.element.querySelectorAll("." + CLS_ITEMS + " ." + CLS_ITEM + ":not(." + CLS_SEPARATOR + ")");
              if (e.action === "home") {
                ele = this.focusFirstVisibleEle(nodes);
              } else {
                ele = this.focusLastVisibleEle(nodes);
              }
            }
            if (ele) {
              this.elementFocus(ele);
            }
          }
          break;
        case "moveUp":
        case "moveDown":
          if (!this.isVertical) {
            if (popObj && closest(trgt, ".e-popup")) {
              var popEle = popObj.element;
              var popFrstEle = popEle.firstElementChild;
              if (value === "previous" && popFrstEle === clst) {
                popEle.lastElementChild.firstChild.focus();
              } else if (value === "next" && popEle.lastElementChild === clst) {
                popFrstEle.firstChild.focus();
              } else {
                this.eleFocus(clst, value);
              }
            } else if (e.action === "moveDown" && popObj && isVisible(popObj.element)) {
              this.elementFocus(clst);
            }
          } else {
            if (e.action === "moveUp") {
              this.eleFocus(clst, "previous");
            } else {
              this.eleFocus(clst, "next");
            }
          }
          break;
        case "tab":
          if (!scrollChk && !navChk) {
            var ele_1 = clst.firstElementChild;
            if (rootEle === trgt) {
              if (this.activeEle) {
                this.activeEle.focus();
              } else {
                this.activeEleRemove(ele_1);
                ele_1.focus();
              }
            }
          }
          break;
        case "popupClose":
          if (popObj && this.overflowMode !== "Extended") {
            popObj.hide(popAnimate);
          }
          break;
        case "popupOpen":
          if (!navChk) {
            return;
          }
          if (popObj && !isVisible(popObj.element)) {
            popObj.element.style.top = rootEle.offsetHeight + "px";
            popObj.show({ name: "FadeIn", duration: 100 });
          } else {
            popObj.hide(popAnimate);
          }
          break;
      }
    };
    Toolbar2.prototype.keyActionHandler = function(e) {
      var trgt = e.target;
      if (trgt.tagName === "INPUT" || trgt.tagName === "TEXTAREA" || this.element.classList.contains(CLS_DISABLE3)) {
        return;
      }
      e.preventDefault();
      var tbrNavChk = trgt.classList.contains(CLS_TBARNAV);
      var tbarScrollChk = trgt.classList.contains(CLS_TBARSCRLNAV);
      var clst = this.clstElement(tbrNavChk, trgt);
      if (clst || tbarScrollChk) {
        this.keyHandling(clst, e, trgt, tbrNavChk, tbarScrollChk);
      }
    };
    Toolbar2.prototype.disable = function(value) {
      var rootEle = this.element;
      if (value) {
        rootEle.classList.add(CLS_DISABLE3);
      } else {
        rootEle.classList.remove(CLS_DISABLE3);
      }
      if (this.activeEle) {
        this.activeEle.setAttribute("tabindex", this.activeEle.getAttribute("data-tabindex"));
      }
      if (this.scrollModule) {
        this.scrollModule.disable(value);
      }
      if (this.popObj) {
        if (isVisible(this.popObj.element) && this.overflowMode !== "Extended") {
          this.popObj.hide();
        }
        rootEle.querySelector("#" + rootEle.id + "_nav").setAttribute("tabindex", !value ? "0" : "-1");
      }
    };
    Toolbar2.prototype.eleContains = function(el) {
      return el.classList.contains(CLS_SEPARATOR) || el.classList.contains(CLS_DISABLE3) || el.getAttribute("disabled") || el.classList.contains(CLS_HIDDEN) || !isVisible(el) || !el.classList.contains(CLS_ITEM);
    };
    Toolbar2.prototype.focusFirstVisibleEle = function(nodes) {
      var element2;
      var index = 0;
      while (index < nodes.length) {
        var ele = nodes[parseInt(index.toString(), 10)];
        if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE3)) {
          return ele;
        }
        index++;
      }
      return element2;
    };
    Toolbar2.prototype.focusLastVisibleEle = function(nodes) {
      var element2;
      var index = nodes.length - 1;
      while (index >= 0) {
        var ele = nodes[parseInt(index.toString(), 10)];
        if (!ele.classList.contains(CLS_HIDDEN) && !ele.classList.contains(CLS_DISABLE3)) {
          return ele;
        }
        index--;
      }
      return element2;
    };
    Toolbar2.prototype.eleFocus = function(closest2, pos) {
      var sib = Object(closest2)[pos + "ElementSibling"];
      if (sib) {
        var skipEle = this.eleContains(sib);
        if (skipEle) {
          this.eleFocus(sib, pos);
          return;
        }
        this.elementFocus(sib);
      } else if (this.tbarAlign) {
        var elem = Object(closest2.parentElement)[pos + "ElementSibling"];
        if (!isNullOrUndefined(elem) && elem.children.length === 0) {
          elem = Object(elem)[pos + "ElementSibling"];
        }
        if (!isNullOrUndefined(elem) && elem.children.length > 0) {
          if (pos === "next") {
            var el = elem.querySelector("." + CLS_ITEM);
            if (this.eleContains(el)) {
              this.eleFocus(el, pos);
            } else {
              el.firstElementChild.focus();
              this.activeEleSwitch(el);
            }
          } else {
            var el = elem.lastElementChild;
            if (this.eleContains(el)) {
              this.eleFocus(el, pos);
            } else {
              this.elementFocus(el);
            }
          }
        }
      } else if (!isNullOrUndefined(closest2)) {
        var tbrItems = this.element.querySelectorAll("." + CLS_ITEMS + " ." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_DISABLE3 + "):not(." + CLS_HIDDEN + ")");
        if (pos === "next" && tbrItems) {
          this.elementFocus(tbrItems[0]);
        } else if (pos === "previous" && tbrItems) {
          this.elementFocus(tbrItems[tbrItems.length - 1]);
        }
      }
    };
    Toolbar2.prototype.clickHandler = function(e) {
      var _this = this;
      var trgt = e.target;
      var ele = this.element;
      var isPopupElement = !isNullOrUndefined(closest(trgt, "." + CLS_POPUPCLASS));
      var clsList = trgt.classList;
      var popupNav = closest(trgt, "." + CLS_TBARNAV);
      if (!popupNav) {
        popupNav = trgt;
      }
      if (!ele.children[0].classList.contains("e-hscroll") && !ele.children[0].classList.contains("e-vscroll") && clsList.contains(CLS_TBARNAV)) {
        clsList = trgt.querySelector(".e-icons").classList;
      }
      if (clsList.contains(CLS_POPUPICON) || clsList.contains(CLS_POPUPDOWN)) {
        this.popupClickHandler(ele, popupNav, CLS_RTL3);
      }
      var itemObj;
      var clst = closest(e.target, "." + CLS_ITEM);
      if ((isNullOrUndefined(clst) || clst.classList.contains(CLS_DISABLE3)) && !popupNav.classList.contains(CLS_TBARNAV)) {
        return;
      }
      if (clst) {
        var tempItem = this.items[this.tbarEle.indexOf(clst)];
        itemObj = tempItem;
      }
      var eventArgs = { originalEvent: e, item: itemObj };
      if (itemObj && !isNullOrUndefined(itemObj.click)) {
        this.trigger("items[" + this.tbarEle.indexOf(clst) + "].click", eventArgs);
      }
      if (!eventArgs.cancel) {
        this.trigger("clicked", eventArgs, function(clickedArgs) {
          if (!isNullOrUndefined(_this.popObj) && isPopupElement && !clickedArgs.cancel && _this.overflowMode === "Popup" && clickedArgs.item && clickedArgs.item.type !== "Input") {
            _this.popObj.hide({ name: "FadeOut", duration: 100 });
          }
        });
      }
    };
    Toolbar2.prototype.popupClickHandler = function(ele, popupNav, CLS_RTL8) {
      var popObj = this.popObj;
      if (isVisible(popObj.element)) {
        popupNav.classList.remove(CLS_TBARNAVACT);
        popObj.hide({ name: "FadeOut", duration: 100 });
      } else {
        if (ele.classList.contains(CLS_RTL8)) {
          popObj.enableRtl = true;
          popObj.position = { X: "left", Y: "top" };
        }
        if (popObj.offsetX === 0 && !ele.classList.contains(CLS_RTL8)) {
          popObj.enableRtl = false;
          popObj.position = { X: "right", Y: "top" };
        }
        popObj.dataBind();
        popObj.refreshPosition();
        popObj.element.style.top = this.getElementOffsetY() + "px";
        if (this.overflowMode === "Extended") {
          popObj.element.style.minHeight = "0px";
        }
        popupNav.classList.add(CLS_TBARNAVACT);
        popObj.show({ name: "FadeIn", duration: 100 });
      }
    };
    Toolbar2.prototype.render = function() {
      this.initialize();
      this.renderControl();
      this.wireEvents();
      this.renderComplete();
    };
    Toolbar2.prototype.initialize = function() {
      var width = formatUnit(this.width);
      var height = formatUnit(this.height);
      if (Browser.info.name !== "msie" || this.height !== "auto" || this.overflowMode === "MultiRow") {
        setStyleAttribute(this.element, { "height": height });
      }
      setStyleAttribute(this.element, { "width": width });
      var ariaAttr = {
        "role": "toolbar",
        "aria-disabled": "false",
        "aria-orientation": !this.isVertical ? "horizontal" : "vertical"
      };
      attributes(this.element, ariaAttr);
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    Toolbar2.prototype.renderControl = function() {
      var ele = this.element;
      this.trgtEle = ele.children.length > 0 ? ele.querySelector("div") : null;
      this.tbarAlgEle = { lefts: [], centers: [], rights: [] };
      this.renderItems();
      this.renderLayout();
    };
    Toolbar2.prototype.renderLayout = function() {
      this.renderOverflowMode();
      if (this.tbarAlign) {
        this.itemPositioning();
      }
      if (this.popObj && this.popObj.element.childElementCount > 1 && this.checkPopupRefresh(this.element, this.popObj.element)) {
        this.popupRefresh(this.popObj.element, false);
      }
      this.separator();
    };
    Toolbar2.prototype.itemsAlign = function(items, itemEleDom) {
      var innerItem;
      var innerPos;
      if (!this.tbarEle) {
        this.tbarEle = [];
      }
      for (var i = 0; i < items.length; i++) {
        innerItem = this.renderSubComponent(items[parseInt(i.toString(), 10)], i);
        if (this.tbarEle.indexOf(innerItem) === -1) {
          this.tbarEle.push(innerItem);
        }
        if (!this.tbarAlign) {
          this.tbarItemAlign(items[parseInt(i.toString(), 10)], itemEleDom, i);
        }
        innerPos = itemEleDom.querySelector(".e-toolbar-" + items[parseInt(i.toString(), 10)].align.toLowerCase());
        if (innerPos) {
          if (!(items[parseInt(i.toString(), 10)].showAlwaysInPopup && items[parseInt(i.toString(), 10)].overflow !== "Show")) {
            this.tbarAlgEle[(items[parseInt(i.toString(), 10)].align + "s").toLowerCase()].push(innerItem);
          }
          innerPos.appendChild(innerItem);
        } else {
          itemEleDom.appendChild(innerItem);
        }
      }
      if (this.isReact) {
        var portals = "portals";
        this.notify("render-react-toolbar-template", this["" + portals]);
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.changeOrientation = function() {
      var ele = this.element;
      if (this.isVertical) {
        ele.classList.remove(CLS_VERTICAL);
        this.isVertical = false;
        if (this.height === "auto" || this.height === "100%") {
          ele.style.height = this.height;
        }
        ele.setAttribute("aria-orientation", "horizontal");
      } else {
        ele.classList.add(CLS_VERTICAL);
        this.isVertical = true;
        ele.setAttribute("aria-orientation", "vertical");
        setStyleAttribute(this.element, { "height": formatUnit(this.height), "width": formatUnit(this.width) });
      }
      this.destroyMode();
      this.refreshOverflow();
    };
    Toolbar2.prototype.initScroll = function(element2, innerItems) {
      if (!this.scrollModule && this.checkOverflow(element2, innerItems[0])) {
        if (this.tbarAlign) {
          this.element.querySelector("." + CLS_ITEMS + " ." + CLS_TBARCENTER).removeAttribute("style");
        }
        if (this.isVertical) {
          this.scrollModule = new VScroll({ scrollStep: this.scrollStep, enableRtl: this.enableRtl }, innerItems[0]);
        } else {
          this.scrollModule = new HScroll({ scrollStep: this.scrollStep, enableRtl: this.enableRtl }, innerItems[0]);
        }
        if (this.cssClass) {
          addClass([innerItems[0]], this.cssClass.split(" "));
        }
        this.remove(this.scrollModule.element, CLS_TBARPOS);
        setStyleAttribute(this.element, { overflow: "hidden" });
      }
    };
    Toolbar2.prototype.itemWidthCal = function(items) {
      var _this = this;
      var width = 0;
      var style;
      [].slice.call(selectAll("." + CLS_ITEM, items)).forEach(function(el) {
        if (isVisible(el)) {
          style = window.getComputedStyle(el);
          width += _this.isVertical ? el.offsetHeight : el.offsetWidth;
          width += parseFloat(_this.isVertical ? style.marginTop : style.marginRight);
          width += parseFloat(_this.isVertical ? style.marginBottom : style.marginLeft);
        }
      });
      return width;
    };
    Toolbar2.prototype.getScrollCntEle = function(innerItem) {
      var trgClass = this.isVertical ? ".e-vscroll-content" : ".e-hscroll-content";
      return innerItem.querySelector(trgClass);
    };
    Toolbar2.prototype.checkOverflow = function(element2, innerItem) {
      if (isNullOrUndefined(element2) || isNullOrUndefined(innerItem) || !isVisible(element2)) {
        return false;
      }
      var eleWidth = this.isVertical ? element2.offsetHeight : element2.offsetWidth;
      var itemWidth = this.isVertical ? innerItem.offsetHeight : innerItem.offsetWidth;
      if (this.tbarAlign || this.scrollModule || eleWidth === itemWidth) {
        itemWidth = this.itemWidthCal(this.scrollModule ? this.getScrollCntEle(innerItem) : innerItem);
      }
      var popNav = element2.querySelector("." + CLS_TBARNAV);
      var scrollNav = element2.querySelector("." + CLS_TBARSCRLNAV);
      var navEleWidth = 0;
      if (popNav) {
        navEleWidth = this.isVertical ? popNav.offsetHeight : popNav.offsetWidth;
      } else if (scrollNav) {
        navEleWidth = this.isVertical ? scrollNav.offsetHeight * 2 : scrollNav.offsetWidth * 2;
      }
      if (itemWidth > eleWidth - navEleWidth) {
        return true;
      } else {
        return false;
      }
    };
    Toolbar2.prototype.refreshOverflow = function() {
      this.resize();
    };
    Toolbar2.prototype.toolbarAlign = function(innerItems) {
      if (this.tbarAlign) {
        this.add(innerItems, CLS_TBARPOS);
        this.itemPositioning();
      }
    };
    Toolbar2.prototype.renderOverflowMode = function() {
      var ele = this.element;
      var innerItems = ele.querySelector("." + CLS_ITEMS);
      var priorityCheck = this.popupPriCount > 0;
      if (ele && ele.children.length > 0) {
        this.offsetWid = ele.offsetWidth;
        this.remove(this.element, "e-toolpop");
        if (Browser.info.name === "msie" && this.height === "auto") {
          ele.style.height = "";
        }
        switch (this.overflowMode) {
          case "Scrollable":
            if (isNullOrUndefined(this.scrollModule)) {
              this.initScroll(ele, [].slice.call(ele.getElementsByClassName(CLS_ITEMS)));
            }
            break;
          case "Popup":
            this.add(this.element, "e-toolpop");
            if (this.tbarAlign) {
              this.removePositioning();
            }
            if (this.checkOverflow(ele, innerItems) || priorityCheck) {
              this.setOverflowAttributes(ele);
            }
            this.toolbarAlign(innerItems);
            break;
          case "MultiRow":
            this.add(innerItems, CLS_MULTIROW);
            if (this.checkOverflow(ele, innerItems) && this.tbarAlign) {
              this.removePositioning();
              this.add(innerItems, CLS_MULTIROWPOS);
            }
            if (ele.style.overflow === "hidden") {
              ele.style.overflow = "";
            }
            if (Browser.info.name === "msie" || ele.style.height !== "auto") {
              ele.style.height = "auto";
            }
            break;
          case "Extended":
            this.add(this.element, CLS_EXTEANDABLE_TOOLBAR);
            if (this.checkOverflow(ele, innerItems) || priorityCheck) {
              if (this.tbarAlign) {
                this.removePositioning();
              }
              this.setOverflowAttributes(ele);
            }
            this.toolbarAlign(innerItems);
        }
      }
    };
    Toolbar2.prototype.setOverflowAttributes = function(ele) {
      this.createPopupEle(ele, [].slice.call(selectAll("." + CLS_ITEMS + " ." + CLS_ITEM, ele)));
      var ariaAttr = {
        "tabindex": "0",
        "role": "button",
        "aria-haspopup": "true",
        "aria-label": "overflow"
      };
      attributes(this.element.querySelector("." + CLS_TBARNAV), ariaAttr);
    };
    Toolbar2.prototype.separator = function() {
      var element2 = this.element;
      var eleItem = [].slice.call(element2.querySelectorAll("." + CLS_SEPARATOR));
      var multiVar = element2.querySelector("." + CLS_MULTIROW_SEPARATOR);
      var extendVar = element2.querySelector("." + CLS_EXTENDABLE_SEPARATOR);
      var eleInlineItem = this.overflowMode === "MultiRow" ? multiVar : extendVar;
      if (eleInlineItem !== null) {
        if (this.overflowMode === "MultiRow") {
          eleInlineItem.classList.remove(CLS_MULTIROW_SEPARATOR);
        } else if (this.overflowMode === "Extended") {
          eleInlineItem.classList.remove(CLS_EXTENDABLE_SEPARATOR);
        }
      }
      for (var i = 0; i <= eleItem.length - 1; i++) {
        if (eleItem[parseInt(i.toString(), 10)].offsetLeft < 30 && eleItem[parseInt(i.toString(), 10)].offsetLeft !== 0) {
          if (this.overflowMode === "MultiRow") {
            eleItem[parseInt(i.toString(), 10)].classList.add(CLS_MULTIROW_SEPARATOR);
          } else if (this.overflowMode === "Extended") {
            eleItem[parseInt(i.toString(), 10)].classList.add(CLS_EXTENDABLE_SEPARATOR);
          }
        }
      }
    };
    Toolbar2.prototype.createPopupEle = function(ele, innerEle) {
      var innerNav = ele.querySelector("." + CLS_TBARNAV);
      var vertical = this.isVertical;
      if (!innerNav) {
        this.createPopupIcon(ele);
      }
      innerNav = ele.querySelector("." + CLS_TBARNAV);
      var innerNavDom = vertical ? innerNav.offsetHeight : innerNav.offsetWidth;
      var eleWidth = (vertical ? ele.offsetHeight : ele.offsetWidth) - innerNavDom;
      this.element.classList.remove("e-rtl");
      setStyleAttribute(this.element, { direction: "initial" });
      this.checkPriority(ele, innerEle, eleWidth, true);
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      }
      this.element.style.removeProperty("direction");
      this.createPopup();
    };
    Toolbar2.prototype.pushingPoppedEle = function(tbarObj, popupPri, ele, eleHeight, sepHeight) {
      var element2 = tbarObj.element;
      var poppedEle = [].slice.call(selectAll("." + CLS_POPUP, element2.querySelector("." + CLS_ITEMS)));
      var nodes = selectAll("." + CLS_TBAROVERFLOW, ele);
      var nodeIndex = 0;
      var nodePri = 0;
      poppedEle.forEach(function(el, index) {
        nodes = selectAll("." + CLS_TBAROVERFLOW, ele);
        if (el.classList.contains(CLS_TBAROVERFLOW) && nodes.length > 0) {
          if (tbarObj.tbResize && nodes.length > index) {
            ele.insertBefore(el, nodes[parseInt(index.toString(), 10)]);
            ++nodePri;
          } else {
            ele.insertBefore(el, ele.children[nodes.length]);
            ++nodePri;
          }
        } else if (el.classList.contains(CLS_TBAROVERFLOW)) {
          ele.insertBefore(el, ele.firstChild);
          ++nodePri;
        } else if (tbarObj.tbResize && el.classList.contains(CLS_POPOVERFLOW) && ele.children.length > 0 && nodes.length === 0) {
          ele.insertBefore(el, ele.firstChild);
          ++nodePri;
        } else if (el.classList.contains(CLS_POPOVERFLOW)) {
          popupPri.push(el);
        } else if (tbarObj.tbResize) {
          ele.insertBefore(el, ele.childNodes[nodeIndex + nodePri]);
          ++nodeIndex;
        } else {
          ele.appendChild(el);
        }
        if (el.classList.contains(CLS_SEPARATOR)) {
          setStyleAttribute(el, { display: "", height: sepHeight + "px" });
        } else {
          setStyleAttribute(el, { display: "", height: eleHeight + "px" });
        }
      });
      popupPri.forEach(function(el) {
        ele.appendChild(el);
      });
      var tbarEle = selectAll("." + CLS_ITEM, element2.querySelector("." + CLS_ITEMS));
      for (var i = tbarEle.length - 1; i >= 0; i--) {
        var tbarElement = tbarEle[parseInt(i.toString(), 10)];
        if (tbarElement.classList.contains(CLS_SEPARATOR) && this.overflowMode !== "Extended") {
          setStyleAttribute(tbarElement, { display: "none" });
        } else {
          break;
        }
      }
    };
    Toolbar2.prototype.createPopup = function() {
      var element2 = this.element;
      var sepHeight;
      var sepItem;
      if (this.overflowMode === "Extended") {
        sepItem = element2.querySelector("." + CLS_SEPARATOR + ":not(." + CLS_POPUP + ")");
        sepHeight = element2.style.height === "auto" || element2.style.height === "" ? null : sepItem.offsetHeight;
      }
      var eleItem = element2.querySelector("." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_POPUP + ")");
      var eleHeight = element2.style.height === "auto" || element2.style.height === "" ? null : eleItem && eleItem.offsetHeight;
      var ele;
      var popupPri = [];
      if (select("#" + element2.id + "_popup." + CLS_POPUPCLASS, element2)) {
        ele = select("#" + element2.id + "_popup." + CLS_POPUPCLASS, element2);
      } else {
        var extendEle = this.createElement("div", {
          id: element2.id + "_popup",
          className: CLS_POPUPCLASS + " " + CLS_EXTENDABLECLASS
        });
        var popupEle = this.createElement("div", { id: element2.id + "_popup", className: CLS_POPUPCLASS });
        ele = this.overflowMode === "Extended" ? extendEle : popupEle;
      }
      this.pushingPoppedEle(this, popupPri, ele, eleHeight, sepHeight);
      this.popupInit(element2, ele);
    };
    Toolbar2.prototype.getElementOffsetY = function() {
      return this.overflowMode === "Extended" && window.getComputedStyle(this.element).getPropertyValue("box-sizing") === "border-box" ? this.element.clientHeight : this.element.offsetHeight;
    };
    Toolbar2.prototype.popupInit = function(element2, ele) {
      if (!this.popObj) {
        element2.appendChild(ele);
        if (this.cssClass) {
          addClass([ele], this.cssClass.split(" "));
        }
        setStyleAttribute(this.element, { overflow: "" });
        var eleStyles = window.getComputedStyle(this.element);
        var popup = new Popup(null, {
          relateTo: this.element,
          offsetY: this.isVertical ? 0 : this.getElementOffsetY(),
          enableRtl: this.enableRtl,
          open: this.popupOpen.bind(this),
          close: this.popupClose.bind(this),
          collision: { Y: this.enableCollision ? "flip" : "none" },
          position: this.enableRtl ? { X: "left", Y: "top" } : { X: "right", Y: "top" }
        });
        if (this.overflowMode === "Extended") {
          popup.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
          popup.offsetX = 0;
        }
        popup.appendTo(ele);
        EventHandler.add(document, "scroll", this.docEvent.bind(this));
        EventHandler.add(document, "click ", this.docEvent.bind(this));
        popup.element.style.maxHeight = popup.element.offsetHeight + "px";
        if (this.isVertical) {
          popup.element.style.visibility = "hidden";
        }
        if (this.isExtendedOpen) {
          var popupNav = this.element.querySelector("." + CLS_TBARNAV);
          popupNav.classList.add(CLS_TBARNAVACT);
          classList(popupNav.firstElementChild, [CLS_POPUPICON], [CLS_POPUPDOWN]);
          this.element.querySelector("." + CLS_EXTENDABLECLASS).classList.add(CLS_POPUPOPEN);
        } else {
          popup.hide();
        }
        this.popObj = popup;
      } else {
        var popupEle = this.popObj.element;
        setStyleAttribute(popupEle, { maxHeight: "", display: "block" });
        setStyleAttribute(popupEle, { maxHeight: popupEle.offsetHeight + "px", display: "" });
      }
    };
    Toolbar2.prototype.tbarPopupHandler = function(isOpen) {
      if (this.overflowMode === "Extended") {
        if (isOpen) {
          this.add(this.element, CLS_EXTENDEDPOPOPEN);
        } else {
          this.remove(this.element, CLS_EXTENDEDPOPOPEN);
        }
      }
    };
    Toolbar2.prototype.popupOpen = function(e) {
      var popObj = this.popObj;
      if (!this.isVertical) {
        popObj.offsetY = this.getElementOffsetY();
        popObj.dataBind();
      }
      var popupEle = this.popObj.element;
      var toolEle = this.popObj.element.parentElement;
      var popupNav = toolEle.querySelector("." + CLS_TBARNAV);
      popupNav.setAttribute("aria-expanded", "true");
      setStyleAttribute(popObj.element, { height: "auto", maxHeight: "" });
      popObj.element.style.maxHeight = popObj.element.offsetHeight + "px";
      if (this.overflowMode === "Extended") {
        popObj.element.style.minHeight = "";
      }
      var popupElePos = popupEle.offsetTop + popupEle.offsetHeight + calculatePosition(toolEle).top;
      var popIcon = popupNav.firstElementChild;
      popupNav.classList.add(CLS_TBARNAVACT);
      classList(popIcon, [CLS_POPUPICON], [CLS_POPUPDOWN]);
      this.tbarPopupHandler(true);
      var scrollVal = isNullOrUndefined(window.scrollY) ? 0 : window.scrollY;
      if (!this.isVertical && window.innerHeight + scrollVal < popupElePos && this.element.offsetTop < popupEle.offsetHeight) {
        var overflowHeight = popupEle.offsetHeight - (popupElePos - window.innerHeight - scrollVal + 5);
        popObj.height = overflowHeight + "px";
        for (var i = 0; i <= popupEle.childElementCount; i++) {
          var ele = popupEle.children[parseInt(i.toString(), 10)];
          if (ele.offsetTop + ele.offsetHeight > overflowHeight) {
            overflowHeight = ele.offsetTop;
            break;
          }
        }
        setStyleAttribute(popObj.element, { maxHeight: overflowHeight + "px" });
      } else if (this.isVertical) {
        var tbEleData = this.element.getBoundingClientRect();
        setStyleAttribute(popObj.element, { maxHeight: tbEleData.top + this.element.offsetHeight + "px", bottom: 0, visibility: "" });
      }
      if (popObj) {
        var popupOffset = popupEle.getBoundingClientRect();
        if (popupOffset.right > document.documentElement.clientWidth && popupOffset.width > toolEle.getBoundingClientRect().width) {
          popObj.collision = { Y: "none" };
          popObj.dataBind();
        }
        popObj.refreshPosition();
      }
    };
    Toolbar2.prototype.popupClose = function(e) {
      var element2 = this.element;
      var popupNav = element2.querySelector("." + CLS_TBARNAV);
      popupNav.setAttribute("aria-expanded", "false");
      var popIcon = popupNav.firstElementChild;
      popupNav.classList.remove(CLS_TBARNAVACT);
      classList(popIcon, [CLS_POPUPDOWN], [CLS_POPUPICON]);
      this.tbarPopupHandler(false);
    };
    Toolbar2.prototype.checkPriority = function(ele, inEle, eleWidth, pre) {
      var popPriority = this.popupPriCount > 0;
      var len = inEle.length;
      var eleWid = eleWidth;
      var eleOffset;
      var checkoffset;
      var sepCheck = 0;
      var itemCount = 0;
      var itemPopCount = 0;
      var checkClass = function(ele2, val) {
        var rVal = false;
        val.forEach(function(cls) {
          if (ele2.classList.contains(cls)) {
            rVal = true;
          }
        });
        return rVal;
      };
      for (var i = len - 1; i >= 0; i--) {
        var mrgn = void 0;
        var compuStyle = window.getComputedStyle(inEle[parseInt(i.toString(), 10)]);
        if (this.isVertical) {
          mrgn = parseFloat(compuStyle.marginTop);
          mrgn += parseFloat(compuStyle.marginBottom);
        } else {
          mrgn = parseFloat(compuStyle.marginRight);
          mrgn += parseFloat(compuStyle.marginLeft);
        }
        var fstEleCheck = inEle[parseInt(i.toString(), 10)] === this.tbarEle[0];
        if (fstEleCheck) {
          this.tbarEleMrgn = mrgn;
        }
        eleOffset = this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth;
        var eleWid_1 = fstEleCheck ? eleOffset + mrgn : eleOffset;
        if (checkClass(inEle[parseInt(i.toString(), 10)], [CLS_POPPRI]) && popPriority) {
          inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
          if (this.isVertical) {
            setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minHeight: eleWid_1 + "px" });
          } else {
            setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minWidth: eleWid_1 + "px" });
          }
          itemPopCount++;
        }
        if (this.isVertical) {
          checkoffset = inEle[parseInt(i.toString(), 10)].offsetTop + inEle[parseInt(i.toString(), 10)].offsetHeight + mrgn > eleWidth;
        } else {
          checkoffset = inEle[parseInt(i.toString(), 10)].offsetLeft + inEle[parseInt(i.toString(), 10)].offsetWidth + mrgn > eleWidth;
        }
        if (checkoffset) {
          if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_SEPARATOR)) {
            if (this.overflowMode === "Extended") {
              var sepEle = inEle[parseInt(i.toString(), 10)];
              if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
                itemPopCount++;
              }
              itemCount++;
            } else if (this.overflowMode === "Popup") {
              if (sepCheck > 0 && itemCount === itemPopCount) {
                var sepEle = inEle[i + itemCount + (sepCheck - 1)];
                if (checkClass(sepEle, [CLS_SEPARATOR, CLS_TBARIGNORE])) {
                  setStyleAttribute(sepEle, { display: "none" });
                }
              }
              sepCheck++;
              itemCount = 0;
              itemPopCount = 0;
            }
          } else {
            itemCount++;
          }
          if (inEle[parseInt(i.toString(), 10)].classList.contains(CLS_TBAROVERFLOW) && pre) {
            eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;
          } else if (!checkClass(inEle[parseInt(i.toString(), 10)], [CLS_SEPARATOR, CLS_TBARIGNORE])) {
            inEle[parseInt(i.toString(), 10)].classList.add(CLS_POPUP);
            if (this.isVertical) {
              setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minHeight: eleWid_1 + "px" });
            } else {
              setStyleAttribute(inEle[parseInt(i.toString(), 10)], { display: "none", minWidth: eleWid_1 + "px" });
            }
            itemPopCount++;
          } else {
            eleWidth -= (this.isVertical ? inEle[parseInt(i.toString(), 10)].offsetHeight : inEle[parseInt(i.toString(), 10)].offsetWidth) + mrgn;
          }
        }
      }
      if (pre) {
        var popedEle = selectAll("." + CLS_ITEM + ":not(." + CLS_POPUP + ")", this.element);
        this.checkPriority(ele, popedEle, eleWid, false);
      }
    };
    Toolbar2.prototype.createPopupIcon = function(element2) {
      var id = element2.id.concat("_nav");
      var className = "e-" + element2.id.concat("_nav " + CLS_POPUPNAV);
      className = this.overflowMode === "Extended" ? className + " " + CLS_EXTENDPOPUP : className;
      var nav = this.createElement("div", { id, className });
      if (Browser.info.name === "msie" || Browser.info.name === "edge") {
        nav.classList.add("e-ie-align");
      }
      var navItem = this.createElement("div", { className: CLS_POPUPDOWN + " e-icons" });
      nav.appendChild(navItem);
      nav.setAttribute("tabindex", "0");
      nav.setAttribute("role", "button");
      element2.appendChild(nav);
    };
    Toolbar2.prototype.tbarPriRef = function(inEle, indx, sepPri, el, des, elWid, wid, ig) {
      var ignoreCount = ig;
      var popEle = this.popObj.element;
      var query = "." + CLS_ITEM + ":not(." + CLS_SEPARATOR + "):not(." + CLS_TBAROVERFLOW + ")";
      var priEleCnt = selectAll("." + CLS_POPUP + ":not(." + CLS_TBAROVERFLOW + ")", popEle).length;
      var checkClass = function(ele, val) {
        return ele.classList.contains(val);
      };
      if (selectAll(query, inEle).length === 0) {
        var eleSep = inEle.children[indx - (indx - sepPri) - 1];
        var ignoreCheck = !isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_TBARIGNORE);
        if (!isNullOrUndefined(eleSep) && checkClass(eleSep, CLS_SEPARATOR) && !isVisible(eleSep) || ignoreCheck) {
          var sepDisplay = "none";
          eleSep.style.display = "inherit";
          var eleSepWidth = eleSep.offsetWidth + parseFloat(window.getComputedStyle(eleSep).marginRight) * 2;
          var prevSep = eleSep.previousElementSibling;
          if (elWid + eleSepWidth < wid || des) {
            inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
            if (!isNullOrUndefined(prevSep)) {
              prevSep.style.display = "";
            }
          } else {
            if (prevSep.classList.contains(CLS_SEPARATOR)) {
              prevSep.style.display = sepDisplay;
            }
          }
          eleSep.style.display = "";
        } else {
          inEle.insertBefore(el, inEle.children[indx + ignoreCount - (indx - sepPri)]);
        }
      } else {
        inEle.insertBefore(el, inEle.children[indx + ignoreCount - priEleCnt]);
      }
    };
    Toolbar2.prototype.popupRefresh = function(popupEle, destroy3) {
      var _this = this;
      var ele = this.element;
      var isVer = this.isVertical;
      var innerEle = ele.querySelector("." + CLS_ITEMS);
      var popNav = ele.querySelector("." + CLS_TBARNAV);
      if (isNullOrUndefined(popNav)) {
        return;
      }
      innerEle.removeAttribute("style");
      popupEle.style.display = "block";
      var dimension;
      if (isVer) {
        dimension = ele.offsetHeight - (popNav.offsetHeight + innerEle.offsetHeight);
      } else {
        dimension = ele.offsetWidth - (popNav.offsetWidth + innerEle.offsetWidth);
      }
      var popupEleWidth = 0;
      [].slice.call(popupEle.children).forEach(function(el) {
        popupEleWidth += _this.popupEleWidth(el);
        setStyleAttribute(el, { "position": "" });
      });
      if (dimension + (isVer ? popNav.offsetHeight : popNav.offsetWidth) > popupEleWidth && this.popupPriCount === 0) {
        destroy3 = true;
      }
      this.popupEleRefresh(dimension, popupEle, destroy3);
      popupEle.style.display = "";
      if (popupEle.children.length === 0 && popNav && this.popObj) {
        detach(popNav);
        popNav = null;
        this.popObj.destroy();
        detach(this.popObj.element);
        this.popObj = null;
      }
    };
    Toolbar2.prototype.ignoreEleFetch = function(index, innerEle) {
      var ignoreEle = [].slice.call(innerEle.querySelectorAll("." + CLS_TBARIGNORE));
      var ignoreInx = [];
      var count = 0;
      if (ignoreEle.length > 0) {
        ignoreEle.forEach(function(ele) {
          ignoreInx.push([].slice.call(innerEle.children).indexOf(ele));
        });
      } else {
        return 0;
      }
      ignoreInx.forEach(function(val) {
        if (val <= index) {
          count++;
        }
      });
      return count;
    };
    Toolbar2.prototype.checkPopupRefresh = function(root, popEle) {
      popEle.style.display = "block";
      var elWid = this.popupEleWidth(popEle.firstElementChild);
      popEle.firstElementChild.style.removeProperty("Position");
      var tbarWidth = root.offsetWidth - root.querySelector("." + CLS_TBARNAV).offsetWidth;
      var tbarItemsWid = root.querySelector("." + CLS_ITEMS).offsetWidth;
      popEle.style.removeProperty("display");
      if (tbarWidth > elWid + tbarItemsWid) {
        return true;
      }
      return false;
    };
    Toolbar2.prototype.popupEleWidth = function(el) {
      el.style.position = "absolute";
      var elWidth = this.isVertical ? el.offsetHeight : el.offsetWidth;
      var btnText = el.querySelector("." + CLS_TBARBTNTEXT);
      if (el.classList.contains("e-tbtn-align") || el.classList.contains(CLS_TBARTEXT)) {
        var btn = el.children[0];
        if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_TBARTEXT)) {
          btnText.style.display = "none";
        } else if (!isNullOrUndefined(btnText) && el.classList.contains(CLS_POPUPTEXT)) {
          btnText.style.display = "block";
        }
        btn.style.minWidth = "0%";
        elWidth = parseFloat(!this.isVertical ? el.style.minWidth : el.style.minHeight);
        btn.style.minWidth = "";
        btn.style.minHeight = "";
        if (!isNullOrUndefined(btnText)) {
          btnText.style.display = "";
        }
      }
      return elWidth;
    };
    Toolbar2.prototype.popupEleRefresh = function(width, popupEle, destroy3) {
      var popPriority = this.popupPriCount > 0;
      var eleSplice = this.tbarEle;
      var priEleCnt;
      var index;
      var innerEle = this.element.querySelector("." + CLS_ITEMS);
      var ignoreCount = 0;
      var _loop_1 = function(el2) {
        if (el2.classList.contains(CLS_POPPRI) && popPriority && !destroy3) {
          return "continue";
        }
        var elWidth = this_1.popupEleWidth(el2);
        if (el2 === this_1.tbarEle[0]) {
          elWidth += this_1.tbarEleMrgn;
        }
        el2.style.position = "";
        if (elWidth < width || destroy3) {
          setStyleAttribute(el2, { minWidth: "", height: "", minHeight: "" });
          if (!el2.classList.contains(CLS_POPOVERFLOW)) {
            el2.classList.remove(CLS_POPUP);
          }
          index = this_1.tbarEle.indexOf(el2);
          if (this_1.tbarAlign) {
            var pos = this_1.items[parseInt(index.toString(), 10)].align;
            index = this_1.tbarAlgEle[(pos + "s").toLowerCase()].indexOf(el2);
            eleSplice = this_1.tbarAlgEle[(pos + "s").toLowerCase()];
            innerEle = this_1.element.querySelector("." + CLS_ITEMS + " .e-toolbar-" + pos.toLowerCase());
          }
          var sepBeforePri_1 = 0;
          if (this_1.overflowMode !== "Extended") {
            eleSplice.slice(0, index).forEach(function(el3) {
              if (el3.classList.contains(CLS_TBAROVERFLOW) || el3.classList.contains(CLS_SEPARATOR)) {
                if (el3.classList.contains(CLS_SEPARATOR)) {
                  el3.style.display = "";
                  width -= el3.offsetWidth;
                }
                sepBeforePri_1++;
              }
            });
          }
          ignoreCount = this_1.ignoreEleFetch(index, innerEle);
          if (el2.classList.contains(CLS_TBAROVERFLOW)) {
            this_1.tbarPriRef(innerEle, index, sepBeforePri_1, el2, destroy3, elWidth, width, ignoreCount);
            width -= el2.offsetWidth;
          } else if (index === 0) {
            innerEle.insertBefore(el2, innerEle.firstChild);
            width -= el2.offsetWidth;
          } else {
            priEleCnt = selectAll("." + CLS_TBAROVERFLOW, this_1.popObj.element).length;
            innerEle.insertBefore(el2, innerEle.children[index + ignoreCount - priEleCnt]);
            width -= el2.offsetWidth;
          }
          el2.style.height = "";
        } else {
          return "break";
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = [].slice.call(popupEle.children); _i < _a.length; _i++) {
        var el = _a[_i];
        var state_1 = _loop_1(el);
        if (state_1 === "break")
          break;
      }
      var checkOverflow = this.checkOverflow(this.element, this.element.getElementsByClassName(CLS_ITEMS)[0]);
      if (checkOverflow && !destroy3) {
        this.renderOverflowMode();
      }
    };
    Toolbar2.prototype.removePositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {
        return;
      }
      this.remove(item, CLS_TBARPOS);
      var innerItem = [].slice.call(item.childNodes);
      innerItem[1].removeAttribute("style");
      innerItem[2].removeAttribute("style");
    };
    Toolbar2.prototype.refreshPositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      this.add(item, CLS_TBARPOS);
      this.itemPositioning();
    };
    Toolbar2.prototype.itemPositioning = function() {
      var item = this.element.querySelector("." + CLS_ITEMS);
      var margin;
      if (isNullOrUndefined(item) || !item.classList.contains(CLS_TBARPOS)) {
        return;
      }
      var popupNav = this.element.querySelector("." + CLS_TBARNAV);
      var innerItem;
      if (this.scrollModule) {
        var trgClass = this.isVertical ? CLS_VSCROLLCNT : CLS_HSCROLLCNT;
        innerItem = [].slice.call(item.querySelector("." + trgClass).children);
      } else {
        innerItem = [].slice.call(item.childNodes);
      }
      if (this.isVertical) {
        margin = innerItem[0].offsetHeight + innerItem[2].offsetHeight;
      } else {
        margin = innerItem[0].offsetWidth + innerItem[2].offsetWidth;
      }
      var tbarWid = this.isVertical ? this.element.offsetHeight : this.element.offsetWidth;
      if (popupNav) {
        tbarWid -= this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth;
        var popWid = (this.isVertical ? popupNav.offsetHeight : popupNav.offsetWidth) + "px";
        innerItem[2].removeAttribute("style");
        if (this.isVertical) {
          if (this.enableRtl) {
            innerItem[2].style.top = popWid;
          } else {
            innerItem[2].style.bottom = popWid;
          }
        } else {
          if (this.enableRtl) {
            innerItem[2].style.left = popWid;
          } else {
            innerItem[2].style.right = popWid;
          }
        }
      }
      if (tbarWid <= margin) {
        return;
      }
      var value = (tbarWid - margin - (!this.isVertical ? innerItem[1].offsetWidth : innerItem[1].offsetHeight)) / 2;
      innerItem[1].removeAttribute("style");
      var mrgn = (!this.isVertical ? innerItem[0].offsetWidth : innerItem[0].offsetHeight) + value + "px";
      if (this.isVertical) {
        if (this.enableRtl) {
          innerItem[1].style.marginBottom = mrgn;
        } else {
          innerItem[1].style.marginTop = mrgn;
        }
      } else {
        if (this.enableRtl) {
          innerItem[1].style.marginRight = mrgn;
        } else {
          innerItem[1].style.marginLeft = mrgn;
        }
      }
    };
    Toolbar2.prototype.tbarItemAlign = function(item, itemEle, pos) {
      var _this = this;
      if (item.showAlwaysInPopup && item.overflow !== "Show") {
        return;
      }
      var alignDiv = [];
      alignDiv.push(this.createElement("div", { className: CLS_TBARLEFT }));
      alignDiv.push(this.createElement("div", { className: CLS_TBARCENTER }));
      alignDiv.push(this.createElement("div", { className: CLS_TBARRIGHT }));
      if (pos === 0 && item.align !== "Left") {
        alignDiv.forEach(function(ele) {
          itemEle.appendChild(ele);
        });
        this.tbarAlign = true;
        this.add(itemEle, CLS_TBARPOS);
      } else if (item.align !== "Left") {
        var alignEle = itemEle.childNodes;
        var leftAlign_1 = alignDiv[0];
        [].slice.call(alignEle).forEach(function(el) {
          _this.tbarAlgEle.lefts.push(el);
          leftAlign_1.appendChild(el);
        });
        itemEle.appendChild(leftAlign_1);
        itemEle.appendChild(alignDiv[1]);
        itemEle.appendChild(alignDiv[2]);
        this.tbarAlign = true;
        this.add(itemEle, CLS_TBARPOS);
      }
    };
    Toolbar2.prototype.ctrlTemplate = function() {
      var _this = this;
      this.ctrlTem = this.trgtEle.cloneNode(true);
      this.add(this.trgtEle, CLS_ITEMS);
      this.tbarEle = [];
      var innerEle = [].slice.call(this.trgtEle.children);
      innerEle.forEach(function(ele) {
        if (ele.tagName === "DIV") {
          _this.tbarEle.push(ele);
          if (!isNullOrUndefined(ele.firstElementChild)) {
            ele.firstElementChild.setAttribute("aria-disabled", "false");
          }
          _this.add(ele, CLS_ITEM);
        }
      });
    };
    Toolbar2.prototype.renderItems = function() {
      var ele = this.element;
      var items = this.items;
      if (this.trgtEle != null) {
        this.ctrlTemplate();
      } else if (ele && items.length > 0) {
        var itemEleDom = void 0;
        if (ele && ele.children.length > 0) {
          itemEleDom = ele.querySelector("." + CLS_ITEMS);
        }
        if (!itemEleDom) {
          itemEleDom = this.createElement("div", { className: CLS_ITEMS });
        }
        this.itemsAlign(items, itemEleDom);
        ele.appendChild(itemEleDom);
      }
    };
    Toolbar2.prototype.setAttr = function(attr, element2) {
      var key = Object.keys(attr);
      var keyVal;
      for (var i = 0; i < key.length; i++) {
        keyVal = key[parseInt(i.toString(), 10)];
        if (keyVal === "class") {
          this.add(element2, attr["" + keyVal]);
        } else {
          element2.setAttribute(keyVal, attr["" + keyVal]);
        }
      }
    };
    Toolbar2.prototype.enableItems = function(items, isEnable) {
      var elements = items;
      var len = elements.length;
      var ele;
      if (isNullOrUndefined(isEnable)) {
        isEnable = true;
      }
      var enable = function(isEnable2, ele2) {
        if (isEnable2) {
          ele2.classList.remove(CLS_DISABLE3);
          if (!isNullOrUndefined(ele2.firstElementChild)) {
            ele2.firstElementChild.setAttribute("aria-disabled", "false");
          }
        } else {
          ele2.classList.add(CLS_DISABLE3);
          if (!isNullOrUndefined(ele2.firstElementChild)) {
            ele2.firstElementChild.setAttribute("aria-disabled", "true");
          }
        }
      };
      if (!isNullOrUndefined(len) && len >= 1) {
        for (var a = 0, element2 = [].slice.call(elements); a < len; a++) {
          var itemElement = element2[parseInt(a.toString(), 10)];
          if (typeof itemElement === "number") {
            ele = this.getElementByIndex(itemElement);
            if (isNullOrUndefined(ele)) {
              return;
            } else {
              elements[parseInt(a.toString(), 10)] = ele;
            }
          } else {
            ele = itemElement;
          }
          enable(isEnable, ele);
        }
        if (isEnable) {
          removeClass(elements, CLS_DISABLE3);
        } else {
          addClass(elements, CLS_DISABLE3);
        }
      } else {
        if (typeof elements === "number") {
          ele = this.getElementByIndex(elements);
          if (isNullOrUndefined(ele)) {
            return;
          }
        } else {
          ele = items;
        }
        enable(isEnable, ele);
      }
    };
    Toolbar2.prototype.getElementByIndex = function(index) {
      if (this.tbarEle[parseInt(index.toString(), 10)]) {
        return this.tbarEle[parseInt(index.toString(), 10)];
      }
      return null;
    };
    Toolbar2.prototype.addItems = function(items, index) {
      var innerItems;
      this.extendedOpen();
      var itemsDiv = this.element.querySelector("." + CLS_ITEMS);
      if (isNullOrUndefined(itemsDiv)) {
        this.itemsRerender(items);
        return;
      }
      var innerEle;
      var itemAgn = "Left";
      if (isNullOrUndefined(index)) {
        index = 0;
      }
      items.forEach(function(e) {
        if (!isNullOrUndefined(e.align) && e.align !== "Left" && itemAgn === "Left") {
          itemAgn = e.align;
        }
      });
      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];
        if (isNullOrUndefined(item.type)) {
          item.type = "Button";
        }
        innerItems = selectAll("." + CLS_ITEM, this.element);
        item.align = itemAgn;
        innerEle = this.renderSubComponent(item, index);
        if (this.tbarEle.length >= index && innerItems.length >= 0) {
          if (isNullOrUndefined(this.scrollModule)) {
            this.destroyMode();
          }
          var algIndex = item.align[0] === "L" ? 0 : item.align[0] === "C" ? 1 : 2;
          var ele = void 0;
          if (!this.tbarAlign && itemAgn !== "Left") {
            this.tbarItemAlign(item, itemsDiv, 1);
            this.tbarAlign = true;
            ele = closest(innerItems[0], "." + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];
            ele.appendChild(innerEle);
            this.tbarAlgEle[(item.align + "s").toLowerCase()].push(innerEle);
            this.refreshPositioning();
          } else if (this.tbarAlign) {
            ele = closest(innerItems[0], "." + CLS_ITEMS).children[parseInt(algIndex.toString(), 10)];
            ele.insertBefore(innerEle, ele.children[parseInt(index.toString(), 10)]);
            this.tbarAlgEle[(item.align + "s").toLowerCase()].splice(index, 0, innerEle);
            this.refreshPositioning();
          } else if (innerItems.length === 0) {
            innerItems = selectAll("." + CLS_ITEMS, this.element);
            innerItems[0].appendChild(innerEle);
          } else {
            innerItems[0].parentNode.insertBefore(innerEle, innerItems[parseInt(index.toString(), 10)]);
          }
          this.items.splice(index, 0, item);
          if (item.template) {
            this.tbarEle.splice(this.tbarEle.length - 1, 1);
          }
          this.tbarEle.splice(index, 0, innerEle);
          index++;
          this.offsetWid = itemsDiv.offsetWidth;
        }
      }
      itemsDiv.style.width = "";
      this.renderOverflowMode();
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.removeItems = function(args) {
      var elements = args;
      var index;
      var innerItems = [].slice.call(selectAll("." + CLS_ITEM, this.element));
      if (typeof elements === "number") {
        index = parseInt(args.toString(), 10);
        this.removeItemByIndex(index, innerItems);
      } else {
        if (elements && elements.length > 1) {
          for (var _i = 0, _a = [].slice.call(elements); _i < _a.length; _i++) {
            var ele = _a[_i];
            index = this.tbarEle.indexOf(ele);
            this.removeItemByIndex(index, innerItems);
            innerItems = selectAll("." + CLS_ITEM, this.element);
          }
        } else {
          var ele = elements && elements.length && elements.length === 1 ? elements[0] : args;
          index = innerItems.indexOf(ele);
          this.removeItemByIndex(index, innerItems);
        }
      }
      this.resize();
    };
    Toolbar2.prototype.removeItemByIndex = function(index, innerItems) {
      if (this.tbarEle[parseInt(index.toString(), 10)] && innerItems[parseInt(index.toString(), 10)]) {
        var eleIdx = this.tbarEle.indexOf(innerItems[parseInt(index.toString(), 10)]);
        if (this.tbarAlign) {
          var indexAgn = this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + "s").toLowerCase()].indexOf(this.tbarEle[parseInt(eleIdx.toString(), 10)]);
          this.tbarAlgEle[(this.items[parseInt(eleIdx.toString(), 10)].align + "s").toLowerCase()].splice(parseInt(indexAgn.toString(), 10), 1);
        }
        if (this.isReact) {
          this.clearTemplate();
        }
        var btnItem = innerItems[parseInt(index.toString(), 10)].querySelector(".e-control.e-btn");
        if (!isNullOrUndefined(btnItem) && !isNullOrUndefined(btnItem.ej2_instances[0]) && !btnItem.ej2_instances[0].isDestroyed) {
          btnItem.ej2_instances[0].destroy();
        }
        detach(innerItems[parseInt(index.toString(), 10)]);
        this.items.splice(eleIdx, 1);
        this.tbarEle.splice(eleIdx, 1);
      }
    };
    Toolbar2.prototype.templateRender = function(templateProp, innerEle, item, index) {
      var itemType = item.type;
      var eleObj = templateProp;
      var isComponent;
      if (typeof templateProp === "object") {
        isComponent = typeof eleObj.appendTo === "function";
      }
      if (typeof templateProp === "string" || !isComponent) {
        var templateFn = void 0;
        var val = templateProp;
        var regEx = new RegExp(/<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i);
        val = typeof templateProp === "string" ? templateProp.trim() : templateProp;
        try {
          if (typeof templateProp === "object" && !isNullOrUndefined(templateProp.tagName)) {
            innerEle.appendChild(templateProp);
          } else if (typeof templateProp === "string" && regEx.test(val)) {
            innerEle.innerHTML = val;
          } else if (document.querySelectorAll(val).length) {
            var ele = document.querySelector(val);
            var tempStr = ele.outerHTML.trim();
            innerEle.appendChild(ele);
            ele.style.display = "";
            if (!isNullOrUndefined(tempStr)) {
              this.tempId.push(val);
            }
          } else {
            templateFn = compile(val);
          }
        } catch (e) {
          templateFn = compile(val);
        }
        var tempArray = void 0;
        if (!isNullOrUndefined(templateFn)) {
          var toolbarTemplateID = this.element.id + index + "_template";
          tempArray = templateFn({}, this, "template", toolbarTemplateID, this.isStringTemplate);
        }
        if (!isNullOrUndefined(tempArray) && tempArray.length > 0) {
          [].slice.call(tempArray).forEach(function(ele2) {
            if (!isNullOrUndefined(ele2.tagName)) {
              ele2.style.display = "";
            }
            innerEle.appendChild(ele2);
          });
        }
      } else if (itemType === "Input") {
        var ele = this.createElement("input");
        if (item.id) {
          ele.id = item.id;
        } else {
          ele.id = getUniqueID("tbr-ipt");
        }
        innerEle.appendChild(ele);
        eleObj.appendTo(ele);
      }
      this.add(innerEle, CLS_TEMPLATE);
      this.tbarEle.push(innerEle);
    };
    Toolbar2.prototype.buttonRendering = function(item, innerEle) {
      var dom = this.createElement("button", { className: CLS_TBARBTN });
      dom.setAttribute("type", "button");
      var textStr = item.text;
      var iconCss;
      var iconPos;
      if (item.id) {
        dom.id = item.id;
      } else {
        dom.id = getUniqueID("e-tbr-btn");
      }
      var btnTxt = this.createElement("span", { className: "e-tbar-btn-text" });
      if (textStr) {
        btnTxt.innerHTML = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(textStr) : textStr;
        dom.appendChild(btnTxt);
        dom.classList.add("e-tbtn-txt");
      } else {
        this.add(innerEle, "e-tbtn-align");
      }
      if (item.prefixIcon || item.suffixIcon) {
        if (item.prefixIcon && item.suffixIcon || item.prefixIcon) {
          iconCss = item.prefixIcon + " e-icons";
          iconPos = "Left";
        } else {
          iconCss = item.suffixIcon + " e-icons";
          iconPos = "Right";
        }
      }
      var btnObj = new Button({ iconCss, iconPosition: iconPos });
      btnObj.createElement = this.createElement;
      btnObj.appendTo(dom);
      if (item.width) {
        setStyleAttribute(dom, { "width": formatUnit(item.width) });
      }
      return dom;
    };
    Toolbar2.prototype.renderSubComponent = function(item, index) {
      var dom;
      var innerEle = this.createElement("div", { className: CLS_ITEM });
      var tempDom = this.createElement("div", {
        innerHTML: this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(item.tooltipText) : item.tooltipText
      });
      if (!this.tbarEle) {
        this.tbarEle = [];
      }
      if (item.htmlAttributes) {
        this.setAttr(item.htmlAttributes, innerEle);
      }
      if (item.tooltipText) {
        innerEle.setAttribute("title", tempDom.textContent);
      }
      if (item.cssClass) {
        innerEle.className = innerEle.className + " " + item.cssClass;
      }
      if (item.template) {
        this.templateRender(item.template, innerEle, item, index);
      } else {
        switch (item.type) {
          case "Button":
            dom = this.buttonRendering(item, innerEle);
            dom.setAttribute("tabindex", isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString());
            dom.setAttribute("data-tabindex", isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString());
            dom.setAttribute("aria-label", item.text || item.tooltipText);
            dom.setAttribute("aria-disabled", "false");
            innerEle.appendChild(dom);
            innerEle.addEventListener("click", this.itemClick.bind(this));
            break;
          case "Separator":
            this.add(innerEle, CLS_SEPARATOR);
            break;
        }
      }
      if (item.showTextOn) {
        var sTxt = item.showTextOn;
        if (sTxt === "Toolbar") {
          this.add(innerEle, CLS_POPUPTEXT);
          this.add(innerEle, "e-tbtn-align");
        } else if (sTxt === "Overflow") {
          this.add(innerEle, CLS_TBARTEXT);
        }
      }
      if (item.overflow) {
        var overflow = item.overflow;
        if (overflow === "Show") {
          this.add(innerEle, CLS_TBAROVERFLOW);
        } else if (overflow === "Hide") {
          if (!innerEle.classList.contains(CLS_SEPARATOR)) {
            this.add(innerEle, CLS_POPOVERFLOW);
          }
        }
      }
      if (item.overflow !== "Show" && item.showAlwaysInPopup && !innerEle.classList.contains(CLS_SEPARATOR)) {
        this.add(innerEle, CLS_POPPRI);
        this.popupPriCount++;
      }
      if (item.disabled) {
        this.add(innerEle, CLS_DISABLE3);
      }
      if (item.visible === false) {
        this.add(innerEle, CLS_HIDDEN);
      }
      return innerEle;
    };
    Toolbar2.prototype.getDataTabindex = function(ele) {
      return isNullOrUndefined(ele.getAttribute("data-tabindex")) ? "-1" : ele.getAttribute("data-tabindex");
    };
    Toolbar2.prototype.itemClick = function(e) {
      this.activeEleSwitch(e.currentTarget);
    };
    Toolbar2.prototype.activeEleSwitch = function(ele) {
      this.activeEleRemove(ele.firstElementChild);
      this.activeEle.focus();
    };
    Toolbar2.prototype.activeEleRemove = function(curEle) {
      if (!isNullOrUndefined(this.activeEle)) {
        this.activeEle.setAttribute("tabindex", this.getDataTabindex(this.activeEle));
      }
      this.activeEle = curEle;
      if (this.getDataTabindex(this.activeEle) === "-1") {
        if (isNullOrUndefined(this.trgtEle) && !curEle.parentElement.classList.contains(CLS_TEMPLATE)) {
          this.updateTabIndex("-1");
          curEle.removeAttribute("tabindex");
        } else {
          this.activeEle.setAttribute("tabindex", this.getDataTabindex(this.activeEle));
        }
      }
    };
    Toolbar2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Toolbar2.prototype.getModuleName = function() {
      return "toolbar";
    };
    Toolbar2.prototype.itemsRerender = function(newProp) {
      this.items = this.tbarItemsCol;
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      this.destroyMode();
      this.destroyItems();
      this.items = newProp;
      this.tbarItemsCol = this.items;
      this.renderItems();
      this.renderOverflowMode();
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Toolbar2.prototype.resize = function() {
      var ele = this.element;
      this.tbResize = true;
      if (this.tbarAlign) {
        this.itemPositioning();
      }
      if (this.popObj && this.overflowMode === "Popup") {
        this.popObj.hide();
      }
      var checkOverflow = this.checkOverflow(ele, ele.getElementsByClassName(CLS_ITEMS)[0]);
      if (!checkOverflow) {
        this.destroyScroll();
        var multirowele = ele.querySelector("." + CLS_ITEMS);
        if (!isNullOrUndefined(multirowele)) {
          this.remove(multirowele, CLS_MULTIROWPOS);
          if (this.tbarAlign) {
            this.add(multirowele, CLS_TBARPOS);
          }
        }
      }
      if (checkOverflow && this.scrollModule && this.offsetWid === ele.offsetWidth) {
        return;
      }
      if (this.offsetWid > ele.offsetWidth || checkOverflow) {
        this.renderOverflowMode();
      }
      if (this.popObj) {
        if (this.overflowMode === "Extended") {
          var eleStyles = window.getComputedStyle(this.element);
          this.popObj.width = parseFloat(eleStyles.width) + parseFloat(eleStyles.borderRightWidth) * 2;
        }
        if (this.tbarAlign) {
          this.removePositioning();
        }
        this.popupRefresh(this.popObj.element, false);
        if (this.tbarAlign) {
          this.refreshPositioning();
        }
      }
      if (this.element.querySelector("." + CLS_HSCROLLBAR2)) {
        this.scrollStep = this.element.querySelector("." + CLS_HSCROLLBAR2).offsetWidth;
      }
      this.offsetWid = ele.offsetWidth;
      this.tbResize = false;
      this.separator();
    };
    Toolbar2.prototype.extendedOpen = function() {
      var sib = this.element.querySelector("." + CLS_EXTENDABLECLASS);
      if (this.overflowMode === "Extended" && sib) {
        this.isExtendedOpen = sib.classList.contains(CLS_POPUPOPEN);
      }
    };
    Toolbar2.prototype.updateHideEleTabIndex = function(ele, isHidden, isElement, eleIndex, innerItems) {
      if (isElement) {
        eleIndex = innerItems.indexOf(ele);
      }
      var nextEle = innerItems[++eleIndex];
      while (nextEle) {
        var skipEle = this.eleContains(nextEle);
        if (!skipEle) {
          var dataTabIndex = nextEle.firstElementChild.getAttribute("data-tabindex");
          if (isHidden && dataTabIndex === "-1") {
            nextEle.firstElementChild.setAttribute("tabindex", "0");
          } else if (dataTabIndex !== nextEle.firstElementChild.getAttribute("tabindex")) {
            nextEle.firstElementChild.setAttribute("tabindex", dataTabIndex);
          }
          break;
        }
        nextEle = innerItems[++eleIndex];
      }
    };
    Toolbar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var tEle = this.element;
      var wid = tEle.offsetWidth;
      this.extendedOpen();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
            if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
              var changedProb = Object.keys(newProp.items);
              for (var i = 0; i < changedProb.length; i++) {
                var index = parseInt(Object.keys(newProp.items)[parseInt(i.toString(), 10)], 10);
                var property = Object.keys(newProp.items[parseInt(index.toString(), 10)])[0];
                var newProperty = Object(newProp.items[parseInt(index.toString(), 10)])["" + property];
                if (typeof newProperty !== "function") {
                  if (this.tbarAlign || property === "align") {
                    this.refresh();
                    this.trigger("created");
                    break;
                  }
                  var popupPriCheck = property === "showAlwaysInPopup" && !newProperty;
                  var booleanCheck = property === "overflow" && this.popupPriCount !== 0;
                  if (popupPriCheck || this.items[parseInt(index.toString(), 10)].showAlwaysInPopup && booleanCheck) {
                    --this.popupPriCount;
                  }
                  if (isNullOrUndefined(this.scrollModule)) {
                    this.destroyMode();
                  }
                  var itemCol = [].slice.call(selectAll("." + CLS_ITEMS + " ." + CLS_ITEM, tEle));
                  if (this.isReact && this.items[parseInt(index.toString(), 10)].template) {
                    this.clearTemplate();
                  }
                  detach(itemCol[parseInt(index.toString(), 10)]);
                  this.tbarEle.splice(index, 1);
                  this.addItems([this.items[parseInt(index.toString(), 10)]], index);
                  this.items.splice(index, 1);
                  if (this.items[parseInt(index.toString(), 10)].template) {
                    this.tbarEle.splice(this.items.length, 1);
                  }
                }
              }
            } else {
              this.itemsRerender(newProp.items);
            }
            break;
          case "width":
            setStyleAttribute(tEle, { "width": formatUnit(newProp.width) });
            this.refreshOverflow();
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(newProp.height) });
            break;
          case "overflowMode":
            this.destroyMode();
            this.renderOverflowMode();
            if (this.enableRtl) {
              this.add(tEle, CLS_RTL3);
            }
            this.refreshOverflow();
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.add(tEle, CLS_RTL3);
            } else {
              this.remove(tEle, CLS_RTL3);
            }
            if (!isNullOrUndefined(this.scrollModule)) {
              if (newProp.enableRtl) {
                this.add(this.scrollModule.element, CLS_RTL3);
              } else {
                this.remove(this.scrollModule.element, CLS_RTL3);
              }
            }
            if (!isNullOrUndefined(this.popObj)) {
              if (newProp.enableRtl) {
                this.add(this.popObj.element, CLS_RTL3);
              } else {
                this.remove(this.popObj.element, CLS_RTL3);
              }
            }
            if (this.tbarAlign) {
              this.itemPositioning();
            }
            break;
          case "scrollStep":
            if (this.scrollModule) {
              this.scrollModule.scrollStep = this.scrollStep;
            }
            break;
          case "enableCollision":
            if (this.popObj) {
              this.popObj.collision = { Y: this.enableCollision ? "flip" : "none" };
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.split(" "));
            }
            break;
          case "allowKeyboard":
            this.unwireKeyboardEvent();
            if (newProp.allowKeyboard) {
              this.wireKeyboardEvent();
            }
            break;
        }
      }
    };
    Toolbar2.prototype.hideItem = function(index, value) {
      var isElement = typeof index === "object" ? true : false;
      var eleIndex = index;
      var ele;
      if (!isElement && isNullOrUndefined(eleIndex)) {
        return;
      }
      var innerItems = [].slice.call(selectAll("." + CLS_ITEM, this.element));
      if (isElement) {
        ele = index;
      } else if (this.tbarEle[parseInt(eleIndex.toString(), 10)]) {
        var innerItems_1 = [].slice.call(selectAll("." + CLS_ITEM, this.element));
        ele = innerItems_1[parseInt(eleIndex.toString(), 10)];
      }
      if (ele) {
        if (value) {
          ele.classList.add(CLS_HIDDEN);
          if (!ele.classList.contains(CLS_SEPARATOR)) {
            if (isNullOrUndefined(ele.firstElementChild.getAttribute("tabindex")) || ele.firstElementChild.getAttribute("tabindex") !== "-1") {
              this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);
            }
          }
        } else {
          ele.classList.remove(CLS_HIDDEN);
          if (!ele.classList.contains(CLS_SEPARATOR)) {
            this.updateHideEleTabIndex(ele, value, isElement, eleIndex, innerItems);
          }
        }
        this.refreshOverflow();
      }
    };
    __decorate22([
      Collection([], Item)
    ], Toolbar2.prototype, "items", void 0);
    __decorate22([
      Property("auto")
    ], Toolbar2.prototype, "width", void 0);
    __decorate22([
      Property("auto")
    ], Toolbar2.prototype, "height", void 0);
    __decorate22([
      Property("")
    ], Toolbar2.prototype, "cssClass", void 0);
    __decorate22([
      Property("Scrollable")
    ], Toolbar2.prototype, "overflowMode", void 0);
    __decorate22([
      Property()
    ], Toolbar2.prototype, "scrollStep", void 0);
    __decorate22([
      Property(true)
    ], Toolbar2.prototype, "enableCollision", void 0);
    __decorate22([
      Property(true)
    ], Toolbar2.prototype, "enableHtmlSanitizer", void 0);
    __decorate22([
      Property(true)
    ], Toolbar2.prototype, "allowKeyboard", void 0);
    __decorate22([
      Event()
    ], Toolbar2.prototype, "clicked", void 0);
    __decorate22([
      Event()
    ], Toolbar2.prototype, "created", void 0);
    __decorate22([
      Event()
    ], Toolbar2.prototype, "destroyed", void 0);
    __decorate22([
      Event()
    ], Toolbar2.prototype, "beforeCreate", void 0);
    Toolbar2 = __decorate22([
      NotifyPropertyChanges
    ], Toolbar2);
    return Toolbar2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/accordion/accordion.js
var __extends26 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate23 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_ACRDN_ROOT = "e-acrdn-root";
var CLS_ROOT3 = "e-accordion";
var CLS_ITEM2 = "e-acrdn-item";
var CLS_ITEMFOCUS = "e-item-focus";
var CLS_ITEMHIDE = "e-hide";
var CLS_HEADER = "e-acrdn-header";
var CLS_HEADERICN = "e-acrdn-header-icon";
var CLS_HEADERCTN = "e-acrdn-header-content";
var CLS_CONTENT = "e-acrdn-panel";
var CLS_CTENT = "e-acrdn-content";
var CLS_TOOGLEICN = "e-toggle-icon";
var CLS_COLLAPSEICN = "e-tgl-collapse-icon e-icons";
var CLS_EXPANDICN = "e-expand-icon";
var CLS_RTL4 = "e-rtl";
var CLS_CTNHIDE = "e-content-hide";
var CLS_SLCT = "e-select";
var CLS_SLCTED = "e-selected";
var CLS_ACTIVE = "e-active";
var CLS_ANIMATE = "e-animate";
var CLS_DISABLE4 = "e-overlay";
var CLS_TOGANIMATE = "e-toggle-animation";
var CLS_NEST = "e-nested";
var CLS_EXPANDSTATE = "e-expand-state";
var CLS_CONTAINER = "e-accordion-container";
var AccordionActionSettings = (
  /** @class */
  function(_super) {
    __extends26(AccordionActionSettings2, _super);
    function AccordionActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate23([
      Property("SlideDown")
    ], AccordionActionSettings2.prototype, "effect", void 0);
    __decorate23([
      Property(400)
    ], AccordionActionSettings2.prototype, "duration", void 0);
    __decorate23([
      Property("linear")
    ], AccordionActionSettings2.prototype, "easing", void 0);
    return AccordionActionSettings2;
  }(ChildProperty)
);
var AccordionAnimationSettings = (
  /** @class */
  function(_super) {
    __extends26(AccordionAnimationSettings2, _super);
    function AccordionAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate23([
      Complex({ effect: "SlideUp", duration: 400, easing: "linear" }, AccordionActionSettings)
    ], AccordionAnimationSettings2.prototype, "collapse", void 0);
    __decorate23([
      Complex({ effect: "SlideDown", duration: 400, easing: "linear" }, AccordionActionSettings)
    ], AccordionAnimationSettings2.prototype, "expand", void 0);
    return AccordionAnimationSettings2;
  }(ChildProperty)
);
var AccordionItem = (
  /** @class */
  function(_super) {
    __extends26(AccordionItem2, _super);
    function AccordionItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate23([
      Property(null)
    ], AccordionItem2.prototype, "content", void 0);
    __decorate23([
      Property(null)
    ], AccordionItem2.prototype, "header", void 0);
    __decorate23([
      Property(null)
    ], AccordionItem2.prototype, "cssClass", void 0);
    __decorate23([
      Property(null)
    ], AccordionItem2.prototype, "iconCss", void 0);
    __decorate23([
      Property(false)
    ], AccordionItem2.prototype, "expanded", void 0);
    __decorate23([
      Property(true)
    ], AccordionItem2.prototype, "visible", void 0);
    __decorate23([
      Property(false)
    ], AccordionItem2.prototype, "disabled", void 0);
    __decorate23([
      Property()
    ], AccordionItem2.prototype, "id", void 0);
    return AccordionItem2;
  }(ChildProperty)
);
var Accordion = (
  /** @class */
  function(_super) {
    __extends26(Accordion2, _super);
    function Accordion2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.keyConfigs = {
        moveUp: "uparrow",
        moveDown: "downarrow",
        enter: "enter",
        space: "space",
        home: "home",
        end: "end"
      };
      return _this;
    }
    Accordion2.prototype.destroy = function() {
      if (this.isReact || this.isAngular || this.isVue) {
        this.clearTemplate();
      }
      var ele = this.element;
      _super.prototype.destroy.call(this);
      this.unwireEvents();
      this.isDestroy = true;
      this.restoreContent(null);
      [].slice.call(ele.children).forEach(function(el) {
        ele.removeChild(el);
      });
      if (this.trgtEle) {
        this.trgtEle = null;
        while (this.ctrlTem.firstElementChild) {
          ele.appendChild(this.ctrlTem.firstElementChild);
        }
        this.ctrlTem = null;
      }
      ele.classList.remove(CLS_ACRDN_ROOT);
      ele.removeAttribute("style");
      this.element.removeAttribute("data-ripple");
      if (!this.isNested && isRippleEnabled) {
        this.removeRippleEffect();
      }
    };
    Accordion2.prototype.preRender = function() {
      var nested = closest(this.element, "." + CLS_CONTENT);
      this.isNested = false;
      this.templateEle = [];
      if (!this.isDestroy) {
        this.isDestroy = false;
      }
      if (nested && nested.firstElementChild && nested.firstElementChild.firstElementChild) {
        if (nested.firstElementChild.firstElementChild.classList.contains(CLS_ROOT3)) {
          nested.classList.add(CLS_NEST);
          this.isNested = true;
        }
      } else {
        this.element.classList.add(CLS_ACRDN_ROOT);
      }
      if (this.enableRtl) {
        this.add(this.element, CLS_RTL4);
      }
    };
    Accordion2.prototype.add = function(ele, val) {
      ele.classList.add(val);
    };
    Accordion2.prototype.remove = function(ele, val) {
      ele.classList.remove(val);
    };
    Accordion2.prototype.render = function() {
      this.initializeHeaderTemplate();
      this.initializeItemTemplate();
      this.initialize();
      this.renderControl();
      this.wireEvents();
      this.renderComplete();
    };
    Accordion2.prototype.initialize = function() {
      var width = formatUnit(this.width);
      var height = formatUnit(this.height);
      setStyleAttribute(this.element, { "width": width, "height": height });
      if (isNullOrUndefined(this.initExpand)) {
        this.initExpand = [];
      }
      if (this.expandedIndices.length > 0) {
        this.initExpand = this.expandedIndices;
      }
    };
    Accordion2.prototype.renderControl = function() {
      this.trgtEle = this.element.children.length > 0 ? select("div", this.element) : null;
      this.renderItems();
      this.initItemExpand();
    };
    Accordion2.prototype.wireFocusEvents = function() {
      var acrdItem = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM2));
      for (var _i = 0, acrdItem_1 = acrdItem; _i < acrdItem_1.length; _i++) {
        var item = acrdItem_1[_i];
        var headerEle = item.querySelector("." + CLS_HEADER);
        if (item.childElementCount > 0 && headerEle) {
          EventHandler.clearEvents(headerEle);
          EventHandler.add(headerEle, "focus", this.focusIn, this);
          EventHandler.add(headerEle, "blur", this.focusOut, this);
        }
      }
    };
    Accordion2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, "click", this.clickHandler);
      if (!isNullOrUndefined(this.keyModule)) {
        this.keyModule.destroy();
      }
    };
    Accordion2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.clickHandler, this);
      if (!this.isNested && !this.isDestroy) {
        this.removeRippleEffect = rippleEffect(this.element, { selector: "." + CLS_HEADER });
      }
      if (!this.isNested) {
        this.keyModule = new KeyboardEvents(this.element, {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigs,
          eventName: "keydown"
        });
      }
    };
    Accordion2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    Accordion2.prototype.initializeHeaderTemplate = function() {
      if (this.headerTemplate) {
        this.headerTemplateFn = this.templateParser(this.headerTemplate);
      }
    };
    Accordion2.prototype.initializeItemTemplate = function() {
      if (this.itemTemplate) {
        this.itemTemplateFn = this.templateParser(this.itemTemplate);
      }
    };
    Accordion2.prototype.getHeaderTemplate = function() {
      return this.headerTemplateFn;
    };
    Accordion2.prototype.getItemTemplate = function() {
      return this.itemTemplateFn;
    };
    Accordion2.prototype.focusIn = function(e) {
      e.target.parentElement.classList.add(CLS_ITEMFOCUS);
    };
    Accordion2.prototype.focusOut = function(e) {
      e.target.parentElement.classList.remove(CLS_ITEMFOCUS);
    };
    Accordion2.prototype.ctrlTemplate = function() {
      this.ctrlTem = this.element.cloneNode(true);
      var innerEles;
      var rootEle = select("." + CLS_CONTAINER, this.element);
      if (rootEle) {
        innerEles = rootEle.children;
      } else {
        innerEles = this.element.children;
      }
      var items = [];
      [].slice.call(innerEles).forEach(function(el) {
        items.push({
          header: el.childElementCount > 0 && el.children[0] ? el.children[0] : "",
          content: el.childElementCount > 1 && el.children[1] ? el.children[1] : ""
        });
        el.parentNode.removeChild(el);
      });
      if (rootEle) {
        this.element.removeChild(rootEle);
      }
      this.setProperties({ items }, true);
    };
    Accordion2.prototype.toggleIconGenerate = function() {
      var tglIcon = this.createElement("div", { className: CLS_TOOGLEICN });
      var hdrColIcon = this.createElement("span", { className: CLS_COLLAPSEICN });
      tglIcon.appendChild(hdrColIcon);
      return tglIcon;
    };
    Accordion2.prototype.initItemExpand = function() {
      var len = this.initExpand.length;
      if (len === 0) {
        return;
      }
      if (this.expandMode === "Single") {
        this.expandItem(true, this.initExpand[len - 1]);
      } else {
        for (var i = 0; i < len; i++) {
          this.expandItem(true, this.initExpand[parseInt(i.toString(), 10)]);
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.renderItems = function() {
      var _this = this;
      var ele = this.element;
      var innerItem;
      var innerDataSourceItem;
      if (!isNullOrUndefined(this.trgtEle)) {
        this.ctrlTemplate();
      }
      if (this.dataSource.length > 0) {
        this.dataSource.forEach(function(item, index) {
          innerDataSourceItem = _this.renderInnerItem(item, index);
          ele.appendChild(innerDataSourceItem);
          if (innerDataSourceItem.childElementCount > 0) {
            EventHandler.add(innerDataSourceItem.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
            EventHandler.add(innerDataSourceItem.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
          }
        });
      } else {
        var items = this.items;
        if (ele && items.length > 0) {
          items.forEach(function(item, index) {
            innerItem = _this.renderInnerItem(item, index);
            ele.appendChild(innerItem);
            if (innerItem.childElementCount > 0) {
              EventHandler.add(innerItem.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
              EventHandler.add(innerItem.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
            }
          });
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.clickHandler = function(e) {
      var trgt = e.target;
      var items = this.getItems();
      var eventArgs = {};
      var tglIcon;
      var acrdEle = closest(trgt, "." + CLS_ROOT3);
      if (acrdEle !== this.element) {
        return;
      }
      trgt.classList.add("e-target");
      var acrdnItem = closest(trgt, "." + CLS_ITEM2);
      var acrdnHdr = closest(trgt, "." + CLS_HEADER);
      var acrdnCtn = closest(trgt, "." + CLS_CONTENT);
      if (acrdnItem && (isNullOrUndefined(acrdnHdr) || isNullOrUndefined(acrdnCtn))) {
        acrdnHdr = acrdnItem.children[0];
        acrdnCtn = acrdnItem.children[1];
      }
      if (acrdnHdr) {
        tglIcon = select("." + CLS_TOOGLEICN, acrdnHdr);
      }
      var acrdnCtnItem;
      if (acrdnHdr) {
        acrdnCtnItem = closest(acrdnHdr, "." + CLS_ITEM2);
      } else if (acrdnCtn) {
        acrdnCtnItem = closest(acrdnCtn, "." + CLS_ITEM2);
      }
      var index = this.getIndexByItem(acrdnItem);
      if (acrdnCtnItem) {
        eventArgs.item = items[this.getIndexByItem(acrdnCtnItem)];
      }
      eventArgs.originalEvent = e;
      var ctnCheck = !isNullOrUndefined(tglIcon) && acrdnItem.childElementCount <= 1;
      if (ctnCheck && (isNullOrUndefined(acrdnCtn) || !isNullOrUndefined(select("." + CLS_HEADER + " ." + CLS_TOOGLEICN, acrdnCtnItem)))) {
        acrdnItem.appendChild(this.contentRendering(index));
        this.ariaAttrUpdate(acrdnItem);
        this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
      } else {
        this.afterContentRender(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.afterContentRender = function(trgt, eventArgs, acrdnItem, acrdnHdr, acrdnCtn, acrdnCtnItem) {
      var _this = this;
      var acrdActive = [];
      this.trigger("clicked", eventArgs);
      var cntclkCheck = acrdnCtn && !isNullOrUndefined(select(".e-target", acrdnCtn));
      var inlineAcrdnSel = "." + CLS_CONTENT + " ." + CLS_ROOT3;
      var inlineEleAcrdn = acrdnCtn && !isNullOrUndefined(select("." + CLS_ROOT3, acrdnCtn)) && isNullOrUndefined(closest(trgt, inlineAcrdnSel));
      var nestContCheck = acrdnCtn && isNullOrUndefined(select("." + CLS_ROOT3, acrdnCtn)) || !(closest(trgt, "." + CLS_ROOT3) === this.element);
      cntclkCheck = cntclkCheck && (inlineEleAcrdn || nestContCheck);
      trgt.classList.remove("e-target");
      if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {
        return;
      }
      var acrdcontainer = this.element.querySelector("." + CLS_CONTAINER);
      var acrdnchild = acrdcontainer ? acrdcontainer.children : this.element.children;
      [].slice.call(acrdnchild).forEach(function(el2) {
        if (el2.classList.contains(CLS_ACTIVE)) {
          acrdActive.push(el2);
        }
      });
      var acrdAniEle = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM2 + " [" + CLS_ANIMATE + "]"));
      if (acrdAniEle.length > 0) {
        for (var _i = 0, acrdAniEle_1 = acrdAniEle; _i < acrdAniEle_1.length; _i++) {
          var el = acrdAniEle_1[_i];
          acrdActive.push(el.parentElement);
        }
      }
      var sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute("e-animate") === "true";
      var sameHeader = false;
      if (!isNullOrUndefined(acrdnItem) && !isNullOrUndefined(acrdnHdr)) {
        var acrdnCtn_1 = select("." + CLS_CONTENT, acrdnItem);
        var acrdnRoot = closest(acrdnItem, "." + CLS_ACRDN_ROOT);
        var expandState = acrdnRoot.querySelector("." + CLS_EXPANDSTATE);
        if (isNullOrUndefined(acrdnCtn_1)) {
          return;
        }
        sameHeader = expandState === acrdnItem;
        if (isVisible(acrdnCtn_1) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {
          this.collapse(acrdnCtn_1);
        } else {
          if (acrdActive.length > 0 && this.expandMode === "Single" && !sameContentCheck) {
            acrdActive.forEach(function(el2) {
              _this.collapse(select("." + CLS_CONTENT, el2));
              el2.classList.remove(CLS_EXPANDSTATE);
            });
          }
          this.expand(acrdnCtn_1);
        }
        if (!isNullOrUndefined(expandState) && !sameHeader) {
          expandState.classList.remove(CLS_EXPANDSTATE);
        }
      }
    };
    Accordion2.prototype.eleMoveFocus = function(action, root, trgt) {
      var clst;
      var clstItem = closest(trgt, "." + CLS_ITEM2);
      if (trgt === root) {
        clst = (action === "moveUp" ? trgt.lastElementChild : trgt).querySelector("." + CLS_HEADER);
      } else if (trgt.classList.contains(CLS_HEADER)) {
        clstItem = action === "moveUp" ? clstItem.previousElementSibling : clstItem.nextElementSibling;
        if (clstItem) {
          clst = select("." + CLS_HEADER, clstItem);
        }
      }
      if (clst) {
        clst.focus();
      }
    };
    Accordion2.prototype.keyActionHandler = function(e) {
      var trgt = e.target;
      var header = closest(e.target, CLS_HEADER);
      if (isNullOrUndefined(header) && !trgt.classList.contains(CLS_ROOT3) && !trgt.classList.contains(CLS_HEADER)) {
        return;
      }
      var clst;
      var root = this.element;
      var content;
      switch (e.action) {
        case "moveUp":
          this.eleMoveFocus(e.action, root, trgt);
          break;
        case "moveDown":
          this.eleMoveFocus(e.action, root, trgt);
          break;
        case "space":
        case "enter":
          content = trgt.nextElementSibling;
          if (!isNullOrUndefined(content) && content.classList.contains(CLS_CONTENT)) {
            if (content.getAttribute("e-animate") !== "true") {
              trgt.click();
            }
          } else {
            trgt.click();
          }
          e.preventDefault();
          break;
        case "home":
        case "end":
          clst = e.action === "home" ? root.firstElementChild.children[0] : root.lastElementChild.children[0];
          clst.focus();
          e.preventDefault();
          break;
      }
    };
    Accordion2.prototype.headerEleGenerate = function() {
      var header = this.createElement("div", { className: CLS_HEADER, id: getUniqueID("acrdn_header") });
      var ariaAttr = {
        "tabindex": "0",
        "role": "button",
        "aria-disabled": "false",
        "aria-expanded": "false"
      };
      attributes(header, ariaAttr);
      return header;
    };
    Accordion2.prototype.renderInnerItem = function(item, index) {
      var innerEle = this.createElement("div", {
        className: CLS_ITEM2,
        id: item.id || getUniqueID("acrdn_item")
      });
      if (this.headerTemplate) {
        var ctnEle = this.headerEleGenerate();
        var hdrEle = this.createElement("div", { className: CLS_HEADERCTN });
        ctnEle.appendChild(hdrEle);
        append(this.getHeaderTemplate()(item, this, "headerTemplate", this.element.id + "_headerTemplate", false), hdrEle);
        innerEle.appendChild(ctnEle);
        ctnEle.appendChild(this.toggleIconGenerate());
        this.add(innerEle, CLS_SLCT);
        return innerEle;
      }
      if (item.header && this.angularnativeCondiCheck(item, "header")) {
        if (this.enableHtmlSanitizer && typeof item.header === "string") {
          item.header = SanitizeHtmlHelper.sanitize(item.header);
        }
        var ctnEle = this.headerEleGenerate();
        var hdrEle = this.createElement("div", { className: CLS_HEADERCTN });
        ctnEle.appendChild(hdrEle);
        ctnEle.appendChild(this.fetchElement(hdrEle, item.header, index, true));
        innerEle.appendChild(ctnEle);
      }
      var hdr = select("." + CLS_HEADER, innerEle);
      if (item.expanded && !isNullOrUndefined(index) && !this.enablePersistence) {
        if (this.initExpand.indexOf(index) === -1) {
          this.initExpand.push(index);
        }
      }
      if (item.cssClass) {
        addClass([innerEle], item.cssClass.split(" "));
      }
      if (item.disabled) {
        addClass([innerEle], CLS_DISABLE4);
      }
      if (item.visible === false) {
        addClass([innerEle], CLS_ITEMHIDE);
      }
      if (item.iconCss) {
        var hdrIcnEle = this.createElement("div", { className: CLS_HEADERICN });
        var icon = this.createElement("span", { className: item.iconCss + " e-icons" });
        hdrIcnEle.appendChild(icon);
        if (isNullOrUndefined(hdr)) {
          hdr = this.headerEleGenerate();
          hdr.appendChild(hdrIcnEle);
          innerEle.appendChild(hdr);
        } else {
          hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);
        }
      }
      if (item.content && this.angularnativeCondiCheck(item, "content")) {
        var hdrIcon = this.toggleIconGenerate();
        if (isNullOrUndefined(hdr)) {
          hdr = this.headerEleGenerate();
          innerEle.appendChild(hdr);
        }
        hdr.appendChild(hdrIcon);
        this.add(innerEle, CLS_SLCT);
      }
      return innerEle;
    };
    Accordion2.prototype.angularnativeCondiCheck = function(item, prop) {
      var property = prop === "content" ? item.content : item.header;
      var content = property;
      if (this.isAngular && !isNullOrUndefined(content.elementRef)) {
        var data = content.elementRef.nativeElement.data;
        if (isNullOrUndefined(data) || data === "" || data.indexOf("bindings=") === -1) {
          return true;
        }
        var parseddata = JSON.parse(content.elementRef.nativeElement.data.replace("bindings=", ""));
        if (!isNullOrUndefined(parseddata) && parseddata["ng-reflect-ng-if"] === "false") {
          return false;
        } else {
          return true;
        }
      } else {
        return true;
      }
    };
    Accordion2.prototype.fetchElement = function(ele, value, index, isHeader) {
      var templateFn;
      var temString;
      try {
        if (document.querySelectorAll(value).length && value !== "Button") {
          var eleVal = document.querySelector(value);
          temString = eleVal.outerHTML.trim();
          ele.appendChild(eleVal);
          eleVal.style.display = "";
        } else {
          templateFn = compile(value);
        }
      } catch (e) {
        if (typeof value === "string") {
          ele.innerHTML = SanitizeHtmlHelper.sanitize(value);
        } else if (!isNullOrUndefined(this.trgtEle) && value instanceof HTMLElement) {
          ele.appendChild(value);
          ele.firstElementChild.style.display = "";
        } else {
          templateFn = compile(value);
        }
      }
      var tempArray;
      if (!isNullOrUndefined(templateFn)) {
        if (this.isReact) {
          this.renderReactTemplates();
        }
        var templateProps = void 0;
        var templateName = void 0;
        if (ele.classList.contains(CLS_HEADERCTN)) {
          templateProps = this.element.id + index + "_header";
          templateName = "header";
        } else if (ele.classList.contains(CLS_CTENT)) {
          templateProps = this.element.id + index + "_content";
          templateName = "content";
        }
        tempArray = templateFn({}, this, templateName, templateProps, this.isStringTemplate);
      }
      if (!isNullOrUndefined(tempArray) && tempArray.length > 0 && !(isNullOrUndefined(tempArray[0].tagName) && tempArray.length === 1)) {
        [].slice.call(tempArray).forEach(function(el) {
          if (!isNullOrUndefined(el.tagName)) {
            el.style.display = "";
          }
          ele.appendChild(el);
        });
      } else if (ele.childElementCount === 0) {
        ele.innerHTML = SanitizeHtmlHelper.sanitize(value);
      }
      if (!isNullOrUndefined(temString)) {
        if (this.templateEle.indexOf(value) === -1) {
          this.templateEle.push(value);
        }
      }
      return ele;
    };
    Accordion2.prototype.ariaAttrUpdate = function(itemEle) {
      var header = select("." + CLS_HEADER, itemEle);
      var content = select("." + CLS_CONTENT, itemEle);
      header.setAttribute("aria-controls", content.id);
      content.setAttribute("aria-labelledby", header.id);
      content.setAttribute("role", "region");
    };
    Accordion2.prototype.contentRendering = function(index) {
      var itemcnt = this.createElement("div", { className: CLS_CONTENT + " " + CLS_CTNHIDE, id: getUniqueID("acrdn_panel") });
      attributes(itemcnt, { "aria-hidden": "true" });
      var ctn = this.createElement("div", { className: CLS_CTENT });
      if (this.dataSource.length > 0) {
        if (this.isReact) {
          this.renderReactTemplates();
        }
        append(this.getItemTemplate()(this.dataSource[parseInt(index.toString(), 10)], this, "itemTemplate", this.element.id + "_itemTemplate", false), ctn);
        itemcnt.appendChild(ctn);
      } else {
        if (this.enableHtmlSanitizer && typeof this.items[parseInt(index.toString(), 10)].content) {
          this.items[parseInt(index.toString(), 10)].content = SanitizeHtmlHelper.sanitize(this.items[parseInt(index.toString(), 10)].content);
        }
        itemcnt.appendChild(this.fetchElement(ctn, this.items[parseInt(index.toString(), 10)].content, index, false));
      }
      return itemcnt;
    };
    Accordion2.prototype.expand = function(trgt) {
      var _this = this;
      var items = this.getItems();
      var trgtItemEle = closest(trgt, "." + CLS_ITEM2);
      if (isNullOrUndefined(trgt) || isVisible(trgt) && trgt.getAttribute("e-animate") !== "true" || trgtItemEle.classList.contains(CLS_DISABLE4)) {
        return;
      }
      var acrdnRoot = closest(trgtItemEle, "." + CLS_ACRDN_ROOT);
      var expandState = acrdnRoot.querySelector("." + CLS_EXPANDSTATE);
      var animation = {
        name: this.animation.expand.effect,
        duration: this.animation.expand.duration,
        timingFunction: this.animation.expand.easing
      };
      var icon = select("." + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
      var eventArgs = {
        element: trgtItemEle,
        item: items[this.getIndexByItem(trgtItemEle)],
        index: this.getIndexByItem(trgtItemEle),
        content: trgtItemEle.querySelector("." + CLS_CONTENT),
        isExpanded: true
      };
      this.trigger("expanding", eventArgs, function(expandArgs) {
        if (!expandArgs.cancel) {
          icon.classList.add(CLS_TOGANIMATE);
          _this.expandedItemsPush(trgtItemEle);
          if (!isNullOrUndefined(expandState)) {
            expandState.classList.remove(CLS_EXPANDSTATE);
          }
          trgtItemEle.classList.add(CLS_EXPANDSTATE);
          if (animation.name === "None") {
            _this.expandProgress("begin", icon, trgt, trgtItemEle, expandArgs);
            _this.expandProgress("end", icon, trgt, trgtItemEle, expandArgs);
          } else {
            _this.expandAnimation(animation.name, icon, trgt, trgtItemEle, animation, expandArgs);
          }
        }
      });
    };
    Accordion2.prototype.expandAnimation = function(ef, icn, trgt, trgtItemEle, animate, args) {
      var _this = this;
      var height;
      this.lastActiveItemId = trgtItemEle.id;
      if (ef === "SlideDown") {
        animate.begin = function() {
          _this.expandProgress("begin", icn, trgt, trgtItemEle, args);
          trgt.style.position = "absolute";
          height = trgtItemEle.offsetHeight;
          trgt.style.maxHeight = trgt.offsetHeight + "px";
          trgtItemEle.style.maxHeight = "";
        };
        animate.progress = function() {
          trgtItemEle.style.minHeight = height + trgt.offsetHeight + "px";
        };
        animate.end = function() {
          setStyleAttribute(trgt, { "position": "", "maxHeight": "" });
          trgtItemEle.style.minHeight = "";
          _this.expandProgress("end", icn, trgt, trgtItemEle, args);
        };
      } else {
        animate.begin = function() {
          _this.expandProgress("begin", icn, trgt, trgtItemEle, args);
        };
        animate.end = function() {
          _this.expandProgress("end", icn, trgt, trgtItemEle, args);
        };
      }
      new Animation(animate).animate(trgt);
    };
    Accordion2.prototype.expandProgress = function(progress, icon, trgt, trgtItemEle, eventArgs) {
      this.remove(trgt, CLS_CTNHIDE);
      this.add(trgtItemEle, CLS_SLCTED);
      this.add(icon, CLS_EXPANDICN);
      if (progress === "end") {
        this.add(trgtItemEle, CLS_ACTIVE);
        trgt.setAttribute("aria-hidden", "false");
        attributes(trgt.previousElementSibling, { "aria-expanded": "true" });
        icon.classList.remove(CLS_TOGANIMATE);
        this.trigger("expanded", eventArgs);
      }
    };
    Accordion2.prototype.expandedItemsPush = function(item) {
      var index = this.getIndexByItem(item);
      if (this.expandedIndices.indexOf(index) === -1) {
        var temp = [].slice.call(this.expandedIndices);
        temp.push(index);
        this.setProperties({ expandedIndices: temp }, true);
      }
    };
    Accordion2.prototype.getIndexByItem = function(item) {
      var itemEle = this.getItemElements();
      return [].slice.call(itemEle).indexOf(item);
    };
    Accordion2.prototype.getItemElements = function() {
      var itemEle = [];
      var itemCollection = this.element.children;
      [].slice.call(itemCollection).forEach(function(el) {
        if (el.classList.contains(CLS_ITEM2)) {
          itemEle.push(el);
        }
      });
      return itemEle;
    };
    Accordion2.prototype.expandedItemsPop = function(item) {
      var index = this.getIndexByItem(item);
      var temp = [].slice.call(this.expandedIndices);
      temp.splice(temp.indexOf(index), 1);
      this.setProperties({ expandedIndices: temp }, true);
    };
    Accordion2.prototype.collapse = function(trgt) {
      var _this = this;
      var items = this.getItems();
      var trgtItemEle = closest(trgt, "." + CLS_ITEM2);
      if (isNullOrUndefined(trgt) || !isVisible(trgt) || trgtItemEle.classList.contains(CLS_DISABLE4)) {
        return;
      }
      var animation = {
        name: this.animation.collapse.effect,
        duration: this.animation.collapse.duration,
        timingFunction: this.animation.collapse.easing
      };
      var icon = select("." + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
      var eventArgs = {
        element: trgtItemEle,
        item: items[this.getIndexByItem(trgtItemEle)],
        index: this.getIndexByItem(trgtItemEle),
        content: trgtItemEle.querySelector("." + CLS_CONTENT),
        isExpanded: false
      };
      this.trigger("expanding", eventArgs, function(expandArgs) {
        if (!expandArgs.cancel) {
          _this.expandedItemsPop(trgtItemEle);
          trgtItemEle.classList.remove(CLS_EXPANDSTATE);
          icon.classList.add(CLS_TOGANIMATE);
          if (animation.name === "None") {
            _this.collapseProgress("begin", icon, trgt, trgtItemEle, expandArgs);
            _this.collapseProgress("end", icon, trgt, trgtItemEle, expandArgs);
          } else {
            _this.collapseAnimation(animation.name, trgt, trgtItemEle, icon, animation, expandArgs);
          }
        }
      });
    };
    Accordion2.prototype.collapseAnimation = function(ef, trgt, trgtItEl, icn, animate, args) {
      var _this = this;
      var height;
      var trgtHeight;
      var itemHeight;
      var remain;
      this.lastActiveItemId = trgtItEl.id;
      if (ef === "SlideUp") {
        animate.begin = function() {
          itemHeight = trgtItEl.offsetHeight;
          trgtItEl.style.minHeight = itemHeight + "px";
          trgt.style.position = "absolute";
          height = trgtItEl.offsetHeight;
          trgtHeight = trgt.offsetHeight;
          trgt.style.maxHeight = trgtHeight + "px";
          _this.collapseProgress("begin", icn, trgt, trgtItEl, args);
        };
        animate.progress = function() {
          remain = height - (trgtHeight - trgt.offsetHeight);
          if (remain < itemHeight) {
            trgtItEl.style.minHeight = remain + "px";
          }
        };
        animate.end = function() {
          trgt.style.display = "none";
          _this.collapseProgress("end", icn, trgt, trgtItEl, args);
          trgtItEl.style.minHeight = "";
          setStyleAttribute(trgt, { "position": "", "maxHeight": "", "display": "" });
        };
      } else {
        animate.begin = function() {
          _this.collapseProgress("begin", icn, trgt, trgtItEl, args);
        };
        animate.end = function() {
          _this.collapseProgress("end", icn, trgt, trgtItEl, args);
        };
      }
      new Animation(animate).animate(trgt);
    };
    Accordion2.prototype.collapseProgress = function(progress, icon, trgt, trgtItemEle, eventArgs) {
      this.remove(icon, CLS_EXPANDICN);
      this.remove(trgtItemEle, CLS_SLCTED);
      if (progress === "end") {
        this.add(trgt, CLS_CTNHIDE);
        icon.classList.remove(CLS_TOGANIMATE);
        this.remove(trgtItemEle, CLS_ACTIVE);
        trgt.setAttribute("aria-hidden", "true");
        attributes(trgt.previousElementSibling, { "aria-expanded": "false" });
        this.trigger("expanded", eventArgs);
      }
    };
    Accordion2.prototype.getModuleName = function() {
      return "accordion";
    };
    Accordion2.prototype.getItems = function() {
      var items;
      if (this.itemTemplate && this.headerTemplate) {
        items = this.dataSource;
      } else {
        items = this.items;
      }
      return items;
    };
    Accordion2.prototype.addItem = function(item, index) {
      var _this = this;
      var ele = this.element;
      var itemEle = this.getItemElements();
      var items = this.getItems();
      if (isNullOrUndefined(index)) {
        index = items.length;
      }
      if (ele.childElementCount >= index) {
        var addItems = item instanceof Array ? item : [item];
        addItems.forEach(function(addItem, i) {
          var itemIndex = index + i;
          items.splice(itemIndex, 0, addItem);
          var innerItemEle = _this.renderInnerItem(addItem, itemIndex);
          if (ele.childElementCount === itemIndex) {
            ele.appendChild(innerItemEle);
          } else {
            ele.insertBefore(innerItemEle, itemEle[parseInt(itemIndex.toString(), 10)]);
          }
          EventHandler.add(innerItemEle.querySelector("." + CLS_HEADER), "focus", _this.focusIn, _this);
          EventHandler.add(innerItemEle.querySelector("." + CLS_HEADER), "blur", _this.focusOut, _this);
          _this.expandedIndices = [];
          _this.expandedItemRefresh(ele);
          if (addItem && addItem.expanded) {
            _this.expandItem(true, itemIndex);
          }
        });
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.expandedItemRefresh = function(ele) {
      var _this = this;
      var itemEle = this.getItemElements();
      [].slice.call(itemEle).forEach(function(el) {
        if (el.classList.contains(CLS_SLCTED)) {
          _this.expandedItemsPush(el);
        }
      });
    };
    Accordion2.prototype.removeItem = function(index) {
      if (this.isReact) {
        this.clearTemplate(["headerTemplate", "itemTemplate"], index);
      }
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      var items = this.getItems();
      if (isNullOrUndefined(ele)) {
        return;
      }
      this.restoreContent(index);
      detach(ele);
      items.splice(index, 1);
      this.expandedIndices = [];
      this.expandedItemRefresh(this.element);
    };
    Accordion2.prototype.select = function(index) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele) || isNullOrUndefined(select("." + CLS_HEADER, ele))) {
        return;
      }
      ele.children[0].focus();
    };
    Accordion2.prototype.hideItem = function(index, isHidden) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele)) {
        return;
      }
      if (isNullOrUndefined(isHidden)) {
        isHidden = true;
      }
      if (isHidden) {
        this.add(ele, CLS_ITEMHIDE);
      } else {
        this.remove(ele, CLS_ITEMHIDE);
      }
    };
    Accordion2.prototype.enableItem = function(index, isEnable) {
      var itemEle = this.getItemElements();
      var ele = itemEle[parseInt(index.toString(), 10)];
      if (isNullOrUndefined(ele)) {
        return;
      }
      var eleHeader = ele.firstElementChild;
      if (isEnable) {
        this.remove(ele, CLS_DISABLE4);
        attributes(eleHeader, { "tabindex": "0", "aria-disabled": "false" });
        eleHeader.focus();
      } else {
        if (ele.classList.contains(CLS_ACTIVE)) {
          this.expandItem(false, index);
          this.eleMoveFocus("movedown", this.element, eleHeader);
        }
        this.add(ele, CLS_DISABLE4);
        eleHeader.setAttribute("aria-disabled", "true");
        eleHeader.removeAttribute("tabindex");
      }
    };
    Accordion2.prototype.expandItem = function(isExpand, index) {
      var _this = this;
      var itemEle = this.getItemElements();
      if (isNullOrUndefined(index)) {
        if (this.expandMode === "Single" && isExpand) {
          var ele = itemEle[itemEle.length - 1];
          this.itemExpand(isExpand, ele, this.getIndexByItem(ele));
        } else {
          var item = select("#" + this.lastActiveItemId, this.element);
          [].slice.call(itemEle).forEach(function(el) {
            _this.itemExpand(isExpand, el, _this.getIndexByItem(el));
            el.classList.remove(CLS_EXPANDSTATE);
          });
          var expandedItem = select("." + CLS_EXPANDSTATE, this.element);
          if (expandedItem) {
            expandedItem.classList.remove(CLS_EXPANDSTATE);
          }
          if (item) {
            item.classList.add(CLS_EXPANDSTATE);
          }
        }
      } else {
        var ele = itemEle[parseInt(index.toString(), 10)];
        if (isNullOrUndefined(ele) || !ele.classList.contains(CLS_SLCT) || ele.classList.contains(CLS_ACTIVE) && isExpand) {
          return;
        } else {
          if (this.expandMode === "Single") {
            this.expandItem(false);
          }
          this.itemExpand(isExpand, ele, index);
        }
      }
    };
    Accordion2.prototype.itemExpand = function(isExpand, ele, index) {
      var ctn = ele.children[1];
      if (ele.classList.contains(CLS_DISABLE4)) {
        return;
      }
      if (isNullOrUndefined(ctn) && isExpand) {
        ctn = this.contentRendering(index);
        ele.appendChild(ctn);
        this.ariaAttrUpdate(ele);
        this.expand(ctn);
      } else if (!isNullOrUndefined(ctn)) {
        if (isExpand) {
          this.expand(ctn);
        } else {
          this.collapse(ctn);
        }
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.destroyItems = function() {
      this.restoreContent(null);
      if (this.isReact || this.isAngular || this.isVue) {
        this.clearTemplate();
      }
      [].slice.call(this.element.querySelectorAll("." + CLS_ITEM2)).forEach(function(el) {
        detach(el);
      });
    };
    Accordion2.prototype.restoreContent = function(index) {
      var ctnElePos;
      if (isNullOrUndefined(index)) {
        ctnElePos = this.element;
      } else {
        ctnElePos = this.element.querySelectorAll("." + CLS_ITEM2)[parseInt(index.toString(), 10)];
      }
      this.templateEle.forEach(function(eleStr) {
        if (!isNullOrUndefined(ctnElePos.querySelector(eleStr))) {
          document.body.appendChild(ctnElePos.querySelector(eleStr)).style.display = "none";
        }
      });
    };
    Accordion2.prototype.updateItem = function(item, index) {
      if (!isNullOrUndefined(item)) {
        var items = this.getItems();
        var itemObj = items[parseInt(index.toString(), 10)];
        items.splice(index, 1);
        this.restoreContent(index);
        var header = select("." + CLS_HEADERCTN, item);
        var content = select("." + CLS_CTENT, item);
        if (this.isReact || this.isAngular) {
          this.clearAccordionTemplate(header, "header", CLS_HEADERCTN);
          this.clearAccordionTemplate(content, "content", CLS_CTENT);
        }
        detach(item);
        this.addItem(itemObj, index);
      }
    };
    Accordion2.prototype.setTemplate = function(template, toElement, index) {
      toElement.innerHTML = "";
      this.templateCompile(toElement, template, index);
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Accordion2.prototype.templateCompile = function(ele, cnt, index) {
      var tempEle = this.createElement("div");
      this.fetchElement(tempEle, cnt, index, false);
      if (tempEle.childNodes.length !== 0) {
        [].slice.call(tempEle.childNodes).forEach(function(childEle) {
          ele.appendChild(childEle);
        });
      }
    };
    Accordion2.prototype.clearAccordionTemplate = function(templateEle, templateName, className) {
      if (this.registeredTemplate && this.registeredTemplate["" + templateName]) {
        var registeredTemplates = this.registeredTemplate;
        for (var index = 0; index < registeredTemplates["" + templateName].length; index++) {
          var registeredItem = registeredTemplates["" + templateName][parseInt(index.toString(), 10)].rootNodes[0];
          var closestItem = closest(registeredItem.containerInfo, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], [registeredTemplates["" + templateName][parseInt(index.toString(), 10)]]);
            break;
          }
        }
      } else if (this.portals && this.portals.length > 0) {
        var portals = this.portals;
        for (var index = 0; index < portals.length; index++) {
          var portalItem = portals[parseInt(index.toString(), 10)];
          var closestItem = closest(portalItem.containerInfo, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], index);
            break;
          }
        }
      }
    };
    Accordion2.prototype.getPersistData = function() {
      var keyEntity = ["expandedIndices"];
      return this.addOnPersist(keyEntity);
    };
    Accordion2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var acrdn = this.element;
      var isRefresh = false;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
            if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
              var changedProp = Object.keys(newProp.items);
              for (var j = 0; j < changedProp.length; j++) {
                var index = parseInt(Object.keys(newProp.items)[parseInt(j.toString(), 10)], 10);
                var property = Object.keys(newProp.items[parseInt(index.toString(), 10)]);
                for (var k = 0; k < property.length; k++) {
                  var item = selectAll("." + CLS_ITEM2, this.element)[parseInt(index.toString(), 10)];
                  var oldVal = Object(oldProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]];
                  var newVal = Object(newProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]];
                  var temp = property[parseInt(k.toString(), 10)];
                  var content = select("." + CLS_CTENT, item);
                  if (temp === "header" || temp === "iconCss" || temp === "expanded" || temp === "content" && oldVal === "") {
                    this.updateItem(item, index);
                  }
                  if (property[parseInt(k.toString(), 10)] === "cssClass" && !isNullOrUndefined(item)) {
                    if (oldVal) {
                      removeClass([item], oldVal.split(" "));
                    }
                    if (newVal) {
                      addClass([item], newVal.split(" "));
                    }
                  }
                  if (property[parseInt(k.toString(), 10)] === "visible" && !isNullOrUndefined(item)) {
                    if (Object(newProp.items[parseInt(index.toString(), 10)])["" + property[parseInt(k.toString(), 10)]] === false) {
                      item.classList.add(CLS_ITEMHIDE);
                    } else {
                      item.classList.remove(CLS_ITEMHIDE);
                    }
                  }
                  if (property[parseInt(k.toString(), 10)] === "disabled" && !isNullOrUndefined(item)) {
                    this.enableItem(index, !newVal);
                  }
                  if (property[parseInt(k.toString(), 10)] === "content" && !isNullOrUndefined(item) && item.children.length === 2) {
                    if (typeof newVal === "function") {
                      if (this.isAngular || this.isReact) {
                        this.clearAccordionTemplate(content, property[parseInt(k.toString(), 10)], CLS_CTENT);
                      }
                      var activeContent = item.querySelector("." + CLS_CTENT);
                      activeContent.innerHTML = "";
                      this.setTemplate(newVal, activeContent, index);
                    } else {
                      if (item.classList.contains(CLS_SLCTED)) {
                        this.expandItem(false, index);
                      }
                      detach(item.querySelector("." + CLS_CONTENT));
                    }
                  }
                }
              }
            } else {
              isRefresh = true;
            }
            break;
          case "dataSource":
          case "expandedIndices":
            if (this.expandedIndices === null) {
              this.expandedIndices = [];
            }
            isRefresh = true;
            break;
          case "headerTemplate":
            this.initializeHeaderTemplate();
            isRefresh = true;
            break;
          case "itemTemplate":
            this.initializeItemTemplate();
            isRefresh = true;
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.add(acrdn, CLS_RTL4);
            } else {
              this.remove(acrdn, CLS_RTL4);
            }
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(newProp.height) });
            break;
          case "width":
            setStyleAttribute(this.element, { "width": formatUnit(newProp.width) });
            break;
          case "expandMode":
            if (newProp.expandMode === "Single" && this.expandedIndices.length > 1) {
              this.expandItem(false);
            }
            break;
        }
      }
      if (isRefresh) {
        this.initExpand = [];
        if (this.expandedIndices.length > 0) {
          this.initExpand = this.expandedIndices;
        }
        this.destroyItems();
        this.renderItems();
        this.initItemExpand();
      }
    };
    __decorate23([
      Collection([], AccordionItem)
    ], Accordion2.prototype, "items", void 0);
    __decorate23([
      Property([])
    ], Accordion2.prototype, "dataSource", void 0);
    __decorate23([
      Property()
    ], Accordion2.prototype, "itemTemplate", void 0);
    __decorate23([
      Property()
    ], Accordion2.prototype, "headerTemplate", void 0);
    __decorate23([
      Property("100%")
    ], Accordion2.prototype, "width", void 0);
    __decorate23([
      Property("auto")
    ], Accordion2.prototype, "height", void 0);
    __decorate23([
      Property([])
    ], Accordion2.prototype, "expandedIndices", void 0);
    __decorate23([
      Property("Multiple")
    ], Accordion2.prototype, "expandMode", void 0);
    __decorate23([
      Property(false)
    ], Accordion2.prototype, "enableHtmlSanitizer", void 0);
    __decorate23([
      Complex({}, AccordionAnimationSettings)
    ], Accordion2.prototype, "animation", void 0);
    __decorate23([
      Event()
    ], Accordion2.prototype, "clicked", void 0);
    __decorate23([
      Event()
    ], Accordion2.prototype, "expanding", void 0);
    __decorate23([
      Event()
    ], Accordion2.prototype, "expanded", void 0);
    __decorate23([
      Event()
    ], Accordion2.prototype, "created", void 0);
    __decorate23([
      Event()
    ], Accordion2.prototype, "destroyed", void 0);
    Accordion2 = __decorate23([
      NotifyPropertyChanges
    ], Accordion2);
    return Accordion2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/context-menu/context-menu.js
var __extends27 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate24 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ContextMenu = (
  /** @class */
  function(_super) {
    __extends27(ContextMenu2, _super);
    function ContextMenu2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    ContextMenu2.prototype.preRender = function() {
      this.isMenu = false;
      this.element.id = this.element.id || getUniqueID("ej2-contextmenu");
      _super.prototype.preRender.call(this);
    };
    ContextMenu2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      attributes(this.element, { "role": "menubar", "tabindex": "0" });
      this.element.style.zIndex = getZindexPartial(this.element).toString();
    };
    ContextMenu2.prototype.open = function(top, left, target) {
      _super.prototype.openMenu.call(this, null, null, top, left, null, target);
    };
    ContextMenu2.prototype.close = function() {
      _super.prototype.closeMenu.call(this);
    };
    ContextMenu2.prototype.onPropertyChanged = function(newProp, oldProp) {
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "filter":
            this.close();
            this.filter = newProp.filter;
            break;
          case "target":
            this.unWireEvents(oldProp.target);
            this.wireEvents();
            break;
        }
      }
    };
    ContextMenu2.prototype.getModuleName = function() {
      return "contextmenu";
    };
    __decorate24([
      Property("")
    ], ContextMenu2.prototype, "target", void 0);
    __decorate24([
      Property("")
    ], ContextMenu2.prototype, "filter", void 0);
    __decorate24([
      Collection([], MenuItem)
    ], ContextMenu2.prototype, "items", void 0);
    ContextMenu2 = __decorate24([
      NotifyPropertyChanges
    ], ContextMenu2);
    return ContextMenu2;
  }(MenuBase)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/menu/menu.js
var __extends28 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate25 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var VMENU = "e-vertical";
var SCROLLABLE = "e-scrollable";
var HAMBURGER = "e-hamburger";
var Menu = (
  /** @class */
  function(_super) {
    __extends28(Menu2, _super);
    function Menu2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.tempItems = [];
      return _this;
    }
    Menu2.prototype.getModuleName = function() {
      return "menu";
    };
    Menu2.prototype.preRender = function() {
      this.isMenu = true;
      this.element.id = this.element.id || getUniqueID("ej2-menu");
      if (this.template) {
        try {
          if (typeof this.template !== "function" && document.querySelectorAll(this.template).length) {
            this.template = document.querySelector(this.template).innerHTML.trim();
            this.clearChanges();
          }
        } catch (e) {
        }
        this.updateMenuItems(this.items);
      } else {
        this.updateMenuItems(this.items);
      }
      _super.prototype.preRender.call(this);
    };
    Menu2.prototype.initialize = function() {
      _super.prototype.initialize.call(this);
      attributes(this.element, { "role": "menubar", "tabindex": "0" });
      if (this.orientation === "Vertical") {
        this.element.classList.add(VMENU);
        if (this.hamburgerMode && !this.target) {
          this.element.previousElementSibling.classList.add(VMENU);
        }
        this.element.setAttribute("aria-orientation", "vertical");
      } else {
        if (Browser.isDevice && !this.enableScrolling) {
          this.element.parentElement.classList.add(SCROLLABLE);
        }
      }
      if (this.hamburgerMode) {
        this.element.parentElement.classList.add(HAMBURGER);
        if (this.orientation === "Horizontal") {
          this.element.classList.add("e-hide-menu");
        }
      }
    };
    Menu2.prototype.updateMenuItems = function(items) {
      this.tempItems = items;
      this.items = [];
      this.tempItems.map(this.createMenuItems, this);
      this.setProperties({ items: this.items }, true);
      this.tempItems = [];
    };
    Menu2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "orientation":
            if (newProp.orientation === "Vertical") {
              this.element.classList.add(VMENU);
              if (this.hamburgerMode) {
                if (!this.target) {
                  this.element.previousElementSibling.classList.add(VMENU);
                }
                this.element.classList.remove("e-hide-menu");
              }
              this.element.setAttribute("aria-orientation", "vertical");
            } else {
              this.element.classList.remove(VMENU);
              if (this.hamburgerMode) {
                if (!this.target) {
                  this.element.previousElementSibling.classList.remove(VMENU);
                }
                this.element.classList.add("e-hide-menu");
              }
              this.element.removeAttribute("aria-orientation");
            }
            break;
          case "items":
            if (!Object.keys(oldProp.items).length) {
              this.updateMenuItems(newProp.items);
            }
            break;
          case "hamburgerMode":
            if (!this.element.previousElementSibling) {
              _super.prototype.createHeaderContainer.call(this);
            }
            if (newProp.hamburgerMode) {
              this.element.parentElement.classList.add(HAMBURGER);
              [].slice.call(this.element.getElementsByClassName("e-blankicon")).forEach(function(li) {
                li.style[_this.enableRtl ? "paddingRight" : "paddingLeft"] = "";
              });
            } else {
              this.element.parentElement.classList.remove(HAMBURGER);
              if (this.orientation === "Vertical") {
                this.setBlankIconStyle(this.element);
              }
            }
            if (this.orientation === "Vertical") {
              if (!this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              }
              this.element.classList.remove("e-hide-menu");
            } else {
              if (this.target) {
                this.element.previousElementSibling.classList.add(VMENU);
              } else {
                this.element.previousElementSibling.classList.remove(VMENU);
              }
              this.element.classList[newProp.hamburgerMode ? "add" : "remove"]("e-hide-menu");
            }
            break;
          case "title":
            if (this.hamburgerMode && this.element.previousElementSibling) {
              newProp.title = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(newProp.title) : newProp.title;
              this.element.previousElementSibling.querySelector(".e-menu-title").innerHTML = newProp.title;
            }
            break;
          case "target":
            if (this.hamburgerMode) {
              this.unWireEvents(oldProp.target);
              this.wireEvents();
              if (this.orientation === "Horizontal") {
                if (!newProp.target) {
                  if (!this.element.previousElementSibling) {
                    _super.prototype.createHeaderContainer.call(this);
                  }
                  this.element.previousElementSibling.classList.remove(VMENU);
                } else {
                  this.element.previousElementSibling.classList.add(VMENU);
                }
                this.element.classList.add("e-hide-menu");
              }
            }
            break;
        }
      }
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
    };
    Menu2.prototype.createMenuItems = function(item) {
      var idx;
      var i;
      var items = this.items;
      var pIdField = this.getField("parentId");
      if (item["" + pIdField]) {
        idx = this.getIndex(item["" + pIdField].toString(), true);
        for (i = 0; i < idx.length; i++) {
          if (!items[idx[i]].items) {
            items[idx[i]].items = [];
          }
          items = items[idx[i]].items;
        }
        items.push(item);
      } else {
        this.items.push(item);
      }
    };
    Menu2.prototype.open = function() {
      _super.prototype.openHamburgerMenu.call(this);
    };
    Menu2.prototype.close = function() {
      _super.prototype.closeHamburgerMenu.call(this);
    };
    __decorate25([
      Property("Horizontal")
    ], Menu2.prototype, "orientation", void 0);
    __decorate25([
      Property("")
    ], Menu2.prototype, "target", void 0);
    __decorate25([
      Property(null)
    ], Menu2.prototype, "template", void 0);
    __decorate25([
      Property(false)
    ], Menu2.prototype, "enableScrolling", void 0);
    __decorate25([
      Property(false)
    ], Menu2.prototype, "hamburgerMode", void 0);
    __decorate25([
      Property("Menu")
    ], Menu2.prototype, "title", void 0);
    __decorate25([
      Property(false)
    ], Menu2.prototype, "enableHtmlSanitizer", void 0);
    __decorate25([
      Complex({ itemId: "id", text: "text", parentId: "parentId", iconCss: "iconCss", url: "url", separator: "separator", children: "items" }, FieldSettings2)
    ], Menu2.prototype, "fields", void 0);
    Menu2 = __decorate25([
      NotifyPropertyChanges
    ], Menu2);
    return Menu2;
  }(MenuBase)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/tab/tab.js
var __extends29 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate26 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_TAB = "e-tab";
var CLS_HEADER2 = "e-tab-header";
var CLS_BLA_TEM = "blazor-template";
var CLS_CONTENT2 = "e-content";
var CLS_NEST2 = "e-nested";
var CLS_ITEMS2 = "e-items";
var CLS_ITEM3 = "e-item";
var CLS_TEMPLATE2 = "e-template";
var CLS_RTL5 = "e-rtl";
var CLS_ACTIVE2 = "e-active";
var CLS_DISABLE5 = "e-disable";
var CLS_HIDDEN2 = "e-hidden";
var CLS_FOCUS = "e-focused";
var CLS_ICONS = "e-icons";
var CLS_ICON = "e-icon";
var CLS_ICON_TAB = "e-icon-tab";
var CLS_ICON_CLOSE = "e-close-icon";
var CLS_CLOSE_SHOW = "e-close-show";
var CLS_TEXT = "e-tab-text";
var CLS_INDICATOR = "e-indicator";
var CLS_WRAP = "e-tab-wrap";
var CLS_TEXT_WRAP = "e-text-wrap";
var CLS_TAB_ICON = "e-tab-icon";
var CLS_TB_ITEMS = "e-toolbar-items";
var CLS_TB_ITEM = "e-toolbar-item";
var CLS_TB_POP = "e-toolbar-pop";
var CLS_TB_POPUP = "e-toolbar-popup";
var CLS_HOR_NAV = "e-hor-nav";
var CLS_POPUP_OPEN = "e-popup-open";
var CLS_POPUP_CLOSE = "e-popup-close";
var CLS_PROGRESS = "e-progress";
var CLS_IGNORE = "e-ignore";
var CLS_OVERLAY3 = "e-overlay";
var CLS_HSCRCNT = "e-hscroll-content";
var CLS_VSCRCNT = "e-vscroll-content";
var CLS_VTAB = "e-vertical-tab";
var CLS_VERTICAL2 = "e-vertical";
var CLS_VLEFT = "e-vertical-left";
var CLS_VRIGHT = "e-vertical-right";
var CLS_HBOTTOM = "e-horizontal-bottom";
var CLS_FILL = "e-fill-mode";
var TABITEMPREFIX = "tabitem_";
var CLS_REORDER_ACTIVE_ITEM = "e-reorder-active-item";
var TabActionSettings = (
  /** @class */
  function(_super) {
    __extends29(TabActionSettings2, _super);
    function TabActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate26([
      Property("SlideLeftIn")
    ], TabActionSettings2.prototype, "effect", void 0);
    __decorate26([
      Property(600)
    ], TabActionSettings2.prototype, "duration", void 0);
    __decorate26([
      Property("ease")
    ], TabActionSettings2.prototype, "easing", void 0);
    return TabActionSettings2;
  }(ChildProperty)
);
var TabAnimationSettings = (
  /** @class */
  function(_super) {
    __extends29(TabAnimationSettings2, _super);
    function TabAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate26([
      Complex({ effect: "SlideLeftIn", duration: 600, easing: "ease" }, TabActionSettings)
    ], TabAnimationSettings2.prototype, "previous", void 0);
    __decorate26([
      Complex({ effect: "SlideRightIn", duration: 600, easing: "ease" }, TabActionSettings)
    ], TabAnimationSettings2.prototype, "next", void 0);
    return TabAnimationSettings2;
  }(ChildProperty)
);
var Header = (
  /** @class */
  function(_super) {
    __extends29(Header2, _super);
    function Header2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate26([
      Property("")
    ], Header2.prototype, "text", void 0);
    __decorate26([
      Property("")
    ], Header2.prototype, "iconCss", void 0);
    __decorate26([
      Property("left")
    ], Header2.prototype, "iconPosition", void 0);
    return Header2;
  }(ChildProperty)
);
var TabItem = (
  /** @class */
  function(_super) {
    __extends29(TabItem2, _super);
    function TabItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate26([
      Complex({}, Header)
    ], TabItem2.prototype, "header", void 0);
    __decorate26([
      Property(null)
    ], TabItem2.prototype, "headerTemplate", void 0);
    __decorate26([
      Property("")
    ], TabItem2.prototype, "content", void 0);
    __decorate26([
      Property("")
    ], TabItem2.prototype, "cssClass", void 0);
    __decorate26([
      Property(false)
    ], TabItem2.prototype, "disabled", void 0);
    __decorate26([
      Property(true)
    ], TabItem2.prototype, "visible", void 0);
    __decorate26([
      Property()
    ], TabItem2.prototype, "id", void 0);
    __decorate26([
      Property(-1)
    ], TabItem2.prototype, "tabIndex", void 0);
    return TabItem2;
  }(ChildProperty)
);
var Tab = (
  /** @class */
  function(_super) {
    __extends29(Tab2, _super);
    function Tab2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.show = {};
      _this.hide = {};
      _this.maxHeight = 0;
      _this.title = "Close";
      _this.isInteracted = false;
      _this.lastIndex = 0;
      _this.isAdd = false;
      _this.isIconAlone = false;
      _this.draggableItems = [];
      _this.resizeContext = _this.refreshActiveTabBorder.bind(_this);
      _this.keyConfigs = {
        tab: "tab",
        home: "home",
        end: "end",
        enter: "enter",
        space: "space",
        delete: "delete",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow"
      };
      return _this;
    }
    Tab2.prototype.destroy = function() {
      if (this.isReact || this.isAngular) {
        this.clearTemplate();
      }
      if (!isNullOrUndefined(this.tbObj)) {
        this.tbObj.destroy();
        this.tbObj = null;
      }
      this.unWireEvents();
      this.element.removeAttribute("aria-disabled");
      this.expTemplateContent();
      if (!this.isTemplate) {
        while (this.element.firstElementChild) {
          remove(this.element.firstElementChild);
        }
      } else {
        var cntEle = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
        this.element.classList.remove(CLS_TEMPLATE2);
        if (!isNullOrUndefined(cntEle)) {
          cntEle.innerHTML = this.cnt;
        }
      }
      if (this.btnCls) {
        this.btnCls = null;
      }
      this.hdrEle = null;
      this.cntEle = null;
      this.tbItems = null;
      this.tbItem = null;
      this.tbPop = null;
      this.prevItem = null;
      this.popEle = null;
      this.bdrLine = null;
      this.content = null;
      this.dragItem = null;
      this.cloneElement = null;
      this.draggingItems = [];
      if (this.draggableItems && this.draggableItems.length > 0) {
        for (var i = 0; i < this.draggableItems.length; i++) {
          this.draggableItems[i].destroy();
          this.draggableItems[i] = null;
        }
        this.draggableItems = [];
      }
      _super.prototype.destroy.call(this);
      this.trigger("destroyed");
    };
    Tab2.prototype.refresh = function() {
      if (this.isReact) {
        this.clearTemplate();
      }
      _super.prototype.refresh.call(this);
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.preRender = function() {
      var nested = closest(this.element, "." + CLS_CONTENT2);
      this.prevIndex = 0;
      this.isNested = false;
      this.isPopup = false;
      this.initRender = true;
      this.isSwipeed = false;
      this.itemIndexArray = [];
      this.templateEle = [];
      if (this.allowDragAndDrop) {
        this.dragArea = !isNullOrUndefined(this.dragArea) ? this.dragArea : "#" + this.element.id + " " + ("." + CLS_HEADER2);
      }
      if (!isNullOrUndefined(nested)) {
        nested.parentElement.classList.add(CLS_NEST2);
        this.isNested = true;
      }
      var name = Browser.info.name;
      var css = name === "msie" ? "e-ie" : name === "edge" ? "e-edge" : name === "safari" ? "e-safari" : "";
      setStyleAttribute(this.element, { "width": formatUnit(this.width), "height": formatUnit(this.height) });
      this.setCssClass(this.element, this.cssClass, true);
      attributes(this.element, { "aria-disabled": "false" });
      this.setCssClass(this.element, css, true);
      this.updatePopAnimationConfig();
    };
    Tab2.prototype.render = function() {
      this.btnCls = this.createElement("span", { className: CLS_ICONS + " " + CLS_ICON_CLOSE, attrs: { title: this.title } });
      this.tabId = this.element.id.length > 0 ? "-" + this.element.id : getRandomId();
      this.renderContainer();
      this.wireEvents();
      this.initRender = false;
    };
    Tab2.prototype.renderContainer = function() {
      var ele = this.element;
      this.items.forEach(function(item, index) {
        if (isNullOrUndefined(item.id) && !isNullOrUndefined(item.setProperties)) {
          item.setProperties({ id: TABITEMPREFIX + index.toString() }, true);
        }
      });
      if (this.items.length > 0 && ele.children.length === 0) {
        ele.appendChild(this.createElement("div", { className: CLS_CONTENT2 }));
        this.setOrientation(this.headerPlacement, this.createElement("div", { className: CLS_HEADER2 }));
        this.isTemplate = false;
      } else if (this.element.children.length > 0) {
        this.isTemplate = true;
        ele.classList.add(CLS_TEMPLATE2);
        var header = ele.querySelector("." + CLS_HEADER2);
        if (header && this.headerPlacement === "Bottom") {
          this.setOrientation(this.headerPlacement, header);
        }
      }
      if (!isNullOrUndefined(select("." + CLS_HEADER2, this.element)) && !isNullOrUndefined(select("." + CLS_CONTENT2, this.element))) {
        this.renderHeader();
        this.tbItems = select("." + CLS_HEADER2 + " ." + CLS_TB_ITEMS, this.element);
        if (!isNullOrUndefined(this.tbItems)) {
          rippleEffect(this.tbItems, { selector: ".e-tab-wrap" });
        }
        this.renderContent();
        if (selectAll("." + CLS_TB_ITEM, this.element).length > 0) {
          this.tbItems = select("." + CLS_HEADER2 + " ." + CLS_TB_ITEMS, this.element);
          this.bdrLine = this.createElement("div", { className: CLS_INDICATOR + " " + CLS_HIDDEN2 + " " + CLS_IGNORE });
          var scrCnt = select("." + this.scrCntClass, this.tbItems);
          if (!isNullOrUndefined(scrCnt)) {
            scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild);
          } else {
            this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild);
          }
          this.setContentHeight(true);
          this.select(this.selectedItem);
        }
        this.setRTL(this.enableRtl);
      }
    };
    Tab2.prototype.renderHeader = function() {
      var _this = this;
      var hdrPlace = this.headerPlacement;
      var tabItems = [];
      this.hdrEle = this.getTabHeader();
      this.addVerticalClass();
      if (!this.isTemplate) {
        tabItems = this.parseObject(this.items, 0);
      } else {
        if (this.element.children.length > 1 && this.element.children[1].classList.contains(CLS_HEADER2)) {
          this.setProperties({ headerPlacement: "Bottom" }, true);
        }
        var count = this.hdrEle.children.length;
        var hdrItems = [];
        for (var i = 0; i < count; i++) {
          hdrItems.push(this.hdrEle.children.item(i));
        }
        if (count > 0) {
          var tabItems_1 = this.createElement("div", { className: CLS_ITEMS2 });
          this.hdrEle.appendChild(tabItems_1);
          hdrItems.forEach(function(item, index) {
            _this.lastIndex = index;
            var attr = {
              className: CLS_ITEM3,
              id: CLS_ITEM3 + _this.tabId + "_" + index
            };
            var txt = _this.createElement("span", {
              className: CLS_TEXT,
              attrs: { "role": "presentation" }
            }).outerHTML;
            var cont = _this.createElement("div", {
              className: CLS_TEXT_WRAP,
              innerHTML: txt + _this.btnCls.outerHTML
            }).outerHTML;
            var wrap = _this.createElement("div", {
              className: CLS_WRAP,
              innerHTML: cont,
              attrs: { role: "tab", tabIndex: "-1", "aria-selected": "false", "aria-controls": CLS_CONTENT2 + _this.tabId + "_" + index, "aria-disabled": "false" }
            });
            wrap.querySelector("." + CLS_TEXT).appendChild(item);
            tabItems_1.appendChild(_this.createElement("div", attr));
            selectAll("." + CLS_ITEM3, tabItems_1)[index].appendChild(wrap);
          });
        }
      }
      this.tbObj = new Toolbar({
        width: hdrPlace === "Left" || hdrPlace === "Right" ? "auto" : "100%",
        height: hdrPlace === "Left" || hdrPlace === "Right" ? "100%" : "auto",
        overflowMode: this.overflowMode,
        items: tabItems.length !== 0 ? tabItems : [],
        clicked: this.clickHandler.bind(this),
        scrollStep: this.scrollStep,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        cssClass: this.cssClass
      });
      this.tbObj.isStringTemplate = true;
      this.tbObj.createElement = this.createElement;
      this.tbObj.appendTo(this.hdrEle);
      attributes(this.hdrEle, { role: "tablist" });
      if (!isNullOrUndefined(this.element.getAttribute("aria-label"))) {
        this.hdrEle.setAttribute("aria-label", this.element.getAttribute("aria-label"));
        this.element.removeAttribute("aria-label");
      } else if (!isNullOrUndefined(this.element.getAttribute("aria-labelledby"))) {
        this.hdrEle.setAttribute("aria-labelledby", this.element.getAttribute("aria-labelledby"));
        this.element.removeAttribute("aria-labelledby");
      }
      this.setCloseButton(this.showCloseButton);
      var toolbarHeader = this.tbObj.element.querySelector("." + CLS_TB_ITEMS);
      if (!isNullOrUndefined(toolbarHeader)) {
        if (isNullOrUndefined(toolbarHeader.id) || toolbarHeader.id === "") {
          toolbarHeader.id = this.element.id + "_tab_header_items";
        }
      }
    };
    Tab2.prototype.renderContent = function() {
      this.cntEle = select("." + CLS_CONTENT2, this.element);
      var hdrItem = selectAll("." + CLS_TB_ITEM, this.element);
      if (this.isTemplate) {
        this.cnt = this.cntEle.children.length > 0 ? this.cntEle.innerHTML : "";
        var contents = this.cntEle.children;
        for (var i = 0; i < hdrItem.length; i++) {
          if (contents.length - 1 >= i) {
            addClass([contents.item(i)], CLS_ITEM3);
            attributes(contents.item(i), { "role": "tabpanel", "aria-labelledby": CLS_ITEM3 + this.tabId + "_" + i });
            contents.item(i).id = CLS_CONTENT2 + this.tabId + "_" + i;
          }
        }
      }
    };
    Tab2.prototype.reRenderItems = function() {
      this.renderContainer();
      if (!isNullOrUndefined(this.cntEle)) {
        this.touchModule = new Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });
      }
    };
    Tab2.prototype.parseObject = function(items, index) {
      var _this = this;
      var tbItems = selectAll(".e-tab-header ." + CLS_TB_ITEM, this.element);
      var maxId = this.lastIndex;
      if (!this.isReplace && tbItems.length > 0) {
        var idList_1 = [];
        tbItems.forEach(function(item) {
          idList_1.push(_this.getIndexFromEle(item.id));
        });
        maxId = Math.max.apply(Math, idList_1);
      }
      var tItems = [];
      var txtWrapEle;
      var spliceArray = [];
      var i = 0;
      items.forEach(function(item, i2) {
        var pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? "" : item.header.iconPosition;
        var css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? "" : item.header.iconCss;
        if (isNullOrUndefined(item.headerTemplate) && (isNullOrUndefined(item.header) || isNullOrUndefined(item.header.text) || item.header.text.length === 0 && css === "")) {
          spliceArray.push(i2);
          return;
        }
        var txt = item.headerTemplate || item.header.text;
        if (typeof txt === "string" && _this.enableHtmlSanitizer) {
          txt = SanitizeHtmlHelper.sanitize(txt);
        }
        var itemIndex;
        if (_this.isReplace && !isNullOrUndefined(_this.tbId) && _this.tbId !== "") {
          itemIndex = parseInt(_this.tbId.substring(_this.tbId.lastIndexOf("_") + 1), 10);
          _this.tbId = "";
        } else {
          itemIndex = index + i2;
        }
        _this.lastIndex = tbItems.length === 0 ? i2 : _this.isReplace ? itemIndex : maxId + 1 + i2;
        var disabled = item.disabled ? " " + CLS_DISABLE5 + " " + CLS_OVERLAY3 : "";
        var hidden = item.visible === false ? " " + CLS_HIDDEN2 : "";
        txtWrapEle = _this.createElement("div", { className: CLS_TEXT, attrs: { "role": "presentation" } });
        var tHtml = txt instanceof Object ? txt.outerHTML : txt;
        var txtEmpty = !isNullOrUndefined(tHtml) && tHtml !== "";
        if (!isNullOrUndefined(txt.tagName)) {
          txtWrapEle.appendChild(txt);
        } else {
          _this.headerTextCompile(txtWrapEle, txt, i2);
        }
        var tEle;
        var icon = _this.createElement("span", {
          className: CLS_ICONS + " " + CLS_TAB_ICON + " " + CLS_ICON + "-" + pos + " " + css
        });
        var tCont = _this.createElement("div", { className: CLS_TEXT_WRAP });
        tCont.appendChild(txtWrapEle);
        if (txt !== "" && txt !== void 0 && css !== "") {
          if (pos === "left" || pos === "top") {
            tCont.insertBefore(icon, tCont.firstElementChild);
          } else {
            tCont.appendChild(icon);
          }
          tEle = txtWrapEle;
          _this.isIconAlone = false;
        } else {
          tEle = css === "" ? txtWrapEle : icon;
          if (tEle === icon) {
            detach(txtWrapEle);
            tCont.appendChild(icon);
            _this.isIconAlone = true;
          }
        }
        var tabIndex = isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString();
        var wrapAttrs = item.disabled ? {} : { tabIndex, "data-tabindex": tabIndex, role: "tab", "aria-selected": "false", "aria-disabled": "false" };
        tCont.appendChild(_this.btnCls.cloneNode(true));
        var wrap = _this.createElement("div", { className: CLS_WRAP, attrs: wrapAttrs });
        wrap.appendChild(tCont);
        if (_this.itemIndexArray === []) {
          _this.itemIndexArray.push(CLS_ITEM3 + _this.tabId + "_" + _this.lastIndex);
        } else {
          _this.itemIndexArray.splice(index + i2, 0, CLS_ITEM3 + _this.tabId + "_" + _this.lastIndex);
        }
        var attrObj = {
          id: CLS_ITEM3 + _this.tabId + "_" + _this.lastIndex,
          "data-id": item.id
        };
        var tItem = { htmlAttributes: attrObj, template: wrap };
        tItem.cssClass = (item.cssClass !== void 0 ? item.cssClass : " ") + " " + disabled + " " + hidden + " " + (css !== "" ? "e-i" + pos : "") + " " + (!txtEmpty ? CLS_ICON : "");
        if (pos === "top" || pos === "bottom") {
          _this.element.classList.add("e-vertical-icon");
        }
        tItems.push(tItem);
        i2++;
      });
      if (!this.isAdd) {
        spliceArray.forEach(function(spliceItemIndex) {
          _this.items.splice(spliceItemIndex, 1);
        });
      }
      if (this.isIconAlone) {
        this.element.classList.add(CLS_ICON_TAB);
      } else {
        this.element.classList.remove(CLS_ICON_TAB);
      }
      return tItems;
    };
    Tab2.prototype.removeActiveClass = function() {
      var tabHeader = this.getTabHeader();
      if (tabHeader) {
        var tabItems = selectAll("." + CLS_TB_ITEM + "." + CLS_ACTIVE2, tabHeader);
        [].slice.call(tabItems).forEach(function(node) {
          return node.classList.remove(CLS_ACTIVE2);
        });
        [].slice.call(tabItems).forEach(function(node) {
          return node.firstElementChild.setAttribute("aria-selected", "false");
        });
      }
    };
    Tab2.prototype.checkPopupOverflow = function(ele) {
      this.tbPop = select("." + CLS_TB_POP, this.element);
      var popIcon = select(".e-hor-nav", this.element);
      var tbrItems = select("." + CLS_TB_ITEMS, this.element);
      var lastChild = tbrItems.lastChild;
      var isOverflow = false;
      if (!this.isVertical() && (this.enableRtl && popIcon.offsetLeft + popIcon.offsetWidth > tbrItems.offsetLeft || !this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth)) {
        isOverflow = true;
      } else if (this.isVertical() && popIcon.offsetTop < lastChild.offsetTop + lastChild.offsetHeight) {
        isOverflow = true;
      }
      if (isOverflow) {
        ele.classList.add(CLS_TB_POPUP);
        this.tbPop.insertBefore(ele, selectAll("." + CLS_TB_POPUP, this.tbPop)[0]);
      }
      return true;
    };
    Tab2.prototype.popupHandler = function(target) {
      var ripEle = target.querySelector(".e-ripple-element");
      if (!isNullOrUndefined(ripEle)) {
        ripEle.outerHTML = "";
        target.querySelector("." + CLS_WRAP).classList.remove("e-ripple");
      }
      this.tbItem = selectAll("." + CLS_TB_ITEMS + " ." + CLS_TB_ITEM, this.hdrEle);
      var lastChild = this.tbItem[this.tbItem.length - 1];
      if (this.tbItem.length !== 0) {
        target.classList.remove(CLS_TB_POPUP);
        target.removeAttribute("style");
        this.tbItems.appendChild(target);
        this.actEleId = target.id;
        if (this.checkPopupOverflow(lastChild)) {
          var prevEle = this.tbItems.lastChild.previousElementSibling;
          this.checkPopupOverflow(prevEle);
        }
        this.isPopup = true;
      }
      return selectAll("." + CLS_TB_ITEM, this.tbItems).length - 1;
    };
    Tab2.prototype.setCloseButton = function(val) {
      var trg = select("." + CLS_HEADER2, this.element);
      if (val === true) {
        trg.classList.add(CLS_CLOSE_SHOW);
      } else {
        trg.classList.remove(CLS_CLOSE_SHOW);
      }
      this.tbObj.refreshOverflow();
      this.refreshActiveTabBorder();
    };
    Tab2.prototype.prevCtnAnimation = function(prev, current) {
      var animation;
      var checkRTL = this.enableRtl || this.element.classList.contains(CLS_RTL5);
      if (this.isPopup || prev <= current) {
        if (this.animation.previous.effect === "SlideLeftIn") {
          animation = {
            name: "SlideLeftOut",
            duration: this.animation.previous.duration,
            timingFunction: this.animation.previous.easing
          };
        } else {
          animation = null;
        }
      } else {
        if (this.animation.next.effect === "SlideRightIn") {
          animation = {
            name: "SlideRightOut",
            duration: this.animation.next.duration,
            timingFunction: this.animation.next.easing
          };
        } else {
          animation = null;
        }
      }
      return animation;
    };
    Tab2.prototype.triggerPrevAnimation = function(oldCnt, prevIndex) {
      var _this = this;
      var animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);
      if (!isNullOrUndefined(animateObj)) {
        animateObj.begin = function() {
          setStyleAttribute(oldCnt, { "position": "absolute" });
          oldCnt.classList.add(CLS_PROGRESS);
          oldCnt.classList.add("e-view");
        };
        animateObj.end = function() {
          oldCnt.style.display = "none";
          oldCnt.classList.remove(CLS_ACTIVE2);
          oldCnt.classList.remove(CLS_PROGRESS);
          oldCnt.classList.remove("e-view");
          setStyleAttribute(oldCnt, { "display": "", "position": "" });
          if (oldCnt.childNodes.length === 0 && !_this.isTemplate) {
            detach(oldCnt);
          }
        };
        new Animation(animateObj).animate(oldCnt);
      } else {
        oldCnt.classList.remove(CLS_ACTIVE2);
      }
    };
    Tab2.prototype.triggerAnimation = function(id, value) {
      var _this = this;
      var prevIndex = this.prevIndex;
      var oldCnt;
      var itemCollection = [].slice.call(this.element.querySelector("." + CLS_CONTENT2).children);
      itemCollection.forEach(function(item) {
        if (item.id === _this.prevActiveEle) {
          oldCnt = item;
        }
      });
      var prevEle = this.tbItem[prevIndex];
      var newCnt = this.getTrgContent(this.cntEle, this.extIndex(id));
      if (isNullOrUndefined(oldCnt) && !isNullOrUndefined(prevEle)) {
        var idNo = this.extIndex(prevEle.id);
        oldCnt = this.getTrgContent(this.cntEle, idNo);
      }
      if (!isNullOrUndefined(newCnt)) {
        this.prevActiveEle = newCnt.id;
      }
      var isPrevent = isNullOrUndefined(this.animation) || this.animation.next === {} || this.animation.previous === {} || isNullOrUndefined(this.animation.next.effect) || isNullOrUndefined(this.animation.previous.effect) || this.animation.previous.effect == "None" || this.animation.next.effect == "None";
      if (this.initRender || value === false || this.animation === {} || isPrevent) {
        if (oldCnt && oldCnt !== newCnt) {
          oldCnt.classList.remove(CLS_ACTIVE2);
        }
        return;
      }
      var cnt = select("." + CLS_CONTENT2, this.element);
      var animateObj;
      if (this.prevIndex > this.selectedItem && !this.isPopup) {
        var openEff = this.animation.previous.effect;
        animateObj = {
          name: openEff === "None" ? "" : openEff !== "SlideLeftIn" ? openEff : "SlideLeftIn",
          duration: this.animation.previous.duration,
          timingFunction: this.animation.previous.easing
        };
      } else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {
        var clsEff = this.animation.next.effect;
        animateObj = {
          name: clsEff === "None" ? "" : clsEff !== "SlideRightIn" ? clsEff : "SlideRightIn",
          duration: this.animation.next.duration,
          timingFunction: this.animation.next.easing
        };
      }
      animateObj.progress = function() {
        cnt.classList.add(CLS_PROGRESS);
        _this.setActiveBorder();
      };
      animateObj.end = function() {
        cnt.classList.remove(CLS_PROGRESS);
        newCnt.classList.add(CLS_ACTIVE2);
      };
      if (!this.initRender && !isNullOrUndefined(oldCnt)) {
        this.triggerPrevAnimation(oldCnt, prevIndex);
      }
      this.isPopup = false;
      if (animateObj.name === "") {
        newCnt.classList.add(CLS_ACTIVE2);
      } else {
        new Animation(animateObj).animate(newCnt);
      }
    };
    Tab2.prototype.keyPressed = function(trg) {
      var trgParent = closest(trg, "." + CLS_HEADER2 + " ." + CLS_TB_ITEM);
      var trgIndex = this.getEleIndex(trgParent);
      if (!isNullOrUndefined(this.popEle) && trg.classList.contains("e-hor-nav")) {
        this.popEle.classList.contains(CLS_POPUP_OPEN) ? this.popObj.hide(this.hide) : this.popObj.show(this.show);
      } else if (trg.classList.contains("e-scroll-nav")) {
        trg.click();
      } else {
        if (!isNullOrUndefined(trgParent) && trgParent.classList.contains(CLS_ACTIVE2) === false) {
          this.selectTab(trgIndex, null, true);
          if (!isNullOrUndefined(this.popEle)) {
            this.popObj.hide(this.hide);
          }
        }
      }
    };
    Tab2.prototype.getTabHeader = function() {
      if (isNullOrUndefined(this.element)) {
        return void 0;
      }
      var headers = [].slice.call(this.element.children).filter(function(e) {
        return e.classList.contains(CLS_HEADER2);
      });
      if (headers.length > 0) {
        return headers[0];
      } else {
        var wrap = [].slice.call(this.element.children).filter(function(e) {
          return !e.classList.contains(CLS_BLA_TEM);
        })[0];
        if (!wrap) {
          return void 0;
        }
        return [].slice.call(wrap.children).filter(function(e) {
          return e.classList.contains(CLS_HEADER2);
        })[0];
      }
    };
    Tab2.prototype.getEleIndex = function(item) {
      return Array.prototype.indexOf.call(selectAll("." + CLS_TB_ITEM, this.getTabHeader()), item);
    };
    Tab2.prototype.extIndex = function(id) {
      return id.replace(CLS_ITEM3 + this.tabId + "_", "");
    };
    Tab2.prototype.expTemplateContent = function() {
      var _this = this;
      this.templateEle.forEach(function(eleStr) {
        if (!isNullOrUndefined(_this.element.querySelector(eleStr))) {
          document.body.appendChild(_this.element.querySelector(eleStr)).style.display = "none";
        }
      });
    };
    Tab2.prototype.templateCompile = function(ele, cnt, index) {
      var tempEle = this.createElement("div");
      this.compileElement(tempEle, cnt, "content", index);
      if (tempEle.childNodes.length !== 0) {
        ele.appendChild(tempEle);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.compileElement = function(ele, val, prop, index) {
      var templateFn;
      if (typeof val === "string") {
        val = val.trim();
        if (this.isVue) {
          templateFn = compile(SanitizeHtmlHelper.sanitize(val));
        } else {
          ele.innerHTML = SanitizeHtmlHelper.sanitize(val);
        }
      } else {
        templateFn = compile(val);
      }
      var templateFUN;
      if (!isNullOrUndefined(templateFn)) {
        templateFUN = templateFn({}, this, prop);
      }
      if (!isNullOrUndefined(templateFn) && templateFUN.length > 0) {
        [].slice.call(templateFUN).forEach(function(el) {
          ele.appendChild(el);
        });
      }
    };
    Tab2.prototype.headerTextCompile = function(element2, text, index) {
      this.compileElement(element2, text, "headerTemplate", index);
    };
    Tab2.prototype.getContent = function(ele, cnt, callType, index) {
      var eleStr;
      cnt = isNullOrUndefined(cnt) ? "" : cnt;
      if (typeof cnt === "string" || isNullOrUndefined(cnt.innerHTML)) {
        if (typeof cnt === "string" && this.enableHtmlSanitizer) {
          cnt = SanitizeHtmlHelper.sanitize(cnt);
        }
        if (cnt[0] === "." || cnt[0] === "#") {
          if (document.querySelectorAll(cnt).length) {
            var eleVal = document.querySelector(cnt);
            eleStr = eleVal.outerHTML.trim();
            if (callType === "clone") {
              ele.appendChild(eleVal.cloneNode(true));
            } else {
              ele.appendChild(eleVal);
              eleVal.style.display = "";
            }
          } else {
            this.templateCompile(ele, cnt, index);
          }
        } else {
          this.templateCompile(ele, cnt, index);
        }
      } else {
        ele.appendChild(cnt);
      }
      if (!isNullOrUndefined(eleStr)) {
        if (this.templateEle.indexOf(cnt.toString()) === -1) {
          this.templateEle.push(cnt.toString());
        }
      }
    };
    Tab2.prototype.getTrgContent = function(cntEle, no) {
      var ele;
      if (this.element.classList.contains(CLS_NEST2)) {
        ele = select("." + CLS_NEST2 + "> ." + CLS_CONTENT2 + " > #" + CLS_CONTENT2 + this.tabId + "_" + no, this.element);
      } else {
        ele = this.findEle(cntEle.children, CLS_CONTENT2 + this.tabId + "_" + no);
      }
      return ele;
    };
    Tab2.prototype.findEle = function(items, key) {
      var ele;
      for (var i = 0; i < items.length; i++) {
        if (items[i].id === key) {
          ele = items[i];
          break;
        }
      }
      return ele;
    };
    Tab2.prototype.isVertical = function() {
      var isVertical = this.headerPlacement === "Left" || this.headerPlacement === "Right" ? true : false;
      this.scrCntClass = isVertical ? CLS_VSCRCNT : CLS_HSCRCNT;
      return isVertical;
    };
    Tab2.prototype.addVerticalClass = function() {
      if (this.isVertical()) {
        var tbPos = this.headerPlacement === "Left" ? CLS_VLEFT : CLS_VRIGHT;
        addClass([this.hdrEle], [CLS_VERTICAL2, tbPos]);
        if (!this.element.classList.contains(CLS_NEST2)) {
          addClass([this.element], [CLS_VTAB, tbPos]);
        } else {
          addClass([this.hdrEle], [CLS_VTAB, tbPos]);
        }
      }
      if (this.headerPlacement === "Bottom") {
        addClass([this.hdrEle], [CLS_HBOTTOM]);
      }
    };
    Tab2.prototype.updatePopAnimationConfig = function() {
      this.show = { name: this.isVertical() ? "FadeIn" : "SlideDown", duration: 100 };
      this.hide = { name: this.isVertical() ? "FadeOut" : "SlideUp", duration: 100 };
    };
    Tab2.prototype.changeOrientation = function(place) {
      this.setOrientation(place, this.hdrEle);
      var activeTab = this.hdrEle.querySelector("." + CLS_ACTIVE2);
      var isVertical = this.hdrEle.classList.contains(CLS_VERTICAL2) ? true : false;
      removeClass([this.element], [CLS_VTAB]);
      removeClass([this.hdrEle], [CLS_VERTICAL2, CLS_VLEFT, CLS_VRIGHT]);
      if (isVertical !== this.isVertical()) {
        this.changeToolbarOrientation();
        if (!isNullOrUndefined(activeTab) && activeTab.classList.contains(CLS_TB_POPUP)) {
          this.popupHandler(activeTab);
        }
      }
      this.addVerticalClass();
      this.setActiveBorder();
      this.focusItem();
    };
    Tab2.prototype.focusItem = function() {
      var curActItem = select(" #" + CLS_ITEM3 + this.tabId + "_" + this.selectedItem, this.hdrEle);
      if (!isNullOrUndefined(curActItem)) {
        curActItem.firstElementChild.focus();
      }
    };
    Tab2.prototype.changeToolbarOrientation = function() {
      this.tbObj.setProperties({ height: this.isVertical() ? "100%" : "auto", width: this.isVertical() ? "auto" : "100%" }, true);
      this.tbObj.changeOrientation();
      this.updatePopAnimationConfig();
    };
    Tab2.prototype.setOrientation = function(place, ele) {
      var headerPos = Array.prototype.indexOf.call(this.element.children, ele);
      var contentPos = Array.prototype.indexOf.call(this.element.children, this.element.querySelector("." + CLS_CONTENT2));
      if (place === "Bottom" && contentPos > headerPos) {
        this.element.appendChild(ele);
      } else {
        removeClass([ele], [CLS_HBOTTOM]);
        this.element.insertBefore(ele, select("." + CLS_CONTENT2, this.element));
      }
    };
    Tab2.prototype.setCssClass = function(ele, cls, val) {
      if (cls === "") {
        return;
      }
      var list = cls.split(" ");
      for (var i = 0; i < list.length; i++) {
        if (val) {
          ele.classList.add(list[i]);
        } else {
          ele.classList.remove(list[i]);
        }
      }
    };
    Tab2.prototype.setContentHeight = function(val) {
      if (this.element.classList.contains(CLS_FILL)) {
        removeClass([this.element], [CLS_FILL]);
      }
      if (isNullOrUndefined(this.cntEle)) {
        return;
      }
      var hdrEle = this.getTabHeader();
      if (this.heightAdjustMode === "None") {
        if (this.height === "auto") {
          return;
        } else {
          if (!this.isVertical()) {
            setStyleAttribute(this.cntEle, { "height": this.element.clientHeight - hdrEle.offsetHeight + "px" });
          }
        }
      } else if (this.heightAdjustMode === "Fill") {
        addClass([this.element], [CLS_FILL]);
        setStyleAttribute(this.element, { "height": "100%" });
        this.cntEle.style.height = "calc(100% - " + this.hdrEle.offsetHeight + "px)";
      } else if (this.heightAdjustMode === "Auto") {
        if (this.isTemplate === true) {
          var cnt = selectAll("." + CLS_CONTENT2 + " > ." + CLS_ITEM3, this.element);
          for (var i = 0; i < cnt.length; i++) {
            cnt[i].setAttribute("style", "display:block; visibility: visible");
            this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i]));
            cnt[i].style.removeProperty("display");
            cnt[i].style.removeProperty("visibility");
          }
        } else {
          this.cntEle = select("." + CLS_CONTENT2, this.element);
          if (val === true) {
            this.cntEle.appendChild(this.createElement("div", {
              id: CLS_CONTENT2 + this.tabId + "_0",
              className: CLS_ITEM3 + " " + CLS_ACTIVE2,
              attrs: { "role": "tabpanel", "aria-labelledby": CLS_ITEM3 + this.tabId + "_0" }
            }));
          }
          var ele = this.cntEle.children.item(0);
          for (var i = 0; i < this.items.length; i++) {
            this.getContent(ele, this.items[i].content, "clone", i);
            this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele));
            while (ele.firstChild) {
              ele.removeChild(ele.firstChild);
            }
          }
          if (this.isReact) {
            this.clearTemplate(["content"]);
          }
          this.templateEle = [];
          this.getContent(ele, this.items[0].content, "render", 0);
          if (this.prevIndex !== this.selectedItem) {
            ele.classList.remove(CLS_ACTIVE2);
          }
        }
        setStyleAttribute(this.cntEle, { "height": this.maxHeight + "px" });
      } else {
        setStyleAttribute(this.cntEle, { "height": "auto" });
      }
    };
    Tab2.prototype.getHeight = function(ele) {
      var cs = window.getComputedStyle(ele);
      return ele.offsetHeight + parseFloat(cs.getPropertyValue("padding-top")) + parseFloat(cs.getPropertyValue("padding-bottom")) + parseFloat(cs.getPropertyValue("margin-top")) + parseFloat(cs.getPropertyValue("margin-bottom"));
    };
    Tab2.prototype.setActiveBorder = function() {
      var trgHdrEle = this.getTabHeader();
      var trg = select("." + CLS_TB_ITEM + "." + CLS_ACTIVE2, trgHdrEle);
      if (isNullOrUndefined(trg)) {
        return;
      }
      if (!this.reorderActiveTab) {
        if (trg.classList.contains(CLS_TB_POPUP) && !this.bdrLine.classList.contains(CLS_HIDDEN2)) {
          this.bdrLine.classList.add(CLS_HIDDEN2);
        }
        if (trgHdrEle && !trgHdrEle.classList.contains(CLS_REORDER_ACTIVE_ITEM)) {
          trgHdrEle.classList.add(CLS_REORDER_ACTIVE_ITEM);
        }
      } else if (trgHdrEle) {
        trgHdrEle.classList.remove(CLS_REORDER_ACTIVE_ITEM);
      }
      var root = closest(trg, "." + CLS_TAB);
      if (this.element !== root) {
        return;
      }
      this.tbItems = select("." + CLS_TB_ITEMS, trgHdrEle);
      var bar = select("." + CLS_INDICATOR, trgHdrEle);
      var scrollCnt = select("." + CLS_TB_ITEMS + " ." + this.scrCntClass, trgHdrEle);
      if (this.isVertical()) {
        setStyleAttribute(bar, { "left": "", "right": "" });
        var tbHeight = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetHeight : scrollCnt.offsetHeight;
        if (tbHeight !== 0) {
          setStyleAttribute(bar, { "top": trg.offsetTop + "px", "height": trg.offsetHeight + "px" });
        } else {
          setStyleAttribute(bar, { "top": 0, "height": 0 });
        }
      } else {
        if (this.overflowMode === "MultiRow") {
          var top_1 = this.headerPlacement === "Bottom" ? trg.offsetTop : trg.offsetHeight + trg.offsetTop;
          setStyleAttribute(bar, { "top": top_1 + "px", "height": "" });
        } else {
          setStyleAttribute(bar, { "top": "", "height": "" });
        }
        var tbWidth = isNullOrUndefined(scrollCnt) ? this.tbItems.offsetWidth : scrollCnt.offsetWidth;
        if (tbWidth !== 0) {
          setStyleAttribute(bar, { "left": trg.offsetLeft + "px", "right": tbWidth - (trg.offsetLeft + trg.offsetWidth) + "px" });
        } else {
          setStyleAttribute(bar, { "left": "auto", "right": "auto" });
        }
      }
      if (!isNullOrUndefined(this.bdrLine) && !trg.classList.contains(CLS_TB_POPUP)) {
        this.bdrLine.classList.remove(CLS_HIDDEN2);
      }
    };
    Tab2.prototype.setActive = function(value, skipDataBind, isInteracted) {
      if (skipDataBind === void 0) {
        skipDataBind = false;
      }
      if (isInteracted === void 0) {
        isInteracted = false;
      }
      this.tbItem = selectAll("." + CLS_TB_ITEM, this.getTabHeader());
      var trg = this.tbItem[value];
      if (value < 0 || isNaN(value) || this.tbItem.length === 0) {
        return;
      }
      if (value >= 0 && !skipDataBind) {
        this.allowServerDataBinding = false;
        this.setProperties({ selectedItem: value }, true);
        this.allowServerDataBinding = true;
        if (!this.initRender) {
          this.serverDataBind();
        }
      }
      if (trg.classList.contains(CLS_ACTIVE2)) {
        this.setActiveBorder();
        return;
      }
      if (!this.isTemplate) {
        attributes(trg.firstElementChild, { "aria-controls": CLS_CONTENT2 + this.tabId + "_" + value });
      }
      var id = trg.id;
      this.removeActiveClass();
      trg.classList.add(CLS_ACTIVE2);
      trg.firstElementChild.setAttribute("aria-selected", "true");
      var no = Number(this.extIndex(id));
      if (isNullOrUndefined(this.prevActiveEle)) {
        this.prevActiveEle = CLS_CONTENT2 + this.tabId + "_" + no;
      }
      if (this.isTemplate) {
        if (select("." + CLS_CONTENT2, this.element).children.length > 0) {
          var trg_1 = this.findEle(select("." + CLS_CONTENT2, this.element).children, CLS_CONTENT2 + this.tabId + "_" + no);
          if (!isNullOrUndefined(trg_1)) {
            trg_1.classList.add(CLS_ACTIVE2);
          }
          this.triggerAnimation(id, this.enableAnimation);
        }
      } else {
        this.cntEle = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
        var item = this.getTrgContent(this.cntEle, this.extIndex(id));
        if (isNullOrUndefined(item)) {
          this.cntEle.appendChild(this.createElement("div", {
            id: CLS_CONTENT2 + this.tabId + "_" + this.extIndex(id),
            className: CLS_ITEM3 + " " + CLS_ACTIVE2,
            attrs: { role: "tabpanel", "aria-labelledby": CLS_ITEM3 + this.tabId + "_" + this.extIndex(id) }
          }));
          var eleTrg = this.getTrgContent(this.cntEle, this.extIndex(id));
          var itemIndex = Array.prototype.indexOf.call(this.itemIndexArray, id);
          this.getContent(eleTrg, this.items[itemIndex].content, "render", itemIndex);
        } else {
          item.classList.add(CLS_ACTIVE2);
        }
        this.triggerAnimation(id, this.enableAnimation);
      }
      this.setActiveBorder();
      this.refreshItemVisibility(trg);
      if (!this.initRender && !skipDataBind) {
        trg.firstElementChild.focus();
        var eventArg = {
          previousItem: this.prevItem,
          previousIndex: this.prevIndex,
          selectedItem: trg,
          selectedIndex: value,
          selectedContent: select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectingID, this.content),
          isSwiped: this.isSwipeed,
          isInteracted
        };
        this.trigger("selected", eventArg);
      }
    };
    Tab2.prototype.setItems = function(items) {
      this.isReplace = true;
      this.tbItems = select("." + CLS_TB_ITEMS, this.getTabHeader());
      this.tbObj.items = this.parseObject(items, 0);
      this.tbObj.dataBind();
      this.isReplace = false;
    };
    Tab2.prototype.setRTL = function(value) {
      this.tbObj.enableRtl = value;
      this.tbObj.dataBind();
      this.setCssClass(this.element, CLS_RTL5, value);
      this.refreshActiveBorder();
    };
    Tab2.prototype.refreshActiveBorder = function() {
      if (!isNullOrUndefined(this.bdrLine)) {
        this.bdrLine.classList.add(CLS_HIDDEN2);
      }
      this.setActiveBorder();
    };
    Tab2.prototype.showPopup = function(config) {
      var tbPop = select(".e-popup.e-toolbar-pop", this.hdrEle);
      if (tbPop.classList.contains("e-popup-close")) {
        var tbPopObj = tbPop && tbPop.ej2_instances[0];
        tbPopObj.position.X = this.headerPlacement === "Left" ? "left" : "right";
        tbPopObj.dataBind();
        tbPopObj.show(config);
      }
    };
    Tab2.prototype.bindDraggable = function() {
      var _this = this;
      if (this.allowDragAndDrop) {
        var tabHeader = this.element.querySelector("." + CLS_HEADER2);
        if (tabHeader) {
          var items = tabHeader.querySelectorAll("." + CLS_TB_ITEM);
          items.forEach(function(element2) {
            _this.initializeDrag(element2);
          });
        }
      }
    };
    Tab2.prototype.wireEvents = function() {
      this.bindDraggable();
      window.addEventListener("resize", this.resizeContext);
      EventHandler.add(this.element, "mouseover", this.hoverHandler, this);
      EventHandler.add(this.element, "keydown", this.spaceKeyDown, this);
      if (!isNullOrUndefined(this.cntEle)) {
        this.touchModule = new Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });
      }
      this.keyModule = new KeyboardEvents(this.element, { keyAction: this.keyHandler.bind(this), keyConfigs: this.keyConfigs });
      this.tabKeyModule = new KeyboardEvents(this.element, {
        keyAction: this.keyHandler.bind(this),
        keyConfigs: { openPopup: "shift+f10", tab: "tab", shiftTab: "shift+tab" },
        eventName: "keydown"
      });
    };
    Tab2.prototype.unWireEvents = function() {
      if (!isNullOrUndefined(this.keyModule)) {
        this.keyModule.destroy();
      }
      if (!isNullOrUndefined(this.tabKeyModule)) {
        this.tabKeyModule.destroy();
      }
      if (!isNullOrUndefined(this.cntEle) && !isNullOrUndefined(this.touchModule)) {
        this.touchModule.destroy();
        this.touchModule = null;
      }
      window.removeEventListener("resize", this.resizeContext);
      EventHandler.remove(this.element, "mouseover", this.hoverHandler);
      EventHandler.remove(this.element, "keydown", this.spaceKeyDown);
      this.element.classList.remove(CLS_RTL5);
      this.element.classList.remove(CLS_FOCUS);
    };
    Tab2.prototype.clickHandler = function(args) {
      this.element.classList.remove(CLS_FOCUS);
      var trg = args.originalEvent.target;
      var trgParent = closest(trg, "." + CLS_TB_ITEM);
      var trgIndex = this.getEleIndex(trgParent);
      if (trg.classList.contains(CLS_ICON_CLOSE)) {
        this.removeTab(trgIndex);
      } else if (this.isVertical() && closest(trg, "." + CLS_HOR_NAV)) {
        this.showPopup(this.show);
      } else {
        this.isPopup = false;
        if (!isNullOrUndefined(trgParent) && trgIndex !== this.selectedItem) {
          this.selectTab(trgIndex, args.originalEvent, true);
        }
      }
    };
    Tab2.prototype.swipeHandler = function(e) {
      if (e.velocity < 3 && isNullOrUndefined(e.originalEvent.changedTouches)) {
        return;
      }
      if (this.isNested) {
        this.element.setAttribute("data-swipe", "true");
      }
      var nestedTab = this.element.querySelector('[data-swipe="true"]');
      if (nestedTab) {
        nestedTab.removeAttribute("data-swipe");
        return;
      }
      this.isSwipeed = true;
      if (e.swipeDirection === "Right" && this.selectedItem !== 0) {
        for (var k = this.selectedItem - 1; k >= 0; k--) {
          if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
            this.selectTab(k, null, true);
            break;
          }
        }
      } else if (e.swipeDirection === "Left" && this.selectedItem !== selectAll("." + CLS_TB_ITEM, this.element).length - 1) {
        for (var i = this.selectedItem + 1; i < this.tbItem.length; i++) {
          if (!this.tbItem[i].classList.contains(CLS_HIDDEN2)) {
            this.selectTab(i, null, true);
            break;
          }
        }
      }
      this.isSwipeed = false;
    };
    Tab2.prototype.spaceKeyDown = function(e) {
      if (e.keyCode === 32 && e.which === 32 || e.keyCode === 35 && e.which === 35) {
        var clstHead = closest(e.target, "." + CLS_HEADER2);
        if (!isNullOrUndefined(clstHead)) {
          e.preventDefault();
        }
      }
    };
    Tab2.prototype.keyHandler = function(e) {
      if (this.element.classList.contains(CLS_DISABLE5)) {
        return;
      }
      this.element.classList.add(CLS_FOCUS);
      var trg = e.target;
      var tabHeader = this.getTabHeader();
      var actEle = select("." + CLS_ACTIVE2, tabHeader);
      this.popEle = select("." + CLS_TB_POP, tabHeader);
      if (!isNullOrUndefined(this.popEle)) {
        this.popObj = this.popEle.ej2_instances[0];
      }
      var item = closest(document.activeElement, "." + CLS_TB_ITEM);
      var trgParent = closest(trg, "." + CLS_TB_ITEM);
      switch (e.action) {
        case "space":
        case "enter":
          if (trg.parentElement.classList.contains(CLS_DISABLE5)) {
            return;
          }
          if (e.action === "enter" && trg.classList.contains("e-hor-nav")) {
            this.showPopup(this.show);
            break;
          }
          this.keyPressed(trg);
          break;
        case "tab":
        case "shiftTab":
          if (trg.classList.contains(CLS_WRAP) && closest(trg, "." + CLS_TB_ITEM).classList.contains(CLS_ACTIVE2) === false) {
            trg.setAttribute("tabindex", trg.getAttribute("data-tabindex"));
          }
          if (this.popObj && isVisible(this.popObj.element)) {
            this.popObj.hide(this.hide);
          }
          if (!isNullOrUndefined(actEle) && actEle.children.item(0).getAttribute("tabindex") === "-1") {
            actEle.children.item(0).setAttribute("tabindex", "0");
          }
          break;
        case "moveLeft":
        case "moveRight":
          if (!isNullOrUndefined(item)) {
            this.refreshItemVisibility(item);
          }
          break;
        case "openPopup":
          e.preventDefault();
          if (!isNullOrUndefined(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {
            this.popObj.show(this.show);
          }
          break;
        case "delete":
          if (this.showCloseButton === true && !isNullOrUndefined(trgParent)) {
            var nxtSib = trgParent.nextSibling;
            if (!isNullOrUndefined(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {
              nxtSib.firstElementChild.focus();
            }
            this.removeTab(this.getEleIndex(trgParent));
          }
          this.setActiveBorder();
          break;
      }
    };
    Tab2.prototype.refreshItemVisibility = function(target) {
      var scrCnt = select("." + this.scrCntClass, this.tbItems);
      if (!this.isVertical() && !isNullOrUndefined(scrCnt)) {
        var scrBar = select(".e-hscroll-bar", this.tbItems);
        scrBar.removeAttribute("tabindex");
        var scrStart = scrBar.scrollLeft;
        var scrEnd = scrStart + scrBar.offsetWidth;
        var eleStart = target.offsetLeft;
        var eleWidth = target.offsetWidth;
        var eleEnd = target.offsetLeft + target.offsetWidth;
        if (scrStart < eleStart && scrEnd < eleEnd) {
          var eleViewRange = scrEnd - eleStart;
          scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);
        } else {
          if (scrStart > eleStart && scrEnd > eleEnd) {
            var eleViewRange = eleEnd - scrStart;
            scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);
          }
        }
      } else {
        return;
      }
    };
    Tab2.prototype.getIndexFromEle = function(id) {
      return parseInt(id.substring(id.lastIndexOf("_") + 1), 10);
    };
    Tab2.prototype.hoverHandler = function(e) {
      var trg = e.target;
      if (!isNullOrUndefined(trg.classList) && trg.classList.contains(CLS_ICON_CLOSE)) {
        trg.setAttribute("title", new L10n("tab", { closeButtonTitle: this.title }, this.locale).getConstant("closeButtonTitle"));
      }
    };
    Tab2.prototype.evalOnPropertyChangeItems = function(newProp, oldProp) {
      if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
        var changedProp = Object.keys(newProp.items);
        for (var i = 0; i < changedProp.length; i++) {
          var index = parseInt(Object.keys(newProp.items)[i], 10);
          var properties = Object.keys(newProp.items[index]);
          for (var j = 0; j < properties.length; j++) {
            var oldVal = Object(oldProp.items[index])[properties[j]];
            var newVal = Object(newProp.items[index])[properties[j]];
            var hdr = this.element.querySelectorAll("." + CLS_TB_ITEM)[index];
            var itemIndex = void 0;
            if (hdr && !isNullOrUndefined(hdr.id) && hdr.id !== "") {
              itemIndex = this.getIndexFromEle(hdr.id);
            } else {
              itemIndex = index;
            }
            var hdrItem = select("." + CLS_TB_ITEMS + " #" + CLS_ITEM3 + this.tabId + "_" + itemIndex, this.element);
            var cntItem = select("." + CLS_CONTENT2 + " #" + CLS_CONTENT2 + this.tabId + "_" + itemIndex, this.element);
            if (properties[j] === "header" || properties[j] === "headerTemplate") {
              var icon = isNullOrUndefined(this.items[index].header) || isNullOrUndefined(this.items[index].header.iconCss) ? "" : this.items[index].header.iconCss;
              var textVal = this.items[index].headerTemplate || this.items[index].header.text;
              if (properties[j] === "headerTemplate") {
                this.clearTabTemplate(hdrItem, properties[j], CLS_TB_ITEM);
              }
              if (textVal === "" && icon === "") {
                this.removeTab(index);
              } else {
                this.tbId = hdr.id;
                var arr = [];
                arr.push(this.items[index]);
                this.items.splice(index, 1);
                this.itemIndexArray.splice(index, 1);
                this.tbObj.items.splice(index, 1);
                var isHiddenEle = hdrItem.classList.contains(CLS_HIDDEN2);
                detach(hdrItem);
                this.isReplace = true;
                this.addTab(arr, index);
                if (isHiddenEle) {
                  this.hideTab(index);
                }
                this.isReplace = false;
              }
            }
            if (properties[j] === "content" && !isNullOrUndefined(cntItem)) {
              var strVal = typeof newVal === "string" || isNullOrUndefined(newVal.innerHTML);
              if (strVal && (newVal[0] === "." || newVal[0] === "#") && newVal.length) {
                var eleVal = document.querySelector(newVal);
                cntItem.appendChild(eleVal);
                eleVal.style.display = "";
              } else if (newVal === "" && oldVal[0] === "#") {
                document.body.appendChild(this.element.querySelector(oldVal)).style.display = "none";
                cntItem.innerHTML = newVal;
              } else if (this.isAngular || this.isReact) {
                this.clearTabTemplate(cntItem, properties[j], CLS_ITEM3);
                cntItem.innerHTML = "";
                this.templateCompile(cntItem, newVal, index);
              } else if (typeof newVal !== "function") {
                cntItem.innerHTML = newVal;
              }
            }
            if (properties[j] === "cssClass") {
              if (!isNullOrUndefined(hdrItem)) {
                hdrItem.classList.remove(oldVal);
                hdrItem.classList.add(newVal);
              }
              if (!isNullOrUndefined(cntItem)) {
                cntItem.classList.remove(oldVal);
                cntItem.classList.add(newVal);
              }
            }
            if (properties[j] === "disabled") {
              this.enableTab(index, newVal === true ? false : true);
            }
            if (properties[j] === "visible") {
              this.hideTab(index, newVal === true ? false : true);
            }
          }
        }
      } else {
        this.lastIndex = 0;
        if (isNullOrUndefined(this.tbObj)) {
          this.reRenderItems();
        } else {
          if (this.isReact || this.isAngular) {
            this.clearTemplate();
          }
          this.setItems(newProp.items);
          if (this.templateEle.length > 0) {
            this.expTemplateContent();
          }
          this.templateEle = [];
          var selectElement = select("." + CLS_TAB + " > ." + CLS_CONTENT2, this.element);
          while (selectElement.firstElementChild) {
            detach(selectElement.firstElementChild);
          }
          this.select(this.selectedItem);
          this.draggableItems = [];
          this.bindDraggable();
        }
      }
    };
    Tab2.prototype.clearTabTemplate = function(templateEle, templateName, className) {
      if (this.registeredTemplate && this.registeredTemplate[templateName]) {
        var registeredTemplates = this.registeredTemplate;
        for (var index = 0; index < registeredTemplates[templateName].length; index++) {
          var registeredItem = registeredTemplates[templateName][index].rootNodes[0];
          var closestItem = closest(registeredItem, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], [registeredTemplates[templateName][index]]);
            break;
          }
        }
      } else if (this.portals && this.portals.length > 0) {
        var portals = this.portals;
        for (var index = 0; index < portals.length; index++) {
          var portalItem = portals[index];
          var closestItem = closest(portalItem.containerInfo, "." + className);
          if (!isNullOrUndefined(closestItem) && closestItem === templateEle) {
            this.clearTemplate([templateName], index);
            break;
          }
        }
      }
    };
    Tab2.prototype.initializeDrag = function(target) {
      var _this = this;
      var dragObj = new Draggable(target, {
        dragArea: this.dragArea,
        dragTarget: "." + CLS_TB_ITEM,
        clone: true,
        helper: this.helper.bind(this),
        dragStart: this.itemDragStart.bind(this),
        drag: function(e) {
          var dragIndex = _this.getEleIndex(_this.dragItem);
          var dropIndex;
          var dropItem;
          var dragArgs = {
            draggedItem: _this.dragItem,
            event: e.event,
            target: e.target,
            droppedItem: e.target.closest("." + CLS_TB_ITEM),
            clonedElement: _this.cloneElement,
            index: dragIndex
          };
          if (!isNullOrUndefined(e.target.closest("." + CLS_TAB)) && !e.target.closest("." + CLS_TAB).isEqualNode(_this.element) && _this.dragArea !== "." + CLS_HEADER2) {
            _this.trigger("dragging", dragArgs);
          } else {
            if (!e.target.closest(_this.dragArea) && _this.overflowMode !== "Popup") {
              document.body.style.cursor = "not-allowed";
              addClass([_this.cloneElement], CLS_HIDDEN2);
              if (_this.dragItem.classList.contains(CLS_HIDDEN2)) {
                removeClass([_this.dragItem], CLS_HIDDEN2);
              }
              _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "visible";
            } else {
              document.body.style.cursor = "";
              _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "hidden";
              if (_this.cloneElement.classList.contains(CLS_HIDDEN2)) {
                removeClass([_this.cloneElement], CLS_HIDDEN2);
              }
            }
            if (_this.overflowMode === "Scrollable" && !isNullOrUndefined(_this.element.querySelector(".e-hscroll"))) {
              var scrollRightNavEle = _this.element.querySelector(".e-scroll-right-nav");
              var scrollLeftNavEle = _this.element.querySelector(".e-scroll-left-nav");
              var hscrollBar = _this.element.querySelector(".e-hscroll-bar");
              if (!isNullOrUndefined(scrollRightNavEle) && Math.abs(scrollRightNavEle.offsetWidth / 2 + scrollRightNavEle.offsetLeft) > _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
                hscrollBar.scrollLeft -= 10;
              }
              if (!isNullOrUndefined(scrollLeftNavEle) && Math.abs(scrollLeftNavEle.offsetLeft + scrollLeftNavEle.offsetWidth - _this.cloneElement.offsetLeft) > scrollLeftNavEle.offsetWidth / 2) {
                hscrollBar.scrollLeft += 10;
              }
            }
            _this.cloneElement.style.pointerEvents = "none";
            dropItem = closest(e.target, "." + CLS_TB_ITEM + ".e-draggable");
            var scrollContentWidth = 0;
            if (_this.overflowMode === "Scrollable" && !isNullOrUndefined(_this.element.querySelector(".e-hscroll"))) {
              scrollContentWidth = _this.element.querySelector(".e-hscroll-content").offsetWidth;
            }
            if (dropItem != null && !dropItem.isSameNode(_this.dragItem) && dropItem.closest("." + CLS_TAB).isSameNode(_this.dragItem.closest("." + CLS_TAB))) {
              dropIndex = _this.getEleIndex(dropItem);
              if (dropIndex < dragIndex && Math.abs(dropItem.offsetLeft + dropItem.offsetWidth - _this.cloneElement.offsetLeft) > dropItem.offsetWidth / 2) {
                _this.dragAction(dropItem, dragIndex, dropIndex);
              }
              if (dropIndex > dragIndex && Math.abs(dropItem.offsetWidth / 2) + dropItem.offsetLeft - scrollContentWidth < _this.cloneElement.offsetLeft + _this.cloneElement.offsetWidth) {
                _this.dragAction(dropItem, dragIndex, dropIndex);
              }
            }
            _this.droppedIndex = _this.getEleIndex(_this.dragItem);
            _this.trigger("dragging", dragArgs);
          }
        },
        dragStop: this.itemDragStop.bind(this)
      });
      this.draggableItems.push(dragObj);
    };
    Tab2.prototype.helper = function(e) {
      this.cloneElement = this.createElement("div");
      if (e.element) {
        this.cloneElement = e.element.cloneNode(true);
        addClass([this.cloneElement], "e-tab-clone-element");
        if (this.element.querySelector("." + CLS_HEADER2).classList.contains(CLS_CLOSE_SHOW)) {
          addClass([this.cloneElement], CLS_CLOSE_SHOW);
        }
        removeClass([this.cloneElement.querySelector("." + CLS_WRAP)], "e-ripple");
        if (!isNullOrUndefined(this.cloneElement.querySelector(".e-ripple-element"))) {
          remove(this.cloneElement.querySelector(".e-ripple-element"));
        }
        document.body.appendChild(this.cloneElement);
      }
      return this.cloneElement;
    };
    Tab2.prototype.itemDragStart = function(e) {
      var _this = this;
      this.draggingItems = this.items.map(function(x) {
        return x;
      });
      this.dragItem = e.element;
      var dragArgs = {
        draggedItem: e.element,
        event: e.event,
        target: e.target,
        droppedItem: null,
        index: this.getEleIndex(this.dragItem),
        clonedElement: this.cloneElement,
        cancel: false
      };
      this.trigger("onDragStart", dragArgs, function(tabitemDragArgs) {
        if (tabitemDragArgs.cancel) {
          var dragObj = e.element.ej2_instances[0];
          if (!isNullOrUndefined(dragObj)) {
            dragObj.intDestroy(e.event);
          }
          detach(_this.cloneElement);
        } else {
          _this.removeActiveClass();
          addClass([_this.tbItems.querySelector("." + CLS_INDICATOR)], CLS_HIDDEN2);
          _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "hidden";
        }
      });
    };
    Tab2.prototype.dragAction = function(dropItem, dragsIndex, dropIndex) {
      if (this.items.length > 0) {
        var item = this.draggingItems[dragsIndex];
        this.draggingItems.splice(dragsIndex, 1);
        this.draggingItems.splice(dropIndex, 0, item);
      }
      if (this.overflowMode === "MultiRow") {
        dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);
      }
      if (dragsIndex > dropIndex) {
        if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {
          if (this.overflowMode === "Extended") {
            if (dropItem.isSameNode(dropItem.parentElement.lastChild)) {
              var popupContainer = this.dragItem.parentNode;
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
              popupContainer.insertBefore(dropItem.parentElement.lastChild, popupContainer.childNodes[0]);
            } else {
              this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
            }
          } else {
            var lastEle = dropItem.parentElement.lastChild;
            if (dropItem.isSameNode(lastEle)) {
              var popupContainer = this.dragItem.parentNode;
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
              popupContainer.insertBefore(lastEle, popupContainer.childNodes[0]);
            } else {
              this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
              dropItem.parentNode.insertBefore(this.dragItem, dropItem);
            }
          }
        } else {
          this.dragItem.parentNode.insertBefore(this.dragItem, dropItem);
        }
      }
      if (dragsIndex < dropIndex) {
        if (!this.dragItem.parentElement.isSameNode(dropItem.parentElement)) {
          if (this.overflowMode === "Extended") {
            this.dragItem.parentElement.appendChild(dropItem.parentElement.firstElementChild);
            dropItem.parentNode.insertBefore(this.dragItem, dropItem.nextSibling);
          } else {
            this.dragItem.parentNode.insertBefore(dropItem.parentElement.lastChild, this.dragItem.parentElement.childNodes[0]);
            dropItem.parentNode.insertBefore(this.dragItem, dropItem);
          }
        } else {
          this.dragItem.parentNode.insertBefore(this.dragItem, dropItem.nextElementSibling);
        }
      }
    };
    Tab2.prototype.itemDragStop = function(e) {
      var _this = this;
      detach(this.cloneElement);
      this.cloneElement = null;
      this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "visible";
      document.body.style.cursor = "";
      var dragStopArgs = {
        draggedItem: this.dragItem,
        event: e.event,
        target: e.target,
        droppedItem: this.tbItem[this.droppedIndex],
        clonedElement: null,
        index: this.droppedIndex,
        cancel: false
      };
      this.trigger("dragged", dragStopArgs, function(tabItemDropArgs) {
        if (tabItemDropArgs.cancel) {
          _this.refresh();
        } else {
          if (_this.items.length > 0 && _this.draggingItems.length > 0) {
            _this.items = _this.draggingItems;
            _this.selectedItem = _this.droppedIndex;
            _this.refresh();
          } else {
            _this.dragItem.querySelector("." + CLS_WRAP).style.visibility = "";
            removeClass([_this.tbItems.querySelector("." + CLS_INDICATOR)], CLS_HIDDEN2);
            _this.selectTab(_this.droppedIndex, null, true);
          }
        }
      });
      this.dragItem = null;
    };
    Tab2.prototype.enableTab = function(index, value) {
      var tbItems = selectAll("." + CLS_TB_ITEM, this.element)[index];
      if (isNullOrUndefined(tbItems)) {
        return;
      }
      if (value === true) {
        tbItems.classList.remove(CLS_DISABLE5, CLS_OVERLAY3);
        tbItems.firstElementChild.setAttribute("tabindex", tbItems.firstElementChild.getAttribute("data-tabindex"));
      } else {
        tbItems.classList.add(CLS_DISABLE5, CLS_OVERLAY3);
        tbItems.firstElementChild.removeAttribute("tabindex");
        if (tbItems.classList.contains(CLS_ACTIVE2)) {
          this.select(index + 1);
        }
      }
      if (!isNullOrUndefined(this.items[index])) {
        this.items[index].disabled = !value;
        this.dataBind();
      }
      tbItems.firstElementChild.setAttribute("aria-disabled", value === true ? "false" : "true");
    };
    Tab2.prototype.addTab = function(items, index) {
      var _this = this;
      var addArgs = { addedItems: items, cancel: false };
      if (!this.isReplace) {
        this.trigger("adding", addArgs, function(tabAddingArgs) {
          if (!tabAddingArgs.cancel) {
            _this.addingTabContent(items, index);
          }
        });
      } else {
        this.addingTabContent(items, index);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.addingTabContent = function(items, index) {
      var _this = this;
      var lastEleIndex = 0;
      this.hdrEle = select("." + CLS_HEADER2, this.element);
      if (isNullOrUndefined(this.hdrEle)) {
        this.items = items;
        this.reRenderItems();
        this.bindDraggable();
      } else {
        var itemsCount = selectAll(".e-tab-header ." + CLS_TB_ITEM, this.element).length;
        if (itemsCount !== 0) {
          lastEleIndex = this.lastIndex + 1;
        }
        if (isNullOrUndefined(index)) {
          index = itemsCount - 1;
        }
        if (itemsCount < index || index < 0 || isNaN(index)) {
          return;
        }
        if (itemsCount === 0 && !isNullOrUndefined(this.hdrEle)) {
          this.hdrEle.style.display = "";
        }
        if (!isNullOrUndefined(this.bdrLine)) {
          this.bdrLine.classList.add(CLS_HIDDEN2);
        }
        this.tbItems = select("." + CLS_TB_ITEMS, this.getTabHeader());
        this.isAdd = true;
        var tabItems_2 = this.parseObject(items, index);
        this.isAdd = false;
        var i_1 = 0;
        var textValue_1;
        items.forEach(function(item, place) {
          textValue_1 = item.headerTemplate || item.header.text;
          if (!(isNullOrUndefined(item.headerTemplate || item.header) || isNullOrUndefined(textValue_1) || textValue_1.length === 0 && !isNullOrUndefined(item.header) && isNullOrUndefined(item.header.iconCss))) {
            if (tabItems_2[place]) {
              if (isNullOrUndefined(item.id)) {
                item.id = CLS_ITEM3 + _this.tabId + "_" + TABITEMPREFIX + (lastEleIndex + place).toString();
              }
              tabItems_2[place].htmlAttributes["data-id"] = item.id;
            }
            _this.items.splice(index + i_1, 0, item);
            i_1++;
          }
          if (_this.isTemplate && !isNullOrUndefined(item.header) && !isNullOrUndefined(item.header.text)) {
            var no = lastEleIndex + place;
            var ele = _this.createElement("div", {
              id: CLS_CONTENT2 + _this.tabId + "_" + no,
              className: CLS_ITEM3,
              attrs: { role: "tabpanel", "aria-labelledby": CLS_ITEM3 + "_" + no }
            });
            _this.cntEle.insertBefore(ele, _this.cntEle.children[index + place]);
            var eleTrg = _this.getTrgContent(_this.cntEle, no.toString());
            _this.getContent(eleTrg, item.content, "render", index);
          }
        });
        this.tbObj.addItems(tabItems_2, index);
        if (!this.isReplace) {
          this.trigger("added", { addedItems: items });
        }
        if (this.selectedItem === index) {
          this.select(index);
        } else {
          this.setActiveBorder();
          this.tbItem = selectAll("." + CLS_TB_ITEM, this.getTabHeader());
        }
        this.bindDraggable();
      }
    };
    Tab2.prototype.removeTab = function(index) {
      var _this = this;
      var trg = selectAll("." + CLS_TB_ITEM, this.element)[index];
      if (isNullOrUndefined(trg)) {
        return;
      }
      var removeArgs = { removedItem: trg, removedIndex: index, cancel: false };
      this.trigger("removing", removeArgs, function(tabRemovingArgs) {
        if (!tabRemovingArgs.cancel) {
          var header = select("#" + CLS_ITEM3 + _this.tabId + "_" + _this.extIndex(trg.id), select("." + CLS_TB_ITEMS, _this.element));
          if (!isNullOrUndefined(header)) {
            _this.clearTabTemplate(header, "headerTemplate", CLS_TB_ITEM);
          }
          _this.tbObj.removeItems(index);
          if (_this.allowDragAndDrop && index !== Array.prototype.indexOf.call(_this.itemIndexArray, trg.id)) {
            index = Array.prototype.indexOf.call(_this.itemIndexArray, trg.id);
          }
          var targetEleIndex = _this.itemIndexArray.indexOf(trg.id);
          _this.items.splice(targetEleIndex, 1);
          _this.itemIndexArray.splice(targetEleIndex, 1);
          _this.refreshActiveBorder();
          var cntTrg = select("#" + CLS_CONTENT2 + _this.tabId + "_" + _this.extIndex(trg.id), select("." + CLS_CONTENT2, _this.element));
          if (!isNullOrUndefined(cntTrg)) {
            _this.clearTabTemplate(cntTrg, "content", CLS_ITEM3);
            detach(cntTrg);
          }
          _this.trigger("removed", tabRemovingArgs);
          if (_this.draggableItems && _this.draggableItems.length > 0) {
            _this.draggableItems[index].destroy();
            _this.draggableItems[index] = null;
            _this.draggableItems.splice(index, 1);
          }
          if (trg.classList.contains(CLS_ACTIVE2)) {
            index = index > selectAll("." + CLS_TB_ITEM + ":not(." + CLS_TB_POPUP + ")", _this.element).length - 1 ? index - 1 : index;
            _this.enableAnimation = false;
            _this.selectedItem = index;
            _this.select(index);
          } else if (index !== _this.selectedItem) {
            if (index < _this.selectedItem) {
              index = _this.itemIndexArray.indexOf(_this.tbItem[_this.selectedItem].id);
              _this.setProperties({ selectedItem: index > -1 ? index : _this.selectedItem }, true);
              _this.prevIndex = _this.selectedItem;
            }
            _this.tbItem = selectAll("." + CLS_TB_ITEM, _this.getTabHeader());
          }
          if (selectAll("." + CLS_TB_ITEM, _this.element).length === 0) {
            _this.hdrEle.style.display = "none";
          }
          _this.enableAnimation = true;
        }
      });
    };
    Tab2.prototype.hideTab = function(index, value) {
      var items;
      var item = selectAll("." + CLS_TB_ITEM, this.element)[index];
      if (isNullOrUndefined(item)) {
        return;
      }
      if (isNullOrUndefined(value)) {
        value = true;
      }
      this.bdrLine.classList.add(CLS_HIDDEN2);
      if (value === true) {
        item.classList.add(CLS_HIDDEN2);
        items = selectAll("." + CLS_TB_ITEM + ":not(." + CLS_HIDDEN2 + ")", this.tbItems);
        if (items.length !== 0 && item.classList.contains(CLS_ACTIVE2)) {
          if (index !== 0) {
            for (var i = index - 1; i >= 0; i--) {
              if (!this.tbItem[i].classList.contains(CLS_HIDDEN2)) {
                this.select(i);
                break;
              } else if (i === 0) {
                for (var k = index + 1; k < this.tbItem.length; k++) {
                  if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
                    this.select(k);
                    break;
                  }
                }
              }
            }
          } else {
            for (var k = index + 1; k < this.tbItem.length; k++) {
              if (!this.tbItem[k].classList.contains(CLS_HIDDEN2)) {
                this.select(k);
                break;
              }
            }
          }
        } else if (items.length === 0) {
          this.element.classList.add(CLS_HIDDEN2);
        }
      } else {
        this.element.classList.remove(CLS_HIDDEN2);
        items = selectAll("." + CLS_TB_ITEM + ":not(." + CLS_HIDDEN2 + ")", this.tbItems);
        item.classList.remove(CLS_HIDDEN2);
        if (items.length === 0) {
          this.select(index);
        }
      }
      this.setActiveBorder();
      item.setAttribute("aria-hidden", "" + value);
      if (this.overflowMode === "Popup" && this.tbObj) {
        this.tbObj.refreshOverflow();
      }
    };
    Tab2.prototype.selectTab = function(args, event, isInteracted) {
      if (event === void 0) {
        event = null;
      }
      if (isInteracted === void 0) {
        isInteracted = false;
      }
      this.isInteracted = isInteracted;
      this.select(args, event);
    };
    Tab2.prototype.select = function(args, event) {
      var _this = this;
      var tabHeader = this.getTabHeader();
      this.tbItems = select("." + CLS_TB_ITEMS, tabHeader);
      this.tbItem = selectAll("." + CLS_TB_ITEM, tabHeader);
      this.content = select("." + CLS_CONTENT2, this.element);
      this.prevItem = this.tbItem[this.prevIndex];
      if (isNullOrUndefined(this.selectedItem) || this.selectedItem < 0 || this.tbItem.length <= this.selectedItem || isNaN(this.selectedItem)) {
        this.selectedItem = 0;
      } else {
        this.selectedID = this.extIndex(this.tbItem[this.selectedItem].id);
      }
      var trg = this.tbItem[args];
      if (isNullOrUndefined(trg)) {
        this.selectedID = "0";
      } else {
        this.selectingID = this.extIndex(trg.id);
      }
      if (!isNullOrUndefined(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE5)) {
        this.prevItem.children.item(0).setAttribute("tabindex", this.prevItem.firstElementChild.getAttribute("tabindex"));
      }
      var eventArg = {
        event,
        previousItem: this.prevItem,
        previousIndex: this.prevIndex,
        selectedItem: this.tbItem[this.selectedItem],
        selectedIndex: this.selectedItem,
        selectedContent: !isNullOrUndefined(this.content) ? select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectedID, this.content) : null,
        selectingItem: trg,
        selectingIndex: args,
        selectingContent: !isNullOrUndefined(this.content) ? select("#" + CLS_CONTENT2 + this.tabId + "_" + this.selectingID, this.content) : null,
        isSwiped: this.isSwipeed,
        isInteracted: this.isInteracted,
        cancel: false
      };
      if (!this.initRender) {
        this.trigger("selecting", eventArg, function(selectArgs) {
          if (!selectArgs.cancel) {
            _this.selectingContent(args, _this.isInteracted);
          }
        });
      } else {
        this.selectingContent(args, this.isInteracted);
      }
      this.isInteracted = false;
    };
    Tab2.prototype.selectingContent = function(args, isInteracted) {
      if (typeof args === "number") {
        if (!isNullOrUndefined(this.tbItem[args]) && (this.tbItem[args].classList.contains(CLS_DISABLE5) || this.tbItem[args].classList.contains(CLS_HIDDEN2))) {
          for (var i = args + 1; i < this.items.length; i++) {
            if (this.items[i].disabled === false && this.items[i].visible === true) {
              args = i;
              break;
            } else {
              args = 0;
            }
          }
        }
        if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {
          this.prevIndex = this.selectedItem;
          this.prevItem = this.tbItem[this.prevIndex];
          if (this.tbItem[args].classList.contains(CLS_TB_POPUP) && this.reorderActiveTab) {
            this.setActive(this.popupHandler(this.tbItem[args]), null, isInteracted);
            if (!isNullOrUndefined(this.items) && this.items.length > 0 && this.allowDragAndDrop) {
              this.tbItem = selectAll("." + CLS_TB_ITEMS + " ." + CLS_TB_ITEM, this.hdrEle);
              var item = this.items[args];
              this.items.splice(args, 1);
              this.items.splice(this.tbItem.length - 1, 0, item);
              var itemId = this.itemIndexArray[args];
              this.itemIndexArray.splice(args, 1);
              this.itemIndexArray.splice(this.tbItem.length - 1, 0, itemId);
            }
          } else {
            this.setActive(args, null, isInteracted);
          }
        } else {
          this.setActive(0, null, isInteracted);
        }
      } else if (args instanceof HTMLElement) {
        this.setActive(this.getEleIndex(args), null, isInteracted);
      }
    };
    Tab2.prototype.getItemIndex = function(tabItemId) {
      var tabIndex;
      for (var i = 0; i < this.tbItem.length; i++) {
        var value = this.tbItem[i].getAttribute("data-id");
        if (tabItemId === value) {
          tabIndex = i;
          break;
        }
      }
      return tabIndex;
    };
    Tab2.prototype.disable = function(value) {
      this.setCssClass(this.element, CLS_DISABLE5, value);
      this.element.setAttribute("aria-disabled", "" + value);
    };
    Tab2.prototype.getPersistData = function() {
      return this.addOnPersist(["selectedItem", "actEleId"]);
    };
    Tab2.prototype.getModuleName = function() {
      return "tab";
    };
    Tab2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            setStyleAttribute(this.element, { width: formatUnit(newProp.width) });
            break;
          case "height":
            setStyleAttribute(this.element, { height: formatUnit(newProp.height) });
            this.setContentHeight(false);
            break;
          case "cssClass":
            var headerEle = this.element.querySelector("." + CLS_HEADER2);
            if (oldProp.cssClass !== "" && !isNullOrUndefined(oldProp.cssClass)) {
              this.setCssClass(this.element, oldProp.cssClass, false);
              this.setCssClass(this.element, newProp.cssClass, true);
              if (!isNullOrUndefined(headerEle)) {
                this.setCssClass(headerEle, oldProp.cssClass, false);
                this.setCssClass(headerEle, newProp.cssClass, true);
              }
            } else {
              this.setCssClass(this.element, newProp.cssClass, true);
              if (!isNullOrUndefined(headerEle)) {
                this.setCssClass(headerEle, newProp.cssClass, true);
              }
            }
            break;
          case "items":
            this.evalOnPropertyChangeItems(newProp, oldProp);
            break;
          case "showCloseButton":
            this.setCloseButton(newProp.showCloseButton);
            break;
          case "reorderActiveTab":
            this.refreshActiveTabBorder();
            break;
          case "selectedItem":
            this.selectedItem = oldProp.selectedItem;
            this.select(newProp.selectedItem);
            break;
          case "headerPlacement":
            this.changeOrientation(newProp.headerPlacement);
            break;
          case "enableRtl":
            this.setRTL(newProp.enableRtl);
            break;
          case "overflowMode":
            this.tbObj.overflowMode = newProp.overflowMode;
            this.tbObj.dataBind();
            this.refreshActiveTabBorder();
            break;
          case "heightAdjustMode":
            this.setContentHeight(false);
            this.select(this.selectedItem);
            break;
          case "scrollStep":
            if (this.tbObj) {
              this.tbObj.scrollStep = this.scrollStep;
            }
            break;
          case "allowDragAndDrop":
            this.bindDraggable();
            break;
          case "dragArea":
            if (this.allowDragAndDrop) {
              this.draggableItems.forEach(function(item) {
                item.dragArea = _this.dragArea;
              });
              this.refresh();
            }
            break;
        }
      }
    };
    Tab2.prototype.refreshActiveTab = function() {
      if (this.isReact && this.isTemplate) {
        this.clearTemplate();
      }
      if (!this.isTemplate) {
        if (this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2)) {
          detach(this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).children[0]);
          detach(this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).children[0]);
          var item = this.items[this.selectedItem];
          var pos = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconPosition) ? "" : item.header.iconPosition;
          var css = isNullOrUndefined(item.header) || isNullOrUndefined(item.header.iconCss) ? "" : item.header.iconCss;
          var text = item.headerTemplate || item.header.text;
          var txtWrap = this.createElement("div", { className: CLS_TEXT, attrs: { "role": "presentation" } });
          if (!isNullOrUndefined(text.tagName)) {
            txtWrap.appendChild(text);
          } else {
            this.headerTextCompile(txtWrap, text, this.selectedItem);
          }
          var tEle = void 0;
          var icon = this.createElement("span", {
            className: CLS_ICONS + " " + CLS_TAB_ICON + " " + CLS_ICON + "-" + pos + " " + css
          });
          var tConts = this.createElement("div", { className: CLS_TEXT_WRAP });
          tConts.appendChild(txtWrap);
          if (text !== "" && text !== void 0 && css !== "") {
            if (pos === "left" || pos === "top") {
              tConts.insertBefore(icon, tConts.firstElementChild);
            } else {
              tConts.appendChild(icon);
            }
            tEle = txtWrap;
            this.isIconAlone = false;
          } else {
            tEle = css === "" ? txtWrap : icon;
            if (tEle === icon) {
              detach(txtWrap);
              tConts.appendChild(icon);
              this.isIconAlone = true;
            }
          }
          var tabIndex = isNullOrUndefined(item.tabIndex) ? "-1" : item.tabIndex.toString();
          var wrapAtt = item.disabled ? {} : { tabIndex, "data-tabindex": tabIndex, role: "tab", "aria-selected": "true", "aria-disabled": "false" };
          tConts.appendChild(this.btnCls.cloneNode(true));
          var wraper = this.createElement("div", { className: CLS_WRAP, attrs: wrapAtt });
          wraper.appendChild(tConts);
          if (pos === "top" || pos === "bottom") {
            this.element.classList.add("e-vertical-icon");
          }
          this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).appendChild(wraper);
          var crElem = this.createElement("div");
          var cnt = item.content;
          var eleStr = void 0;
          if (typeof cnt === "string" || isNullOrUndefined(cnt.innerHTML)) {
            if (typeof cnt === "string" && this.enableHtmlSanitizer) {
              cnt = SanitizeHtmlHelper.sanitize(cnt);
            }
            if (cnt[0] === "." || cnt[0] === "#") {
              if (document.querySelectorAll(cnt).length) {
                var eleVal = document.querySelector(cnt);
                eleStr = eleVal.outerHTML.trim();
                crElem.appendChild(eleVal);
                eleVal.style.display = "";
              } else {
                this.compileElement(crElem, cnt, "content", this.selectedItem);
              }
            } else {
              this.compileElement(crElem, cnt, "content", this.selectedItem);
            }
          } else {
            crElem.appendChild(cnt);
          }
          if (!isNullOrUndefined(eleStr)) {
            if (this.templateEle.indexOf(cnt.toString()) === -1) {
              this.templateEle.push(cnt.toString());
            }
          }
          this.element.querySelector("." + CLS_ITEM3 + "." + CLS_ACTIVE2).appendChild(crElem);
        }
      } else {
        var tabItems = this.element.querySelector("." + CLS_TB_ITEMS);
        var element2 = this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2);
        var index = this.getIndexFromEle(element2.id);
        var header = element2.innerText;
        var detachContent = this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).children[0];
        var mainContents = detachContent.innerHTML;
        detach(element2);
        detach(detachContent);
        var attr = {
          className: CLS_TB_ITEM + " " + CLS_TEMPLATE2 + " " + CLS_ACTIVE2,
          id: CLS_ITEM3 + this.tabId + "_" + index
        };
        var txtString = this.createElement("span", {
          className: CLS_TEXT,
          innerHTML: header,
          attrs: { "role": "presentation" }
        }).outerHTML;
        var conte = this.createElement("div", {
          className: CLS_TEXT_WRAP,
          innerHTML: txtString + this.btnCls.outerHTML
        }).outerHTML;
        var tabIndex = element2.firstElementChild.getAttribute("data-tabindex");
        var wrap = this.createElement("div", {
          className: CLS_WRAP,
          innerHTML: conte,
          attrs: { tabIndex, "data-tabindex": tabIndex, role: "tab", "aria-controls": CLS_CONTENT2 + this.tabId + "_" + index, "aria-selected": "true", "aria-disabled": "false" }
        });
        tabItems.insertBefore(this.createElement("div", attr), tabItems.children[index + 1]);
        this.element.querySelector("." + CLS_TB_ITEM + "." + CLS_ACTIVE2).appendChild(wrap);
        var crElem = this.createElement("div", { innerHTML: mainContents });
        this.element.querySelector("." + CLS_CONTENT2).querySelector("." + CLS_ACTIVE2).appendChild(crElem);
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Tab2.prototype.refreshActiveTabBorder = function() {
      var activeEle = select("." + CLS_TB_ITEM + "." + CLS_TB_POPUP + "." + CLS_ACTIVE2, this.element);
      if (!isNullOrUndefined(activeEle) && this.reorderActiveTab) {
        this.select(this.getEleIndex(activeEle));
      }
      this.refreshActiveBorder();
    };
    __decorate26([
      Collection([], TabItem)
    ], Tab2.prototype, "items", void 0);
    __decorate26([
      Property("100%")
    ], Tab2.prototype, "width", void 0);
    __decorate26([
      Property("auto")
    ], Tab2.prototype, "height", void 0);
    __decorate26([
      Property("")
    ], Tab2.prototype, "cssClass", void 0);
    __decorate26([
      Property(0)
    ], Tab2.prototype, "selectedItem", void 0);
    __decorate26([
      Property("Top")
    ], Tab2.prototype, "headerPlacement", void 0);
    __decorate26([
      Property("Content")
    ], Tab2.prototype, "heightAdjustMode", void 0);
    __decorate26([
      Property("Scrollable")
    ], Tab2.prototype, "overflowMode", void 0);
    __decorate26([
      Property("Dynamic")
    ], Tab2.prototype, "loadOn", void 0);
    __decorate26([
      Property(false)
    ], Tab2.prototype, "enablePersistence", void 0);
    __decorate26([
      Property(false)
    ], Tab2.prototype, "enableHtmlSanitizer", void 0);
    __decorate26([
      Property(false)
    ], Tab2.prototype, "showCloseButton", void 0);
    __decorate26([
      Property(true)
    ], Tab2.prototype, "reorderActiveTab", void 0);
    __decorate26([
      Property()
    ], Tab2.prototype, "scrollStep", void 0);
    __decorate26([
      Property()
    ], Tab2.prototype, "dragArea", void 0);
    __decorate26([
      Property(false)
    ], Tab2.prototype, "allowDragAndDrop", void 0);
    __decorate26([
      Complex({}, TabAnimationSettings)
    ], Tab2.prototype, "animation", void 0);
    __decorate26([
      Event()
    ], Tab2.prototype, "created", void 0);
    __decorate26([
      Event()
    ], Tab2.prototype, "adding", void 0);
    __decorate26([
      Event()
    ], Tab2.prototype, "added", void 0);
    __decorate26([
      Event()
    ], Tab2.prototype, "selecting", void 0);
    __decorate26([
      Event()
    ], Tab2.prototype, "selected", void 0);
    __decorate26([
      Event()
    ], Tab2.prototype, "removing", void 0);
    __decorate26([
      Event()
    ], Tab2.prototype, "removed", void 0);
    __decorate26([
      Event()
    ], Tab2.prototype, "onDragStart", void 0);
    __decorate26([
      Event()
    ], Tab2.prototype, "dragging", void 0);
    __decorate26([
      Event()
    ], Tab2.prototype, "dragged", void 0);
    __decorate26([
      Event()
    ], Tab2.prototype, "destroyed", void 0);
    Tab2 = __decorate26([
      NotifyPropertyChanges
    ], Tab2);
    return Tab2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js
var __extends30 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate27 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT3 = "e-treeview";
var CONTROL = "e-control";
var COLLAPSIBLE = "e-icon-collapsible";
var EXPANDABLE = "e-icon-expandable";
var LISTITEM = "e-list-item";
var LISTTEXT = "e-list-text";
var LISTWRAP = "e-text-wrap";
var IELISTWRAP = "e-ie-wrap";
var PARENTITEM = "e-list-parent";
var HOVER = "e-hover";
var ACTIVE2 = "e-active";
var LOAD = "e-icons-spinner";
var PROCESS = "e-process";
var ICON3 = "e-icons";
var TEXTWRAP = "e-text-content";
var INPUT = "e-input";
var INPUTGROUP = "e-input-group";
var TREEINPUT = "e-tree-input";
var EDITING = "e-editing";
var RTL7 = "e-rtl";
var INTERACTION = "e-interaction";
var DRAGITEM = "e-drag-item";
var DROPPABLE = "e-droppable";
var DRAGGING = "e-dragging";
var SIBLING = "e-sibling";
var DROPIN = "e-drop-in";
var DROPNEXT = "e-drop-next";
var DROPOUT = "e-drop-out";
var NODROP = "e-no-drop";
var FULLROWWRAP = "e-fullrow-wrap";
var FULLROW = "e-fullrow";
var SELECTED2 = "e-selected";
var EXPANDED = "e-expanded";
var NODECOLLAPSED = "e-node-collapsed";
var DISABLE = "e-disable";
var DROPCOUNT = "e-drop-count";
var CHECK2 = "e-check";
var INDETERMINATE2 = "e-stop";
var CHECKBOXWRAP = "e-checkbox-wrapper";
var CHECKBOXFRAME = "e-frame";
var CHECKBOXRIPPLE = "e-ripple-container";
var RIPPLE4 = "e-ripple";
var RIPPLEELMENT = "e-ripple-element";
var FOCUS = "e-node-focus";
var IMAGE = "e-list-img";
var BIGGER = "e-bigger";
var SMALL = "e-small";
var CHILD = "e-has-child";
var ITEM_ANIMATION_ACTIVE = "e-animation-active";
var DISABLED5 = "e-disabled";
var PREVENTSELECT = "e-prevent";
var treeAriaAttr = {
  treeRole: "group",
  itemRole: "treeitem",
  listRole: "group",
  itemText: "",
  wrapperRole: ""
};
var FieldsSettings = (
  /** @class */
  function(_super) {
    __extends30(FieldsSettings2, _super);
    function FieldsSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate27([
      Property("child")
    ], FieldsSettings2.prototype, "child", void 0);
    __decorate27([
      Property([])
    ], FieldsSettings2.prototype, "dataSource", void 0);
    __decorate27([
      Property("expanded")
    ], FieldsSettings2.prototype, "expanded", void 0);
    __decorate27([
      Property("hasChildren")
    ], FieldsSettings2.prototype, "hasChildren", void 0);
    __decorate27([
      Property("htmlAttributes")
    ], FieldsSettings2.prototype, "htmlAttributes", void 0);
    __decorate27([
      Property("iconCss")
    ], FieldsSettings2.prototype, "iconCss", void 0);
    __decorate27([
      Property("id")
    ], FieldsSettings2.prototype, "id", void 0);
    __decorate27([
      Property("imageUrl")
    ], FieldsSettings2.prototype, "imageUrl", void 0);
    __decorate27([
      Property("isChecked")
    ], FieldsSettings2.prototype, "isChecked", void 0);
    __decorate27([
      Property("parentID")
    ], FieldsSettings2.prototype, "parentID", void 0);
    __decorate27([
      Property(null)
    ], FieldsSettings2.prototype, "query", void 0);
    __decorate27([
      Property("selectable")
    ], FieldsSettings2.prototype, "selectable", void 0);
    __decorate27([
      Property("selected")
    ], FieldsSettings2.prototype, "selected", void 0);
    __decorate27([
      Property(null)
    ], FieldsSettings2.prototype, "tableName", void 0);
    __decorate27([
      Property("text")
    ], FieldsSettings2.prototype, "text", void 0);
    __decorate27([
      Property("tooltip")
    ], FieldsSettings2.prototype, "tooltip", void 0);
    __decorate27([
      Property("navigateUrl")
    ], FieldsSettings2.prototype, "navigateUrl", void 0);
    return FieldsSettings2;
  }(ChildProperty)
);
var ActionSettings = (
  /** @class */
  function(_super) {
    __extends30(ActionSettings2, _super);
    function ActionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate27([
      Property("SlideDown")
    ], ActionSettings2.prototype, "effect", void 0);
    __decorate27([
      Property(400)
    ], ActionSettings2.prototype, "duration", void 0);
    __decorate27([
      Property("linear")
    ], ActionSettings2.prototype, "easing", void 0);
    return ActionSettings2;
  }(ChildProperty)
);
var NodeAnimationSettings = (
  /** @class */
  function(_super) {
    __extends30(NodeAnimationSettings2, _super);
    function NodeAnimationSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate27([
      Complex({ effect: "SlideUp", duration: 400, easing: "linear" }, ActionSettings)
    ], NodeAnimationSettings2.prototype, "collapse", void 0);
    __decorate27([
      Complex({ effect: "SlideDown", duration: 400, easing: "linear" }, ActionSettings)
    ], NodeAnimationSettings2.prototype, "expand", void 0);
    return NodeAnimationSettings2;
  }(ChildProperty)
);
var TreeView = (
  /** @class */
  function(_super) {
    __extends30(TreeView2, _super);
    function TreeView2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isRefreshed = false;
      _this.preventExpand = false;
      _this.checkedElement = [];
      _this.disableNode = [];
      _this.validArr = [];
      _this.validNodes = [];
      _this.expandChildren = [];
      _this.isFieldChange = false;
      _this.changeDataSource = false;
      _this.hasTemplate = false;
      _this.isFirstRender = false;
      _this.isNodeDropped = false;
      _this.isInteracted = false;
      _this.isRightClick = false;
      _this.mouseDownStatus = false;
      return _this;
    }
    TreeView_1 = TreeView2;
    TreeView2.prototype.getModuleName = function() {
      return "treeview";
    };
    TreeView2.prototype.preRender = function() {
      var _this = this;
      this.checkActionNodes = [];
      this.parentNodeCheck = [];
      this.dragStartAction = false;
      this.isAnimate = false;
      this.keyConfigs = {
        escape: "escape",
        end: "end",
        enter: "enter",
        f2: "f2",
        home: "home",
        moveDown: "downarrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        ctrlDown: "ctrl+downarrow",
        ctrlUp: "ctrl+uparrow",
        ctrlEnter: "ctrl+enter",
        ctrlHome: "ctrl+home",
        ctrlEnd: "ctrl+end",
        ctrlA: "ctrl+A",
        shiftDown: "shift+downarrow",
        shiftUp: "shift+uparrow",
        shiftEnter: "shift+enter",
        shiftHome: "shift+home",
        shiftEnd: "shift+end",
        csDown: "ctrl+shift+downarrow",
        csUp: "ctrl+shift+uparrow",
        csEnter: "ctrl+shift+enter",
        csHome: "ctrl+shift+home",
        csEnd: "ctrl+shift+end",
        space: "space",
        shiftSpace: "shift+space",
        ctrlSpace: "ctrl+space"
      };
      this.listBaseOption = {
        expandCollapse: true,
        showIcon: true,
        expandIconClass: EXPANDABLE,
        ariaAttributes: treeAriaAttr,
        expandIconPosition: "Left",
        itemCreated: function(e) {
          _this.beforeNodeCreate(e);
        },
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        itemNavigable: this.fullRowNavigable
      };
      this.updateListProp(this.fields);
      this.aniObj = new Animation({});
      this.treeList = [];
      this.isLoaded = false;
      this.isInitalExpand = false;
      this.expandChildren = [];
      this.index = 0;
      this.setTouchClass();
      if (isNullOrUndefined(this.selectedNodes)) {
        this.setProperties({ selectedNodes: [] }, true);
      }
      if (isNullOrUndefined(this.checkedNodes)) {
        this.setProperties({ checkedNodes: [] }, true);
      }
      if (isNullOrUndefined(this.expandedNodes)) {
        this.setProperties({ expandedNodes: [] }, true);
      } else {
        this.isInitalExpand = true;
      }
    };
    TreeView2.prototype.getPersistData = function() {
      var keyEntity = ["selectedNodes", "checkedNodes", "expandedNodes"];
      return this.addOnPersist(keyEntity);
    };
    TreeView2.prototype.render = function() {
      this.initialRender = true;
      this.initialize();
      this.setDataBinding(false);
      this.setDisabledMode();
      this.setExpandOnType();
      if (!this.disabled) {
        this.setRipple();
      }
      this.wireEditingEvents(this.allowEditing);
      this.setDragAndDrop(this.allowDragAndDrop);
      if (!this.disabled) {
        this.wireEvents();
      }
      this.initialRender = false;
      this.renderComplete();
    };
    TreeView2.prototype.initialize = function() {
      this.element.setAttribute("role", "tree");
      this.element.setAttribute("aria-activedescendant", this.element.id + "_active");
      this.setCssClass(null, this.cssClass);
      this.setEnableRtl();
      this.setFullRow(this.fullRowSelect);
      this.setTextWrap();
      this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
    };
    TreeView2.prototype.setDisabledMode = function() {
      if (this.disabled) {
        this.element.classList.add(DISABLED5);
      } else {
        this.element.classList.remove(DISABLED5);
      }
    };
    TreeView2.prototype.setEnableRtl = function() {
      (this.enableRtl ? addClass : removeClass)([this.element], RTL7);
    };
    TreeView2.prototype.setRipple = function() {
      var tempStr = "." + FULLROW + ",." + TEXTWRAP;
      var rippleModel = {
        selector: tempStr,
        ignore: "." + TEXTWRAP + " > ." + ICON3 + ",." + INPUTGROUP + ",." + INPUT + ", ." + CHECKBOXWRAP
      };
      this.rippleFn = rippleEffect(this.element, rippleModel);
      var iconModel = {
        selector: "." + TEXTWRAP + " > ." + ICON3,
        isCenterRipple: true
      };
      this.rippleIconFn = rippleEffect(this.element, iconModel);
    };
    TreeView2.prototype.setFullRow = function(isEnabled) {
      (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);
    };
    TreeView2.prototype.setMultiSelect = function(isEnabled) {
      var firstUl = select("." + PARENTITEM, this.element);
      if (isEnabled) {
        firstUl.setAttribute("aria-multiselectable", "true");
      } else {
        firstUl.removeAttribute("aria-multiselectable");
      }
    };
    TreeView2.prototype.templateComplier = function(template) {
      if (template) {
        this.hasTemplate = true;
        var e = void 0;
        this.element.classList.add(INTERACTION);
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (e2) {
          return compile(template);
        }
      }
      this.element.classList.remove(INTERACTION);
      return void 0;
    };
    TreeView2.prototype.setDataBinding = function(changeDataSource) {
      var _this = this;
      this.treeList.push("false");
      if (this.fields.dataSource instanceof DataManager) {
        this.isOffline = this.fields.dataSource.dataSource.offline;
        if (this.fields.dataSource.ready) {
          this.fields.dataSource.ready.then(function(e) {
            _this.isOffline = _this.fields.dataSource.dataSource.offline;
            if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {
              _this.treeList.pop();
              _this.treeData = e.result;
              _this.isNumberTypeId = _this.getType();
              _this.setRootData();
              _this.renderItems(true);
              if (_this.treeList.length === 0 && !_this.isLoaded) {
                _this.finalize();
              }
            }
          }).catch(function(e) {
            _this.trigger("actionFailure", { error: e });
          });
        } else {
          this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function(e) {
            _this.treeList.pop();
            _this.treeData = e.result;
            _this.isNumberTypeId = _this.getType();
            _this.setRootData();
            if (changeDataSource) {
              _this.changeDataSource = true;
            }
            _this.renderItems(true);
            _this.changeDataSource = false;
            if (_this.treeList.length === 0 && !_this.isLoaded) {
              _this.finalize();
            }
          }).catch(function(e) {
            _this.trigger("actionFailure", { error: e });
          });
        }
      } else {
        this.treeList.pop();
        if (isNullOrUndefined(this.fields.dataSource)) {
          this.rootData = this.treeData = [];
        } else {
          this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));
          this.setRootData();
        }
        this.isNumberTypeId = this.getType();
        this.renderItems(false);
      }
      if (this.treeList.length === 0 && !this.isLoaded) {
        this.finalize();
      }
    };
    TreeView2.prototype.getQuery = function(mapper, value) {
      if (value === void 0) {
        value = null;
      }
      var columns = [];
      var query;
      if (!mapper.query) {
        query = new Query();
        var prop = this.getActualProperties(mapper);
        for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {
          var col = _a[_i];
          if (col !== "dataSource" && col !== "tableName" && col !== "child" && !!mapper[col] && col !== "url" && columns.indexOf(mapper[col]) === -1) {
            columns.push(mapper[col]);
          }
        }
        query.select(columns);
        if (prop.hasOwnProperty("tableName")) {
          query.from(mapper.tableName);
        }
      } else {
        query = mapper.query.clone();
      }
      ListBase.addSorting(this.sortOrder, mapper.text, query);
      if (!isNullOrUndefined(value) && !isNullOrUndefined(mapper.parentID)) {
        query.where(mapper.parentID, "equal", this.isNumberTypeId ? parseFloat(value) : value);
      }
      return query;
    };
    TreeView2.prototype.getType = function() {
      return this.treeData[0] ? typeof getValue(this.fields.id, this.treeData[0]) === "number" ? true : false : false;
    };
    TreeView2.prototype.setRootData = function() {
      this.dataType = this.getDataType(this.treeData, this.fields);
      if (this.dataType === 1) {
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
        var rootItems = this.getChildNodes(this.treeData, void 0, true);
        if (isNullOrUndefined(rootItems)) {
          this.rootData = [];
        } else {
          this.rootData = rootItems;
        }
      } else {
        this.rootData = this.treeData;
      }
    };
    TreeView2.prototype.renderItems = function(isSorted) {
      this.listBaseOption.ariaAttributes.level = 1;
      var sortedData = this.getSortedData(this.rootData);
      this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);
      this.element.appendChild(this.ulElement);
      var rootNodes = this.ulElement.querySelectorAll(".e-list-item");
      if (this.loadOnDemand === false) {
        var i = 0;
        while (i < rootNodes.length) {
          this.renderChildNodes(rootNodes[i], true, null, true);
          i++;
        }
      }
      var parentEle = selectAll("." + PARENTITEM, this.element);
      if (parentEle.length === 1 && (rootNodes && rootNodes.length !== 0) || this.loadOnDemand) {
        this.finalizeNode(this.element);
      }
      this.parentNodeCheck = [];
      this.parentCheckData = [];
      this.updateCheckedStateFromDS();
      if (this.autoCheck && this.showCheckBox && !this.isLoaded) {
        this.updateParentCheckState();
      }
    };
    TreeView2.prototype.updateCheckedStateFromDS = function(id) {
      this.validNodes = [];
      if (this.treeData && this.showCheckBox) {
        if (this.dataType === 1) {
          var mapper = this.fields;
          var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, "equal", true, false));
          for (var i = 0; i < resultData.length; i++) {
            var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;
            var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;
            if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {
              this.checkedNodes.push(resultId);
            }
            if (resultData[i][this.fields.hasChildren]) {
              var id_1 = resultData[i][this.fields.id];
              var childData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, "equal", id_1, false));
              for (var child = 0; child < childData.length; child++) {
                var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;
                if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {
                  this.checkedNodes.push(childId);
                }
              }
            }
          }
          for (var i = 0; i < this.checkedNodes.length; i++) {
            var mapper_1 = this.fields;
            var checkState = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.id, "equal", this.checkedNodes[i], true));
            if (checkState[0] && this.autoCheck) {
              this.getCheckedNodeDetails(mapper_1, checkState);
              this.checkIndeterminateState(checkState[0]);
            }
            if (checkState.length > 0) {
              var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {
                this.validNodes.push(checkedId);
              }
            }
            var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.parentID, "equal", this.checkedNodes[i], true));
            for (var index = 0; index < checkedData.length; index++) {
              var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {
                this.checkedNodes.push(checkedId);
              }
              if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {
                this.validNodes.push(checkedId);
              }
            }
          }
        } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {
          for (var index = 0; index < this.treeData.length; index++) {
            var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : "";
            if (this.treeData[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {
              this.checkedNodes.push(fieldId);
            }
            if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {
              this.validNodes.push(fieldId);
            }
            var childItems = getValue(this.fields.child.toString(), this.treeData[index]);
            if (childItems) {
              this.updateChildCheckState(childItems, this.treeData[index]);
            }
          }
          this.validNodes = this.enablePersistence ? this.checkedNodes : this.validNodes;
        }
        this.setProperties({ checkedNodes: this.validNodes }, true);
      }
    };
    TreeView2.prototype.getCheckedNodeDetails = function(mapper, checkNodes) {
      var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;
      var count = 0;
      var element2 = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.id] + '"]');
      var parentEle = this.element.querySelector('[data-uid="' + checkNodes[0][this.fields.parentID] + '"]');
      if (!element2 && !parentEle) {
        var len = this.parentNodeCheck.length;
        if (this.parentNodeCheck.indexOf(id) === -1) {
          this.parentNodeCheck.push(id);
        }
        var childNodes = this.getChildNodes(this.treeData, id);
        for (var i = 0; i < childNodes.length; i++) {
          var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;
          if (this.checkedNodes.indexOf(childId) !== -1) {
            count++;
          }
          if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {
            this.checkedNodes.push(id);
          }
        }
        var preElement = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", id, true));
        this.getCheckedNodeDetails(mapper, preElement);
      } else if (parentEle) {
        var check = select("." + CHECK2, parentEle);
        if (!check) {
          this.changeState(parentEle, "indeterminate", null, true, true);
        }
      }
    };
    TreeView2.prototype.updateParentCheckState = function() {
      var indeterminate = selectAll("." + INDETERMINATE2, this.element);
      var childCheckedElement;
      for (var i = 0; i < indeterminate.length; i++) {
        var node = closest(indeterminate[i], "." + LISTITEM);
        var nodeId = node.getAttribute("data-uid").toString();
        if (this.dataType === 1) {
          childCheckedElement = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.parentID, "equal", nodeId, true));
        } else {
          childCheckedElement = this.getChildNodes(this.treeData, nodeId);
        }
        var count = 0;
        if (childCheckedElement) {
          for (var j = 0; j < childCheckedElement.length; j++) {
            var childId = childCheckedElement[j][this.fields.id].toString();
            if (this.checkedNodes.indexOf(childId) !== -1) {
              count++;
            }
          }
          if (count === childCheckedElement.length) {
            var nodeCheck = node.getAttribute("data-uid");
            if (this.checkedNodes.indexOf(nodeCheck) === -1) {
              this.checkedNodes.push(nodeCheck);
            }
            this.changeState(node, "check", null, true, true);
          } else if (count === 0 && this.checkedNodes.length === 0) {
            this.changeState(node, "uncheck", null, true, true);
          }
        }
      }
    };
    TreeView2.prototype.checkIndeterminateState = function(data) {
      var element2;
      if (this.dataType === 1) {
        element2 = this.element.querySelector('[data-uid="' + data[this.fields.parentID] + '"]');
      } else {
        element2 = this.element.querySelector('[data-uid="' + data[this.fields.id] + '"]');
      }
      if (element2) {
        var ariaChecked = element2.querySelector("." + CHECKBOXWRAP).getAttribute("aria-checked");
        if (ariaChecked !== "true") {
          this.changeState(element2, "indeterminate", null, true, true);
        }
      } else if (this.dataType === 2) {
        var len = this.parentNodeCheck.length;
        if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {
          this.parentNodeCheck.push(data[this.fields.id].toString());
        }
      }
    };
    TreeView2.prototype.updateChildCheckState = function(childItems, treeData) {
      var count = 0;
      var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : "";
      for (var index = 0; index < childItems.length; index++) {
        var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : "";
        if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {
          this.checkedNodes.push(checkedChild);
        }
        if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {
          this.checkedNodes.push(checkedChild);
        }
        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
          count++;
        }
        if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {
          this.validNodes.push(checkedChild);
        }
        var subChildItems = getValue(this.fields.child.toString(), childItems[index]);
        if (subChildItems && subChildItems.length) {
          if (this.parentCheckData.indexOf(treeData) === -1)
            this.parentCheckData.push(treeData);
          this.updateChildCheckState(subChildItems, childItems[index]);
        }
        if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {
          this.checkedNodes.push(checkedParent);
        }
      }
      if (count !== 0 && this.autoCheck) {
        this.checkIndeterminateState(treeData);
        for (var len = 0; len < this.parentCheckData.length; len++) {
          if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {
            this.checkIndeterminateState(this.parentCheckData[len]);
          }
        }
      }
      this.parentCheckData = [];
    };
    TreeView2.prototype.beforeNodeCreate = function(e) {
      if (this.showCheckBox) {
        var checkboxEle = createCheckBox(this.createElement, true, { cssClass: this.touchClass });
        checkboxEle.setAttribute("role", "checkbox");
        checkboxEle.setAttribute("aria-label", "checkbox");
        var icon = select("div." + ICON3, e.item);
        var id = e.item.getAttribute("data-uid");
        e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNullOrUndefined(icon) ? 0 : 1]);
        var checkValue = getValue(e.fields.isChecked, e.curData);
        if (this.checkedNodes.indexOf(id) > -1) {
          select("." + CHECKBOXFRAME, checkboxEle).classList.add(CHECK2);
          checkboxEle.setAttribute("aria-checked", "true");
          this.addCheck(e.item);
        } else if (!isNullOrUndefined(checkValue) && checkValue.toString() === "true") {
          select("." + CHECKBOXFRAME, checkboxEle).classList.add(CHECK2);
          checkboxEle.setAttribute("aria-checked", "true");
          this.addCheck(e.item);
        } else {
          checkboxEle.setAttribute("aria-checked", "false");
        }
        var frame = select("." + CHECKBOXFRAME, checkboxEle);
        EventHandler.add(frame, "mousedown", this.frameMouseHandler, this);
        EventHandler.add(frame, "mouseup", this.frameMouseHandler, this);
      }
      if (this.fullRowSelect) {
        this.createFullRow(e.item);
      }
      if (this.allowMultiSelection && !e.item.classList.contains(SELECTED2)) {
        e.item.setAttribute("aria-selected", "false");
      }
      var fields = e.fields;
      this.addActionClass(e, fields.selected, SELECTED2);
      this.addActionClass(e, fields.expanded, EXPANDED);
      e.item.setAttribute("tabindex", "-1");
      EventHandler.add(e.item, "focus", this.focusIn, this);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        var textEle = e.item.querySelector("." + LISTTEXT);
        var dataId = e.item.getAttribute("data-uid");
        textEle.innerHTML = "";
        this.renderNodeTemplate(e.curData, textEle, dataId);
      }
      var eventArgs = {
        node: e.item,
        nodeData: e.curData,
        text: e.text
      };
      if (!this.isRefreshed) {
        this.trigger("drawNode", eventArgs);
        if (e.curData[this.fields.selectable] === false && !this.showCheckBox) {
          e.item.classList.add(PREVENTSELECT);
          e.item.firstElementChild.setAttribute("style", "cursor: not-allowed");
        }
      }
    };
    TreeView2.prototype.frameMouseHandler = function(e) {
      var rippleSpan = select("." + CHECKBOXRIPPLE, e.target.parentElement);
      rippleMouseHandler(e, rippleSpan);
    };
    TreeView2.prototype.addActionClass = function(e, action, cssClass2) {
      var data = e.curData;
      var actionValue = getValue(action, data);
      if (!isNullOrUndefined(actionValue) && actionValue.toString() !== "false") {
        e.item.classList.add(cssClass2);
      }
    };
    TreeView2.prototype.getDataType = function(ds, mapper) {
      if (this.fields.dataSource instanceof DataManager) {
        for (var i = 0; i < ds.length; i++) {
          if (this.isOffline) {
            if (typeof mapper.child === "string" && isNullOrUndefined(getValue(mapper.child, ds[i])) && !isNullOrUndefined(getValue(mapper.parentID, ds[i]))) {
              return 1;
            }
          } else if (typeof mapper.child === "string" && isNullOrUndefined(getValue(mapper.child, ds[i]))) {
            return 1;
          }
        }
        return 2;
      }
      for (var i = 0, len = ds.length; i < len; i++) {
        if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, ds[i]))) {
          return 2;
        }
        if (!isNullOrUndefined(getValue(mapper.parentID, ds[i])) || !isNullOrUndefined(getValue(mapper.hasChildren, ds[i]))) {
          return 1;
        }
      }
      return 1;
    };
    TreeView2.prototype.getGroupedData = function(dataSource, groupBy) {
      var cusQuery = new Query().group(groupBy);
      var ds = ListBase.getDataSource(dataSource, cusQuery);
      var grpItem = [];
      for (var j = 0; j < ds.length; j++) {
        var itemObj = ds[j].items;
        grpItem.push(itemObj);
      }
      return grpItem;
    };
    TreeView2.prototype.getSortedData = function(list) {
      if (list && this.sortOrder !== "None") {
        list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));
      }
      return list;
    };
    TreeView2.prototype.finalizeNode = function(element2) {
      var iNodes = selectAll("." + IMAGE, element2);
      for (var k = 0; k < iNodes.length; k++) {
        iNodes[k].setAttribute("alt", IMAGE);
      }
      if (this.isLoaded) {
        var sNodes = selectAll("." + SELECTED2, element2);
        for (var i = 0; i < sNodes.length; i++) {
          this.selectNode(sNodes[i], null);
          break;
        }
        removeClass(sNodes, SELECTED2);
      }
      var cNodes = selectAll("." + LISTITEM + ":not(." + EXPANDED + ")", element2);
      for (var j = 0; j < cNodes.length; j++) {
        var icon = select("div." + ICON3, cNodes[j]);
        if (icon && icon.classList.contains(EXPANDABLE)) {
          this.disableExpandAttr(cNodes[j]);
        }
      }
      var eNodes = selectAll("." + EXPANDED, element2);
      if (!this.isInitalExpand) {
        for (var i = 0; i < eNodes.length; i++) {
          this.renderChildNodes(eNodes[i]);
        }
      }
      removeClass(eNodes, EXPANDED);
      this.updateList();
      if (this.isLoaded) {
        this.updateCheckedProp();
      }
    };
    TreeView2.prototype.updateCheckedProp = function() {
      if (this.showCheckBox) {
        var nodes = [].concat([], this.checkedNodes);
        this.setProperties({ checkedNodes: nodes }, true);
      }
    };
    TreeView2.prototype.ensureIndeterminate = function() {
      if (this.autoCheck) {
        var liElement = selectAll("li", this.element);
        var ulElement = void 0;
        for (var i = 0; i < liElement.length; i++) {
          if (liElement[i].classList.contains(LISTITEM)) {
            ulElement = select("." + PARENTITEM, liElement[i]);
            if (ulElement) {
              this.ensureParentCheckState(liElement[i]);
            } else {
              this.ensureChildCheckState(liElement[i]);
            }
          }
        }
      } else {
        var indeterminate = selectAll("." + INDETERMINATE2, this.element);
        for (var i = 0; i < indeterminate.length; i++) {
          indeterminate[i].classList.remove(INDETERMINATE2);
        }
      }
    };
    TreeView2.prototype.ensureParentCheckState = function(element2) {
      if (!isNullOrUndefined(element2)) {
        if (element2.classList.contains(ROOT3)) {
          return;
        }
        var ulElement = element2;
        if (element2.classList.contains(LISTITEM)) {
          ulElement = select("." + PARENTITEM, element2);
        }
        var checkedNodes = selectAll("." + CHECK2, ulElement);
        var indeterminateNodes = selectAll("." + INDETERMINATE2, ulElement);
        var nodes = selectAll("." + LISTITEM, ulElement);
        var checkBoxEle = element2.getElementsByClassName(CHECKBOXWRAP)[0];
        if (nodes.length === checkedNodes.length) {
          this.changeState(checkBoxEle, "check", null, true, true);
        } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {
          this.changeState(checkBoxEle, "indeterminate", null, true, true);
        } else if (checkedNodes.length === 0) {
          this.changeState(checkBoxEle, "uncheck", null, true, true);
        }
        var parentUL = closest(element2, "." + PARENTITEM);
        if (!isNullOrUndefined(parentUL)) {
          var currentParent = closest(parentUL, "." + LISTITEM);
          this.ensureParentCheckState(currentParent);
        }
      }
    };
    TreeView2.prototype.ensureChildCheckState = function(element2, e) {
      if (!isNullOrUndefined(element2)) {
        var childElement = select("." + PARENTITEM, element2);
        var checkBoxes = void 0;
        if (!isNullOrUndefined(childElement)) {
          checkBoxes = selectAll("." + CHECKBOXWRAP, childElement);
          var isChecked = element2.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK2);
          var parentCheck = element2.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE2);
          var childCheck = childElement.querySelectorAll("li");
          var expandState = childElement.parentElement.getAttribute("aria-expanded");
          var checkedState = void 0;
          for (var index = 0; index < checkBoxes.length; index++) {
            var childId = childCheck[index].getAttribute("data-uid");
            if (!isNullOrUndefined(this.currentLoadData) && !isNullOrUndefined(getValue(this.fields.isChecked, this.currentLoadData[index]))) {
              checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? "check" : "uncheck";
              if (this.ele !== -1) {
                checkedState = isChecked ? "check" : "uncheck";
              }
              if (checkedState === "uncheck" && (!isUndefined(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1)) {
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
                checkedState = "indeterminate";
              }
            } else {
              var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK2);
              if (isChecked) {
                checkedState = "check";
              } else if (isNodeChecked && !this.isLoaded) {
                checkedState = "check";
              } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {
                checkedState = "check";
              } else if (childCheck[index].classList.contains(CHILD) && (!isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {
                checkedState = "indeterminate";
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
              } else if (this.dataType === 1 && (!isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {
                checkedState = "indeterminate";
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);
              } else {
                checkedState = "uncheck";
              }
            }
            this.changeState(checkBoxes[index], checkedState, e, true, true);
          }
        }
        if (this.autoCheck && this.isLoaded) {
          this.updateParentCheckState();
        }
      }
    };
    TreeView2.prototype.doCheckBoxAction = function(nodes, doCheck) {
      var li = selectAll("." + LISTITEM, this.element);
      if (!isNullOrUndefined(nodes)) {
        for (var len = nodes.length; len >= 0; len--) {
          var liEle = void 0;
          if (nodes.length === 1) {
            liEle = this.getElement(nodes[len - 1]);
          } else {
            liEle = this.getElement(nodes[len]);
          }
          if (isNullOrUndefined(liEle)) {
            var node = void 0;
            node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;
            if (node !== "" && doCheck && node) {
              this.setValidCheckedNode(node);
              this.dynamicCheckState(node, doCheck);
            } else if (this.checkedNodes.indexOf(node) !== -1 && node !== "" && !doCheck) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);
              var childItems = this.getChildNodes(this.treeData, node);
              if (childItems) {
                for (var i = 0; i < childItems.length; i++) {
                  var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;
                  if (this.checkedNodes.indexOf(id) !== -1) {
                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
                    var ele = this.element.querySelector('[data-uid="' + id + '"]');
                    if (ele) {
                      this.changeState(ele, "uncheck", null);
                    }
                  }
                }
                if (this.parentNodeCheck.indexOf(node) !== -1) {
                  this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);
                }
              }
              if (node) {
                this.dynamicCheckState(node, doCheck);
              }
              this.updateField(this.treeData, this.fields, node, "isChecked", null);
            }
            continue;
          }
          var checkBox = select("." + PARENTITEM + " ." + CHECKBOXWRAP, liEle);
          this.validateCheckNode(checkBox, !doCheck, liEle, null);
        }
      } else {
        var checkBoxes = selectAll("." + CHECKBOXWRAP, this.element);
        if (this.loadOnDemand) {
          for (var index = 0; index < checkBoxes.length; index++) {
            this.updateFieldChecked(checkBoxes[index], doCheck);
            this.changeState(checkBoxes[index], doCheck ? "check" : "uncheck", null, null, null, doCheck);
          }
        } else {
          for (var index = 0; index < checkBoxes.length; index++) {
            this.updateFieldChecked(checkBoxes[index], doCheck);
            this.changeState(checkBoxes[index], doCheck ? "check" : "uncheck");
          }
        }
      }
      if (nodes) {
        for (var j = 0; j < nodes.length; j++) {
          var node = nodes[j] ? nodes[j].toString() : "";
          if (!doCheck) {
            this.updateField(this.treeData, this.fields, node, "isChecked", null);
          }
        }
      }
      if (this.autoCheck) {
        this.updateParentCheckState();
      }
    };
    TreeView2.prototype.updateFieldChecked = function(checkbox, doCheck) {
      var currLi = closest(checkbox, "." + LISTITEM);
      var id = currLi.getAttribute("data-uid");
      var nodeDetails = this.getNodeData(currLi);
      if (nodeDetails.isChecked === "true" && !doCheck) {
        this.updateField(this.treeData, this.fields, id, "isChecked", null);
      }
    };
    TreeView2.prototype.dynamicCheckState = function(node, doCheck) {
      if (this.dataType === 1) {
        var count = 0;
        var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, "equal", node, true));
        if (resultId[0]) {
          var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;
          var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;
          var parentElement = this.element.querySelector('[data-uid="' + parent_1 + '"]');
          var indeterminate = parentElement ? select("." + INDETERMINATE2, parentElement) : null;
          var check = parentElement ? select("." + CHECK2, parentElement) : null;
          var element2 = this.element.querySelector('[data-uid="' + id + '"]');
          var childNodes = this.getChildNodes(this.treeData, parent_1);
          if (childNodes) {
            for (var i = 0; i < childNodes.length; i++) {
              var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;
              if (this.checkedNodes.indexOf(childId) !== -1) {
                count++;
              }
            }
          }
          if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {
            this.changeState(parentElement, "indeterminate", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && element2 && id === node && !doCheck) {
            this.changeState(element2, "uncheck", null);
          } else if (this.checkedNodes.indexOf(node) !== -1 && element2 && id === node && doCheck) {
            this.changeState(element2, "check", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && !element2 && parentElement && id === node && this.autoCheck && count !== 0) {
            this.changeState(parentElement, "indeterminate", null);
          } else if (this.checkedNodes.indexOf(node) === -1 && !element2 && parentElement && id === node && this.autoCheck && count === 0) {
            this.changeState(parentElement, "uncheck", null);
          } else if (!element2 && !parentElement && id === node && this.autoCheck) {
            this.updateIndeterminate(node, doCheck);
          }
        }
      } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {
        var id = void 0;
        var parentElement = void 0;
        var check = void 0;
        for (var i = 0; i < this.treeData.length; i++) {
          id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : "";
          parentElement = this.element.querySelector('[data-uid="' + id + '"]');
          check = parentElement ? select("." + CHECK2, parentElement) : null;
          if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {
            this.changeState(parentElement, "uncheck", null);
          }
          var subChild = getValue(this.fields.child.toString(), this.treeData[i]);
          if (subChild) {
            this.updateChildIndeterminate(subChild, id, node, doCheck, id);
          }
        }
      }
    };
    TreeView2.prototype.updateIndeterminate = function(node, doCheck) {
      var indeterminateData = this.getTreeData(node);
      var count = 0;
      var parent;
      if (this.dataType === 1) {
        parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;
      }
      var childNodes = this.getChildNodes(this.treeData, parent);
      if (childNodes) {
        for (var i = 0; i < childNodes.length; i++) {
          var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;
          if (this.checkedNodes.indexOf(childId) !== -1) {
            count++;
          }
        }
      }
      var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
      if (parentElement && doCheck) {
        this.changeState(parentElement, "indeterminate", null);
      } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
        this.changeState(parentElement, "indeterminate", null);
      } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {
        this.changeState(parentElement, "uncheck", null);
      } else if (!parentElement) {
        if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {
          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);
        } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {
          this.parentNodeCheck.push(parent);
        } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {
          this.parentNodeCheck.push(parent);
        }
        this.updateIndeterminate(parent, doCheck);
        if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);
        }
      }
    };
    TreeView2.prototype.updateChildIndeterminate = function(subChild, parent, node, doCheck, child) {
      var count = 0;
      for (var j = 0; j < subChild.length; j++) {
        var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : "";
        if (this.checkedNodes.indexOf(subId) !== -1) {
          count++;
        }
        var parentElement = this.element.querySelector('[data-uid="' + parent + '"]');
        var indeterminate = parentElement ? select("." + INDETERMINATE2, parentElement) : null;
        var check = parentElement ? select("." + CHECK2, parentElement) : null;
        var element2 = this.element.querySelector('[data-uid="' + subId + '"]');
        var childElementCheck = element2 ? select("." + CHECK2, element2) : null;
        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {
          this.changeState(parentElement, "indeterminate", null);
        } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element2 && subId === node && !doCheck) {
          if (this.autoCheck) {
            this.changeState(parentElement, "uncheck", null);
          } else {
            if (count !== 0) {
              this.changeState(parentElement, "indeterminate", null);
            } else {
              this.changeState(parentElement, "uncheck", null);
            }
          }
        } else if (this.checkedNodes.indexOf(node) === -1 && element2 && subId === node && !doCheck) {
          this.changeState(element2, "uncheck", null);
        } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {
          indeterminate.classList.remove(INDETERMINATE2);
        } else if (this.checkedNodes.indexOf(node) === -1 && !element2 && check && subId === node && count === 0) {
          this.changeState(parentElement, "uncheck", null);
        } else if (this.checkedNodes.indexOf(subId) === -1 && element2 && childElementCheck && count === 0) {
          this.changeState(element2, "uncheck", null);
        } else if (!element2 && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {
          var childElement = this.element.querySelector('[data-uid="' + child + '"]');
          if (doCheck && count !== 0) {
            this.changeState(childElement, "indeterminate", null);
          } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {
            this.checkedNodes.push(parent);
          } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {
            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));
          }
          if (this.parentNodeCheck.indexOf(parent) === -1) {
            this.parentNodeCheck.push(parent);
          }
        }
        var innerChild = getValue(this.fields.child.toString(), subChild[j]);
        if (innerChild) {
          this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);
        }
      }
    };
    TreeView2.prototype.changeState = function(wrapper, state, e, isPrevent, isAdd, doCheck) {
      var _this = this;
      var eventArgs;
      var currLi = closest(wrapper, "." + LISTITEM);
      if (wrapper === currLi) {
        wrapper = select("." + CHECKBOXWRAP, currLi);
      }
      if (!isPrevent) {
        this.checkActionNodes = [];
        eventArgs = this.getCheckEvent(currLi, state, e);
        this.trigger("nodeChecking", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);
          }
        });
      } else {
        this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);
      }
    };
    TreeView2.prototype.nodeCheckAction = function(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK2)) {
        frameSpan.classList.remove(INDETERMINATE2);
        frameSpan.classList.add(CHECK2);
        this.addCheck(currLi);
        ariaState = "true";
      } else if (state === "uncheck" && (frameSpan.classList.contains(CHECK2) || frameSpan.classList.contains(INDETERMINATE2))) {
        removeClass([frameSpan], [CHECK2, INDETERMINATE2]);
        this.removeCheck(currLi);
        ariaState = "false";
      } else if (state === "indeterminate" && this.autoCheck) {
        frameSpan.classList.remove(CHECK2);
        frameSpan.classList.add(INDETERMINATE2);
        this.removeCheck(currLi);
        ariaState = "mixed";
      }
      ariaState = state === "check" ? "true" : state === "uncheck" ? "false" : ariaState;
      if (!isNullOrUndefined(ariaState)) {
        wrapper.setAttribute("aria-checked", ariaState);
      }
      if (isAdd) {
        var data = [].concat([], this.checkActionNodes);
        eventArgs = this.getCheckEvent(currLi, state, e);
        if (isUndefined(isPrevent)) {
          eventArgs.data = data;
        }
      }
      if (doCheck !== void 0) {
        this.ensureStateChange(currLi, doCheck);
      }
      if (!isPrevent) {
        if (!isNullOrUndefined(ariaState)) {
          wrapper.setAttribute("aria-checked", ariaState);
          eventArgs.data[0].checked = ariaState;
          this.trigger("nodeChecked", eventArgs);
          this.checkActionNodes = [];
        }
      }
    };
    TreeView2.prototype.addCheck = function(liEle) {
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.checkedNodes.indexOf(id) === -1) {
        this.checkedNodes.push(id);
      }
    };
    TreeView2.prototype.removeCheck = function(liEle) {
      var index = this.checkedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.checkedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.getCheckEvent = function(currLi, action, e) {
      this.checkActionNodes.push(this.getNodeData(currLi));
      var nodeData = this.checkActionNodes;
      return { action, cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, data: nodeData };
    };
    TreeView2.prototype.finalize = function() {
      var firstUl = select("." + PARENTITEM, this.element);
      if (!isNullOrUndefined(firstUl)) {
        firstUl.setAttribute("role", treeAriaAttr.treeRole);
        this.setMultiSelect(this.allowMultiSelection);
        var firstNode = select("." + LISTITEM, this.element);
        if (firstNode) {
          firstNode.setAttribute("tabindex", "0");
          this.updateIdAttr(null, firstNode);
        }
        if (this.allowTextWrap) {
          this.updateWrap();
        }
        this.renderReactTemplates();
        this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;
        this.doExpandAction();
      }
    };
    TreeView2.prototype.setTextWrap = function() {
      (this.allowTextWrap ? addClass : removeClass)([this.element], LISTWRAP);
      if (Browser.isIE) {
        (this.allowTextWrap ? addClass : removeClass)([this.element], IELISTWRAP);
      }
    };
    TreeView2.prototype.updateWrap = function(ulEle) {
      if (!this.fullRowSelect) {
        return;
      }
      var liEle = ulEle ? selectAll("." + LISTITEM, ulEle) : this.liList;
      var length = liEle.length;
      for (var i = 0; i < length; i++) {
        this.calculateWrap(liEle[i]);
      }
    };
    TreeView2.prototype.calculateWrap = function(liEle) {
      var element2 = select("." + FULLROW, liEle);
      if (element2 && element2.nextElementSibling) {
        element2.style.height = this.allowTextWrap ? element2.nextElementSibling.offsetHeight + "px" : "";
      }
    };
    TreeView2.prototype.doExpandAction = function() {
      var eUids = this.expandedNodes;
      if (this.isInitalExpand && eUids.length > 0) {
        this.setProperties({ expandedNodes: [] }, true);
        if (this.fields.dataSource instanceof DataManager) {
          this.expandGivenNodes(eUids);
        } else {
          for (var i = 0; i < eUids.length; i++) {
            var eNode = select('[data-uid="' + eUids[i] + '"]', this.element);
            if (!isNullOrUndefined(eNode)) {
              var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, eNode));
              if (!isNullOrUndefined(icon)) {
                this.expandAction(eNode, icon, null);
              }
            } else {
              if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {
                this.expandChildren.push(eUids[i].toString());
              }
              continue;
            }
          }
          this.afterFinalized();
        }
      } else {
        this.afterFinalized();
      }
    };
    TreeView2.prototype.expandGivenNodes = function(arr) {
      var proxy2 = this;
      this.expandCallback(arr[this.index], function() {
        proxy2.index++;
        if (proxy2.index < arr.length) {
          proxy2.expandGivenNodes(arr);
        } else {
          proxy2.afterFinalized();
        }
      });
    };
    TreeView2.prototype.expandCallback = function(eUid, callback) {
      var eNode = select('[data-uid="' + eUid + '"]', this.element);
      if (!isNullOrUndefined(eNode)) {
        var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, eNode));
        if (!isNullOrUndefined(icon)) {
          this.expandAction(eNode, icon, null, false, callback);
        } else {
          callback();
        }
      } else {
        callback();
      }
    };
    TreeView2.prototype.afterFinalized = function() {
      this.doSelectionAction();
      this.updateCheckedProp();
      this.isAnimate = true;
      this.isInitalExpand = false;
      if ((!this.isLoaded || this.isFieldChange) && !this.isNodeDropped) {
        var eventArgs = { data: this.treeData };
        this.trigger("dataBound", eventArgs);
      }
      this.isLoaded = true;
      this.isNodeDropped = false;
    };
    TreeView2.prototype.doSelectionAction = function() {
      var sNodes = selectAll("." + SELECTED2, this.element);
      var sUids = this.selectedNodes;
      if (sUids.length > 0) {
        this.setProperties({ selectedNodes: [] }, true);
        for (var i = 0; i < sUids.length; i++) {
          var sNode = select('[data-uid="' + sUids[i] + '"]', this.element);
          if (sNode && !sNode.classList.contains("e-active")) {
            this.selectNode(sNode, null, true);
          } else {
            this.selectedNodes.push(sUids[i]);
          }
          if (!this.allowMultiSelection) {
            break;
          }
        }
      } else {
        this.selectGivenNodes(sNodes);
      }
      removeClass(sNodes, SELECTED2);
    };
    TreeView2.prototype.selectGivenNodes = function(sNodes) {
      for (var i = 0; i < sNodes.length; i++) {
        if (!sNodes[i].classList.contains("e-disable")) {
          this.selectNode(sNodes[i], null, true);
        }
        if (!this.allowMultiSelection) {
          break;
        }
      }
    };
    TreeView2.prototype.clickHandler = function(event) {
      var target = Browser.isDevice && !Browser.isIos ? document.elementFromPoint(event.originalEvent.changedTouches[0].clientX, event.originalEvent.changedTouches[0].clientY) : event.originalEvent.target;
      EventHandler.remove(this.element, "contextmenu", this.preventContextMenu);
      if (!target || this.dragStartAction) {
        return;
      } else {
        var classList2 = target.classList;
        var li = closest(target, "." + LISTITEM);
        if (!li || li.classList.contains(PREVENTSELECT) && !(classList2.contains(EXPANDABLE) || classList2.contains(COLLAPSIBLE))) {
          return;
        } else if (event.originalEvent.which !== 3) {
          var rippleElement = select("." + RIPPLEELMENT, li);
          var rippleIcons = select("." + ICON3, li);
          this.removeHover();
          this.setFocusElement(li);
          if (this.showCheckBox && !li.classList.contains("e-disable")) {
            var checkWrapper = closest(target, "." + CHECKBOXWRAP);
            if (!isNullOrUndefined(checkWrapper)) {
              var checkElement = select("." + CHECKBOXFRAME, checkWrapper);
              this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK2), li, event.originalEvent);
              this.triggerClickEvent(event.originalEvent, li);
              return;
            }
          }
          if (classList2.contains(EXPANDABLE)) {
            this.expandAction(li, target, event);
          } else if (classList2.contains(COLLAPSIBLE)) {
            this.collapseNode(li, target, event);
          } else if (rippleElement && rippleIcons) {
            if (rippleIcons.classList.contains(RIPPLE4) && rippleIcons.classList.contains(EXPANDABLE)) {
              this.expandAction(li, rippleIcons, event);
            } else if (rippleIcons.classList.contains(RIPPLE4) && rippleIcons.classList.contains(COLLAPSIBLE)) {
              this.collapseNode(li, rippleIcons, event);
            } else if (!classList2.contains(PARENTITEM) && !classList2.contains(LISTITEM)) {
              this.toggleSelect(li, event.originalEvent, false);
            }
          } else {
            if (!classList2.contains(PARENTITEM) && !classList2.contains(LISTITEM)) {
              this.toggleSelect(li, event.originalEvent, false);
            }
          }
        }
        if (event.originalEvent.which === 3) {
          this.isRightClick = true;
        }
        this.triggerClickEvent(event.originalEvent, li);
      }
    };
    TreeView2.prototype.nodeCheckedEvent = function(wrapper, isCheck, e) {
      var currLi = closest(wrapper, "." + LISTITEM);
      var eventArgs = this.getCheckEvent(wrapper, isCheck ? "uncheck" : "check", e);
      eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);
      this.trigger("nodeChecked", eventArgs);
    };
    TreeView2.prototype.triggerClickEvent = function(e, li) {
      var eventArgs = {
        event: e,
        node: li
      };
      this.trigger("nodeClicked", eventArgs);
    };
    TreeView2.prototype.expandNode = function(currLi, icon, loaded) {
      var _this = this;
      this.renderReactTemplates();
      if (icon.classList.contains(LOAD)) {
        this.hideSpinner(icon);
      }
      if (!this.initialRender) {
        icon.classList.add("interaction");
      }
      if (loaded !== true || loaded === true && currLi.classList.contains("e-expanded")) {
        if (this.preventExpand !== true) {
          removeClass([icon], EXPANDABLE);
          addClass([icon], COLLAPSIBLE);
          var start_1 = 0;
          var end_1 = 0;
          var proxy_1 = this;
          var ul_1 = select("." + PARENTITEM, currLi);
          var liEle_1 = currLi;
          this.setHeight(liEle_1, ul_1);
          var activeElement_1 = select("." + LISTITEM + "." + ACTIVE2, currLi);
          if (this.isAnimate && !this.isRefreshed) {
            this.aniObj.animate(ul_1, {
              name: this.animation.expand.effect,
              duration: this.animation.expand.duration,
              timingFunction: this.animation.expand.easing,
              begin: function(args) {
                liEle_1.style.overflow = "hidden";
                if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                  activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);
                }
                start_1 = liEle_1.offsetHeight;
                end_1 = select("." + TEXTWRAP, currLi).offsetHeight;
              },
              progress: function(args) {
                args.element.style.display = "block";
                proxy_1.animateHeight(args, start_1, end_1);
              },
              end: function(args) {
                args.element.style.display = "block";
                if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {
                  activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);
                }
                _this.expandedNode(liEle_1, ul_1, icon);
              }
            });
          } else {
            this.expandedNode(liEle_1, ul_1, icon);
          }
        }
      } else {
        var ul = select("." + PARENTITEM, currLi);
        ul.style.display = "none";
        if (this.fields.dataSource instanceof DataManager === true) {
          this.preventExpand = false;
        }
      }
      if (this.initialRender) {
        icon.classList.add("interaction");
      }
    };
    TreeView2.prototype.expandedNode = function(currLi, ul, icon) {
      ul.style.display = "block";
      currLi.style.display = "block";
      currLi.style.overflow = "";
      currLi.style.height = "";
      removeClass([icon], PROCESS);
      this.addExpand(currLi);
      if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {
        this.updateWrap(currLi);
        this.isFirstRender = false;
      }
      if (this.isLoaded && this.expandArgs && !this.isRefreshed) {
        this.expandArgs = this.getExpandEvent(currLi, null);
        this.expandArgs.isInteracted = this.isInteracted;
        this.trigger("nodeExpanded", this.expandArgs);
      }
    };
    TreeView2.prototype.addExpand = function(liEle) {
      liEle.setAttribute("aria-expanded", "true");
      removeClass([liEle], NODECOLLAPSED);
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.expandedNodes.indexOf(id) === -1) {
        this.expandedNodes.push(id);
      }
    };
    TreeView2.prototype.collapseNode = function(currLi, icon, e) {
      var _this = this;
      if (icon.classList.contains(PROCESS)) {
        return;
      } else {
        addClass([icon], PROCESS);
      }
      var colArgs;
      if (this.isLoaded) {
        colArgs = this.getExpandEvent(currLi, e);
        this.isInteracted = colArgs.isInteracted;
        this.trigger("nodeCollapsing", colArgs, function(observedArgs) {
          if (observedArgs.cancel) {
            removeClass([icon], PROCESS);
          } else {
            _this.nodeCollapseAction(currLi, icon, observedArgs);
          }
        });
      } else {
        this.nodeCollapseAction(currLi, icon, colArgs);
      }
    };
    TreeView2.prototype.nodeCollapseAction = function(currLi, icon, colArgs) {
      var _this = this;
      removeClass([icon], COLLAPSIBLE);
      addClass([icon], EXPANDABLE);
      var start = 0;
      var end = 0;
      var proxy2 = this;
      var ul = select("." + PARENTITEM, currLi);
      var liEle = currLi;
      var activeElement = select("." + LISTITEM + "." + ACTIVE2, currLi);
      if (this.isAnimate) {
        this.aniObj.animate(ul, {
          name: this.animation.collapse.effect,
          duration: this.animation.collapse.duration,
          timingFunction: this.animation.collapse.easing,
          begin: function(args) {
            liEle.style.overflow = "hidden";
            if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {
              activeElement.classList.add(ITEM_ANIMATION_ACTIVE);
            }
            start = select("." + TEXTWRAP, currLi).offsetHeight;
            end = liEle.offsetHeight;
          },
          progress: function(args) {
            proxy2.animateHeight(args, start, end);
          },
          end: function(args) {
            args.element.style.display = "none";
            if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {
              activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);
            }
            _this.collapsedNode(liEle, ul, icon, colArgs);
          }
        });
      } else {
        this.collapsedNode(liEle, ul, icon, colArgs);
      }
    };
    TreeView2.prototype.collapsedNode = function(liEle, ul, icon, colArgs) {
      ul.style.display = "none";
      liEle.style.overflow = "";
      liEle.style.height = "";
      removeClass([icon], PROCESS);
      this.removeExpand(liEle);
      if (this.isLoaded) {
        colArgs = this.getExpandEvent(liEle, null);
        colArgs.isInteracted = this.isInteracted;
        this.trigger("nodeCollapsed", colArgs);
      }
    };
    TreeView2.prototype.removeExpand = function(liEle, toRemove) {
      if (toRemove) {
        liEle.removeAttribute("aria-expanded");
      } else {
        this.disableExpandAttr(liEle);
      }
      var index = this.expandedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.expandedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.disableExpandAttr = function(liEle) {
      liEle.setAttribute("aria-expanded", "false");
      addClass([liEle], NODECOLLAPSED);
    };
    TreeView2.prototype.setHeight = function(currLi, ul) {
      ul.style.display = "block";
      ul.style.visibility = "hidden";
      currLi.style.height = currLi.offsetHeight + "px";
      ul.style.display = "none";
      ul.style.visibility = "";
    };
    TreeView2.prototype.animateHeight = function(args, start, end) {
      var remaining = (args.duration - args.timeStamp) / args.duration;
      var currentHeight = (end - start) * remaining + start;
      args.element.parentElement.style.height = currentHeight + "px";
    };
    TreeView2.prototype.renderChildNodes = function(parentLi, expandChild, callback, loaded) {
      var _this = this;
      var eicon = select("div." + ICON3, parentLi);
      if (isNullOrUndefined(eicon)) {
        return;
      }
      this.showSpinner(eicon);
      var childItems;
      if (this.fields.dataSource instanceof DataManager) {
        var level = this.parents(parentLi, "." + PARENTITEM).length;
        var mapper_2 = this.getChildFields(this.fields, level, 1);
        if (isNullOrUndefined(mapper_2) || isNullOrUndefined(mapper_2.dataSource)) {
          detach(eicon);
          this.removeExpand(parentLi, true);
          return;
        }
        this.treeList.push("false");
        if (this.fields.dataSource instanceof DataManager && this.isOffline) {
          this.treeList.pop();
          childItems = this.getChildNodes(this.treeData, parentLi.getAttribute("data-uid"));
          this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);
        } else {
          mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute("data-uid"))).then(function(e) {
            _this.treeList.pop();
            childItems = e.result;
            if (_this.dataType === 1) {
              _this.dataType = 2;
            }
            _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);
          }).catch(function(e) {
            _this.trigger("actionFailure", { error: e });
          });
        }
      } else {
        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute("data-uid"));
        this.currentLoadData = this.getSortedData(childItems);
        if (isNullOrUndefined(childItems) || childItems.length === 0) {
          detach(eicon);
          this.removeExpand(parentLi, true);
          return;
        } else {
          this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute("aria-level")) + 1;
          parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));
          this.expandNode(parentLi, eicon, loaded);
          this.setSelectionForChildNodes(childItems);
          this.ensureCheckNode(parentLi);
          this.finalizeNode(parentLi);
          this.disableTreeNodes(childItems);
          this.renderSubChild(parentLi, expandChild, loaded);
        }
      }
    };
    TreeView2.prototype.loadChild = function(childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {
      this.currentLoadData = childItems;
      if (isNullOrUndefined(childItems) || childItems.length === 0) {
        detach(eicon);
        this.removeExpand(parentLi, true);
      } else {
        this.updateListProp(mapper);
        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
          var id = parentLi.getAttribute("data-uid");
          var nodeData = this.getNodeObject(id);
          setValue("child", childItems, nodeData);
        }
        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute("aria-level")) + 1;
        parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));
        this.expandNode(parentLi, eicon, loaded);
        this.setSelectionForChildNodes(childItems);
        this.ensureCheckNode(parentLi);
        this.finalizeNode(parentLi);
        this.disableTreeNodes(childItems);
        this.renderSubChild(parentLi, expandChild, loaded);
      }
      if (callback) {
        callback();
      }
      if (this.treeList.length === 0 && !this.isLoaded) {
        this.finalize();
      }
    };
    TreeView2.prototype.disableTreeNodes = function(childItems) {
      var i = 0;
      while (i < childItems.length) {
        var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;
        if (this.disableNode !== void 0 && this.disableNode.indexOf(id) !== -1) {
          this.doDisableAction([id]);
        }
        i++;
      }
    };
    TreeView2.prototype.setSelectionForChildNodes = function(nodes) {
      var i;
      for (i = 0; i < nodes.length; i++) {
        var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;
        if (this.selectedNodes !== void 0 && this.selectedNodes.indexOf(id) !== -1) {
          this.doSelectionAction();
        }
      }
    };
    TreeView2.prototype.ensureCheckNode = function(element2) {
      if (this.showCheckBox) {
        this.ele = this.checkedElement ? this.checkedElement.indexOf(element2.getAttribute("data-uid")) : null;
        if (this.autoCheck) {
          this.ensureChildCheckState(element2);
          this.ensureParentCheckState(element2);
        }
      }
      this.currentLoadData = null;
    };
    TreeView2.prototype.getFields = function(mapper, nodeLevel, dataLevel) {
      if (nodeLevel === dataLevel) {
        return mapper;
      } else {
        return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
      }
    };
    TreeView2.prototype.getChildFields = function(mapper, nodeLevel, dataLevel) {
      var childData;
      if (nodeLevel === dataLevel) {
        return this.getChildMapper(mapper);
      } else {
        return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
      }
    };
    TreeView2.prototype.getChildMapper = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    TreeView2.prototype.getChildNodes = function(obj, parentId, isRoot) {
      var _this = this;
      if (isRoot === void 0) {
        isRoot = false;
      }
      var childNodes;
      if (isNullOrUndefined(obj)) {
        return childNodes;
      } else if (this.dataType === 1) {
        return this.getChildGroup(this.groupedData, parentId, isRoot);
      } else {
        if (typeof this.fields.child === "string") {
          var index = obj.findIndex(function(data) {
            return data[_this.fields.id] && data[_this.fields.id].toString() === parentId;
          });
          if (index !== -1) {
            return getValue(this.fields.child, obj[index]);
          }
          if (index === -1) {
            for (var i = 0, objlen = obj.length; i < objlen; i++) {
              var tempArray = getValue(this.fields.child, obj[i]);
              var childIndex = !isNullOrUndefined(tempArray) ? tempArray.findIndex(function(data) {
                return data[_this.fields.id] && data[_this.fields.id].toString() === parentId;
              }) : -1;
              if (childIndex !== -1) {
                return getValue(this.fields.child, tempArray[childIndex]);
              } else if (!isNullOrUndefined(tempArray)) {
                childNodes = this.getChildNodes(tempArray, parentId);
                if (childNodes !== void 0) {
                  break;
                }
              }
            }
          }
        }
      }
      return childNodes;
    };
    TreeView2.prototype.getChildGroup = function(data, parentId, isRoot) {
      var childNodes;
      if (isNullOrUndefined(data)) {
        return childNodes;
      }
      for (var i = 0, objlen = data.length; i < objlen; i++) {
        if (!isNullOrUndefined(data[i][0]) && !isNullOrUndefined(getValue(this.fields.parentID, data[i][0]))) {
          if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {
            return data[i];
          }
        } else if (isRoot) {
          return data[i];
        } else {
          return [];
        }
      }
      return childNodes;
    };
    TreeView2.prototype.renderSubChild = function(element2, expandChild, loaded) {
      if (expandChild) {
        var cIcons = selectAll("." + EXPANDABLE, element2);
        for (var i = 0, len = cIcons.length; i < len; i++) {
          var icon = cIcons[i];
          if (element2.querySelector(".e-icons") !== cIcons[i]) {
            var curLi = closest(icon, "." + LISTITEM);
            this.expandArgs = this.getExpandEvent(curLi, null);
            if (loaded !== true) {
              this.trigger("nodeExpanding", this.expandArgs);
            }
            this.renderChildNodes(curLi, expandChild, null, loaded);
          }
        }
      }
    };
    TreeView2.prototype.toggleSelect = function(li, e, multiSelect) {
      if (!li.classList.contains("e-disable")) {
        if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {
          this.unselectNode(li, e);
        } else {
          this.selectNode(li, e, multiSelect);
        }
      }
    };
    TreeView2.prototype.isActive = function(li) {
      return li.classList.contains(ACTIVE2) ? true : false;
    };
    TreeView2.prototype.selectNode = function(li, e, multiSelect) {
      var _this = this;
      if (isNullOrUndefined(li) || !this.allowMultiSelection && this.isActive(li) && !isNullOrUndefined(e)) {
        this.setFocusElement(li);
        return;
      }
      var eventArgs;
      if (this.isLoaded) {
        eventArgs = this.getSelectEvent(li, "select", e);
        this.trigger("nodeSelecting", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel && !observedArgs.node.classList.contains(PREVENTSELECT)) {
            _this.nodeSelectAction(li, e, observedArgs, multiSelect);
          }
        });
      } else {
        this.nodeSelectAction(li, e, eventArgs, multiSelect);
      }
    };
    TreeView2.prototype.nodeSelectAction = function(li, e, eventArgs, multiSelect) {
      if (!this.allowMultiSelection || !multiSelect && (!e || e && !e.ctrlKey)) {
        this.removeSelectAll();
      }
      if (this.allowMultiSelection && e && e.shiftKey) {
        if (!this.startNode) {
          this.startNode = li;
        }
        var startIndex = this.liList.indexOf(this.startNode);
        var endIndex = this.liList.indexOf(li);
        if (startIndex > endIndex) {
          var temp = startIndex;
          startIndex = endIndex;
          endIndex = temp;
        }
        for (var i = startIndex; i <= endIndex; i++) {
          var currNode = this.liList[i];
          if (isVisible(currNode) && !currNode.classList.contains("e-disable")) {
            this.addSelect(currNode);
          }
        }
      } else {
        this.startNode = li;
        this.addSelect(li);
      }
      if (this.isLoaded) {
        eventArgs.nodeData = this.getNodeData(li);
        this.trigger("nodeSelected", eventArgs);
        this.isRightClick = false;
      }
      this.isRightClick = false;
    };
    TreeView2.prototype.unselectNode = function(li, e) {
      var _this = this;
      var eventArgs;
      if (this.isLoaded) {
        eventArgs = this.getSelectEvent(li, "un-select", e);
        this.trigger("nodeSelecting", eventArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.nodeUnselectAction(li, observedArgs);
          }
        });
      } else {
        this.nodeUnselectAction(li, eventArgs);
      }
    };
    TreeView2.prototype.nodeUnselectAction = function(li, eventArgs) {
      this.removeSelect(li);
      this.setFocusElement(li);
      if (this.isLoaded) {
        eventArgs.nodeData = this.getNodeData(li);
        this.trigger("nodeSelected", eventArgs);
      }
    };
    TreeView2.prototype.setFocusElement = function(li) {
      if (!isNullOrUndefined(li)) {
        var focusedNode = this.getFocusedNode();
        if (focusedNode) {
          removeClass([focusedNode], FOCUS);
          focusedNode.setAttribute("tabindex", "-1");
        }
        addClass([li], FOCUS);
        li.setAttribute("tabindex", "0");
        EventHandler.add(li, "blur", this.focusOut, this);
        this.updateIdAttr(focusedNode, li);
      }
    };
    TreeView2.prototype.addSelect = function(liEle) {
      liEle.setAttribute("aria-selected", "true");
      addClass([liEle], ACTIVE2);
      var id = liEle.getAttribute("data-uid");
      if (!isNullOrUndefined(id) && this.selectedNodes.indexOf(id) === -1) {
        this.selectedNodes.push(id);
      }
    };
    TreeView2.prototype.removeSelect = function(liEle) {
      if (this.allowMultiSelection) {
        liEle.setAttribute("aria-selected", "false");
      } else {
        liEle.removeAttribute("aria-selected");
      }
      removeClass([liEle], ACTIVE2);
      var index = this.selectedNodes.indexOf(liEle.getAttribute("data-uid"));
      if (index > -1) {
        this.selectedNodes.splice(index, 1);
      }
    };
    TreeView2.prototype.removeSelectAll = function() {
      var selectedLI = this.element.querySelectorAll("." + ACTIVE2);
      for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
        var ele = selectedLI_1[_i];
        if (this.allowMultiSelection) {
          ele.setAttribute("aria-selected", "false");
        } else {
          ele.removeAttribute("aria-selected");
        }
      }
      removeClass(selectedLI, ACTIVE2);
      this.setProperties({ selectedNodes: [] }, true);
    };
    TreeView2.prototype.getSelectEvent = function(currLi, action, e) {
      var nodeData = this.getNodeData(currLi);
      return { action, cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, nodeData };
    };
    TreeView2.prototype.setExpandOnType = function() {
      this.expandOnType = this.expandOn === "Auto" ? Browser.isDevice ? "Click" : "DblClick" : this.expandOn;
    };
    TreeView2.prototype.expandHandler = function(e) {
      var target = e.originalEvent.target;
      if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT3) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON3) || this.showCheckBox && closest(target, "." + CHECKBOXWRAP)) {
        return;
      } else {
        this.expandCollapseAction(closest(target, "." + LISTITEM), e);
      }
    };
    TreeView2.prototype.expandCollapseAction = function(currLi, e) {
      var icon = select("div." + ICON3, currLi);
      if (!icon || icon.classList.contains(PROCESS)) {
        return;
      } else {
        var classList2 = icon.classList;
        if (classList2.contains(EXPANDABLE)) {
          this.expandAction(currLi, icon, e);
        } else if (classList2.contains(COLLAPSIBLE)) {
          this.collapseNode(currLi, icon, e);
        }
      }
    };
    TreeView2.prototype.expandAction = function(currLi, icon, e, expandChild, callback) {
      var _this = this;
      if (icon.classList.contains(PROCESS)) {
        return;
      } else {
        addClass([icon], PROCESS);
      }
      if (this.isLoaded && !this.isRefreshed) {
        this.expandArgs = this.getExpandEvent(currLi, e);
        this.isInteracted = this.expandArgs.isInteracted;
        this.trigger("nodeExpanding", this.expandArgs, function(observedArgs) {
          if (observedArgs.cancel) {
            removeClass([icon], PROCESS);
          } else {
            _this.nodeExpandAction(currLi, icon, expandChild, callback);
          }
        });
      } else {
        this.nodeExpandAction(currLi, icon, expandChild, callback);
      }
    };
    TreeView2.prototype.nodeExpandAction = function(currLi, icon, expandChild, callback) {
      var ul = select("." + PARENTITEM, currLi);
      if (ul && ul.nodeName === "UL") {
        this.expandNode(currLi, icon);
      } else {
        this.isFirstRender = true;
        this.renderChildNodes(currLi, expandChild, callback);
        var liEles = selectAll("." + LISTITEM, currLi);
        for (var i = 0; i < liEles.length; i++) {
          var id = this.getId(liEles[i]);
          if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== void 0) {
            var icon_1 = select("." + EXPANDABLE, select("." + TEXTWRAP, liEles[i]));
            if (!isNullOrUndefined(icon_1)) {
              this.expandAction(liEles[i], icon_1, null);
            }
            this.expandChildren.splice(this.expandChildren.indexOf(id), 1);
          }
        }
      }
    };
    TreeView2.prototype.keyActionHandler = function(e) {
      var _this = this;
      var target = e.target;
      var focusedNode = this.getFocusedNode();
      if (target && target.classList.contains(INPUT)) {
        var inpEle = target;
        if (e.action === "enter") {
          inpEle.blur();
        } else if (e.action === "escape") {
          inpEle.value = this.oldText;
          inpEle.blur();
        }
        return;
      }
      e.preventDefault();
      var eventArgs = {
        cancel: false,
        event: e,
        node: focusedNode
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "space":
              if (_this.showCheckBox) {
                _this.checkNode(e);
              } else {
                _this.toggleSelect(focusedNode, e);
              }
              break;
            case "moveRight":
              _this.openNode(_this.enableRtl ? false : true, e);
              break;
            case "moveLeft":
              _this.openNode(_this.enableRtl ? true : false, e);
              break;
            case "shiftDown":
              _this.shiftKeySelect(true, e);
              break;
            case "moveDown":
            case "ctrlDown":
            case "csDown":
              _this.navigateNode(true);
              break;
            case "shiftUp":
              _this.shiftKeySelect(false, e);
              break;
            case "moveUp":
            case "ctrlUp":
            case "csUp":
              _this.navigateNode(false);
              break;
            case "home":
            case "shiftHome":
            case "ctrlHome":
            case "csHome":
              _this.navigateRootNode(true);
              break;
            case "end":
            case "shiftEnd":
            case "ctrlEnd":
            case "csEnd":
              _this.navigateRootNode(false);
              break;
            case "enter":
            case "ctrlEnter":
            case "shiftEnter":
            case "csEnter":
            case "shiftSpace":
            case "ctrlSpace":
              _this.toggleSelect(focusedNode, e);
              break;
            case "f2":
              if (_this.allowEditing && !focusedNode.classList.contains("e-disable")) {
                _this.createTextbox(focusedNode, e);
              }
              break;
            case "ctrlA":
              if (_this.allowMultiSelection) {
                var sNodes = selectAll("." + LISTITEM + ":not(." + ACTIVE2 + ")", _this.element);
                _this.selectGivenNodes(sNodes);
              }
              break;
          }
        }
      });
    };
    TreeView2.prototype.navigateToFocus = function(isUp) {
      var focusNode = this.getFocusedNode().querySelector("." + TEXTWRAP);
      var pos = focusNode.getBoundingClientRect();
      var parent = this.getScrollParent(this.element);
      if (!isNullOrUndefined(parent)) {
        var parentPos = parent.getBoundingClientRect();
        if (pos.bottom > parentPos.bottom) {
          parent.scrollTop += pos.bottom - parentPos.bottom;
        } else if (pos.top < parentPos.top) {
          parent.scrollTop -= parentPos.top - pos.top;
        }
      }
      var isVisible2 = this.isVisibleInViewport(focusNode);
      if (!isVisible2) {
        focusNode.scrollIntoView(isUp);
      }
    };
    TreeView2.prototype.isVisibleInViewport = function(txtWrap) {
      var pos = txtWrap.getBoundingClientRect();
      return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);
    };
    TreeView2.prototype.getScrollParent = function(node) {
      if (isNullOrUndefined(node)) {
        return null;
      }
      return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);
    };
    TreeView2.prototype.shiftKeySelect = function(isTowards, e) {
      if (this.allowMultiSelection) {
        var focusedNode = this.getFocusedNode();
        var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);
        this.removeHover();
        this.setFocusElement(nextNode);
        this.toggleSelect(nextNode, e, false);
        this.navigateToFocus(!isTowards);
      } else {
        this.navigateNode(isTowards);
      }
    };
    TreeView2.prototype.checkNode = function(e) {
      var focusedNode = this.getFocusedNode();
      var checkWrap = select("." + CHECKBOXWRAP, focusedNode);
      var isChecked = select(" ." + CHECKBOXFRAME, checkWrap).classList.contains(CHECK2);
      if (!focusedNode.classList.contains("e-disable")) {
        if (focusedNode.getElementsByClassName("e-checkbox-disabled").length == 0) {
          this.validateCheckNode(checkWrap, isChecked, focusedNode, e);
        }
      }
    };
    TreeView2.prototype.validateCheckNode = function(checkWrap, isCheck, li, e) {
      var _this = this;
      var currLi = closest(checkWrap, "." + LISTITEM);
      this.checkActionNodes = [];
      var ariaState = !isCheck ? "true" : "false";
      if (!isNullOrUndefined(ariaState)) {
        checkWrap.setAttribute("aria-checked", ariaState);
      }
      var eventArgs = this.getCheckEvent(currLi, isCheck ? "uncheck" : "check", e);
      this.trigger("nodeChecking", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);
        }
      });
    };
    TreeView2.prototype.nodeCheckingAction = function(checkWrap, isCheck, li, eventArgs, e) {
      if (this.checkedElement.indexOf(li.getAttribute("data-uid")) === -1) {
        this.checkedElement.push(li.getAttribute("data-uid"));
        if (this.autoCheck) {
          var child = this.getChildNodes(this.treeData, li.getAttribute("data-uid"));
          child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;
        }
      }
      this.changeState(checkWrap, isCheck ? "uncheck" : "check", e, true);
      if (this.autoCheck) {
        this.ensureChildCheckState(li);
        this.ensureParentCheckState(closest(closest(li, "." + PARENTITEM), "." + LISTITEM));
        var doCheck = void 0;
        if (eventArgs.action === "check") {
          doCheck = true;
        } else if (eventArgs.action === "uncheck") {
          doCheck = false;
        }
        this.ensureStateChange(li, doCheck);
      }
      this.nodeCheckedEvent(checkWrap, isCheck, e);
    };
    TreeView2.prototype.ensureStateChange = function(li, doCheck) {
      var childElement = select("." + PARENTITEM, li);
      var parentIndex = li.getAttribute("data-uid");
      var mapper = this.fields;
      if (this.dataType === 1 && this.autoCheck) {
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, "equal", parentIndex, true));
        for (var i = 0; i < resultData.length; i++) {
          var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;
          var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;
          if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {
            this.checkedNodes.push(resultId);
            var childItems = this.getChildNodes(this.treeData, resultId);
            this.getChildItems(childItems, doCheck);
            if (this.parentNodeCheck.indexOf(resultId) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
            }
          } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);
            if (isCheck === "true") {
              this.updateField(this.treeData, this.fields, resultId, "isChecked", null);
            }
            if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {
              var childNodes = this.getChildNodes(this.treeData, resultId);
              this.getChildItems(childNodes, doCheck);
              if (this.parentNodeCheck.indexOf(resultId) !== -1) {
                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);
              }
            }
          } else {
            var childItems = this.getChildNodes(this.treeData, resultId);
            this.getChildItems(childItems, doCheck);
          }
        }
      } else if (this.dataType === 1 && !this.autoCheck) {
        if (!doCheck) {
          var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, "equal", true, false));
          for (var i = 0; i < checkedData.length; i++) {
            var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;
            if (this.checkedNodes.indexOf(id) !== -1) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);
            }
            this.updateField(this.treeData, this.fields, id, "isChecked", null);
          }
          this.checkedNodes = [];
        } else {
          for (var i = 0; i < this.treeData.length; i++) {
            var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;
            if (this.checkedNodes.indexOf(checkedId) === -1) {
              this.checkedNodes.push(checkedId);
            }
          }
        }
      } else {
        var childItems = this.getChildNodes(this.treeData, parentIndex);
        if (childItems) {
          this.childStateChange(childItems, parentIndex, childElement, doCheck);
        }
      }
    };
    TreeView2.prototype.getChildItems = function(childItems, doCheck) {
      for (var i = 0; i < childItems.length; i++) {
        var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;
        var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;
        if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {
          this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);
        }
        if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {
          this.checkedNodes.push(childId);
        }
        if (childIsCheck === "true" && !doCheck) {
          this.updateField(this.treeData, this.fields, childId, "isChecked", null);
        }
        var subChildItems = this.getChildNodes(this.treeData, childId);
        if (subChildItems.length > 0) {
          this.getChildItems(subChildItems, doCheck);
        }
      }
    };
    TreeView2.prototype.childStateChange = function(childItems, parent, childElement, doCheck) {
      for (var i = 0; i < childItems.length; i++) {
        var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : "";
        var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;
        if (this.autoCheck) {
          if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
            this.checkedNodes.push(checkedChild);
            if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {
              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);
            }
          } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {
            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);
            if (isCheck === "true") {
              this.updateField(this.treeData, this.fields, checkedChild, "isChecked", null);
            }
          }
        } else if (!this.autoCheck) {
          if (!doCheck) {
            if (this.checkedNodes.indexOf(checkedChild) !== -1) {
              this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);
            }
            this.updateField(this.treeData, this.fields, checkedChild, "isChecked", null);
            this.checkedNodes = [];
          } else {
            if (this.checkedNodes.indexOf(checkedChild) === -1) {
              this.checkedNodes.push(checkedChild);
            }
          }
        }
        var subChild = this.getChildNodes([childItems[i]], checkedChild);
        if (subChild) {
          this.childStateChange(subChild, parent, childElement, doCheck);
        }
      }
    };
    TreeView2.prototype.allCheckNode = function(child, newCheck, checked, childCheck, validateCheck) {
      if (child) {
        for (var length_1 = 0; length_1 < child.length; length_1++) {
          var childId = getValue(this.fields.id, child[length_1]);
          var check = this.element.querySelector('[data-uid="' + childId + '"]');
          if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {
            if (check === null && !isNullOrUndefined(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {
              child[length_1][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;
              childCheck = child[length_1][this.fields.isChecked] !== false || checked === 2 ? 0 : null;
            }
          }
          if (newCheck.indexOf(childId.toString()) === -1 && isNullOrUndefined(checked)) {
            newCheck.push(childId.toString());
          }
          var hierChildId = getValue(this.fields.child.toString(), child[length_1]);
          if (getValue(this.fields.hasChildren, child[length_1]) === true || hierChildId) {
            var id = getValue(this.fields.id, child[length_1]);
            var childId_1 = void 0;
            if (this.dataType === 1) {
              childId_1 = this.getChildNodes(this.treeData, id.toString());
            } else {
              childId_1 = hierChildId;
            }
            if (childId_1) {
              isNullOrUndefined(validateCheck) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) : this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);
              childCheck = null;
            }
          }
          childCheck = null;
        }
      }
    };
    TreeView2.prototype.openNode = function(toBeOpened, e) {
      var focusedNode = this.getFocusedNode();
      var icon = select("div." + ICON3, focusedNode);
      if (toBeOpened) {
        if (!icon) {
          return;
        } else if (icon.classList.contains(EXPANDABLE)) {
          this.expandAction(focusedNode, icon, e);
        } else {
          this.focusNextNode(focusedNode, true);
        }
      } else {
        if (icon && icon.classList.contains(COLLAPSIBLE)) {
          this.collapseNode(focusedNode, icon, e);
        } else {
          var parentLi = closest(closest(focusedNode, "." + PARENTITEM), "." + LISTITEM);
          if (!parentLi) {
            return;
          } else {
            if (!parentLi.classList.contains("e-disable")) {
              this.setFocus(focusedNode, parentLi);
              this.navigateToFocus(true);
            }
          }
        }
      }
    };
    TreeView2.prototype.navigateNode = function(isTowards) {
      var focusedNode = this.getFocusedNode();
      this.focusNextNode(focusedNode, isTowards);
    };
    TreeView2.prototype.navigateRootNode = function(isBackwards) {
      var focusedNode = this.getFocusedNode();
      var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();
      if (!rootNode.classList.contains("e-disable")) {
        this.setFocus(focusedNode, rootNode);
        this.navigateToFocus(isBackwards);
      }
    };
    TreeView2.prototype.getFocusedNode = function() {
      var selectedItem;
      var fNode = select("." + LISTITEM + '[tabindex="0"]', this.element);
      if (isNullOrUndefined(fNode)) {
        selectedItem = select("." + LISTITEM, this.element);
      }
      return isNullOrUndefined(fNode) ? isNullOrUndefined(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;
    };
    TreeView2.prototype.focusNextNode = function(li, isTowards) {
      var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);
      this.setFocus(li, nextNode);
      this.navigateToFocus(!isTowards);
      if (nextNode.classList.contains("e-disable")) {
        var lastChild = nextNode.lastChild;
        if (nextNode.previousSibling == null && nextNode.classList.contains("e-level-1")) {
          this.focusNextNode(nextNode, true);
        } else if (nextNode.nextSibling == null && nextNode.classList.contains("e-node-collapsed")) {
          this.focusNextNode(nextNode, false);
        } else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {
          this.focusNextNode(nextNode, false);
        } else {
          this.focusNextNode(nextNode, isTowards);
        }
      }
    };
    TreeView2.prototype.getNextNode = function(li) {
      var index = this.liList.indexOf(li);
      var nextNode;
      do {
        index++;
        nextNode = this.liList[index];
        if (isNullOrUndefined(nextNode)) {
          return li;
        }
      } while (!isVisible(nextNode));
      return nextNode;
    };
    TreeView2.prototype.getPrevNode = function(li) {
      var index = this.liList.indexOf(li);
      var prevNode;
      do {
        index--;
        prevNode = this.liList[index];
        if (isNullOrUndefined(prevNode)) {
          return li;
        }
      } while (!isVisible(prevNode));
      return prevNode;
    };
    TreeView2.prototype.getRootNode = function() {
      var index = 0;
      var rootNode;
      do {
        rootNode = this.liList[index];
        index++;
      } while (!isVisible(rootNode));
      return rootNode;
    };
    TreeView2.prototype.getEndNode = function() {
      var index = this.liList.length - 1;
      var endNode;
      do {
        endNode = this.liList[index];
        index--;
      } while (!isVisible(endNode));
      return endNode;
    };
    TreeView2.prototype.setFocus = function(preNode, nextNode) {
      removeClass([preNode], FOCUS);
      preNode.setAttribute("tabindex", "-1");
      if (!nextNode.classList.contains("e-disable") && !nextNode.classList.contains(PREVENTSELECT)) {
        addClass([nextNode], FOCUS);
        nextNode.setAttribute("tabindex", "0");
        nextNode.focus();
        EventHandler.add(nextNode, "blur", this.focusOut, this);
        this.updateIdAttr(preNode, nextNode);
      }
    };
    TreeView2.prototype.updateIdAttr = function(preNode, nextNode) {
      this.element.removeAttribute("aria-activedescendant");
      if (preNode) {
        preNode.removeAttribute("id");
      }
      nextNode.setAttribute("id", this.element.id + "_active");
      this.element.setAttribute("aria-activedescendant", this.element.id + "_active");
    };
    TreeView2.prototype.focusIn = function() {
      if (!this.mouseDownStatus) {
        var focusedElement = this.getFocusedNode();
        focusedElement.setAttribute("tabindex", "0");
        addClass([focusedElement], FOCUS);
        EventHandler.add(focusedElement, "blur", this.focusOut, this);
      }
      this.mouseDownStatus = false;
    };
    TreeView2.prototype.focusOut = function(event) {
      var focusedElement = this.getFocusedNode();
      if (event.target == focusedElement) {
        removeClass([focusedElement], FOCUS);
        EventHandler.remove(focusedElement, "blur", this.focusOut);
      }
    };
    TreeView2.prototype.onMouseOver = function(e) {
      var target = e.target;
      var classList2 = target.classList;
      var currentLi = closest(target, "." + LISTITEM);
      if (!currentLi || classList2.contains(PARENTITEM) || classList2.contains(LISTITEM)) {
        this.removeHover();
        return;
      } else {
        if (currentLi && !currentLi.classList.contains("e-disable")) {
          this.setHover(currentLi);
        }
      }
    };
    TreeView2.prototype.setHover = function(li) {
      if (!li.classList.contains(HOVER) && !li.classList.contains(PREVENTSELECT)) {
        this.removeHover();
        addClass([li], HOVER);
      }
    };
    ;
    TreeView2.prototype.onMouseLeave = function(e) {
      this.removeHover();
    };
    TreeView2.prototype.removeHover = function() {
      var hoveredNode = selectAll("." + HOVER, this.element);
      if (hoveredNode && hoveredNode.length) {
        removeClass(hoveredNode, HOVER);
      }
    };
    ;
    TreeView2.prototype.getNodeData = function(currLi, fromDS) {
      if (!isNullOrUndefined(currLi) && currLi.classList.contains(LISTITEM) && !isNullOrUndefined(closest(currLi, "." + CONTROL)) && closest(currLi, "." + CONTROL).classList.contains(ROOT3)) {
        var id = currLi.getAttribute("data-uid");
        var text = this.getText(currLi, fromDS);
        var pNode = closest(currLi.parentNode, "." + LISTITEM);
        var pid = pNode ? pNode.getAttribute("data-uid") : null;
        var selected = currLi.classList.contains(ACTIVE2);
        var selectable = currLi.classList.contains(PREVENTSELECT) ? false : true;
        var expanded = currLi.getAttribute("aria-expanded") === "true" ? true : false;
        var hasChildren = currLi.getAttribute("aria-expanded") !== null ? true : (select("." + EXPANDABLE, currLi) || select("." + COLLAPSIBLE, currLi)) != null ? true : false;
        var checked = null;
        var checkboxElement = select("." + CHECKBOXWRAP, currLi);
        if (this.showCheckBox && checkboxElement) {
          checked = checkboxElement.getAttribute("aria-checked");
        }
        return {
          id,
          text,
          parentID: pid,
          selected,
          selectable,
          expanded,
          isChecked: checked,
          hasChildren
        };
      }
      return { id: "", text: "", parentID: "", selected: false, expanded: false, isChecked: "", hasChildren: false };
    };
    TreeView2.prototype.getText = function(currLi, fromDS) {
      if (fromDS) {
        var nodeData = this.getNodeObject(currLi.getAttribute("data-uid"));
        var level = parseFloat(currLi.getAttribute("aria-level"));
        var nodeFields = this.getFields(this.fields, level, 1);
        return getValue(nodeFields.text, nodeData);
      }
      return select("." + LISTTEXT, currLi).textContent;
    };
    TreeView2.prototype.getExpandEvent = function(currLi, e) {
      var nodeData = this.getNodeData(currLi);
      return { cancel: false, isInteracted: isNullOrUndefined(e) ? false : true, node: currLi, nodeData, event: e };
    };
    TreeView2.prototype.renderNodeTemplate = function(data, textEle, dataId) {
      var tempArr = this.nodeTemplateFn(data, this, "nodeTemplate" + dataId, this.element.id + "nodeTemplate", this.isStringTemplate, void 0, textEle, this.root);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, textEle);
      }
    };
    TreeView2.prototype.destroyTemplate = function(liEle) {
      this.clearTemplate(["nodeTemplate" + liEle.getAttribute("data-uid")]);
    };
    TreeView2.prototype.reRenderNodes = function() {
      this.updateListProp(this.fields);
      if (Browser.isIE) {
        this.ulElement = this.element.querySelector(".e-list-parent.e-ul");
        this.ulElement.parentElement.removeChild(this.ulElement);
      } else {
        this.element.innerHTML = "";
      }
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        this.clearTemplate();
      }
      this.setTouchClass();
      this.setProperties({ selectedNodes: [], checkedNodes: [], expandedNodes: [] }, true);
      this.checkedElement = [];
      this.isLoaded = false;
      this.setDataBinding(true);
    };
    TreeView2.prototype.setCssClass = function(oldClass, newClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass([this.element], oldClass.split(" "));
      }
      if (!isNullOrUndefined(newClass) && newClass !== "") {
        addClass([this.element], newClass.split(" "));
      }
    };
    TreeView2.prototype.editingHandler = function(e) {
      var target = e.target;
      if (!target || target.classList.contains(ROOT3) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON3) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {
        return;
      } else {
        var liEle = closest(target, "." + LISTITEM);
        this.createTextbox(liEle, e);
      }
    };
    TreeView2.prototype.createTextbox = function(liEle, e) {
      var _this = this;
      var oldInpEle = select("." + TREEINPUT, this.element);
      if (oldInpEle) {
        oldInpEle.blur();
      }
      var textEle = select("." + LISTTEXT, liEle);
      this.updateOldText(liEle);
      var innerEle = this.createElement("input", { className: TREEINPUT, attrs: { value: this.oldText } });
      var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);
      this.trigger("nodeEditing", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          var inpWidth = textEle.offsetWidth + 5;
          var style_1 = "width:" + inpWidth + "px";
          addClass([liEle], EDITING);
          if (!isNullOrUndefined(_this.nodeTemplateFn)) {
            _this.destroyTemplate(liEle);
          }
          if (_this.isReact) {
            setTimeout(function() {
              _this.renderTextBox(eventArgs, textEle, style_1);
            }, 5);
          } else {
            _this.renderTextBox(eventArgs, textEle, style_1);
          }
        }
      });
    };
    TreeView2.prototype.renderTextBox = function(eventArgs, textEle, style) {
      textEle.innerHTML = eventArgs.innerHtml;
      var inpEle = select("." + TREEINPUT, textEle);
      this.inputObj = Input.createInput({
        element: inpEle,
        properties: {
          enableRtl: this.enableRtl
        }
      }, this.createElement);
      this.inputObj.container.setAttribute("style", style);
      inpEle.focus();
      var inputEle = inpEle;
      inputEle.setSelectionRange(0, inputEle.value.length);
      this.wireInputEvents(inpEle);
    };
    TreeView2.prototype.updateOldText = function(liEle) {
      var id = liEle.getAttribute("data-uid");
      this.editData = this.getNodeObject(id);
      var level = parseFloat(liEle.getAttribute("aria-level"));
      this.editFields = this.getFields(this.fields, level, 1);
      this.oldText = getValue(this.editFields.text, this.editData);
    };
    TreeView2.prototype.inputFocusOut = function(e) {
      if (!select("." + TREEINPUT, this.element)) {
        return;
      }
      var target = e.target;
      var newText = target.value;
      var txtEle = closest(target, "." + LISTTEXT);
      var liEle = closest(target, "." + LISTITEM);
      detach(this.inputObj.container);
      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
        this.crudOperation("update", null, liEle, newText, null, null, true);
      } else {
        this.appendNewText(liEle, txtEle, newText, true);
      }
    };
    TreeView2.prototype.appendNewText = function(liEle, txtEle, newText, isInput) {
      var _this = this;
      var eventArgs = this.getEditEvent(liEle, newText, null);
      this.trigger("nodeEdited", eventArgs, function(observedArgs) {
        newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;
        _this.updateText(liEle, txtEle, newText, isInput);
        if (observedArgs.oldText !== newText) {
          _this.triggerEvent("nodeEdited", [_this.getNode(liEle)]);
        }
      });
    };
    TreeView2.prototype.updateText = function(liEle, txtEle, newText, isInput) {
      var newData = setValue(this.editFields.text, newText, this.editData);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        txtEle.innerText = "";
        var dataId = liEle.getAttribute("data-uid");
        this.renderNodeTemplate(newData, txtEle, dataId);
        this.renderReactTemplates();
      } else {
        this.enableHtmlSanitizer ? txtEle.innerText = newText : txtEle.innerHTML = newText;
      }
      if (isInput) {
        removeClass([liEle], EDITING);
        liEle.focus();
        EventHandler.add(liEle, "blur", this.focusOut, this);
        addClass([liEle], FOCUS);
      }
      if (this.allowTextWrap) {
        this.calculateWrap(liEle);
      }
    };
    TreeView2.prototype.getElement = function(ele) {
      if (isNullOrUndefined(ele)) {
        return null;
      } else if (typeof ele === "string") {
        return this.element.querySelector('[data-uid="' + ele + '"]');
      } else if (typeof ele === "object") {
        return getElement(ele);
      } else {
        return null;
      }
    };
    TreeView2.prototype.getId = function(ele) {
      if (isNullOrUndefined(ele)) {
        return null;
      } else if (typeof ele === "string") {
        return ele;
      } else if (typeof ele === "object") {
        return getElement(ele).getAttribute("data-uid");
      } else {
        return null;
      }
    };
    TreeView2.prototype.getEditEvent = function(liEle, newText, inpEle) {
      var data = this.getNodeData(liEle);
      return { cancel: false, newText, node: liEle, nodeData: data, oldText: this.oldText, innerHtml: inpEle };
    };
    TreeView2.prototype.getNodeObject = function(id) {
      var childNodes;
      if (isNullOrUndefined(id)) {
        return childNodes;
      } else if (this.dataType === 1) {
        for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {
          var dataId = getValue(this.fields.id, this.treeData[i]);
          if (!isNullOrUndefined(this.treeData[i]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {
            return this.treeData[i];
          }
        }
      } else {
        return this.getChildNodeObject(this.treeData, this.fields, id);
      }
      return childNodes;
    };
    TreeView2.prototype.getChildNodeObject = function(obj, mapper, id) {
      var newList;
      if (isNullOrUndefined(obj)) {
        return newList;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var dataId = getValue(mapper.id, obj[i]);
        if (obj[i] && dataId && dataId.toString() === id) {
          return obj[i];
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var childData = getValue(mapper.child, obj[i]);
          newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);
          if (newList !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var child = "child";
          newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);
          if (newList !== void 0) {
            break;
          }
        }
      }
      return newList;
    };
    TreeView2.prototype.setDragAndDrop = function(toBind) {
      if (toBind && !this.disabled) {
        this.initializeDrag();
      } else {
        this.destroyDrag();
      }
    };
    TreeView2.prototype.initializeDrag = function() {
      var _this = this;
      var virtualEle;
      var proxy2 = this;
      this.dragObj = new Draggable(this.element, {
        enableTailMode: true,
        enableAutoScroll: true,
        dragArea: this.dragArea,
        dragTarget: "." + TEXTWRAP,
        enableTapHold: true,
        tapHoldThreshold: 100,
        helper: function(e) {
          _this.dragTarget = e.sender.target;
          var dragRoot = closest(_this.dragTarget, "." + ROOT3);
          var dragWrap = closest(_this.dragTarget, "." + TEXTWRAP);
          _this.dragLi = closest(_this.dragTarget, "." + LISTITEM);
          if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {
            dragWrap = _this.dragTarget.nextElementSibling;
          }
          if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT3) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains("e-disable")) {
            return false;
          }
          var cloneEle = dragWrap.cloneNode(true);
          if (isNullOrUndefined(select("div." + ICON3, cloneEle))) {
            var icon = proxy2.createElement("div", { className: ICON3 + " " + EXPANDABLE });
            cloneEle.insertBefore(icon, cloneEle.children[0]);
          }
          var cssClass2 = DRAGITEM + " " + ROOT3 + " " + _this.cssClass + " " + (_this.enableRtl ? RTL7 : "");
          virtualEle = proxy2.createElement("div", { className: cssClass2 });
          virtualEle.appendChild(cloneEle);
          var nLen = _this.selectedNodes.length;
          if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE2)) {
            var cNode = proxy2.createElement("span", { className: DROPCOUNT, innerHTML: "" + nLen });
            virtualEle.appendChild(cNode);
          }
          document.body.appendChild(virtualEle);
          document.body.style.cursor = "";
          _this.dragData = _this.getNodeData(_this.dragLi);
          return virtualEle;
        },
        dragStart: function(e) {
          addClass([_this.element], DRAGGING);
          var listItem = closest(e.target, ".e-list-item");
          var level;
          if (listItem) {
            level = parseInt(listItem.getAttribute("aria-level"), 10);
          }
          var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);
          if (eventArgs.draggedNode.classList.contains(EDITING)) {
            _this.dragObj.intDestroy(e.event);
            _this.dragCancelAction(virtualEle);
          } else {
            _this.trigger("nodeDragStart", eventArgs, function(observedArgs) {
              if (observedArgs.cancel) {
                _this.dragObj.intDestroy(e.event);
                _this.dragCancelAction(virtualEle);
              } else {
                _this.dragStartAction = true;
              }
            });
          }
        },
        drag: function(e) {
          _this.dragObj.setProperties({ cursorAt: { top: !isNullOrUndefined(e.event.targetTouches) || Browser.isDevice ? 60 : -20 } });
          _this.dragAction(e, virtualEle);
        },
        dragStop: function(e) {
          removeClass([_this.element], DRAGGING);
          _this.removeVirtualEle();
          var dropTarget = e.target;
          var preventTargetExpand = false;
          var dropRoot = closest(dropTarget, "." + DROPPABLE);
          var isHelperElement = true;
          if (!dropTarget || !dropRoot) {
            detach(e.helper);
            document.body.style.cursor = "";
            isHelperElement = false;
          }
          var listItem = closest(dropTarget, ".e-list-item");
          var level;
          if (listItem) {
            level = parseInt(listItem.getAttribute("aria-level"), 10);
          }
          var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);
          eventArgs.preventTargetExpand = preventTargetExpand;
          _this.trigger("nodeDragStop", eventArgs, function(observedArgs) {
            _this.dragParent = observedArgs.draggedParentNode;
            _this.preventExpand = observedArgs.preventTargetExpand;
            if (observedArgs.cancel) {
              if (e.helper.parentNode) {
                detach(e.helper);
              }
              document.body.style.cursor = "";
              isHelperElement = false;
            }
            _this.dragStartAction = false;
          });
        }
      });
      this.dropObj = new Droppable(this.element, {
        out: function(e) {
          if (!isNullOrUndefined(e) && !e.target.classList.contains(SIBLING) && (_this.dropObj.dragData.default && _this.dropObj.dragData.default.helper.classList.contains(ROOT3))) {
            document.body.style.cursor = "not-allowed";
          }
        },
        over: function(e) {
          document.body.style.cursor = "";
        },
        drop: function(e) {
          _this.dropAction(e);
        }
      });
    };
    TreeView2.prototype.dragCancelAction = function(virtualEle) {
      detach(virtualEle);
      removeClass([this.element], DRAGGING);
      this.dragStartAction = false;
    };
    TreeView2.prototype.dragAction = function(e, virtualEle) {
      var dropRoot = closest(e.target, "." + DROPPABLE);
      var dropWrap = closest(e.target, "." + TEXTWRAP);
      var icon = select("div." + ICON3, virtualEle);
      removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);
      this.removeVirtualEle();
      document.body.style.cursor = "";
      var classList2 = e.target.classList;
      if (this.fullRowSelect && !dropWrap && !isNullOrUndefined(classList2) && classList2.contains(FULLROW)) {
        dropWrap = e.target.nextElementSibling;
      }
      if (dropRoot) {
        var dropLi = closest(e.target, "." + LISTITEM);
        var checkWrapper = closest(e.target, "." + CHECKBOXWRAP);
        var collapse = closest(e.target, "." + COLLAPSIBLE);
        var expand = closest(e.target, "." + EXPANDABLE);
        if (!dropRoot.classList.contains(ROOT3) || dropWrap && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {
          if (this.hasTemplate && dropLi) {
            var templateTarget = select(this.fullRowSelect ? "." + FULLROW : "." + TEXTWRAP, dropLi);
            if (e && (!expand && !collapse) && e.event.offsetY < 7 && !checkWrapper || (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3)) {
              var index = this.fullRowSelect ? 1 : 0;
              this.appendIndicator(dropLi, icon, index);
            } else if (e && (!expand && !collapse) && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10 || (expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19)) {
              var index = this.fullRowSelect ? 2 : 1;
              this.appendIndicator(dropLi, icon, index);
            } else {
              addClass([icon], DROPIN);
            }
          } else {
            if (dropLi && e && (!expand && !collapse) && e.event.offsetY < 7 && !checkWrapper || (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3)) {
              var index = this.fullRowSelect ? 1 : 0;
              this.appendIndicator(dropLi, icon, index);
            } else if (dropLi && e && (!expand && !collapse) && (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10) && !checkWrapper || (expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19)) {
              var index = this.fullRowSelect ? 2 : 1;
              this.appendIndicator(dropLi, icon, index);
            } else {
              addClass([icon], DROPIN);
            }
          }
        } else if (e.target.nodeName === "LI" && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {
          addClass([icon], DROPNEXT);
          this.renderVirtualEle(e);
        } else if (e.target.classList.contains(SIBLING)) {
          addClass([icon], DROPNEXT);
        } else {
          addClass([icon], DROPOUT);
        }
      } else {
        addClass([icon], NODROP);
        document.body.style.cursor = "not-allowed";
      }
      var listItem = closest(e.target, ".e-list-item");
      var level;
      if (listItem) {
        level = parseInt(listItem.getAttribute("aria-level"), 10);
      }
      var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);
      if (eventArgs.dropIndicator) {
        removeClass([icon], eventArgs.dropIndicator);
      }
      this.trigger("nodeDragging", eventArgs);
      if (eventArgs.dropIndicator) {
        addClass([icon], eventArgs.dropIndicator);
      }
    };
    TreeView2.prototype.appendIndicator = function(dropLi, icon, index) {
      addClass([icon], DROPNEXT);
      var virEle = this.createElement("div", { className: SIBLING });
      dropLi.insertBefore(virEle, dropLi.children[index]);
    };
    TreeView2.prototype.dropAction = function(e) {
      var offsetY = e.event.offsetY;
      var dropTarget = e.target;
      var dragObj;
      var level;
      var drop = false;
      var dragInstance;
      var nodeData = [];
      var liArray = [];
      dragInstance = e.dragData.draggable;
      for (var i_1 = 0; i_1 < dragInstance.ej2_instances.length; i_1++) {
        if (dragInstance.ej2_instances[i_1] instanceof TreeView_1) {
          dragObj = dragInstance.ej2_instances[i_1];
          break;
        }
      }
      if (dragObj && dragObj.dragTarget) {
        var dragTarget = dragObj.dragTarget;
        var dragLi = closest(dragTarget, "." + LISTITEM);
        var dropLi = closest(dropTarget, "." + LISTITEM);
        liArray.push(dragLi);
        if (dropLi == null && dropTarget.classList.contains(ROOT3)) {
          dropLi = dropTarget.firstElementChild;
        }
        detach(e.droppedElement);
        document.body.style.cursor = "";
        if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
          if (this.fields.dataSource instanceof DataManager === false) {
            this.preventExpand = false;
          }
          return;
        }
        if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE2)) {
          var sNodes = selectAll("." + ACTIVE2, dragObj.element);
          liArray = sNodes;
          if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {
            for (var i_2 = sNodes.length - 1; i_2 >= 0; i_2--) {
              if (dropLi.isSameNode(sNodes[i_2]) || this.isDescendant(sNodes[i_2], dropLi)) {
                continue;
              }
              this.appendNode(dropTarget, sNodes[i_2], dropLi, e, dragObj, offsetY);
            }
          } else {
            for (var i_3 = 0; i_3 < sNodes.length; i_3++) {
              if (dropLi.isSameNode(sNodes[i_3]) || this.isDescendant(sNodes[i_3], dropLi)) {
                continue;
              }
              this.appendNode(dropTarget, sNodes[i_3], dropLi, e, dragObj, offsetY);
            }
          }
        } else {
          this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);
        }
        level = parseInt(dragLi.getAttribute("aria-level"), 10);
        drop = true;
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
      }
      for (var i = 0; i < liArray.length; i++) {
        nodeData.push(this.getNode(liArray[i]));
      }
      this.trigger("nodeDropped", this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));
      if (dragObj.element.id !== this.element.id) {
        dragObj.triggerEvent("nodeDropped", nodeData);
        this.isNodeDropped = true;
        this.fields.dataSource = this.treeData;
      }
      this.triggerEvent("nodeDropped", nodeData);
    };
    TreeView2.prototype.appendNode = function(dropTarget, dragLi, dropLi, e, dragObj, offsetY) {
      var checkWrapper = closest(dropTarget, "." + CHECKBOXWRAP);
      var collapse = closest(e.target, "." + COLLAPSIBLE);
      var expand = closest(e.target, "." + EXPANDABLE);
      if (!dragLi.classList.contains("e-disable") && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {
        if (dropTarget.nodeName === "LI") {
          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
        } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT3)) {
          if (dropTarget.firstElementChild.nodeName === "UL") {
            this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
          }
        } else if (dropTarget.classList.contains("e-icon-collapsible") || dropTarget.classList.contains("e-icon-expandable")) {
          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
        } else {
          this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);
        }
      } else {
        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);
      }
    };
    TreeView2.prototype.dropAsSiblingNode = function(dragLi, dropLi, e, dragObj) {
      var dropUl = closest(dropLi, "." + PARENTITEM);
      var dragParentUl = closest(dragLi, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      var pre;
      if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {
        pre = false;
      } else if (e.event.offsetY < 2) {
        pre = true;
      } else if (e.target.classList.contains("e-icon-expandable") || e.target.classList.contains("e-icon-collapsible")) {
        if (e.event.offsetY < 5 || e.event.offsetX < 3) {
          pre = true;
        } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {
          pre = false;
        }
      }
      if (e.target.classList.contains("e-icon-expandable") || e.target.classList.contains("e-icon-collapsible")) {
        var target = e.target.closest("li");
        dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);
      } else {
        dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);
      }
      this.moveData(dragLi, dropLi, dropUl, pre, dragObj);
      this.updateElement(dragParentUl, dragParentLi);
      this.updateAriaLevel(dragLi);
      if (dragObj.element.id === this.element.id) {
        this.updateList();
      } else {
        dragObj.updateInstance();
        this.updateInstance();
      }
    };
    TreeView2.prototype.dropAsChildNode = function(dragLi, dropLi, dragObj, index, e, pos, isCheck) {
      var dragParentUl = closest(dragLi, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      var dropParentUl = closest(dropLi, "." + PARENTITEM);
      var templateTarget;
      if (e && e.target) {
        templateTarget = select(this.fullRowSelect ? "." + FULLROW : "." + TEXTWRAP, dropLi);
      }
      if (e && pos < 7 && !isCheck) {
        dropParentUl.insertBefore(dragLi, dropLi);
        this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);
      } else if (e && (e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10) && !isCheck && !this.hasTemplate) {
        dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
        this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
      } else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {
        dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
        this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);
      } else {
        var dropUl = this.expandParent(dropLi);
        var childLi = dropUl.childNodes[index];
        dropUl.insertBefore(dragLi, childLi);
        this.moveData(dragLi, childLi, dropUl, true, dragObj);
      }
      this.updateElement(dragParentUl, dragParentLi);
      this.updateAriaLevel(dragLi);
      if (dragObj.element.id === this.element.id) {
        this.updateList();
      } else {
        dragObj.updateInstance();
        this.updateInstance();
      }
    };
    TreeView2.prototype.moveData = function(dragLi, dropLi, dropUl, pre, dragObj) {
      var dropParentLi = closest(dropUl, "." + LISTITEM);
      var id = this.getId(dragLi);
      var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);
      var refId = this.getId(dropLi);
      var index = this.getDataPos(this.treeData, this.fields, refId);
      var parentId = this.getId(dropParentLi);
      if (this.dataType === 1) {
        this.updateField(this.treeData, this.fields, parentId, "hasChildren", true);
        var pos = isNullOrUndefined(index) ? this.treeData.length : pre ? index : index + 1;
        if (isNullOrUndefined(parentId) && !this.hasPid) {
          delete removedData[0][this.fields.parentID];
        } else {
          var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;
          setValue(this.fields.parentID, currPid, removedData[0]);
        }
        this.treeData.splice(pos, 0, removedData[0]);
        if (dragObj.element.id !== this.element.id) {
          var childData = dragObj.removeChildNodes(id);
          pos++;
          for (var i = 0, len = childData.length; i < len; i++) {
            this.treeData.splice(pos, 0, childData[i]);
            pos++;
          }
          dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      } else {
        this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);
      }
    };
    TreeView2.prototype.expandParent = function(dropLi) {
      var dropIcon = select("div." + ICON3, dropLi);
      if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {
        this.expandAction(dropLi, dropIcon, null);
      }
      var dropUl = select("." + PARENTITEM, dropLi);
      if (this.preventExpand === true && !dropUl && dropIcon) {
        this.renderChildNodes(dropLi);
      }
      dropUl = select("." + PARENTITEM, dropLi);
      if (!isNullOrUndefined(dropUl) && this.preventExpand === true) {
        dropUl.style.display = "none";
      }
      if (!isNullOrUndefined(dropUl) && this.preventExpand === false) {
        dropUl.style.display = "block";
      }
      if (isNullOrUndefined(dropUl) && this.preventExpand === true) {
        if (isNullOrUndefined(dropIcon)) {
          ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
        }
        var icon = select("div." + ICON3, dropLi);
        if (icon) {
          icon.classList.add("e-icon-expandable");
        }
        dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);
        dropLi.appendChild(dropUl);
        if (icon) {
          removeClass([icon], COLLAPSIBLE);
        } else {
          ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);
        }
        dropLi.setAttribute("aria-expanded", "false");
        dropUl.style.display = "none";
      }
      if (isNullOrUndefined(dropUl)) {
        var args = this.expandArgs;
        if (isNullOrUndefined(args) || args.name != "nodeExpanding") {
          this.trigger("nodeExpanding", this.getExpandEvent(dropLi, null));
        }
        if (isNullOrUndefined(dropIcon)) {
          ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
        }
        var icon = select("div." + ICON3, dropLi);
        if (icon) {
          removeClass([icon], EXPANDABLE);
        } else {
          ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);
          icon = select("div." + ICON3, dropLi);
          removeClass([icon], EXPANDABLE);
        }
        dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);
        dropLi.appendChild(dropUl);
        this.addExpand(dropLi);
        this.trigger("nodeExpanded", this.getExpandEvent(dropLi, null));
      }
      return dropUl;
    };
    TreeView2.prototype.updateElement = function(dragParentUl, dragParentLi) {
      if (dragParentLi && dragParentUl.childElementCount === 0) {
        var dragIcon = select("div." + ICON3, dragParentLi);
        detach(dragParentUl);
        detach(dragIcon);
        var parentId = this.getId(dragParentLi);
        this.updateField(this.treeData, this.fields, parentId, "hasChildren", false);
        this.removeExpand(dragParentLi, true);
      }
    };
    TreeView2.prototype.updateAriaLevel = function(dragLi) {
      var level = this.parents(dragLi, "." + PARENTITEM).length;
      dragLi.setAttribute("aria-level", "" + level);
      this.updateChildAriaLevel(select("." + PARENTITEM, dragLi), level + 1);
    };
    TreeView2.prototype.updateChildAriaLevel = function(element2, level) {
      if (!isNullOrUndefined(element2)) {
        var cNodes = element2.childNodes;
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var liEle = cNodes[i];
          liEle.setAttribute("aria-level", "" + level);
          this.updateChildAriaLevel(select("." + PARENTITEM, liEle), level + 1);
        }
      }
    };
    TreeView2.prototype.renderVirtualEle = function(e) {
      var pre;
      if (e.event.offsetY > e.target.offsetHeight - 2) {
        pre = false;
      } else if (e.event.offsetY < 2) {
        pre = true;
      }
      var virEle = this.createElement("div", { className: SIBLING });
      var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;
      e.target.insertBefore(virEle, e.target.children[index]);
    };
    TreeView2.prototype.removeVirtualEle = function() {
      var sibEle = select("." + SIBLING);
      if (sibEle) {
        detach(sibEle);
      }
    };
    TreeView2.prototype.destroyDrag = function() {
      if (this.dragObj && this.dropObj) {
        this.dragObj.destroy();
        this.dropObj.destroy();
      }
    };
    TreeView2.prototype.getDragEvent = function(event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {
      var dropLi = dropTarget ? closest(dropTarget, "." + LISTITEM) : null;
      var dropData = dropLi ? this.getNodeData(dropLi) : null;
      var draggedNode = obj ? obj.dragLi : dragNode;
      var draggedNodeData = obj ? obj.dragData : null;
      var newParent = dropTarget ? this.parents(dropTarget, "." + LISTITEM) : null;
      var dragLiParent = obj.dragLi.parentElement;
      var dragParent = obj.dragLi ? closest(dragLiParent, "." + LISTITEM) : null;
      var targetParent = null;
      var indexValue = null;
      var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];
      var iconClass = null;
      var node = drop === true ? draggedNode : dropLi;
      var index = node ? closest(node, ".e-list-parent") : null;
      var i = 0;
      var position = null;
      dragParent = obj.dragLi && dragParent === null ? closest(dragLiParent, "." + ROOT3) : dragParent;
      dragParent = drop === true ? this.dragParent : dragParent;
      if (cloneEle) {
        while (i < 4) {
          if (select("." + ICON3, cloneEle).classList.contains(iconCss[i])) {
            iconClass = iconCss[i];
            break;
          }
          i++;
        }
      }
      if (index) {
        var dropTar = 0;
        for (i = 0; i < index.childElementCount; i++) {
          dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;
          if (drop !== true && index.children[i].classList.contains("e-hover")) {
            indexValue = event.offsetY >= 23 ? i + 1 : i;
            break;
          } else if (index.children[i] === node) {
            indexValue = event.offsetY >= 23 ? i : i;
            break;
          }
        }
        indexValue = dropTar !== 0 ? --indexValue : indexValue;
        position = iconClass == "e-drop-in" ? "Inside" : event.offsetY < 7 ? "Before" : "After";
      }
      if (dropTarget) {
        if (newParent.length === 0) {
          targetParent = null;
        } else if (dropTarget.classList.contains(LISTITEM)) {
          targetParent = newParent[0];
        } else {
          targetParent = newParent[1];
        }
      }
      if (dropLi === draggedNode) {
        targetParent = dropLi;
      }
      if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {
        targetParent = dropLi;
        if (drop !== true) {
          level = ++level;
          var parent_2 = targetParent ? select(".e-list-parent", targetParent) : null;
          indexValue = parent_2 ? parent_2.children.length : 0;
          if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {
            var parent_3 = targetParent.hasAttribute("data-uid") ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute("data-uid").toString()) : null;
            indexValue = parent_3 ? parent_3.length : 0;
          }
        }
      }
      return {
        cancel: false,
        clonedNode: cloneEle,
        event,
        draggedNode,
        draggedNodeData,
        droppedNode: dropLi,
        droppedNodeData: dropData,
        dropIndex: indexValue,
        dropLevel: level,
        draggedParentNode: dragParent,
        dropTarget: targetParent,
        dropIndicator: iconClass,
        target,
        position
      };
    };
    TreeView2.prototype.addFullRow = function(toAdd) {
      var len = this.liList.length;
      if (toAdd) {
        for (var i = 0; i < len; i++) {
          this.createFullRow(this.liList[i]);
        }
      } else {
        for (var i = 0; i < len; i++) {
          var rowDiv = select("." + FULLROW, this.liList[i]);
          detach(rowDiv);
        }
      }
    };
    TreeView2.prototype.createFullRow = function(item) {
      var rowDiv = this.createElement("div", { className: FULLROW });
      item.insertBefore(rowDiv, item.childNodes[0]);
    };
    TreeView2.prototype.addMultiSelect = function(toAdd) {
      if (toAdd) {
        var liEles = selectAll("." + LISTITEM + ':not([aria-selected="true"])', this.element);
        for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {
          var ele = liEles_1[_i];
          ele.setAttribute("aria-selected", "false");
        }
      } else {
        var liEles = selectAll("." + LISTITEM + '[aria-selected="false"]', this.element);
        for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {
          var ele = liEles_2[_a];
          ele.removeAttribute("aria-selected");
        }
      }
    };
    TreeView2.prototype.collapseByLevel = function(element2, level, excludeHiddenNodes) {
      if (level > 0 && !isNullOrUndefined(element2)) {
        var cNodes = this.getVisibleNodes(excludeHiddenNodes, element2.childNodes);
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var liEle = cNodes[i];
          var icon = select("." + COLLAPSIBLE, select("." + TEXTWRAP, liEle));
          if (!isNullOrUndefined(icon)) {
            this.collapseNode(liEle, icon, null);
          }
          this.collapseByLevel(select("." + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.collapseAllNodes = function(excludeHiddenNodes) {
      var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll("." + COLLAPSIBLE, this.element));
      for (var i = 0, len = cIcons.length; i < len; i++) {
        var icon = cIcons[i];
        var liEle = closest(icon, "." + LISTITEM);
        this.collapseNode(liEle, icon, null);
      }
    };
    TreeView2.prototype.expandByLevel = function(element2, level, excludeHiddenNodes) {
      if (level > 0 && !isNullOrUndefined(element2)) {
        var eNodes = this.getVisibleNodes(excludeHiddenNodes, element2.childNodes);
        for (var i = 0, len = eNodes.length; i < len; i++) {
          var liEle = eNodes[i];
          var icon = select("." + EXPANDABLE, select("." + TEXTWRAP, liEle));
          if (!isNullOrUndefined(icon)) {
            this.expandAction(liEle, icon, null);
          }
          this.expandByLevel(select("." + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.expandAllNodes = function(excludeHiddenNodes) {
      var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll("." + EXPANDABLE, this.element));
      for (var i = 0, len = eIcons.length; i < len; i++) {
        var icon = eIcons[i];
        var liEle = closest(icon, "." + LISTITEM);
        this.expandAction(liEle, icon, null, true);
      }
    };
    TreeView2.prototype.getVisibleNodes = function(excludeHiddenNodes, nodes) {
      var vNodes = Array.prototype.slice.call(nodes);
      if (excludeHiddenNodes) {
        for (var i = 0; i < vNodes.length; i++) {
          if (!isVisible(vNodes[i])) {
            vNodes.splice(i, 1);
            i--;
          }
        }
      }
      return vNodes;
    };
    TreeView2.prototype.removeNode = function(node) {
      var dragParentUl = closest(node, "." + PARENTITEM);
      var dragParentLi = closest(dragParentUl, "." + LISTITEM);
      if (!isNullOrUndefined(this.nodeTemplateFn)) {
        this.destroyTemplate(node);
      }
      detach(node);
      this.updateElement(dragParentUl, dragParentLi);
      this.removeData(node);
    };
    TreeView2.prototype.updateInstance = function() {
      this.updateList();
      this.updateSelectedNodes();
      this.updateExpandedNodes();
    };
    TreeView2.prototype.updateList = function() {
      this.liList = Array.prototype.slice.call(selectAll("." + LISTITEM, this.element));
    };
    TreeView2.prototype.updateSelectedNodes = function() {
      this.setProperties({ selectedNodes: [] }, true);
      var sNodes = selectAll("." + ACTIVE2, this.element);
      this.selectGivenNodes(sNodes);
    };
    TreeView2.prototype.updateExpandedNodes = function() {
      this.setProperties({ expandedNodes: [] }, true);
      var eNodes = selectAll('[aria-expanded="true"]', this.element);
      for (var i = 0, len = eNodes.length; i < len; i++) {
        this.addExpand(eNodes[i]);
      }
    };
    TreeView2.prototype.removeData = function(node) {
      if (this.dataType === 1) {
        var dm = new DataManager(this.treeData);
        var id = this.getId(node);
        var data = {};
        var newId = this.isNumberTypeId ? parseFloat(id) : id;
        data[this.fields.id] = newId;
        dm.remove(this.fields.id, data);
        this.removeChildNodes(id);
      } else {
        var id = this.getId(node);
        this.updateChildField(this.treeData, this.fields, id, null, null, true);
      }
    };
    TreeView2.prototype.removeChildNodes = function(parentId) {
      var cNodes = this.getChildGroup(this.groupedData, parentId, false);
      var childData = [];
      if (cNodes) {
        for (var i = 0, len = cNodes.length; i < len; i++) {
          var dm = new DataManager(this.treeData);
          var id = getValue(this.fields.id, cNodes[i]).toString();
          var data = {};
          var currId = this.isNumberTypeId ? parseFloat(id) : id;
          data[this.fields.id] = currId;
          var nodeData = dm.remove(this.fields.id, data);
          childData.push(nodeData[0]);
          this.removeChildNodes(id);
        }
      }
      return childData;
    };
    TreeView2.prototype.doGivenAction = function(nodes, selector, toExpand) {
      for (var i = 0, len = nodes.length; i < len; i++) {
        var liEle = this.getElement(nodes[i]);
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        var icon = select("." + selector, select("." + TEXTWRAP, liEle));
        if (!isNullOrUndefined(icon)) {
          toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);
        }
      }
    };
    TreeView2.prototype.addGivenNodes = function(nodes, dropLi, index, isRemote, dropEle) {
      if (nodes.length === 0) {
        return;
      }
      var sNodes = this.getSortedData(nodes);
      var level = dropLi ? parseFloat(dropLi.getAttribute("aria-level")) + 1 : 1;
      if (isRemote) {
        this.updateMapper(level);
      }
      var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);
      var id = this.getId(dropLi);
      var refNode;
      var dropIcon1;
      if (!isNullOrUndefined(dropLi)) {
        dropIcon1 = select("div." + ICON3, dropLi);
      }
      if (this.dataType === 1 && dropIcon1 && dropIcon1.classList.contains(EXPANDABLE) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
        this.preventExpand = true;
      }
      if (this.dataType !== 1) {
        this.addChildData(this.treeData, this.fields, id, nodes, index);
        this.isFirstRender = false;
      }
      var dropUl;
      if (!dropEle) {
        dropUl = dropLi ? this.expandParent(dropLi) : select("." + PARENTITEM, this.element);
      } else {
        dropUl = dropEle;
      }
      refNode = dropUl.childNodes[index];
      if (!this.isFirstRender || this.dataType === 1) {
        var args = this.expandArgs;
        if (refNode || this.sortOrder === "None") {
          for (var i = 0; i < li.length; i++) {
            dropUl.insertBefore(li[i], refNode);
          }
          if (this.dataType === 1 && !isNullOrUndefined(dropLi) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
            this.preventExpand = false;
            var dropIcon = select("div." + ICON3, dropLi);
            if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && (isNullOrUndefined(args) || args.name != "nodeExpanding")) {
              this.expandAction(dropLi, dropIcon, null);
            }
          }
        }
        if (!refNode && (this.sortOrder === "Ascending" || this.sortOrder === "Descending")) {
          if (dropUl.childNodes.length === 0) {
            for (var i = 0; i < li.length; i++) {
              dropUl.insertBefore(li[i], refNode);
            }
            if (this.dataType === 1 && !isNullOrUndefined(dropLi) && !isNullOrUndefined(this.element.offsetParent) && !this.element.offsetParent.parentElement.classList.contains("e-filemanager")) {
              this.preventExpand = false;
              var dropIcon = select("div." + ICON3, dropLi);
              if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && (isNullOrUndefined(args) || args.name != "nodeExpanding")) {
                this.expandAction(dropLi, dropIcon, null);
              }
            }
          } else {
            var cNodes = dropUl.childNodes;
            for (var i = 0; i < li.length; i++) {
              for (var j = 0; j < cNodes.length; j++) {
                var returnValue = this.sortOrder === "Ascending" ? cNodes[j].textContent.toUpperCase() > li[i].innerText.toUpperCase() : cNodes[j].textContent.toUpperCase() < li[i].innerText.toUpperCase();
                if (returnValue) {
                  dropUl.insertBefore(li[i], cNodes[j]);
                  break;
                }
                dropUl.insertBefore(li[i], cNodes[cNodes.length]);
              }
            }
          }
        }
      }
      if (this.dataType === 1) {
        this.updateField(this.treeData, this.fields, id, "hasChildren", true);
        var refId = this.getId(refNode);
        var pos = isNullOrUndefined(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);
        for (var j = 0; j < nodes.length; j++) {
          if (!isNullOrUndefined(id)) {
            var currId = this.isNumberTypeId ? parseFloat(id) : id;
            setValue(this.fields.parentID, currId, nodes[j]);
          }
          this.treeData.splice(pos, 0, nodes[j]);
          pos++;
        }
      }
      this.finalizeNode(dropUl);
    };
    TreeView2.prototype.updateMapper = function(level) {
      var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);
      this.updateListProp(mapper);
    };
    TreeView2.prototype.updateListProp = function(mapper) {
      var prop = this.getActualProperties(mapper);
      this.listBaseOption.fields = prop;
      this.listBaseOption.fields.url = prop.hasOwnProperty("navigateUrl") ? prop.navigateUrl : "navigateUrl";
    };
    TreeView2.prototype.getDataPos = function(obj, mapper, id) {
      var pos = null;
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[i]);
        if (obj[i] && nodeId && nodeId.toString() === id) {
          return i;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var data = getValue(mapper.child, obj[i]);
          pos = this.getDataPos(data, this.getChildMapper(mapper), id);
          if (pos !== null) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var items = getValue("child", obj[i]);
          pos = this.getDataPos(items, this.getChildMapper(mapper), id);
          if (pos !== null) {
            break;
          }
        }
      }
      return pos;
    };
    TreeView2.prototype.addChildData = function(obj, mapper, id, data, index) {
      var updated;
      if (isNullOrUndefined(id)) {
        index = isNullOrUndefined(index) ? obj.length : index;
        for (var k = 0, len = data.length; k < len; k++) {
          obj.splice(index, 0, data[k]);
          index++;
        }
        return updated;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[i]);
        if (obj[i] && nodeId && nodeId.toString() === id) {
          if (typeof mapper.child === "string" && (obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null) || this.fields.dataSource instanceof DataManager && obj[i].hasOwnProperty("child")) {
            var key = typeof mapper.child === "string" ? mapper.child : "child";
            var childData = getValue(key, obj[i]);
            if (isNullOrUndefined(childData)) {
              childData = [];
            }
            index = isNullOrUndefined(index) ? childData.length : index;
            for (var k = 0, len = data.length; k < len; k++) {
              childData.splice(index, 0, data[k]);
              index++;
            }
          } else {
            var key = typeof mapper.child === "string" ? mapper.child : "child";
            obj[i][key] = data;
          }
          return true;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var childObj = getValue(mapper.child, obj[i]);
          updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);
          if (updated !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var childData = getValue("child", obj[i]);
          updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);
          if (updated !== void 0) {
            break;
          }
        }
      }
      return updated;
    };
    TreeView2.prototype.doDisableAction = function(nodes) {
      var validNodes = this.nodeType(nodes);
      var validID = this.checkValidId(validNodes);
      this.validArr = [];
      for (var i = 0, len = validID.length; i < len; i++) {
        var id = validID[i][this.fields.id].toString();
        if (id && this.disableNode.indexOf(id) === -1) {
          this.disableNode.push(id);
        }
        var liEle = this.getElement(id);
        if (liEle) {
          liEle.setAttribute("aria-disabled", "true");
          addClass([liEle], DISABLE);
        }
      }
    };
    TreeView2.prototype.doEnableAction = function(nodes) {
      var strNodes = this.nodeType(nodes);
      for (var i = 0, len = strNodes.length; i < len; i++) {
        var liEle = this.getElement(strNodes[i]);
        var id = strNodes[i];
        if (id && this.disableNode.indexOf(id) !== -1) {
          this.disableNode.splice(this.disableNode.indexOf(id), 1);
        }
        if (liEle) {
          liEle.removeAttribute("aria-disabled");
          removeClass([liEle], DISABLE);
        }
      }
    };
    TreeView2.prototype.nodeType = function(nodes) {
      var validID = [];
      for (var i = 0, len = nodes.length; i < len; i++) {
        var id = void 0;
        if (typeof nodes[i] == "string") {
          id = nodes[i] ? nodes[i].toString() : null;
        } else if (typeof nodes[i] === "object") {
          id = nodes[i] ? nodes[i].getAttribute("data-uid").toString() : null;
        }
        if (validID.indexOf(id) == -1) {
          validID.push(id);
        }
      }
      return validID;
    };
    TreeView2.prototype.checkValidId = function(node) {
      var _this = this;
      if (this.dataType === 1) {
        this.validArr = this.treeData.filter(function(data) {
          return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;
        });
      } else if (this.dataType === 2) {
        for (var k = 0; k < this.treeData.length; k++) {
          var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;
          if (node.indexOf(id) !== -1) {
            this.validArr.push(this.treeData[k]);
          }
          var childItems = getValue(this.fields.child.toString(), this.treeData[k]);
          if (childItems) {
            this.filterNestedChild(childItems, node);
          }
        }
      }
      return this.validArr;
    };
    TreeView2.prototype.filterNestedChild = function(treeData, nodes) {
      for (var k = 0; k < treeData.length; k++) {
        var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;
        if (nodes.indexOf(id) !== -1) {
          this.validArr.push(treeData[k]);
        }
        var childItems = getValue(this.fields.child.toString(), treeData[k]);
        if (childItems) {
          this.filterNestedChild(childItems, nodes);
        }
      }
    };
    TreeView2.prototype.setTouchClass = function() {
      var ele = closest(this.element, "." + BIGGER);
      this.touchClass = isNullOrUndefined(ele) ? "" : SMALL;
    };
    TreeView2.prototype.updatePersistProp = function() {
      this.removeField(this.treeData, this.fields, ["selected", "expanded"]);
      var sleNodes = this.selectedNodes;
      for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {
        this.updateField(this.treeData, this.fields, sleNodes[l], "selected", true);
      }
      var enodes = this.expandedNodes;
      for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {
        this.updateField(this.treeData, this.fields, enodes[k], "expanded", true);
      }
      if (this.showCheckBox) {
        this.removeField(this.treeData, this.fields, ["isChecked"]);
        var cnodes = this.checkedNodes;
        for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {
          this.updateField(this.treeData, this.fields, cnodes[m], "isChecked", true);
        }
      }
    };
    TreeView2.prototype.removeField = function(obj, mapper, names) {
      if (isNullOrUndefined(obj) || isNullOrUndefined(mapper)) {
        return;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        for (var j = 0; j < names.length; j++) {
          var field = this.getMapperProp(mapper, names[j]);
          if (!isNullOrUndefined(obj[i][field])) {
            delete obj[i][field];
          }
        }
        if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          this.removeField(getValue("child", obj[i]), this.getChildMapper(mapper), names);
        }
      }
    };
    TreeView2.prototype.getMapperProp = function(mapper, fieldName) {
      switch (fieldName) {
        case "selected":
          return !isNullOrUndefined(mapper.selected) ? mapper.selected : "selected";
        case "expanded":
          return !isNullOrUndefined(mapper.expanded) ? mapper.expanded : "expanded";
        case "isChecked":
          return !isNullOrUndefined(mapper.isChecked) ? mapper.isChecked : "isChecked";
        case "hasChildren":
          return !isNullOrUndefined(mapper.hasChildren) ? mapper.hasChildren : "hasChildren";
        default:
          return fieldName;
      }
    };
    TreeView2.prototype.updateField = function(obj, mapper, id, key, value) {
      var childNodes;
      if (isNullOrUndefined(id)) {
        return;
      } else if (this.dataType === 1) {
        var newId = this.isNumberTypeId ? parseFloat(id) : id;
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", newId, false));
        setValue(this.getMapperProp(mapper, key), value, resultData[0]);
      } else {
        this.updateChildField(obj, mapper, id, key, value);
      }
    };
    TreeView2.prototype.updateChildField = function(obj, mapper, id, key, value, remove2) {
      var removedData;
      if (isNullOrUndefined(obj)) {
        return removedData;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, obj[i]);
        if (obj[i] && nodeId && nodeId.toString() === id) {
          if (remove2) {
            removedData = obj.splice(i, 1);
          } else {
            setValue(this.getMapperProp(mapper, key), value, obj[i]);
            removedData = [];
          }
          return removedData;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var childData = getValue(mapper.child, obj[i]);
          removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove2);
          if (removedData !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var childItems = getValue("child", obj[i]);
          removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove2);
          if (removedData !== void 0) {
            break;
          }
        }
      }
      return removedData;
    };
    TreeView2.prototype.triggerEvent = function(action, node) {
      this.renderReactTemplates();
      if (action === "addNodes") {
        var nodeData = [];
        for (var i = 0; i < node.length; i++) {
          nodeData.push(this.getNode(this.getElement(isNullOrUndefined(node[i][this.fields.id]) ? getValue(this.fields.id, node[i]).toString() : null)));
        }
        node = nodeData;
      }
      var eventArgs = { data: this.treeData, action, nodeData: node };
      this.trigger("dataSourceChanged", eventArgs);
    };
    TreeView2.prototype.wireInputEvents = function(inpEle) {
      EventHandler.add(inpEle, "blur", this.inputFocusOut, this);
    };
    TreeView2.prototype.wireEditingEvents = function(toBind) {
      var _this = this;
      if (toBind && !this.disabled) {
        var proxy_2 = this;
        this.touchEditObj = new Touch(this.element, {
          tap: function(e) {
            if (_this.isDoubleTapped(e) && e.tapCount === 2) {
              e.originalEvent.preventDefault();
              proxy_2.editingHandler(e.originalEvent);
            }
          }
        });
      } else {
        if (this.touchEditObj) {
          this.touchEditObj.destroy();
        }
      }
    };
    TreeView2.prototype.wireClickEvent = function(toBind) {
      if (toBind) {
        var proxy_3 = this;
        this.touchClickObj = new Touch(this.element, {
          tap: function(e) {
            proxy_3.clickHandler(e);
          }
        });
      } else {
        if (this.touchClickObj) {
          this.touchClickObj.destroy();
        }
      }
    };
    TreeView2.prototype.wireExpandOnEvent = function(toBind) {
      var _this = this;
      if (toBind) {
        var proxy_4 = this;
        this.touchExpandObj = new Touch(this.element, {
          tap: function(e) {
            if ((_this.expandOnType === "Click" || _this.expandOnType === "DblClick" && _this.isDoubleTapped(e) && e.tapCount === 2) && e.originalEvent.which !== 3) {
              proxy_4.expandHandler(e);
            }
          }
        });
      } else {
        if (this.touchExpandObj) {
          this.touchExpandObj.destroy();
        }
      }
    };
    TreeView2.prototype.mouseDownHandler = function(e) {
      this.mouseDownStatus = true;
      if (e.shiftKey || e.ctrlKey) {
        e.preventDefault();
      }
      if (e.ctrlKey && this.allowMultiSelection) {
        EventHandler.add(this.element, "contextmenu", this.preventContextMenu, this);
      }
    };
    ;
    TreeView2.prototype.preventContextMenu = function(e) {
      e.preventDefault();
    };
    TreeView2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "mousedown", this.mouseDownHandler, this);
      this.wireClickEvent(true);
      if (this.expandOnType !== "None") {
        this.wireExpandOnEvent(true);
      }
      EventHandler.add(this.element, "mouseover", this.onMouseOver, this);
      EventHandler.add(this.element, "mouseout", this.onMouseLeave, this);
      this.keyboardModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    TreeView2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "mousedown", this.mouseDownHandler);
      this.wireClickEvent(false);
      this.wireExpandOnEvent(false);
      EventHandler.remove(this.element, "mouseover", this.onMouseOver);
      EventHandler.remove(this.element, "mouseout", this.onMouseLeave);
      if (!this.disabled) {
        this.keyboardModule.destroy();
      }
    };
    TreeView2.prototype.parents = function(element2, selector) {
      var matched = [];
      var el = element2.parentNode;
      while (!isNullOrUndefined(el)) {
        if (matches(el, selector)) {
          matched.push(el);
        }
        el = el.parentNode;
      }
      return matched;
    };
    TreeView2.prototype.isDoubleTapped = function(e) {
      var target = e.originalEvent.target;
      var secondTap;
      if (target && e.tapCount) {
        if (e.tapCount === 1) {
          this.firstTap = closest(target, "." + LISTITEM);
        } else if (e.tapCount === 2) {
          secondTap = closest(target, "." + LISTITEM);
        }
      }
      return this.firstTap === secondTap;
    };
    TreeView2.prototype.isDescendant = function(parent, child) {
      var node = child.parentNode;
      while (!isNullOrUndefined(node)) {
        if (node === parent) {
          return true;
        }
        node = node.parentNode;
      }
      return false;
    };
    TreeView2.prototype.showSpinner = function(element2) {
      addClass([element2], LOAD);
      createSpinner({
        target: element2,
        width: Browser.isDevice ? 16 : 14
      }, this.createElement);
      showSpinner(element2);
    };
    TreeView2.prototype.hideSpinner = function(element2) {
      hideSpinner(element2);
      element2.innerHTML = "";
      removeClass([element2], LOAD);
    };
    TreeView2.prototype.setCheckedNodes = function(nodes) {
      nodes = JSON.parse(JSON.stringify(nodes));
      this.uncheckAll(this.checkedNodes);
      this.setIndeterminate(nodes);
      if (nodes.length > 0) {
        this.checkAll(nodes);
      }
    };
    TreeView2.prototype.setValidCheckedNode = function(node) {
      if (this.dataType === 1) {
        var mapper = this.fields;
        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, "equal", node, true));
        if (resultData[0]) {
          this.setChildCheckState(resultData, node, resultData[0]);
          if (this.autoCheck) {
            var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;
            var childNodes = this.getChildNodes(this.treeData, parent_4);
            var count = 0;
            for (var len = 0; len < childNodes.length; len++) {
              var childId = childNodes[len][this.fields.id].toString();
              if (this.checkedNodes.indexOf(childId) !== -1) {
                count++;
              }
            }
            if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {
              this.checkedNodes.push(parent_4);
            }
          }
        }
      } else if (this.dataType === 2) {
        for (var a = 0; a < this.treeData.length; a++) {
          var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : "";
          if (index === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
            break;
          }
          var childItems = getValue(this.fields.child.toString(), this.treeData[a]);
          if (childItems) {
            this.setChildCheckState(childItems, node, this.treeData[a]);
          }
        }
      }
    };
    TreeView2.prototype.setChildCheckState = function(childItems, node, treeData) {
      var checkedParent;
      var count = 0;
      if (this.dataType === 1) {
        if (treeData) {
          checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;
        }
        for (var index = 0; index < childItems.length; index++) {
          var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;
          if (treeData && checkedParent && this.autoCheck) {
            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {
              this.checkedNodes.push(checkNode);
            }
          }
          if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
          }
          var subChildItems = this.getChildNodes(this.treeData, checkNode);
          if (subChildItems) {
            this.setChildCheckState(subChildItems, node, treeData);
          }
        }
      } else {
        if (treeData) {
          checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : "";
        }
        for (var index = 0; index < childItems.length; index++) {
          var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : "";
          if (treeData && checkedParent && this.autoCheck) {
            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {
              this.checkedNodes.push(checkedChild);
            }
          }
          if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {
            this.checkedNodes.push(node);
          }
          var subChildItems = getValue(this.fields.child.toString(), childItems[index]);
          if (subChildItems) {
            this.setChildCheckState(subChildItems, node, childItems[index]);
          }
          if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {
            count++;
          }
          if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {
            this.checkedNodes.push(checkedParent);
          }
        }
      }
    };
    TreeView2.prototype.setIndeterminate = function(nodes) {
      for (var i = 0; i < nodes.length; i++) {
        this.setValidCheckedNode(nodes[i]);
      }
    };
    TreeView2.prototype.updatePosition = function(id, newData, isRefreshChild, childValue) {
      if (this.dataType === 1) {
        var pos = this.getDataPos(this.treeData, this.fields, id);
        this.treeData.splice(pos, 1, newData);
        if (isRefreshChild) {
          this.removeChildNodes(id);
          for (var j = 0; j < childValue.length; j++) {
            this.treeData.splice(pos, 0, childValue[j]);
            pos++;
          }
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      } else {
        this.updateChildPosition(this.treeData, this.fields, id, [newData], void 0);
      }
    };
    TreeView2.prototype.updateChildPosition = function(treeData, mapper, currID, newData, index) {
      var found;
      for (var i = 0, objlen = treeData.length; i < objlen; i++) {
        var nodeId = getValue(mapper.id, treeData[i]);
        if (treeData[i] && nodeId && nodeId.toString() === currID) {
          treeData[i] = newData[0];
          return true;
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, treeData[i]))) {
          var childObj = getValue(mapper.child, treeData[i]);
          found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);
          if (found !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", treeData[i]))) {
          var childData = getValue("child", treeData[i]);
          found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);
          if (found !== void 0) {
            break;
          }
        }
      }
      return found;
    };
    TreeView2.prototype.dynamicState = function() {
      this.setDragAndDrop(this.allowDragAndDrop);
      this.wireEditingEvents(this.allowEditing);
      if (!this.disabled) {
        this.wireEvents();
        this.setRipple();
      } else {
        this.unWireEvents();
        this.rippleFn();
        this.rippleIconFn();
      }
    };
    TreeView2.prototype.crudOperation = function(operation, nodes, target, newText, newNode, index, prevent) {
      var _this = this;
      var data = this.fields.dataSource;
      var matchedArr = [];
      var query = this.getQuery(this.fields);
      var key = this.fields.id;
      var crud;
      var changes = {
        addedRecords: [],
        deletedRecords: [],
        changedRecords: []
      };
      var nodesID = [];
      if (nodes) {
        nodesID = this.nodeType(nodes);
      } else if (target) {
        if (typeof target == "string") {
          nodesID[0] = target.toString();
        } else if (typeof target === "object") {
          nodesID[0] = target.getAttribute("data-uid").toString();
        }
      }
      for (var i = 0, len = nodesID.length; i < len; i++) {
        var liEle = this.getElement(nodesID[i]);
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        var removedData = this.getNodeObject(nodesID[i]);
        matchedArr.push(removedData);
      }
      switch (operation) {
        case "delete":
          if (nodes.length == 1) {
            crud = data.remove(key, matchedArr[0], query.fromTable, query);
          } else {
            changes.deletedRecords = matchedArr;
            crud = data.saveChanges(changes, key, query.fromTable, query);
          }
          crud.then(function(e) {
            return _this.deleteSuccess(nodesID);
          }).catch(function(e) {
            return _this.dmFailure(e);
          });
          break;
        case "update":
          matchedArr[0][this.fields.text] = newText;
          crud = data.update(key, matchedArr[0], query.fromTable, query);
          crud.then(function(e) {
            return _this.editSucess(target, newText, prevent);
          }).catch(function(e) {
            return _this.dmFailure(e, target, prevent);
          });
          break;
        case "insert":
          if (newNode.length == 1) {
            crud = data.insert(newNode[0], query.fromTable, query);
          } else {
            var arr = [];
            for (var i = 0, len = newNode.length; i < len; i++) {
              arr.push(newNode[i]);
            }
            changes.addedRecords = arr;
            crud = data.saveChanges(changes, key, query.fromTable, query);
          }
          crud.then(function(e) {
            var dropLi = _this.getElement(target);
            _this.addSuccess(newNode, dropLi, index);
            _this.preventExpand = false;
          }).catch(function(e) {
            return _this.dmFailure(e);
          });
          break;
      }
    };
    TreeView2.prototype.deleteSuccess = function(nodes) {
      var nodeData = [];
      for (var i = 0, len = nodes.length; i < len; i++) {
        var liEle = this.getElement(nodes[i]);
        nodeData.push(this.getNode(liEle));
        if (isNullOrUndefined(liEle)) {
          continue;
        }
        this.removeNode(liEle);
      }
      this.updateInstance();
      if (this.dataType === 1) {
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      }
      this.triggerEvent("removeNode", nodeData);
    };
    TreeView2.prototype.editSucess = function(target, newText, prevent) {
      var liEle = this.getElement(target);
      var txtEle = select("." + LISTTEXT, liEle);
      this.appendNewText(liEle, txtEle, newText, prevent);
    };
    TreeView2.prototype.addSuccess = function(nodes, dropLi, index) {
      var dropUl;
      var icon = dropLi ? dropLi.querySelector("." + ICON3) : null;
      var proxy2 = this;
      if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector("." + PARENTITEM) === null) {
        proxy2.renderChildNodes(dropLi, null, function() {
          dropUl = dropLi.querySelector("." + PARENTITEM);
          proxy2.addGivenNodes(nodes, dropLi, index, true, dropUl);
          proxy2.triggerEvent("addNodes", nodes);
        });
      } else {
        this.addGivenNodes(nodes, dropLi, index, true);
        this.triggerEvent("addNodes", nodes);
      }
    };
    TreeView2.prototype.dmFailure = function(e, target, prevent) {
      if (target) {
        this.updatePreviousText(target, prevent);
      }
      this.trigger("actionFailure", { error: e });
    };
    TreeView2.prototype.updatePreviousText = function(target, prevent) {
      var liEle = this.getElement(target);
      var txtEle = select("." + LISTTEXT, liEle);
      this.updateText(liEle, txtEle, this.oldText, prevent);
    };
    TreeView2.prototype.getHierarchicalParentId = function(node, data, parentsID) {
      var _this = this;
      var index = data.findIndex(function(data2) {
        return data2[_this.fields.id] && data2[_this.fields.id].toString() === node;
      });
      if (index == -1) {
        for (var i = 0; i < data.length; i++) {
          var childItems = getValue(this.fields.child.toString(), data[i]);
          if (!isNullOrUndefined(childItems)) {
            index = childItems.findIndex(function(data2) {
              return data2[_this.fields.id] && data2[_this.fields.id].toString() === node;
            });
            if (index == -1) {
              this.getHierarchicalParentId(node, childItems, parentsID);
            } else {
              parentsID.push(data[i][this.fields.id].toString());
              this.getHierarchicalParentId(data[i][this.fields.id].toString(), this.treeData, parentsID);
              break;
            }
          }
        }
      }
      return parentsID;
    };
    TreeView2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "allowDragAndDrop":
            this.setDragAndDrop(this.allowDragAndDrop);
            break;
          case "dragArea":
            if (this.allowDragAndDrop) {
              this.dragObj.dragArea = this.dragArea;
            }
            break;
          case "allowEditing":
            this.wireEditingEvents(this.allowEditing);
            break;
          case "allowMultiSelection":
            if (this.selectedNodes.length > 1) {
              var sNode = this.getElement(this.selectedNodes[0]);
              this.isLoaded = false;
              this.removeSelectAll();
              this.selectNode(sNode, null);
              this.isLoaded = true;
            }
            this.setMultiSelect(this.allowMultiSelection);
            this.addMultiSelect(this.allowMultiSelection);
            break;
          case "allowTextWrap":
            this.setTextWrap();
            this.updateWrap();
            break;
          case "checkedNodes":
            if (this.showCheckBox) {
              this.checkedNodes = oldProp.checkedNodes;
              this.setCheckedNodes(newProp.checkedNodes);
            }
            break;
          case "autoCheck":
            if (this.showCheckBox) {
              this.autoCheck = newProp.autoCheck;
              this.ensureIndeterminate();
            }
            break;
          case "cssClass":
            this.setCssClass(oldProp.cssClass, newProp.cssClass);
            break;
          case "enableRtl":
            this.setEnableRtl();
            break;
          case "expandedNodes":
            this.isAnimate = false;
            this.setProperties({ expandedNodes: [] }, true);
            this.collapseAll();
            this.isInitalExpand = true;
            this.setProperties({ expandedNodes: isNullOrUndefined(newProp.expandedNodes) ? [] : newProp.expandedNodes }, true);
            this.doExpandAction();
            this.isInitalExpand = false;
            this.isAnimate = true;
            break;
          case "expandOn":
            this.wireExpandOnEvent(false);
            this.setExpandOnType();
            if (this.expandOnType !== "None" && !this.disabled) {
              this.wireExpandOnEvent(true);
            }
            break;
          case "disabled":
            this.setDisabledMode();
            this.dynamicState();
            break;
          case "fields":
            this.isAnimate = false;
            this.isFieldChange = true;
            this.initialRender = true;
            this.reRenderNodes();
            this.initialRender = false;
            this.isAnimate = true;
            this.isFieldChange = false;
            break;
          case "fullRowSelect":
            this.setFullRow(this.fullRowSelect);
            this.addFullRow(this.fullRowSelect);
            if (this.allowTextWrap) {
              this.setTextWrap();
              this.updateWrap();
            }
            break;
          case "loadOnDemand":
            if (this.loadOnDemand === false && !this.onLoaded) {
              var nodes = this.element.querySelectorAll("li");
              var i = 0;
              while (i < nodes.length) {
                if (nodes[i].getAttribute("aria-expanded") !== "true") {
                  this.renderChildNodes(nodes[i], true, null, true);
                }
                i++;
              }
              this.onLoaded = true;
            }
            break;
          case "nodeTemplate":
            this.hasTemplate = false;
            this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
            this.reRenderNodes();
            break;
          case "selectedNodes":
            this.removeSelectAll();
            this.setProperties({ selectedNodes: newProp.selectedNodes }, true);
            this.doSelectionAction();
            break;
          case "showCheckBox":
            this.reRenderNodes();
            break;
          case "sortOrder":
            this.reRenderNodes();
            break;
          case "fullRowNavigable":
            this.setProperties({ fullRowNavigable: newProp.fullRowNavigable }, true);
            this.listBaseOption.itemNavigable = newProp.fullRowNavigable;
            this.reRenderNodes();
            break;
        }
      }
    };
    TreeView2.prototype.destroy = function() {
      this.clearTemplate();
      this.element.removeAttribute("aria-activedescendant");
      this.unWireEvents();
      this.wireEditingEvents(false);
      if (!this.disabled) {
        this.rippleFn();
        this.rippleIconFn();
      }
      this.setCssClass(this.cssClass, null);
      this.setDragAndDrop(false);
      this.setFullRow(false);
      if (this.ulElement && this.ulElement.parentElement) {
        this.ulElement.parentElement.removeChild(this.ulElement);
      }
      _super.prototype.destroy.call(this);
    };
    TreeView2.prototype.addNodes = function(nodes, target, index, preventTargetExpand) {
      if (isNullOrUndefined(nodes)) {
        return;
      }
      nodes = JSON.parse(JSON.stringify(nodes));
      var dropLi = this.getElement(target);
      this.preventExpand = preventTargetExpand;
      if (this.fields.dataSource instanceof DataManager) {
        if (!this.isOffline) {
          this.crudOperation("insert", null, target, null, nodes, index, this.preventExpand);
        } else {
          this.addSuccess(nodes, dropLi, index);
        }
      } else if (this.dataType === 2) {
        this.addGivenNodes(nodes, dropLi, index);
      } else {
        if (dropLi) {
          this.addGivenNodes(nodes, dropLi, index);
        } else {
          nodes = this.getSortedData(nodes);
          for (var i = 0; i < nodes.length; i++) {
            var pid = getValue(this.fields.parentID, nodes[i]);
            dropLi = pid ? this.getElement(pid.toString()) : pid;
            this.addGivenNodes([nodes[i]], dropLi, index);
          }
        }
        this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
      }
      this.updateCheckedStateFromDS();
      if (this.showCheckBox && dropLi) {
        this.ensureParentCheckState(dropLi);
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
        this.triggerEvent("addNodes", nodes);
      }
    };
    TreeView2.prototype.beginEdit = function(node) {
      var ele = this.getElement(node);
      if (isNullOrUndefined(ele) || this.disabled) {
        return;
      }
      this.createTextbox(ele, null);
    };
    TreeView2.prototype.checkAll = function(nodes) {
      if (this.showCheckBox) {
        this.doCheckBoxAction(nodes, true);
      }
    };
    TreeView2.prototype.collapseAll = function(nodes, level, excludeHiddenNodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doGivenAction(nodes, COLLAPSIBLE, false);
      } else {
        if (level > 0) {
          this.collapseByLevel(select("." + PARENTITEM, this.element), level, excludeHiddenNodes);
        } else {
          this.collapseAllNodes(excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.disableNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doDisableAction(nodes);
      }
    };
    TreeView2.prototype.enableNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doEnableAction(nodes);
      }
    };
    TreeView2.prototype.ensureVisible = function(node) {
      var parentsId = [];
      if (this.dataType == 1) {
        var nodeData = this.getTreeData(node);
        while (nodeData.length != 0 && !isNullOrUndefined(nodeData[0][this.fields.parentID])) {
          parentsId.push(nodeData[0][this.fields.parentID].toString());
          nodeData = this.getTreeData(nodeData[0][this.fields.parentID].toString());
        }
      } else if (this.dataType == 2) {
        parentsId = this.getHierarchicalParentId(node, this.treeData, parentsId).reverse();
      }
      this.expandAll(parentsId);
      var liEle = this.getElement(node);
      if (!isNullOrUndefined(liEle)) {
        if (typeof node == "object") {
          var parents = this.parents(liEle, "." + LISTITEM);
          this.expandAll(parents);
        }
        setTimeout(function() {
          liEle.scrollIntoView({ behavior: "smooth" });
        }, 450);
      }
    };
    TreeView2.prototype.expandAll = function(nodes, level, excludeHiddenNodes) {
      if (!isNullOrUndefined(nodes)) {
        this.doGivenAction(nodes, EXPANDABLE, true);
      } else {
        if (level > 0) {
          this.expandByLevel(select("." + PARENTITEM, this.element), level, excludeHiddenNodes);
        } else {
          this.expandAllNodes(excludeHiddenNodes);
        }
      }
    };
    TreeView2.prototype.getAllCheckedNodes = function() {
      var checkNodes = this.checkedNodes;
      return checkNodes;
    };
    TreeView2.prototype.getDisabledNodes = function() {
      var disabledNodes = this.disableNode;
      return disabledNodes;
    };
    TreeView2.prototype.getNode = function(node) {
      var ele = this.getElement(node);
      return this.getNodeData(ele, true);
    };
    TreeView2.prototype.getTreeData = function(node) {
      var id = this.getId(node);
      this.updatePersistProp();
      if (isNullOrUndefined(id)) {
        return this.treeData;
      } else {
        var data = this.getNodeObject(id);
        return isNullOrUndefined(data) ? [] : [data];
      }
    };
    TreeView2.prototype.moveNodes = function(sourceNodes, target, index, preventTargetExpand) {
      var dropLi = this.getElement(target);
      var nodeData = [];
      if (isNullOrUndefined(dropLi)) {
        return;
      }
      for (var i = 0; i < sourceNodes.length; i++) {
        var dragLi = this.getElement(sourceNodes[i]);
        nodeData.push(this.getNode(dragLi));
        if (isNullOrUndefined(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
          continue;
        }
        this.preventExpand = preventTargetExpand;
        this.dropAsChildNode(dragLi, dropLi, this, index);
      }
      if (this.fields.dataSource instanceof DataManager === false) {
        this.preventExpand = false;
      }
      this.triggerEvent("moveNodes", nodeData);
    };
    TreeView2.prototype.refreshNode = function(target, newData) {
      if (isNullOrUndefined(target) || isNullOrUndefined(newData)) {
        return;
      }
      var id;
      var isRefreshChild = false;
      if (this.dataType == 1 && newData.length > 1) {
        isRefreshChild = true;
      } else if (this.dataType == 2 && newData.length === 1) {
        var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);
        if (!isNullOrUndefined(updatedChildValue)) {
          isRefreshChild = true;
        }
      }
      var liEle = this.getElement(target);
      id = liEle ? liEle.getAttribute("data-uid") : target ? target.toString() : null;
      this.refreshData = this.getNodeObject(id);
      newData = JSON.parse(JSON.stringify(newData));
      var newNodeData;
      var parentData;
      if (this.dataType == 1 && isRefreshChild) {
        for (var k = 0; k < newData.length; k++) {
          if (isNullOrUndefined(newData[k][this.fields.parentID])) {
            parentData = newData[k];
            newData.splice(k, 1);
            break;
          }
        }
        newNodeData = extend({}, this.refreshData, parentData);
      } else {
        newNodeData = extend({}, this.refreshData, newData[0]);
      }
      if (isNullOrUndefined(liEle)) {
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
        return;
      }
      this.isRefreshed = true;
      var level = parseFloat(liEle.getAttribute("aria-level"));
      var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);
      var ul = select("." + PARENTITEM, liEle);
      var childItems = getValue(this.fields.child.toString(), newNodeData);
      if (isRefreshChild && ul || isRefreshChild && !isNullOrUndefined(childItems)) {
        var parentEle = liEle.parentElement;
        var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);
        remove(liEle);
        parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
        if (isRefreshChild && ul) {
          this.expandAll([id]);
        }
      } else {
        var txtEle = select("." + TEXTWRAP, liEle);
        var newTextEle = select("." + TEXTWRAP, newliEle[0]);
        var icon = select("div." + ICON3, txtEle);
        var newIcon = select("div." + ICON3, newTextEle);
        if (icon && newIcon) {
          if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {
            removeClass([newIcon], EXPANDABLE);
            addClass([newIcon], COLLAPSIBLE);
          } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {
            removeClass([newIcon], COLLAPSIBLE);
            addClass([newIcon], EXPANDABLE);
          } else if (icon.classList.contains("interaction")) {
            addClass([newIcon], "interaction");
          }
        }
        remove(txtEle);
        var fullEle = select("." + FULLROW, liEle);
        fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);
        this.updatePosition(id, newNodeData, isRefreshChild, newData);
      }
      liEle = this.getElement(target);
      if (newNodeData[this.fields.tooltip]) {
        liEle.setAttribute("title", newNodeData[this.fields.tooltip]);
      }
      if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {
        var attr = {};
        merge(attr, newNodeData[this.fields.htmlAttributes]);
        if (attr.class) {
          addClass([liEle], attr.class.split(" "));
          delete attr.class;
        } else {
          attributes(liEle, attr);
        }
      }
      if (this.selectedNodes.indexOf(id) !== -1) {
        liEle.setAttribute("aria-selected", "true");
        addClass([liEle], ACTIVE2);
      }
      this.isRefreshed = false;
      this.triggerEvent("refreshNode", [this.getNode(liEle)]);
    };
    TreeView2.prototype.removeNodes = function(nodes) {
      if (!isNullOrUndefined(nodes)) {
        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {
          this.crudOperation("delete", nodes);
        } else {
          this.deleteSuccess(nodes);
        }
      }
    };
    TreeView2.prototype.updateNode = function(target, newText) {
      var _this = this;
      if (isNullOrUndefined(target) || isNullOrUndefined(newText) || !this.allowEditing) {
        return;
      }
      var liEle = this.getElement(target);
      if (isNullOrUndefined(liEle)) {
        return;
      }
      var txtEle = select("." + LISTTEXT, liEle);
      this.updateOldText(liEle);
      var eventArgs = this.getEditEvent(liEle, null, null);
      this.trigger("nodeEditing", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          if (_this.fields.dataSource instanceof DataManager && !_this.isOffline) {
            _this.crudOperation("update", null, target, newText, null, null, false);
          } else {
            _this.appendNewText(liEle, txtEle, newText, false);
          }
        }
      });
    };
    TreeView2.prototype.uncheckAll = function(nodes) {
      if (this.showCheckBox) {
        this.doCheckBoxAction(nodes, false);
      }
    };
    var TreeView_1;
    __decorate27([
      Property(false)
    ], TreeView2.prototype, "allowDragAndDrop", void 0);
    __decorate27([
      Property(false)
    ], TreeView2.prototype, "allowEditing", void 0);
    __decorate27([
      Property(false)
    ], TreeView2.prototype, "allowMultiSelection", void 0);
    __decorate27([
      Property(false)
    ], TreeView2.prototype, "allowTextWrap", void 0);
    __decorate27([
      Complex({}, NodeAnimationSettings)
    ], TreeView2.prototype, "animation", void 0);
    __decorate27([
      Property()
    ], TreeView2.prototype, "checkedNodes", void 0);
    __decorate27([
      Property("")
    ], TreeView2.prototype, "cssClass", void 0);
    __decorate27([
      Property(false)
    ], TreeView2.prototype, "disabled", void 0);
    __decorate27([
      Property(null)
    ], TreeView2.prototype, "dragArea", void 0);
    __decorate27([
      Property(false)
    ], TreeView2.prototype, "enableHtmlSanitizer", void 0);
    __decorate27([
      Property(false)
    ], TreeView2.prototype, "enablePersistence", void 0);
    __decorate27([
      Property()
    ], TreeView2.prototype, "expandedNodes", void 0);
    __decorate27([
      Property("Auto")
    ], TreeView2.prototype, "expandOn", void 0);
    __decorate27([
      Complex({}, FieldsSettings)
    ], TreeView2.prototype, "fields", void 0);
    __decorate27([
      Property(true)
    ], TreeView2.prototype, "fullRowSelect", void 0);
    __decorate27([
      Property(true)
    ], TreeView2.prototype, "loadOnDemand", void 0);
    __decorate27([
      Property()
    ], TreeView2.prototype, "locale", void 0);
    __decorate27([
      Property()
    ], TreeView2.prototype, "nodeTemplate", void 0);
    __decorate27([
      Property()
    ], TreeView2.prototype, "selectedNodes", void 0);
    __decorate27([
      Property("None")
    ], TreeView2.prototype, "sortOrder", void 0);
    __decorate27([
      Property(false)
    ], TreeView2.prototype, "showCheckBox", void 0);
    __decorate27([
      Property(true)
    ], TreeView2.prototype, "autoCheck", void 0);
    __decorate27([
      Property(false)
    ], TreeView2.prototype, "fullRowNavigable", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "actionFailure", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "created", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "dataBound", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "dataSourceChanged", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "drawNode", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "destroyed", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "keyPress", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeChecked", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeChecking", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeClicked", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeCollapsed", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeCollapsing", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeDragging", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeDragStart", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeDragStop", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeDropped", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeEdited", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeEditing", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeExpanded", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeExpanding", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeSelected", void 0);
    __decorate27([
      Event()
    ], TreeView2.prototype, "nodeSelecting", void 0);
    TreeView2 = TreeView_1 = __decorate27([
      NotifyPropertyChanges
    ], TreeView2);
    return TreeView2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/sidebar/sidebar.js
var __extends31 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate28 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CONTROL2 = "e-control";
var ROOT4 = "e-sidebar";
var DOCKER = "e-dock";
var CLOSE2 = "e-close";
var OPEN = "e-open";
var TRASITION = "e-transition";
var DEFAULTBACKDROP = "e-sidebar-overlay";
var RTL8 = "e-rtl";
var RIGHT = "e-right";
var LEFT = "e-left";
var OVER = "e-over";
var PUSH = "e-push";
var SLIDE = "e-slide";
var VISIBILITY = "e-visibility";
var DISPLAY = "e-sidebar-display";
var MAINCONTENTANIMATION = "e-content-animation";
var DISABLEANIMATION = "e-disable-animation";
var CONTEXT = "e-sidebar-context";
var SIDEBARABSOLUTE = "e-sidebar-absolute";
var Sidebar = (
  /** @class */
  function(_super) {
    __extends31(Sidebar2, _super);
    function Sidebar2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    Sidebar2.prototype.preRender = function() {
      this.setWidth();
    };
    Sidebar2.prototype.render = function() {
      this.initialize();
      this.wireEvents();
      this.renderComplete();
    };
    Sidebar2.prototype.initialize = function() {
      this.setTarget();
      this.addClass();
      this.setZindex();
      if (this.enableDock) {
        this.setDock();
      }
      if (this.isOpen) {
        this.show();
        this.firstRender = true;
      } else {
        this.setMediaQuery();
      }
      this.checkType(true);
      this.setType(this.type);
      this.setCloseOnDocumentClick();
      this.setEnableRTL();
      if (Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }
    };
    Sidebar2.prototype.setEnableRTL = function() {
      (this.enableRtl ? addClass : removeClass)([this.element], RTL8);
    };
    Sidebar2.prototype.setTarget = function() {
      this.targetEle = this.element.nextElementSibling;
      this.sidebarEleCopy = this.element.cloneNode(true);
      if (typeof this.target === "string") {
        this.setProperties({ target: document.querySelector(this.target) }, true);
      }
      if (this.target) {
        this.target.insertBefore(this.element, this.target.children[0]);
        addClass([this.element], SIDEBARABSOLUTE);
        addClass([this.target], CONTEXT);
        this.targetEle = this.getTargetElement();
      }
    };
    Sidebar2.prototype.getTargetElement = function() {
      var siblingElement = this.element.nextElementSibling;
      while (!isNullOrUndefined(siblingElement)) {
        if (!siblingElement.classList.contains(ROOT4)) {
          break;
        }
        siblingElement = siblingElement.nextElementSibling;
      }
      return siblingElement;
    };
    Sidebar2.prototype.setCloseOnDocumentClick = function() {
      if (this.closeOnDocumentClick) {
        EventHandler.add(document, "mousedown touchstart", this.documentclickHandler, this);
      } else {
        EventHandler.remove(document, "mousedown touchstart", this.documentclickHandler);
      }
    };
    Sidebar2.prototype.setWidth = function() {
      if (this.enableDock && this.position === "Left") {
        setStyleAttribute(this.element, { "width": this.setDimension(this.dockSize) });
      } else if (this.enableDock && this.position === "Right") {
        setStyleAttribute(this.element, { "width": this.setDimension(this.dockSize) });
      } else if (!this.enableDock) {
        setStyleAttribute(this.element, { "width": this.setDimension(this.width) });
      }
    };
    Sidebar2.prototype.setDimension = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width.match(/px|%|em/) ? width : formatUnit(width);
      } else {
        width = "100%";
      }
      return width;
    };
    Sidebar2.prototype.setZindex = function() {
      setStyleAttribute(this.element, { "z-index": "" + this.zIndex });
    };
    Sidebar2.prototype.addClass = function() {
      if (this.element.tagName === "EJS-SIDEBAR") {
        addClass([this.element], DISPLAY);
      }
      var classELement = document.querySelector(".e-main-content");
      if (!isNullOrUndefined(classELement || this.targetEle)) {
        addClass([classELement || this.targetEle], [MAINCONTENTANIMATION]);
      }
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : null;
      if (!this.enableDock && this.type !== "Auto") {
        addClass([this.element], [VISIBILITY]);
      }
      removeClass([this.element], [OPEN, CLOSE2, RIGHT, LEFT, SLIDE, PUSH, OVER]);
      this.element.classList.add(ROOT4);
      addClass([this.element], this.position === "Right" ? RIGHT : LEFT);
      if (this.enableDock) {
        addClass([this.element], DOCKER);
      }
      if (!isNullOrUndefined(this.tabIndex)) {
        this.element.setAttribute("tabindex", this.tabIndex);
      }
      if (this.type === "Auto" && !Browser.isDevice) {
        this.show();
      } else if (!this.isOpen) {
        addClass([this.element], CLOSE2);
      }
    };
    Sidebar2.prototype.checkType = function(val) {
      if (!(this.type === "Push" || this.type === "Over" || this.type === "Slide")) {
        this.type = "Auto";
      } else {
        if (!this.element.classList.contains(CLOSE2) && !val) {
          this.hide();
        }
      }
    };
    Sidebar2.prototype.transitionEnd = function(e) {
      this.setDock();
      if (!isNullOrUndefined(e) && !this.firstRender) {
        this.triggerChange();
      }
      this.firstRender = false;
      EventHandler.remove(this.element, "transitionend", this.transitionEnd);
    };
    Sidebar2.prototype.destroyBackDrop = function() {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (this.target && this.showBackdrop && sibling && !isNullOrUndefined(this.defaultBackdropDiv)) {
        removeClass([this.defaultBackdropDiv], DEFAULTBACKDROP);
      } else if (this.showBackdrop && this.modal) {
        this.modal.style.display = "none";
        this.modal.outerHTML = "";
        this.modal = null;
      }
    };
    Sidebar2.prototype.hide = function(e) {
      var _this = this;
      var closeArguments = {
        model: this,
        element: this.element,
        cancel: false,
        isInteracted: !isNullOrUndefined(e),
        event: e || null
      };
      this.trigger("close", closeArguments, function(observedcloseArgs) {
        if (!observedcloseArgs.cancel) {
          if (_this.element.classList.contains(CLOSE2)) {
            return;
          }
          if (_this.element.classList.contains(OPEN) && !_this.animate) {
            _this.triggerChange();
          }
          addClass([_this.element], CLOSE2);
          removeClass([_this.element], OPEN);
          setStyleAttribute(_this.element, { "width": formatUnit(_this.enableDock ? _this.dockSize : _this.width) });
          _this.setType(_this.type);
          var sibling = document.querySelector(".e-main-content") || _this.targetEle;
          if (!_this.enableDock && sibling) {
            sibling.style.transform = "translateX(0px)";
            sibling.style[_this.position === "Left" ? "marginLeft" : "marginRight"] = "0px";
          }
          _this.destroyBackDrop();
          _this.setAnimation();
          if (_this.type === "Slide") {
            document.body.classList.remove("e-sidebar-overflow");
          }
          _this.setProperties({ isOpen: false }, true);
          if (_this.enableDock) {
            setTimeout(function() {
              return _this.setTimeOut();
            }, 50);
          }
          EventHandler.add(_this.element, "transitionend", _this.transitionEnd, _this);
        }
      });
    };
    Sidebar2.prototype.setTimeOut = function() {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      var elementWidth = this.element.getBoundingClientRect().width;
      if (this.element.classList.contains(OPEN) && sibling && !(this.type === "Over" && this.enableDock)) {
        if (this.position === "Left") {
          sibling.style.marginLeft = this.setDimension(this.width === "auto" ? elementWidth : this.width);
        } else {
          sibling.style.marginRight = this.setDimension(this.width === "auto" ? elementWidth : this.width);
        }
      } else if (this.element.classList.contains(CLOSE2) && sibling) {
        if (this.position === "Left") {
          sibling.style.marginLeft = this.setDimension(this.dockSize === "auto" ? elementWidth : this.dockSize);
        } else {
          sibling.style.marginRight = this.setDimension(this.dockSize === "auto" ? elementWidth : this.dockSize);
        }
      }
    };
    Sidebar2.prototype.show = function(e) {
      var _this = this;
      var openArguments = {
        model: this,
        element: this.element,
        cancel: false,
        isInteracted: !isNullOrUndefined(e),
        event: e || null
      };
      this.trigger("open", openArguments, function(observedopenArgs) {
        if (!observedopenArgs.cancel) {
          removeClass([_this.element], VISIBILITY);
          if (_this.element.classList.contains(OPEN)) {
            return;
          }
          if (_this.element.classList.contains(CLOSE2) && !_this.animate) {
            _this.triggerChange();
          }
          addClass([_this.element], [OPEN, TRASITION]);
          setStyleAttribute(_this.element, { "transform": "" });
          removeClass([_this.element], CLOSE2);
          setStyleAttribute(_this.element, { "width": formatUnit(_this.width) });
          _this.setType(_this.type);
          _this.createBackDrop();
          _this.setAnimation();
          if (_this.type === "Slide") {
            document.body.classList.add("e-sidebar-overflow");
          }
          _this.setProperties({ isOpen: true }, true);
          EventHandler.add(_this.element, "transitionend", _this.transitionEnd, _this);
        }
      });
    };
    Sidebar2.prototype.setAnimation = function() {
      if (this.animate) {
        removeClass([this.element], DISABLEANIMATION);
      } else {
        addClass([this.element], DISABLEANIMATION);
      }
    };
    Sidebar2.prototype.triggerChange = function() {
      var changeArguments = { name: "change", element: this.element };
      this.trigger("change", changeArguments);
    };
    Sidebar2.prototype.setDock = function() {
      if (this.enableDock && this.position === "Left" && !this.getState()) {
        setStyleAttribute(this.element, { "transform": "translateX(-100%) translateX(" + this.setDimension(this.dockSize) + ")" });
      } else if (this.enableDock && this.position === "Right" && !this.getState()) {
        setStyleAttribute(this.element, { "transform": "translateX(100%) translateX(-" + this.setDimension(this.dockSize) + ")" });
      }
      if (this.element.classList.contains(CLOSE2) && this.enableDock) {
        setStyleAttribute(this.element, { "width": this.setDimension(this.dockSize) });
      }
    };
    Sidebar2.prototype.createBackDrop = function() {
      if (this.target && this.showBackdrop && this.getState()) {
        var targetString = this.target;
        var sibling = document.querySelector(".e-main-content") || this.targetEle;
        this.defaultBackdropDiv = this.createElement("div");
        addClass([this.defaultBackdropDiv], DEFAULTBACKDROP);
        setStyleAttribute(this.defaultBackdropDiv, { height: targetString.style.height });
        sibling.appendChild(this.defaultBackdropDiv);
      } else if (this.showBackdrop && !this.modal && this.getState()) {
        this.modal = this.createElement("div");
        this.modal.className = DEFAULTBACKDROP;
        this.modal.style.display = "block";
        document.body.appendChild(this.modal);
      }
    };
    Sidebar2.prototype.getPersistData = function() {
      return this.addOnPersist(["type", "position", "isOpen"]);
    };
    Sidebar2.prototype.getModuleName = function() {
      return "sidebar";
    };
    Sidebar2.prototype.toggle = function() {
      if (this.element.classList.contains(OPEN)) {
        this.hide();
      } else {
        this.show();
      }
    };
    Sidebar2.prototype.getState = function() {
      return this.element.classList.contains(OPEN) ? true : false;
    };
    Sidebar2.prototype.setMediaQuery = function() {
      if (this.mediaQuery) {
        var media = false;
        if (typeof this.mediaQuery === "string") {
          media = window.matchMedia(this.mediaQuery).matches;
        } else {
          media = this.mediaQuery.matches;
        }
        if (media && this.windowWidth !== window.innerWidth) {
          this.show();
        } else if (this.getState() && this.windowWidth !== window.innerWidth) {
          this.hide();
        }
      }
    };
    Sidebar2.prototype.resize = function() {
      if (this.type === "Auto") {
        if (Browser.isDevice) {
          addClass([this.element], OVER);
        } else {
          addClass([this.element], PUSH);
        }
      }
      this.setMediaQuery();
      if (Browser.isDevice) {
        this.windowWidth = window.innerWidth;
      }
    };
    Sidebar2.prototype.documentclickHandler = function(e) {
      if (closest(e.target, "." + CONTROL2 + "." + ROOT4)) {
        return;
      }
      this.hide(e);
    };
    Sidebar2.prototype.enableGestureHandler = function(args) {
      if (!this.isOpen && this.position === "Left" && args.swipeDirection === "Right" && (args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5)) {
        this.show();
      } else if (this.isOpen && this.position === "Left" && args.swipeDirection === "Left") {
        this.hide();
      } else if (this.isOpen && this.position === "Right" && args.swipeDirection === "Right") {
        this.hide();
      } else if (!this.isOpen && this.position === "Right" && args.swipeDirection === "Left" && (window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5)) {
        this.show();
      }
    };
    Sidebar2.prototype.setEnableGestures = function() {
      if (this.enableGestures) {
        this.mainContentEle = new Touch(document.body, { swipe: this.enableGestureHandler.bind(this) });
        this.sidebarEle = new Touch(this.element, { swipe: this.enableGestureHandler.bind(this) });
      } else {
        if (this.mainContentEle && this.sidebarEle) {
          this.mainContentEle.destroy();
          this.sidebarEle.destroy();
        }
      }
    };
    Sidebar2.prototype.wireEvents = function() {
      this.setEnableGestures();
      EventHandler.add(window, "resize", this.resize, this);
    };
    Sidebar2.prototype.unWireEvents = function() {
      EventHandler.remove(window, "resize", this.resize);
      EventHandler.remove(document, "mousedown touchstart", this.documentclickHandler);
      if (this.mainContentEle) {
        this.mainContentEle.destroy();
      }
      if (this.sidebarEle) {
        this.sidebarEle.destroy();
      }
    };
    Sidebar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      var isRendered = this.isServerRendered;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "isOpen":
            if (this.isOpen) {
              this.show();
            } else {
              this.hide();
            }
            break;
          case "width":
            this.setWidth();
            if (!this.getState()) {
              this.setDock();
            }
            break;
          case "animate":
            this.setAnimation();
            break;
          case "type":
            this.checkType(false);
            removeClass([this.element], [VISIBILITY]);
            this.addClass();
            addClass([this.element], this.type === "Auto" ? Browser.isDevice ? ["e-over"] : ["e-push"] : ["e-" + this.type.toLowerCase()]);
            break;
          case "position":
            this.element.style.transform = "";
            this.setDock();
            if (sibling) {
              sibling.style[this.position === "Left" ? "marginRight" : "marginLeft"] = "0px";
            }
            if (this.position === "Right") {
              removeClass([this.element], LEFT);
              addClass([this.element], RIGHT);
            } else {
              removeClass([this.element], RIGHT);
              addClass([this.element], LEFT);
            }
            this.setType(this.type);
            break;
          case "showBackdrop":
            if (this.showBackdrop) {
              this.createBackDrop();
            } else {
              if (this.modal) {
                this.modal.style.display = "none";
                this.modal.outerHTML = "";
                this.modal = null;
              }
            }
            break;
          case "target":
            if (typeof this.target === "string") {
              this.setProperties({ target: document.querySelector(this.target) }, true);
            }
            if (isNullOrUndefined(this.target)) {
              removeClass([this.element], SIDEBARABSOLUTE);
              removeClass([oldProp.target], CONTEXT);
              setStyleAttribute(sibling, { "margin-left": 0, "margin-right": 0 });
              document.body.insertAdjacentElement("afterbegin", this.element);
            }
            this.isServerRendered = false;
            _super.prototype.refresh.call(this);
            this.isServerRendered = isRendered;
            break;
          case "closeOnDocumentClick":
            this.setCloseOnDocumentClick();
            break;
          case "enableDock":
            if (!this.getState()) {
              this.setDock();
            }
            break;
          case "zIndex":
            this.setZindex();
            break;
          case "mediaQuery":
            this.setMediaQuery();
            break;
          case "enableGestures":
            this.setEnableGestures();
            break;
          case "enableRtl":
            this.setEnableRTL();
            break;
        }
      }
    };
    Sidebar2.prototype.setType = function(type) {
      var elementWidth = this.element.getBoundingClientRect().width;
      this.setZindex();
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (sibling) {
        sibling.style.transform = "translateX(0px)";
        if (!Browser.isDevice && this.type !== "Auto" && !(this.type === "Over" && this.enableDock)) {
          sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = "0px";
        }
      }
      var margin = this.position === "Left" ? elementWidth + "px" : elementWidth + "px";
      var eleWidth = this.position === "Left" ? elementWidth : -elementWidth;
      removeClass([this.element], [PUSH, OVER, SLIDE]);
      switch (type) {
        case "Push":
          addClass([this.element], [PUSH]);
          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
            sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
          }
          break;
        case "Slide":
          addClass([this.element], [SLIDE]);
          if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
            sibling.style.transform = "translateX(" + eleWidth + "px)";
          }
          break;
        case "Over":
          addClass([this.element], [OVER]);
          if (this.enableDock && (this.element.classList.contains(CLOSE2) || this.isOpen)) {
            if (sibling) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = this.setDimension(this.dockSize);
            }
          }
          break;
        case "Auto":
          addClass([this.element], [TRASITION]);
          if (Browser.isDevice) {
            if (sibling && this.enableDock && !this.getState()) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
              addClass([this.element], PUSH);
            } else {
              addClass([this.element], OVER);
            }
          } else {
            addClass([this.element], PUSH);
            if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
              sibling.style[this.position === "Left" ? "marginLeft" : "marginRight"] = margin;
            }
          }
          this.createBackDrop();
      }
    };
    Sidebar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.target) {
        removeClass([this.target], CONTEXT);
      }
      this.destroyBackDrop();
      if (this.element) {
        removeClass([this.element], [OPEN, CLOSE2, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION]);
        removeClass([this.element], SIDEBARABSOLUTE);
        this.element.style.width = "";
        this.element.style.zIndex = "";
        this.element.style.transform = "";
        if (!isNullOrUndefined(this.sidebarEleCopy.getAttribute("tabindex"))) {
          this.element.setAttribute("tabindex", this.tabIndex);
        } else {
          this.element.removeAttribute("tabindex");
        }
      }
      this.windowWidth = null;
      var sibling = document.querySelector(".e-main-content") || this.targetEle;
      if (!isNullOrUndefined(sibling)) {
        sibling.style.margin = "";
        sibling.style.transform = "";
      }
      this.unWireEvents();
    };
    __decorate28([
      Property("auto")
    ], Sidebar2.prototype, "dockSize", void 0);
    __decorate28([
      Property(null)
    ], Sidebar2.prototype, "mediaQuery", void 0);
    __decorate28([
      Property(false)
    ], Sidebar2.prototype, "enableDock", void 0);
    __decorate28([
      Property("en-US")
    ], Sidebar2.prototype, "locale", void 0);
    __decorate28([
      Property(false)
    ], Sidebar2.prototype, "enablePersistence", void 0);
    __decorate28([
      Property(true)
    ], Sidebar2.prototype, "enableGestures", void 0);
    __decorate28([
      Property(false)
    ], Sidebar2.prototype, "isOpen", void 0);
    __decorate28([
      Property(false)
    ], Sidebar2.prototype, "enableRtl", void 0);
    __decorate28([
      Property(true)
    ], Sidebar2.prototype, "animate", void 0);
    __decorate28([
      Property("auto")
    ], Sidebar2.prototype, "height", void 0);
    __decorate28([
      Property(false)
    ], Sidebar2.prototype, "closeOnDocumentClick", void 0);
    __decorate28([
      Property("Left")
    ], Sidebar2.prototype, "position", void 0);
    __decorate28([
      Property(null)
    ], Sidebar2.prototype, "target", void 0);
    __decorate28([
      Property(false)
    ], Sidebar2.prototype, "showBackdrop", void 0);
    __decorate28([
      Property("Auto")
    ], Sidebar2.prototype, "type", void 0);
    __decorate28([
      Property("auto")
    ], Sidebar2.prototype, "width", void 0);
    __decorate28([
      Property(1e3)
    ], Sidebar2.prototype, "zIndex", void 0);
    __decorate28([
      Event()
    ], Sidebar2.prototype, "created", void 0);
    __decorate28([
      Event()
    ], Sidebar2.prototype, "close", void 0);
    __decorate28([
      Event()
    ], Sidebar2.prototype, "open", void 0);
    __decorate28([
      Event()
    ], Sidebar2.prototype, "change", void 0);
    __decorate28([
      Event()
    ], Sidebar2.prototype, "destroyed", void 0);
    Sidebar2 = __decorate28([
      NotifyPropertyChanges
    ], Sidebar2);
    return Sidebar2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/breadcrumb/breadcrumb.js
var __extends32 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate29 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ICONRIGHT = "e-icon-right";
var ITEMTEXTCLASS = "e-breadcrumb-text";
var ICONCLASS = "e-breadcrumb-icon";
var MENUCLASS = "e-breadcrumb-menu";
var ITEMCLASS = "e-breadcrumb-item";
var POPUPCLASS = "e-breadcrumb-popup";
var WRAPMODECLASS = "e-breadcrumb-wrap-mode";
var SCROLLMODECLASS = "e-breadcrumb-scroll-mode";
var TABINDEX = "tabindex";
var DISABLEDCLASS = "e-disabled";
var ARIADISABLED = "aria-disabled";
var DOT = ".";
var BreadcrumbOverflowMode;
(function(BreadcrumbOverflowMode2) {
  BreadcrumbOverflowMode2["Hidden"] = "Hidden";
  BreadcrumbOverflowMode2["Collapsed"] = "Collapsed";
  BreadcrumbOverflowMode2["Menu"] = "Menu";
  BreadcrumbOverflowMode2["Wrap"] = "Wrap";
  BreadcrumbOverflowMode2["Scroll"] = "Scroll";
  BreadcrumbOverflowMode2["None"] = "None";
})(BreadcrumbOverflowMode || (BreadcrumbOverflowMode = {}));
var BreadcrumbItem = (
  /** @class */
  function(_super) {
    __extends32(BreadcrumbItem2, _super);
    function BreadcrumbItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate29([
      Property("")
    ], BreadcrumbItem2.prototype, "text", void 0);
    __decorate29([
      Property("")
    ], BreadcrumbItem2.prototype, "url", void 0);
    __decorate29([
      Property(null)
    ], BreadcrumbItem2.prototype, "iconCss", void 0);
    __decorate29([
      Property(false)
    ], BreadcrumbItem2.prototype, "disabled", void 0);
    return BreadcrumbItem2;
  }(ChildProperty)
);
var Breadcrumb = (
  /** @class */
  function(_super) {
    __extends32(Breadcrumb2, _super);
    function Breadcrumb2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isPopupCreated = false;
      return _this;
    }
    Breadcrumb2.prototype.preRender = function() {
    };
    Breadcrumb2.prototype.render = function() {
      this.initialize();
      this.renderItems(this.items);
      this.wireEvents();
    };
    Breadcrumb2.prototype.initialize = function() {
      this._maxItems = this.maxItems;
      this.element.setAttribute("aria-label", "breadcrumb");
      if (this.cssClass) {
        addClass([this.element], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      }
      if (this.disabled) {
        this.element.classList.add(DISABLEDCLASS);
        this.element.setAttribute(ARIADISABLED, "true");
      }
      if (this.overflowMode === "Wrap") {
        this.element.classList.add(WRAPMODECLASS);
      } else if (this.overflowMode === "Scroll") {
        this.element.classList.add(SCROLLMODECLASS);
      }
      this.initItems();
      this.initPvtProps();
    };
    Breadcrumb2.prototype.initPvtProps = function() {
      if (this.overflowMode === "Hidden" && this._maxItems > 0) {
        this.endIndex = this.getEndIndex();
        this.startIndex = this.endIndex + 1 - (this._maxItems - 1);
      }
      if (this.overflowMode === "Menu") {
        if (this._maxItems >= 0) {
          this.startIndex = this._maxItems > 1 ? 1 : 0;
          this.endIndex = this.getEndIndex();
          this.popupUl = this.createElement("ul", { attrs: { TABINDEX: "0", "role": "menu" } });
        } else {
          this.startIndex = this.endIndex = null;
        }
      }
    };
    Breadcrumb2.prototype.getEndIndex = function() {
      var _this = this;
      var endIndex;
      if (this.activeItem) {
        this.items.forEach(function(item, idx) {
          if (item.url === _this.activeItem || item.text === _this.activeItem) {
            endIndex = idx;
          }
        });
      } else {
        endIndex = this.items.length - 1;
      }
      return endIndex;
    };
    Breadcrumb2.prototype.initItems = function() {
      if (!this.items.length) {
        var baseUri = void 0;
        var uri = void 0;
        var items = [];
        if (this.url) {
          var url = new URL(this.url, window.location.origin);
          baseUri = url.origin + "/";
          uri = url.href.split(baseUri)[1].split("/");
        } else {
          baseUri = window.location.origin + "/";
          uri = window.location.href.split(baseUri)[1].split("/");
        }
        items.push({ iconCss: "e-icons e-home", url: baseUri });
        for (var i = 0; i < uri.length; i++) {
          if (uri[i]) {
            items.push({ text: uri[i], url: baseUri + uri[i] });
            baseUri += uri[i] + "/";
          }
        }
        this.setProperties({ items }, true);
      }
    };
    Breadcrumb2.prototype.renderItems = function(items) {
      var _this = this;
      var item;
      var isSingleLevel;
      var isIconRight = this.element.classList.contains(ICONRIGHT);
      var itemsLength = items.length;
      if (itemsLength) {
        var isActiveItem = void 0;
        var isLastItem = void 0;
        var isLastItemInPopup_1;
        var j_1 = 0;
        var wrapDiv = void 0;
        var len = itemsLength * 2 - 1;
        var isItemCancelled_1 = false;
        var ol = this.createElement("ol", { className: this.overflowMode === "Wrap" ? "e-breadcrumb-wrapped-ol" : "" });
        var firstOl = this.createElement("ol", { className: this.overflowMode === "Wrap" ? "e-breadcrumb-first-ol" : "" });
        var showIcon = this.hasField(items, "iconCss");
        var isCollasped = this.overflowMode === "Collapsed" && this._maxItems > 0 && itemsLength > this._maxItems && !this.isExpanded;
        var isDefaultOverflowMode_1 = this.overflowMode === "Hidden" && this._maxItems > 0;
        if (this.overflowMode === "Menu" && this.popupUl) {
          this.popupUl.innerHTML = "";
        }
        var listBaseOptions = {
          moduleName: this.getModuleName(),
          showIcon,
          itemNavigable: true,
          itemCreated: function(args) {
            var isLastItem2 = args.curData.isLastItem;
            if (isLastItem2 && args.item.children.length && !_this.itemTemplate) {
              delete args.curData.isLastItem;
              if (!isLastItemInPopup_1 && !_this.enableActiveItemNavigation) {
                args.item.innerHTML = _this.createElement("span", { className: ITEMTEXTCLASS, innerHTML: args.item.children[0].innerHTML }).outerHTML;
              }
            }
            if (args.curData.iconCss && !args.curData.text && !_this.itemTemplate) {
              args.item.classList.add("e-icon-item");
            }
            if (isDefaultOverflowMode_1) {
              args.item.setAttribute("item-index", j_1.toString());
            }
            var eventArgs = {
              item: extend({}, args.curData.properties ? args.curData.properties : args.curData),
              element: args.item,
              cancel: false
            };
            _this.trigger("beforeItemRender", eventArgs);
            isItemCancelled_1 = eventArgs.cancel;
            var containsRightIcon = isIconRight || eventArgs.element.classList.contains(ICONRIGHT);
            if (containsRightIcon && args.curData.iconCss && !_this.itemTemplate) {
              args.item.querySelector(".e-anchor-wrap").appendChild(args.item.querySelector(DOT + ICONCLASS));
            }
            if (eventArgs.item.disabled) {
              args.item.setAttribute(ARIADISABLED, "true");
              args.item.classList.add(DISABLEDCLASS);
            }
            if ((eventArgs.item.disabled || _this.disabled) && args.item.children.length && !_this.itemTemplate) {
              args.item.children[0].setAttribute(TABINDEX, "-1");
            }
            if (args.curData.isEmptyUrl) {
              args.item.children[0].removeAttribute("href");
              if ((!isLastItem2 || isLastItem2 && _this.enableActiveItemNavigation) && !(eventArgs.item.disabled || _this.disabled)) {
                args.item.children[0].setAttribute(TABINDEX, "0");
                EventHandler.add(args.item.children[0], "keydown", _this.keyDownHandler, _this);
              }
            }
            args.item.removeAttribute("role");
            if (isLastItem2) {
              args.item.setAttribute("data-active-item", "");
            }
            if (!_this.itemTemplate) {
              _this.beforeItemRenderChanges(args.curData, eventArgs.item, args.item, containsRightIcon);
            }
          }
        };
        for (var i = 0; i < len; i % 2 && j_1++, i++) {
          isActiveItem = this.activeItem && (this.activeItem === items[j_1].url || this.activeItem === items[j_1].text);
          if (isCollasped && i > 1 && i < len - 2) {
            continue;
          } else if (isDefaultOverflowMode_1 && ((j_1 < this.startIndex || j_1 > this.endIndex) && (i % 2 ? j_1 !== this.startIndex - 1 : true)) && j_1 !== 0) {
            continue;
          }
          if (i % 2) {
            wrapDiv = this.createElement("div", { className: "e-breadcrumb-item-wrapper" });
            listBaseOptions.template = this.separatorTemplate ? this.separatorTemplate : "/";
            listBaseOptions.itemClass = "e-breadcrumb-separator";
            isSingleLevel = false;
            item = [{ previousItem: items[j_1], nextItem: items[j_1 + 1] }];
          } else {
            listBaseOptions.itemClass = "";
            if (this.itemTemplate) {
              listBaseOptions.template = this.itemTemplate;
              isSingleLevel = false;
            } else {
              isSingleLevel = true;
            }
            item = [extend({}, items[j_1].properties ? items[j_1].properties : items[j_1])];
            if (!item[0].url && !this.itemTemplate) {
              item = [extend({}, item[0], { isEmptyUrl: true, url: "#" })];
            }
            isLastItem = (isDefaultOverflowMode_1 || this.overflowMode === "Menu") && j_1 === this.endIndex;
            if ((i === len - 1 || isLastItem) && !this.itemTemplate || isActiveItem) {
              item[0].isLastItem = true;
            }
          }
          var parent_1 = ol;
          var lastPopupItemIdx = this.startIndex + this.endIndex - this._maxItems;
          if (this.overflowMode === "Menu" && (j_1 >= this.startIndex && (j_1 <= lastPopupItemIdx && (i % 2 ? !(j_1 === lastPopupItemIdx) : true)) && this.endIndex >= this._maxItems && this._maxItems > 0 || this._maxItems === 0)) {
            if (i % 2) {
              continue;
            } else {
              parent_1 = this.popupUl;
              if (isLastItem) {
                isLastItemInPopup_1 = true;
              }
            }
          } else if (this.overflowMode === "Wrap") {
            if (i === 0) {
              parent_1 = firstOl;
            } else {
              parent_1 = wrapDiv;
            }
          }
          var li = ListBase.createList(this.createElement, item, listBaseOptions, isSingleLevel, this).childNodes;
          if (!isItemCancelled_1) {
            append(li, parent_1);
          } else if (isDefaultOverflowMode_1 || isCollasped || this.overflowMode === "Menu" || this.overflowMode === "Wrap") {
            items.splice(j_1, 1);
            this.initPvtProps();
            return this.reRenderItems();
          } else if (i === len - 1 || isLastItem) {
            remove(parent_1.lastElementChild);
          }
          if (this.overflowMode === "Wrap" && i !== 0 && i % 2 === 0) {
            ol.appendChild(wrapDiv);
          }
          if (isCollasped && i === 1) {
            var li_1 = this.createElement("li", { className: "e-icons e-breadcrumb-collapsed", attrs: { TABINDEX: "0" } });
            EventHandler.add(li_1, "keyup", this.expandHandler, this);
            ol.appendChild(li_1);
          }
          if (this.overflowMode === "Menu" && this.startIndex === i && this.endIndex >= this._maxItems && this._maxItems >= 0) {
            var menu = this.getMenuElement();
            EventHandler.add(menu, "keyup", this.keyDownHandler, this);
            ol.appendChild(menu);
          }
          if (isActiveItem || isLastItem) {
            break;
          }
          if (isItemCancelled_1) {
            i++;
          }
        }
        if (this.isReact) {
          this.renderReactTemplates();
        }
        if (this.overflowMode === "Wrap") {
          this.element.appendChild(firstOl);
        }
        this.element.appendChild(ol);
        this.calculateMaxItems();
      }
    };
    Breadcrumb2.prototype.calculateMaxItems = function() {
      if (this.overflowMode === "Hidden" || this.overflowMode === "Collapsed" || this.overflowMode === "Menu") {
        var maxItems = void 0;
        var width = this.element.offsetWidth;
        var liElems = [].slice.call(this.element.children[0].children).reverse();
        var liWidth = this.overflowMode === "Menu" ? 0 : liElems[liElems.length - 1].offsetWidth + (liElems[liElems.length - 2] ? liElems[liElems.length - 2].offsetWidth : 0);
        if (this.overflowMode === "Menu") {
          var menuEle = this.getMenuElement();
          this.element.appendChild(menuEle);
          liWidth += menuEle.offsetWidth;
          remove(menuEle);
        }
        for (var i = 0; i < liElems.length - 2; i++) {
          if (liWidth > width) {
            maxItems = Math.ceil((i - 1) / 2) + (this.overflowMode === "Menu" && i <= 2 ? 0 : 1);
            if ((this.maxItems > maxItems && !(this.maxItems > -1 && maxItems === -1) || this.maxItems === -1) && this._maxItems !== maxItems) {
              this._maxItems = maxItems;
              this.initPvtProps();
              return this.reRenderItems();
            } else {
              break;
            }
          } else {
            if (this.overflowMode === "Menu" && i === 2) {
              liWidth += liElems[liElems.length - 1].offsetWidth + liElems[liElems.length - 2].offsetWidth;
              if (liWidth > width) {
                this._maxItems = 1;
                this.initPvtProps();
                return this.reRenderItems();
              }
            }
            if (!(this.overflowMode === "Menu" && liElems[i].classList.contains(MENUCLASS))) {
              liWidth += liElems[i].offsetWidth;
            }
          }
        }
      } else if ((this.overflowMode === "Wrap" || this.overflowMode === "Scroll") && this._maxItems > 0) {
        var width = 0;
        var liElems = this.element.querySelectorAll(DOT + ITEMCLASS);
        if (liElems.length > this._maxItems + this._maxItems - 1) {
          for (var i = this.overflowMode === "Wrap" ? 1 : 0; i < this._maxItems + this._maxItems - 1; i++) {
            width += liElems[i].offsetWidth;
          }
          width = width + 5 + parseInt(getComputedStyle(this.element.children[0]).paddingLeft, 10) * 2;
          if (this.overflowMode === "Wrap") {
            this.element.querySelector(".e-breadcrumb-wrapped-ol").style.width = width + "px";
          } else {
            this.element.style.width = width + "px";
          }
        }
      }
    };
    Breadcrumb2.prototype.hasField = function(items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i]["" + field]) {
          return true;
        }
      }
      return false;
    };
    Breadcrumb2.prototype.getMenuElement = function() {
      return this.createElement("li", { className: "e-icons e-breadcrumb-menu", attrs: { TABINDEX: "0" } });
    };
    Breadcrumb2.prototype.beforeItemRenderChanges = function(prevItem, currItem, elem, isRightIcon) {
      var wrapElem = elem.querySelector(".e-anchor-wrap");
      if (currItem.text !== prevItem.text) {
        wrapElem.childNodes.forEach(function(child) {
          if (child.nodeType === Node.TEXT_NODE) {
            child.textContent = currItem.text;
          }
        });
      }
      if (currItem.iconCss !== prevItem.iconCss && wrapElem) {
        var iconElem = elem.querySelector(DOT + ICONCLASS);
        if (iconElem) {
          if (currItem.iconCss) {
            removeClass([iconElem], prevItem.iconCss.split(" "));
            addClass([iconElem], currItem.iconCss.split(" "));
          } else {
            remove(iconElem);
          }
        } else if (currItem.iconCss) {
          var iconElem_1 = this.createElement("span", { className: ICONCLASS + " " + currItem.iconCss });
          if (isRightIcon) {
            append([iconElem_1], wrapElem);
          } else {
            wrapElem.insertBefore(iconElem_1, wrapElem.childNodes[0]);
          }
        }
      }
      if (currItem.url !== prevItem.url && this.enableNavigation) {
        var anchor = elem.querySelector("a." + ITEMTEXTCLASS);
        if (anchor) {
          if (currItem.url) {
            anchor.setAttribute("href", currItem.url);
          } else {
            anchor.removeAttribute("href");
          }
        }
      }
    };
    Breadcrumb2.prototype.reRenderItems = function() {
      this.element.innerHTML = "";
      this.renderItems(this.items);
    };
    Breadcrumb2.prototype.clickHandler = function(e) {
      var li = closest(e.target, DOT + ITEMCLASS + ":not(.e-breadcrumb-separator)");
      if (!this.enableNavigation) {
        e.preventDefault();
      }
      if (li && (closest(e.target, DOT + ITEMTEXTCLASS) || this.itemTemplate)) {
        var idx = void 0;
        if (this.overflowMode === "Wrap") {
          idx = [].slice.call(this.element.querySelectorAll(DOT + ITEMCLASS)).indexOf(li);
        } else {
          idx = [].slice.call(li.parentElement.children).indexOf(li);
        }
        if (this.overflowMode === "Menu") {
          if (closest(e.target, DOT + POPUPCLASS)) {
            idx += this.startIndex;
            this.endIndex = idx;
            if (e.type === "keydown") {
              this.documentClickHandler(e);
            }
          } else if (this.element.querySelector(DOT + MENUCLASS)) {
            if (idx > [].slice.call(this.element.children[0].children).indexOf(this.element.querySelector(DOT + MENUCLASS))) {
              idx += this.popupUl.childElementCount * 2 - 2;
              idx = Math.floor(idx / 2);
              this.endIndex = idx;
            } else {
              this.startIndex = this.endIndex = idx;
            }
          } else {
            idx = Math.floor(idx / 2);
            this.startIndex = this.endIndex = idx;
          }
        } else {
          idx = Math.floor(idx / 2);
        }
        if (this.overflowMode === "Hidden" && this._maxItems > 0 && this.endIndex !== 0) {
          idx = parseInt(li.getAttribute("item-index"), 10);
          if (this.startIndex > 1) {
            this.startIndex -= this.endIndex - idx;
          }
          this.endIndex = idx;
        }
        this.trigger("itemClick", { element: li, item: this.items[idx], event: e });
        this.activeItem = this.items[idx].url || this.items[idx].text;
        this.dataBind();
      }
      if (e.target.classList.contains("e-breadcrumb-collapsed")) {
        this.isExpanded = true;
        this.reRenderItems();
      }
      if (e.target.classList.contains(MENUCLASS) && !this.isPopupCreated) {
        this.renderPopup();
      }
    };
    Breadcrumb2.prototype.renderPopup = function() {
      var _this = this;
      var wrapper = this.createElement("div", { className: POPUPCLASS + " " + this.cssClass + (this.enableRtl ? " e-rtl" : "") });
      document.body.appendChild(wrapper);
      this.isPopupCreated = true;
      this.popupObj = new Popup(wrapper, {
        content: this.popupUl,
        relateTo: this.element.querySelector(DOT + MENUCLASS),
        enableRtl: this.enableRtl,
        position: { X: "left", Y: "bottom" },
        collision: { X: "fit", Y: "flip" },
        open: function() {
          _this.popupUl.focus();
        }
      });
      this.popupWireEvents();
      this.popupObj.show();
    };
    Breadcrumb2.prototype.documentClickHandler = function(e) {
      if (this.overflowMode === "Menu" && this.popupObj && this.popupObj.element.classList.contains("e-popup-open") && !closest(e.target, DOT + MENUCLASS)) {
        this.popupObj.hide();
        this.popupObj.destroy();
        this.isPopupCreated = false;
        detach(this.popupObj.element);
      }
    };
    Breadcrumb2.prototype.resize = function() {
      this._maxItems = this.maxItems;
      this.initPvtProps();
      this.reRenderItems();
    };
    Breadcrumb2.prototype.expandHandler = function(e) {
      if (e.key === "Enter") {
        this.isExpanded = true;
        this.reRenderItems();
      }
    };
    Breadcrumb2.prototype.keyDownHandler = function(e) {
      if (e.key === "Enter") {
        this.clickHandler(e);
      }
    };
    Breadcrumb2.prototype.popupKeyDownHandler = function(e) {
      if (e.key === "Escape") {
        this.documentClickHandler(e);
      }
    };
    Breadcrumb2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "items":
          case "enableActiveItemNavigation":
            this.reRenderItems();
            break;
          case "activeItem":
            this._maxItems = this.maxItems;
            this.initPvtProps();
            this.reRenderItems();
            break;
          case "overflowMode":
          case "maxItems":
            this._maxItems = this.maxItems;
            this.initPvtProps();
            this.reRenderItems();
            if (oldProp.overflowMode === "Wrap") {
              this.element.classList.remove(WRAPMODECLASS);
            } else if (newProp.overflowMode === "Wrap") {
              this.element.classList.add(WRAPMODECLASS);
            }
            if (oldProp.overflowMode === "Scroll") {
              this.element.classList.remove(SCROLLMODECLASS);
            } else if (newProp.overflowMode === "Scroll") {
              this.element.classList.add(SCROLLMODECLASS);
            }
            break;
          case "url":
            this.initItems();
            this.reRenderItems();
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            if (oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1 && !(newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1) || !(oldProp.cssClass && oldProp.cssClass.indexOf(ICONRIGHT) > -1) && (newProp.cssClass && newProp.cssClass.indexOf(ICONRIGHT) > -1)) {
              this.reRenderItems();
            }
            break;
          case "enableRtl":
            this.element.classList.toggle("e-rtl");
            break;
          case "disabled":
            this.element.classList.toggle(DISABLEDCLASS);
            this.element.setAttribute(ARIADISABLED, newProp.disabled + "");
            break;
        }
      }
    };
    Breadcrumb2.prototype.wireEvents = function() {
      this.delegateClickHanlder = this.documentClickHandler.bind(this);
      EventHandler.add(document, "click", this.delegateClickHanlder, this);
      EventHandler.add(this.element, "click", this.clickHandler, this);
      window.addEventListener("resize", this.resize.bind(this));
    };
    Breadcrumb2.prototype.popupWireEvents = function() {
      EventHandler.add(this.popupObj.element, "click", this.clickHandler, this);
      EventHandler.add(this.popupObj.element, "keydown", this.popupKeyDownHandler, this);
    };
    Breadcrumb2.prototype.unWireEvents = function() {
      EventHandler.remove(document, "click", this.delegateClickHanlder);
      EventHandler.remove(this.element, "click", this.clickHandler);
      window.removeEventListener("resize", this.resize.bind(this));
      if (this.popupObj) {
        EventHandler.remove(this.popupObj.element, "click", this.clickHandler);
        EventHandler.remove(this.popupObj.element, "keydown", this.popupKeyDownHandler);
      }
    };
    Breadcrumb2.prototype.getPersistData = function() {
      return this.addOnPersist(["activeItem"]);
    };
    Breadcrumb2.prototype.getModuleName = function() {
      return "breadcrumb";
    };
    Breadcrumb2.prototype.destroy = function() {
      var _this = this;
      var classes = [];
      var attributes2 = ["aria-label"];
      if (this.cssClass) {
        classes.concat(this.cssClass.split(" "));
      }
      if (this.enableRtl) {
        classes.push("e-rtl");
      }
      if (this.disabled) {
        classes.push(DISABLEDCLASS);
        attributes2.push(ARIADISABLED);
      }
      if (this.overflowMode === "Wrap") {
        classes.push(WRAPMODECLASS);
      } else if (this.overflowMode === "Scroll") {
        classes.push(SCROLLMODECLASS);
      }
      this.unWireEvents();
      this.element.innerHTML = "";
      removeClass([this.element], classes);
      attributes2.forEach(function(attribute) {
        _this.element.removeAttribute(attribute);
      });
      _super.prototype.destroy.call(this);
    };
    __decorate29([
      Property("")
    ], Breadcrumb2.prototype, "url", void 0);
    __decorate29([
      Collection([], BreadcrumbItem)
    ], Breadcrumb2.prototype, "items", void 0);
    __decorate29([
      Property("")
    ], Breadcrumb2.prototype, "activeItem", void 0);
    __decorate29([
      Property(-1)
    ], Breadcrumb2.prototype, "maxItems", void 0);
    __decorate29([
      Property("Menu")
    ], Breadcrumb2.prototype, "overflowMode", void 0);
    __decorate29([
      Property("")
    ], Breadcrumb2.prototype, "cssClass", void 0);
    __decorate29([
      Property(null)
    ], Breadcrumb2.prototype, "itemTemplate", void 0);
    __decorate29([
      Property("/")
    ], Breadcrumb2.prototype, "separatorTemplate", void 0);
    __decorate29([
      Property(true)
    ], Breadcrumb2.prototype, "enableNavigation", void 0);
    __decorate29([
      Property(false)
    ], Breadcrumb2.prototype, "enableActiveItemNavigation", void 0);
    __decorate29([
      Property(false)
    ], Breadcrumb2.prototype, "disabled", void 0);
    __decorate29([
      Property("")
    ], Breadcrumb2.prototype, "locale", void 0);
    __decorate29([
      Event()
    ], Breadcrumb2.prototype, "beforeItemRender", void 0);
    __decorate29([
      Event()
    ], Breadcrumb2.prototype, "itemClick", void 0);
    __decorate29([
      Event()
    ], Breadcrumb2.prototype, "created", void 0);
    Breadcrumb2 = __decorate29([
      NotifyPropertyChanges
    ], Breadcrumb2);
    return Breadcrumb2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/carousel/carousel.js
var __extends33 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate30 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_CAROUSEL = "e-carousel";
var CLS_ACTIVE3 = "e-active";
var CLS_RTL6 = "e-rtl";
var CLS_PARTIAL = "e-partial";
var CLS_SWIPE = "e-swipe";
var CLS_SLIDE_CONTAINER = "e-carousel-slide-container";
var CLS_ITEMS3 = "e-carousel-items";
var CLS_CLONED = "e-cloned";
var CLS_ITEM4 = "e-carousel-item";
var CLS_PREVIOUS = "e-previous";
var CLS_NEXT = "e-next";
var CLS_PREV_ICON = "e-previous-icon";
var CLS_NEXT_ICON = "e-next-icon";
var CLS_NAVIGATORS = "e-carousel-navigators";
var CLS_INDICATORS = "e-carousel-indicators";
var CLS_INDICATOR_BARS = "e-indicator-bars";
var CLS_INDICATOR_BAR = "e-indicator-bar";
var CLS_INDICATOR2 = "e-indicator";
var CLS_ICON2 = "e-icons";
var CLS_PLAY_PAUSE = "e-play-pause";
var CLS_PLAY_ICON = "e-play-icon";
var CLS_PAUSE_ICON = "e-pause-icon";
var CLS_PREV_BUTTON = "e-previous-button";
var CLS_NEXT_BUTTON = "e-next-button";
var CLS_PLAY_BUTTON = "e-play-button";
var CLS_FLAT = "e-flat";
var CLS_ROUND = "e-round";
var CLS_HOVER_ARROWS = "e-hover-arrows";
var CLS_HOVER = "e-carousel-hover";
var CLS_TEMPLATE3 = "e-template";
var CLS_SLIDE_ANIMATION = "e-carousel-slide-animation";
var CLS_FADE_ANIMATION = "e-carousel-fade-animation";
var CLS_CUSTOM_ANIMATION = "e-carousel-custom-animation";
var CLS_ANIMATION_NONE = "e-carousel-animation-none";
var CLS_PREV_SLIDE = "e-prev";
var CLS_NEXT_SLIDE = "e-next";
var CLS_TRANSITION_START = "e-transition-start";
var CLS_TRANSITION_END = "e-transition-end";
var CarouselSwipeMode;
(function(CarouselSwipeMode2) {
  CarouselSwipeMode2[CarouselSwipeMode2["Touch"] = 1] = "Touch";
  CarouselSwipeMode2[CarouselSwipeMode2["Mouse"] = 2] = "Mouse";
})(CarouselSwipeMode || (CarouselSwipeMode = {}));
var CarouselItem = (
  /** @class */
  function(_super) {
    __extends33(CarouselItem2, _super);
    function CarouselItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate30([
      Property()
    ], CarouselItem2.prototype, "cssClass", void 0);
    __decorate30([
      Property()
    ], CarouselItem2.prototype, "interval", void 0);
    __decorate30([
      Property()
    ], CarouselItem2.prototype, "template", void 0);
    __decorate30([
      Property()
    ], CarouselItem2.prototype, "htmlAttributes", void 0);
    return CarouselItem2;
  }(ChildProperty)
);
var Carousel = (
  /** @class */
  function(_super) {
    __extends33(Carousel2, _super);
    function Carousel2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isSwipe = false;
      return _this;
    }
    Carousel2.prototype.getModuleName = function() {
      return CLS_CAROUSEL.replace("e-", "");
    };
    Carousel2.prototype.getPersistData = function() {
      return this.addOnPersist(["selectedIndex"]);
    };
    Carousel2.prototype.preRender = function() {
      this.keyConfigs = {
        home: "home",
        end: "end",
        space: "space",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        moveDown: "downarrow"
      };
      var defaultLocale = {
        nextSlide: "Next slide",
        of: "of",
        pauseSlideTransition: "Pause slide transition",
        playSlideTransition: "Play slide transition",
        previousSlide: "Previous slide",
        slide: "Slide",
        slideShow: "Slide show"
      };
      this.localeObj = new L10n(this.getModuleName(), defaultLocale, this.locale);
    };
    Carousel2.prototype.render = function() {
      this.initialize();
      this.renderSlides();
      this.renderNavigators();
      this.renderPlayButton();
      this.renderIndicators();
      this.applyAnimation();
      this.wireEvents();
    };
    Carousel2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var target;
      var rtlElement;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "animationEffect":
            this.applyAnimation();
            break;
          case "cssClass":
            classList(this.element, [newProp.cssClass], [oldProp.cssClass]);
            break;
          case "selectedIndex":
            this.setActiveSlide(this.selectedIndex, oldProp.selectedIndex > this.selectedIndex ? "Previous" : "Next");
            this.autoSlide();
            break;
          case "htmlAttributes":
            if (!isNullOrUndefined(this.htmlAttributes)) {
              this.setHtmlAttributes(this.htmlAttributes, this.element);
            }
            break;
          case "enableTouchSwipe":
            if (!this.enableTouchSwipe && this.touchModule) {
              this.touchModule.destroy();
            }
            if (this.element.querySelector("." + CLS_ITEMS3)) {
              this.renderTouchActions();
            }
            break;
          case "loop":
            if (this.loop && isNullOrUndefined(this.autoSlideInterval)) {
              this.applySlideInterval();
            }
            this.handleNavigatorsActions(this.selectedIndex);
            if (this.partialVisible || !(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
              this.reRenderSlides();
            }
            break;
          case "enableRtl":
            rtlElement = [].slice.call(this.element.querySelectorAll("." + CLS_PREV_BUTTON + ",\n                ." + CLS_NEXT_BUTTON + ", ." + CLS_PLAY_BUTTON));
            rtlElement.push(this.element);
            if (this.enableRtl) {
              addClass(rtlElement, CLS_RTL6);
            } else {
              removeClass(rtlElement, CLS_RTL6);
            }
            if (this.partialVisible || !(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
              var cloneCount = this.loop ? this.getNumOfItems() : 0;
              var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
              this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);
            }
            break;
          case "buttonsVisibility":
            target = this.element.querySelector("." + CLS_NAVIGATORS);
            if (target) {
              switch (this.buttonsVisibility) {
                case "Hidden":
                  this.resetTemplates(["previousButtonTemplate", "nextButtonTemplate"]);
                  remove(target);
                  break;
                case "VisibleOnHover":
                  addClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);
                  break;
                case "Visible":
                  removeClass([].slice.call(target.childNodes), CLS_HOVER_ARROWS);
                  break;
              }
            } else {
              this.renderNavigators();
              this.renderPlayButton();
            }
            break;
          case "width":
            setStyleAttribute(this.element, { "width": formatUnit(this.width) });
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(this.height) });
            break;
          case "autoPlay":
            if (this.showPlayButton && isNullOrUndefined(this.playButtonTemplate)) {
              this.playButtonClickHandler(null, true);
            }
            this.autoSlide();
            break;
          case "interval":
            this.autoSlide();
            break;
          case "showIndicators":
          case "indicatorsType":
            target = this.element.querySelector("." + CLS_INDICATORS);
            if (target) {
              this.resetTemplates(["indicatorsTemplate"]);
              remove(target);
            }
            this.renderIndicators();
            break;
          case "showPlayButton":
            target = this.element.querySelector("." + CLS_PLAY_PAUSE);
            if (!this.showPlayButton && target) {
              remove(target);
              this.resetTemplates(["playButtonTemplate"]);
            }
            this.renderPlayButton();
            break;
          case "items":
          case "dataSource":
            this.reRenderSlides();
            break;
          case "partialVisible":
            if (this.partialVisible) {
              addClass([this.element], CLS_PARTIAL);
            } else {
              removeClass([this.element], CLS_PARTIAL);
            }
            this.reRenderSlides();
            break;
          case "swipeMode":
            EventHandler.remove(this.element, "mousedown touchstart", this.swipeStart);
            EventHandler.remove(this.element, "mousemove touchmove", this.swiping);
            EventHandler.remove(this.element, "mouseup touchend", this.swipStop);
            this.swipeModehandlers();
            this.reRenderSlides();
            break;
        }
      }
    };
    Carousel2.prototype.reRenderSlides = function() {
      var target = this.element.querySelector("." + CLS_ITEMS3);
      if (target) {
        this.resetTemplates(["itemTemplate"]);
        remove(target);
      }
      this.renderSlides();
    };
    Carousel2.prototype.initialize = function() {
      var carouselClasses = [];
      if (this.cssClass) {
        carouselClasses.push(this.cssClass);
      }
      if (this.enableRtl) {
        carouselClasses.push(CLS_RTL6);
      }
      if (this.partialVisible) {
        carouselClasses.push(CLS_PARTIAL);
      }
      if (!(this.swipeMode === (~CarouselSwipeMode.Touch & ~CarouselSwipeMode.Mouse))) {
        carouselClasses.push(CLS_SWIPE);
      }
      addClass([this.element], carouselClasses);
      setStyleAttribute(this.element, { "width": formatUnit(this.width), "height": formatUnit(this.height) });
      attributes(this.element, { "tabindex": "0", "aria-roledescription": "carousel", "aria-label": this.localeObj.getConstant("slideShow") });
      if (!isNullOrUndefined(this.htmlAttributes)) {
        this.setHtmlAttributes(this.htmlAttributes, this.element);
      }
    };
    Carousel2.prototype.renderSlides = function() {
      var _this = this;
      var slideContainer = this.element.querySelector("." + CLS_SLIDE_CONTAINER);
      if (!slideContainer) {
        slideContainer = this.createElement("div", { className: CLS_SLIDE_CONTAINER });
        this.element.appendChild(slideContainer);
      }
      this.itemsContainer = this.createElement("div", { className: CLS_ITEMS3, attrs: { "aria-live": this.autoPlay ? "off" : "polite" } });
      slideContainer.appendChild(this.itemsContainer);
      var numOfItems = this.getNumOfItems();
      if (numOfItems > 0 && this.loop) {
        if (this.items.length > 0) {
          this.items.slice(-numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, item.template, index, _this.itemsContainer, true);
          });
        } else if (this.dataSource.length > 0) {
          this.dataSource.slice(-numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer, true);
          });
        }
      }
      if (this.items.length > 0) {
        this.slideItems = this.items;
        this.items.forEach(function(item, index) {
          _this.renderSlide(item, item.template, index, _this.itemsContainer);
        });
      } else if (this.dataSource.length > 0) {
        this.slideItems = this.dataSource;
        this.dataSource.forEach(function(item, index) {
          _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer);
        });
      }
      if (numOfItems > 0 && this.loop) {
        if (this.items.length > 0) {
          this.items.slice(0, numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, item.template, index, _this.itemsContainer, true);
          });
        } else if (this.dataSource.length > 0) {
          this.dataSource.slice(0, numOfItems).forEach(function(item, index) {
            _this.renderSlide(item, _this.itemTemplate, index, _this.itemsContainer, true);
          });
        }
      }
      this.renderTemplates();
      this.itemsContainer.style.setProperty("--carousel-items-count", "" + this.itemsContainer.children.length);
      var slideWidth = isNullOrUndefined(this.itemsContainer.firstElementChild) ? 0 : this.itemsContainer.firstElementChild.clientWidth;
      this.itemsContainer.style.transitionProperty = "none";
      var cloneCount = this.loop ? numOfItems : 0;
      this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.selectedIndex + cloneCount);
      this.autoSlide();
      this.renderTouchActions();
      this.renderKeyboardActions();
    };
    Carousel2.prototype.getTranslateX = function(slideWidth, count) {
      if (count === void 0) {
        count = 1;
      }
      return this.enableRtl ? "translateX(" + slideWidth * count + "px)" : "translateX(" + -slideWidth * count + "px)";
    };
    Carousel2.prototype.renderSlide = function(item, itemTemplate, index, container, isClone) {
      if (isClone === void 0) {
        isClone = false;
      }
      var itemEle = this.createElement("div", {
        id: getUniqueID("carousel_item"),
        className: CLS_ITEM4 + " " + (item.cssClass ? item.cssClass : "") + " " + (this.selectedIndex === index && !isClone ? CLS_ACTIVE3 : ""),
        attrs: {
          "aria-hidden": this.selectedIndex === index && !isClone ? "false" : "true",
          "data-index": index.toString(),
          "aria-role": "group",
          "aria-roledescription": "slide"
        }
      });
      if (isClone) {
        itemEle.classList.add(CLS_CLONED);
      }
      if (!isNullOrUndefined(item.htmlAttributes)) {
        this.setHtmlAttributes(item.htmlAttributes, itemEle);
      }
      var templateId = this.element.id + "_template";
      var template = this.templateParser(itemTemplate)(item, this, "itemTemplate", templateId, false);
      append(template, itemEle);
      container.appendChild(itemEle);
    };
    Carousel2.prototype.renderNavigators = function() {
      if (this.buttonsVisibility === "Hidden") {
        return;
      }
      var navigators = this.createElement("div", { className: CLS_NAVIGATORS });
      var itemsContainer = this.element.querySelector("." + CLS_SLIDE_CONTAINER);
      itemsContainer.insertAdjacentElement("afterend", navigators);
      if (!isNullOrUndefined(this.slideItems) && this.slideItems.length > 1) {
        this.renderNavigatorButton("Previous");
        this.renderNavigatorButton("Next");
      }
      this.renderTemplates();
    };
    Carousel2.prototype.renderNavigatorButton = function(direction) {
      var buttonContainer = this.createElement("div", {
        className: (direction === "Previous" ? CLS_PREVIOUS : CLS_NEXT) + " " + (this.buttonsVisibility === "VisibleOnHover" ? CLS_HOVER_ARROWS : "")
      });
      if (direction === "Previous" && this.previousButtonTemplate) {
        addClass([buttonContainer], CLS_TEMPLATE3);
        var templateId = this.element.id + "_previousButtonTemplate";
        var template = this.templateParser(this.previousButtonTemplate)({ type: "Previous" }, this, "previousButtonTemplate", templateId, false);
        append(template, buttonContainer);
      } else if (direction === "Next" && this.nextButtonTemplate) {
        addClass([buttonContainer], CLS_TEMPLATE3);
        var templateId = this.element.id + "_nextButtonTemplate";
        var template = this.templateParser(this.nextButtonTemplate)({ type: "Next" }, this, "nextButtonTemplate", templateId, false);
        append(template, buttonContainer);
      } else {
        var button = this.createElement("button", {
          attrs: { "aria-label": this.localeObj.getConstant(direction === "Previous" ? "previousSlide" : "nextSlide"), "type": "button" }
        });
        var buttonObj = new Button({
          cssClass: CLS_FLAT + " " + CLS_ROUND + " " + (direction === "Previous" ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON),
          iconCss: CLS_ICON2 + " " + (direction === "Previous" ? CLS_PREV_ICON : CLS_NEXT_ICON),
          enableRtl: this.enableRtl,
          disabled: !this.loop && this.selectedIndex === (direction === "Previous" ? 0 : this.slideItems.length - 1)
        });
        buttonObj.appendTo(button);
        buttonContainer.appendChild(button);
      }
      this.element.querySelector("." + CLS_NAVIGATORS).appendChild(buttonContainer);
      EventHandler.add(buttonContainer, "click", this.navigatorClickHandler, this);
    };
    Carousel2.prototype.renderPlayButton = function() {
      if (isNullOrUndefined(this.slideItems) || this.buttonsVisibility === "Hidden" || !this.showPlayButton || this.slideItems.length <= 1) {
        return;
      }
      var playPauseWrap = this.createElement("div", {
        className: CLS_PLAY_PAUSE + " " + (this.buttonsVisibility === "VisibleOnHover" ? CLS_HOVER_ARROWS : "")
      });
      if (this.playButtonTemplate) {
        addClass([playPauseWrap], CLS_TEMPLATE3);
        var templateId = this.element.id + "_playButtonTemplate";
        var template = this.templateParser(this.playButtonTemplate)({}, this, "playButtonTemplate", templateId, false);
        append(template, playPauseWrap);
      } else {
        var playButton = this.createElement("button", {
          attrs: { "aria-label": this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"), "type": "button" }
        });
        var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;
        var buttonObj = new Button({
          cssClass: CLS_FLAT + " " + CLS_ROUND + " " + CLS_PLAY_BUTTON,
          iconCss: CLS_ICON2 + " " + (this.autoPlay && !isLastSlide ? CLS_PAUSE_ICON : CLS_PLAY_ICON),
          isToggle: true,
          enableRtl: this.enableRtl
        });
        if (isLastSlide) {
          this.setProperties({ autoPlay: false }, true);
          playButton.setAttribute("aria-label", this.localeObj.getConstant("playSlideTransition"));
          this.itemsContainer.setAttribute("aria-live", "polite");
        }
        buttonObj.appendTo(playButton);
        playPauseWrap.appendChild(playButton);
      }
      var navigators = this.element.querySelector("." + CLS_NAVIGATORS);
      navigators.insertBefore(playPauseWrap, navigators.lastElementChild);
      this.renderTemplates();
      EventHandler.add(playPauseWrap, "click", this.playButtonClickHandler, this);
    };
    Carousel2.prototype.renderIndicators = function() {
      var _this = this;
      if (!this.showIndicators) {
        return;
      }
      var indicatorClass = "e-default";
      if (!this.indicatorsTemplate) {
        indicatorClass = "e-" + this.indicatorsType.toLowerCase();
      }
      var indicatorWrap = this.createElement("div", { className: CLS_INDICATORS + " " + indicatorClass });
      var indicatorBars = this.createElement("div", { className: CLS_INDICATOR_BARS });
      indicatorWrap.appendChild(indicatorBars);
      var progress;
      if (this.slideItems) {
        switch (this.indicatorsType) {
          case "Fraction":
            if (this.indicatorsTemplate) {
              this.renderIndicatorTemplate(indicatorBars, this.selectedIndex + 1);
            } else {
              indicatorBars.innerText = this.selectedIndex + 1 + " / " + this.slideItems.length;
            }
            break;
          case "Progress":
            if (this.indicatorsTemplate) {
              this.renderIndicatorTemplate(indicatorBars, this.selectedIndex + 1);
            } else {
              progress = this.createElement("div", { className: CLS_INDICATOR_BAR });
              progress.style.setProperty("--carousel-items-current", "" + (this.selectedIndex + 1));
              progress.style.setProperty("--carousel-items-count", "" + this.slideItems.length);
              indicatorBars.appendChild(progress);
            }
            break;
          case "Default":
          case "Dynamic":
            this.slideItems.forEach(function(item, index) {
              var indicatorBar = _this.createElement("div", {
                className: CLS_INDICATOR_BAR + " " + (_this.selectedIndex === index ? CLS_ACTIVE3 : _this.selectedIndex - 1 === index ? CLS_PREV_SLIDE : _this.selectedIndex + 1 === index ? CLS_NEXT_SLIDE : ""),
                attrs: { "data-index": index.toString(), "aria-current": _this.selectedIndex === index ? "true" : "false" }
              });
              indicatorBar.style.setProperty("--carousel-items-current", "" + _this.selectedIndex);
              if (_this.indicatorsTemplate) {
                _this.renderIndicatorTemplate(indicatorBar, index);
              } else if (_this.indicatorsType === "Default") {
                var indicator = _this.createElement("button", { className: CLS_INDICATOR2, attrs: { "type": "button", "aria-label": _this.localeObj.getConstant("slide") + " " + (index + 1) + " " + _this.localeObj.getConstant("of") + " " + _this.slideItems.length } });
                indicatorBar.appendChild(indicator);
                indicator.appendChild(_this.createElement("div", {}));
                var buttonObj = new Button({ cssClass: "e-flat e-small" });
                buttonObj.appendTo(indicator);
              }
              indicatorBars.appendChild(indicatorBar);
              if (_this.indicatorsType === "Default") {
                EventHandler.add(indicatorBar, "click", _this.indicatorClickHandler, _this);
              }
            });
            break;
        }
      }
      this.element.appendChild(indicatorWrap);
    };
    Carousel2.prototype.renderIndicatorTemplate = function(indicatorBar, index) {
      if (index === void 0) {
        index = 0;
      }
      addClass([indicatorBar], CLS_TEMPLATE3);
      var templateId = this.element.id + "_indicatorsTemplate";
      var template = this.templateParser(this.indicatorsTemplate)({ index, selectedIndex: this.selectedIndex }, this, "indicatorsTemplate", templateId, false);
      append(template, indicatorBar);
    };
    Carousel2.prototype.renderKeyboardActions = function() {
      this.keyModule = new KeyboardEvents(this.element, { keyAction: this.keyHandler.bind(this), keyConfigs: this.keyConfigs });
    };
    Carousel2.prototype.renderTouchActions = function() {
      if (!this.enableTouchSwipe) {
        return;
      }
      this.touchModule = new Touch(this.element, { swipe: this.swipeHandler.bind(this) });
    };
    Carousel2.prototype.applyAnimation = function() {
      removeClass([this.element], [CLS_CUSTOM_ANIMATION, CLS_FADE_ANIMATION, CLS_SLIDE_ANIMATION, CLS_ANIMATION_NONE]);
      switch (this.animationEffect) {
        case "Slide":
          addClass([this.element], CLS_SLIDE_ANIMATION);
          break;
        case "Fade":
          addClass([this.element], CLS_FADE_ANIMATION);
          break;
        case "None":
          addClass([this.element], CLS_ANIMATION_NONE);
          break;
        case "Custom":
          addClass([this.element], CLS_CUSTOM_ANIMATION);
          break;
      }
    };
    Carousel2.prototype.autoSlide = function() {
      if (isNullOrUndefined(this.slideItems) || this.slideItems.length <= 1) {
        return;
      }
      this.resetSlideInterval();
      this.applySlideInterval();
    };
    Carousel2.prototype.autoSlideChange = function() {
      var activeSlide = this.element.querySelector("." + CLS_ACTIVE3);
      if (isNullOrUndefined(activeSlide)) {
        return;
      }
      var activeIndex = parseInt(activeSlide.dataset.index, 10);
      if (!this.loop && activeIndex === this.slideItems.length - 1) {
        this.resetSlideInterval();
      } else {
        var index = (activeIndex + 1) % this.slideItems.length;
        if (!this.element.classList.contains(CLS_HOVER)) {
          this.setActiveSlide(index, "Next");
        }
        this.autoSlide();
      }
    };
    Carousel2.prototype.applySlideInterval = function() {
      var _this = this;
      if (!this.autoPlay || this.element.classList.contains(CLS_HOVER)) {
        return;
      }
      var itemInterval = this.interval;
      if (this.items.length > 0 && !isNullOrUndefined(this.items[this.selectedIndex].interval)) {
        itemInterval = this.items[this.selectedIndex].interval;
      }
      this.autoSlideInterval = setInterval(function() {
        return _this.autoSlideChange();
      }, itemInterval);
    };
    Carousel2.prototype.resetSlideInterval = function() {
      clearInterval(this.autoSlideInterval);
      this.autoSlideInterval = null;
    };
    Carousel2.prototype.getSlideIndex = function(direction) {
      var currentIndex = this.selectedIndex;
      if (direction === "Previous") {
        currentIndex--;
        if (currentIndex < 0) {
          currentIndex = this.slideItems.length - 1;
        }
      } else {
        currentIndex++;
        if (currentIndex === this.slideItems.length) {
          currentIndex = 0;
        }
      }
      return currentIndex;
    };
    Carousel2.prototype.setActiveSlide = function(currentIndex, direction, isSwiped) {
      var _this = this;
      if (isSwiped === void 0) {
        isSwiped = false;
      }
      if (this.element.querySelectorAll("." + CLS_ITEM4 + "." + CLS_PREV_SLIDE + ",." + CLS_ITEM4 + "." + CLS_NEXT_SLIDE).length > 0) {
        return;
      }
      var allSlides = [].slice.call(this.element.querySelectorAll("." + CLS_ITEM4 + ":not(.e-cloned)"));
      var activeSlide = this.element.querySelector("." + CLS_ITEM4 + "." + CLS_ACTIVE3);
      if (isNullOrUndefined(activeSlide) && this.showIndicators) {
        var activeIndicator = this.element.querySelector("." + CLS_INDICATOR_BAR + "." + CLS_ACTIVE3);
        var activeIndex_1 = parseInt(activeIndicator.dataset.index, 10);
        addClass([allSlides[parseInt(activeIndex_1.toString(), 10)]], CLS_ACTIVE3);
        return;
      } else if (isNullOrUndefined(activeSlide)) {
        addClass([allSlides[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE3);
        return;
      }
      var activeIndex = parseInt(activeSlide.dataset.index, 10);
      var currentSlide = allSlides[parseInt(currentIndex.toString(), 10)];
      var eventArgs = {
        currentIndex: activeIndex,
        nextIndex: currentIndex,
        currentSlide: activeSlide,
        nextSlide: currentSlide,
        slideDirection: direction,
        isSwiped,
        cancel: false
      };
      this.trigger("slideChanging", eventArgs, function(args) {
        if (args.cancel) {
          return;
        }
        _this.setProperties({ selectedIndex: currentIndex }, true);
        attributes(args.currentSlide, { "aria-hidden": "true" });
        attributes(args.nextSlide, { "aria-hidden": "false" });
        _this.refreshIndicators(activeIndex, currentIndex);
        _this.slideChangedEventArgs = {
          currentIndex: args.nextIndex,
          previousIndex: args.currentIndex,
          currentSlide: args.nextSlide,
          previousSlide: args.currentSlide,
          slideDirection: direction,
          isSwiped
        };
        var slideWidth = allSlides[parseInt(currentIndex.toString(), 10)].clientWidth;
        var numOfItems = _this.getNumOfItems();
        if (!_this.isSwipe) {
          _this.itemsContainer.style.transitionDuration = "0.6s";
        }
        _this.isSwipe = false;
        if (_this.animationEffect === "Fade") {
          _this.itemsContainer.classList.add("e-fade-in-out");
        } else {
          _this.itemsContainer.style.transitionProperty = "transform";
        }
        if (_this.loop) {
          if (_this.slideChangedEventArgs.currentIndex === 0 && _this.slideChangedEventArgs.slideDirection === "Next") {
            _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, allSlides.length + numOfItems);
          } else if (_this.slideChangedEventArgs.currentIndex === _this.slideItems.length - 1 && _this.slideChangedEventArgs.slideDirection === "Previous") {
            _this.itemsContainer.style.transform = _this.partialVisible ? _this.getTranslateX(slideWidth) : "translateX(0px)";
          } else {
            _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, currentIndex + numOfItems);
          }
        } else {
          _this.itemsContainer.style.transform = _this.getTranslateX(slideWidth, currentIndex);
        }
        if (_this.animationEffect === "Slide") {
          if (direction === "Previous") {
            addClass([args.nextSlide], CLS_PREV_SLIDE);
            args.nextSlide.setAttribute("data-slide-height", args.nextSlide.offsetHeight.toString());
            addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_END);
          } else {
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
            args.nextSlide.setAttribute("data-slide-height", args.nextSlide.offsetHeight.toString());
            addClass([args.currentSlide, args.nextSlide], CLS_TRANSITION_START);
          }
        } else if (_this.animationEffect === "Fade") {
          removeClass([args.currentSlide], CLS_ACTIVE3);
          addClass([args.nextSlide], CLS_ACTIVE3);
        } else if (_this.animationEffect === "Custom") {
          if (direction === "Previous") {
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
            addClass([args.currentSlide], CLS_PREV_SLIDE);
          } else {
            addClass([args.currentSlide], CLS_PREV_SLIDE);
            addClass([args.nextSlide], CLS_NEXT_SLIDE);
          }
        } else {
          _this.onTransitionEnd();
        }
        _this.handleNavigatorsActions(currentIndex);
      });
    };
    Carousel2.prototype.onTransitionEnd = function() {
      var _this = this;
      removeClass(this.element.querySelectorAll("." + CLS_ITEMS3), "e-fade-in-out");
      var numOfItems = this.getNumOfItems();
      if (this.slideChangedEventArgs) {
        this.itemsContainer.style.transitionProperty = "none";
        if (this.loop && (this.slideChangedEventArgs.currentIndex === 0 && this.slideChangedEventArgs.slideDirection === "Next" || this.slideChangedEventArgs.currentIndex === this.slideItems.length - 1 && this.slideChangedEventArgs.slideDirection === "Previous")) {
          var slideWidth = this.slideChangedEventArgs.currentSlide.clientWidth;
          this.itemsContainer.style.transform = this.getTranslateX(slideWidth, this.slideChangedEventArgs.currentIndex + numOfItems);
        }
        addClass([this.slideChangedEventArgs.currentSlide], CLS_ACTIVE3);
        removeClass([this.slideChangedEventArgs.previousSlide], CLS_ACTIVE3);
        this.trigger("slideChanged", this.slideChangedEventArgs, function() {
          removeClass(_this.element.querySelectorAll("." + CLS_ITEM4), [CLS_PREV_SLIDE, CLS_NEXT_SLIDE, CLS_TRANSITION_START, CLS_TRANSITION_END]);
          _this.slideChangedEventArgs = null;
        });
      }
    };
    Carousel2.prototype.refreshIndicators = function(activeIndex, currentIndex) {
      var _this = this;
      var slideIndicator = this.element.querySelector("." + CLS_INDICATOR_BARS);
      if (isNullOrUndefined(slideIndicator)) {
        return;
      }
      var indicators = [].slice.call(slideIndicator.childNodes);
      switch (this.indicatorsType) {
        case "Default":
        case "Dynamic":
          attributes(indicators[parseInt(activeIndex.toString(), 10)], { "aria-current": "false" });
          attributes(indicators[parseInt(currentIndex.toString(), 10)], { "aria-current": "true" });
          removeClass(indicators, [CLS_ACTIVE3, CLS_PREV_SLIDE, CLS_NEXT_SLIDE]);
          addClass([indicators[parseInt(currentIndex.toString(), 10)]], CLS_ACTIVE3);
          if (indicators[currentIndex - 1]) {
            addClass([indicators[currentIndex - 1]], CLS_PREV_SLIDE);
          }
          if (indicators[currentIndex + 1]) {
            addClass([indicators[currentIndex + 1]], CLS_NEXT_SLIDE);
          }
          indicators.forEach(function(item) {
            return item.style.setProperty("--carousel-items-current", "" + _this.selectedIndex);
          });
          break;
        case "Fraction":
          if (this.indicatorsTemplate) {
            if (slideIndicator.children.length > 0) {
              slideIndicator.removeChild(slideIndicator.firstElementChild);
            }
            this.renderIndicatorTemplate(slideIndicator, currentIndex + 1);
          } else {
            slideIndicator.innerText = this.selectedIndex + 1 + " / " + this.slideItems.length;
          }
          break;
        case "Progress":
          if (this.indicatorsTemplate) {
            if (slideIndicator.children.length > 0) {
              slideIndicator.removeChild(slideIndicator.firstElementChild);
            }
            this.renderIndicatorTemplate(slideIndicator, currentIndex + 1);
          } else {
            slideIndicator.firstElementChild.style.setProperty("--carousel-items-current", "" + (this.selectedIndex + 1));
          }
          break;
      }
    };
    Carousel2.prototype.setHtmlAttributes = function(attribute, element2) {
      var keys = Object.keys(attribute);
      for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        if (key === "class") {
          addClass([element2], attribute["" + key]);
        } else {
          element2.setAttribute(key, attribute["" + key]);
        }
      }
    };
    Carousel2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    Carousel2.prototype.getNavigatorState = function(target, isPrevious) {
      var button = target.querySelector("." + (isPrevious ? CLS_PREV_BUTTON : CLS_NEXT_BUTTON));
      if (button) {
        var buttonObj = getInstance(button, Button);
        return buttonObj.disabled;
      }
      return false;
    };
    Carousel2.prototype.navigatorClickHandler = function(e) {
      var target = e.currentTarget;
      var isDisabled = this.getNavigatorState(target, target.classList.contains(CLS_PREVIOUS));
      if (isDisabled) {
        return;
      }
      var direction = target.classList.contains(CLS_PREVIOUS) ? "Previous" : "Next";
      this.setActiveSlide(this.getSlideIndex(direction), direction);
      this.autoSlide();
    };
    Carousel2.prototype.indicatorClickHandler = function(e) {
      var target = closest(e.target, "." + CLS_INDICATOR_BAR);
      var index = parseInt(target.dataset.index, 10);
      if (this.selectedIndex !== index) {
        this.setActiveSlide(index, this.selectedIndex > index ? "Previous" : "Next");
        this.autoSlide();
      }
    };
    Carousel2.prototype.playButtonClickHandler = function(e, isPropertyChange) {
      if (isPropertyChange === void 0) {
        isPropertyChange = false;
      }
      var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
      if (playButton) {
        var buttonObj = getInstance(playButton, Button);
        if (!isPropertyChange) {
          this.setProperties({ autoPlay: !this.autoPlay }, true);
        }
        playButton.setAttribute("aria-label", this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"));
        buttonObj.iconCss = CLS_ICON2 + " " + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);
        buttonObj.dataBind();
        this.itemsContainer.setAttribute("aria-live", this.autoPlay ? "off" : "polite");
        if (this.autoPlay && !this.loop && this.selectedIndex === this.slideItems.length - 1) {
          this.setActiveSlide(0, "Next");
        }
        this.autoSlide();
      }
    };
    Carousel2.prototype.keyHandler = function(e) {
      var direction;
      var slideIndex;
      var isSlideTransition = false;
      var target = e.target;
      e.preventDefault();
      switch (e.action) {
        case "space":
          if (this.showIndicators && target.classList.contains(CLS_INDICATOR2)) {
            target.click();
          } else if (target.classList.contains(CLS_CAROUSEL) || target.classList.contains(CLS_PLAY_BUTTON)) {
            this.playButtonClickHandler(e);
          } else if (target.classList.contains(CLS_NEXT_BUTTON)) {
            this.next();
          } else if (target.classList.contains(CLS_PREV_BUTTON)) {
            this.prev();
          }
          break;
        case "end":
          slideIndex = this.slideItems.length - 1;
          direction = "Next";
          isSlideTransition = true;
          break;
        case "home":
          slideIndex = 0;
          direction = "Previous";
          isSlideTransition = true;
          break;
        case "moveUp":
        case "moveLeft":
        case "moveDown":
        case "moveRight":
          if (this.showIndicators && isNullOrUndefined(this.indicatorsTemplate)) {
            this.element.focus();
          }
          direction = e.action === "moveUp" || e.action === "moveLeft" ? "Previous" : "Next";
          slideIndex = this.getSlideIndex(direction);
          isSlideTransition = !this.isSuspendSlideTransition(slideIndex, direction);
          break;
      }
      if (isSlideTransition) {
        this.setActiveSlide(slideIndex, direction);
        this.autoSlide();
        isSlideTransition = false;
      }
    };
    Carousel2.prototype.swipeHandler = function(e) {
      if (this.element.classList.contains(CLS_HOVER) || isNullOrUndefined(this.slideItems) || this.slideItems.length <= 1) {
        return;
      }
      var direction = e.swipeDirection === "Right" ? "Previous" : "Next";
      var slideIndex = this.getSlideIndex(direction);
      if (!this.isSuspendSlideTransition(slideIndex, direction)) {
        this.setActiveSlide(slideIndex, direction, true);
        this.autoSlide();
      }
    };
    Carousel2.prototype.isSuspendSlideTransition = function(index, direction) {
      return !this.loop && (direction === "Next" && index === 0 || direction === "Previous" && index === this.slideItems.length - 1);
    };
    Carousel2.prototype.handleNavigatorsActions = function(index) {
      if (this.buttonsVisibility === "Hidden") {
        return;
      }
      if (this.showPlayButton) {
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        var isLastSlide = this.selectedIndex === this.slideItems.length - 1 && !this.loop;
        var isButtonUpdate = isNullOrUndefined(this.playButtonTemplate) && playButton && isLastSlide;
        if (isNullOrUndefined(this.playButtonTemplate) && playButton && !isLastSlide) {
          isButtonUpdate = !playButton.classList.contains(CLS_ACTIVE3);
        }
        if (isButtonUpdate) {
          this.setProperties({ autoPlay: !isLastSlide }, true);
          playButton.setAttribute("aria-label", this.localeObj.getConstant(this.autoPlay ? "pauseSlideTransition" : "playSlideTransition"));
          this.itemsContainer.setAttribute("aria-live", this.autoPlay ? "off" : "polite");
          var buttonObj = getInstance(playButton, Button);
          buttonObj.iconCss = CLS_ICON2 + " " + (this.autoPlay ? CLS_PAUSE_ICON : CLS_PLAY_ICON);
          buttonObj.dataBind();
        }
      }
      var prevButton = this.element.querySelector("." + CLS_PREV_BUTTON);
      if (prevButton && isNullOrUndefined(this.previousButtonTemplate)) {
        var buttonObj = getInstance(prevButton, Button);
        buttonObj.disabled = !this.loop && index === 0;
        buttonObj.dataBind();
      }
      var nextButton = this.element.querySelector("." + CLS_NEXT_BUTTON);
      if (nextButton && isNullOrUndefined(this.nextButtonTemplate)) {
        var buttonObj = getInstance(nextButton, Button);
        buttonObj.disabled = !this.loop && index === this.slideItems.length - 1;
        buttonObj.dataBind();
      }
    };
    Carousel2.prototype.onHoverActions = function(e) {
      var navigator = this.element.querySelector("." + CLS_NAVIGATORS);
      switch (e.type) {
        case "mouseenter":
          if (this.buttonsVisibility === "VisibleOnHover" && navigator) {
            removeClass([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);
          }
          if (this.pauseOnHover) {
            addClass([this.element], CLS_HOVER);
          }
          break;
        case "mouseleave":
          if (this.buttonsVisibility === "VisibleOnHover" && navigator) {
            addClass([].slice.call(navigator.childNodes), CLS_HOVER_ARROWS);
          }
          removeClass([this.element], CLS_HOVER);
          break;
      }
      this.autoSlide();
    };
    Carousel2.prototype.onFocusActions = function(e) {
      switch (e.type) {
        case "focusin":
          addClass([this.element], CLS_HOVER);
          break;
        case "focusout":
          removeClass([this.element], CLS_HOVER);
          break;
      }
      this.autoSlide();
    };
    Carousel2.prototype.destroyButtons = function() {
      var buttonCollections = [].slice.call(this.element.querySelectorAll(".e-control.e-btn"));
      for (var _i = 0, buttonCollections_1 = buttonCollections; _i < buttonCollections_1.length; _i++) {
        var button = buttonCollections_1[_i];
        var instance = getInstance(button, Button);
        if (instance) {
          instance.destroy();
        }
      }
    };
    Carousel2.prototype.getNumOfItems = function() {
      return this.partialVisible ? 2 : 1;
    };
    Carousel2.prototype.getTranslateValue = function(element2) {
      var style = getComputedStyle(element2);
      return window.WebKitCSSMatrix ? new WebKitCSSMatrix(style.webkitTransform).m41 : 0;
    };
    Carousel2.prototype.swipeStart = function(e) {
      if (!this.timeStampStart) {
        this.timeStampStart = Date.now();
      }
      this.isSwipe = false;
      this.itemsContainer.classList.add("e-swipe-start");
      this.prevPageX = e.touches ? e.touches[0].pageX : e.pageX;
      this.initialTranslate = this.getTranslateValue(this.itemsContainer);
    };
    Carousel2.prototype.swiping = function(e) {
      if (!this.itemsContainer.classList.contains("e-swipe-start")) {
        return;
      }
      e.preventDefault();
      var pageX = e.touches ? e.touches[0].pageX : e.pageX;
      var positionDiff = this.prevPageX - pageX;
      if (!this.loop && (this.enableRtl && (this.selectedIndex === 0 && positionDiff > 0 || this.selectedIndex === this.itemsContainer.childElementCount - 1 && positionDiff < 0) || !this.enableRtl && (this.selectedIndex === 0 && positionDiff < 0 || this.selectedIndex === this.itemsContainer.childElementCount - 1 && positionDiff > 0))) {
        return;
      }
      this.itemsContainer.style.transform = "translateX(" + (this.initialTranslate + (this.enableRtl ? positionDiff : -positionDiff)) + "px)";
    };
    Carousel2.prototype.swipStop = function() {
      this.isSwipe = true;
      var time = Date.now() - this.timeStampStart;
      var distanceX = this.getTranslateValue(this.itemsContainer) - this.initialTranslate;
      distanceX = distanceX < 0 ? distanceX * -1 : distanceX;
      if (this.isSwipe) {
        var offsetDist = distanceX * (Browser.isDevice ? 6 : 1.66);
        this.itemsContainer.style.transitionDuration = (Browser.isDevice ? distanceX : offsetDist) / time / 10 + "s";
      }
      var slideWidth = this.itemsContainer.firstElementChild.clientWidth;
      var threshold = slideWidth / 2;
      this.itemsContainer.classList.remove("e-swipe-start");
      var value = this.getTranslateValue(this.itemsContainer);
      if (value - this.initialTranslate < -threshold) {
        this.swipeNavigation(!this.enableRtl);
      } else if (value - this.initialTranslate > threshold) {
        this.swipeNavigation(this.enableRtl);
      } else {
        this.itemsContainer.style.transform = "translateX(" + this.initialTranslate + "px)";
        if (this.animationEffect === "Fade") {
          this.itemsContainer.classList.add("e-fade-in-out");
        }
      }
    };
    Carousel2.prototype.swipeNavigation = function(isRtl) {
      if (isRtl) {
        this.next();
      } else {
        this.prev();
      }
    };
    Carousel2.prototype.swipeModehandlers = function() {
      if ((this.swipeMode & CarouselSwipeMode.Touch) === CarouselSwipeMode.Touch) {
        EventHandler.add(this.itemsContainer, "touchstart", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "touchmove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "touchend", this.swipStop, this);
      }
      if ((this.swipeMode & CarouselSwipeMode.Mouse) === CarouselSwipeMode.Mouse) {
        EventHandler.add(this.itemsContainer, "mousedown", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "mousemove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "mouseup", this.swipStop, this);
      }
      if (this.swipeMode === 0 && (this.swipeMode & CarouselSwipeMode.Mouse & CarouselSwipeMode.Touch) === (CarouselSwipeMode.Mouse & CarouselSwipeMode.Touch)) {
        EventHandler.add(this.itemsContainer, "mousedown touchstart", this.swipeStart, this);
        EventHandler.add(this.itemsContainer, "mousemove touchmove", this.swiping, this);
        EventHandler.add(this.itemsContainer, "mouseup touchend", this.swipStop, this);
      }
    };
    Carousel2.prototype.wireEvents = function() {
      if (!(this.animationEffect === "Custom")) {
        this.swipeModehandlers();
      }
      EventHandler.add(this.element, "focusin focusout", this.onFocusActions, this);
      EventHandler.add(this.element, "mouseenter mouseleave", this.onHoverActions, this);
      EventHandler.add(this.element.firstElementChild, "animationend", this.onTransitionEnd, this);
      EventHandler.add(this.element.firstElementChild, "transitionend", this.onTransitionEnd, this);
    };
    Carousel2.prototype.unWireEvents = function() {
      var _this = this;
      var indicators = [].slice.call(this.element.querySelectorAll("." + CLS_INDICATOR_BAR));
      indicators.forEach(function(indicator) {
        EventHandler.remove(indicator, "click", _this.indicatorClickHandler);
      });
      var navigators = [].slice.call(this.element.querySelectorAll("." + CLS_PREVIOUS + ",." + CLS_NEXT));
      navigators.forEach(function(navigator) {
        EventHandler.remove(navigator, "click", _this.navigatorClickHandler);
      });
      var playIcon = this.element.querySelector("." + CLS_PLAY_PAUSE);
      if (playIcon) {
        EventHandler.remove(playIcon, "click", this.playButtonClickHandler);
      }
      EventHandler.remove(this.element.firstElementChild, "animationend", this.onTransitionEnd);
      EventHandler.remove(this.element.firstElementChild, "transitionend", this.onTransitionEnd);
      EventHandler.clearEvents(this.element);
    };
    Carousel2.prototype.prev = function() {
      if (!this.loop && this.selectedIndex === 0) {
        return;
      }
      var index = this.selectedIndex === 0 ? this.slideItems.length - 1 : this.selectedIndex - 1;
      this.setActiveSlide(index, "Previous");
      this.autoSlide();
    };
    Carousel2.prototype.next = function() {
      if (!this.loop && this.selectedIndex === this.slideItems.length - 1) {
        return;
      }
      var index = this.selectedIndex === this.slideItems.length - 1 ? 0 : this.selectedIndex + 1;
      this.setActiveSlide(index, "Next");
      this.autoSlide();
    };
    Carousel2.prototype.play = function() {
      var playIcon = this.element.querySelector("." + CLS_PLAY_ICON);
      if (this.showPlayButton && playIcon) {
        classList(playIcon, [CLS_PAUSE_ICON], [CLS_PLAY_ICON]);
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        playButton.setAttribute("aria-label", this.localeObj.getConstant("pauseSlideTransition"));
      }
      this.setProperties({ autoPlay: true }, true);
      this.itemsContainer.setAttribute("aria-live", "off");
      this.applySlideInterval();
    };
    Carousel2.prototype.pause = function() {
      var pauseIcon = this.element.querySelector("." + CLS_PAUSE_ICON);
      if (this.showPlayButton && pauseIcon) {
        var playButton = this.element.querySelector("." + CLS_PLAY_BUTTON);
        playButton.setAttribute("aria-label", this.localeObj.getConstant("playSlideTransition"));
        classList(pauseIcon, [CLS_PLAY_ICON], [CLS_PAUSE_ICON]);
      }
      this.setProperties({ autoPlay: false }, true);
      this.itemsContainer.setAttribute("aria-live", "off");
      this.resetSlideInterval();
    };
    Carousel2.prototype.renderTemplates = function() {
      if (this.isAngular || this.isReact) {
        this.renderReactTemplates();
      }
    };
    Carousel2.prototype.resetTemplates = function(templates) {
      if (this.isAngular || this.isReact) {
        this.clearTemplate(templates);
      }
    };
    Carousel2.prototype.destroy = function() {
      var _this = this;
      this.resetTemplates();
      if (this.touchModule) {
        this.touchModule.destroy();
        this.touchModule = null;
      }
      this.keyModule.destroy();
      this.keyModule = null;
      this.resetSlideInterval();
      this.destroyButtons();
      this.unWireEvents();
      [].slice.call(this.element.children).forEach(function(ele) {
        _this.element.removeChild(ele);
      });
      removeClass([this.element], [CLS_CAROUSEL, this.cssClass, CLS_RTL6]);
      ["tabindex", "role", "style"].forEach(function(attr) {
        _this.element.removeAttribute(attr);
      });
      _super.prototype.destroy.call(this);
    };
    __decorate30([
      Collection([], CarouselItem)
    ], Carousel2.prototype, "items", void 0);
    __decorate30([
      Property("Slide")
    ], Carousel2.prototype, "animationEffect", void 0);
    __decorate30([
      Property()
    ], Carousel2.prototype, "previousButtonTemplate", void 0);
    __decorate30([
      Property()
    ], Carousel2.prototype, "nextButtonTemplate", void 0);
    __decorate30([
      Property()
    ], Carousel2.prototype, "indicatorsTemplate", void 0);
    __decorate30([
      Property()
    ], Carousel2.prototype, "playButtonTemplate", void 0);
    __decorate30([
      Property()
    ], Carousel2.prototype, "cssClass", void 0);
    __decorate30([
      Property([])
    ], Carousel2.prototype, "dataSource", void 0);
    __decorate30([
      Property()
    ], Carousel2.prototype, "itemTemplate", void 0);
    __decorate30([
      Property(0)
    ], Carousel2.prototype, "selectedIndex", void 0);
    __decorate30([
      Property("100%")
    ], Carousel2.prototype, "width", void 0);
    __decorate30([
      Property("100%")
    ], Carousel2.prototype, "height", void 0);
    __decorate30([
      Property(5e3)
    ], Carousel2.prototype, "interval", void 0);
    __decorate30([
      Property(true)
    ], Carousel2.prototype, "autoPlay", void 0);
    __decorate30([
      Property(true)
    ], Carousel2.prototype, "pauseOnHover", void 0);
    __decorate30([
      Property(true)
    ], Carousel2.prototype, "loop", void 0);
    __decorate30([
      Property(false)
    ], Carousel2.prototype, "showPlayButton", void 0);
    __decorate30([
      Property(true)
    ], Carousel2.prototype, "enableTouchSwipe", void 0);
    __decorate30([
      Property(true)
    ], Carousel2.prototype, "showIndicators", void 0);
    __decorate30([
      Property("Default")
    ], Carousel2.prototype, "indicatorsType", void 0);
    __decorate30([
      Property("Visible")
    ], Carousel2.prototype, "buttonsVisibility", void 0);
    __decorate30([
      Property(false)
    ], Carousel2.prototype, "partialVisible", void 0);
    __decorate30([
      Property(CarouselSwipeMode.Touch)
    ], Carousel2.prototype, "swipeMode", void 0);
    __decorate30([
      Property()
    ], Carousel2.prototype, "htmlAttributes", void 0);
    __decorate30([
      Event()
    ], Carousel2.prototype, "slideChanging", void 0);
    __decorate30([
      Event()
    ], Carousel2.prototype, "slideChanged", void 0);
    Carousel2 = __decorate30([
      NotifyPropertyChanges
    ], Carousel2);
    return Carousel2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-navigations/src/appbar/appbar.js
var __extends34 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate31 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CLS_APPBAR = "e-appbar";
var CLS_HORIZONTAL_BOTTOM = "e-horizontal-bottom";
var CLS_STICKY = "e-sticky";
var CLS_PROMINENT = "e-prominent";
var CLS_DENSE = "e-dense";
var CLS_RTL7 = "e-rtl";
var CLS_LIGHT = "e-light";
var CLS_DARK = "e-dark";
var CLS_PRIMARY = "e-primary";
var CLS_INHERIT = "e-inherit";
var AppBar = (
  /** @class */
  function(_super) {
    __extends34(AppBar2, _super);
    function AppBar2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    AppBar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.element.classList.remove(CLS_APPBAR);
      this.element.removeAttribute("style");
      this.element.removeAttribute("role");
    };
    AppBar2.prototype.getModuleName = function() {
      return "appbar";
    };
    AppBar2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    AppBar2.prototype.preRender = function() {
    };
    AppBar2.prototype.render = function() {
      if (this.element.tagName !== "HEADER") {
        this.element.setAttribute("role", "header");
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
      if (this.position === "Bottom") {
        this.element.classList.add(CLS_HORIZONTAL_BOTTOM);
      }
      if (this.isSticky) {
        this.element.classList.add(CLS_STICKY);
      }
      if (this.enableRtl) {
        this.element.classList.add(CLS_RTL7);
      }
      this.setHeightMode();
      this.setColorMode();
      if (!isNullOrUndefined(this.htmlAttributes)) {
        this.setHtmlAttributes(this.htmlAttributes, this.element);
      }
    };
    AppBar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "mode":
            removeClass([this.element], [CLS_DENSE, CLS_PROMINENT]);
            this.setHeightMode();
            break;
          case "position":
            if (this.position === "Bottom") {
              addClass([this.element], CLS_HORIZONTAL_BOTTOM);
            } else {
              removeClass([this.element], CLS_HORIZONTAL_BOTTOM);
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.split(" "));
            }
            break;
          case "isSticky":
            if (this.isSticky) {
              addClass([this.element], CLS_STICKY);
            } else {
              removeClass([this.element], CLS_STICKY);
            }
            break;
          case "htmlAttributes":
            if (!isNullOrUndefined(this.htmlAttributes)) {
              if (!isNullOrUndefined(oldProp.htmlAttributes)) {
                var keys = Object.keys(oldProp.htmlAttributes);
                for (var _b = 0, keys_1 = keys; _b < keys_1.length; _b++) {
                  var key = keys_1[_b];
                  if (key === "class") {
                    removeClass([this.element], oldProp.htmlAttributes["" + key]);
                  } else {
                    this.element.removeAttribute(key);
                  }
                }
              }
              this.setHtmlAttributes(newProp.htmlAttributes, this.element);
            }
            break;
          case "colorMode":
            removeClass([this.element], [CLS_DARK, CLS_PRIMARY, CLS_INHERIT, CLS_LIGHT]);
            this.setColorMode();
            break;
          case "enableRtl":
            if (this.enableRtl) {
              addClass([this.element], CLS_RTL7);
            } else {
              removeClass([this.element], CLS_RTL7);
            }
            break;
        }
      }
    };
    AppBar2.prototype.setHtmlAttributes = function(attribute, element2) {
      var keys = Object.keys(attribute);
      for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
        var key = keys_2[_i];
        if (key === "class") {
          addClass([element2], attribute["" + key]);
        } else {
          element2.setAttribute(key, attribute["" + key]);
        }
      }
    };
    AppBar2.prototype.setHeightMode = function() {
      if (this.mode === "Prominent") {
        this.element.classList.add(CLS_PROMINENT);
      } else if (this.mode === "Dense") {
        this.element.classList.add(CLS_DENSE);
      }
    };
    AppBar2.prototype.setColorMode = function() {
      switch (this.colorMode) {
        case "Light":
          this.element.classList.add(CLS_LIGHT);
          break;
        case "Dark":
          this.element.classList.add(CLS_DARK);
          break;
        case "Primary":
          this.element.classList.add(CLS_PRIMARY);
          break;
        case "Inherit":
          this.element.classList.add(CLS_INHERIT);
          break;
      }
    };
    __decorate31([
      Property("Regular")
    ], AppBar2.prototype, "mode", void 0);
    __decorate31([
      Property("Top")
    ], AppBar2.prototype, "position", void 0);
    __decorate31([
      Property()
    ], AppBar2.prototype, "cssClass", void 0);
    __decorate31([
      Property(false)
    ], AppBar2.prototype, "isSticky", void 0);
    __decorate31([
      Property()
    ], AppBar2.prototype, "htmlAttributes", void 0);
    __decorate31([
      Property("Light")
    ], AppBar2.prototype, "colorMode", void 0);
    __decorate31([
      Event()
    ], AppBar2.prototype, "created", void 0);
    __decorate31([
      Event()
    ], AppBar2.prototype, "destroyed", void 0);
    AppBar2 = __decorate31([
      NotifyPropertyChanges
    ], AppBar2);
    return AppBar2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/drop-down-tree/drop-down-tree.js
var __extends35 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate32 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RTL9 = "e-rtl";
var DROPDOWNTREE = "e-ddt";
var HIDDENELEMENT = "e-ddt-hidden";
var DROPDOWNICON = "e-input-group-icon e-ddt-icon e-icons";
var SHOW_CHIP = "e-show-chip";
var SHOW_CLEAR = "e-show-clear";
var SHOW_DD_ICON = "e-show-dd-icon";
var CHIP_INPUT = "e-chip-input";
var INPUTFOCUS = "e-input-focus";
var INPUTGROUP2 = "e-input-group";
var ICONANIMATION = "e-icon-anim";
var CLOSEICON_CLASS = "e-clear-icon e-icons";
var CHIP_WRAPPER = "e-chips-wrapper";
var CHIP_COLLECTION = "e-chips-collection";
var CHIP = "e-chips";
var CHIP_CONTENT = "e-chipcontent";
var CHIP_CLOSE = "e-chips-close";
var HIDEICON = "e-icon-hide";
var DDTHIDEICON = "e-ddt-icon-hide";
var POPUP_CLASS = "e-ddt e-popup";
var PARENTITEM2 = "e-list-parent";
var CONTENT2 = "e-popup-content";
var DROPDOWN = "e-dropdown";
var DISABLED6 = "e-disabled";
var ICONS2 = "e-icons";
var CHECKALLPARENT = "e-selectall-parent";
var CHECKALLHIDE = "e-hide-selectall";
var BIGGER2 = "e-bigger";
var SMALL2 = "e-small";
var ALLTEXT = "e-all-text";
var CHECKBOXFRAME2 = "e-frame";
var CHECK3 = "e-check";
var CHECKBOXWRAP2 = "e-checkbox-wrapper";
var FILTERWRAP = "e-filter-wrap";
var DDTICON = "e-ddt-icon";
var FOOTER = "e-ddt-footer";
var HEADER2 = "e-ddt-header";
var NODATACONTAINER = "e-ddt-nodata";
var NODATA = "e-no-data";
var HEADERTEMPLATE = "HeaderTemplate";
var FOOTERTEMPLATE = "FooterTemplate";
var NORECORDSTEMPLATE = "NoRecordsTemplate";
var ACTIONFAILURETEMPLATE = "ActionFailureTemplate";
var CUSTOMTEMPLATE = "CustomTemplate";
var REMAIN_WRAPPER = "e-remain";
var OVERFLOW_VIEW = "e-overflow";
var SHOW_TEXT = "e-show-text";
var TOTAL_COUNT_WRAPPER = "e-total-count";
var REMAIN_COUNT = "e-wrap-count";
var Fields = (
  /** @class */
  function(_super) {
    __extends35(Fields2, _super);
    function Fields2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate32([
      Property("child")
    ], Fields2.prototype, "child", void 0);
    __decorate32([
      Property([])
    ], Fields2.prototype, "dataSource", void 0);
    __decorate32([
      Property("expanded")
    ], Fields2.prototype, "expanded", void 0);
    __decorate32([
      Property("hasChildren")
    ], Fields2.prototype, "hasChildren", void 0);
    __decorate32([
      Property("htmlAttributes")
    ], Fields2.prototype, "htmlAttributes", void 0);
    __decorate32([
      Property("iconCss")
    ], Fields2.prototype, "iconCss", void 0);
    __decorate32([
      Property("imageUrl")
    ], Fields2.prototype, "imageUrl", void 0);
    __decorate32([
      Property("parentValue")
    ], Fields2.prototype, "parentValue", void 0);
    __decorate32([
      Property(null)
    ], Fields2.prototype, "query", void 0);
    __decorate32([
      Property("selectable")
    ], Fields2.prototype, "selectable", void 0);
    __decorate32([
      Property("selected")
    ], Fields2.prototype, "selected", void 0);
    __decorate32([
      Property(null)
    ], Fields2.prototype, "tableName", void 0);
    __decorate32([
      Property("text")
    ], Fields2.prototype, "text", void 0);
    __decorate32([
      Property("tooltip")
    ], Fields2.prototype, "tooltip", void 0);
    __decorate32([
      Property("value")
    ], Fields2.prototype, "value", void 0);
    return Fields2;
  }(ChildProperty)
);
var TreeSettings = (
  /** @class */
  function(_super) {
    __extends35(TreeSettings2, _super);
    function TreeSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate32([
      Property(false)
    ], TreeSettings2.prototype, "autoCheck", void 0);
    __decorate32([
      Property("Auto")
    ], TreeSettings2.prototype, "expandOn", void 0);
    __decorate32([
      Property(false)
    ], TreeSettings2.prototype, "loadOnDemand", void 0);
    return TreeSettings2;
  }(ChildProperty)
);
var DropDownTree = (
  /** @class */
  function(_super) {
    __extends35(DropDownTree2, _super);
    function DropDownTree2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.filterTimer = null;
      _this.isFilteredData = false;
      _this.isFilterRestore = false;
      _this.selectedData = [];
      _this.filterDelayTime = 300;
      _this.isClicked = false;
      _this.isCheckAllCalled = false;
      _this.isFromFilterChange = false;
      return _this;
    }
    DropDownTree2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    DropDownTree2.prototype.getLocaleName = function() {
      return "drop-down-tree";
    };
    DropDownTree2.prototype.preRender = function() {
      this.inputFocus = false;
      this.isPopupOpen = false;
      this.isFirstRender = true;
      this.isInitialized = false;
      this.currentText = null;
      this.currentValue = null;
      this.oldValue = null;
      this.removeValue = false;
      this.selectedText = [];
      this.treeItems = [];
      this.dataValue = null;
      this.isNodeSelected = false;
      this.isDynamicChange = false;
      this.clearIconWidth = 0;
      this.headerTemplateId = "" + this.element.id + HEADERTEMPLATE;
      this.footerTemplateId = "" + this.element.id + FOOTERTEMPLATE;
      this.actionFailureTemplateId = "" + this.element.id + ACTIONFAILURETEMPLATE;
      this.noRecordsTemplateId = "" + this.element.id + NORECORDSTEMPLATE;
      this.customTemplateId = "" + this.element.id + CUSTOMTEMPLATE;
      this.keyConfigs = {
        escape: "escape",
        altUp: "alt+uparrow",
        altDown: "alt+downarrow",
        tab: "tab",
        shiftTab: "shift+tab",
        end: "end",
        enter: "enter",
        home: "home",
        moveDown: "downarrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        ctrlDown: "ctrl+downarrow",
        ctrlUp: "ctrl+uparrow",
        ctrlEnter: "ctrl+enter",
        ctrlHome: "ctrl+home",
        ctrlEnd: "ctrl+end",
        shiftDown: "shift+downarrow",
        shiftUp: "shift+uparrow",
        shiftEnter: "shift+enter",
        shiftHome: "shift+home",
        shiftEnd: "shift+end",
        csDown: "ctrl+shift+downarrow",
        csUp: "ctrl+shift+uparrow",
        csEnter: "ctrl+shift+enter",
        csHome: "ctrl+shift+home",
        csEnd: "ctrl+shift+end",
        space: "space",
        ctrlA: "ctrl+A"
      };
    };
    DropDownTree2.prototype.render = function() {
      var isTree = select("#" + this.element.id + "_tree", document);
      if (isTree) {
        var popupDiv = select("#" + this.element.id + "_popup", document);
        detach(popupDiv ? popupDiv : isTree.parentElement);
      }
      this.ensureAutoCheck();
      if (this.element.tagName === "INPUT") {
        this.inputEle = this.element;
        if (isNullOrUndefined(this.inputEle.getAttribute("role"))) {
          this.inputEle.setAttribute("role", "textbox");
        }
        if (isNullOrUndefined(this.inputEle.getAttribute("type"))) {
          this.inputEle.setAttribute("type", "text");
        }
      } else {
        this.inputEle = this.createElement("input", { attrs: { role: "textbox", type: "text" } });
        this.element.parentElement.insertBefore(this.inputEle, this.element);
      }
      this.inputObj = Input.createInput({
        element: this.inputEle,
        floatLabelType: this.floatLabelType,
        buttons: this.showDropDownIcon ? [DROPDOWNICON] : null,
        properties: {
          readonly: true,
          placeholder: this.placeholder,
          enabled: this.enabled,
          cssClass: this.cssClass,
          enableRtl: this.enableRtl
        }
      }, this.createElement);
      this.inputWrapper = this.inputObj.container;
      if (!this.inputWrapper.classList.contains(INPUTGROUP2)) {
        this.inputWrapper.classList.add(INPUTGROUP2);
      }
      if (this.showDropDownIcon) {
        this.inputWrapper.classList.add(SHOW_DD_ICON);
      }
      if (this.element.tagName === this.getDirective()) {
        this.element.appendChild(this.inputWrapper);
      }
      this.createHiddenElement();
      this.createClearIcon();
      this.inputWrapper.classList.add(DROPDOWNTREE);
      this.setElementWidth(this.width);
      this.updateDataAttribute();
      this.setHTMLAttributes();
      this.setAttributes();
      this.popupDiv = this.createElement("div", { className: CONTENT2 });
      this.popupDiv.classList.add(DROPDOWN);
      this.tree = this.createElement("div", { id: this.element.id + "_tree" });
      this.popupDiv.appendChild(this.tree);
      document.body.appendChild(this.popupDiv);
      this.wireTreeEvents();
      addClass([this.popupDiv], DDTHIDEICON);
      this.renderTree();
      this.isRemoteData = this.fields.dataSource instanceof DataManager;
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.mode !== "Delimiter") {
          this.createChip();
        }
        if (!this.wrapText && this.mode !== "Custom") {
          this.overFlowWrapper = this.createElement("span", { className: OVERFLOW_VIEW + " " + HIDEICON });
          this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);
          if (this.mode !== "Box") {
            addClass([this.overFlowWrapper], SHOW_TEXT);
          }
        }
      }
      if (!this.isRemoteData) {
        this.setTreeValue();
        this.setTreeText();
        this.updateHiddenValue();
        this.setSelectedValue();
        if (!this.wrapText) {
          this.updateView();
        }
      }
      this.wireEvents();
      var firstUl = select("." + PARENTITEM2, this.treeObj.element);
      if (firstUl && firstUl.getAttribute("aria-multiselectable")) {
        firstUl.removeAttribute("aria-multiselectable");
      }
      this.oldValue = this.value;
      this.isInitialized = true;
      this.hasTemplate = this.itemTemplate || this.headerTemplate || this.footerTemplate || this.actionFailureTemplate || this.noRecordsTemplate || this.customTemplate;
      this.renderComplete();
    };
    DropDownTree2.prototype.ensureAutoCheck = function() {
      if (this.allowFiltering && this.treeSettings.autoCheck) {
        this.setProperties({ treeSettings: { autoCheck: false } }, true);
      }
    };
    DropDownTree2.prototype.hideCheckAll = function(flag) {
      var checkAllEle = !isNullOrUndefined(this.popupEle) ? this.popupEle.querySelector("." + CHECKALLPARENT) : null;
      if (!isNullOrUndefined(checkAllEle)) {
        if (flag && !checkAllEle.classList.contains(CHECKALLHIDE)) {
          addClass([checkAllEle], CHECKALLHIDE);
        } else if (!flag && checkAllEle.classList.contains(CHECKALLHIDE)) {
          removeClass([checkAllEle], CHECKALLHIDE);
        }
      }
    };
    DropDownTree2.prototype.renderFilter = function() {
      this.filterContainer = this.createElement("div", {
        id: this.element.id + "_filter_wrap",
        className: FILTERWRAP
      });
      var filterInput2 = this.createElement("input", {
        id: this.element.id + "_filter",
        attrs: { autocomplete: "off", "aria-label": this.filterBarPlaceholder }
      });
      this.filterContainer.appendChild(filterInput2);
      prepend([this.filterContainer], this.popupEle);
      this.filterObj = new TextBox({
        value: "",
        showClearButton: true,
        placeholder: this.filterBarPlaceholder,
        input: this.filterChangeHandler.bind(this)
      });
      this.filterObj.appendTo("#" + this.element.id + "_filter");
    };
    DropDownTree2.prototype.filterChangeHandler = function(args) {
      var _this = this;
      if (!isNullOrUndefined(args.value)) {
        window.clearTimeout(this.filterTimer);
        this.filterTimer = window.setTimeout(function() {
          _this.filterHandler(args.value, args.event);
        }, this.filterDelayTime);
      }
    };
    DropDownTree2.prototype.filterHandler = function(value, event) {
      var _this = this;
      this.isFromFilterChange = true;
      if (!this.isFilteredData) {
        this.treeData = this.treeObj.getTreeData();
      }
      var filterFields = this.cloneFields(this.fields);
      var args = {
        cancel: false,
        preventDefaultAction: false,
        event,
        text: value,
        fields: filterFields
      };
      this.trigger("filtering", args, function(args2) {
        if (!args2.cancel) {
          var flag = false;
          var fields = void 0;
          _this.isFilteredData = true;
          if (value === "") {
            _this.isFilteredData = false;
            _this.isFilterRestore = true;
            fields = _this.cloneFields(_this.fields);
          } else if (args2.preventDefaultAction) {
            fields = args2.fields;
          } else {
            if (_this.treeDataType === 1) {
              fields = _this.selfReferencefilter(value, args2.fields);
            } else {
              if (_this.fields.dataSource instanceof DataManager) {
                flag = true;
              } else {
                fields = _this.nestedFilter(value, args2.fields);
              }
            }
          }
          _this.hideCheckAll(_this.isFilteredData);
          if (flag) {
            return;
          }
          _this.treeObj.fields = _this.getTreeFields(fields);
          _this.treeObj.dataBind();
        }
      });
    };
    DropDownTree2.prototype.nestedFilter = function(value, filteredFields) {
      var matchedDataSource = [];
      for (var i = 0; i < this.treeData.length; i++) {
        var filteredChild = this.nestedChildFilter(value, this.treeData[i]);
        if (!isNullOrUndefined(filteredChild)) {
          matchedDataSource.push(filteredChild);
        }
      }
      filteredFields.dataSource = matchedDataSource;
      return filteredFields;
    };
    DropDownTree2.prototype.nestedChildFilter = function(value, node) {
      var children = node[this.fields.child];
      if (isNullOrUndefined(children)) {
        return this.isMatchedNode(value, node) ? node : null;
      } else {
        var matchedChildren = [];
        for (var i = 0; i < children.length; i++) {
          var filteredChild = this.nestedChildFilter(value, children[i]);
          if (!isNullOrUndefined(filteredChild)) {
            matchedChildren.push(filteredChild);
          }
        }
        var filteredItems = Object.assign({}, node);
        if (matchedChildren.length !== 0) {
          filteredItems[this.fields.child] = matchedChildren;
          return filteredItems;
        } else {
          filteredItems[this.fields.child] = null;
          return this.isMatchedNode(value, filteredItems) ? filteredItems : null;
        }
      }
    };
    DropDownTree2.prototype.selfReferencefilter = function(value, filteredFields) {
      var matchedData = [];
      var matchedDataSource = [];
      for (var i = 0; i < this.treeData.length; i++) {
        if (this.isMatchedNode(value, this.treeData[i])) {
          matchedData.push(this.treeData[i]);
        }
      }
      for (var i = 0; i < matchedData.length; i++) {
        if (matchedDataSource.indexOf(matchedData[i]) === -1) {
          matchedDataSource.push(matchedData[i]);
          var parentId = matchedData[i][this.fields.parentValue];
          while (!isNullOrUndefined(parentId)) {
            var parent_1 = null;
            for (var j = 0; j < this.treeData.length; j++) {
              var value_1 = this.treeData[j][this.fields.value];
              if (!isNullOrUndefined(value_1) && value_1 === parentId) {
                parent_1 = this.treeData[j];
                break;
              }
            }
            if (!isNullOrUndefined(parent_1) && matchedDataSource.indexOf(parent_1) === -1) {
              matchedDataSource.push(parent_1);
              parentId = parent_1[this.fields.parentValue];
            } else {
              break;
            }
          }
        }
      }
      filteredFields.dataSource = matchedDataSource;
      return filteredFields;
    };
    DropDownTree2.prototype.isMatchedNode = function(value, node) {
      var checkValue = node[this.fields.text];
      if (this.ignoreCase) {
        checkValue = checkValue.toLowerCase();
        value = value.toLowerCase();
      }
      if (this.ignoreAccent) {
        checkValue = DataUtil.ignoreDiacritics(checkValue);
        value = DataUtil.ignoreDiacritics(value);
      }
      if (this.filterType === "StartsWith") {
        return checkValue.slice(0, value.length) === value;
      } else if (this.filterType === "EndsWith") {
        return checkValue.slice(-value.length) === value;
      } else {
        return checkValue.indexOf(value) !== -1;
      }
    };
    DropDownTree2.prototype.wireEvents = function() {
      EventHandler.add(this.inputWrapper, "mouseup", this.dropDownClick, this);
      EventHandler.add(this.inputWrapper, "focus", this.focusIn, this);
      EventHandler.add(this.inputWrapper, "blur", this.focusOut, this);
      EventHandler.add(this.inputWrapper, "mousemove", this.mouseIn, this);
      EventHandler.add(this.inputWrapper, "mouseout", this.onMouseLeave, this);
      EventHandler.add(this.overAllClear, "mousedown", this.clearAll, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      var formElement = closest(this.inputWrapper, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      this.keyboardModule = new KeyboardEvents(this.inputWrapper, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.wireTreeEvents = function() {
      this.keyboardModule = new KeyboardEvents(this.tree, {
        keyAction: this.treeAction.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.wireCheckAllWrapperEvents = function() {
      this.keyboardModule = new KeyboardEvents(this.checkAllParent, {
        keyAction: this.checkAllAction.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    DropDownTree2.prototype.unWireEvents = function() {
      EventHandler.remove(this.inputWrapper, "mouseup", this.dropDownClick);
      EventHandler.remove(this.inputWrapper, "focus", this.focusIn);
      EventHandler.remove(this.inputWrapper, "blur", this.focusOut);
      EventHandler.remove(this.inputWrapper, "mousemove", this.mouseIn);
      EventHandler.remove(this.inputWrapper, "mouseout", this.onMouseLeave);
      EventHandler.remove(this.overAllClear, "mousedown", this.clearAll);
      EventHandler.remove(window, "resize", this.windowResize);
      var formElement = closest(this.inputWrapper, "form");
      if (formElement) {
        EventHandler.remove(formElement, "reset", this.resetValueHandler);
      }
    };
    DropDownTree2.prototype.dropDownClick = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      if (this.isClearButtonClick) {
        this.isClearButtonClick = false;
        return;
      }
      if (this.isPopupOpen) {
        this.hidePopup();
      } else {
        this.focusIn(e);
        this.renderPopup();
      }
      this.showOverAllClear();
    };
    DropDownTree2.prototype.mouseIn = function() {
      if (this.enabled || !this.readonly) {
        this.showOverAllClear();
      }
    };
    DropDownTree2.prototype.onMouseLeave = function() {
      if (!this.inputFocus) {
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
    };
    DropDownTree2.prototype.getDirective = function() {
      return "EJS-DROPDOWNTREE";
    };
    DropDownTree2.prototype.focusOut = function(e) {
      if (!this.enabled || this.readonly || !this.inputFocus) {
        return;
      }
      if ((Browser.isIE || Browser.info.name === "edge") && e.target === this.inputWrapper) {
        return;
      }
      var target = e.relatedTarget;
      if (target !== this.inputEle && isNullOrUndefined(target) && (e.target !== this.inputWrapper || !this.isPopupOpen)) {
        this.onFocusOut(e);
      }
    };
    DropDownTree2.prototype.onFocusOut = function(event) {
      this.inputFocus = false;
      if (this.isPopupOpen) {
        this.hidePopup();
      }
      if (this.isClearButtonClick) {
        this.isClearButtonClick = false;
      }
      if (this.showClearButton) {
        this.clearIconWidth = select(".e-clear-icon", this.inputWrapper).offsetWidth;
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
      removeClass([this.inputWrapper], [INPUTFOCUS]);
      if (this.allowMultiSelection || this.showCheckBox) {
        var isValue = this.value ? this.value.length ? true : false : false;
        if (this.mode !== "Delimiter" && this.mode !== "Custom") {
          if (this.chipWrapper && this.mode === "Default") {
            addClass([this.chipWrapper], HIDEICON);
            removeClass([this.inputWrapper], SHOW_CHIP);
            removeClass([this.inputEle], CHIP_INPUT);
          }
        }
        if (!this.wrapText && isValue) {
          this.updateView();
        }
      }
      if (this.changeOnBlur) {
        this.triggerChangeEvent(event);
      }
      this.removeValue = false;
      this.oldValue = this.value;
      this.trigger("blur");
    };
    DropDownTree2.prototype.updateView = function() {
      if (!this.showCheckBox && !this.allowMultiSelection || this.mode === "Custom" || this.inputFocus) {
        return;
      }
      if (this.mode !== "Box") {
        addClass([this.inputWrapper, this.overFlowWrapper], SHOW_TEXT);
      } else {
        addClass([this.inputWrapper], SHOW_CHIP);
      }
      if (this.value && this.value.length !== 0) {
        if (this.inputWrapper.contains(this.chipWrapper)) {
          addClass([this.chipWrapper], HIDEICON);
        }
        addClass([this.inputEle], CHIP_INPUT);
        this.updateOverFlowView();
        this.ensurePlaceHolder();
      }
    };
    DropDownTree2.prototype.triggerChangeEvent = function(event) {
      var isEqual = this.ddtCompareValues(this.oldValue, this.value);
      if ((!isEqual || this.isChipDelete) && !this.removeValue) {
        var eventArgs = {
          e: event,
          oldValue: this.oldValue,
          value: this.value,
          isInteracted: event ? true : false,
          element: this.element
        };
        this.trigger("change", eventArgs);
        this.oldValue = this.value;
      }
    };
    DropDownTree2.prototype.ddtCompareValues = function(oldValue, newValue) {
      if (oldValue === null || newValue === null) {
        var isValid = oldValue === null ? newValue === oldValue ? true : false : oldValue.length === 0 ? newValue === oldValue : false;
        return isValid;
      } else if (oldValue.length !== newValue.length) {
        return false;
      }
      for (var i = 0; i < oldValue.length; i++) {
        if (oldValue[i] !== newValue[i]) {
          return false;
        }
      }
      return true;
    };
    DropDownTree2.prototype.focusIn = function(e) {
      if (!this.enabled || this.readonly || this.inputFocus) {
        return;
      }
      this.showOverAllClear();
      this.inputFocus = true;
      addClass([this.inputWrapper], [INPUTFOCUS]);
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.mode !== "Delimiter" && this.inputFocus) {
          if (this.chipWrapper && (this.value && this.value.length !== 0)) {
            removeClass([this.chipWrapper], HIDEICON);
            addClass([this.inputEle], CHIP_INPUT);
          }
          addClass([this.inputWrapper], SHOW_CHIP);
          if (this.popupObj) {
            this.popupObj.refreshPosition();
          }
        }
        if (!this.wrapText && this.mode !== "Custom") {
          if (this.inputWrapper.contains(this.overFlowWrapper)) {
            addClass([this.overFlowWrapper], HIDEICON);
          }
          if (this.mode === "Delimiter") {
            removeClass([this.inputWrapper], SHOW_CHIP);
            removeClass([this.inputEle], CHIP_INPUT);
          } else {
            addClass([this.inputWrapper], SHOW_CHIP);
          }
          removeClass([this.inputWrapper], SHOW_TEXT);
          this.ensurePlaceHolder();
        }
      }
      var args = { isInteracted: e ? true : false, event: e };
      this.trigger("focus", args);
    };
    DropDownTree2.prototype.treeAction = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "escape":
            case "altUp":
              _this.inputWrapper.focus();
              e.preventDefault();
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "tab":
            case "shiftTab":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "enter":
            case "ctrlEnter":
            case "shiftEnter":
            case "csEnter":
              if (!_this.showCheckBox) {
                _this.isValueChange = true;
                _this.keyEventArgs = e;
              }
              break;
            case "space":
              _this.isValueChange = true;
              _this.keyEventArgs = e;
              break;
            case "ctrlA":
              if (_this.allowMultiSelection) {
                _this.selectAll(true);
              }
              break;
            case "moveRight":
            case "moveLeft":
            case "shiftDown":
            case "moveDown":
            case "ctrlDown":
            case "csDown":
            case "shiftUp":
            case "moveUp":
            case "ctrlUp":
            case "csUp":
            case "home":
            case "shiftHome":
            case "ctrlHome":
            case "csHome":
            case "end":
            case "shiftEnd":
            case "ctrlEnd":
            case "csEnd":
          }
        } else {
          e.stopImmediatePropagation();
        }
      });
    };
    DropDownTree2.prototype.keyActionHandler = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "escape":
            case "altUp":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              break;
            case "shiftTab":
            case "tab":
              if (_this.isPopupOpen) {
                _this.hidePopup();
              }
              if (_this.inputFocus) {
                _this.onFocusOut();
              }
              break;
            case "altDown":
              if (!_this.isPopupOpen) {
                _this.showPopup();
                e.preventDefault();
              }
              break;
            case "moveDown":
              if (_this.showSelectAll && _this.showCheckBox) {
                _this.checkAllParent.focus();
              }
              break;
          }
        }
      });
    };
    DropDownTree2.prototype.checkAllAction = function(e) {
      var _this = this;
      var eventArgs = {
        cancel: false,
        event: e
      };
      this.trigger("keyPress", eventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          switch (e.action) {
            case "space":
              _this.clickHandler(e);
              break;
            case "moveDown":
              var focusedElement = _this.treeObj.element.querySelector("li");
              focusedElement.focus();
              addClass([focusedElement], ["e-node-focus"]);
          }
        }
      });
    };
    DropDownTree2.prototype.windowResize = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({ width: this.setWidth() });
        this.popupObj.refreshPosition();
      }
    };
    DropDownTree2.prototype.resetValueHandler = function(e) {
      var formElement = closest(this.inputWrapper, "form");
      if (formElement && e.target === formElement) {
        this.isDynamicChange = true;
        this.setProperties({ value: null }, true);
        this.resetValue(true);
        this.isDynamicChange = false;
      }
    };
    DropDownTree2.prototype.getAriaAttributes = function() {
      var disable = this.enabled ? "false" : "true";
      return {
        "aria-disabled": disable,
        "aria-owns": this.element.id + "_options",
        "role": "listbox",
        "aria-haspopup": "true",
        "aria-expanded": "false",
        "aria-activedescendant": "null",
        "aria-labelledby": this.hiddenElement.id
      };
    };
    DropDownTree2.prototype.updateOverFlowView = function() {
      this.overFlowWrapper.classList.remove(TOTAL_COUNT_WRAPPER);
      removeClass([this.overFlowWrapper], HIDEICON);
      if (this.value && this.value.length) {
        var data = "";
        var overAllContainer = void 0;
        var temp = void 0;
        var tempData = void 0;
        var tempIndex = 1;
        var wrapperleng = void 0;
        var remaining = void 0;
        var downIconWidth = 0;
        this.overFlowWrapper.innerHTML = "";
        var l10nLocale = { overflowCountTemplate: "+${count} more..", totalCountTemplate: "${count} selected" };
        this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        var remainContent = this.l10n.getConstant("overflowCountTemplate");
        var totalContent = this.l10n.getConstant("totalCountTemplate");
        var remainElement = this.createElement("span", { className: REMAIN_WRAPPER });
        this.overFlowWrapper.appendChild(remainElement);
        remainElement.innerText = remainContent.replace("${count}", this.value.length.toString());
        var remainSize = remainElement.offsetWidth;
        remove(remainElement);
        if (this.showDropDownIcon) {
          downIconWidth = select("." + DDTICON, this.inputWrapper).offsetWidth;
        }
        if (!isNullOrUndefined(this.value)) {
          if (this.mode !== "Box") {
            for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
              data += index === 0 ? "" : this.delimiterChar + " ";
              temp = this.getOverflowVal(index);
              data += temp;
              temp = this.overFlowWrapper.innerHTML;
              if (this.enableHtmlSanitizer) {
                this.overFlowWrapper.innerText = data;
              } else {
                this.overFlowWrapper.innerHTML = data;
              }
              wrapperleng = this.overFlowWrapper.offsetWidth;
              overAllContainer = this.inputWrapper.offsetWidth;
              if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
                if (tempData !== void 0 && tempData !== "") {
                  temp = tempData;
                  index = tempIndex + 1;
                }
                this.overFlowWrapper.innerHTML = temp;
                remaining = this.value.length - index;
                wrapperleng = this.overFlowWrapper.offsetWidth;
                while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== "") {
                  var textArr = this.overFlowWrapper.innerHTML.split(this.delimiterChar);
                  textArr.pop();
                  this.overFlowWrapper.innerHTML = textArr.join(this.delimiterChar);
                  remaining++;
                  wrapperleng = this.overFlowWrapper.offsetWidth;
                }
                break;
              } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
                tempData = data;
                tempIndex = index;
              } else if (index === 0) {
                tempData = "";
                tempIndex = -1;
              }
            }
          } else {
            addClass([this.chipWrapper], HIDEICON);
            var ele = this.chipWrapper.cloneNode(true);
            var chips = selectAll("." + CHIP, ele);
            for (var i = 0; i < chips.length; i++) {
              temp = this.overFlowWrapper.innerHTML;
              this.overFlowWrapper.appendChild(chips[i]);
              data = this.overFlowWrapper.innerHTML;
              wrapperleng = this.overFlowWrapper.offsetWidth;
              overAllContainer = this.inputWrapper.offsetWidth;
              if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
                if (tempData !== void 0 && tempData !== "") {
                  temp = tempData;
                  i = tempIndex + 1;
                }
                this.overFlowWrapper.innerHTML = temp;
                remaining = this.value.length - i;
                wrapperleng = this.overFlowWrapper.offsetWidth;
                while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth >= overAllContainer && wrapperleng !== 0 && this.overFlowWrapper.innerHTML !== "") {
                  this.overFlowWrapper.removeChild(this.overFlowWrapper.lastChild);
                  remaining++;
                  wrapperleng = this.overFlowWrapper.offsetWidth;
                }
                break;
              } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
                tempData = data;
                tempIndex = i;
              } else if (i === 0) {
                tempData = "";
                tempIndex = -1;
              }
            }
          }
        }
        if (remaining > 0) {
          this.overFlowWrapper.appendChild(this.updateRemainTemplate(remainElement, remaining, remainContent, totalContent));
        }
        if (this.mode === "Box" && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {
          addClass([remainElement], REMAIN_COUNT);
        }
      } else {
        this.overFlowWrapper.innerHTML = "";
        addClass([this.overFlowWrapper], HIDEICON);
      }
      this.updateDelimMode();
    };
    DropDownTree2.prototype.updateRemainTemplate = function(remainElement, remaining, remainContent, totalContent) {
      if (this.overFlowWrapper.firstChild && this.overFlowWrapper.firstChild.nodeType === 3 && this.overFlowWrapper.firstChild.nodeValue === "") {
        this.overFlowWrapper.removeChild(this.overFlowWrapper.firstChild);
      }
      remainElement.innerHTML = "";
      remainElement.innerText = this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === "Box") ? remainContent.replace("${count}", remaining.toString()) : totalContent.replace("${count}", remaining.toString());
      if (this.overFlowWrapper.firstChild && (this.overFlowWrapper.firstChild.nodeType === 3 || this.mode === "Box")) {
        removeClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);
      } else {
        addClass([this.overFlowWrapper], TOTAL_COUNT_WRAPPER);
        removeClass([this.overFlowWrapper], REMAIN_COUNT);
      }
      return remainElement;
    };
    DropDownTree2.prototype.getOverflowVal = function(index) {
      var selectedData = this.getSelectedData(this.value[index]);
      return getValue(this.treeSettings.loadOnDemand ? this.fields.text : "text", selectedData);
    };
    DropDownTree2.prototype.updateDelimMode = function() {
      if (this.mode !== "Box") {
        if (select("." + REMAIN_WRAPPER, this.overFlowWrapper) && !this.overFlowWrapper.classList.contains(TOTAL_COUNT_WRAPPER)) {
          addClass([this.overFlowWrapper], REMAIN_COUNT);
          addClass([this.overFlowWrapper], SHOW_TEXT);
        } else {
          this.overFlowWrapper.classList.remove(REMAIN_COUNT);
          removeClass([this.overFlowWrapper], REMAIN_COUNT);
        }
      } else if (select("." + REMAIN_WRAPPER, this.overFlowWrapper)) {
        this.overFlowWrapper.classList.remove(REMAIN_COUNT);
      }
    };
    DropDownTree2.prototype.createHiddenElement = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        this.hiddenElement = this.createElement("select", {
          attrs: { "aria-hidden": "true", "class": HIDDENELEMENT, "tabindex": "-1", "multiple": "" }
        });
      } else {
        this.hiddenElement = this.createElement("select", {
          attrs: { "aria-hidden": "true", "tabindex": "-1", "class": HIDDENELEMENT }
        });
      }
      prepend([this.hiddenElement], this.inputWrapper);
      this.validationAttribute();
    };
    DropDownTree2.prototype.createClearIcon = function() {
      this.overAllClear = this.createElement("span", {
        className: CLOSEICON_CLASS
      });
      addClass([this.overAllClear], HIDEICON);
      removeClass([this.inputWrapper], SHOW_CLEAR);
      if (this.showClearButton) {
        this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);
      }
    };
    DropDownTree2.prototype.validationAttribute = function() {
      var name = this.inputEle.getAttribute("name") ? this.inputEle.getAttribute("name") : this.inputEle.getAttribute("id");
      this.hiddenElement.setAttribute("name", name);
      this.inputEle.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        var attr = this.inputEle.getAttribute(attributes2[i]);
        if (attr) {
          this.hiddenElement.setAttribute(attributes2[i], attr);
          this.inputEle.removeAttribute(attributes2[i]);
        }
      }
    };
    DropDownTree2.prototype.createChip = function() {
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.chipWrapper = this.createElement("span", {
          className: CHIP_WRAPPER
        });
        this.chipCollection = this.createElement("span", {
          className: CHIP_COLLECTION
        });
        this.chipWrapper.appendChild(this.chipCollection);
        this.inputWrapper.insertBefore(this.chipWrapper, this.hiddenElement);
        addClass([this.inputWrapper], SHOW_CHIP);
        var isValid = this.getValidMode();
        if (isValid && this.value !== null && (this.value && this.value.length !== 0)) {
          addClass([this.inputEle], CHIP_INPUT);
        } else if (this.value === null || this.value && this.value.length === 0 || this.checkWrapper) {
          addClass([this.chipWrapper], HIDEICON);
        }
      }
    };
    DropDownTree2.prototype.getValidMode = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        return this.mode === "Box" ? true : this.mode === "Default" && this.inputFocus ? true : false;
      } else {
        return false;
      }
    };
    DropDownTree2.prototype.createSelectAllWrapper = function() {
      this.checkAllParent = this.createElement("div", {
        className: CHECKALLPARENT,
        attrs: { "tabindex": "0" }
      });
      this.selectAllSpan = this.createElement("span", {
        className: ALLTEXT
      });
      this.selectAllSpan.textContent = "";
      var ele = closest(this.element, "." + BIGGER2);
      var touchClass = isNullOrUndefined(ele) ? "" : SMALL2;
      this.checkBoxElement = createCheckBox(this.createElement, true, { cssClass: touchClass });
      this.checkBoxElement.setAttribute("role", "checkbox");
      this.checkAllParent.appendChild(this.checkBoxElement);
      this.checkAllParent.appendChild(this.selectAllSpan);
      this.setLocale();
      EventHandler.add(this.checkAllParent, "mouseup", this.clickHandler, this);
      this.wireCheckAllWrapperEvents();
    };
    DropDownTree2.prototype.clickHandler = function(e) {
      var target;
      if (e.currentTarget && e.currentTarget.classList.contains(CHECKALLPARENT)) {
        target = e.currentTarget.firstElementChild.lastElementChild;
      } else {
        target = e.target;
      }
      this.checkWrapper = closest(target, "." + CHECKBOXWRAP2);
      if (!isNullOrUndefined(this.checkWrapper)) {
        this.isClicked = true;
        var checkElement = select("." + CHECKBOXFRAME2, this.checkWrapper);
        this.changeState(this.checkWrapper, checkElement.classList.contains(CHECK3) ? "uncheck" : "check", e);
        this.isClicked = false;
      }
      e.preventDefault();
    };
    DropDownTree2.prototype.changeState = function(wrapper, state, e) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME2)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK3)) {
        frameSpan.classList.add(CHECK3);
        ariaState = "true";
        if (!this.isReverseUpdate) {
          this.isCheckAllCalled = true;
          this.treeObj.checkAll();
          if (!this.changeOnBlur) {
            this.triggerChangeEvent(e);
          }
        }
        this.setLocale(true);
      } else if (state === "uncheck" && frameSpan.classList.contains(CHECK3)) {
        frameSpan.classList.remove(CHECK3);
        ariaState = "false";
        if (!this.isReverseUpdate) {
          this.treeObj.uncheckAll();
          if (!this.changeOnBlur) {
            this.triggerChangeEvent(e);
          }
        }
        this.setLocale(false);
      }
      this.setMultiSelect();
      this.ensurePlaceHolder();
      ariaState = state === "check" ? "true" : "false";
      if (!isNullOrUndefined(ariaState)) {
        wrapper.setAttribute("aria-checked", ariaState);
      }
    };
    DropDownTree2.prototype.setLocale = function(unSelect) {
      if (!this.selectAllSpan) {
        return;
      }
      if (this.selectAllText !== "Select All" || this.unSelectAllText !== "Unselect All") {
        var template = unSelect ? this.unSelectAllText : this.selectAllText;
        this.selectAllSpan.textContent = "";
        var compiledString = compile(template);
        var templateName = unSelect ? "unSelectAllText" : "selectAllText";
        for (var _i = 0, _a = compiledString({}, this, templateName, null, !this.isStringTemplate); _i < _a.length; _i++) {
          var item = _a[_i];
          this.selectAllSpan.textContent = item.textContent;
        }
      } else {
        this.selectAllSpan.textContent = unSelect ? this.unSelectAllText : this.selectAllText;
      }
    };
    DropDownTree2.prototype.setAttributes = function() {
      this.inputEle.setAttribute("tabindex", "-1");
      var id = this.element.getAttribute("id");
      this.hiddenElement.id = id + "_hidden";
      this.inputWrapper.setAttribute("tabindex", "0");
      attributes(this.inputWrapper, this.getAriaAttributes());
    };
    DropDownTree2.prototype.setHTMLAttributes = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          if (htmlAttr === "class") {
            this.inputWrapper.classList.add(this.htmlAttributes["" + htmlAttr]);
          } else if (htmlAttr === "disabled" && this.htmlAttributes["" + htmlAttr] === "disabled") {
            this.setProperties({ enabled: false }, true);
            this.setEnable();
          } else if (htmlAttr === "readonly" && !isNullOrUndefined(this.htmlAttributes["" + htmlAttr])) {
            this.setProperties({ readonly: true }, true);
            this.dataBind();
          } else if (htmlAttr === "style") {
            this.inputWrapper.setAttribute("style", this.htmlAttributes["" + htmlAttr]);
          } else {
            var defaultAttr = [
              "title",
              "id",
              "placeholder",
              "aria-placeholder",
              "role",
              "autocorrect",
              "autocomplete",
              "autocapitalize",
              "spellcheck",
              "minlength",
              "maxlength"
            ];
            var validateAttr = ["name", "required"];
            if (htmlAttr.indexOf("data") === 0 || validateAttr.indexOf(htmlAttr) > -1) {
              this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            } else if (defaultAttr.indexOf(htmlAttr) > -1) {
              if (htmlAttr === "placeholder") {
                Input.setPlaceholder(this.htmlAttributes["" + htmlAttr], this.inputEle);
              } else {
                this.inputEle.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
            } else {
              this.inputWrapper.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
            }
          }
        }
      }
    };
    DropDownTree2.prototype.updateDataAttribute = function() {
      var value = this.htmlAttributes;
      var invalidAttr = ["class", "style", "id", "type"];
      var attr = {};
      for (var a = 0; a < this.element.attributes.length; a++) {
        if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !(this.element.attributes[a].name === "readonly")) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      }
      extend(attr, value, attr);
      this.setProperties({ htmlAttributes: attr }, true);
    };
    DropDownTree2.prototype.showOverAllClear = function() {
      if (!this.enabled || this.readonly) {
        return;
      }
      if (this.overAllClear) {
        var isValue = this.value ? this.value.length ? true : false : false;
        if (isValue && this.showClearButton) {
          removeClass([this.overAllClear], HIDEICON);
          addClass([this.inputWrapper], SHOW_CLEAR);
        } else {
          addClass([this.overAllClear], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CLEAR);
        }
      }
    };
    DropDownTree2.prototype.setTreeValue = function() {
      if (this.value !== null && this.value.length !== 0) {
        var data = void 0;
        if (this.showCheckBox || this.allowMultiSelection) {
          for (var i = 0; i < this.value.length; i++) {
            data = this.treeObj.getTreeData(this.value[i])[0];
            if (isNullOrUndefined(data)) {
              this.value.splice(this.value.indexOf(this.value[i]), 1);
            }
          }
          if (this.value.length !== 0) {
            this.setValidValue();
          }
        } else {
          data = this.treeObj.getTreeData(this.value[0])[0];
          if (!isNullOrUndefined(data)) {
            this.setProperties({ text: data[this.fields.text] }, true);
            this.setValidValue();
          } else {
            this.setProperties({ value: this.currentValue }, true);
          }
        }
      }
    };
    DropDownTree2.prototype.setTreeText = function() {
      if (this.value !== null && !this.isInitialized) {
        return;
      }
      if (this.text !== null) {
        var data = void 0;
        var valArr = [];
        if (this.showCheckBox || this.allowMultiSelection) {
          var textArr = this.text.split(this.delimiterChar);
          for (var i = 0; i < textArr.length; i++) {
            data = this.getItems(textArr[i]);
            if (!isNullOrUndefined(data)) {
              valArr.push(data[this.fields.value].toString());
            }
          }
          if (valArr.length !== 0) {
            this.oldValue = this.value;
            this.setProperties({ value: valArr }, true);
            this.setValidValue();
          } else {
            this.setProperties({ text: this.currentText }, true);
          }
        } else {
          data = this.getItems(this.text);
          if (!isNullOrUndefined(data)) {
            this.oldValue = this.value;
            this.setProperties({ value: [data[this.fields.value].toString()] }, true);
            this.setValidValue();
          } else {
            this.setProperties({ text: this.currentText }, true);
          }
        }
      }
    };
    DropDownTree2.prototype.setSelectedValue = function() {
      if (this.value != null) {
        return;
      }
      if (!this.isInitialized) {
        this.oldValue = this.value;
        if (this.treeObj.selectedNodes.length > 0 && !this.showCheckBox) {
          this.setProperties({ value: this.treeObj.selectedNodes }, true);
          if (this.allowMultiSelection) {
            this.updateMode();
          }
        } else if (this.showCheckBox && this.treeObj.checkedNodes) {
          if (this.treeObj.checkedNodes.length > 0) {
            this.setProperties({ value: this.treeObj.checkedNodes }, true);
            setValue("selectedNodes", [], this.treeObj);
            this.treeObj.dataBind();
            this.updateMode();
          }
        }
        this.updateSelectedValues();
        this.currentText = this.text;
        this.currentValue = this.value;
      }
    };
    DropDownTree2.prototype.setValidValue = function() {
      var _this = this;
      if (!this.showCheckBox && !this.allowMultiSelection) {
        Input.setValue(this.text, this.inputEle, this.floatLabelType);
        var id = this.value[0].toString();
        if (this.treeObj.selectedNodes[0] !== id) {
          setValue("selectedNodes", [id], this.treeObj);
        }
      } else {
        if (this.showCheckBox) {
          var difference = this.value.filter(function(e) {
            return _this.treeObj.checkedNodes.indexOf(e) === -1;
          });
          if (difference.length > 0 || this.treeSettings.autoCheck) {
            this.treeObj.checkedNodes = this.value.slice();
            this.treeObj.dataBind();
            this.setMultiSelect();
          }
        } else {
          this.treeObj.selectedNodes = this.value.slice();
          this.selectedText = [];
          this.updateSelectedValues();
        }
        this.treeObj.dataBind();
      }
      this.currentText = this.text;
      this.currentValue = this.value;
      if (this.isInitialized) {
        this.triggerChangeEvent();
      }
    };
    DropDownTree2.prototype.getItems = function(givenText) {
      var data;
      if (this.treeDataType === 1) {
        for (var i = 0; i < this.treeItems.length; i++) {
          var text = getValue(this.fields.text, this.treeItems[i]);
          if (!isNullOrUndefined(this.treeItems[i]) && !isNullOrUndefined(text) && text === givenText) {
            data = this.treeItems[i];
            break;
          }
        }
      } else {
        data = this.getNestedItems(this.treeItems, this.fields, givenText);
      }
      return data;
    };
    DropDownTree2.prototype.getNestedItems = function(data, field, givenText) {
      var newData;
      for (var i = 0, objlen = data.length; i < objlen; i++) {
        var dataId = getValue(this.fields.text, data[i]);
        if (data[i] && dataId && dataId.toString() === givenText) {
          return data[i];
        } else if (typeof field.child === "string" && !isNullOrUndefined(getValue(field.child, data[i]))) {
          var childData = getValue(field.child, data[i]);
          newData = this.getNestedItems(childData, this.getChildType(field), givenText);
          if (newData !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", data[i]))) {
          var child = "child";
          newData = this.getNestedItems(getValue(child, data[i]), this.getChildType(field), givenText);
          if (newData !== void 0) {
            break;
          }
        }
      }
      return newData;
    };
    DropDownTree2.prototype.getChildType = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    DropDownTree2.prototype.renderTree = function() {
      this.treeObj = new TreeView({
        fields: this.getTreeFields(this.fields),
        enableRtl: this.enableRtl,
        nodeSelected: this.onNodeSelected.bind(this),
        nodeChecked: this.onNodeChecked.bind(this),
        nodeChecking: this.beforeCheck.bind(this),
        nodeExpanded: this.onNodeExpanded.bind(this),
        actionFailure: this.onActionFailure.bind(this),
        nodeClicked: this.onNodeClicked.bind(this),
        dataBound: this.OnDataBound.bind(this),
        allowMultiSelection: this.allowMultiSelection,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        showCheckBox: this.showCheckBox,
        autoCheck: this.treeSettings.autoCheck,
        sortOrder: this.sortOrder,
        expandOn: this.treeSettings.expandOn,
        loadOnDemand: this.treeSettings.loadOnDemand,
        nodeSelecting: this.onBeforeSelect.bind(this),
        nodeTemplate: this.itemTemplate
      });
      this.treeObj.root = this.root ? this.root : this;
      this.treeObj.appendTo("#" + this.tree.id);
    };
    DropDownTree2.prototype.renderPopup = function() {
      var _this = this;
      if (this.isFilteredData) {
        this.filterObj.value = "";
        this.treeObj.fields = this.getTreeFields(this.fields);
        this.isFilterRestore = true;
        this.isFilteredData = false;
        this.hideCheckAll(false);
      }
      var isCancelled = false;
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          addClass([_this.inputWrapper], [ICONANIMATION]);
          if (_this.isFirstRender) {
            _this.popupEle = _this.createElement("div", {
              id: _this.element.id + "_popup",
              className: POPUP_CLASS + " " + (_this.cssClass != null ? _this.cssClass : "")
            });
            document.body.appendChild(_this.popupEle);
            _this.createPopup(_this.popupEle);
          } else {
            _this.popupEle = _this.popupObj.element;
          }
        } else {
          isCancelled = true;
        }
        if (_this.isFirstRender && !isCancelled) {
          prepend([_this.popupDiv], _this.popupEle);
          removeClass([_this.popupDiv], DDTHIDEICON);
          if (_this.allowFiltering) {
            _this.renderFilter();
          }
          if (_this.showCheckBox && _this.showSelectAll && !_this.popupDiv.classList.contains(NODATA)) {
            _this.createSelectAllWrapper();
            _this.popupEle.insertBefore(_this.checkAllParent, _this.popupDiv);
          }
          if (_this.headerTemplate) {
            _this.setHeaderTemplate();
          }
          if (_this.footerTemplate) {
            _this.setFooterTemplate();
          }
          _this.isFirstRender = false;
          if (_this.hasTemplate && _this.portals) {
            _this.portals = _this.portals.concat(_this.treeObj.portals);
            _this.renderReactTemplates();
          }
        }
        if (!isCancelled) {
          attributes(_this.inputWrapper, { "aria-expanded": "true" });
          _this.popupObj.show(null, _this.zIndex === 1e3 ? _this.inputEle : null);
          removeClass([_this.popupEle], DDTHIDEICON);
          _this.updatePopupHeight();
          _this.popupObj.refreshPosition();
          if (!(_this.showCheckBox && _this.showSelectAll) && (!_this.popupDiv.classList.contains(NODATA) && _this.treeItems.length > 0)) {
            var focusedElement = _this.treeObj.element.querySelector("li");
            focusedElement.focus();
            addClass([focusedElement], ["e-node-focus"]);
          }
          if (_this.checkSelectAll && _this.checkBoxElement) {
            var wrap = closest(_this.checkBoxElement, "." + CHECKBOXWRAP2);
            _this.changeState(wrap, "check");
            _this.checkSelectAll = false;
          }
          if (_this.allowFiltering) {
            removeClass([_this.inputWrapper], [INPUTFOCUS]);
            _this.filterObj.element.focus();
          }
          var eventArgs = { popup: _this.popupObj };
          _this.trigger("open", eventArgs);
        }
      });
    };
    DropDownTree2.prototype.updatePopupHeight = function() {
      if (this.isFirstRender) {
        return;
      }
      var popupHeight = this.getHeight();
      this.popupEle.style.maxHeight = popupHeight;
      if (this.allowFiltering) {
        var height = Math.round(this.filterContainer.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.headerTemplate) {
        var height = Math.round(this.header.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.showCheckBox && this.showSelectAll && !this.popupDiv.classList.contains(NODATA)) {
        var height = Math.round(this.checkAllParent.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      if (this.footerTemplate) {
        var height = Math.round(this.footer.getBoundingClientRect().height);
        popupHeight = formatUnit(parseInt(popupHeight, 10) - height + "px");
      }
      var border = parseInt(window.getComputedStyle(this.popupEle).borderTopWidth, 10);
      border = border + parseInt(window.getComputedStyle(this.popupEle).borderBottomWidth, 10);
      popupHeight = formatUnit(parseInt(popupHeight, 10) - border + "px");
      this.popupDiv.style.maxHeight = popupHeight;
    };
    DropDownTree2.prototype.createPopup = function(element2) {
      var _this = this;
      if (this.isFirstRender) {
        this.popupObj = new Popup(element2, {
          width: this.setWidth(),
          targetType: "relative",
          collision: { X: "flip", Y: "flip" },
          relateTo: this.inputWrapper,
          zIndex: this.zIndex,
          enableRtl: this.enableRtl,
          position: { X: "left", Y: "bottom" },
          close: function() {
            _this.isPopupOpen = false;
          },
          open: function() {
            EventHandler.add(document, "mousedown", _this.onDocumentClick, _this);
            _this.isPopupOpen = true;
          },
          targetExitViewport: function() {
            if (!Browser.isDevice) {
              _this.hidePopup();
            }
          }
        });
      }
    };
    DropDownTree2.prototype.setElementWidth = function(inputWidth) {
      var ddElement = this.inputWrapper;
      if (!isNullOrUndefined(inputWidth)) {
        if (typeof inputWidth === "number") {
          ddElement.style.width = formatUnit(inputWidth);
        } else if (typeof inputWidth === "string") {
          ddElement.style.width = inputWidth.match(/px|%|em/) ? inputWidth : formatUnit(inputWidth);
        }
      }
    };
    DropDownTree2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        width = (this.inputWrapper.offsetWidth * parseFloat(width) / 100).toString() + "px";
      } else if (typeof this.popupWidth === "string") {
        width = this.popupWidth.match(/px|em/) ? this.popupWidth : width;
      }
      return width;
    };
    DropDownTree2.prototype.getHeight = function() {
      var height = formatUnit(this.popupHeight);
      if (height.indexOf("%") > -1) {
        height = (document.documentElement.clientHeight * parseFloat(height) / 100).toString() + "px";
      } else if (typeof this.popupHeight === "string") {
        height = this.popupHeight.match(/px|em/) ? this.popupHeight : height;
      }
      return height;
    };
    DropDownTree2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      var isTree = closest(target, "." + PARENTITEM2);
      var isFilter = closest(target, "." + FILTERWRAP);
      var isHeader = closest(target, "." + HEADER2);
      var isFooter = closest(target, "." + FOOTER);
      var isScroller = target.classList.contains(DROPDOWN) ? true : matches(target, ".e-ddt .e-popup") || matches(target, ".e-ddt .e-treeview");
      if (this.isPopupOpen && (this.inputWrapper.contains(target) || isTree || isScroller || isHeader || isFooter) || (this.allowMultiSelection || this.showCheckBox) && (this.isPopupOpen && target.classList.contains(CHIP_CLOSE) || this.isPopupOpen && (target.classList.contains(CHECKALLPARENT) || target.classList.contains(ALLTEXT) || target.classList.contains(CHECKBOXFRAME2)))) {
        this.isDocumentClick = false;
        e.preventDefault();
      } else if (!isNullOrUndefined(this.inputWrapper) && !this.inputWrapper.contains(target) && this.inputFocus && !isFilter) {
        this.focusOut(e);
      }
    };
    DropDownTree2.prototype.onActionFailure = function(e) {
      this.trigger("actionFailure", e);
      this.l10nUpdate(true);
      addClass([this.popupDiv], NODATA);
    };
    DropDownTree2.prototype.OnDataBound = function(args) {
      this.treeItems = args.data;
      if (this.treeItems.length <= 0) {
        this.l10nUpdate();
        addClass([this.popupDiv], NODATA);
        this.hideCheckAll(true);
      } else if (this.popupDiv.classList.contains(NODATA) && this.treeItems.length >= 1) {
        removeClass([this.popupDiv], NODATA);
        this.hideCheckAll(false);
      }
      this.treeDataType = this.getTreeDataType(this.treeItems, this.fields);
      if (this.isFirstRender && this.isRemoteData) {
        this.setTreeValue();
        this.setTreeText();
        this.updateHiddenValue();
        this.setSelectedValue();
        if (!this.wrapText) {
          this.updateView();
        }
        this.treeObj.element.focus();
      }
      var eventArgs = { data: args.data };
      this.trigger("dataBound", eventArgs);
      if (this.filterObj === null) {
        this.isFilteredData = false;
      }
      if (this.isFilteredData) {
        this.treeObj.expandAll();
      }
      if (this.isFilterRestore) {
        this.restoreFilterSelection();
        this.isFilterRestore = false;
      }
    };
    DropDownTree2.prototype.restoreFilterSelection = function() {
      if (this.showCheckBox) {
        this.treeObj.checkedNodes = this.value ? this.value : [];
      } else {
        this.treeObj.selectedNodes = this.value ? this.value : [];
      }
    };
    DropDownTree2.prototype.setCssClass = function(newClass, oldClass) {
      var elements = this.popupObj ? [this.inputWrapper, this.popupObj.element] : [this.inputWrapper];
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass(elements, oldClass.split(" "));
      }
      if (!isNullOrUndefined(newClass) && newClass !== "") {
        addClass(elements, newClass.split(" "));
      }
    };
    DropDownTree2.prototype.setEnableRTL = function(state) {
      if (state) {
        this.inputWrapper.classList.add(RTL9);
      } else {
        this.inputWrapper.classList.remove(RTL9);
      }
      if (this.popupObj) {
        this.popupObj.enableRtl = state;
        this.popupObj.dataBind();
      }
      if (this.treeObj) {
        this.treeObj.enableRtl = state;
        this.treeObj.dataBind();
      }
    };
    DropDownTree2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputEle);
      if (this.enabled) {
        removeClass([this.inputWrapper], DISABLED6);
        this.inputEle.setAttribute("aria-disabled", "false");
        this.inputWrapper.setAttribute("aria-disabled", "false");
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        addClass([this.inputWrapper], DISABLED6);
        if (this.inputWrapper && this.inputWrapper.classList.contains(INPUTFOCUS)) {
          removeClass([this.inputWrapper], [INPUTFOCUS]);
        }
        this.inputEle.setAttribute("aria-disabled", "true");
        this.inputWrapper.setAttribute("aria-disabled", "true");
      }
    };
    DropDownTree2.prototype.cloneFields = function(fields) {
      var clonedField = {
        dataSource: fields.dataSource,
        value: fields.value,
        text: fields.text,
        parentValue: fields.parentValue,
        child: this.cloneChildField(fields.child),
        hasChildren: fields.hasChildren,
        expanded: fields.expanded,
        iconCss: fields.iconCss,
        imageUrl: fields.imageUrl,
        htmlAttributes: fields.htmlAttributes,
        query: fields.query,
        selected: fields.selected,
        selectable: fields.selectable,
        tableName: fields.tableName,
        tooltip: fields.tooltip
      };
      return clonedField;
    };
    DropDownTree2.prototype.cloneChildField = function(fields) {
      if (typeof fields === "string") {
        return fields;
      } else {
        var clonedField = {
          dataSource: fields.dataSource,
          value: fields.value,
          text: fields.text,
          parentValue: fields.parentValue,
          child: fields.child ? this.cloneChildField(fields.child) : null,
          hasChildren: fields.hasChildren,
          expanded: fields.expanded,
          iconCss: fields.iconCss,
          imageUrl: fields.imageUrl,
          htmlAttributes: fields.htmlAttributes,
          query: fields.query,
          selected: fields.selected,
          selectable: fields.selectable,
          tableName: fields.tableName,
          tooltip: fields.tooltip
        };
        return clonedField;
      }
    };
    DropDownTree2.prototype.getTreeFields = function(fields) {
      var treeFields = {
        dataSource: fields.dataSource,
        id: fields.value,
        text: fields.text,
        parentID: fields.parentValue,
        child: this.getTreeChildren(fields.child),
        hasChildren: fields.hasChildren,
        expanded: fields.expanded,
        iconCss: fields.iconCss,
        imageUrl: fields.imageUrl,
        isChecked: fields.selected,
        htmlAttributes: fields.htmlAttributes,
        query: fields.query,
        selectable: fields.selectable,
        selected: fields.selected,
        tableName: fields.tableName,
        tooltip: fields.tooltip
      };
      return treeFields;
    };
    DropDownTree2.prototype.getTreeChildren = function(mapper) {
      if (typeof mapper === "string") {
        return mapper;
      } else if (!isNullOrUndefined(mapper)) {
        mapper = this.getActualProperties(mapper);
        var childFields = mapper;
        if (mapper.value) {
          childFields.id = mapper.value;
        }
        if (mapper.parentValue) {
          childFields.parentID = mapper.parentValue;
        }
        if (mapper.child) {
          childFields.child = this.getTreeChildren(mapper.child);
        }
        if (mapper.selected && this.showCheckBox) {
          childFields.isChecked = mapper.selected;
        }
        return childFields;
      }
      return null;
    };
    DropDownTree2.prototype.getTreeDataType = function(ds, field) {
      if (this.fields.dataSource instanceof DataManager) {
        for (var i = 0; i < ds.length; i++) {
          if (typeof field.child === "string" && isNullOrUndefined(getValue(field.child, ds[i]))) {
            return 1;
          }
        }
        return 2;
      }
      if (isNullOrUndefined(this.fields.dataSource))
        this.fields.dataSource = [];
      for (var i = 0, len = this.fields.dataSource.length; i < len; i++) {
        if (typeof field.child === "string" && !isNullOrUndefined(getValue(field.child, this.fields.dataSource[i]))) {
          return 2;
        }
        if (!isNullOrUndefined(getValue(field.parentValue, this.fields.dataSource[i])) || !isNullOrUndefined(getValue(field.hasChildren, this.fields.dataSource[i]))) {
          return 1;
        }
      }
      return 1;
    };
    DropDownTree2.prototype.setFields = function() {
      this.resetValue();
      if (this.hasTemplate) {
        this.updateTemplate();
      }
      this.treeObj.fields = this.getTreeFields(this.fields);
      this.treeObj.dataBind();
    };
    DropDownTree2.prototype.getEventArgs = function(args) {
      var checkData = args.data;
      var selectData = args.nodeData;
      var state;
      if (this.showCheckBox) {
        if (args.action === "check") {
          state = "select";
        } else if (args.action === "uncheck") {
          state = "un-select";
        }
      }
      var eventArgs = {
        action: this.showCheckBox ? state : args.action,
        isInteracted: this.isClicked ? true : args.isInteracted,
        item: args.node,
        itemData: this.showCheckBox ? checkData[0] : selectData
      };
      return eventArgs;
    };
    DropDownTree2.prototype.onBeforeSelect = function(args) {
      if (args.isInteracted) {
        this.oldValue = this.value ? this.value.slice() : this.value;
        if (this.value === null) {
          this.setProperties({ value: [] }, true);
        }
      }
    };
    DropDownTree2.prototype.updateHiddenValue = function() {
      if (this.allowMultiSelection || this.showCheckBox) {
        return;
      }
      if (this.value && this.value.length) {
        this.hiddenElement.innerHTML = '<option selected value ="' + this.value[0] + '">' + this.text + "</option>";
      } else {
        this.hiddenElement.innerHTML = "";
      }
    };
    DropDownTree2.prototype.onNodeSelected = function(args) {
      if (this.showCheckBox) {
        return;
      }
      var selectedText;
      if (args.isInteracted) {
        var id = getValue("id", args.nodeData).toString();
        if (!this.allowMultiSelection) {
          this.hiddenElement.innerHTML = "";
          this.setProperties({ value: [id] }, true);
          if (this.itemTemplate) {
            selectedText = getValue("text", this.treeObj.getNode(id));
          } else {
            selectedText = getValue("text", args.nodeData).toString();
          }
          Input.setValue(selectedText, this.inputEle, this.floatLabelType);
          this.setProperties({ text: selectedText }, true);
          this.currentText = this.text;
          this.currentValue = this.value;
          attributes(this.inputWrapper, { "aria-describedby": this.element.id });
          attributes(this.inputWrapper, { "aria-activedescendant": id.toString() });
          this.updateHiddenValue();
          this.showOverAllClear();
          this.hidePopup();
          this.isNodeSelected = true;
        } else if (this.allowMultiSelection) {
          this.setMultiSelect();
        }
      }
      var eventArgs = this.getEventArgs(args);
      this.trigger("select", eventArgs);
      if (this.isValueChange && !this.changeOnBlur) {
        this.triggerChangeEvent(this.keyEventArgs);
        this.isValueChange = false;
      }
    };
    DropDownTree2.prototype.onNodeClicked = function(args) {
      if (!this.changeOnBlur && this.isNodeSelected) {
        this.triggerChangeEvent(args.event);
        this.isNodeSelected = false;
      }
      var target = args.event.target;
      if ((target.classList.contains("e-fullrow") || target.classList.contains("e-list-text")) && this.showCheckBox) {
        this.isClicked = true;
        var getNodeDetails = this.treeObj.getNode(args.node);
        if (getNodeDetails.isChecked === "true") {
          this.treeObj.uncheckAll([args.node]);
        } else {
          this.treeObj.checkAll([args.node]);
        }
        this.isClicked = false;
        this.setMultiSelect();
        this.ensurePlaceHolder();
      }
      if (!this.changeOnBlur && (this.allowMultiSelection || this.showCheckBox)) {
        this.triggerChangeEvent(args.event);
      }
    };
    DropDownTree2.prototype.onNodeChecked = function(args) {
      var eventArgs = this.getEventArgs(args);
      this.trigger("select", eventArgs);
      if (this.isFilteredData && args.action === "uncheck") {
        var id = getValue("id", args.data[0]).toString();
        this.removeSelectedData(id, true);
      }
      if (!this.isChipDelete && args.isInteracted) {
        this.setMultiSelect();
        this.ensurePlaceHolder();
      }
      if (this.showSelectAll && this.checkBoxElement) {
        var nodes = this.treeObj.element.querySelectorAll("li");
        var checkedNodes = this.treeObj.element.querySelectorAll("li .e-checkbox-wrapper[aria-checked=true]");
        var wrap = closest(this.checkBoxElement, "." + CHECKBOXWRAP2);
        if (wrap && args.action === "uncheck" && (args.isInteracted || checkedNodes.length === 0)) {
          this.isReverseUpdate = true;
          this.changeState(wrap, "uncheck");
          this.isReverseUpdate = false;
        } else if (wrap && args.action === "check" && checkedNodes.length === nodes.length && (args.isInteracted || this.isCheckAllCalled)) {
          this.isReverseUpdate = true;
          this.isCheckAllCalled = false;
          this.changeState(wrap, "check");
          this.isReverseUpdate = false;
        }
      }
    };
    DropDownTree2.prototype.beforeCheck = function(args) {
      if (args.isInteracted) {
        this.oldValue = this.value ? this.value.slice() : this.value;
      }
    };
    DropDownTree2.prototype.onNodeExpanded = function(args) {
      if (this.hasTemplate && this.portals) {
        this.portals = [].concat(this.treeObj.portals);
        this.renderReactTemplates();
      }
    };
    DropDownTree2.prototype.updateClearButton = function(state) {
      if (state) {
        if (!this.inputWrapper.contains(this.overAllClear)) {
          this.inputEle.parentElement.insertBefore(this.overAllClear, this.inputEle.nextSibling);
        } else {
          removeClass([this.overAllClear], HIDEICON);
          addClass([this.inputWrapper], SHOW_CLEAR);
        }
      } else {
        addClass([this.overAllClear], HIDEICON);
        removeClass([this.inputWrapper], SHOW_CLEAR);
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {
        var chipClose = selectAll("." + CHIP_CLOSE, this.chipWrapper);
        for (var i = 0; i < chipClose.length; i++) {
          if (!state) {
            addClass([chipClose[i]], HIDEICON);
          } else {
            removeClass([chipClose[i]], HIDEICON);
          }
        }
      }
    };
    DropDownTree2.prototype.updateDropDownIconState = function(state) {
      var spinIcon = select("." + DDTICON, this.inputWrapper);
      if (state) {
        if (!spinIcon) {
          Input.appendSpan(DROPDOWNICON, this.inputWrapper, this.createElement);
        } else {
          removeClass([spinIcon], HIDEICON);
        }
        addClass([this.inputWrapper], SHOW_DD_ICON);
      } else {
        addClass([spinIcon], HIDEICON);
        removeClass([this.inputWrapper], SHOW_DD_ICON);
      }
    };
    DropDownTree2.prototype.updateMode = function() {
      if (this.mode === "Custom") {
        return;
      }
      if (this.mode !== "Delimiter") {
        if (!this.inputWrapper.contains(this.chipWrapper)) {
          this.createChip();
        }
        var isValid = this.getValidMode();
        if (this.chipWrapper.classList.contains(HIDEICON) && isValid) {
          removeClass([this.chipWrapper], HIDEICON);
          addClass([this.inputWrapper], SHOW_CHIP);
        } else if (!isValid) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
        }
        var isValue = this.value !== null ? this.value.length !== 0 ? true : false : false;
        if (isValid && isValue) {
          addClass([this.inputEle], CHIP_INPUT);
        } else {
          removeClass([this.inputEle], CHIP_INPUT);
        }
      } else if (this.inputEle.classList.contains(CHIP_INPUT)) {
        removeClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
        }
      }
    };
    DropDownTree2.prototype.ensurePlaceHolder = function() {
      if (isNullOrUndefined(this.value) || this.value && this.value.length === 0) {
        removeClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
        }
      }
    };
    DropDownTree2.prototype.ensureClearIconPosition = function(floatLabelType) {
      if (floatLabelType !== "Never") {
        this.inputWrapper.insertBefore(this.overAllClear, this.inputObj.buttons[0]);
      }
    };
    DropDownTree2.prototype.setMultiSelectValue = function(newValues) {
      if (!this.isFilteredData) {
        this.setProperties({ value: this.isFromFilterChange && newValues && newValues.length == 0 ? this.value : newValues }, true);
        this.isFromFilterChange = false;
        if (newValues && newValues.length !== 0 && !this.showCheckBox) {
          this.treeObj.selectedNodes = this.value.slice();
          this.treeObj.dataBind();
        }
      } else {
        var selectedValues = isNullOrUndefined(this.value) ? [] : this.value;
        for (var i = 0; i < newValues.length; i++) {
          if (isNullOrUndefined(this.value) || this.value.indexOf(newValues[i]) === -1) {
            selectedValues.push(newValues[i]);
          }
        }
        this.setProperties({ value: selectedValues }, true);
      }
    };
    DropDownTree2.prototype.setMultiSelect = function() {
      if (this.showCheckBox && !this.isDynamicChange) {
        this.setMultiSelectValue(this.treeObj.checkedNodes.slice());
      } else {
        var ddtValue = this.allowMultiSelection ? this.showCheckBox ? this.treeObj.checkedNodes : this.treeObj.selectedNodes : this.value ? this.showCheckBox ? this.value : [this.value[0]] : null;
        this.setMultiSelectValue(ddtValue);
        if (this.showCheckBox && this.value !== null) {
          this.treeObj.checkedNodes = this.value;
          this.treeObj.dataBind();
        }
      }
      this.selectedText = [];
      var checkSelection = this.allowMultiSelection ? true : this.showCheckBox ? true : false;
      if (this.inputWrapper.contains(this.chipWrapper) && !checkSelection) {
        removeClass([this.inputEle], CHIP_INPUT);
        detach(this.chipWrapper);
      }
      var isValid = this.getValidMode();
      if (isValid && this.value !== null) {
        addClass([this.inputEle], CHIP_INPUT);
        if (this.chipWrapper) {
          removeClass([this.chipWrapper], HIDEICON);
        }
      }
      var isValue = this.value ? this.value.length ? true : false : false;
      if (this.chipWrapper && (this.mode === "Box" && !isValue)) {
        addClass([this.chipWrapper], HIDEICON);
        removeClass([this.inputEle], CHIP_INPUT);
      }
      this.updateSelectedValues();
    };
    DropDownTree2.prototype.getSelectedData = function(value) {
      var data = null;
      if (this.isFilteredData) {
        for (var i = 0; i < this.selectedData.length; i++) {
          if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : "id", this.selectedData[i]).toString() === value) {
            data = this.selectedData[i];
            break;
          }
        }
      }
      if (isNullOrUndefined(data)) {
        if (this.treeSettings.loadOnDemand) {
          data = this.getNodeData(value);
        } else {
          data = this.treeObj.getNode(value);
        }
        if (!isNullOrUndefined(data)) {
          this.selectedData.push(data);
        }
      }
      return data;
    };
    DropDownTree2.prototype.getNodeData = function(id) {
      var childItems;
      if (isNullOrUndefined(id)) {
        return childItems;
      } else if (this.treeDataType === 1) {
        for (var i = 0, objlen = this.treeItems.length; i < objlen; i++) {
          var dataId = getValue(this.fields.value, this.treeItems[i]);
          if (!isNullOrUndefined(this.treeItems[i]) && !isNullOrUndefined(dataId) && dataId.toString() === id) {
            return this.treeItems[i];
          }
        }
      } else {
        return this.getChildNodeData(this.treeItems, this.fields, id);
      }
      return childItems;
    };
    DropDownTree2.prototype.getChildNodeData = function(obj, mapper, id) {
      var newChildItems;
      if (isNullOrUndefined(obj)) {
        return newChildItems;
      }
      for (var i = 0, objlen = obj.length; i < objlen; i++) {
        var dataValue = getValue(mapper.value, obj[i]);
        if (obj[i] && dataValue && dataValue.toString() === id) {
          return obj[i];
        } else if (typeof mapper.child === "string" && !isNullOrUndefined(getValue(mapper.child, obj[i]))) {
          var childNodeData = getValue(mapper.child, obj[i]);
          newChildItems = this.getChildNodeData(childNodeData, this.getChildMapperFields(mapper), id);
          if (newChildItems !== void 0) {
            break;
          }
        } else if (this.fields.dataSource instanceof DataManager && !isNullOrUndefined(getValue("child", obj[i]))) {
          var child = "child";
          newChildItems = this.getChildNodeData(getValue(child, obj[i]), this.getChildMapperFields(mapper), id);
          if (newChildItems !== void 0) {
            break;
          }
        }
      }
      return newChildItems;
    };
    DropDownTree2.prototype.getChildMapperFields = function(mapper) {
      return typeof mapper.child === "string" || isNullOrUndefined(mapper.child) ? mapper : mapper.child;
    };
    DropDownTree2.prototype.removeSelectedData = function(value, muteOnChange) {
      var selectedValues = isNullOrUndefined(this.value) ? [] : this.value.slice();
      selectedValues.splice(selectedValues.indexOf(value), 1);
      this.setProperties({ value: selectedValues }, muteOnChange);
      for (var i = 0; i < this.selectedData.length; i++) {
        if (getValue(this.treeSettings.loadOnDemand ? this.fields.value : "id", this.selectedData[i]).toString() === value) {
          this.selectedData.splice(i, 1);
          break;
        }
      }
    };
    DropDownTree2.prototype.updateSelectedValues = function() {
      this.dataValue = "";
      var temp;
      var text;
      var textValue = "";
      var selectedData;
      this.hiddenElement.innerHTML = "";
      var hiddenInputValue = "";
      if ((!this.isChipDelete || this.treeSettings.autoCheck) && this.inputWrapper.contains(this.chipWrapper)) {
        this.chipCollection.innerHTML = "";
      }
      if (!this.isFilteredData) {
        this.selectedData = [];
      }
      if (!isNullOrUndefined(this.value)) {
        for (var i = 0, len = this.value.length; i < len; i++) {
          selectedData = this.getSelectedData(this.value[i]);
          text = getValue(this.treeSettings.loadOnDemand ? this.fields.text : "text", selectedData);
          this.selectedText.push(text);
          temp = this.selectedText[this.selectedText.length - 1];
          if (this.selectedText.length > 1) {
            this.dataValue += this.delimiterChar + " " + temp;
            textValue += "," + temp;
          } else {
            this.dataValue += temp;
            textValue += temp;
          }
          if (this.mode !== "Custom" && this.mode !== "Delimiter" && (!this.isChipDelete || this.treeSettings.autoCheck) && (this.allowMultiSelection || this.showCheckBox)) {
            this.setChipValues(temp, this.value[i]);
          }
          hiddenInputValue += '<option selected value ="' + this.value[i] + '">' + this.selectedText[this.selectedText.length - 1] + "</option>";
        }
        if (this.selectedText.length >= 1) {
          this.setProperties({ text: textValue }, true);
        }
        this.hiddenElement.innerHTML = hiddenInputValue;
        if (this.mode === "Custom" && (this.allowMultiSelection || this.showCheckBox)) {
          this.setTagValues();
        }
      }
      var isValid = this.getValidMode();
      if (this.mode !== "Custom" && this.mode !== "Box" && (this.allowMultiSelection || this.showCheckBox) && !isValid) {
        if (this.chipWrapper) {
          addClass([this.chipWrapper], HIDEICON);
          removeClass([this.inputWrapper], SHOW_CHIP);
        }
      }
      Input.setValue(this.dataValue, this.inputEle, this.floatLabelType);
      if (textValue === "") {
        this.setProperties({ text: null }, true);
      } else {
        this.setProperties({ text: textValue }, true);
      }
      if (this.showClearButton && this.inputFocus) {
        this.showOverAllClear();
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.popupObj) {
        this.popupObj.refreshPosition();
      }
      this.currentText = this.text;
      this.currentValue = this.value;
    };
    DropDownTree2.prototype.setChipValues = function(text, value) {
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.createChip();
      }
      var chip = this.createElement("span", {
        className: CHIP,
        attrs: { "data-value": value }
      });
      var chipContent = this.createElement("span", { className: CHIP_CONTENT });
      var chipClose = this.createElement("span", { className: CHIP_CLOSE + " " + ICONS2 });
      if (this.enableHtmlSanitizer) {
        chipContent.innerText = text;
      } else {
        chipContent.innerHTML = text;
      }
      chip.appendChild(chipContent);
      this.chipCollection.appendChild(chip);
      if (this.showClearButton) {
        chip.appendChild(chipClose);
        EventHandler.add(chipClose, "mousedown", this.removeChip, this);
      }
    };
    DropDownTree2.prototype.setTagValues = function() {
      if (this.value === null || this.text == null) {
        return;
      }
      if (!this.inputWrapper.contains(this.chipWrapper)) {
        this.createChip();
      }
      if (!this.inputWrapper.classList.contains(SHOW_CHIP)) {
        addClass([this.inputWrapper], SHOW_CHIP);
      }
      var chip = this.createElement("span", {
        className: CHIP
      });
      if (!this.inputEle.classList.contains(CHIP_INPUT)) {
        addClass([this.inputEle], CHIP_INPUT);
      }
      if (this.chipWrapper.classList.contains(HIDEICON)) {
        removeClass([this.chipWrapper], HIDEICON);
      }
      var chipContent = this.createElement("span", { className: CHIP_CONTENT });
      var template = this.customTemplate;
      var templateId = this.customTemplateId;
      var templatestring = "customTemplate";
      var compiledString = this.templateComplier(template);
      var tempArr = compiledString({ "value": this.value, "text": this.text }, this, templatestring, templateId, this.isStringTemplate, void 0, chipContent);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, chipContent);
      }
      chip.appendChild(chipContent);
      this.chipCollection.appendChild(chip);
    };
    DropDownTree2.prototype.setSelectAllWrapper = function(state) {
      if (this.isFirstRender) {
        return;
      }
      if (state && !this.popupEle.contains(this.checkAllParent) && this.showCheckBox) {
        this.createSelectAllWrapper();
        this.popupEle.insertBefore(this.checkAllParent, this.popupDiv);
      } else if (this.popupEle.contains(this.checkAllParent)) {
        detach(this.checkAllParent);
        this.checkAllParent = null;
      }
    };
    DropDownTree2.prototype.setHeaderTemplate = function() {
      if (this.header) {
        this.header.innerHTML = "";
      } else {
        this.header = this.createElement("div");
        addClass([this.header], HEADER2);
      }
      var compiledString = this.templateComplier(this.headerTemplate);
      var tempArr = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, void 0, this.header);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, this.header);
      }
      this.popupEle.insertBefore(this.header, this.checkAllParent ? this.checkAllParent : this.popupDiv);
    };
    DropDownTree2.prototype.templateComplier = function(template) {
      if (template) {
        var e = void 0;
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (e2) {
          return compile(template);
        }
      }
      return compile(template);
    };
    DropDownTree2.prototype.setFooterTemplate = function() {
      if (this.footer) {
        this.footer.innerHTML = "";
      } else {
        this.footer = this.createElement("div");
        addClass([this.footer], FOOTER);
      }
      var compiledString = this.templateComplier(this.footerTemplate);
      var tempArr = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, void 0, this.footer);
      if (tempArr) {
        tempArr = Array.prototype.slice.call(tempArr);
        append(tempArr, this.footer);
      }
      append([this.footer], this.popupEle);
    };
    DropDownTree2.prototype.clearAll = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      this.resetValue();
      this.showOverAllClear();
      if (this.allowMultiSelection || this.showCheckBox) {
        if (this.popupObj) {
          this.popupObj.refreshPosition();
        }
        if (!this.wrapText) {
          this.updateOverflowWrapper(true);
        }
      }
      if (e) {
        this.isClearButtonClick = true;
      }
      if (!this.changeOnBlur) {
        this.triggerChangeEvent(e);
      }
    };
    DropDownTree2.prototype.removeChip = function(e) {
      if (!this.enabled || this.readonly) {
        return;
      }
      var element2 = e.target.parentElement;
      var value = element2.getAttribute("data-value");
      if (this.chipCollection) {
        if (element2) {
          remove(element2);
        }
      }
      this.isChipDelete = true;
      this.isClearButtonClick = true;
      this.removeSelectedData(value, true);
      this.selectedText = [];
      if (this.allowMultiSelection) {
        this.treeObj.selectedNodes = this.value.slice();
        this.updateSelectedValues();
      }
      if (this.showCheckBox) {
        this.treeObj.uncheckAll([value]);
        this.clearCheckAll();
        this.setMultiSelect();
      }
      this.triggerChangeEvent(e);
      this.isChipDelete = false;
      this.ensurePlaceHolder();
    };
    DropDownTree2.prototype.resetValue = function(isDynamicChange) {
      if (this.value == [] && this.text == null) {
        return;
      }
      Input.setValue(null, this.inputEle, this.floatLabelType);
      if (!isDynamicChange) {
        this.oldValue = this.value;
        this.setProperties({ value: [] }, true);
      }
      this.dataValue = null;
      this.setProperties({ text: null }, true);
      this.selectedData = [];
      setValue("selectedNodes", [], this.treeObj);
      this.hiddenElement.innerHTML = "";
      if (this.showCheckBox) {
        this.treeObj.uncheckAll();
        this.setMultiSelect();
        this.clearCheckAll();
      }
      if (this.oldValue === null && !isDynamicChange) {
        this.removeValue = true;
      } else if (isDynamicChange) {
        this.triggerChangeEvent();
      }
      if ((this.allowMultiSelection || this.showCheckBox) && this.chipWrapper) {
        this.chipCollection.innerHTML = "";
        if (!this.wrapText) {
          this.updateOverflowWrapper(true);
        }
        this.ensurePlaceHolder();
      }
    };
    DropDownTree2.prototype.clearCheckAll = function() {
      if (this.showSelectAll && this.value && this.value.length === 0) {
        this.setLocale(false);
      }
    };
    DropDownTree2.prototype.selectAllItems = function(state) {
      if (this.showCheckBox) {
        if (state) {
          this.isCheckAllCalled = true;
          this.treeObj.checkAll();
        } else {
          this.treeObj.uncheckAll();
        }
        this.checkSelectAll = true;
      } else if (this.allowMultiSelection) {
        if (!state) {
          this.treeObj.selectedNodes = [];
        } else {
          var li = selectAll("li", this.treeObj.element);
          var id = void 0;
          var arr = [];
          for (var i = 0; i < li.length; i++) {
            id = li[i].getAttribute("data-uid").toString();
            arr.push(id);
          }
          this.treeObj.selectedNodes = arr;
        }
      }
      this.updateMode();
      this.setMultiSelect();
      if (!this.wrapText) {
        if (state) {
          this.updateView();
        } else {
          this.updateOverflowWrapper(true);
        }
      }
    };
    DropDownTree2.prototype.updateTreeSettings = function(prop) {
      var value = Object.keys(prop.treeSettings)[0];
      if (value === "autoCheck") {
        this.ensureAutoCheck();
        this.treeObj.autoCheck = this.treeSettings.autoCheck;
      } else if (value === "loadOnDemand") {
        this.treeObj.loadOnDemand = this.treeSettings.loadOnDemand;
      } else if (value === "expandOn") {
        this.treeObj.expandOn = this.treeSettings.expandOn;
        this.treeObj.dataBind();
        return;
      }
      this.treeObj.dataBind();
      this.setMultiSelect();
      this.updateValue(this.value);
    };
    DropDownTree2.prototype.updateCheckBoxState = function(checkBox) {
      if (this.hasTemplate) {
        this.updateTemplate();
      }
      if (!this.wrapText) {
        this.updateOverflowWrapper(false);
      }
      this.treeObj.showCheckBox = checkBox;
      this.treeObj.dataBind();
      this.isDynamicChange = true;
      this.setSelectAllWrapper(this.showSelectAll);
      if (this.showSelectAll) {
        this.setLocale();
      }
      if (this.showCheckBox) {
        this.updateMode();
      }
      this.setMultiSelect();
      this.isDynamicChange = false;
    };
    DropDownTree2.prototype.updateTemplate = function() {
      if (this.popupObj) {
        this.clearTemplate();
        this.portals = [];
        this.popupObj.destroy();
        if (this.isPopupOpen) {
          this.hidePopup();
          this.isFirstRender = true;
          this.renderPopup();
        } else {
          this.isFirstRender = true;
        }
      }
    };
    DropDownTree2.prototype.l10nUpdate = function(actionFailure2) {
      if (this.noRecord) {
        this.noRecord.innerHTML = "";
      } else {
        this.noRecord = this.createElement("div");
      }
      if (this.noRecordsTemplate !== "No Records Found" || this.actionFailureTemplate !== "The Request Failed") {
        var template = actionFailure2 ? this.actionFailureTemplate : this.noRecordsTemplate;
        var templateId = actionFailure2 ? this.actionFailureTemplateId : this.noRecordsTemplateId;
        var templatestring = actionFailure2 ? "actionFailureTemplate" : "noRecordsTemplate";
        var compiledString = this.templateComplier(template);
        var tempArr = compiledString({}, this, templatestring, templateId, this.isStringTemplate, void 0, this.noRecord);
        if (tempArr) {
          tempArr = Array.prototype.slice.call(tempArr);
          append(tempArr, this.noRecord);
          addClass([this.noRecord], NODATACONTAINER);
          prepend([this.noRecord], this.popupDiv);
        }
      } else {
        var l10nLocale = { noRecordsTemplate: "No Records Found", actionFailureTemplate: "The Request Failed" };
        this.l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        this.noRecord.innerHTML = actionFailure2 ? this.l10n.getConstant("actionFailureTemplate") : this.l10n.getConstant("noRecordsTemplate");
        addClass([this.noRecord], NODATACONTAINER);
        prepend([this.noRecord], this.popupDiv);
      }
    };
    DropDownTree2.prototype.updateRecordTemplate = function(action) {
      if (this.treeItems && this.treeItems.length <= 0) {
        this.l10nUpdate(action);
        if (this.hasTemplate) {
          this.updateTemplate();
        }
      }
    };
    DropDownTree2.prototype.updateOverflowWrapper = function(state) {
      if (!state) {
        if (!this.inputWrapper.contains(this.overFlowWrapper)) {
          this.overFlowWrapper = this.createElement("span", { className: OVERFLOW_VIEW + " " + HIDEICON });
          this.inputWrapper.insertBefore(this.overFlowWrapper, this.hiddenElement);
        }
      } else if (this.inputWrapper.contains(this.overFlowWrapper) && state) {
        this.overFlowWrapper.innerHTML = "";
      }
    };
    DropDownTree2.prototype.updateMultiSelection = function(state) {
      if (!this.wrapText) {
        this.updateOverflowWrapper(false);
      }
      this.treeObj.allowMultiSelection = state;
      this.treeObj.dataBind();
      this.updateOption();
      if (this.allowMultiSelection) {
        this.updateMode();
      }
      this.setMultiSelect();
    };
    DropDownTree2.prototype.updateAllowFiltering = function(state) {
      if (!this.isFirstRender) {
        if (state) {
          this.renderFilter();
        } else {
          this.destroyFilter();
        }
      }
      this.ensureAutoCheck();
    };
    DropDownTree2.prototype.updateFilterPlaceHolder = function() {
      if (this.filterObj) {
        this.filterObj.placeholder = this.filterBarPlaceholder;
        this.filterObj.element.setAttribute("aria-label", this.filterBarPlaceholder);
      }
    };
    DropDownTree2.prototype.updateValue = function(value) {
      this.isDynamicChange = true;
      if (isNullOrUndefined(value) || value.length === 0) {
        this.resetValue(true);
      } else {
        this.setTreeValue();
        if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
          this.updateOverflowWrapper(false);
          this.updateView();
        }
      }
      this.updateHiddenValue();
      this.isDynamicChange = false;
    };
    DropDownTree2.prototype.updateText = function(text) {
      if (isNullOrUndefined(text)) {
        this.resetValue();
      } else {
        this.setTreeText();
        if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
          this.updateOverflowWrapper(false);
          this.updateView();
        }
      }
      this.updateHiddenValue();
    };
    DropDownTree2.prototype.updateModelMode = function() {
      var validMode = this.allowMultiSelection ? true : this.showCheckBox ? true : false;
      if (!validMode) {
        return;
      }
      if (!this.wrapText) {
        var overFlow = select("." + OVERFLOW_VIEW, this.inputWrapper);
        if (overFlow) {
          overFlow.innerHTML = "";
        }
      }
      this.updateMode();
      this.setMultiSelect();
      if (!this.wrapText && (this.value && this.value.length !== 0)) {
        this.updateOverFlowView();
        addClass([this.inputEle], CHIP_INPUT);
        if (this.mode === "Box") {
          removeClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);
        } else {
          addClass([this.overFlowWrapper, this.inputWrapper], SHOW_TEXT);
        }
      }
    };
    DropDownTree2.prototype.updateOption = function() {
      if (!this.hiddenElement.hasAttribute("multiple") && (this.allowMultiSelection || this.showCheckBox)) {
        this.hiddenElement.setAttribute("multiple", "");
      } else if (this.hiddenElement.hasAttribute("multiple") && (!this.allowMultiSelection && !this.showCheckBox)) {
        this.hiddenElement.removeAttribute("multiple");
      }
    };
    DropDownTree2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            this.setElementWidth(newProp.width);
            if (this.popupObj) {
              this.popupObj.element.style.width = this.setWidth();
            }
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputEle);
            break;
          case "cssClass":
            this.setCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enableRtl":
            this.setEnableRTL(this.enableRtl);
            break;
          case "fields":
            this.setFields();
            break;
          case "readonly":
            Input.setReadonly(newProp.readonly, this.inputEle);
            break;
          case "enabled":
            this.setEnable();
            break;
          case "floatLabelType":
            Input.removeFloating(this.inputObj);
            Input.addFloating(this.inputEle, newProp.floatLabelType, this.placeholder, this.createElement);
            this.ensureClearIconPosition(newProp.floatLabelType);
            break;
          case "showClearButton":
            this.updateClearButton(newProp.showClearButton);
            break;
          case "allowFiltering":
            this.updateAllowFiltering(newProp.allowFiltering);
            break;
          case "filterBarPlaceholder":
            this.updateFilterPlaceHolder();
            break;
          case "value":
            this.oldValue = oldProp.value;
            this.updateValue(newProp.value);
            break;
          case "text":
            this.updateText(newProp.text);
            break;
          case "allowMultiSelection":
            this.updateMultiSelection(newProp.allowMultiSelection);
            break;
          case "mode":
            if (!this.showCheckBox && !this.allowMultiSelection) {
              return;
            }
            if (this.mode === "Custom") {
              if (this.overFlowWrapper) {
                detach(this.overFlowWrapper);
              }
              if (this.chipWrapper) {
                detach(this.chipWrapper);
              }
              this.setTagValues();
            } else {
              if (oldProp.mode === "Custom") {
                this.updateOverflowWrapper(this.wrapText);
              }
              this.updateModelMode();
            }
            break;
          case "delimiterChar":
            if (this.mode === "Box") {
              return;
            }
            if (this.showCheckBox || this.allowMultiSelection) {
              this.setMultiSelect();
            }
            break;
          case "selectAllText":
            if (this.showCheckBox && this.showSelectAll) {
              this.setLocale();
            }
            break;
          case "unSelectAllText":
            if (this.showCheckBox && this.showSelectAll) {
              this.setLocale(false);
            }
            break;
          case "showSelectAll":
            if (this.showCheckBox) {
              this.setSelectAllWrapper(newProp.showSelectAll);
              this.updatePopupHeight();
            }
            break;
          case "showCheckBox":
            this.updateCheckBoxState(newProp.showCheckBox);
            if (!this.wrapText) {
              this.updateOverflowWrapper(true);
            }
            this.updatePopupHeight();
            this.updateOption();
            break;
          case "treeSettings":
            this.updateTreeSettings(newProp);
            break;
          case "customTemplate":
            if (this.mode !== "Custom") {
              return;
            }
            this.chipCollection.innerHTML = "";
            this.setTagValues();
            break;
          case "sortOrder":
            if (this.hasTemplate) {
              this.updateTemplate();
            }
            this.treeObj.sortOrder = newProp.sortOrder;
            this.treeObj.dataBind();
            this.updateValue(this.value);
            break;
          case "showDropDownIcon":
            this.updateDropDownIconState(newProp.showDropDownIcon);
            break;
          case "popupWidth":
            if (this.popupObj) {
              this.popupObj.element.style.width = this.setWidth();
            }
            break;
          case "popupHeight":
            if (this.popupObj) {
              this.updatePopupHeight();
            }
            break;
          case "zIndex":
            if (this.popupObj) {
              this.popupObj.zIndex = newProp.zIndex;
              this.popupObj.dataBind();
            }
            break;
          case "headerTemplate":
            this.updateTemplate();
            break;
          case "footerTemplate":
            this.updateTemplate();
            break;
          case "itemTemplate":
            this.updateTemplate();
            this.treeObj.nodeTemplate = newProp.itemTemplate;
            this.treeObj.dataBind();
            break;
          case "noRecordsTemplate":
            this.updateRecordTemplate();
            break;
          case "actionFailureTemplate":
            this.updateRecordTemplate(true);
            break;
          case "htmlAttributes":
            this.setHTMLAttributes();
            break;
          case "wrapText":
            this.updateOverflowWrapper(this.wrapText);
            if ((this.allowMultiSelection || this.showCheckBox) && !this.wrapText) {
              this.updateView();
            } else {
              addClass([this.overFlowWrapper], HIDEICON);
              if (this.chipWrapper && this.mode === "Box") {
                removeClass([this.chipWrapper], HIDEICON);
              } else {
                removeClass([this.inputWrapper], SHOW_CHIP);
                removeClass([this.inputEle], CHIP_INPUT);
              }
              this.ensurePlaceHolder();
            }
            break;
        }
      }
    };
    DropDownTree2.prototype.clear = function() {
      this.clearAll();
      if (this.inputFocus) {
        this.onFocusOut();
      } else {
        if (this.changeOnBlur) {
          this.triggerChangeEvent();
        }
        this.removeValue = false;
      }
    };
    DropDownTree2.prototype.destroy = function() {
      this.clearTemplate();
      this.unWireEvents();
      this.setCssClass(null, this.cssClass);
      this.setProperties({ value: [] }, true);
      this.setProperties({ text: null }, true);
      this.treeObj.destroy();
      this.destroyFilter();
      if (this.popupObj) {
        this.popupObj.destroy();
        detach(this.popupObj.element);
      }
      if (this.element.tagName !== this.getDirective()) {
        this.inputWrapper.parentElement.insertBefore(this.element, this.inputWrapper);
      }
      Input.setValue(null, this.inputEle, this.floatLabelType);
      detach(this.inputWrapper);
      detach(this.popupDiv);
      this.element.classList.remove("e-input");
      if (this.showCheckBox || this.allowMultiSelection) {
        this.element.classList.remove(CHIP_INPUT);
      }
      _super.prototype.destroy.call(this);
    };
    DropDownTree2.prototype.destroyFilter = function() {
      if (this.filterObj) {
        this.filterObj.destroy();
        detach(this.filterObj.element);
        detach(this.filterContainer);
        this.filterObj = null;
      }
    };
    DropDownTree2.prototype.ensureVisible = function(item) {
      this.treeObj.ensureVisible(item);
    };
    DropDownTree2.prototype.getData = function(item) {
      return this.treeObj.getTreeData(item);
    };
    DropDownTree2.prototype.hidePopup = function() {
      var eventArgs = { popup: this.popupObj };
      this.inputWrapper.classList.remove(ICONANIMATION);
      if (this.popupEle) {
        addClass([this.popupEle], DDTHIDEICON);
      }
      attributes(this.inputWrapper, { "aria-expanded": "false" });
      if (this.popupObj && this.isPopupOpen) {
        this.popupObj.hide();
        if (this.inputFocus) {
          this.inputWrapper.focus();
          if (this.allowFiltering) {
            addClass([this.inputWrapper], [INPUTFOCUS]);
          }
        }
        this.trigger("close", eventArgs);
      }
    };
    DropDownTree2.prototype.selectAll = function(state) {
      this.selectAllItems(state);
    };
    DropDownTree2.prototype.showPopup = function() {
      if (!this.enabled || this.readonly || this.isPopupOpen) {
        return;
      }
      this.renderPopup();
      this.focusIn();
    };
    DropDownTree2.prototype.getModuleName = function() {
      return "dropdowntree";
    };
    __decorate32([
      Property("The Request Failed")
    ], DropDownTree2.prototype, "actionFailureTemplate", void 0);
    __decorate32([
      Property(false)
    ], DropDownTree2.prototype, "allowFiltering", void 0);
    __decorate32([
      Property(false)
    ], DropDownTree2.prototype, "allowMultiSelection", void 0);
    __decorate32([
      Property(true)
    ], DropDownTree2.prototype, "changeOnBlur", void 0);
    __decorate32([
      Property("")
    ], DropDownTree2.prototype, "cssClass", void 0);
    __decorate32([
      Property("${value.length} item(s) selected")
    ], DropDownTree2.prototype, "customTemplate", void 0);
    __decorate32([
      Property(",")
    ], DropDownTree2.prototype, "delimiterChar", void 0);
    __decorate32([
      Property(true)
    ], DropDownTree2.prototype, "enabled", void 0);
    __decorate32([
      Complex({}, Fields)
    ], DropDownTree2.prototype, "fields", void 0);
    __decorate32([
      Property(null)
    ], DropDownTree2.prototype, "filterBarPlaceholder", void 0);
    __decorate32([
      Property("StartsWith")
    ], DropDownTree2.prototype, "filterType", void 0);
    __decorate32([
      Property("Never")
    ], DropDownTree2.prototype, "floatLabelType", void 0);
    __decorate32([
      Property(null)
    ], DropDownTree2.prototype, "footerTemplate", void 0);
    __decorate32([
      Property(false)
    ], DropDownTree2.prototype, "ignoreAccent", void 0);
    __decorate32([
      Property(true)
    ], DropDownTree2.prototype, "ignoreCase", void 0);
    __decorate32([
      Property(null)
    ], DropDownTree2.prototype, "headerTemplate", void 0);
    __decorate32([
      Property({})
    ], DropDownTree2.prototype, "htmlAttributes", void 0);
    __decorate32([
      Property(null)
    ], DropDownTree2.prototype, "itemTemplate", void 0);
    __decorate32([
      Property("Default")
    ], DropDownTree2.prototype, "mode", void 0);
    __decorate32([
      Property("No Records Found")
    ], DropDownTree2.prototype, "noRecordsTemplate", void 0);
    __decorate32([
      Property(null)
    ], DropDownTree2.prototype, "placeholder", void 0);
    __decorate32([
      Property("300px")
    ], DropDownTree2.prototype, "popupHeight", void 0);
    __decorate32([
      Property("100%")
    ], DropDownTree2.prototype, "popupWidth", void 0);
    __decorate32([
      Property(false)
    ], DropDownTree2.prototype, "readonly", void 0);
    __decorate32([
      Property(false)
    ], DropDownTree2.prototype, "showSelectAll", void 0);
    __decorate32([
      Property("Select All")
    ], DropDownTree2.prototype, "selectAllText", void 0);
    __decorate32([
      Property(false)
    ], DropDownTree2.prototype, "showCheckBox", void 0);
    __decorate32([
      Property(false)
    ], DropDownTree2.prototype, "enableHtmlSanitizer", void 0);
    __decorate32([
      Property(true)
    ], DropDownTree2.prototype, "showClearButton", void 0);
    __decorate32([
      Property(true)
    ], DropDownTree2.prototype, "showDropDownIcon", void 0);
    __decorate32([
      Property("None")
    ], DropDownTree2.prototype, "sortOrder", void 0);
    __decorate32([
      Property(null)
    ], DropDownTree2.prototype, "text", void 0);
    __decorate32([
      Complex({}, TreeSettings)
    ], DropDownTree2.prototype, "treeSettings", void 0);
    __decorate32([
      Property("Unselect All")
    ], DropDownTree2.prototype, "unSelectAllText", void 0);
    __decorate32([
      Property(null)
    ], DropDownTree2.prototype, "value", void 0);
    __decorate32([
      Property("100%")
    ], DropDownTree2.prototype, "width", void 0);
    __decorate32([
      Property(1e3)
    ], DropDownTree2.prototype, "zIndex", void 0);
    __decorate32([
      Property(false)
    ], DropDownTree2.prototype, "wrapText", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "actionFailure", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "beforeOpen", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "change", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "close", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "blur", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "created", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "dataBound", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "destroyed", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "filtering", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "focus", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "keyPress", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "open", void 0);
    __decorate32([
      Event()
    ], DropDownTree2.prototype, "select", void 0);
    DropDownTree2 = __decorate32([
      NotifyPropertyChanges
    ], DropDownTree2);
    return DropDownTree2;
  }(Component)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/combo-box/combo-box.js
var __extends36 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate33 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SPINNER_CLASS = "e-atc-spinner-icon";
dropDownListClasses.root = "e-combobox";
var inputObject2 = {
  container: null,
  buttons: []
};
var ComboBox = (
  /** @class */
  function(_super) {
    __extends36(ComboBox2, _super);
    function ComboBox2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    ComboBox2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
    };
    ComboBox2.prototype.getLocaleName = function() {
      return "combo-box";
    };
    ComboBox2.prototype.wireEvent = function() {
      if (this.getModuleName() === "combobox") {
        EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.preventBlur, this);
        EventHandler.add(this.inputWrapper.container, "blur", this.onBlurHandler, this);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {
        EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick, this);
      }
      EventHandler.add(this.inputElement, "focus", this.targetFocus, this);
      if (!this.readonly) {
        EventHandler.add(this.inputElement, "input", this.onInput, this);
        EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this);
        EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this);
        EventHandler.add(this.inputElement, "paste", this.pasteHandler, this);
      }
      this.bindCommonEvent();
    };
    ComboBox2.prototype.preventBlur = function(e) {
      if (!this.allowFiltering && document.activeElement !== this.inputElement && !document.activeElement.classList.contains(dropDownListClasses.input) && Browser.isDevice || !Browser.isDevice) {
        e.preventDefault();
      }
    };
    ComboBox2.prototype.onBlurHandler = function(e) {
      var inputValue = this.inputElement && this.inputElement.value === "" ? null : this.inputElement && this.inputElement.value;
      if (!isNullOrUndefined(this.listData) && !isNullOrUndefined(inputValue) && inputValue !== this.text) {
        this.customValue(e);
      }
      _super.prototype.onBlurHandler.call(this, e);
    };
    ComboBox2.prototype.targetElement = function() {
      return this.inputElement;
    };
    ComboBox2.prototype.setOldText = function(text) {
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
      this.customValue();
      this.removeSelection();
    };
    ComboBox2.prototype.setOldValue = function(value) {
      if (this.allowCustom) {
        this.valueMuteChange(this.value);
      } else {
        this.valueMuteChange(null);
      }
      this.removeSelection();
      this.setHiddenValue();
    };
    ComboBox2.prototype.valueMuteChange = function(value) {
      var inputValue = isNullOrUndefined(value) ? null : value.toString();
      Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);
      this.setProperties({ value, text: value, index: null }, true);
      this.activeIndex = this.index;
      var fields = this.fields;
      var dataItem = {};
      dataItem[fields.text] = isNullOrUndefined(value) ? null : value.toString();
      dataItem[fields.value] = isNullOrUndefined(value) ? null : value.toString();
      this.itemData = dataItem;
      this.item = null;
      if (this.previousValue !== this.value) {
        this.detachChangeEvent(null);
      }
    };
    ComboBox2.prototype.updateValues = function() {
      if (!isNullOrUndefined(this.value)) {
        var li = this.getElementByValue(this.value);
        if (li) {
          this.setSelection(li, null);
        } else if (this.allowCustom) {
          this.valueMuteChange(this.value);
        } else {
          this.valueMuteChange(null);
        }
      } else if (this.text && isNullOrUndefined(this.value)) {
        var li = this.getElementByText(this.text);
        if (li) {
          this.setSelection(li, null);
        } else {
          Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
          this.customValue();
        }
      } else {
        this.setSelection(this.liCollections[this.activeIndex], null);
      }
      this.setHiddenValue();
      Input.setValue(this.text, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    ComboBox2.prototype.updateIconState = function() {
      if (this.showClearButton) {
        if (this.inputElement && this.inputElement.value !== "" && !this.readonly) {
          removeClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        } else {
          addClass([this.inputWrapper.clearButton], dropDownListClasses.clearIconHide);
        }
      }
    };
    ComboBox2.prototype.getAriaAttributes = function() {
      var ariaAttributes = {
        "role": "combobox",
        "aria-autocomplete": "both",
        "aria-labelledby": this.hiddenElement.id,
        "aria-expanded": "false",
        "aria-readonly": this.readonly.toString(),
        "autocomplete": "off",
        "autocapitalize": "off",
        "spellcheck": "false"
      };
      return ariaAttributes;
    };
    ComboBox2.prototype.searchLists = function(e) {
      this.isTyped = true;
      if (this.isFiltering()) {
        _super.prototype.searchLists.call(this, e);
        if (this.ulElement && this.filterInput.value.trim() === "") {
          this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses.li));
        }
      } else {
        if (this.ulElement && this.inputElement.value === "" && this.preventAutoFill) {
          this.setHoverList(this.ulElement.querySelector("." + dropDownListClasses.li));
        }
        this.incrementalSearch(e);
      }
    };
    ComboBox2.prototype.getNgDirective = function() {
      return "EJS-COMBOBOX";
    };
    ComboBox2.prototype.setSearchBox = function() {
      this.filterInput = this.inputElement;
      return this.isFiltering() ? this.inputWrapper : inputObject2;
    };
    ComboBox2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      var _this = this;
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.isSelectCustom) {
        this.removeSelection();
      }
      if (!this.preventAutoFill && this.getModuleName() === "combobox" && this.isTyped) {
        setTimeout(function() {
          _this.inlineSearch();
        });
      }
    };
    ComboBox2.prototype.getFocusElement = function() {
      var dataItem = this.isSelectCustom ? { text: "" } : this.getItemData();
      var selected = !isNullOrUndefined(this.list) ? this.list.querySelector("." + dropDownListClasses.selected) : this.list;
      var isSelected = dataItem.text === this.inputElement.value && !isNullOrUndefined(selected);
      if (isSelected) {
        return selected;
      }
      if ((Browser.isDevice && !this.isDropDownClick || !Browser.isDevice) && !isNullOrUndefined(this.liCollections) && this.liCollections.length > 0) {
        var inputValue = this.inputElement.value;
        var dataSource = this.sortedData;
        var type = this.typeOfData(dataSource).typeof;
        var activeItem = Search(inputValue, this.liCollections, this.filterType, true, dataSource, this.fields, type);
        var activeElement = activeItem.item;
        if (!isNullOrUndefined(activeElement)) {
          var count = this.getIndexByValue(activeElement.getAttribute("data-value")) - 1;
          var height = parseInt(getComputedStyle(this.liCollections[0], null).getPropertyValue("height"), 10);
          if (!isNaN(height) && this.getModuleName() !== "autocomplete") {
            this.removeFocus();
            var fixedHead = this.fields.groupBy ? this.liCollections[0].offsetHeight : 0;
            this.list.scrollTop = count * height + fixedHead;
            addClass([activeElement], dropDownListClasses.focus);
          }
        } else {
          if (this.isSelectCustom && this.inputElement.value.trim() !== "") {
            this.removeFocus();
            this.list.scrollTop = 0;
          }
        }
        return activeElement;
      } else {
        return null;
      }
    };
    ComboBox2.prototype.setValue = function(e) {
      if (e && e.type === "keydown" && e.action === "enter") {
        this.removeFillSelection();
      }
      if (this.autofill && this.getModuleName() === "combobox" && e && e.type === "keydown" && e.action !== "enter") {
        this.preventAutoFill = false;
        this.inlineSearch(e);
        return false;
      } else {
        return _super.prototype.setValue.call(this, e);
      }
    };
    ComboBox2.prototype.checkCustomValue = function() {
      this.itemData = this.getDataByValue(this.value);
      var dataItem = this.getItemData();
      if (!(this.allowCustom && isNullOrUndefined(dataItem.value) && isNullOrUndefined(dataItem.text))) {
        this.setProperties({ "value": dataItem.value }, !this.allowCustom);
      }
    };
    ComboBox2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        this.spinnerElement = this.getModuleName() === "autocomplete" ? this.inputWrapper.buttons[0] || this.inputWrapper.clearButton || Input.appendSpan("e-input-group-icon " + SPINNER_CLASS, this.inputWrapper.container, this.createElement) : this.inputWrapper.buttons[0] || this.inputWrapper.clearButton;
        addClass([this.spinnerElement], dropDownListClasses.disableIcon);
        createSpinner({
          target: this.spinnerElement,
          width: Browser.isDevice ? "16px" : "14px"
        }, this.createElement);
        showSpinner(this.spinnerElement);
      }
    };
    ComboBox2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], dropDownListClasses.disableIcon);
        if (this.spinnerElement.classList.contains(SPINNER_CLASS)) {
          detach(this.spinnerElement);
        } else {
          this.spinnerElement.innerHTML = "";
        }
        this.spinnerElement = null;
      }
    };
    ComboBox2.prototype.setAutoFill = function(activeElement, isHover) {
      if (!isHover) {
        this.setHoverList(activeElement);
      }
      if (this.autofill && !this.preventAutoFill) {
        var currentValue = this.getTextByValue(activeElement.getAttribute("data-value")).toString();
        var currentFillValue = this.getFormattedValue(activeElement.getAttribute("data-value"));
        if (this.getModuleName() === "combobox") {
          if (!this.isSelected && this.previousValue !== currentFillValue) {
            this.updateSelectedItem(activeElement, null);
            this.isSelected = true;
            this.previousValue = this.getFormattedValue(activeElement.getAttribute("data-value"));
          } else {
            this.updateSelectedItem(activeElement, null, true);
          }
        }
        if (!this.isAndroidAutoFill(currentValue)) {
          this.setAutoFillSelection(currentValue, isHover);
        }
      }
    };
    ComboBox2.prototype.isAndroidAutoFill = function(value) {
      if (Browser.isAndroid) {
        var currentPoints = this.getSelectionPoints();
        var prevEnd = this.prevSelectPoints.end;
        var curEnd = currentPoints.end;
        var prevStart = this.prevSelectPoints.start;
        var curStart = currentPoints.start;
        if (prevEnd !== 0 && (prevEnd === value.length && prevStart === value.length || prevStart > curStart && prevEnd > curEnd || prevEnd === curEnd && prevStart === curStart)) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };
    ComboBox2.prototype.clearAll = function(e, property) {
      if (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) {
        _super.prototype.clearAll.call(this, e);
      }
      if (this.isFiltering() && !isNullOrUndefined(e) && e.target === this.inputWrapper.clearButton) {
        this.searchLists(e);
      }
    };
    ComboBox2.prototype.isSelectFocusItem = function(element2) {
      return !isNullOrUndefined(element2);
    };
    ComboBox2.prototype.inlineSearch = function(e) {
      var isKeyNavigate = e && (e.action === "down" || e.action === "up" || e.action === "home" || e.action === "end" || e.action === "pageUp" || e.action === "pageDown");
      var activeElement = isKeyNavigate ? this.liCollections[this.activeIndex] : this.getFocusElement();
      if (!isNullOrUndefined(activeElement)) {
        if (!isKeyNavigate) {
          var value = this.getFormattedValue(activeElement.getAttribute("data-value"));
          this.activeIndex = this.getIndexByValue(value);
          this.activeIndex = !isNullOrUndefined(this.activeIndex) ? this.activeIndex : null;
        }
        this.preventAutoFill = this.inputElement.value === "" ? false : this.preventAutoFill;
        this.setAutoFill(activeElement, isKeyNavigate);
      } else if (this.inputElement.value === "") {
        this.activeIndex = null;
        if (!isNullOrUndefined(this.list)) {
          this.list.scrollTop = 0;
          var focusItem = this.list.querySelector("." + dropDownListClasses.li);
          this.setHoverList(focusItem);
        }
      } else {
        this.activeIndex = null;
        this.removeSelection();
        if (this.liCollections && this.liCollections.length > 0 && !this.isCustomFilter) {
          this.removeFocus();
        }
      }
    };
    ComboBox2.prototype.incrementalSearch = function(e) {
      this.showPopup(e);
      if (!isNullOrUndefined(this.listData)) {
        this.inlineSearch(e);
        e.preventDefault();
      }
    };
    ComboBox2.prototype.setAutoFillSelection = function(currentValue, isKeyNavigate) {
      if (isKeyNavigate === void 0) {
        isKeyNavigate = false;
      }
      var selection = this.getSelectionPoints();
      var value = this.inputElement.value.substr(0, selection.start);
      if (value && value.toLowerCase() === currentValue.substr(0, selection.start).toLowerCase()) {
        var inputValue = value + currentValue.substr(value.length, currentValue.length);
        Input.setValue(inputValue, this.inputElement, this.floatLabelType, this.showClearButton);
        this.inputElement.setSelectionRange(selection.start, this.inputElement.value.length);
      } else if (isKeyNavigate) {
        Input.setValue(currentValue, this.inputElement, this.floatLabelType, this.showClearButton);
        this.inputElement.setSelectionRange(0, this.inputElement.value.length);
      }
    };
    ComboBox2.prototype.getValueByText = function(text) {
      return _super.prototype.getValueByText.call(this, text, true, this.ignoreAccent);
    };
    ComboBox2.prototype.unWireEvent = function() {
      if (this.getModuleName() === "combobox") {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.preventBlur);
        EventHandler.remove(this.inputWrapper.container, "blur", this.onBlurHandler);
      }
      if (!isNullOrUndefined(this.inputWrapper.buttons[0])) {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.dropDownClick);
      }
      if (this.inputElement) {
        EventHandler.remove(this.inputElement, "focus", this.targetFocus);
        if (!this.readonly) {
          EventHandler.remove(this.inputElement, "input", this.onInput);
          EventHandler.remove(this.inputElement, "keyup", this.onFilterUp);
          EventHandler.remove(this.inputElement, "keydown", this.onFilterDown);
          EventHandler.remove(this.inputElement, "paste", this.pasteHandler);
        }
      }
      this.unBindCommonEvent();
    };
    ComboBox2.prototype.setSelection = function(li, e) {
      _super.prototype.setSelection.call(this, li, e);
      if (!isNullOrUndefined(li) && !this.autofill && !this.isDropDownClick) {
        this.removeFocus();
      }
    };
    ComboBox2.prototype.selectCurrentItem = function(e) {
      var li;
      if (this.isPopupOpen) {
        if (this.isSelected) {
          li = this.list.querySelector("." + dropDownListClasses.selected);
        } else {
          li = this.list.querySelector("." + dropDownListClasses.focus);
        }
        if (li) {
          this.setSelection(li, e);
          this.isTyped = false;
        }
        if (this.isSelected) {
          this.isSelectCustom = false;
          this.onChangeEvent(e);
        }
      }
      if (e.action === "enter" && this.inputElement.value.trim() === "") {
        this.clearAll(e);
      } else if (this.isTyped && !this.isSelected && isNullOrUndefined(li)) {
        this.customValue(e);
      }
      this.hidePopup(e);
    };
    ComboBox2.prototype.setHoverList = function(li) {
      this.removeSelection();
      if (this.isValidLI(li) && !li.classList.contains(dropDownListClasses.selected)) {
        this.removeFocus();
        li.classList.add(dropDownListClasses.focus);
      }
    };
    ComboBox2.prototype.targetFocus = function(e) {
      if (Browser.isDevice && !this.allowFiltering) {
        this.preventFocus = false;
      }
      this.onFocus(e);
      Input.calculateWidth(this.inputElement, this.inputWrapper.container);
    };
    ComboBox2.prototype.dropDownClick = function(e) {
      e.preventDefault();
      if (Browser.isDevice && !this.isFiltering()) {
        this.preventFocus = true;
      }
      _super.prototype.dropDownClick.call(this, e);
    };
    ComboBox2.prototype.customValue = function(e) {
      var _this = this;
      var value = this.getValueByText(this.inputElement.value);
      if (!this.allowCustom && this.inputElement.value !== "") {
        var previousValue = this.previousValue;
        var currentValue = this.value;
        this.setProperties({ value });
        if (isNullOrUndefined(this.value)) {
          Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
        }
        if (this.autofill && previousValue === this.value && currentValue !== this.value) {
          this.onChangeEvent(null);
        }
      } else if (this.inputElement.value.trim() !== "") {
        var previousValue_1 = this.value;
        if (isNullOrUndefined(value)) {
          var value_1 = this.inputElement.value === "" ? null : this.inputElement.value;
          var eventArgs = { text: value_1, item: {} };
          if (!this.initial) {
            this.trigger("customValueSpecifier", eventArgs, function(eventArgs2) {
              _this.updateCustomValueCallback(value_1, eventArgs2, previousValue_1, e);
            });
          } else {
            this.updateCustomValueCallback(value_1, eventArgs, previousValue_1);
          }
        } else {
          this.isSelectCustom = false;
          this.setProperties({ value });
          if (previousValue_1 !== this.value) {
            this.onChangeEvent(e);
          }
        }
      } else if (this.allowCustom) {
        this.isSelectCustom = true;
      }
    };
    ComboBox2.prototype.updateCustomValueCallback = function(value, eventArgs, previousValue, e) {
      var fields = this.fields;
      var item = eventArgs.item;
      var dataItem = {};
      if (item && getValue(fields.text, item) && getValue(fields.value, item)) {
        dataItem = item;
      } else {
        setValue(fields.text, value, dataItem);
        setValue(fields.value, value, dataItem);
      }
      this.itemData = dataItem;
      var changeData = {
        text: getValue(fields.text, this.itemData),
        value: getValue(fields.value, this.itemData),
        index: null
      };
      this.setProperties(changeData, true);
      this.setSelection(null, null);
      this.isSelectCustom = true;
      if (previousValue !== this.value) {
        this.onChangeEvent(e);
      }
    };
    ComboBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "combobox") {
        this.checkData(newProp);
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            if (this.readonly) {
              EventHandler.remove(this.inputElement, "input", this.onInput);
              EventHandler.remove(this.inputElement, "keyup", this.onFilterUp);
              EventHandler.remove(this.inputElement, "keydown", this.onFilterDown);
            } else {
              EventHandler.add(this.inputElement, "input", this.onInput, this);
              EventHandler.add(this.inputElement, "keyup", this.onFilterUp, this);
              EventHandler.add(this.inputElement, "keydown", this.onFilterDown, this);
            }
            this.setReadOnly();
            break;
          case "allowFiltering":
            this.setSearchBox();
            if (this.isFiltering() && this.getModuleName() === "combobox" && isNullOrUndefined(this.list)) {
              _super.prototype.renderList.call(this);
            }
            break;
          case "allowCustom":
            break;
          default: {
            var comboProps = this.getPropObject(prop, newProp, oldProp);
            _super.prototype.onPropertyChanged.call(this, comboProps.newProperty, comboProps.oldProperty);
            if (this.isFiltering() && prop === "dataSource" && isNullOrUndefined(this.list) && this.itemTemplate && this.getModuleName() === "combobox") {
              _super.prototype.renderList.call(this);
            }
            break;
          }
        }
      }
    };
    ComboBox2.prototype.render = function() {
      _super.prototype.render.call(this);
      this.setSearchBox();
      if (this.isFiltering() && this.getModuleName() === "combobox" && isNullOrUndefined(this.list)) {
        _super.prototype.renderList.call(this);
      }
      this.renderComplete();
    };
    ComboBox2.prototype.getModuleName = function() {
      return "combobox";
    };
    ComboBox2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    ComboBox2.prototype.filter = function(dataSource, query, fields) {
      _super.prototype.filter.call(this, dataSource, query, fields);
    };
    ComboBox2.prototype.showPopup = function(e) {
      _super.prototype.showPopup.call(this, e);
    };
    ComboBox2.prototype.hidePopup = function(e) {
      var inputValue = this.inputElement && this.inputElement.value === "" ? null : this.inputElement && this.inputElement.value;
      if (!isNullOrUndefined(this.listData)) {
        var isEscape = this.isEscapeKey;
        if (this.isEscapeKey) {
          Input.setValue(this.typedString, this.inputElement, this.floatLabelType, this.showClearButton);
          this.isEscapeKey = false;
        }
        if (this.autofill) {
          this.removeFillSelection();
        }
        var dataItem = this.isSelectCustom ? { text: "" } : this.getItemData();
        var selected = !isNullOrUndefined(this.list) ? this.list.querySelector("." + dropDownListClasses.selected) : null;
        if (this.inputElement && dataItem.text === this.inputElement.value && !isNullOrUndefined(selected)) {
          if (this.isSelected) {
            this.onChangeEvent(e);
            this.isSelectCustom = false;
          }
          _super.prototype.hidePopup.call(this, e);
          return;
        }
        if (this.getModuleName() === "combobox" && this.inputElement.value.trim() !== "") {
          var dataSource = this.sortedData;
          var type = this.typeOfData(dataSource).typeof;
          var searchItem = Search(this.inputElement.value, this.liCollections, "Equal", true, dataSource, this.fields, type);
          this.selectedLI = searchItem.item;
          if (isNullOrUndefined(searchItem.index)) {
            searchItem.index = Search(this.inputElement.value, this.liCollections, "StartsWith", true, dataSource, this.fields, type).index;
          }
          this.activeIndex = searchItem.index;
          if (!isNullOrUndefined(this.selectedLI)) {
            this.updateSelectedItem(this.selectedLI, null, true);
          } else if (isEscape) {
            this.isSelectCustom = true;
            this.removeSelection();
          }
        }
        if (!this.isEscapeKey && this.isTyped && !this.isInteracted) {
          this.customValue(e);
        }
      }
      if (isNullOrUndefined(this.listData) && this.allowCustom && !isNullOrUndefined(inputValue) && inputValue !== this.value) {
        this.customValue();
      }
      _super.prototype.hidePopup.call(this, e);
    };
    ComboBox2.prototype.focusIn = function() {
      if (!this.enabled) {
        return;
      }
      if (Browser.isDevice && !this.isFiltering()) {
        this.preventFocus = true;
      }
      _super.prototype.focusIn.call(this);
    };
    ComboBox2.prototype.clear = function() {
      this.value = null;
    };
    ComboBox2.prototype.focusOut = function(e) {
      _super.prototype.focusOut.call(this, e);
    };
    ComboBox2.prototype.getItems = function() {
      return _super.prototype.getItems.call(this);
    };
    ComboBox2.prototype.getDataByValue = function(value) {
      return _super.prototype.getDataByValue.call(this, value);
    };
    ComboBox2.prototype.renderHightSearch = function() {
    };
    __decorate33([
      Property(false)
    ], ComboBox2.prototype, "autofill", void 0);
    __decorate33([
      Property(true)
    ], ComboBox2.prototype, "allowCustom", void 0);
    __decorate33([
      Property({})
    ], ComboBox2.prototype, "htmlAttributes", void 0);
    __decorate33([
      Property(false)
    ], ComboBox2.prototype, "allowFiltering", void 0);
    __decorate33([
      Property(null)
    ], ComboBox2.prototype, "query", void 0);
    __decorate33([
      Property(null)
    ], ComboBox2.prototype, "index", void 0);
    __decorate33([
      Property(true)
    ], ComboBox2.prototype, "showClearButton", void 0);
    __decorate33([
      Property(false)
    ], ComboBox2.prototype, "enableRtl", void 0);
    __decorate33([
      Event()
    ], ComboBox2.prototype, "customValueSpecifier", void 0);
    __decorate33([
      Event()
    ], ComboBox2.prototype, "filtering", void 0);
    __decorate33([
      Property(null)
    ], ComboBox2.prototype, "valueTemplate", void 0);
    __decorate33([
      Property("Never")
    ], ComboBox2.prototype, "floatLabelType", void 0);
    __decorate33([
      Property(null)
    ], ComboBox2.prototype, "filterBarPlaceholder", void 0);
    __decorate33([
      Property(null)
    ], ComboBox2.prototype, "cssClass", void 0);
    __decorate33([
      Property(null)
    ], ComboBox2.prototype, "headerTemplate", void 0);
    __decorate33([
      Property(null)
    ], ComboBox2.prototype, "footerTemplate", void 0);
    __decorate33([
      Property(null)
    ], ComboBox2.prototype, "placeholder", void 0);
    __decorate33([
      Property("100%")
    ], ComboBox2.prototype, "width", void 0);
    __decorate33([
      Property("300px")
    ], ComboBox2.prototype, "popupHeight", void 0);
    __decorate33([
      Property("100%")
    ], ComboBox2.prototype, "popupWidth", void 0);
    __decorate33([
      Property(false)
    ], ComboBox2.prototype, "readonly", void 0);
    __decorate33([
      Property(null)
    ], ComboBox2.prototype, "text", void 0);
    __decorate33([
      Property(null)
    ], ComboBox2.prototype, "value", void 0);
    ComboBox2 = __decorate33([
      NotifyPropertyChanges
    ], ComboBox2);
    return ComboBox2;
  }(DropDownList)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/auto-complete/auto-complete.js
var __extends37 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate34 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
dropDownListClasses.root = "e-autocomplete";
dropDownListClasses.icon = "e-input-group-icon e-ddl-icon e-search-icon";
var AutoComplete = (
  /** @class */
  function(_super) {
    __extends37(AutoComplete2, _super);
    function AutoComplete2(options, element2) {
      var _this_1 = _super.call(this, options, element2) || this;
      _this_1.isFiltered = false;
      _this_1.searchList = false;
      return _this_1;
    }
    AutoComplete2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
    };
    AutoComplete2.prototype.getLocaleName = function() {
      return "auto-complete";
    };
    AutoComplete2.prototype.getNgDirective = function() {
      return "EJS-AUTOCOMPLETE";
    };
    AutoComplete2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      var filterType = this.queryString === "" && !isNullOrUndefined(this.value) ? "equal" : this.filterType;
      var queryString2 = this.queryString === "" && !isNullOrUndefined(this.value) ? this.value : this.queryString;
      if (this.isFiltered) {
        return filterQuery;
      }
      if (this.queryString !== null && this.queryString !== "") {
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        } else {
          var mapping = !isNullOrUndefined(this.fields.value) ? this.fields.value : "";
          filterQuery.where(mapping, filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        }
      }
      if (!isNullOrUndefined(this.suggestionCount)) {
        if (this.suggestionCount !== 20) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onTake") {
              filterQuery.queries.splice(queryElements, 1);
            }
          }
        }
        filterQuery.take(this.suggestionCount);
      }
      return filterQuery;
    };
    AutoComplete2.prototype.searchLists = function(e) {
      var _this_1 = this;
      this.isTyped = true;
      this.isDataFetched = this.isSelectCustom = false;
      if (isNullOrUndefined(this.list)) {
        _super.prototype.renderList.call(this, e, true);
      }
      this.queryString = this.filterInput.value;
      if (e.type !== "mousedown" && (e.keyCode === 40 || e.keyCode === 38)) {
        this.queryString = this.queryString === "" ? null : this.queryString;
        this.beforePopupOpen = true;
        this.resetList(this.dataSource, this.fields, null, e);
        return;
      }
      this.isSelected = false;
      this.activeIndex = null;
      var eventArgs = {
        preventDefaultAction: false,
        text: this.filterInput.value,
        updateData: function(dataSource, query, fields) {
          if (eventArgs.cancel) {
            return;
          }
          _this_1.isFiltered = true;
          _this_1.filterAction(dataSource, query, fields);
        },
        cancel: false
      };
      this.trigger("filtering", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && !_this_1.isFiltered && !eventArgs2.preventDefaultAction) {
          _this_1.searchList = true;
          _this_1.filterAction(_this_1.dataSource, null, _this_1.fields, e);
        }
      });
    };
    AutoComplete2.prototype.filter = function(dataSource, query, fields) {
      this.isFiltered = true;
      this.filterAction(dataSource, query, fields);
    };
    AutoComplete2.prototype.filterAction = function(dataSource, query, fields, e) {
      this.beforePopupOpen = true;
      if (this.queryString !== "" && this.queryString.length >= this.minLength) {
        this.resetList(dataSource, fields, query, e);
      } else {
        this.hidePopup(e);
        this.beforePopupOpen = false;
      }
      this.renderReactTemplates();
    };
    AutoComplete2.prototype.clearAll = function(e, property) {
      if (isNullOrUndefined(property) || !isNullOrUndefined(property) && isNullOrUndefined(property.dataSource)) {
        _super.prototype.clearAll.call(this, e);
      }
      if (this.beforePopupOpen) {
        this.hidePopup();
      }
    };
    AutoComplete2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      this.fixedHeaderElement = null;
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      var item = this.list.querySelector("." + dropDownListClasses.li);
      if (!isNullOrUndefined(item)) {
        removeClass([item], dropDownListClasses.focus);
      }
      this.postBackAction();
    };
    AutoComplete2.prototype.postBackAction = function() {
      if (this.autofill && !isNullOrUndefined(this.liCollections[0]) && this.searchList) {
        var items = [this.liCollections[0]];
        var dataSource = this.listData;
        var type = this.typeOfData(dataSource).typeof;
        var searchItem = Search(this.inputElement.value, items, "StartsWith", this.ignoreCase, dataSource, this.fields, type);
        this.searchList = false;
        if (!isNullOrUndefined(searchItem.item)) {
          _super.prototype.setAutoFill.call(this, this.liCollections[0], true);
        }
      }
    };
    AutoComplete2.prototype.setSelection = function(li, e) {
      if (!this.isValidLI(li)) {
        this.selectedLI = li;
        return;
      }
      if (!isNullOrUndefined(e) && e.type === "keydown" && e.action !== "enter" && e.action !== "tab" && this.isValidLI(li)) {
        var value = this.getFormattedValue(li.getAttribute("data-value"));
        this.activeIndex = this.getIndexByValue(value);
        this.setHoverList(li);
        this.selectedLI = li;
        this.setScrollPosition(e);
        if (this.autofill && this.isPopupOpen) {
          this.preventAutoFill = false;
          var isKeyNavigate = e && e.action === "down" || e.action === "up" || e.action === "home" || e.action === "end" || e.action === "pageUp" || e.action === "pageDown";
          _super.prototype.setAutoFill.call(this, li, isKeyNavigate);
        }
      } else {
        _super.prototype.setSelection.call(this, li, e);
      }
    };
    AutoComplete2.prototype.listOption = function(dataSource, fieldsSettings) {
      var _this_1 = this;
      var fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);
      if (isNullOrUndefined(fields.itemCreated)) {
        fields.itemCreated = function(e) {
          if (_this_1.highlight) {
            if (_this_1.element.tagName === _this_1.getNgDirective() && _this_1.itemTemplate) {
              setTimeout(function() {
                highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
              }, 0);
            } else {
              highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
            }
          }
        };
      } else {
        var itemCreated_1 = fields.itemCreated;
        fields.itemCreated = function(e) {
          if (_this_1.highlight) {
            highlightSearch(e.item, _this_1.queryString, _this_1.ignoreCase, _this_1.filterType);
          }
          itemCreated_1.apply(_this_1, [e]);
        };
      }
      return fields;
    };
    AutoComplete2.prototype.isFiltering = function() {
      return true;
    };
    AutoComplete2.prototype.renderPopup = function(e) {
      this.list.scrollTop = 0;
      _super.prototype.renderPopup.call(this, e);
    };
    AutoComplete2.prototype.isEditTextBox = function() {
      return this.inputElement.value.trim() !== "";
    };
    AutoComplete2.prototype.isPopupButton = function() {
      return this.showPopupButton;
    };
    AutoComplete2.prototype.isSelectFocusItem = function(element2) {
      return false;
    };
    AutoComplete2.prototype.setInputValue = function(newProp, oldProp) {
      var oldValue = oldProp && oldProp.text ? oldProp.text : oldProp ? oldProp.value : oldProp;
      var value = newProp && newProp.text ? newProp.text : newProp && newProp.value ? newProp.value : this.value;
      if (value && this.typedString === "" && !this.allowCustom && !(this.dataSource instanceof DataManager)) {
        var checkFields_1_1 = this.typeOfData(this.dataSource).typeof === "string" ? "" : this.fields.value;
        var listLength_1 = this.getItems().length;
        var query = new Query();
        var _this_2 = this;
        new DataManager(this.dataSource).executeQuery(query.where(new Predicate(checkFields_1_1, "equal", value))).then(function(e) {
          if (e.result.length > 0) {
            _this_2.value = checkFields_1_1 !== "" ? e.result[0][_this_2.fields.value].toString() : e.result[0].toString();
            _this_2.addItem(e.result, listLength_1);
            _this_2.updateValues();
          } else {
            newProp && newProp.text ? _this_2.setOldText(oldValue) : newProp && newProp.value ? _this_2.setOldValue(oldValue) : _this_2.updateValues();
          }
        });
      } else if (newProp) {
        newProp.text ? this.setOldText(oldValue) : this.setOldValue(oldValue);
      }
    };
    AutoComplete2.prototype.showPopup = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.beforePopupOpen) {
        this.refreshPopup();
        return;
      }
      this.beforePopupOpen = true;
      this.preventAutoFill = true;
      if (isNullOrUndefined(this.list)) {
        this.renderList(e);
      } else {
        this.resetList(this.dataSource, this.fields, null, e);
      }
    };
    AutoComplete2.prototype.hidePopup = function(e) {
      _super.prototype.hidePopup.call(this, e);
      this.activeIndex = null;
    };
    AutoComplete2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (this.getModuleName() === "autocomplete") {
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "showPopupButton":
            if (this.showPopupButton) {
              var button = Input.appendSpan(dropDownListClasses.icon, this.inputWrapper.container, this.createElement);
              this.inputWrapper.buttons[0] = button;
              Input.calculateWidth(this.inputElement, this.inputWrapper.container);
              if (!isNullOrUndefined(this.inputWrapper.buttons[0]) && !isNullOrUndefined(this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0]) && this.floatLabelType !== "Never") {
                this.inputWrapper.container.getElementsByClassName("e-float-text-overflow")[0].classList.add("e-icon");
              }
              if (this.inputWrapper && this.inputWrapper.buttons && this.inputWrapper.buttons[0]) {
                EventHandler.add(this.inputWrapper.buttons[0], "click", this.dropDownClick, this);
              }
            } else {
              detach(this.inputWrapper.buttons[0]);
              this.inputWrapper.buttons[0] = null;
            }
            break;
          default: {
            var atcProps = this.getPropObject(prop, newProp, oldProp);
            _super.prototype.onPropertyChanged.call(this, atcProps.newProperty, atcProps.oldProperty);
            break;
          }
        }
      }
    };
    AutoComplete2.prototype.renderHightSearch = function() {
      if (this.highlight) {
        for (var i = 0; i < this.liCollections.length; i++) {
          var isHighlight = this.ulElement.querySelector(".e-active");
          if (!isHighlight) {
            revertHighlightSearch(this.liCollections[i]);
            highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);
          }
        }
      }
    };
    AutoComplete2.prototype.getModuleName = function() {
      return "autocomplete";
    };
    AutoComplete2.prototype.render = function() {
      _super.prototype.render.call(this);
    };
    __decorate34([
      Complex({ value: null, iconCss: null, groupBy: null }, FieldSettings)
    ], AutoComplete2.prototype, "fields", void 0);
    __decorate34([
      Property(true)
    ], AutoComplete2.prototype, "ignoreCase", void 0);
    __decorate34([
      Property(false)
    ], AutoComplete2.prototype, "showPopupButton", void 0);
    __decorate34([
      Property(false)
    ], AutoComplete2.prototype, "highlight", void 0);
    __decorate34([
      Property(20)
    ], AutoComplete2.prototype, "suggestionCount", void 0);
    __decorate34([
      Property({})
    ], AutoComplete2.prototype, "htmlAttributes", void 0);
    __decorate34([
      Property(null)
    ], AutoComplete2.prototype, "query", void 0);
    __decorate34([
      Property(1)
    ], AutoComplete2.prototype, "minLength", void 0);
    __decorate34([
      Property("Contains")
    ], AutoComplete2.prototype, "filterType", void 0);
    __decorate34([
      Event()
    ], AutoComplete2.prototype, "filtering", void 0);
    __decorate34([
      Property(null)
    ], AutoComplete2.prototype, "index", void 0);
    __decorate34([
      Property("Never")
    ], AutoComplete2.prototype, "floatLabelType", void 0);
    __decorate34([
      Property(null)
    ], AutoComplete2.prototype, "valueTemplate", void 0);
    __decorate34([
      Property(null)
    ], AutoComplete2.prototype, "filterBarPlaceholder", void 0);
    __decorate34([
      Property(false)
    ], AutoComplete2.prototype, "allowFiltering", void 0);
    __decorate34([
      Property(null)
    ], AutoComplete2.prototype, "text", void 0);
    AutoComplete2 = __decorate34([
      NotifyPropertyChanges
    ], AutoComplete2);
    return AutoComplete2;
  }(ComboBox)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/multi-select/float-label.js
var FLOATLINE = "e-float-line";
var FLOATTEXT = "e-float-text";
var LABELTOP = "e-label-top";
var LABELBOTTOM = "e-label-bottom";
function createFloatLabel(overAllWrapper, searchWrapper, element2, inputElement, value, floatLabelType, placeholder) {
  var floatLinelement = createElement("span", { className: FLOATLINE });
  var floatLabelElement = createElement("label", { className: FLOATTEXT });
  var id = element2.getAttribute("id") ? element2.getAttribute("id") : getUniqueID("ej2_multiselect");
  element2.id = id;
  if (!isNullOrUndefined(element2.id) && element2.id !== "") {
    floatLabelElement.id = "label_" + element2.id.replace(/ /g, "_");
    attributes(inputElement, { "aria-labelledby": floatLabelElement.id });
  }
  if (!isNullOrUndefined(inputElement.placeholder) && inputElement.placeholder !== "") {
    floatLabelElement.innerText = encodePlaceholder(inputElement.placeholder);
    inputElement.removeAttribute("placeholder");
  }
  floatLabelElement.innerText = encodePlaceholder(placeholder);
  searchWrapper.appendChild(floatLinelement);
  searchWrapper.appendChild(floatLabelElement);
  overAllWrapper.classList.add("e-float-input");
  updateFloatLabelState(value, floatLabelElement);
  if (floatLabelType === "Always") {
    if (floatLabelElement.classList.contains(LABELBOTTOM)) {
      removeClass([floatLabelElement], LABELBOTTOM);
    }
    addClass([floatLabelElement], LABELTOP);
  }
}
function updateFloatLabelState(value, label) {
  if (value && value.length > 0) {
    addClass([label], LABELTOP);
    removeClass([label], LABELBOTTOM);
  } else {
    removeClass([label], LABELTOP);
    addClass([label], LABELBOTTOM);
  }
}
function removeFloating(overAllWrapper, componentWrapper, searchWrapper, inputElement, value, floatLabelType, placeholder) {
  var placeholderElement = componentWrapper.querySelector("." + FLOATTEXT);
  var floatLine = componentWrapper.querySelector("." + FLOATLINE);
  var placeholderText;
  if (!isNullOrUndefined(placeholderElement)) {
    placeholderText = placeholderElement.innerText;
    detach(searchWrapper.querySelector("." + FLOATTEXT));
    setPlaceHolder(value, inputElement, placeholderText);
    if (!isNullOrUndefined(floatLine)) {
      detach(searchWrapper.querySelector("." + FLOATLINE));
    }
  } else {
    placeholderText = placeholder !== null ? placeholder : "";
    setPlaceHolder(value, inputElement, placeholderText);
  }
  overAllWrapper.classList.remove("e-float-input");
}
function setPlaceHolder(value, inputElement, placeholder) {
  if (value && value.length) {
    inputElement.placeholder = "";
  } else {
    inputElement.placeholder = placeholder;
  }
}
function floatLabelFocus(overAllWrapper, componentWrapper) {
  overAllWrapper.classList.add("e-input-focus");
  var label = componentWrapper.querySelector("." + FLOATTEXT);
  if (!isNullOrUndefined(label)) {
    addClass([label], LABELTOP);
    if (label.classList.contains(LABELBOTTOM)) {
      removeClass([label], LABELBOTTOM);
    }
  }
}
function floatLabelBlur(overAllWrapper, componentWrapper, value, floatLabelType, placeholder) {
  overAllWrapper.classList.remove("e-input-focus");
  var label = componentWrapper.querySelector("." + FLOATTEXT);
  if (value && value.length <= 0 && floatLabelType === "Auto" && !isNullOrUndefined(label)) {
    if (label.classList.contains(LABELTOP)) {
      removeClass([label], LABELTOP);
    }
    addClass([label], LABELBOTTOM);
  }
}
function encodePlaceholder(placeholder) {
  var result = "";
  if (!isNullOrUndefined(placeholder) && placeholder !== "") {
    var spanElement = document.createElement("span");
    spanElement.innerHTML = '<input  placeholder="' + placeholder + '"/>';
    var hiddenInput = spanElement.children[0];
    result = hiddenInput.placeholder;
  }
  return result;
}

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/multi-select/multi-select.js
var __extends38 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate35 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FOCUS2 = "e-input-focus";
var DISABLED7 = "e-disabled";
var OVER_ALL_WRAPPER = "e-multiselect e-input-group e-control-wrapper";
var ELEMENT_WRAPPER = "e-multi-select-wrapper";
var ELEMENT_MOBILE_WRAPPER = "e-mob-wrapper";
var HIDE_LIST = "e-hide-listitem";
var DELIMITER_VIEW = "e-delim-view";
var CHIP_WRAPPER2 = "e-chips-collection";
var CHIP2 = "e-chips";
var CHIP_CONTENT2 = "e-chipcontent";
var CHIP_CLOSE2 = "e-chips-close";
var CHIP_SELECTED = "e-chip-selected";
var SEARCHBOX_WRAPPER = "e-searcher";
var DELIMITER_VIEW_WRAPPER = "e-delimiter";
var ZERO_SIZE = "e-zero-size";
var REMAIN_WRAPPER2 = "e-remain";
var CLOSEICON_CLASS2 = "e-chips-close e-close-hooker";
var DELIMITER_WRAPPER = "e-delim-values";
var POPUP_WRAPPER = "e-ddl e-popup e-multi-select-list-wrapper";
var INPUT_ELEMENT = "e-dropdownbase";
var RTL_CLASS2 = "e-rtl";
var CLOSE_ICON_HIDE = "e-close-icon-hide";
var MOBILE_CHIP = "e-mob-chip";
var FOOTER2 = "e-ddl-footer";
var HEADER3 = "e-ddl-header";
var DISABLE_ICON = "e-ddl-disable-icon";
var SPINNER_CLASS2 = "e-ms-spinner-icon";
var HIDDEN_ELEMENT = "e-multi-hidden";
var destroy2 = "destroy";
var dropdownIcon = "e-input-group-icon e-ddl-icon";
var iconAnimation = "e-icon-anim";
var TOTAL_COUNT_WRAPPER2 = "e-delim-total";
var BOX_ELEMENT = "e-multiselect-box";
var FILTERPARENT = "e-filter-parent";
var CUSTOM_WIDTH = "e-search-custom-width";
var FILTERINPUT = "e-input-filter";
var MultiSelect = (
  /** @class */
  function(_super) {
    __extends38(MultiSelect2, _super);
    function MultiSelect2(option, element2) {
      var _this = _super.call(this, option, element2) || this;
      _this.clearIconWidth = 0;
      _this.previousFilterText = "";
      _this.isValidKey = false;
      _this.selectAllEventData = [];
      _this.selectAllEventEle = [];
      _this.resetMainList = null;
      _this.resetFilteredData = false;
      _this.scrollFocusStatus = false;
      _this.keyDownStatus = false;
      return _this;
    }
    MultiSelect2.prototype.enableRTL = function(state) {
      if (state) {
        this.overAllWrapper.classList.add(RTL_CLASS2);
      } else {
        this.overAllWrapper.classList.remove(RTL_CLASS2);
      }
      if (this.popupObj) {
        this.popupObj.enableRtl = state;
        this.popupObj.dataBind();
      }
    };
    MultiSelect2.prototype.requiredModules = function() {
      var modules = [];
      if (this.mode === "CheckBox") {
        this.isGroupChecking = this.enableGroupCheckBox;
        if (this.enableGroupCheckBox) {
          var prevOnChange = this.isProtectedOnChange;
          this.isProtectedOnChange = true;
          this.enableSelectionOrder = false;
          this.isProtectedOnChange = prevOnChange;
        }
        this.allowCustomValue = false;
        this.hideSelectedItem = false;
        this.closePopupOnSelect = false;
        modules.push({
          member: "CheckBoxSelection",
          args: [this]
        });
      }
      return modules;
    };
    MultiSelect2.prototype.updateHTMLAttribute = function() {
      if (Object.keys(this.htmlAttributes).length) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var htmlAttr = _a[_i];
          switch (htmlAttr) {
            case "class": {
              var updatedClassValue = this.htmlAttributes["" + htmlAttr].replace(/\s+/g, " ").trim();
              if (updatedClassValue !== "") {
                addClass([this.overAllWrapper], updatedClassValue.split(" "));
                addClass([this.popupWrapper], updatedClassValue.split(" "));
              }
              break;
            }
            case "disabled":
              this.enable(false);
              break;
            case "placeholder":
              if (!this.placeholder) {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
                this.setProperties({ placeholder: this.inputElement.placeholder }, true);
                this.refreshPlaceHolder();
              }
              break;
            default: {
              var defaultAttr = ["id"];
              var validateAttr = ["name", "required", "aria-required", "form"];
              var containerAttr2 = ["title", "role", "style", "class"];
              if (defaultAttr.indexOf(htmlAttr) > -1) {
                this.element.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (htmlAttr.indexOf("data") === 0 || validateAttr.indexOf(htmlAttr) > -1) {
                this.hiddenElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (containerAttr2.indexOf(htmlAttr) > -1) {
                this.overAllWrapper.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              } else if (htmlAttr !== "size" && !isNullOrUndefined(this.inputElement)) {
                this.inputElement.setAttribute(htmlAttr, this.htmlAttributes["" + htmlAttr]);
              }
              break;
            }
          }
        }
      }
    };
    MultiSelect2.prototype.updateReadonly = function(state) {
      if (!isNullOrUndefined(this.inputElement)) {
        if (state || this.mode === "CheckBox") {
          this.inputElement.setAttribute("readonly", "true");
        } else {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    MultiSelect2.prototype.updateClearButton = function(state) {
      if (state) {
        if (this.overAllClear.parentNode) {
          this.overAllClear.style.display = "";
        } else {
          this.componentWrapper.appendChild(this.overAllClear);
        }
        this.componentWrapper.classList.remove(CLOSE_ICON_HIDE);
      } else {
        this.overAllClear.style.display = "none";
        this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
      }
    };
    MultiSelect2.prototype.updateCssClass = function() {
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        var updatedCssClassValues = this.cssClass;
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
        if (updatedCssClassValues !== "") {
          addClass([this.overAllWrapper], updatedCssClassValues.split(" "));
          addClass([this.popupWrapper], updatedCssClassValues.split(" "));
        }
      }
    };
    MultiSelect2.prototype.updateOldPropCssClass = function(oldClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
        if (oldClass !== "") {
          removeClass([this.overAllWrapper], oldClass.split(" "));
          removeClass([this.popupWrapper], oldClass.split(" "));
        }
      }
    };
    MultiSelect2.prototype.onPopupShown = function(e) {
      var _this = this;
      if (Browser.isDevice && (this.mode === "CheckBox" && this.allowFiltering)) {
        var proxy_1 = this;
        window.onpopstate = function() {
          proxy_1.hidePopup();
          proxy_1.inputElement.focus();
        };
        history.pushState({}, "");
      }
      var animModel = { name: "FadeIn", duration: 100 };
      var eventArgs = { popup: this.popupObj, event: e, cancel: false, animation: animModel };
      this.trigger("open", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          _this.focusAtFirstListItem();
          if (_this.popupObj) {
            document.body.appendChild(_this.popupObj.element);
          }
          if (_this.mode === "CheckBox" && _this.enableGroupCheckBox && !isNullOrUndefined(_this.fields.groupBy)) {
            _this.updateListItems(_this.list.querySelectorAll("li.e-list-item"), _this.mainList.querySelectorAll("li.e-list-item"));
          }
          if (_this.mode === "CheckBox" || _this.showDropDownIcon) {
            addClass([_this.overAllWrapper], [iconAnimation]);
          }
          _this.refreshPopup();
          _this.renderReactTemplates();
          if (_this.popupObj) {
            _this.popupObj.show(eventArgs2.animation, _this.zIndex === 1e3 ? _this.element : null);
          }
          attributes(_this.inputElement, { "aria-expanded": "true", "aria-owns": _this.inputElement.id + "_options" });
          _this.updateAriaActiveDescendant();
          if (_this.isFirstClick) {
            _this.loadTemplate();
          }
        }
      });
    };
    MultiSelect2.prototype.updateListItems = function(listItems, mainListItems) {
      for (var i = 0; i < listItems.length; i++) {
        this.findGroupStart(listItems[i]);
        this.findGroupStart(mainListItems[i]);
      }
      this.deselectHeader();
    };
    MultiSelect2.prototype.loadTemplate = function() {
      this.refreshListItems(null);
      if (this.mode === "CheckBox") {
        this.removeFocus();
      }
      this.notify("reOrder", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", e: this });
    };
    MultiSelect2.prototype.setScrollPosition = function() {
      if ((!this.hideSelectedItem && this.mode !== "CheckBox" || this.mode === "CheckBox" && !this.enableSelectionOrder) && (!isNullOrUndefined(this.value) && this.value.length > 0)) {
        var valueEle = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", this.value[this.value.length - 1]);
        if (!isNullOrUndefined(valueEle)) {
          this.scrollBottom(valueEle);
        }
      }
    };
    MultiSelect2.prototype.focusAtFirstListItem = function() {
      if (this.ulElement && this.ulElement.querySelector("li." + dropDownBaseClasses.li)) {
        var element2 = void 0;
        if (this.mode === "CheckBox") {
          this.removeFocus();
          return;
        } else {
          element2 = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
        }
        if (element2 !== null) {
          this.removeFocus();
          this.addListFocus(element2);
        }
      }
    };
    MultiSelect2.prototype.focusAtLastListItem = function(data) {
      var activeElement;
      if (data) {
        activeElement = Search(data, this.liCollections, "StartsWith", this.ignoreCase);
      } else {
        if (this.value && this.value.length) {
          Search(this.value[this.value.length - 1], this.liCollections, "StartsWith", this.ignoreCase);
        } else {
          activeElement = null;
        }
      }
      if (activeElement && activeElement.item !== null) {
        this.addListFocus(activeElement.item);
        this.scrollBottom(activeElement.item, activeElement.index);
      }
    };
    MultiSelect2.prototype.getAriaAttributes = function() {
      var ariaAttributes = {
        "aria-disabled": "false",
        "role": "combobox",
        "aria-expanded": "false"
      };
      return ariaAttributes;
    };
    MultiSelect2.prototype.updateListARIA = function() {
      if (!isNullOrUndefined(this.ulElement)) {
        attributes(this.ulElement, { "id": this.element.id + "_options", "role": "listbox", "aria-hidden": "false" });
      }
      var disableStatus = !isNullOrUndefined(this.inputElement) && this.inputElement.disabled ? true : false;
      if (!this.isPopupOpen() && !isNullOrUndefined(this.inputElement)) {
        attributes(this.inputElement, this.getAriaAttributes());
      }
      if (disableStatus) {
        attributes(this.inputElement, { "aria-disabled": "true" });
      }
      this.ensureAriaDisabled(disableStatus ? "true" : "false");
    };
    MultiSelect2.prototype.ensureAriaDisabled = function(status) {
      if (this.htmlAttributes && this.htmlAttributes["aria-disabled"]) {
        var attr = this.htmlAttributes;
        extend(attr, { "aria-disabled": status }, attr);
        this.setProperties({ htmlAttributes: attr }, true);
      }
    };
    MultiSelect2.prototype.removelastSelection = function(e) {
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2);
      var value = elements[elements.length - 1].getAttribute("data-value");
      if (!isNullOrUndefined(this.value)) {
        this.tempValues = this.value.slice();
      }
      var customValue = this.getFormattedValue(value);
      if (this.allowCustomValue && (value !== "false" && customValue === false || !isNullOrUndefined(customValue) && customValue.toString() === "NaN")) {
        customValue = value;
      }
      this.removeValue(customValue, e);
      this.removeChipSelection();
      this.updateDelimeter(this.delimiterChar, e);
      this.makeTextBoxEmpty();
      if (this.mainList && this.listData) {
        this.refreshSelection();
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.onActionFailure = function(e) {
      _super.prototype.onActionFailure.call(this, e);
      this.renderPopup();
      this.onPopupShown();
    };
    MultiSelect2.prototype.targetElement = function() {
      this.targetInputElement = this.inputElement;
      if (this.mode === "CheckBox" && this.allowFiltering) {
        this.notify("targetElement", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
      }
      return this.targetInputElement.value;
    };
    MultiSelect2.prototype.getForQuery = function(valuecheck) {
      var predicate;
      var field = isNullOrUndefined(this.fields.value) ? this.fields.text : this.fields.value;
      for (var i = 0; i < valuecheck.length; i++) {
        if (i === 0) {
          predicate = new Predicate(field, "equal", valuecheck[i]);
        } else {
          predicate = predicate.or(field, "equal", valuecheck[i]);
        }
      }
      if (this.dataSource instanceof DataManager && this.dataSource.adaptor instanceof JsonAdaptor) {
        return new Query().where(predicate);
      } else {
        return this.getQuery(this.query).clone().where(predicate);
      }
    };
    MultiSelect2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      this.updateSelectElementData(this.allowFiltering);
      var proxy2 = this;
      if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {
        for (var i = 0; i < this.value.length; i++) {
          var checkEle = this.findListElement(this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement, "li", "data-value", proxy2.value[i]);
          if (!checkEle && !(this.dataSource instanceof DataManager)) {
            this.value.splice(i, 1);
            i -= 1;
          }
        }
      }
      var valuecheck = [];
      if (!isNullOrUndefined(this.value)) {
        valuecheck = this.presentItemValue(this.ulElement);
      }
      if (valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value) && this.listData != null) {
        this.addNonPresentItems(valuecheck, this.ulElement, this.listData);
      } else {
        this.updateActionList(ulElement, list, e);
      }
      if (this.dataSource instanceof DataManager && this.mode === "CheckBox" && this.allowFiltering) {
        this.removeFocus();
      }
    };
    MultiSelect2.prototype.updateActionList = function(ulElement, list, e, isUpdated) {
      if (this.mode === "CheckBox" && this.showSelectAll) {
        this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
      }
      if (!this.mainList && !this.mainData) {
        this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
        this.mainData = list;
        this.mainListCollection = this.liCollections;
      } else if (isNullOrUndefined(this.mainData) || this.mainData.length === 0) {
        this.mainData = list;
      }
      if ((this.remoteCustomValue || list.length <= 0) && this.allowCustomValue && this.inputFocus && this.allowFiltering && this.inputElement.value && this.inputElement.value !== "") {
        this.checkForCustomValue(this.tempQuery, this.fields);
        return;
      }
      if (this.value && this.value.length && (this.mode !== "CheckBox" && !isNullOrUndefined(this.inputElement) && this.inputElement.value.trim() !== "" || this.mode === "CheckBox" || (this.keyCode === 8 || this.keyCode === 46) && this.allowFiltering && this.allowCustomValue && this.dataSource instanceof DataManager && this.inputElement.value === "")) {
        this.refreshSelection();
      }
      this.updateListARIA();
      this.unwireListEvents();
      this.wireListEvents();
      if (!isNullOrUndefined(this.setInitialValue)) {
        this.setInitialValue();
      }
      if (!isNullOrUndefined(this.selectAllAction)) {
        this.selectAllAction();
      }
      if (this.setDynValue) {
        if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {
          this.initialTextUpdate();
        }
        this.initialValueUpdate();
        this.initialUpdate();
        this.refreshPlaceHolder();
        if (this.mode !== "CheckBox" && this.changeOnBlur) {
          this.updateValueState(null, this.value, null);
        }
      }
      this.renderPopup();
      if (this.beforePopupOpen) {
        this.beforePopupOpen = false;
        this.onPopupShown(e);
      }
    };
    MultiSelect2.prototype.refreshSelection = function() {
      var value;
      var element2;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (!isNullOrUndefined(this.value)) {
        for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
          value = this.value[index];
          element2 = this.findListElement(this.list, "li", "data-value", value);
          if (element2) {
            addClass([element2], className);
            if (this.hideSelectedItem && element2.previousSibling && element2.previousElementSibling.classList.contains(dropDownBaseClasses.group) && (!element2.nextElementSibling || element2.nextElementSibling.classList.contains(dropDownBaseClasses.group))) {
              addClass([element2.previousElementSibling], className);
            }
            if (this.hideSelectedItem && this.fields.groupBy && !element2.previousElementSibling.classList.contains(HIDE_LIST)) {
              this.hideGroupItem(value);
            }
            if (this.hideSelectedItem && element2.classList.contains(dropDownBaseClasses.focus)) {
              removeClass([element2], dropDownBaseClasses.focus);
              var listEle = element2.parentElement.querySelectorAll("." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
              if (listEle.length > 0) {
                addClass([listEle[0]], dropDownBaseClasses.focus);
                this.updateAriaActiveDescendant();
              } else {
                if (!(this.list && this.list.querySelectorAll("." + dropDownBaseClasses.li).length > 0)) {
                  this.l10nUpdate();
                  addClass([this.list], dropDownBaseClasses.noData);
                }
              }
            }
            element2.setAttribute("aria-selected", "true");
            if (this.mode === "CheckBox" && element2.classList.contains("e-active")) {
              var ariaValue = element2.getElementsByClassName("e-check").length;
              if (ariaValue === 0) {
                var args = {
                  module: "CheckBoxSelection",
                  enable: this.mode === "CheckBox",
                  li: element2,
                  e: null
                };
                this.notify("updatelist", args);
              }
            }
          }
        }
      }
      this.checkSelectAll();
      this.checkMaxSelection();
    };
    MultiSelect2.prototype.hideGroupItem = function(value) {
      var element2;
      var element1;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      element1 = element2 = this.findListElement(this.ulElement, "li", "data-value", value);
      var i = 0;
      var j = 0;
      var temp = true;
      var temp1 = true;
      do {
        if (element2 && element2.previousElementSibling && (!element2.previousElementSibling.classList.contains(HIDE_LIST) && element2.previousElementSibling.classList.contains(dropDownBaseClasses.li))) {
          temp = false;
        }
        if (!temp || !element2 || element2.previousElementSibling && element2.previousElementSibling.classList.contains(dropDownBaseClasses.group)) {
          i = 10;
        } else {
          element2 = element2.previousElementSibling;
        }
        if (element1 && element1.nextElementSibling && (!element1.nextElementSibling.classList.contains(HIDE_LIST) && element1.nextElementSibling.classList.contains(dropDownBaseClasses.li))) {
          temp1 = false;
        }
        if (!temp1 || !element1 || element1.nextElementSibling && element1.nextElementSibling.classList.contains(dropDownBaseClasses.group)) {
          j = 10;
        } else {
          element1 = element1.nextElementSibling;
        }
      } while (i < 10 || j < 10);
      if (temp && temp1 && !element2.previousElementSibling.classList.contains(HIDE_LIST)) {
        addClass([element2.previousElementSibling], className);
      } else if (temp && temp1 && element2.previousElementSibling.classList.contains(HIDE_LIST)) {
        removeClass([element2.previousElementSibling], className);
      }
    };
    MultiSelect2.prototype.getValidLi = function() {
      var liElement = this.ulElement.querySelector("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")");
      return !isNullOrUndefined(liElement) ? liElement : this.liCollections[0];
    };
    MultiSelect2.prototype.checkSelectAll = function() {
      var groupItemLength = this.list.querySelectorAll("li.e-list-group-item.e-active").length;
      var listItem = this.list.querySelectorAll("li.e-list-item");
      var searchCount = this.list.querySelectorAll("li." + dropDownBaseClasses.li).length;
      var searchActiveCount = this.list.querySelectorAll("li." + dropDownBaseClasses.selected).length;
      if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        searchActiveCount = searchActiveCount - groupItemLength;
      }
      if ((searchCount === searchActiveCount || searchActiveCount === this.maximumSelectionLength) && (this.mode === "CheckBox" && this.showSelectAll)) {
        this.notify("checkSelectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "check" });
      } else if (searchCount !== searchActiveCount && (this.mode === "CheckBox" && this.showSelectAll)) {
        this.notify("checkSelectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "uncheck" });
      }
      if (this.enableGroupCheckBox && this.fields.groupBy && !this.enableSelectionOrder) {
        for (var i = 0; i < listItem.length; i++) {
          this.findGroupStart(listItem[i]);
        }
        this.deselectHeader();
      }
    };
    MultiSelect2.prototype.openClick = function(e) {
      if (!this.openOnClick && this.mode !== "CheckBox") {
        if (this.targetElement() !== "") {
          this.showPopup();
        } else {
          this.hidePopup(e);
        }
      } else if (!this.openOnClick && this.mode === "CheckBox" && !this.isPopupOpen()) {
        this.showPopup();
      }
    };
    MultiSelect2.prototype.keyUp = function(e) {
      if (this.mode === "CheckBox" && !this.openOnClick) {
        var char = String.fromCharCode(e.keyCode);
        var isWordCharacter = char.match(/\w/);
        if (!isNullOrUndefined(isWordCharacter)) {
          this.isValidKey = true;
        }
      }
      this.isValidKey = this.isPopupOpen() && e.keyCode === 8 || this.isValidKey;
      this.isValidKey = e.ctrlKey && e.keyCode === 86 ? false : this.isValidKey;
      if (this.isValidKey) {
        this.isValidKey = false;
        this.expandTextbox();
        this.showOverAllClear();
        switch (e.keyCode) {
          default:
            this.search(e);
        }
      }
    };
    MultiSelect2.prototype.filter = function(dataSource, query, fields) {
      this.isFiltered = true;
      this.remoteFilterAction = true;
      this.dataUpdater(dataSource, query, fields);
    };
    MultiSelect2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      if (this.isFiltered) {
        return filterQuery;
      }
      if (this.filterAction) {
        if (this.targetElement() !== null) {
          var dataType = this.typeOfData(this.dataSource).typeof;
          if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
            filterQuery.where("", this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
          } else {
            var fields = this.fields;
            filterQuery.where(!isNullOrUndefined(fields.text) ? fields.text : "", this.filterType, this.targetElement(), this.ignoreCase, this.ignoreAccent);
          }
        }
        return filterQuery;
      } else {
        return query ? query : this.query ? this.query : new Query();
      }
    };
    MultiSelect2.prototype.dataUpdater = function(dataSource, query, fields) {
      this.isDataFetched = false;
      if (this.targetElement().trim() === "") {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        if (this.backCommand) {
          this.remoteCustomValue = false;
          if (this.allowCustomValue && list.querySelectorAll("li").length == 0 && this.mainData.length > 0) {
            this.mainData = [];
          }
          this.onActionComplete(list, this.mainData);
          if (this.value && this.value.length) {
            this.refreshSelection();
          }
          if (this.keyCode !== 8) {
            this.focusAtFirstListItem();
          }
          this.notify("reOrder", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", e: this });
        }
      } else {
        this.resetList(dataSource, fields, query);
        if (this.allowCustomValue) {
          if (!(dataSource instanceof DataManager)) {
            this.checkForCustomValue(query, fields);
          } else {
            this.remoteCustomValue = true;
            this.tempQuery = query;
          }
        }
      }
      this.refreshPopup();
      if (this.mode === "CheckBox") {
        this.removeFocus();
      }
    };
    MultiSelect2.prototype.checkForCustomValue = function(query, fields) {
      var dataChecks = !this.getValueByText(this.inputElement.value, this.ignoreCase);
      if (this.allowCustomValue && dataChecks) {
        var value = this.inputElement.value;
        var field = fields ? fields : this.fields;
        var customData = !isNullOrUndefined(this.mainData) && this.mainData.length > 0 ? this.mainData[0] : this.mainData;
        if (typeof customData !== "string" && typeof customData !== "number" && typeof customData !== "boolean") {
          var dataItem = {};
          setValue(field.text, value, dataItem);
          if (typeof getValue(this.fields.value ? this.fields.value : "value", customData) === "number") {
            setValue(field.value, Math.random(), dataItem);
          } else {
            setValue(field.value, value, dataItem);
          }
          var tempData = JSON.parse(JSON.stringify(this.listData));
          tempData.splice(0, 0, dataItem);
          this.resetList(tempData, field, query);
        } else {
          var tempData = JSON.parse(JSON.stringify(this.listData));
          tempData.splice(0, 0, this.inputElement.value);
          tempData[0] = typeof customData === "number" && !isNaN(parseFloat(tempData[0])) ? parseFloat(tempData[0]) : tempData[0];
          tempData[0] = typeof customData === "boolean" ? tempData[0] === "true" ? true : tempData[0] === "false" ? false : tempData[0] : tempData[0];
          this.resetList(tempData, field);
        }
      }
      if (this.value && this.value.length) {
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.getNgDirective = function() {
      return "EJS-MULTISELECT";
    };
    MultiSelect2.prototype.wrapperClick = function(e) {
      this.setDynValue = false;
      if (!this.enabled) {
        return;
      }
      if (e.target === this.overAllClear) {
        e.preventDefault();
        return;
      }
      if (!this.inputFocus) {
        this.inputElement.focus();
      }
      if (!this.readonly) {
        if (e.target && e.target.classList.toString().indexOf(CHIP_CLOSE2) !== -1) {
          if (this.isPopupOpen()) {
            this.refreshPopup();
          }
          return;
        }
        if (!this.isPopupOpen() && (this.openOnClick || this.showDropDownIcon && e.target && e.target.className === dropdownIcon)) {
          this.showPopup(e);
        } else {
          this.hidePopup(e);
          if (this.mode === "CheckBox") {
            this.showOverAllClear();
            this.inputFocus = true;
            if (!this.overAllWrapper.classList.contains(FOCUS2)) {
              this.overAllWrapper.classList.add(FOCUS2);
            }
          }
        }
      }
      if (!(this.targetElement() && this.targetElement() !== "")) {
        e.preventDefault();
      }
    };
    MultiSelect2.prototype.enable = function(state) {
      if (state) {
        this.overAllWrapper.classList.remove(DISABLED7);
        this.inputElement.removeAttribute("disabled");
        attributes(this.inputElement, { "aria-disabled": "false" });
        this.ensureAriaDisabled("false");
      } else {
        this.overAllWrapper.classList.add(DISABLED7);
        this.inputElement.setAttribute("disabled", "true");
        attributes(this.inputElement, { "aria-disabled": "true" });
        this.ensureAriaDisabled("true");
      }
      if (this.enabled !== state) {
        this.enabled = state;
      }
      this.hidePopup();
    };
    MultiSelect2.prototype.onBlurHandler = function(eve, isDocClickFromCheck) {
      var target;
      if (!isNullOrUndefined(eve)) {
        target = eve.relatedTarget;
      }
      if (this.popupObj && document.body.contains(this.popupObj.element) && this.popupObj.element.contains(target)) {
        if (this.mode !== "CheckBox") {
          this.inputElement.focus();
        } else if (this.floatLabelType === "Auto" && (this.overAllWrapper.classList.contains("e-outline") || this.overAllWrapper.classList.contains("e-filled"))) {
          addClass([this.overAllWrapper], "e-valid-input");
        }
        return;
      }
      if (this.floatLabelType === "Auto" && this.overAllWrapper.classList.contains("e-outline") && this.mode === "CheckBox" && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        removeClass([this.overAllWrapper], "e-valid-input");
      }
      if (this.mode === "CheckBox" && Browser.isIE && !isNullOrUndefined(eve) && !isDocClickFromCheck) {
        this.inputFocus = false;
        this.overAllWrapper.classList.remove(FOCUS2);
        return;
      }
      if (this.scrollFocusStatus) {
        if (!isNullOrUndefined(eve)) {
          eve.preventDefault();
        }
        this.inputElement.focus();
        this.scrollFocusStatus = false;
        return;
      }
      this.inputFocus = false;
      this.overAllWrapper.classList.remove(FOCUS2);
      if (this.addTagOnBlur) {
        var dataChecks = this.getValueByText(this.inputElement.value, this.ignoreCase, this.ignoreAccent);
        var listLiElement = this.findListElement(this.list, "li", "data-value", dataChecks);
        var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
        var allowChipAddition = listLiElement && !listLiElement.classList.contains(className) ? true : false;
        if (allowChipAddition) {
          this.updateListSelection(listLiElement, eve);
          if (this.mode === "Delimiter") {
            this.updateDelimeter(this.delimiterChar);
          }
        }
      }
      this.updateDataList();
      if (this.resetMainList) {
        this.mainList = this.resetMainList;
        this.resetMainList = null;
      }
      this.refreshListItems(null);
      if (this.mode !== "Box" && this.mode !== "CheckBox") {
        this.updateDelimView();
      }
      if (this.changeOnBlur) {
        this.updateValueState(eve, this.value, this.tempValues);
        this.dispatchEvent(this.hiddenElement, "change");
      }
      this.overAllClear.style.display = "none";
      if (this.isPopupOpen()) {
        this.hidePopup(eve);
      }
      this.makeTextBoxEmpty();
      this.trigger("blur");
      this.focused = true;
      if (Browser.isDevice && this.mode !== "Delimiter" && this.mode !== "CheckBox") {
        this.removeChipFocus();
      }
      this.removeChipSelection();
      this.refreshInputHight();
      floatLabelBlur(this.overAllWrapper, this.componentWrapper, this.value, this.floatLabelType, this.placeholder);
      this.refreshPlaceHolder();
      if ((this.allowFiltering || this.enableSelectionOrder === true && this.mode === "CheckBox") && !isNullOrUndefined(this.mainList)) {
        this.ulElement = this.mainList;
      }
      this.checkPlaceholderSize();
      Input.createSpanElement(this.overAllWrapper, this.createElement);
      this.calculateWidth();
      if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
        this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
    };
    MultiSelect2.prototype.calculateWidth = function() {
      var elementWidth;
      if (this.overAllWrapper) {
        if (!this.showDropDownIcon || this.overAllWrapper.querySelector(".e-label-top")) {
          elementWidth = this.overAllWrapper.clientWidth - 2 * parseInt(getComputedStyle(this.inputElement).paddingRight);
        } else {
          var downIconWidth = this.dropIcon.offsetWidth + parseInt(getComputedStyle(this.dropIcon).marginRight);
          elementWidth = this.overAllWrapper.clientWidth - (downIconWidth + 2 * parseInt(getComputedStyle(this.inputElement).paddingRight));
        }
        if (this.floatLabelType === "Auto") {
          Input.calculateWidth(elementWidth, this.overAllWrapper, this.getModuleName());
        }
      }
    };
    MultiSelect2.prototype.checkPlaceholderSize = function() {
      if (this.showDropDownIcon) {
        var downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
        this.setPlaceholderSize(downIconWidth);
      } else {
        if (!isNullOrUndefined(this.dropIcon)) {
          this.setPlaceholderSize(this.showDropDownIcon ? this.dropIcon.offsetWidth : 0);
        }
      }
    };
    MultiSelect2.prototype.setPlaceholderSize = function(downIconWidth) {
      if (isNullOrUndefined(this.value) || this.value.length === 0) {
        if (this.dropIcon.offsetWidth !== 0) {
          this.searchWrapper.style.width = "calc(100% - " + (downIconWidth + 10) + "px";
        } else {
          addClass([this.searchWrapper], CUSTOM_WIDTH);
        }
      } else if (!isNullOrUndefined(this.value)) {
        this.searchWrapper.removeAttribute("style");
        removeClass([this.searchWrapper], CUSTOM_WIDTH);
      }
    };
    MultiSelect2.prototype.refreshInputHight = function() {
      if (!isNullOrUndefined(this.searchWrapper)) {
        if ((!this.value || !this.value.length) && (isNullOrUndefined(this.text) || this.text === "")) {
          this.searchWrapper.classList.remove(ZERO_SIZE);
        } else {
          this.searchWrapper.classList.add(ZERO_SIZE);
        }
      }
    };
    MultiSelect2.prototype.validateValues = function(newValue, oldValue) {
      return JSON.stringify(newValue.slice().sort()) !== JSON.stringify(oldValue.slice().sort());
    };
    MultiSelect2.prototype.updateValueState = function(event, newVal, oldVal) {
      var newValue = newVal ? newVal : [];
      var oldValue = oldVal ? oldVal : [];
      if (this.initStatus && this.validateValues(newValue, oldValue)) {
        var eventArgs = {
          e: event,
          oldValue: oldVal,
          value: newVal,
          isInteracted: event ? true : false,
          element: this.element,
          event
        };
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", eventArgs);
        }
        this.updateTempValue();
        if (!this.changeOnBlur) {
          this.dispatchEvent(this.hiddenElement, "change");
        }
      }
    };
    MultiSelect2.prototype.updateTempValue = function() {
      if (!this.value) {
        this.tempValues = this.value;
      } else {
        this.tempValues = this.value.slice();
      }
    };
    MultiSelect2.prototype.updateAriaActiveDescendant = function() {
      if (!isNullOrUndefined(this.ulElement) && !isNullOrUndefined(this.ulElement.getElementsByClassName("e-item-focus")[0])) {
        attributes(this.inputElement, { "aria-activedescendant": this.ulElement.getElementsByClassName("e-item-focus")[0].id });
      }
    };
    MultiSelect2.prototype.getPagingCount = function() {
      var height = this.list.classList.contains(dropDownBaseClasses.noData) ? null : getComputedStyle(this.getItems()[0], null).getPropertyValue("height");
      return Math.round(this.list.offsetHeight / parseInt(height, 10));
    };
    MultiSelect2.prototype.pageUpSelection = function(steps) {
      var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      var previousItem = steps >= 0 ? collection[steps + 1] : collection[0];
      this.addListFocus(previousItem);
      this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")));
    };
    MultiSelect2.prototype.pageDownSelection = function(steps) {
      var list = this.getItems();
      var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      var previousItem = steps <= collection.length ? collection[steps - 1] : collection[collection.length - 1];
      this.addListFocus(previousItem);
      this.scrollBottom(previousItem, this.getIndexByValue(previousItem.getAttribute("data-value")));
    };
    MultiSelect2.prototype.getItems = function() {
      if (!this.list) {
        _super.prototype.render.call(this);
      }
      return this.ulElement && this.ulElement.querySelectorAll("." + dropDownBaseClasses.li).length > 0 ? this.ulElement.querySelectorAll("." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + ")") : [];
    };
    MultiSelect2.prototype.focusInHandler = function(e) {
      var _this = this;
      if (this.enabled) {
        this.showOverAllClear();
        this.inputFocus = true;
        if (this.value && this.value.length) {
          if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
            this.chipCollectionWrapper.style.display = "";
          } else {
            this.showDelimWrapper();
          }
          if (this.mode !== "CheckBox") {
            this.viewWrapper.style.display = "none";
          }
        }
        if (this.mode !== "CheckBox") {
          this.searchWrapper.classList.remove(ZERO_SIZE);
        }
        this.checkPlaceholderSize();
        if (this.focused) {
          var args = { isInteracted: e ? true : false, event: e };
          this.trigger("focus", args);
          this.focused = false;
        }
        if (!this.overAllWrapper.classList.contains(FOCUS2)) {
          this.overAllWrapper.classList.add(FOCUS2);
        }
        floatLabelFocus(this.overAllWrapper, this.componentWrapper);
        if (this.isPopupOpen()) {
          this.refreshPopup();
        }
        setTimeout(function() {
          _this.calculateWidth();
        }, 150);
        return true;
      } else {
        return false;
      }
    };
    MultiSelect2.prototype.showDelimWrapper = function() {
      if (this.mode === "CheckBox") {
        this.viewWrapper.style.display = "";
      } else {
        this.delimiterWrapper.style.display = "";
      }
      this.componentWrapper.classList.add(DELIMITER_VIEW_WRAPPER);
    };
    MultiSelect2.prototype.hideDelimWrapper = function() {
      this.delimiterWrapper.style.display = "none";
      this.componentWrapper.classList.remove(DELIMITER_VIEW_WRAPPER);
    };
    MultiSelect2.prototype.expandTextbox = function() {
      var size = 5;
      if (this.placeholder) {
        size = size > this.inputElement.placeholder.length ? size : this.inputElement.placeholder.length;
      }
      if (this.inputElement.value.length > size) {
        this.inputElement.size = this.inputElement.value.length;
      } else {
        this.inputElement.size = size;
      }
    };
    MultiSelect2.prototype.isPopupOpen = function() {
      return this.popupWrapper !== null && this.popupWrapper.parentElement !== null;
    };
    MultiSelect2.prototype.refreshPopup = function() {
      if (this.popupObj && this.mobFilter) {
        this.popupObj.setProperties({ width: this.calcPopupWidth() });
        this.popupObj.refreshPosition(this.overAllWrapper);
        this.popupObj.resolveCollision();
      }
    };
    MultiSelect2.prototype.checkTextLength = function() {
      return this.targetElement().length < 1;
    };
    MultiSelect2.prototype.popupKeyActions = function(e) {
      switch (e.keyCode) {
        case 38:
          this.hidePopup(e);
          if (this.mode === "CheckBox") {
            this.inputElement.focus();
          }
          e.preventDefault();
          break;
        case 40:
          if (!this.isPopupOpen()) {
            this.showPopup(e);
            e.preventDefault();
          }
          break;
      }
    };
    MultiSelect2.prototype.updateAriaAttribute = function() {
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (!isNullOrUndefined(focusedItem)) {
        this.inputElement.setAttribute("aria-activedescendant", focusedItem.id);
        if (this.allowFiltering) {
          var filterInput2 = this.popupWrapper.querySelector("." + FILTERINPUT);
          filterInput2 && filterInput2.setAttribute("aria-activedescendant", focusedItem.id);
        } else if (this.mode == "CheckBox") {
          this.overAllWrapper.setAttribute("aria-activedescendant", focusedItem.id);
        }
      }
    };
    MultiSelect2.prototype.homeNavigation = function(isHome) {
      this.removeFocus();
      var scrollEle = this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      if (scrollEle.length > 0) {
        var element2 = scrollEle[isHome ? 0 : scrollEle.length - 1];
        element2.classList.add(dropDownBaseClasses.focus);
        this.scrollBottom(element2);
        this.updateAriaActiveDescendant();
      }
    };
    MultiSelect2.prototype.onKeyDown = function(e) {
      if (this.readonly || !this.enabled && this.mode !== "CheckBox") {
        return;
      }
      this.keyCode = e.keyCode;
      this.keyDownStatus = true;
      if (e.keyCode > 111 && e.keyCode < 124) {
        return;
      }
      if (e.altKey) {
        this.popupKeyActions(e);
        return;
      } else if (this.isPopupOpen()) {
        var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
        var activeIndex = void 0;
        switch (e.keyCode) {
          case 36:
          case 35:
            this.homeNavigation(e.keyCode === 36 ? true : false);
            break;
          case 33:
            e.preventDefault();
            if (focusedItem) {
              this.getIndexByValue(focusedItem.getAttribute("data-value"));
              this.pageUpSelection(activeIndex - this.getPagingCount());
              this.updateAriaAttribute();
            }
            return;
          case 34:
            e.preventDefault();
            if (focusedItem) {
              this.getIndexByValue(focusedItem.getAttribute("data-value"));
              this.pageDownSelection(activeIndex + this.getPagingCount());
              this.updateAriaAttribute();
            }
            return;
          case 38:
            this.arrowUp(e);
            break;
          case 40:
            this.arrowDown(e);
            break;
          case 27:
            e.preventDefault();
            this.hidePopup(e);
            if (this.mode === "CheckBox") {
              this.inputElement.focus();
            }
            return;
          case 13:
            e.preventDefault();
            if (this.mode !== "CheckBox") {
              this.selectByKey(e);
            }
            this.checkPlaceholderSize();
            return;
          case 32:
            this.spaceKeySelection(e);
            return;
          case 9:
            e.preventDefault();
            this.hidePopup(e);
            this.inputElement.focus();
            this.overAllWrapper.classList.add(FOCUS2);
        }
      } else {
        switch (e.keyCode) {
          case 13:
          case 9:
          case 16:
          case 17:
          case 20:
            return;
          case 40:
            if (this.openOnClick) {
              this.showPopup();
            }
            break;
          case 27:
            e.preventDefault();
            this.escapeAction();
            return;
        }
      }
      if (this.checkTextLength()) {
        this.keyNavigation(e);
      }
      if (this.mode === "CheckBox" && this.enableSelectionOrder) {
        if (this.allowFiltering) {
          this.previousFilterText = this.targetElement();
        }
        this.checkBackCommand(e);
      }
      this.expandTextbox();
      if (!(this.mode === "CheckBox" && this.showSelectAll)) {
        this.refreshPopup();
      }
    };
    MultiSelect2.prototype.arrowDown = function(e) {
      e.preventDefault();
      this.moveByList(1);
      this.keyAction = true;
      if (document.activeElement.classList.contains(FILTERINPUT) || this.mode === "CheckBox" && !this.allowFiltering && document.activeElement !== this.list) {
        EventHandler.add(this.list, "keydown", this.onKeyDown, this);
      }
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.arrowUp = function(e) {
      e.preventDefault();
      this.keyAction = true;
      var list = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        list = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ",li." + dropDownBaseClasses.group + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
      }
      var focuseElem = this.list.querySelector("li." + dropDownBaseClasses.focus);
      this.focusFirstListItem = !isNullOrUndefined(this.liCollections[0]) ? this.liCollections[0].classList.contains("e-item-focus") : false;
      var index = Array.prototype.slice.call(list).indexOf(focuseElem);
      if (index <= 0 && (this.mode === "CheckBox" && this.allowFiltering)) {
        this.keyAction = false;
        this.notify("inputFocus", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "focus" });
      }
      this.moveByList(-1);
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.spaceKeySelection = function(e) {
      if (this.mode === "CheckBox") {
        if (!document.activeElement.classList.contains(FILTERINPUT)) {
          e.preventDefault();
          this.keyAction = true;
        }
        this.selectByKey(e);
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.checkBackCommand = function(e) {
      if (e.keyCode === 8 && this.allowFiltering ? this.targetElement() !== this.previousFilterText : this.targetElement() === "") {
        this.backCommand = false;
      } else {
        this.backCommand = true;
      }
    };
    MultiSelect2.prototype.keyNavigation = function(e) {
      if (this.mode !== "Delimiter" && this.mode !== "CheckBox" && this.value && this.value.length) {
        switch (e.keyCode) {
          case 37:
            e.preventDefault();
            this.moveBy(-1, e);
            break;
          case 39:
            e.preventDefault();
            this.moveBy(1, e);
            break;
          case 8:
            this.removelastSelection(e);
            break;
          case 46:
            this.removeSelectedChip(e);
            break;
        }
      } else if (e.keyCode === 8 && this.mode === "Delimiter") {
        if (this.value && this.value.length) {
          e.preventDefault();
          var temp = this.value[this.value.length - 1];
          this.removeValue(temp, e);
          this.updateDelimeter(this.delimiterChar, e);
          this.focusAtLastListItem(temp);
        }
      }
    };
    MultiSelect2.prototype.selectByKey = function(e) {
      this.removeChipSelection();
      this.selectListByKey(e);
      if (this.hideSelectedItem) {
        this.focusAtFirstListItem();
      }
    };
    MultiSelect2.prototype.escapeAction = function() {
      var temp = this.tempValues ? this.tempValues.slice() : [];
      if (this.value && this.validateValues(this.value, temp)) {
        if (this.mode !== "CheckBox") {
          this.value = temp;
          this.initialValueUpdate();
        }
        if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
          this.chipCollectionWrapper.style.display = "";
        } else {
          this.showDelimWrapper();
        }
        this.refreshPlaceHolder();
        if (this.value.length) {
          this.showOverAllClear();
        } else {
          this.hideOverAllClear();
        }
      }
      this.makeTextBoxEmpty();
    };
    MultiSelect2.prototype.scrollBottom = function(selectedLI, activeIndex) {
      var currentOffset = this.list.offsetHeight;
      var nextBottom = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
      var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
      var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
      boxRange = this.fields.groupBy && !isNullOrUndefined(this.fixedHeaderElement) ? boxRange - this.fixedHeaderElement.offsetHeight : boxRange;
      if (activeIndex === 0) {
        this.list.scrollTop = 0;
      } else if (nextBottom > currentOffset) {
        this.list.scrollTop = nextOffset;
      } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
        this.list.scrollTop = nextOffset;
      }
    };
    MultiSelect2.prototype.scrollTop = function(selectedLI, activeIndex) {
      var nextOffset = selectedLI.offsetTop - this.list.scrollTop;
      nextOffset = this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? nextOffset - this.fixedHeaderElement.offsetHeight : nextOffset;
      var boxRange = selectedLI.offsetTop + selectedLI.offsetHeight - this.list.scrollTop;
      if (activeIndex === 0) {
        this.list.scrollTop = 0;
      } else if (nextOffset < 0) {
        this.list.scrollTop = this.list.scrollTop + nextOffset;
      } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
        this.list.scrollTop = selectedLI.offsetTop - (this.fields.groupBy && !isUndefined(this.fixedHeaderElement) ? this.fixedHeaderElement.offsetHeight : 0);
      }
    };
    MultiSelect2.prototype.selectListByKey = function(e) {
      var li = this.list.querySelector("li." + dropDownBaseClasses.focus);
      var limit = this.value && this.value.length ? this.value.length : 0;
      var target;
      if (li !== null) {
        e.preventDefault();
        if (li.classList.contains("e-active")) {
          limit = limit - 1;
        }
        if (this.isValidLI(li) && limit < this.maximumSelectionLength) {
          this.updateListSelection(li, e);
          this.addListFocus(li);
          if (this.mode === "CheckBox") {
            this.updateDelimView();
            this.updateDelimeter(this.delimiterChar, e);
            this.refreshInputHight();
            this.checkPlaceholderSize();
            if (this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
              target = li.firstElementChild.lastElementChild;
              this.findGroupStart(target);
              this.deselectHeader();
            }
          } else {
            this.updateDelimeter(this.delimiterChar, e);
          }
          this.makeTextBoxEmpty();
          if (this.mode !== "CheckBox") {
            this.refreshListItems(li.textContent);
          }
          if (!this.changeOnBlur) {
            this.updateValueState(e, this.value, this.tempValues);
          }
          this.refreshPopup();
        } else {
          if (!this.isValidLI(li) && limit < this.maximumSelectionLength) {
            target = li.firstElementChild.lastElementChild;
            if (target.classList.contains("e-check")) {
              this.selectAllItem(false, e, li);
            } else {
              this.selectAllItem(true, e, li);
            }
          }
        }
        this.refreshSelection();
        if (this.closePopupOnSelect) {
          this.hidePopup(e);
        }
      }
      var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
      if (selectAllParent && !selectAllParent.classList.contains("e-item-focus")) {
        e.preventDefault();
      }
      if (selectAllParent && selectAllParent.classList.contains("e-item-focus")) {
        var selectAllCheckBox = selectAllParent.childNodes[0];
        if (!selectAllCheckBox.classList.contains("e-check")) {
          selectAllCheckBox.classList.add("e-check");
          var args = {
            module: "CheckBoxSelection",
            enable: this.mode === "CheckBox",
            value: "check",
            name: "checkSelectAll"
          };
          this.notify("checkSelectAll", args);
          this.selectAllItem(true, e, li);
        } else {
          selectAllCheckBox.classList.remove("e-check");
          var args = {
            module: "CheckBoxSelection",
            enable: this.mode === "CheckBox",
            value: "check",
            name: "checkSelectAll"
          };
          this.notify("checkSelectAll", args);
          this.selectAllItem(false, e, li);
        }
      }
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.refreshListItems = function(data) {
      if ((this.allowFiltering || this.mode === "CheckBox" && this.enableSelectionOrder === true || this.allowCustomValue) && this.mainList && this.listData) {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        this.onActionComplete(list, this.mainData);
        this.focusAtLastListItem(data);
        if (this.value && this.value.length) {
          this.refreshSelection();
        }
      } else if (!isNullOrUndefined(this.fields.groupBy) && this.value && this.value.length) {
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.removeSelectedChip = function(e) {
      var selectedElem = this.chipCollectionWrapper.querySelector("span." + CHIP_SELECTED);
      var temp;
      if (selectedElem !== null) {
        if (!isNullOrUndefined(this.value)) {
          this.tempValues = this.value.slice();
        }
        temp = selectedElem.nextElementSibling;
        if (temp !== null) {
          this.removeChipSelection();
          this.addChipSelection(temp, e);
        }
        this.removeValue(selectedElem.getAttribute("data-value"), e);
        this.makeTextBoxEmpty();
      }
      if (this.closePopupOnSelect) {
        this.hidePopup(e);
      }
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.moveByTop = function(state) {
      var elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li);
      var index;
      if (elements.length > 1) {
        this.removeFocus();
        index = state ? 0 : elements.length - 1;
        this.addListFocus(elements[index]);
        this.scrollBottom(elements[index], index);
      }
      this.updateAriaAttribute();
    };
    MultiSelect2.prototype.moveByList = function(position) {
      if (this.list) {
        var elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
        if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
          elements = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ",li." + dropDownBaseClasses.group + ":not(." + HIDE_LIST + "):not(.e-reorder-hide)");
        }
        var selectedElem = this.list.querySelector("li." + dropDownBaseClasses.focus);
        var temp = -1;
        var selectAllParent = document.getElementsByClassName("e-selectall-parent")[0];
        if (this.mode === "CheckBox" && this.showSelectAll && position == 1 && !isNullOrUndefined(selectAllParent) && !selectAllParent.classList.contains("e-item-focus") && this.list.getElementsByClassName("e-item-focus").length == 0 && this.liCollections.length > 1) {
          selectAllParent.classList.add("e-item-focus");
        } else if (elements.length) {
          if (this.mode === "CheckBox" && this.showSelectAll && !isNullOrUndefined(selectAllParent)) {
            selectAllParent.classList.remove("e-item-focus");
            if (this.showSelectAll && position == -1 && !isNullOrUndefined(selectAllParent) && this.liCollections.length > 1 && (this.focusFirstListItem || this.list.getElementsByClassName("e-item-focus").length == 0)) {
              selectAllParent.classList.add("e-item-focus");
            }
          }
          for (var index = 0; index < elements.length; index++) {
            if (elements[index] === selectedElem) {
              temp = index;
              break;
            }
          }
          if (position > 0) {
            if (temp < elements.length - 1) {
              this.removeFocus();
              this.addListFocus(elements[++temp]);
              this.updateCheck(elements[temp]);
              this.scrollBottom(elements[temp], temp);
            }
          } else {
            if (temp > 0) {
              this.removeFocus();
              this.addListFocus(elements[--temp]);
              this.updateCheck(elements[temp]);
              this.scrollTop(elements[temp], temp);
            }
          }
        }
      }
    };
    MultiSelect2.prototype.updateCheck = function(element2) {
      if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        var checkElement = element2.firstElementChild.lastElementChild;
        if (checkElement.classList.contains("e-check")) {
          element2.classList.add("e-active");
        } else {
          element2.classList.remove("e-active");
        }
      }
    };
    MultiSelect2.prototype.moveBy = function(position, e) {
      var temp;
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2);
      var selectedElem = this.chipCollectionWrapper.querySelector("span." + CHIP_SELECTED);
      if (selectedElem === null) {
        if (position < 0) {
          this.addChipSelection(elements[elements.length - 1], e);
        }
      } else {
        if (position < 0) {
          temp = selectedElem.previousElementSibling;
          if (temp !== null) {
            this.removeChipSelection();
            this.addChipSelection(temp, e);
          }
        } else {
          temp = selectedElem.nextElementSibling;
          this.removeChipSelection();
          if (temp !== null) {
            this.addChipSelection(temp, e);
          }
        }
      }
    };
    MultiSelect2.prototype.chipClick = function(e) {
      if (this.enabled) {
        var elem = closest(e.target, "." + CHIP2);
        this.removeChipSelection();
        this.addChipSelection(elem, e);
      }
    };
    MultiSelect2.prototype.removeChipSelection = function() {
      if (this.chipCollectionWrapper) {
        this.removeChipFocus();
      }
    };
    MultiSelect2.prototype.addChipSelection = function(element2, e) {
      addClass([element2], CHIP_SELECTED);
      this.trigger("chipSelection", e);
    };
    MultiSelect2.prototype.onChipRemove = function(e) {
      if (e.which === 3 || e.button === 2) {
        return;
      }
      if (this.enabled && !this.readonly) {
        var element2 = e.target.parentElement;
        var customVal = element2.getAttribute("data-value");
        var value = this.getFormattedValue(customVal);
        if (this.allowCustomValue && (customVal !== "false" && value === false || !isNullOrUndefined(value) && value.toString() === "NaN")) {
          value = customVal;
        }
        if (this.isPopupOpen() && this.mode !== "CheckBox") {
          this.hidePopup(e);
        }
        if (!this.inputFocus) {
          this.inputElement.focus();
        }
        this.removeValue(value, e);
        if (isNullOrUndefined(this.findListElement(this.list, "li", "data-value", value)) && this.mainList && this.listData) {
          var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
          this.onActionComplete(list, this.mainData);
        }
        this.updateDelimeter(this.delimiterChar, e);
        if (this.placeholder && this.floatLabelType === "Never") {
          this.makeTextBoxEmpty();
          this.checkPlaceholderSize();
        } else {
          this.inputElement.value = "";
        }
        e.preventDefault();
      }
    };
    MultiSelect2.prototype.makeTextBoxEmpty = function() {
      this.inputElement.value = "";
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.refreshPlaceHolder = function() {
      if (this.placeholder && this.floatLabelType === "Never") {
        if (this.value && this.value.length || !isNullOrUndefined(this.text) && this.text !== "") {
          this.inputElement.placeholder = "";
        } else {
          this.inputElement.placeholder = encodePlaceholder(this.placeholder);
        }
      } else {
        this.setFloatLabelType();
      }
      this.expandTextbox();
    };
    MultiSelect2.prototype.removeAllItems = function(value, eve, isClearAll, element2, mainElement) {
      var index = this.value.indexOf(value);
      var removeVal = this.value.slice(0);
      removeVal.splice(index, 1);
      this.setProperties({ value: [].concat([], removeVal) }, true);
      element2.setAttribute("aria-selected", "false");
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      removeClass([element2], className);
      this.notify("activeList", {
        module: "CheckBoxSelection",
        enable: this.mode === "CheckBox",
        li: element2,
        e: this,
        index
      });
      this.invokeCheckboxSelection(element2, eve, isClearAll);
      this.updateMainList(true, value, mainElement);
      this.updateChipStatus();
    };
    MultiSelect2.prototype.invokeCheckboxSelection = function(element2, eve, isClearAll) {
      this.notify("updatelist", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", li: element2, e: eve });
      this.updateAriaActiveDescendant();
      if (this.value && this.value.length !== this.mainData.length && (this.mode === "CheckBox" && this.showSelectAll && !(this.isSelectAll || isClearAll))) {
        this.notify("checkSelectAll", {
          module: "CheckBoxSelection",
          enable: this.mode === "CheckBox",
          value: "uncheck"
        });
      }
    };
    MultiSelect2.prototype.removeValue = function(value, eve, length, isClearAll) {
      var _this = this;
      var index = this.value.indexOf(this.getFormattedValue(value));
      if (index === -1 && this.allowCustomValue && !isNullOrUndefined(value)) {
        index = this.value.indexOf(value.toString());
      }
      var targetEle = eve && eve.target;
      isClearAll = isClearAll || targetEle && targetEle.classList.contains("e-close-hooker") ? true : null;
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (index !== -1) {
        var element_1 = this.findListElement(this.list, "li", "data-value", value);
        var val_1 = this.getDataByValue(value);
        var eventArgs = {
          e: eve,
          item: element_1,
          itemData: val_1,
          isInteracted: eve ? true : false,
          cancel: false
        };
        this.trigger("removing", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            _this.removeIndex++;
          } else {
            var removeVal = _this.value.slice(0);
            removeVal.splice(index, 1);
            _this.setProperties({ value: [].concat([], removeVal) }, true);
            if (element_1 !== null) {
              var hideElement = _this.findListElement(_this.mainList, "li", "data-value", value);
              element_1.setAttribute("aria-selected", "false");
              removeClass([element_1], className);
              if (hideElement) {
                hideElement.setAttribute("aria-selected", "false");
                removeClass([element_1, hideElement], className);
              }
              _this.notify("activeList", {
                module: "CheckBoxSelection",
                enable: _this.mode === "CheckBox",
                li: element_1,
                e: _this,
                index
              });
              _this.invokeCheckboxSelection(element_1, eve, isClearAll);
            }
            if (_this.hideSelectedItem && _this.fields.groupBy && element_1) {
              _this.hideGroupItem(value);
            }
            if (_this.hideSelectedItem && _this.fixedHeaderElement && _this.fields.groupBy && _this.mode !== "CheckBox" && _this.isPopupOpen()) {
              _super.prototype.scrollStop.call(_this);
            }
            _this.updateMainList(true, value);
            _this.removeChip(value);
            _this.updateChipStatus();
            var limit = _this.value && _this.value.length ? _this.value.length : 0;
            if (limit < _this.maximumSelectionLength) {
              var collection = _this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
              removeClass(collection, "e-disable");
            }
            _this.trigger("removed", eventArgs2);
            var targetEle_1 = eve && eve.currentTarget;
            var isSelectAll = targetEle_1 && targetEle_1.classList.contains("e-selectall-parent") ? true : null;
            if (!_this.changeOnBlur && !isClearAll && (eve && length && !isSelectAll)) {
              _this.updateValueState(eve, _this.value, _this.tempValues);
            }
            if (length) {
              _this.selectAllEventData.push(val_1);
              _this.selectAllEventEle.push(element_1);
            }
            if (length === 1) {
              if (!_this.changeOnBlur) {
                _this.updateValueState(eve, _this.value, _this.tempValues);
              }
              var args = {
                event: eve,
                items: _this.selectAllEventEle,
                itemData: _this.selectAllEventData,
                isInteracted: eve ? true : false,
                isChecked: false
              };
              _this.trigger("selectedAll", args);
              _this.selectAllEventData = [];
              _this.selectAllEventEle = [];
            }
            if (isClearAll && (length === 1 || length === null)) {
              _this.clearAllCallback(eve, isClearAll);
            }
          }
        });
      }
    };
    MultiSelect2.prototype.updateMainList = function(state, value, mainElement) {
      if (this.allowFiltering || this.mode === "CheckBox") {
        var element2 = mainElement ? mainElement : this.findListElement(this.mainList, "li", "data-value", value);
        if (element2) {
          if (state) {
            element2.setAttribute("aria-selected", "false");
            removeClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);
            if (this.mode === "CheckBox") {
              removeClass([element2.firstElementChild.lastElementChild], "e-check");
            }
          } else {
            element2.setAttribute("aria-selected", "true");
            addClass([element2], this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected);
            if (this.mode === "CheckBox") {
              addClass([element2.firstElementChild.lastElementChild], "e-check");
            }
          }
        }
      }
    };
    MultiSelect2.prototype.removeChip = function(value) {
      if (this.chipCollectionWrapper) {
        var element2 = this.findListElement(this.chipCollectionWrapper, "span", "data-value", value);
        if (element2) {
          remove(element2);
        }
      }
    };
    MultiSelect2.prototype.setWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.overAllWrapper.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.overAllWrapper.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    MultiSelect2.prototype.updateChipStatus = function() {
      if (this.value && this.value.length) {
        if (!isNullOrUndefined(this.chipCollectionWrapper)) {
          this.chipCollectionWrapper.style.display = "";
        }
        if (this.mode === "Delimiter" || this.mode === "CheckBox") {
          this.showDelimWrapper();
        }
        this.showOverAllClear();
      } else {
        if (!isNullOrUndefined(this.chipCollectionWrapper)) {
          this.chipCollectionWrapper.style.display = "none";
        }
        if (!isNullOrUndefined(this.delimiterWrapper)) {
          this.delimiterWrapper.style.display = "none";
        }
        this.hideOverAllClear();
      }
    };
    MultiSelect2.prototype.addValue = function(value, text, eve) {
      if (!this.value) {
        this.value = [];
      }
      if (this.value.indexOf(value) < 0) {
        this.setProperties({ value: [].concat([], this.value, [value]) }, true);
      }
      var element2 = this.findListElement(this.list, "li", "data-value", value);
      this.removeFocus();
      if (element2) {
        this.addListFocus(element2);
        this.addListSelection(element2);
      }
      if (this.mode !== "Delimiter" && this.mode !== "CheckBox") {
        this.addChip(text, value, eve);
      }
      if (this.hideSelectedItem && this.fields.groupBy) {
        this.hideGroupItem(value);
      }
      this.updateChipStatus();
      this.checkMaxSelection();
    };
    MultiSelect2.prototype.checkMaxSelection = function() {
      var limit = this.value && this.value.length ? this.value.length : 0;
      if (limit === this.maximumSelectionLength) {
        var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
        addClass(collection, "e-disable");
      }
    };
    MultiSelect2.prototype.dispatchSelect = function(value, eve, element2, isNotTrigger, length) {
      var _this = this;
      var list = this.listData;
      if (this.initStatus && !isNotTrigger) {
        var val_2 = this.getDataByValue(value);
        var eventArgs = {
          e: eve,
          item: element2,
          itemData: val_2,
          isInteracted: eve ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            if (length) {
              _this.selectAllEventData.push(val_2);
              _this.selectAllEventEle.push(element2);
            }
            if (length === 1) {
              var args = {
                event: eve,
                items: _this.selectAllEventEle,
                itemData: _this.selectAllEventData,
                isInteracted: eve ? true : false,
                isChecked: true
              };
              _this.trigger("selectedAll", args);
              _this.selectAllEventData = [];
            }
            if (_this.allowCustomValue && _this.isServerRendered && _this.listData !== list) {
              _this.listData = list;
            }
            _this.updateListSelectEventCallback(value, element2, eve);
            if (_this.hideSelectedItem && _this.fixedHeaderElement && _this.fields.groupBy && _this.mode !== "CheckBox") {
              _super.prototype.scrollStop.call(_this);
            }
          }
        });
      }
    };
    MultiSelect2.prototype.addChip = function(text, value, e) {
      if (this.chipCollectionWrapper) {
        this.getChip(text, value, e);
      }
    };
    MultiSelect2.prototype.removeChipFocus = function() {
      var elements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP2 + "." + CHIP_SELECTED);
      removeClass(elements, CHIP_SELECTED);
      if (Browser.isDevice) {
        var closeElements = this.chipCollectionWrapper.querySelectorAll("span." + CHIP_CLOSE2.split(" ")[0]);
        for (var index = 0; index < closeElements.length; index++) {
          closeElements[index].style.display = "none";
        }
      }
    };
    MultiSelect2.prototype.onMobileChipInteraction = function(e) {
      var chipElem = closest(e.target, "." + CHIP2);
      var chipClose = chipElem.querySelector("span." + CHIP_CLOSE2.split(" ")[0]);
      if (this.enabled && !this.readonly) {
        if (!chipElem.classList.contains(CHIP_SELECTED)) {
          this.removeChipFocus();
          chipClose.style.display = "";
          chipElem.classList.add(CHIP_SELECTED);
        }
        this.refreshPopup();
        e.preventDefault();
      }
    };
    MultiSelect2.prototype.multiCompiler = function(multiselectTemplate) {
      var checkTemplate = false;
      if (typeof multiselectTemplate !== "function" && multiselectTemplate) {
        try {
          checkTemplate = selectAll(multiselectTemplate, document).length ? true : false;
        } catch (exception) {
          checkTemplate = false;
        }
      }
      return checkTemplate;
    };
    MultiSelect2.prototype.getChip = function(data, value, e) {
      var _this = this;
      var itemData = { text: value, value };
      var chip = this.createElement("span", {
        className: CHIP2,
        attrs: { "data-value": value, "title": data }
      });
      var compiledString;
      var chipContent = this.createElement("span", { className: CHIP_CONTENT2 });
      var chipClose = this.createElement("span", { className: CHIP_CLOSE2 });
      if (this.mainData) {
        itemData = this.getDataByValue(value);
      }
      if (this.valueTemplate && !isNullOrUndefined(itemData)) {
        var valuecheck = this.multiCompiler(this.valueTemplate);
        if (typeof this.valueTemplate !== "function" && valuecheck) {
          compiledString = compile(select(this.valueTemplate, document).innerHTML.trim());
        } else {
          compiledString = compile(this.valueTemplate);
        }
        var valueCompTemp = compiledString(itemData, this, "valueTemplate", this.valueTemplateId, this.isStringTemplate, null, chipContent);
        if (valueCompTemp && valueCompTemp.length > 0) {
          append(valueCompTemp, chipContent);
        }
        this.renderReactTemplates();
      } else if (this.enableHtmlSanitizer) {
        chipContent.innerText = data;
      } else {
        chipContent.innerHTML = data;
      }
      chip.appendChild(chipContent);
      var eventArgs = {
        isInteracted: e ? true : false,
        itemData,
        e,
        setClass: function(classes) {
          addClass([chip], classes);
        },
        cancel: false
      };
      this.isPreventChange = this.isAngular && this.preventChange;
      this.trigger("tagging", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          if (Browser.isDevice) {
            chip.classList.add(MOBILE_CHIP);
            append([chipClose], chip);
            chipClose.style.display = "none";
            EventHandler.add(chip, "click", _this.onMobileChipInteraction, _this);
          } else {
            EventHandler.add(chip, "mousedown", _this.chipClick, _this);
            if (_this.showClearButton) {
              chip.appendChild(chipClose);
            }
          }
          EventHandler.add(chipClose, "mousedown", _this.onChipRemove, _this);
          _this.chipCollectionWrapper.appendChild(chip);
          if (!_this.changeOnBlur && e) {
            _this.updateValueState(e, _this.value, _this.tempValues);
          }
        }
      });
    };
    MultiSelect2.prototype.calcPopupWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.componentWrapper.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    MultiSelect2.prototype.mouseIn = function() {
      if (this.enabled && !this.readonly) {
        this.showOverAllClear();
      }
    };
    MultiSelect2.prototype.mouseOut = function() {
      if (!this.inputFocus) {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.listOption = function(dataSource, fields) {
      var iconCss = isNullOrUndefined(fields.iconCss) ? false : true;
      var fieldProperty = isNullOrUndefined(fields.properties) ? fields : fields.properties;
      this.listCurrentOptions = fields.text !== null || fields.value !== null ? {
        fields: fieldProperty,
        showIcon: iconCss,
        ariaAttributes: { groupItemRole: "presentation" }
      } : { fields: { value: "text" } };
      extend(this.listCurrentOptions, this.listCurrentOptions, fields, true);
      if (this.mode === "CheckBox") {
        this.notify("listoption", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", dataSource, fieldProperty });
      }
      return this.listCurrentOptions;
    };
    MultiSelect2.prototype.renderPopup = function() {
      var _this = this;
      if (!this.list) {
        _super.prototype.render.call(this);
      }
      if (!this.popupObj) {
        if (!isNullOrUndefined(this.popupWrapper)) {
          document.body.appendChild(this.popupWrapper);
          var checkboxFilter = this.popupWrapper.querySelector("." + FILTERPARENT);
          if (this.mode === "CheckBox" && !this.allowFiltering && checkboxFilter && this.filterParent) {
            checkboxFilter.remove();
            this.filterParent = null;
          }
          var overAllHeight = parseInt(this.popupHeight, 10);
          this.popupWrapper.style.visibility = "hidden";
          if (this.headerTemplate) {
            this.setHeaderTemplate();
            overAllHeight -= this.header.offsetHeight;
          }
          append([this.list], this.popupWrapper);
          if (this.footerTemplate) {
            this.setFooterTemplate();
            overAllHeight -= this.footer.offsetHeight;
          }
          if (this.mode === "CheckBox" && this.showSelectAll) {
            this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
            overAllHeight -= this.selectAllHeight;
          } else if (this.mode === "CheckBox" && !this.showSelectAll && (!this.headerTemplate && !this.footerTemplate)) {
            this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
            overAllHeight = parseInt(this.popupHeight, 10);
          } else if (this.mode === "CheckBox" && !this.showSelectAll) {
            this.notify("selectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
            overAllHeight = parseInt(this.popupHeight, 10);
            if (this.headerTemplate && this.header) {
              overAllHeight -= this.header.offsetHeight;
            }
            if (this.footerTemplate && this.footer) {
              overAllHeight -= this.footer.offsetHeight;
            }
          }
          if (this.mode === "CheckBox") {
            var args = {
              module: "CheckBoxSelection",
              enable: this.mode === "CheckBox",
              popupElement: this.popupWrapper
            };
            if (this.allowFiltering) {
              this.notify("searchBox", args);
              overAllHeight -= this.searchBoxHeight;
            }
            addClass([this.popupWrapper], "e-checkbox");
          }
          if (this.popupHeight !== "auto") {
            this.list.style.maxHeight = formatUnit(overAllHeight);
            this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);
          } else {
            this.list.style.maxHeight = formatUnit(this.popupHeight);
          }
          this.popupObj = new Popup(this.popupWrapper, {
            width: this.calcPopupWidth(),
            targetType: "relative",
            position: { X: "left", Y: "bottom" },
            relateTo: this.overAllWrapper,
            collision: { X: "flip", Y: "flip" },
            offsetY: 1,
            enableRtl: this.enableRtl,
            zIndex: this.zIndex,
            close: function() {
              if (_this.popupObj.element.parentElement) {
                _this.popupObj.unwireScrollEvents();
                var checkboxFilterInput = _this.popupWrapper.querySelector("." + FILTERINPUT);
                if (_this.mode === "CheckBox" && checkboxFilterInput && document.activeElement === checkboxFilterInput) {
                  checkboxFilterInput.blur();
                }
                detach(_this.popupObj.element);
              }
            },
            open: function() {
              _this.popupObj.resolveCollision();
              if (!_this.isFirstClick) {
                var ulElement = _this.list.querySelector("ul");
                if (ulElement) {
                  if (!(_this.mode !== "CheckBox" && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== "")) {
                    _this.mainList = ulElement.cloneNode ? ulElement.cloneNode(true) : ulElement;
                  }
                }
                _this.isFirstClick = true;
              }
              _this.popupObj.wireScrollEvents();
              if (!(_this.mode !== "CheckBox" && (_this.allowFiltering || _this.allowCustomValue) && _this.targetElement().trim() !== "")) {
                _this.loadTemplate();
              }
              _this.setScrollPosition();
              if (_this.allowFiltering) {
                _this.notify("inputFocus", {
                  module: "CheckBoxSelection",
                  enable: _this.mode === "CheckBox",
                  value: "focus"
                });
              }
            },
            targetExitViewport: function() {
              if (!Browser.isDevice) {
                _this.hidePopup();
              }
            }
          });
          if (this.mode === "CheckBox" && Browser.isDevice && this.allowFiltering) {
            this.notify("deviceSearchBox", { module: "CheckBoxSelection", enable: this.mode === "CheckBox" });
          }
          this.popupObj.close();
          this.popupWrapper.style.visibility = "";
        }
      }
    };
    MultiSelect2.prototype.setHeaderTemplate = function() {
      var compiledString;
      if (this.header) {
        this.header.remove();
      }
      this.header = this.createElement("div");
      addClass([this.header], HEADER3);
      var headercheck = this.multiCompiler(this.headerTemplate);
      if (typeof this.headerTemplate !== "function" && headercheck) {
        compiledString = compile(select(this.headerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.headerTemplate);
      }
      var elements = compiledString({}, this, "headerTemplate", this.headerTemplateId, this.isStringTemplate, null, this.header);
      if (elements && elements.length > 0) {
        append(elements, this.header);
      }
      if (this.mode === "CheckBox" && this.showSelectAll) {
        prepend([this.header], this.popupWrapper);
      } else {
        append([this.header], this.popupWrapper);
      }
      EventHandler.add(this.header, "mousedown", this.onListMouseDown, this);
    };
    MultiSelect2.prototype.setFooterTemplate = function() {
      var compiledString;
      if (this.footer) {
        this.footer.remove();
      }
      this.footer = this.createElement("div");
      addClass([this.footer], FOOTER2);
      var footercheck = this.multiCompiler(this.footerTemplate);
      if (typeof this.footerTemplate !== "function" && footercheck) {
        compiledString = compile(select(this.footerTemplate, document).innerHTML.trim());
      } else {
        compiledString = compile(this.footerTemplate);
      }
      var elements = compiledString({}, this, "footerTemplate", this.footerTemplateId, this.isStringTemplate, null, this.footer);
      if (elements && elements.length > 0) {
        append(elements, this.footer);
      }
      append([this.footer], this.popupWrapper);
      EventHandler.add(this.footer, "mousedown", this.onListMouseDown, this);
    };
    MultiSelect2.prototype.clearAll = function(e) {
      if (this.enabled && !this.readonly) {
        var temp = void 0;
        if (this.value && this.value.length > 0) {
          var liElement = this.list && this.list.querySelectorAll("li.e-list-item");
          if (liElement && liElement.length > 0) {
            this.selectAllItems(false, e);
          } else {
            this.removeIndex = 0;
            for (temp = this.value[this.removeIndex]; this.removeIndex < this.value.length; temp = this.value[this.removeIndex]) {
              this.removeValue(temp, e, null, true);
            }
          }
          this.selectedElementID = null;
          this.inputElement.removeAttribute("aria-activedescendant");
        } else {
          this.clearAllCallback(e);
        }
      }
    };
    MultiSelect2.prototype.clearAllCallback = function(e, isClearAll) {
      var tempValues = this.value ? this.value.slice() : [];
      if (this.mainList && this.listData && (this.allowFiltering && this.mode !== "CheckBox" || this.allowCustomValue)) {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        this.onActionComplete(list, this.mainData);
      }
      this.focusAtFirstListItem();
      this.updateDelimeter(this.delimiterChar, e);
      if (this.mode !== "Box" && (!this.inputFocus || this.mode === "CheckBox")) {
        this.updateDelimView();
      }
      if (this.inputElement.value !== "") {
        this.makeTextBoxEmpty();
        this.search(null);
      }
      this.checkPlaceholderSize();
      if (this.isPopupOpen()) {
        this.refreshPopup();
      }
      if (!this.inputFocus) {
        if (this.changeOnBlur) {
          this.updateValueState(e, this.value, tempValues);
        }
        if (this.mode !== "CheckBox") {
          this.inputElement.focus();
        }
      }
      if (this.mode === "CheckBox") {
        this.refreshPlaceHolder();
        this.refreshInputHight();
        if (this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {
          this.updateValueState(e, this.value, this.tempValues);
        }
      }
      if (!this.changeOnBlur && isClearAll && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        this.updateValueState(e, this.value, this.tempValues);
      }
      if (this.mode === "CheckBox" && this.enableGroupCheckBox && !isNullOrUndefined(this.fields.groupBy)) {
        this.updateListItems(this.list.querySelectorAll("li.e-list-item"), this.mainList.querySelectorAll("li.e-list-item"));
      }
      e.preventDefault();
    };
    MultiSelect2.prototype.windowResize = function() {
      this.refreshPopup();
      if ((!this.inputFocus || this.mode === "CheckBox") && this.viewWrapper && this.viewWrapper.parentElement) {
        this.updateDelimView();
      }
    };
    MultiSelect2.prototype.resetValueHandler = function(e) {
      var formElement = closest(this.inputElement, "form");
      if (formElement && e.target === formElement) {
        var textVal = this.element.tagName === this.getNgDirective() ? null : this.element.getAttribute("data-initial-value");
        this.text = textVal;
      }
    };
    MultiSelect2.prototype.wireEvent = function() {
      EventHandler.add(this.componentWrapper, "mousedown", this.wrapperClick, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      EventHandler.add(this.inputElement, "focus", this.focusInHandler, this);
      EventHandler.add(this.inputElement, "keydown", this.onKeyDown, this);
      EventHandler.add(this.inputElement, "keyup", this.keyUp, this);
      if (this.mode !== "CheckBox") {
        EventHandler.add(this.inputElement, "input", this.onInput, this);
      }
      EventHandler.add(this.inputElement, "blur", this.onBlurHandler, this);
      EventHandler.add(this.componentWrapper, "mouseover", this.mouseIn, this);
      var formElement = closest(this.inputElement, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetValueHandler, this);
      }
      EventHandler.add(this.componentWrapper, "mouseout", this.mouseOut, this);
      EventHandler.add(this.overAllClear, "mouseup", this.clearAll, this);
      EventHandler.add(this.inputElement, "paste", this.pasteHandler, this);
    };
    MultiSelect2.prototype.onInput = function(e) {
      if (this.keyDownStatus) {
        this.isValidKey = true;
      } else {
        this.isValidKey = false;
      }
      this.keyDownStatus = false;
      if (Browser.isDevice && Browser.info.name === "mozilla") {
        this.search(e);
      }
    };
    MultiSelect2.prototype.pasteHandler = function(event) {
      var _this = this;
      setTimeout(function() {
        _this.expandTextbox();
        _this.search(event);
      });
    };
    MultiSelect2.prototype.search = function(e) {
      var _this = this;
      this.resetFilteredData = true;
      if (!isNullOrUndefined(e)) {
        this.keyCode = e.keyCode;
      }
      if (!this.isPopupOpen() && this.openOnClick) {
        this.showPopup(e);
      }
      this.openClick(e);
      if (this.checkTextLength() && !this.allowFiltering && !isNullOrUndefined(e) && e.keyCode !== 8) {
        this.focusAtFirstListItem();
      } else {
        var text = this.targetElement();
        if (this.allowFiltering) {
          var eventArgs_1 = {
            preventDefaultAction: false,
            text: this.targetElement(),
            updateData: function(dataSource, query2, fields) {
              if (eventArgs_1.cancel) {
                return;
              }
              _this.isFiltered = true;
              _this.remoteFilterAction = true;
              _this.dataUpdater(dataSource, query2, fields);
            },
            event: e,
            cancel: false
          };
          this.trigger("filtering", eventArgs_1, function(eventArgs) {
            if (!eventArgs.cancel) {
              if (!_this.isFiltered && !eventArgs.preventDefaultAction) {
                _this.filterAction = true;
                _this.dataUpdater(_this.dataSource, null, _this.fields);
              }
            }
          });
        } else if (this.allowCustomValue) {
          var query = new Query();
          query = text !== "" ? query.where(this.fields.text, "startswith", text, this.ignoreCase, this.ignoreAccent) : query;
          this.dataUpdater(this.mainData, query, this.fields);
        } else {
          var liCollections = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-hide-listitem)");
          var activeElement = Search(this.targetElement(), liCollections, "StartsWith", this.ignoreCase);
          if (activeElement && activeElement.item !== null) {
            this.addListFocus(activeElement.item);
            this.list.scrollTop = activeElement.item.offsetHeight * activeElement.index;
          } else if (this.targetElement() !== "") {
            this.removeFocus();
          } else {
            this.focusAtFirstListItem();
          }
        }
      }
    };
    MultiSelect2.prototype.preRender = function() {
      if (this.allowFiltering === null) {
        this.allowFiltering = this.mode === "CheckBox" ? true : false;
      }
      this.initializeData();
      this.updateDataAttribute(this.htmlAttributes);
      _super.prototype.preRender.call(this);
    };
    MultiSelect2.prototype.getLocaleName = function() {
      return "multi-select";
    };
    MultiSelect2.prototype.initializeData = function() {
      this.mainListCollection = [];
      this.beforePopupOpen = false;
      this.filterAction = false;
      this.remoteFilterAction = false;
      this.isFirstClick = false;
      this.mobFilter = true;
      this.isFiltered = false;
      this.focused = true;
      this.initial = true;
      this.backCommand = true;
    };
    MultiSelect2.prototype.updateData = function(delimiterChar, e) {
      var data = "";
      var delim = this.mode === "Delimiter" || this.mode === "CheckBox";
      var text = [];
      var temp;
      var tempData = this.listData;
      this.listData = this.mainData;
      if (!isNullOrUndefined(this.hiddenElement)) {
        this.hiddenElement.innerHTML = "";
      }
      if (!isNullOrUndefined(this.value)) {
        var valueLength = this.value.length;
        var hiddenElementContent = "";
        for (var index = 0; index < valueLength; index++) {
          var valueItem = this.value[index];
          var listValue = this.findListElement(!isNullOrUndefined(this.mainList) ? this.mainList : this.ulElement, "li", "data-value", valueItem);
          if (isNullOrUndefined(listValue) && !this.allowCustomValue) {
            this.value.splice(index, 1);
            index -= 1;
            valueLength -= 1;
          } else {
            if (this.listData) {
              temp = this.getTextByValue(valueItem);
            } else {
              temp = valueItem;
            }
            data += temp + delimiterChar + " ";
            text.push(temp);
          }
          hiddenElementContent += '<option selected value="' + valueItem + '">' + index + "</option>";
        }
        if (!isNullOrUndefined(this.hiddenElement)) {
          this.hiddenElement.innerHTML = hiddenElementContent;
        }
      }
      this.setProperties({ text: text.toString() }, true);
      if (delim) {
        this.updateWrapperText(this.delimiterWrapper, data);
        this.delimiterWrapper.setAttribute("id", getUniqueID("delim_val"));
        this.inputElement.setAttribute("aria-labelledby", this.delimiterWrapper.id);
      }
      var targetEle = e && e.target;
      var isClearAll = targetEle && targetEle.classList.contains("e-close-hooker") ? true : null;
      if (!this.changeOnBlur && (e && !isClearAll) || this.isSelectAll) {
        this.isSelectAll = false;
        this.updateValueState(e, this.value, this.tempValues);
      }
      this.listData = tempData;
      this.addValidInputClass();
    };
    MultiSelect2.prototype.initialTextUpdate = function() {
      if (!isNullOrUndefined(this.text)) {
        var textArr = this.text.split(this.delimiterChar);
        var textVal = [];
        for (var index = 0; textArr.length > index; index++) {
          var val = this.getValueByText(textArr[index]);
          if (!isNullOrUndefined(val)) {
            textVal.push(val);
          } else if (this.allowCustomValue) {
            textVal.push(textArr[index]);
          }
        }
        if (textVal && textVal.length) {
          this.setProperties({ value: textVal }, true);
        }
      } else {
        this.setProperties({ value: null }, true);
      }
    };
    MultiSelect2.prototype.renderList = function(isEmptyData) {
      if (!isEmptyData && this.allowCustomValue && this.list && (this.list.textContent === this.noRecordsTemplate || this.list.querySelector(".e-ul") && this.list.querySelector(".e-ul").childElementCount === 0)) {
        isEmptyData = true;
      }
      _super.prototype.render.call(this, null, isEmptyData);
      this.unwireListEvents();
      this.wireListEvents();
    };
    MultiSelect2.prototype.initialValueUpdate = function() {
      if (this.list) {
        var text = void 0;
        var element2 = void 0;
        var value = void 0;
        if (this.chipCollectionWrapper) {
          this.chipCollectionWrapper.innerHTML = "";
        }
        this.removeListSelection();
        if (!isNullOrUndefined(this.value)) {
          for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
            value = this.value[index];
            element2 = this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", value);
            text = this.getTextByValue(value);
            if (element2 && element2.getAttribute("aria-selected") !== "true" || element2 && (element2.getAttribute("aria-selected") === "true" && this.hideSelectedItem) && (this.mode === "Box" || this.mode === "Default")) {
              this.addChip(text, value);
              this.addListSelection(element2);
            } else if (value && this.allowCustomValue) {
              var indexItem = this.listData.length;
              var newValue = {};
              setValue(this.fields.text, value, newValue);
              setValue(this.fields.value, value, newValue);
              var noDataEle = this.popupWrapper.querySelector("." + dropDownBaseClasses.noData);
              this.addItem(newValue, indexItem);
              element2 = element2 ? element2 : this.findListElement(this.hideSelectedItem ? this.ulElement : this.list, "li", "data-value", value);
              if (this.popupWrapper.contains(noDataEle)) {
                this.list.setAttribute("style", noDataEle.getAttribute("style"));
                this.popupWrapper.replaceChild(this.list, noDataEle);
                this.wireListEvents();
              }
              this.addChip(text, value);
              this.addListSelection(element2);
            }
          }
        }
        if (this.mode === "CheckBox") {
          this.updateDelimView();
          if (this.changeOnBlur) {
            this.updateValueState(null, this.value, this.tempValues);
          }
          this.updateDelimeter(this.delimiterChar);
          this.refreshInputHight();
        } else {
          this.updateDelimeter(this.delimiterChar);
        }
        if (this.mode === "CheckBox" && this.showSelectAll && (isNullOrUndefined(this.value) || !this.value.length)) {
          this.notify("checkSelectAll", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", value: "uncheck" });
        }
        if (this.mode === "Box" || this.mode === "Default" && this.inputFocus) {
          this.chipCollectionWrapper.style.display = "";
        } else if (this.mode === "Delimiter" || this.mode === "CheckBox") {
          this.showDelimWrapper();
        }
      }
    };
    MultiSelect2.prototype.updateActionCompleteData = function(li, item) {
      if (this.value && this.value.indexOf(li.getAttribute("data-value")) > -1) {
        this.mainList = this.ulElement;
        if (this.hideSelectedItem) {
          addClass([li], HIDE_LIST);
        }
      }
    };
    MultiSelect2.prototype.updateAddItemList = function(list, itemCount) {
      if (this.popupObj && this.popupObj.element && this.popupObj.element.querySelector("." + dropDownBaseClasses.noData) && list) {
        this.list = list;
        this.mainList = this.ulElement = list.querySelector("ul");
        remove(this.popupWrapper.querySelector(".e-content"));
        this.popupObj = null;
        this.renderPopup();
      } else if (this.allowCustomValue) {
        this.list = list;
        this.mainList = this.ulElement = list.querySelector("ul");
      }
    };
    MultiSelect2.prototype.updateDataList = function() {
      if (this.mainList && this.ulElement && !(this.isFiltered || this.filterAction || this.targetElement().trim())) {
        var isDynamicGroupItemUpdate = this.mainList.childElementCount < this.ulElement.childElementCount;
        var isReactTemplateUpdate = this.ulElement.childElementCount > 0 && this.ulElement.children[0].childElementCount > 0 && this.mainList.children[0].childElementCount < this.ulElement.children[0].childElementCount;
        var isAngularTemplateUpdate = this.itemTemplate && this.ulElement.childElementCount > 0 && !(this.ulElement.childElementCount < this.mainList.childElementCount) && (this.ulElement.children[0].childElementCount > 0 || this.fields.groupBy && this.ulElement.children[1] && this.ulElement.children[1].childElementCount > 0);
        if (isDynamicGroupItemUpdate || isReactTemplateUpdate || isAngularTemplateUpdate) {
          this.mainList = this.ulElement;
        }
      }
    };
    MultiSelect2.prototype.isValidLI = function(li) {
      return li && !li.classList.contains(dropDownBaseClasses.disabled) && !li.classList.contains(dropDownBaseClasses.group) && li.classList.contains(dropDownBaseClasses.li);
    };
    MultiSelect2.prototype.updateListSelection = function(li, e, length) {
      var customVal = li.getAttribute("data-value");
      var value = this.getFormattedValue(customVal);
      if (this.allowCustomValue && (customVal !== "false" && value === false || !isNullOrUndefined(value) && value.toString() === "NaN")) {
        value = customVal;
      }
      this.removeHover();
      if (!this.value || this.value.indexOf(value) === -1) {
        this.dispatchSelect(value, e, li, li.getAttribute("aria-selected") === "true", length);
      } else {
        this.removeValue(value, e, length);
      }
    };
    MultiSelect2.prototype.updateListSelectEventCallback = function(value, li, e) {
      var _this = this;
      var text = this.getTextByValue(value);
      if ((this.allowCustomValue || this.allowFiltering) && !this.findListElement(this.mainList, "li", "data-value", value)) {
        var temp_1 = li.cloneNode(true);
        var fieldValue = this.fields.value ? this.fields.value : "value";
        if (this.allowCustomValue && this.mainData.length && typeof getValue(fieldValue, this.mainData[0]) === "number") {
          value = !isNaN(parseFloat(value.toString())) ? parseFloat(value.toString()) : value;
        }
        var data_1 = this.getDataByValue(value);
        var eventArgs = {
          newData: data_1,
          cancel: false
        };
        this.trigger("customValueSelection", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            append([temp_1], _this.mainList);
            _this.mainData.push(data_1);
            _this.remoteCustomValue = false;
            _this.addValue(value, text, e);
          }
        });
      } else {
        this.remoteCustomValue = false;
        this.addValue(value, text, e);
      }
    };
    MultiSelect2.prototype.removeListSelection = function() {
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      var selectedItems = this.list.querySelectorAll("." + className);
      var temp = selectedItems.length;
      if (selectedItems && selectedItems.length) {
        removeClass(selectedItems, className);
        while (temp > 0) {
          selectedItems[temp - 1].setAttribute("aria-selected", "false");
          temp--;
        }
      }
      if (!isNullOrUndefined(this.mainList)) {
        var selectItems = this.mainList.querySelectorAll("." + className);
        var temp1 = selectItems.length;
        if (selectItems && selectItems.length) {
          removeClass(selectItems, className);
          while (temp1 > 0) {
            selectItems[temp1 - 1].setAttribute("aria-selected", "false");
            if (this.mode === "CheckBox") {
              if (selectedItems && selectedItems.length > temp1 - 1) {
                removeClass([selectedItems[temp1 - 1].firstElementChild.lastElementChild], "e-check");
              }
              removeClass([selectItems[temp1 - 1].firstElementChild.lastElementChild], "e-check");
            }
            temp1--;
          }
        }
      }
    };
    MultiSelect2.prototype.removeHover = function() {
      var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, dropDownBaseClasses.hover);
      }
    };
    MultiSelect2.prototype.removeFocus = function() {
      if (this.list && this.mainList) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.focus);
        var mainlist = this.mainList.querySelectorAll("." + dropDownBaseClasses.focus);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.focus);
          removeClass(mainlist, dropDownBaseClasses.focus);
        }
      }
    };
    MultiSelect2.prototype.addListHover = function(li) {
      if (this.enabled && this.isValidLI(li)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      } else {
        if (li !== null && li.classList.contains("e-list-group-item") && this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
          this.removeHover();
          addClass([li], dropDownBaseClasses.hover);
        }
      }
    };
    MultiSelect2.prototype.addListFocus = function(element2) {
      if (this.enabled && this.isValidLI(element2)) {
        this.removeFocus();
        addClass([element2], dropDownBaseClasses.focus);
        this.updateAriaActiveDescendant();
      } else {
        if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
          addClass([element2], dropDownBaseClasses.focus);
          this.updateAriaActiveDescendant();
        }
      }
    };
    MultiSelect2.prototype.addListSelection = function(element2, mainElement) {
      var className = this.hideSelectedItem ? HIDE_LIST : dropDownBaseClasses.selected;
      if (this.isValidLI(element2) && !element2.classList.contains(dropDownBaseClasses.hover)) {
        addClass([element2], className);
        this.updateMainList(false, element2.getAttribute("data-value"), mainElement);
        element2.setAttribute("aria-selected", "true");
        if (this.mode === "CheckBox" && element2.classList.contains("e-active")) {
          var ariaCheck = element2.getElementsByClassName("e-check").length;
          if (ariaCheck === 0) {
            this.notify("updatelist", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", li: element2, e: this });
          }
        }
        this.notify("activeList", { module: "CheckBoxSelection", enable: this.mode === "CheckBox", li: element2, e: this });
        if (this.chipCollectionWrapper) {
          this.removeChipSelection();
        }
        this.selectedElementID = element2.id;
      }
    };
    MultiSelect2.prototype.updateDelimeter = function(delimChar, e) {
      this.updateData(delimChar, e);
    };
    MultiSelect2.prototype.onMouseClick = function(e) {
      var _this = this;
      this.keyCode = null;
      this.scrollFocusStatus = false;
      var target = e.target;
      var li = closest(target, "." + dropDownBaseClasses.li);
      var headerLi = closest(target, "." + dropDownBaseClasses.group);
      if (headerLi && this.enableGroupCheckBox && this.mode === "CheckBox" && this.fields.groupBy) {
        target = target.classList.contains("e-list-group-item") ? target.firstElementChild.lastElementChild : e.target;
        if (target.classList.contains("e-check")) {
          this.selectAllItem(false, e);
          target.classList.remove("e-check");
          target.classList.remove("e-stop");
          closest(target, ".e-list-group-item").classList.remove("e-active");
          target.setAttribute("aria-selected", "false");
        } else {
          this.selectAllItem(true, e);
          target.classList.remove("e-stop");
          target.classList.add("e-check");
          closest(target, ".e-list-group-item").classList.add("e-active");
          target.setAttribute("aria-selected", "true");
        }
        this.refreshSelection();
        this.checkSelectAll();
      } else {
        if (this.isValidLI(li)) {
          var limit = this.value && this.value.length ? this.value.length : 0;
          if (li.classList.contains("e-active")) {
            limit = limit - 1;
          }
          if (limit < this.maximumSelectionLength) {
            this.updateListSelection(li, e);
            this.checkPlaceholderSize();
            this.addListFocus(li);
            if ((this.allowCustomValue || this.allowFiltering) && this.mainList && this.listData) {
              if (this.mode !== "CheckBox") {
                this.focusAtLastListItem(li.getAttribute("data-value"));
                this.refreshSelection();
              }
            } else {
              this.makeTextBoxEmpty();
            }
          }
          if (this.mode === "CheckBox") {
            this.updateDelimView();
            if (this.value && this.value.length > 50) {
              setTimeout(function() {
                _this.updateDelimeter(_this.delimiterChar, e);
              }, 0);
            } else {
              this.updateDelimeter(this.delimiterChar, e);
            }
            this.refreshInputHight();
          } else {
            this.updateDelimeter(this.delimiterChar, e);
          }
          this.checkSelectAll();
          this.refreshPopup();
          if (this.hideSelectedItem) {
            this.focusAtFirstListItem();
          }
          if (this.closePopupOnSelect) {
            this.hidePopup(e);
          } else {
            e.preventDefault();
          }
          this.makeTextBoxEmpty();
          this.findGroupStart(target);
          if (this.mode !== "CheckBox") {
            this.refreshListItems(isNullOrUndefined(li) ? null : li.textContent);
          }
        } else {
          e.preventDefault();
        }
        this.refreshPlaceHolder();
        this.deselectHeader();
      }
    };
    MultiSelect2.prototype.findGroupStart = function(target) {
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        var count = 0;
        var liChecked = 0;
        var liUnchecked = 0;
        var groupValues = void 0;
        if (this.itemTemplate && !target.getElementsByClassName("e-frame").length) {
          while (!target.getElementsByClassName("e-frame").length) {
            target = target.parentElement;
          }
        }
        if (target.classList.contains("e-frame")) {
          target = target.parentElement.parentElement;
        }
        groupValues = this.findGroupAttrtibutes(target, liChecked, liUnchecked, count, 0);
        groupValues = this.findGroupAttrtibutes(target, groupValues[0], groupValues[1], groupValues[2], 1);
        while (!target.classList.contains("e-list-group-item")) {
          if (target.classList.contains("e-list-icon")) {
            target = target.parentElement;
          }
          target = target.previousElementSibling;
          if (target == null) {
            break;
          }
        }
        this.updateCheckBox(target, groupValues[0], groupValues[1], groupValues[2]);
      }
    };
    MultiSelect2.prototype.findGroupAttrtibutes = function(listElement, checked, unChecked, count, position) {
      while (!listElement.classList.contains("e-list-group-item")) {
        if (listElement.classList.contains("e-list-icon")) {
          listElement = listElement.parentElement;
        }
        if (listElement.getElementsByClassName("e-frame")[0].classList.contains("e-check") && listElement.classList.contains("e-list-item")) {
          checked++;
        } else if (listElement.classList.contains("e-list-item")) {
          unChecked++;
        }
        count++;
        listElement = position ? listElement.nextElementSibling : listElement.previousElementSibling;
        if (listElement == null) {
          break;
        }
      }
      return [checked, unChecked, count];
    };
    MultiSelect2.prototype.updateCheckBox = function(groupHeader, checked, unChecked, count) {
      if (groupHeader === null) {
        return;
      }
      var checkBoxElement = groupHeader.getElementsByClassName("e-frame")[0];
      if (count === checked) {
        checkBoxElement.classList.remove("e-stop");
        checkBoxElement.classList.add("e-check");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        groupHeader.setAttribute("aria-selected", "true");
      } else if (count === unChecked) {
        checkBoxElement.classList.remove("e-check");
        checkBoxElement.classList.remove("e-stop");
        closest(checkBoxElement, ".e-list-group-item").classList.remove("e-active");
        groupHeader.setAttribute("aria-selected", "false");
      } else if (this.maximumSelectionLength === checked - 1) {
        checkBoxElement.classList.remove("e-stop");
        groupHeader.setAttribute("aria-selected", "true");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        checkBoxElement.classList.add("e-check");
      } else {
        checkBoxElement.classList.remove("e-check");
        checkBoxElement.classList.add("e-stop");
        closest(checkBoxElement, ".e-list-group-item").classList.add("e-active");
        groupHeader.setAttribute("aria-selected", "false");
      }
    };
    MultiSelect2.prototype.deselectHeader = function() {
      var limit = this.value && this.value.length ? this.value.length : 0;
      var collection = this.list.querySelectorAll("li.e-list-group-item:not(.e-active)");
      if (limit < this.maximumSelectionLength) {
        removeClass(collection, "e-disable");
      }
      if (limit === this.maximumSelectionLength) {
        addClass(collection, "e-disable");
      }
    };
    MultiSelect2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      if (currentLi === null && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy) && this.enableGroupCheckBox) {
        currentLi = closest(e.target, "." + dropDownBaseClasses.group);
      }
      this.addListHover(currentLi);
    };
    MultiSelect2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    MultiSelect2.prototype.onListMouseDown = function(e) {
      e.preventDefault();
      this.scrollFocusStatus = true;
    };
    MultiSelect2.prototype.onDocumentClick = function(e) {
      if (this.mode !== "CheckBox") {
        var target = e.target;
        if (!(!isNullOrUndefined(this.popupObj) && closest(target, '[id="' + this.popupObj.element.id + '"]')) && !this.overAllWrapper.contains(e.target)) {
          this.scrollFocusStatus = false;
        } else {
          this.scrollFocusStatus = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.inputElement;
        }
      }
    };
    MultiSelect2.prototype.wireListEvents = function() {
      if (!isNullOrUndefined(this.list)) {
        EventHandler.add(document, "mousedown", this.onDocumentClick, this);
        EventHandler.add(this.list, "mousedown", this.onListMouseDown, this);
        EventHandler.add(this.list, "mouseup", this.onMouseClick, this);
        EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
      }
    };
    MultiSelect2.prototype.unwireListEvents = function() {
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      if (this.list) {
        EventHandler.remove(this.list, "mousedown", this.onListMouseDown);
        EventHandler.remove(this.list, "mouseup", this.onMouseClick);
        EventHandler.remove(this.list, "mouseover", this.onMouseOver);
        EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
      }
    };
    MultiSelect2.prototype.hideOverAllClear = function() {
      if (!this.value || !this.value.length || this.inputElement.value === "") {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.showOverAllClear = function() {
      if ((this.value && this.value.length || this.inputElement.value !== "") && this.showClearButton && this.readonly !== true) {
        this.overAllClear.style.display = "";
      } else {
        this.overAllClear.style.display = "none";
      }
    };
    MultiSelect2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
      }
    };
    MultiSelect2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement && this.enabled) {
        this.inputElement.blur();
      }
    };
    MultiSelect2.prototype.showSpinner = function() {
      if (isNullOrUndefined(this.spinnerElement)) {
        var filterClear = this.filterParent && this.filterParent.querySelector(".e-clear-icon.e-icons");
        if (this.overAllClear.style.display !== "none" || filterClear) {
          this.spinnerElement = filterClear ? filterClear : this.overAllClear;
        } else {
          this.spinnerElement = this.createElement("span", { className: CLOSEICON_CLASS2 + " " + SPINNER_CLASS2 });
          this.componentWrapper.appendChild(this.spinnerElement);
        }
        createSpinner({ target: this.spinnerElement, width: Browser.isDevice ? "16px" : "14px" }, this.createElement);
        addClass([this.spinnerElement], DISABLE_ICON);
        showSpinner(this.spinnerElement);
      }
    };
    MultiSelect2.prototype.hideSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
        removeClass([this.spinnerElement], DISABLE_ICON);
        if (this.spinnerElement.classList.contains(SPINNER_CLASS2)) {
          detach(this.spinnerElement);
        } else {
          this.spinnerElement.innerHTML = "";
        }
        this.spinnerElement = null;
      }
    };
    MultiSelect2.prototype.updateWrapperText = function(wrapperType, wrapperData) {
      if (this.valueTemplate || !this.enableHtmlSanitizer) {
        wrapperType.innerHTML = wrapperData;
      } else {
        wrapperType.innerText = SanitizeHtmlHelper.sanitize(wrapperData);
      }
    };
    MultiSelect2.prototype.updateDelimView = function() {
      if (this.delimiterWrapper) {
        this.hideDelimWrapper();
      }
      if (this.chipCollectionWrapper) {
        this.chipCollectionWrapper.style.display = "none";
      }
      if (!isNullOrUndefined(this.viewWrapper)) {
        this.viewWrapper.style.display = "";
        this.viewWrapper.style.width = "";
        this.viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER2);
      }
      if (this.value && this.value.length) {
        var data = "";
        var temp = void 0;
        var tempData = void 0;
        var tempIndex = 1;
        var wrapperleng = void 0;
        var remaining = void 0;
        var downIconWidth = 0;
        var overAllContainer = void 0;
        this.updateWrapperText(this.viewWrapper, data);
        var l10nLocale = {
          noRecordsTemplate: "No records found",
          actionFailureTemplate: "Request failed",
          overflowCountTemplate: "+${count} more..",
          totalCountTemplate: "${count} selected"
        };
        var l10n = new L10n(this.getLocaleName(), l10nLocale, this.locale);
        if (l10n.getConstant("actionFailureTemplate") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.locale);
        }
        if (l10n.getConstant("noRecordsTemplate") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.locale);
        }
        var remainContent = l10n.getConstant("overflowCountTemplate");
        var totalContent = l10n.getConstant("totalCountTemplate");
        var raminElement = this.createElement("span", {
          className: REMAIN_WRAPPER2
        });
        var remainCompildTemp = remainContent.replace("${count}", this.value.length.toString());
        raminElement.innerText = remainCompildTemp;
        this.viewWrapper.appendChild(raminElement);
        this.renderReactTemplates();
        var remainSize = raminElement.offsetWidth;
        remove(raminElement);
        if (this.showDropDownIcon) {
          downIconWidth = this.dropIcon.offsetWidth + parseInt(window.getComputedStyle(this.dropIcon).marginRight, 10);
        }
        this.checkClearIconWidth();
        if (!isNullOrUndefined(this.value)) {
          for (var index = 0; !isNullOrUndefined(this.value[index]); index++) {
            data += index === 0 ? "" : this.delimiterChar + " ";
            temp = this.getOverflowVal(index);
            data += temp;
            temp = this.viewWrapper.innerHTML;
            this.updateWrapperText(this.viewWrapper, data);
            wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
            overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);
            if (wrapperleng + downIconWidth + this.clearIconWidth > overAllContainer) {
              if (tempData !== void 0 && tempData !== "") {
                temp = tempData;
                index = tempIndex + 1;
              }
              this.updateWrapperText(this.viewWrapper, temp);
              remaining = this.value.length - index;
              wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
              while (wrapperleng + remainSize + downIconWidth + this.clearIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.innerHTML !== "") {
                var textArr = [];
                this.viewWrapper.innerHTML = textArr.join(this.delimiterChar);
                remaining = this.value.length;
                wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
              }
              break;
            } else if (wrapperleng + remainSize + downIconWidth + this.clearIconWidth <= overAllContainer) {
              tempData = data;
              tempIndex = index;
            } else if (index === 0) {
              tempData = "";
              tempIndex = -1;
            }
          }
        }
        if (remaining > 0) {
          var totalWidth = overAllContainer - downIconWidth - this.clearIconWidth;
          this.viewWrapper.appendChild(this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth));
          this.updateRemainWidth(this.viewWrapper, totalWidth);
          this.updateRemainingText(raminElement, downIconWidth, remaining, remainContent, totalContent);
        }
      } else {
        if (!isNullOrUndefined(this.viewWrapper)) {
          this.viewWrapper.innerHTML = "";
          this.viewWrapper.style.display = "none";
        }
      }
    };
    MultiSelect2.prototype.checkClearIconWidth = function() {
      if (this.showClearButton) {
        this.clearIconWidth = this.overAllClear.offsetWidth;
      }
    };
    MultiSelect2.prototype.updateRemainWidth = function(viewWrapper, totalWidth) {
      if (viewWrapper.classList.contains(TOTAL_COUNT_WRAPPER2) && totalWidth < viewWrapper.offsetWidth + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10) + parseInt(window.getComputedStyle(viewWrapper).paddingLeft, 10)) {
        viewWrapper.style.width = totalWidth + "px";
      }
    };
    MultiSelect2.prototype.updateRemainTemplate = function(raminElement, viewWrapper, remaining, remainContent, totalContent, totalWidth) {
      if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 && viewWrapper.firstChild.nodeValue === "") {
        viewWrapper.removeChild(viewWrapper.firstChild);
      }
      raminElement.innerHTML = "";
      var remainTemp = remainContent.replace("${count}", remaining.toString());
      var totalTemp = totalContent.replace("${count}", remaining.toString());
      raminElement.innerText = viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3 ? remainTemp : totalTemp;
      if (viewWrapper.firstChild && viewWrapper.firstChild.nodeType === 3) {
        viewWrapper.classList.remove(TOTAL_COUNT_WRAPPER2);
      } else {
        viewWrapper.classList.add(TOTAL_COUNT_WRAPPER2);
        this.updateRemainWidth(viewWrapper, totalWidth);
      }
      return raminElement;
    };
    MultiSelect2.prototype.updateRemainingText = function(raminElement, downIconWidth, remaining, remainContent, totalContent) {
      var overAllContainer = this.componentWrapper.offsetWidth - parseInt(window.getComputedStyle(this.componentWrapper).paddingLeft, 10) - parseInt(window.getComputedStyle(this.componentWrapper).paddingRight, 10);
      var wrapperleng = this.viewWrapper.offsetWidth + parseInt(window.getComputedStyle(this.viewWrapper).paddingRight, 10);
      if (wrapperleng + downIconWidth >= overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
        while (wrapperleng + downIconWidth > overAllContainer && wrapperleng !== 0 && this.viewWrapper.firstChild && this.viewWrapper.firstChild.nodeType === 3) {
          var textArr = this.viewWrapper.firstChild.nodeValue.split(this.delimiterChar);
          textArr.pop();
          this.viewWrapper.firstChild.nodeValue = textArr.join(this.delimiterChar);
          if (this.viewWrapper.firstChild.nodeValue === "") {
            this.viewWrapper.removeChild(this.viewWrapper.firstChild);
          }
          remaining++;
          wrapperleng = this.viewWrapper.offsetWidth;
        }
        var totalWidth = overAllContainer - downIconWidth;
        this.updateRemainTemplate(raminElement, this.viewWrapper, remaining, remainContent, totalContent, totalWidth);
      }
    };
    MultiSelect2.prototype.getOverflowVal = function(index) {
      var temp;
      if (this.mainData && this.mainData.length) {
        if (this.mode === "CheckBox") {
          var newTemp = this.listData;
          this.listData = this.mainData;
          temp = this.getTextByValue(this.value[index]);
          this.listData = newTemp;
        } else {
          temp = this.getTextByValue(this.value[index]);
        }
      } else {
        temp = this.value[index];
      }
      return temp;
    };
    MultiSelect2.prototype.unWireEvent = function() {
      if (!isNullOrUndefined(this.componentWrapper)) {
        EventHandler.remove(this.componentWrapper, "mousedown", this.wrapperClick);
      }
      EventHandler.remove(window, "resize", this.windowResize);
      if (!isNullOrUndefined(this.inputElement)) {
        EventHandler.remove(this.inputElement, "focus", this.focusInHandler);
        EventHandler.remove(this.inputElement, "keydown", this.onKeyDown);
        if (this.mode !== "CheckBox") {
          EventHandler.remove(this.inputElement, "input", this.onInput);
        }
        EventHandler.remove(this.inputElement, "keyup", this.keyUp);
        var formElement = closest(this.inputElement, "form");
        if (formElement) {
          EventHandler.remove(formElement, "reset", this.resetValueHandler);
        }
        EventHandler.remove(this.inputElement, "blur", this.onBlurHandler);
      }
      if (!isNullOrUndefined(this.componentWrapper)) {
        EventHandler.remove(this.componentWrapper, "mouseover", this.mouseIn);
        EventHandler.remove(this.componentWrapper, "mouseout", this.mouseOut);
      }
      if (!isNullOrUndefined(this.overAllClear)) {
        EventHandler.remove(this.overAllClear, "mousedown", this.clearAll);
      }
      if (!isNullOrUndefined(this.inputElement)) {
        EventHandler.remove(this.inputElement, "paste", this.pasteHandler);
      }
    };
    MultiSelect2.prototype.selectAllItem = function(state, event, list) {
      var li;
      if (!isNullOrUndefined(this.list)) {
        li = this.list.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide)');
      }
      if (this.value && this.value.length && event && event.target && closest(event.target, ".e-close-hooker") && this.allowFiltering) {
        li = this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide)');
      }
      if (this.enableGroupCheckBox && this.mode === "CheckBox" && !isNullOrUndefined(this.fields.groupBy)) {
        var target = event ? this.groupTemplate ? closest(event.target, ".e-list-group-item") : event.target : null;
        target = event && event.keyCode === 32 ? list : target;
        target = target && target.classList.contains("e-frame") ? target.parentElement.parentElement : target;
        if (target && target.classList.contains("e-list-group-item")) {
          var listElement = target.nextElementSibling;
          if (isNullOrUndefined(listElement)) {
            return;
          }
          while (listElement.classList.contains("e-list-item")) {
            if (state) {
              if (!listElement.firstElementChild.lastElementChild.classList.contains("e-check")) {
                var selectionLimit = this.value && this.value.length ? this.value.length : 0;
                if (listElement.classList.contains("e-active")) {
                  selectionLimit -= 1;
                }
                if (selectionLimit < this.maximumSelectionLength) {
                  this.updateListSelection(listElement, event);
                }
              }
            } else {
              if (listElement.firstElementChild.lastElementChild.classList.contains("e-check")) {
                this.updateListSelection(listElement, event);
              }
            }
            listElement = listElement.nextElementSibling;
            if (listElement == null) {
              break;
            }
          }
          if (target.classList.contains("e-list-group-item")) {
            var focusedElement = this.list.getElementsByClassName("e-item-focus")[0];
            if (focusedElement) {
              focusedElement.classList.remove("e-item-focus");
            }
            if (state) {
              target.classList.add("e-active");
            } else {
              target.classList.remove("e-active");
            }
            target.classList.add("e-item-focus");
            this.updateAriaActiveDescendant();
          }
          this.textboxValueUpdate();
          this.checkPlaceholderSize();
          if (!this.changeOnBlur && event) {
            this.updateValueState(event, this.value, this.tempValues);
          }
        } else {
          this.updateValue(event, li, state);
        }
      } else {
        this.updateValue(event, li, state);
      }
      this.addValidInputClass();
    };
    MultiSelect2.prototype.updateValue = function(event, li, state) {
      var _this = this;
      var length = li.length;
      var beforeSelectArgs = {
        event,
        items: state ? li : [],
        itemData: state ? this.listData : [],
        isInteracted: event ? true : false,
        isChecked: state,
        preventSelectEvent: false
      };
      this.trigger("beforeSelectAll", beforeSelectArgs);
      if (li && li.length) {
        var index_1 = 0;
        var count_1 = 0;
        if (this.enableGroupCheckBox) {
          count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : li.length;
        } else {
          count_1 = state ? this.maximumSelectionLength - (this.value ? this.value.length : 0) : this.maximumSelectionLength;
        }
        if (!beforeSelectArgs.preventSelectEvent) {
          while (index_1 < length && index_1 <= 50 && index_1 < count_1) {
            this.updateListSelection(li[index_1], event, length - index_1);
            if (this.enableGroupCheckBox) {
              this.findGroupStart(li[index_1]);
            }
            index_1++;
          }
          if (length > 50) {
            setTimeout(function() {
              while (index_1 < length && index_1 < count_1) {
                _this.updateListSelection(li[index_1], event, length - index_1);
                if (_this.enableGroupCheckBox) {
                  _this.findGroupStart(li[index_1]);
                }
                index_1++;
              }
              _this.updatedataValueItems(event);
              if (!_this.changeOnBlur) {
                _this.updateValueState(event, _this.value, _this.tempValues);
                _this.isSelectAll = _this.isSelectAll ? !_this.isSelectAll : _this.isSelectAll;
              }
              _this.updateHiddenElement();
            }, 0);
          }
        } else {
          for (var i = 0; i < li.length && i < count_1; i++) {
            this.removeHover();
            var customVal = li[i].getAttribute("data-value");
            var value = this.getFormattedValue(customVal);
            var mainElement = this.mainList ? this.mainList.querySelectorAll(state ? 'li.e-list-item:not([aria-selected="true"]):not(.e-reorder-hide)' : 'li.e-list-item[aria-selected="true"]:not(.e-reorder-hide)')[i] : null;
            if (state) {
              this.value = !this.value ? [] : this.value;
              if (this.value.indexOf(value) < 0) {
                this.setProperties({ value: [].concat([], this.value, [value]) }, true);
              }
              this.removeFocus();
              this.addListSelection(li[i], mainElement);
              this.updateChipStatus();
              this.checkMaxSelection();
            } else {
              this.removeAllItems(value, event, false, li[i], mainElement);
            }
            if (this.enableGroupCheckBox) {
              this.findGroupStart(li[i]);
            }
          }
          if (!state) {
            var limit = this.value && this.value.length ? this.value.length : 0;
            if (limit < this.maximumSelectionLength) {
              var collection = this.list.querySelectorAll("li." + dropDownBaseClasses.li + ":not(.e-active)");
              removeClass(collection, "e-disable");
            }
          }
          var args = {
            event,
            items: state ? li : [],
            itemData: state ? this.listData : [],
            isInteracted: event ? true : false,
            isChecked: state
          };
          this.trigger("selectedAll", args);
        }
      }
      this.updatedataValueItems(event);
      this.checkPlaceholderSize();
      if (length <= 50 && !beforeSelectArgs.preventSelectEvent) {
        if (!this.changeOnBlur) {
          this.updateValueState(event, this.value, this.tempValues);
          this.isSelectAll = this.isSelectAll ? !this.isSelectAll : this.isSelectAll;
        }
        this.updateHiddenElement();
      }
    };
    MultiSelect2.prototype.updateHiddenElement = function() {
      var _this = this;
      var hiddenValue = "";
      var wrapperText = "";
      var data = "";
      var text = [];
      if (this.mode === "CheckBox") {
        this.value.map(function(value, index) {
          hiddenValue += '<option selected value ="' + value + '">' + index + "</option>";
          if (_this.listData) {
            data = _this.getTextByValue(value);
          } else {
            data = value;
          }
          wrapperText += data + _this.delimiterChar + " ";
          text.push(data);
        });
        this.hiddenElement.innerHTML = hiddenValue;
        this.updateWrapperText(this.delimiterWrapper, wrapperText);
        this.delimiterWrapper.setAttribute("id", getUniqueID("delim_val"));
        this.inputElement.setAttribute("aria-labelledby", this.delimiterWrapper.id);
        this.setProperties({ text: text.toString() }, true);
        this.refreshInputHight();
        this.refreshPlaceHolder();
      }
    };
    MultiSelect2.prototype.updatedataValueItems = function(event) {
      this.deselectHeader();
      this.textboxValueUpdate(event);
    };
    MultiSelect2.prototype.textboxValueUpdate = function(event) {
      var isRemoveAll = event && event.target && (closest(event.target, ".e-selectall-parent") || closest(event.target, ".e-close-hooker"));
      if (this.mode !== "Box" && !this.isPopupOpen() && !(this.mode === "CheckBox" && (this.isSelectAll || isRemoveAll))) {
        this.updateDelimView();
      } else {
        this.searchWrapper.classList.remove(ZERO_SIZE);
      }
      if (this.mode === "CheckBox") {
        this.updateDelimView();
        if (!(isRemoveAll || this.isSelectAll)) {
          this.updateDelimeter(this.delimiterChar, event);
        }
        this.refreshInputHight();
      } else {
        this.updateDelimeter(this.delimiterChar, event);
      }
      this.refreshPlaceHolder();
    };
    MultiSelect2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.setProperties({ "zIndex": this.zIndex });
      }
    };
    MultiSelect2.prototype.updateDataSource = function(prop) {
      if (isNullOrUndefined(this.list)) {
        this.renderPopup();
      } else {
        this.resetList(this.dataSource);
      }
      if (this.value && this.value.length) {
        this.setProperties({ "value": this.value });
        this.refreshSelection();
      }
    };
    MultiSelect2.prototype.onLoadSelect = function() {
      this.setDynValue = true;
      this.renderPopup();
    };
    MultiSelect2.prototype.selectAllItems = function(state, event) {
      var _this = this;
      if (isNullOrUndefined(this.list)) {
        this.selectAllAction = function() {
          if (_this.mode === "CheckBox" && _this.showSelectAll) {
            var args2 = {
              module: "CheckBoxSelection",
              enable: _this.mode === "CheckBox",
              value: state ? "check" : "uncheck"
            };
            _this.notify("checkSelectAll", args2);
          }
          _this.selectAllItem(state, event);
          _this.selectAllAction = null;
        };
        _super.prototype.render.call(this);
      } else {
        this.selectAllAction = null;
        if (this.mode === "CheckBox" && this.showSelectAll) {
          var args = {
            value: state ? "check" : "uncheck",
            enable: this.mode === "CheckBox",
            module: "CheckBoxSelection"
          };
          this.notify("checkSelectAll", args);
        }
        this.selectAllItem(state, event);
      }
    };
    MultiSelect2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    MultiSelect2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (newProp.dataSource && !isNullOrUndefined(Object.keys(newProp.dataSource)) || newProp.query && !isNullOrUndefined(Object.keys(newProp.query))) {
        if (this.resetFilteredData) {
          this.resetMainList = !this.resetMainList ? this.mainList : this.resetMainList;
          this.resetFilteredData = false;
        }
        this.mainList = null;
        this.mainData = null;
        this.isFirstClick = false;
        this.isDynamicDataChange = true;
      }
      if (this.getModuleName() === "multiselect") {
        this.filterAction = false;
        this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "query":
          case "dataSource":
            if (this.mode === "CheckBox" && this.showSelectAll) {
              if (!isNullOrUndefined(this.popupObj)) {
                this.popupObj.destroy();
                this.popupObj = null;
              }
              this.renderPopup();
            }
            break;
          case "htmlAttributes":
            this.updateHTMLAttribute();
            break;
          case "showClearButton":
            this.updateClearButton(newProp.showClearButton);
            break;
          case "text":
            this.updateVal(this.value, this.value, "text");
            break;
          case "value":
            this.updateVal(this.value, oldProp.value, "value");
            this.addValidInputClass();
            if (!this.closePopupOnSelect && this.isPopupOpen()) {
              this.refreshPopup();
            }
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            break;
          case "width":
            this.setWidth(newProp.width);
            this.popupObj.setProperties({ width: this.calcPopupWidth() });
            break;
          case "placeholder":
            this.refreshPlaceHolder();
            break;
          case "filterBarPlaceholder":
            if (this.allowFiltering) {
              this.notify("filterBarPlaceholder", { filterBarPlaceholder: newProp.filterBarPlaceholder });
            }
            break;
          case "delimiterChar":
            if (this.mode !== "Box") {
              this.updateDelimView();
            }
            this.updateData(newProp.delimiterChar);
            break;
          case "cssClass":
            this.updateOldPropCssClass(oldProp.cssClass);
            this.updateCssClass();
            this.calculateWidth();
            break;
          case "enableRtl":
            this.enableRTL(newProp.enableRtl);
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            break;
          case "readonly":
            this.updateReadonly(newProp.readonly);
            this.hidePopup();
            break;
          case "enabled":
            this.hidePopup();
            this.enable(newProp.enabled);
            break;
          case "showSelectAll":
            if (this.popupObj) {
              this.popupObj.destroy();
              this.popupObj = null;
            }
            this.renderPopup();
            break;
          case "showDropDownIcon":
            this.dropDownIcon();
            break;
          case "floatLabelType":
            this.setFloatLabelType();
            this.addValidInputClass();
            Input.createSpanElement(this.overAllWrapper, this.createElement);
            this.calculateWidth();
            if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
              this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
            }
            break;
          case "enableSelectionOrder":
            break;
          case "selectAllText":
            this.notify("selectAllText", false);
            break;
          case "popupHeight":
            if (this.popupObj) {
              var overAllHeight = parseInt(this.popupHeight, 10);
              if (this.popupHeight !== "auto") {
                this.list.style.maxHeight = formatUnit(overAllHeight);
                this.popupWrapper.style.maxHeight = formatUnit(this.popupHeight);
              } else {
                this.list.style.maxHeight = formatUnit(this.popupHeight);
              }
            }
            break;
          case "headerTemplate":
          case "footerTemplate":
            this.reInitializePoup();
            break;
          case "allowFiltering":
            if (this.mode === "CheckBox" && this.popupObj) {
              this.reInitializePoup();
            }
            this.updateSelectElementData(this.allowFiltering);
            break;
          default:
            {
              var msProps = this.getPropObject(prop, newProp, oldProp);
              _super.prototype.onPropertyChanged.call(this, msProps.newProperty, msProps.oldProperty);
            }
            break;
        }
      }
    };
    MultiSelect2.prototype.reInitializePoup = function() {
      if (this.popupObj) {
        this.popupObj.destroy();
        this.popupObj = null;
      }
      this.renderPopup();
    };
    MultiSelect2.prototype.presentItemValue = function(ulElement) {
      var valuecheck = [];
      for (var i = 0; i < this.value.length; i++) {
        var checkEle = this.findListElement(this.allowFiltering && !isNullOrUndefined(this.mainList) ? this.mainList : ulElement, "li", "data-value", this.value[i]);
        if (!checkEle) {
          valuecheck.push(this.value[i]);
        }
      }
      return valuecheck;
    };
    ;
    MultiSelect2.prototype.addNonPresentItems = function(valuecheck, ulElement, list, event) {
      var _this = this;
      this.dataSource.executeQuery(this.getForQuery(valuecheck)).then(function(e) {
        if (e.result.length > 0) {
          _this.addItem(e.result, list.length);
        }
        _this.updateActionList(ulElement, list, event);
      });
    };
    ;
    MultiSelect2.prototype.updateVal = function(newProp, oldProp, prop) {
      if (!this.list) {
        this.onLoadSelect();
      } else if (this.dataSource instanceof DataManager && (!this.listData || !(this.mainList && this.mainData))) {
        this.onLoadSelect();
      } else {
        var valuecheck = [];
        if (!isNullOrUndefined(this.value) && !this.allowCustomValue) {
          valuecheck = this.presentItemValue(this.ulElement);
        }
        if (prop == "value" && valuecheck.length > 0 && this.dataSource instanceof DataManager && !isNullOrUndefined(this.value) && this.listData != null) {
          this.mainData = null;
          this.setDynValue = true;
          this.addNonPresentItems(valuecheck, this.ulElement, this.listData);
        } else {
          if (prop === "text") {
            this.initialTextUpdate();
            newProp = this.value;
          }
          if (isNullOrUndefined(this.value) || this.value.length === 0) {
            this.tempValues = oldProp;
          }
          if (this.allowCustomValue && (this.mode === "Default" || this.mode === "Box") && this.isReact && this.inputFocus && this.isPopupOpen() && this.mainData !== this.listData) {
            var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
            this.onActionComplete(list, this.mainData);
          }
          this.initialValueUpdate();
          if (this.mode !== "Box" && !this.inputFocus) {
            this.updateDelimView();
          }
          if (!this.inputFocus) {
            this.refreshInputHight();
          }
          this.refreshPlaceHolder();
          if (this.mode !== "CheckBox" && this.changeOnBlur) {
            this.updateValueState(null, newProp, oldProp);
          }
          this.checkPlaceholderSize();
        }
      }
      if (!this.changeOnBlur) {
        this.updateValueState(null, newProp, oldProp);
      }
    };
    MultiSelect2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    MultiSelect2.prototype.hidePopup = function(e) {
      var _this = this;
      var delay = 100;
      if (this.isPopupOpen()) {
        var animModel = {
          name: "FadeOut",
          duration: 100,
          delay: delay ? delay : 0
        };
        var eventArgs = { popup: this.popupObj, cancel: false, animation: animModel, event: e || null };
        this.trigger("close", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            if (_this.fields.groupBy && _this.mode !== "CheckBox" && _this.fixedHeaderElement) {
              remove(_this.fixedHeaderElement);
              _this.fixedHeaderElement = null;
            }
            _this.beforePopupOpen = false;
            _this.overAllWrapper.classList.remove(iconAnimation);
            _this.popupObj.hide(new Animation(eventArgs2.animation));
            attributes(_this.inputElement, { "aria-expanded": "false" });
            _this.inputElement.removeAttribute("aria-owns");
            _this.inputElement.removeAttribute("aria-activedescendant");
            if (_this.allowFiltering) {
              _this.notify("inputFocus", { module: "CheckBoxSelection", enable: _this.mode === "CheckBox", value: "clear" });
            }
            _this.popupObj.hide();
            removeClass([document.body, _this.popupObj.element], "e-popup-full-page");
            EventHandler.remove(_this.list, "keydown", _this.onKeyDown);
          }
        });
      }
    };
    MultiSelect2.prototype.showPopup = function(e) {
      var _this = this;
      if (!this.enabled) {
        return;
      }
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          if (!_this.ulElement) {
            _this.beforePopupOpen = true;
            _super.prototype.render.call(_this, e);
            if (_this.mode === "CheckBox" && Browser.isDevice && _this.allowFiltering) {
              _this.notify("popupFullScreen", { module: "CheckBoxSelection", enable: _this.mode === "CheckBox" });
            }
            return;
          }
          if (_this.mode === "CheckBox" && Browser.isDevice && _this.allowFiltering) {
            _this.notify("popupFullScreen", { module: "CheckBoxSelection", enable: _this.mode === "CheckBox" });
          }
          var mainLiLength = _this.ulElement.querySelectorAll("li.e-list-item").length;
          var liLength = _this.ulElement.querySelectorAll("li." + dropDownBaseClasses.li + "." + HIDE_LIST).length;
          if (mainLiLength > 0 && mainLiLength === liLength && liLength === _this.mainData.length && !(_this.targetElement() !== "" && _this.allowCustomValue)) {
            _this.beforePopupOpen = false;
            return;
          }
          _this.onPopupShown(e);
        }
      });
    };
    MultiSelect2.prototype.selectAll = function(state) {
      this.isSelectAll = true;
      this.selectAllItems(state);
    };
    MultiSelect2.prototype.getModuleName = function() {
      return "multiselect";
    };
    MultiSelect2.prototype.clear = function() {
      var _this = this;
      this.selectAll(false);
      if (this.value && this.value.length) {
        setTimeout(function() {
          _this.setProperties({ value: null }, true);
        }, 0);
      } else {
        this.setProperties({ value: null }, true);
      }
    };
    MultiSelect2.prototype.render = function() {
      this.setDynValue = this.initStatus = false;
      this.isSelectAll = false;
      this.selectAllEventEle = [];
      this.searchWrapper = this.createElement("span", { className: SEARCHBOX_WRAPPER + " " + (this.mode === "Box" ? BOX_ELEMENT : "") });
      this.viewWrapper = this.createElement("span", { className: DELIMITER_VIEW + " " + DELIMITER_WRAPPER, styles: "display:none;" });
      this.overAllClear = this.createElement("span", {
        className: CLOSEICON_CLASS2,
        styles: "display:none;"
      });
      this.componentWrapper = this.createElement("div", { className: ELEMENT_WRAPPER });
      this.overAllWrapper = this.createElement("div", { className: OVER_ALL_WRAPPER });
      if (this.mode === "CheckBox") {
        addClass([this.overAllWrapper], "e-checkbox");
      }
      if (Browser.isDevice) {
        this.componentWrapper.classList.add(ELEMENT_MOBILE_WRAPPER);
      }
      this.setWidth(this.width);
      this.overAllWrapper.appendChild(this.componentWrapper);
      this.popupWrapper = this.createElement("div", { id: this.element.id + "_popup", className: POPUP_WRAPPER });
      if (this.mode === "Delimiter" || this.mode === "CheckBox") {
        this.delimiterWrapper = this.createElement("span", { className: DELIMITER_WRAPPER, styles: "display:none" });
        this.componentWrapper.appendChild(this.delimiterWrapper);
      } else {
        this.chipCollectionWrapper = this.createElement("span", {
          className: CHIP_WRAPPER2,
          styles: "display:none"
        });
        if (this.mode === "Default") {
          this.chipCollectionWrapper.setAttribute("id", getUniqueID("chip_default"));
        } else if (this.mode === "Box") {
          this.chipCollectionWrapper.setAttribute("id", getUniqueID("chip_box"));
        }
        this.componentWrapper.appendChild(this.chipCollectionWrapper);
      }
      if (this.mode !== "Box") {
        this.componentWrapper.appendChild(this.viewWrapper);
      }
      this.componentWrapper.appendChild(this.searchWrapper);
      if (this.showClearButton && !Browser.isDevice) {
        this.componentWrapper.appendChild(this.overAllClear);
      } else {
        this.componentWrapper.classList.add(CLOSE_ICON_HIDE);
      }
      this.dropDownIcon();
      this.inputElement = this.createElement("input", {
        className: INPUT_ELEMENT,
        attrs: {
          spellcheck: "false",
          type: "text",
          autocomplete: "off",
          tabindex: "0",
          role: "combobox"
        }
      });
      if (this.mode === "Default" || this.mode === "Box") {
        this.inputElement.setAttribute("aria-labelledby", this.chipCollectionWrapper.id);
      }
      if (this.element.tagName !== this.getNgDirective()) {
        this.element.style.display = "none";
      }
      if (this.element.tagName === this.getNgDirective()) {
        this.element.appendChild(this.overAllWrapper);
        this.searchWrapper.appendChild(this.inputElement);
      } else {
        this.element.parentElement.insertBefore(this.overAllWrapper, this.element);
        this.searchWrapper.appendChild(this.inputElement);
        this.searchWrapper.appendChild(this.element);
        this.element.removeAttribute("tabindex");
      }
      if (this.floatLabelType !== "Never") {
        createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      } else if (this.floatLabelType === "Never") {
        this.refreshPlaceHolder();
      }
      this.addValidInputClass();
      this.element.style.opacity = "";
      var id = this.element.getAttribute("id") ? this.element.getAttribute("id") : getUniqueID("ej2_dropdownlist");
      this.element.id = id;
      this.hiddenElement = this.createElement("select", {
        attrs: { "aria-hidden": "true", "class": HIDDEN_ELEMENT, "tabindex": "-1", "multiple": "" }
      });
      this.componentWrapper.appendChild(this.hiddenElement);
      this.validationAttribute(this.element, this.hiddenElement);
      if (this.mode !== "CheckBox") {
        this.hideOverAllClear();
      }
      if (!isNullOrUndefined(closest(this.element, "fieldset")) && closest(this.element, "fieldset").disabled) {
        this.enabled = false;
      }
      this.wireEvent();
      this.enable(this.enabled);
      this.enableRTL(this.enableRtl);
      this.checkInitialValue();
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      Input.createSpanElement(this.overAllWrapper, this.createElement);
      this.calculateWidth();
      if (!isNullOrUndefined(this.overAllWrapper) && !isNullOrUndefined(this.overAllWrapper.getElementsByClassName("e-ddl-icon")[0] && this.overAllWrapper.getElementsByClassName("e-float-text-content")[0] && this.floatLabelType !== "Never")) {
        this.overAllWrapper.getElementsByClassName("e-float-text-content")[0].classList.add("e-icon");
      }
      this.renderComplete();
    };
    MultiSelect2.prototype.checkInitialValue = function() {
      var _this = this;
      var isData = this.dataSource instanceof Array ? this.dataSource.length > 0 : !isNullOrUndefined(this.dataSource);
      if (!(this.value && this.value.length) && isNullOrUndefined(this.text) && !isData && this.element.tagName === "SELECT" && this.element.options.length > 0) {
        var optionsElement = this.element.options;
        var valueCol = [];
        var textCol = "";
        for (var index = 0, optionsLen = optionsElement.length; index < optionsLen; index++) {
          var opt = optionsElement[index];
          if (!isNullOrUndefined(opt.getAttribute("selected"))) {
            if (opt.getAttribute("value")) {
              valueCol.push(opt.getAttribute("value"));
            } else {
              textCol += opt.text + this.delimiterChar;
            }
          }
        }
        if (valueCol.length > 0) {
          this.setProperties({ value: valueCol }, true);
        } else if (textCol !== "") {
          this.setProperties({ text: textCol }, true);
        }
        if (valueCol.length > 0 || textCol !== "") {
          this.refreshInputHight();
          this.refreshPlaceHolder();
        }
      }
      if (this.value && this.value.length || !isNullOrUndefined(this.text)) {
        if (!this.list) {
          _super.prototype.render.call(this);
        }
      }
      if (!isNullOrUndefined(this.text) && (isNullOrUndefined(this.value) || this.value.length === 0)) {
        this.initialTextUpdate();
      }
      if (this.value && this.value.length) {
        if (!(this.dataSource instanceof DataManager)) {
          this.initialValueUpdate();
          this.initialUpdate();
        } else {
          this.setInitialValue = function() {
            _this.initStatus = false;
            _this.initialValueUpdate();
            _this.initialUpdate();
            _this.setInitialValue = null;
            _this.initStatus = true;
          };
        }
        this.updateTempValue();
      } else {
        this.initialUpdate();
      }
      this.initStatus = true;
      this.checkAutoFocus();
      if (!isNullOrUndefined(this.text)) {
        this.element.setAttribute("data-initial-value", this.text);
      }
    };
    MultiSelect2.prototype.checkAutoFocus = function() {
      if (this.element.hasAttribute("autofocus")) {
        this.inputElement.focus();
      }
    };
    MultiSelect2.prototype.setFloatLabelType = function() {
      removeFloating(this.overAllWrapper, this.componentWrapper, this.searchWrapper, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      if (this.floatLabelType !== "Never") {
        createFloatLabel(this.overAllWrapper, this.searchWrapper, this.element, this.inputElement, this.value, this.floatLabelType, this.placeholder);
      }
    };
    MultiSelect2.prototype.addValidInputClass = function() {
      if (!isNullOrUndefined(this.overAllWrapper)) {
        if (!isNullOrUndefined(this.value) && this.value.length || this.floatLabelType === "Always") {
          addClass([this.overAllWrapper], "e-valid-input");
        } else {
          removeClass([this.overAllWrapper], "e-valid-input");
        }
      }
    };
    MultiSelect2.prototype.dropDownIcon = function() {
      if (this.showDropDownIcon) {
        this.dropIcon = this.createElement("span", { className: dropdownIcon });
        this.componentWrapper.appendChild(this.dropIcon);
        addClass([this.componentWrapper], ["e-down-icon"]);
      } else {
        if (!isNullOrUndefined(this.dropIcon)) {
          this.dropIcon.parentElement.removeChild(this.dropIcon);
          removeClass([this.componentWrapper], ["e-down-icon"]);
        }
      }
    };
    MultiSelect2.prototype.initialUpdate = function() {
      if (this.mode !== "Box" && !(this.setDynValue && this.mode === "Default" && this.inputFocus)) {
        this.updateDelimView();
      }
      this.updateCssClass();
      this.updateHTMLAttribute();
      this.updateReadonly(this.readonly);
      this.refreshInputHight();
      this.checkPlaceholderSize();
    };
    MultiSelect2.prototype.destroy = function() {
      if (this.isReact) {
        this.clearTemplate();
      }
      if (this.popupObj) {
        this.popupObj.hide();
      }
      this.notify(destroy2, {});
      this.unwireListEvents();
      this.unWireEvent();
      this.list = null;
      this.popupObj = null;
      this.mainList = null;
      this.mainData = null;
      this.filterParent = null;
      this.ulElement = null;
      this.mainListCollection = null;
      _super.prototype.destroy.call(this);
      var temp = ["readonly", "aria-disabled", "placeholder"];
      var length = temp.length;
      if (!isNullOrUndefined(this.inputElement)) {
        while (length > 0) {
          this.inputElement.removeAttribute(temp[length - 1]);
          length--;
        }
      }
      if (!isNullOrUndefined(this.element)) {
        this.element.removeAttribute("data-initial-value");
        this.element.style.display = "block";
      }
      if (this.overAllWrapper && this.overAllWrapper.parentElement) {
        if (this.overAllWrapper.parentElement.tagName === this.getNgDirective()) {
          remove(this.overAllWrapper);
        } else {
          this.overAllWrapper.parentElement.insertBefore(this.element, this.overAllWrapper);
          remove(this.overAllWrapper);
        }
      }
      this.componentWrapper = null;
      this.overAllClear = null;
      this.overAllWrapper = null;
      this.hiddenElement = null;
      this.searchWrapper = null;
      this.viewWrapper = null;
      this.chipCollectionWrapper = null;
      this.targetInputElement = null;
      this.popupWrapper = null;
      this.inputElement = null;
      this.delimiterWrapper = null;
      this.popupObj = null;
      this.popupWrapper = null;
      this.liCollections = null;
      this.header = null;
      this.mainList = null;
      this.mainListCollection = null;
      this.footer = null;
      this.selectAllEventEle = null;
    };
    __decorate35([
      Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)
    ], MultiSelect2.prototype, "fields", void 0);
    __decorate35([
      Property(false)
    ], MultiSelect2.prototype, "enablePersistence", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "groupTemplate", void 0);
    __decorate35([
      Property("No records found")
    ], MultiSelect2.prototype, "noRecordsTemplate", void 0);
    __decorate35([
      Property("Request failed")
    ], MultiSelect2.prototype, "actionFailureTemplate", void 0);
    __decorate35([
      Property("None")
    ], MultiSelect2.prototype, "sortOrder", void 0);
    __decorate35([
      Property(true)
    ], MultiSelect2.prototype, "enabled", void 0);
    __decorate35([
      Property(false)
    ], MultiSelect2.prototype, "enableHtmlSanitizer", void 0);
    __decorate35([
      Property([])
    ], MultiSelect2.prototype, "dataSource", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "query", void 0);
    __decorate35([
      Property("StartsWith")
    ], MultiSelect2.prototype, "filterType", void 0);
    __decorate35([
      Property(1e3)
    ], MultiSelect2.prototype, "zIndex", void 0);
    __decorate35([
      Property(false)
    ], MultiSelect2.prototype, "ignoreAccent", void 0);
    __decorate35([
      Property()
    ], MultiSelect2.prototype, "locale", void 0);
    __decorate35([
      Property(false)
    ], MultiSelect2.prototype, "enableGroupCheckBox", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "cssClass", void 0);
    __decorate35([
      Property("100%")
    ], MultiSelect2.prototype, "width", void 0);
    __decorate35([
      Property("300px")
    ], MultiSelect2.prototype, "popupHeight", void 0);
    __decorate35([
      Property("100%")
    ], MultiSelect2.prototype, "popupWidth", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "placeholder", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "filterBarPlaceholder", void 0);
    __decorate35([
      Property({})
    ], MultiSelect2.prototype, "htmlAttributes", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "valueTemplate", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "headerTemplate", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "footerTemplate", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "itemTemplate", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "allowFiltering", void 0);
    __decorate35([
      Property(true)
    ], MultiSelect2.prototype, "changeOnBlur", void 0);
    __decorate35([
      Property(false)
    ], MultiSelect2.prototype, "allowCustomValue", void 0);
    __decorate35([
      Property(true)
    ], MultiSelect2.prototype, "showClearButton", void 0);
    __decorate35([
      Property(1e3)
    ], MultiSelect2.prototype, "maximumSelectionLength", void 0);
    __decorate35([
      Property(false)
    ], MultiSelect2.prototype, "readonly", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "text", void 0);
    __decorate35([
      Property(null)
    ], MultiSelect2.prototype, "value", void 0);
    __decorate35([
      Property(true)
    ], MultiSelect2.prototype, "hideSelectedItem", void 0);
    __decorate35([
      Property(true)
    ], MultiSelect2.prototype, "closePopupOnSelect", void 0);
    __decorate35([
      Property("Default")
    ], MultiSelect2.prototype, "mode", void 0);
    __decorate35([
      Property(",")
    ], MultiSelect2.prototype, "delimiterChar", void 0);
    __decorate35([
      Property(true)
    ], MultiSelect2.prototype, "ignoreCase", void 0);
    __decorate35([
      Property(false)
    ], MultiSelect2.prototype, "showDropDownIcon", void 0);
    __decorate35([
      Property("Never")
    ], MultiSelect2.prototype, "floatLabelType", void 0);
    __decorate35([
      Property(false)
    ], MultiSelect2.prototype, "showSelectAll", void 0);
    __decorate35([
      Property("Select All")
    ], MultiSelect2.prototype, "selectAllText", void 0);
    __decorate35([
      Property("Unselect All")
    ], MultiSelect2.prototype, "unSelectAllText", void 0);
    __decorate35([
      Property(true)
    ], MultiSelect2.prototype, "enableSelectionOrder", void 0);
    __decorate35([
      Property(true)
    ], MultiSelect2.prototype, "openOnClick", void 0);
    __decorate35([
      Property(false)
    ], MultiSelect2.prototype, "addTagOnBlur", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "change", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "removing", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "removed", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "beforeSelectAll", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "selectedAll", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "beforeOpen", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "open", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "close", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "blur", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "focus", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "chipSelection", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "filtering", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "tagging", void 0);
    __decorate35([
      Event()
    ], MultiSelect2.prototype, "customValueSelection", void 0);
    MultiSelect2 = __decorate35([
      NotifyPropertyChanges
    ], MultiSelect2);
    return MultiSelect2;
  }(DropDownBase)
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/multi-select/checkbox-selection.js
var ICON4 = "e-icons";
var CHECKBOXFRAME3 = "e-frame";
var CHECK4 = "e-check";
var CHECKBOXWRAP3 = "e-checkbox-wrapper";
var INDETERMINATE3 = "e-stop";
var checkAllParent = "e-selectall-parent";
var searchBackIcon = "e-input-group-icon e-back-icon e-icons";
var filterBarClearIcon = "e-input-group-icon e-clear-icon e-icons";
var filterInput = "e-input-filter";
var filterParent = "e-filter-parent";
var mobileFilter = "e-ddl-device-filter";
var clearIcon = "e-clear-icon";
var popupFullScreen = "e-popup-full-page";
var device = "e-ddl-device";
var FOCUS3 = "e-input-focus";
var CheckBoxSelection = (
  /** @class */
  function() {
    function CheckBoxSelection2(parent) {
      this.activeLi = [];
      this.activeEle = [];
      this.parent = parent;
      this.removeEventListener();
      this.addEventListener();
    }
    CheckBoxSelection2.prototype.getModuleName = function() {
      return "CheckBoxSelection";
    };
    CheckBoxSelection2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on("updatelist", this.listSelection, this);
      this.parent.on("listoption", this.listOption, this);
      this.parent.on("selectAll", this.setSelectAll, this);
      this.parent.on("checkSelectAll", this.checkSelectAll, this);
      this.parent.on("searchBox", this.setSearchBox, this);
      this.parent.on("blur", this.onBlurHandler, this);
      this.parent.on("targetElement", this.targetElement, this);
      this.parent.on("deviceSearchBox", this.setDeviceSearchBox, this);
      this.parent.on("inputFocus", this.getFocus, this);
      this.parent.on("reOrder", this.setReorder, this);
      this.parent.on("activeList", this.getActiveList, this);
      this.parent.on("selectAllText", this.setLocale, this);
      this.parent.on("filterBarPlaceholder", this.setPlaceholder, this);
      EventHandler.add(document, "mousedown", this.onDocumentClick, this);
      this.parent.on("addItem", this.checboxCreate, this);
      this.parent.on("popupFullScreen", this.setPopupFullScreen, this);
    };
    CheckBoxSelection2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("updatelist", this.listSelection);
      this.parent.off("listoption", this.listOption);
      this.parent.off("selectAll", this.setSelectAll);
      this.parent.off("checkSelectAll", this.checkSelectAll);
      this.parent.off("searchBox", this.setSearchBox);
      this.parent.off("blur", this.onBlurHandler);
      this.parent.off("targetElement", this.targetElement);
      this.parent.off("deviceSearchBox", this.setDeviceSearchBox);
      this.parent.off("inputFocus", this.getFocus);
      this.parent.off("reOrder", this.setReorder);
      this.parent.off("activeList", this.getActiveList);
      this.parent.off("selectAllText", this.setLocale);
      this.parent.off("filterBarPlaceholder", this.setPlaceholder);
      this.parent.off("addItem", this.checboxCreate);
      this.parent.off("popupFullScreen", this.setPopupFullScreen);
    };
    CheckBoxSelection2.prototype.listOption = function(args) {
      var _this = this;
      if (isNullOrUndefined(this.parent.listCurrentOptions.itemCreated)) {
        this.parent.listCurrentOptions.itemCreated = function(e) {
          _this.checboxCreate(e);
        };
      } else {
        var itemCreated_1 = this.parent.listCurrentOptions.itemCreated;
        this.parent.listCurrentOptions.itemCreated = function(e) {
          _this.checboxCreate(e);
          itemCreated_1.apply(_this, [e]);
        };
      }
    };
    CheckBoxSelection2.prototype.setPlaceholder = function(props) {
      Input.setPlaceholder(props.filterBarPlaceholder, this.filterInput);
    };
    CheckBoxSelection2.prototype.checboxCreate = function(e) {
      var item;
      if (!isNullOrUndefined(e.item)) {
        item = e.item;
      } else {
        item = e;
      }
      if (this.parent.enableGroupCheckBox || item.className !== "e-list-group-item " && item.className !== "e-list-group-item") {
        var checkboxEle = createCheckBox(this.parent.createElement, true);
        var icon = select("div." + ICON4, item);
        item.insertBefore(checkboxEle, item.childNodes[isNullOrUndefined(icon) ? 0 : 1]);
        select("." + CHECKBOXFRAME3, checkboxEle);
        if (this.parent.enableGroupCheckBox) {
          this.parent.popupWrapper.classList.add("e-multiselect-group");
        }
        return item;
      } else {
        return item;
      }
    };
    CheckBoxSelection2.prototype.setSelectAll = function() {
      if (this.parent.showSelectAll) {
        if (isNullOrUndefined(this.checkAllParent)) {
          this.checkAllParent = this.parent.createElement("div", {
            className: checkAllParent
          });
          this.selectAllSpan = this.parent.createElement("span", {
            className: "e-all-text"
          });
          this.selectAllSpan.textContent = "";
          this.checkAllParent.appendChild(this.selectAllSpan);
          this.setLocale();
          this.checboxCreate(this.checkAllParent);
          if (this.parent.headerTemplate) {
            if (!isNullOrUndefined(this.parent.filterParent)) {
              append([this.checkAllParent], this.parent.filterParent);
            } else {
              append([this.checkAllParent], this.parent.popupWrapper);
            }
          }
          if (!this.parent.headerTemplate) {
            if (!isNullOrUndefined(this.parent.filterParent)) {
              this.parent.filterParent.parentNode.insertBefore(this.checkAllParent, this.parent.filterParent.nextSibling);
            } else {
              prepend([this.checkAllParent], this.parent.popupWrapper);
            }
          }
          EventHandler.add(this.checkAllParent, "mousedown", this.clickHandler, this);
        }
        if (this.parent.list.classList.contains("e-nodata") || this.parent.listData && this.parent.listData.length <= 1 && !this.parent.isDynamicDataChange || this.parent.isDynamicDataChange && this.parent.listData && this.parent.listData.length <= 1) {
          this.checkAllParent.style.display = "none";
        } else {
          this.checkAllParent.style.display = "block";
        }
        this.parent.selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
      } else if (!isNullOrUndefined(this.checkAllParent)) {
        this.checkAllParent.parentElement.removeChild(this.checkAllParent);
        this.checkAllParent = null;
      }
    };
    CheckBoxSelection2.prototype.destroy = function() {
      this.removeEventListener();
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.checkAllParent = null;
      this.clearIconElement = null;
      this.filterInput = null;
      this.filterInputObj = null;
      this.checkWrapper = null;
      this.selectAllSpan = null;
    };
    CheckBoxSelection2.prototype.listSelection = function(args) {
      var target;
      if (!isNullOrUndefined(args.e)) {
        var frameElm = args.li.querySelector(".e-checkbox-wrapper .e-frame");
        target = !isNullOrUndefined(args.e.target) ? args.e.target.classList.contains("e-frame") && (!this.parent.showSelectAll || this.checkAllParent && !this.checkAllParent.contains(args.e.target)) ? args.e.target : args.li.querySelector(".e-checkbox-wrapper").childNodes[1] : args.li.querySelector(".e-checkbox-wrapper").childNodes[1];
      } else {
        var checkboxWrapper = args.li.querySelector(".e-checkbox-wrapper");
        target = checkboxWrapper ? checkboxWrapper.childNodes[1] : args.li.lastElementChild.childNodes[1];
      }
      if (this.parent.itemTemplate || this.parent.enableGroupCheckBox) {
        target = args.li.firstElementChild.childNodes[1];
      }
      if (!isNullOrUndefined(target)) {
        this.checkWrapper = closest(target, "." + CHECKBOXWRAP3);
      }
      if (!isNullOrUndefined(this.checkWrapper)) {
        var checkElement = select("." + CHECKBOXFRAME3, this.checkWrapper);
        var selectAll2 = false;
        this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK4), args.li, args.e, selectAll2);
      }
    };
    CheckBoxSelection2.prototype.validateCheckNode = function(checkWrap, isCheck, li, e, selectAll2) {
      this.changeState(checkWrap, isCheck ? "uncheck" : "check", e, true, selectAll2);
    };
    CheckBoxSelection2.prototype.clickHandler = function(e) {
      var target;
      if (e.currentTarget.classList.contains(this.checkAllParent.className)) {
        target = e.currentTarget.firstElementChild.lastElementChild;
      } else {
        target = e.currentTarget;
      }
      this.checkWrapper = closest(target, "." + CHECKBOXWRAP3);
      var selectAll2 = true;
      if (!isNullOrUndefined(this.checkWrapper)) {
        var checkElement = select("." + CHECKBOXFRAME3, this.checkWrapper);
        this.validateCheckNode(this.checkWrapper, checkElement.classList.contains(CHECK4), null, e, selectAll2);
      }
      e.preventDefault();
    };
    CheckBoxSelection2.prototype.changeState = function(wrapper, state, e, isPrevent, selectAll2) {
      var ariaState;
      var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME3)[0];
      if (state === "check" && !frameSpan.classList.contains(CHECK4)) {
        frameSpan.classList.remove(INDETERMINATE3);
        frameSpan.classList.add(CHECK4);
        ariaState = "true";
        if (selectAll2) {
          this.parent.selectAllItems(true, e);
          this.setLocale(true);
        }
      } else if (state === "uncheck" && (frameSpan.classList.contains(CHECK4) || frameSpan.classList.contains(INDETERMINATE3))) {
        removeClass([frameSpan], [CHECK4, INDETERMINATE3]);
        ariaState = "false";
        if (selectAll2) {
          this.parent.selectAllItems(false, e);
          this.setLocale();
        }
      } else if (state === "indeterminate" && !frameSpan.classList.contains(INDETERMINATE3)) {
        removeClass([frameSpan], [CHECK4]);
        frameSpan.classList.add(INDETERMINATE3);
        ariaState = "false";
        if (selectAll2) {
          this.parent.selectAllItems(false, e);
          this.setLocale();
        }
      }
    };
    CheckBoxSelection2.prototype.setSearchBox = function(args) {
      if (isNullOrUndefined(this.parent.filterParent)) {
        this.parent.filterParent = this.parent.createElement("span", {
          className: filterParent
        });
        this.filterInput = this.parent.createElement("input", {
          attrs: { type: "text" },
          className: filterInput
        });
        this.parent.element.parentNode.insertBefore(this.filterInput, this.parent.element);
        var backIcon = false;
        if (Browser.isDevice) {
          backIcon = true;
          this.parent.mobFilter = false;
        }
        this.filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: backIcon ? [searchBackIcon, filterBarClearIcon] : [filterBarClearIcon],
          properties: { placeholder: this.parent.filterBarPlaceholder }
        }, this.parent.createElement);
        if (!isNullOrUndefined(this.parent.cssClass)) {
          if (this.parent.cssClass.split(" ").indexOf("e-outline") !== -1) {
            addClass([this.filterInputObj.container], "e-outline");
          } else if (this.parent.cssClass.split(" ").indexOf("e-filled") !== -1) {
            addClass([this.filterInputObj.container], "e-filled");
          }
        }
        append([this.filterInputObj.container], this.parent.filterParent);
        prepend([this.parent.filterParent], args.popupElement);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "role": "combobox",
          "autocomplete": "off",
          "autocapitalize": "off",
          "spellcheck": "false"
        });
        this.clearIconElement = this.filterInput.parentElement.querySelector("." + clearIcon);
        if (!Browser.isDevice && this.clearIconElement) {
          EventHandler.add(this.clearIconElement, "mousedown", this.clearText, this);
          this.clearIconElement.style.visibility = "hidden";
        }
        EventHandler.add(this.filterInput, "input", this.parent.onInput, this.parent);
        EventHandler.add(this.filterInput, "keyup", this.parent.keyUp, this.parent);
        EventHandler.add(this.filterInput, "keydown", this.parent.onKeyDown, this.parent);
        EventHandler.add(this.filterInput, "blur", this.onBlurHandler, this);
        EventHandler.add(this.filterInput, "paste", this.parent.pasteHandler, this.parent);
        this.parent.searchBoxHeight = this.filterInputObj.container.parentElement.getBoundingClientRect().height;
        return this.filterInputObj;
      }
    };
    CheckBoxSelection2.prototype.clickOnBackIcon = function(e) {
      this.parent.hidePopup();
      removeClass([document.body, this.parent.popupObj.element], popupFullScreen);
      this.parent.inputElement.focus();
    };
    CheckBoxSelection2.prototype.clearText = function(e) {
      this.parent.targetInputElement.value = "";
      if (this.parent.allowFiltering && this.parent.targetInputElement.value === "") {
        this.parent.search(null);
      }
      this.parent.refreshPopup();
      this.parent.refreshListItems(null);
      this.clearIconElement.style.visibility = "hidden";
      this.filterInput.focus();
      this.setReorder(e);
      e.preventDefault();
    };
    CheckBoxSelection2.prototype.setDeviceSearchBox = function() {
      this.parent.popupObj.element.classList.add(device);
      this.parent.popupObj.element.classList.add(mobileFilter);
      this.parent.popupObj.position = { X: 0, Y: 0 };
      this.parent.popupObj.dataBind();
      this.setSearchBoxPosition();
      this.backIconElement = this.filterInputObj.container.querySelector(".e-back-icon");
      this.clearIconElement = this.filterInputObj.container.querySelector("." + clearIcon);
      this.clearIconElement.style.visibility = "hidden";
      EventHandler.add(this.backIconElement, "click", this.clickOnBackIcon, this);
      EventHandler.add(this.clearIconElement, "click", this.clearText, this);
    };
    CheckBoxSelection2.prototype.setSearchBoxPosition = function() {
      var searchBoxHeight = this.filterInput.parentElement.getBoundingClientRect().height;
      var selectAllHeight = 0;
      if (this.checkAllParent) {
        selectAllHeight = this.checkAllParent.getBoundingClientRect().height;
      }
      this.parent.popupObj.element.style.maxHeight = "100%";
      this.parent.popupObj.element.style.width = "100%";
      this.parent.list.style.maxHeight = window.innerHeight - searchBoxHeight - selectAllHeight + "px";
      this.parent.list.style.height = window.innerHeight - searchBoxHeight - selectAllHeight + "px";
      var clearElement = this.filterInput.parentElement.querySelector("." + clearIcon);
      detach(this.filterInput);
      clearElement.parentElement.insertBefore(this.filterInput, clearElement);
    };
    CheckBoxSelection2.prototype.setPopupFullScreen = function() {
      attributes(this.parent.popupObj.element, { style: "left:0px;right:0px;top:0px;bottom:0px;" });
      addClass([document.body, this.parent.popupObj.element], popupFullScreen);
      this.parent.popupObj.element.style.maxHeight = "100%";
      this.parent.popupObj.element.style.width = "100%";
    };
    CheckBoxSelection2.prototype.targetElement = function() {
      if (!isNullOrUndefined(this.clearIconElement)) {
        this.parent.targetInputElement = this.filterInput;
        this.clearIconElement.style.visibility = this.parent.targetInputElement.value === "" ? "hidden" : "visible";
      }
      return this.parent.targetInputElement.value;
    };
    CheckBoxSelection2.prototype.onBlurHandler = function(e) {
      if (!this.parent.element.classList.contains("e-listbox")) {
        var target = void 0;
        if (this.parent.keyAction) {
          return;
        }
        if (Browser.isIE) {
          target = !isNullOrUndefined(e) && e.target;
        }
        if (!Browser.isIE) {
          target = !isNullOrUndefined(e) && e.relatedTarget;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && this.parent.popupObj.element.contains(target) && !Browser.isIE && this.filterInput) {
          this.filterInput.focus();
          return;
        }
        if (this.parent.scrollFocusStatus && this.filterInput) {
          e.preventDefault();
          this.filterInput.focus();
          this.parent.scrollFocusStatus = false;
          return;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close")) {
          this.parent.inputFocus = false;
          this.parent.updateValueState(e, this.parent.value, this.parent.tempValues);
          this.parent.dispatchEvent(this.parent.hiddenElement, "change");
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close")) {
          this.parent.inputFocus = false;
          this.parent.overAllWrapper.classList.remove(FOCUS3);
          this.parent.trigger("blur");
          this.parent.focused = true;
        }
        if (this.parent.popupObj && document.body.contains(this.parent.popupObj.element) && !this.parent.popupObj.element.classList.contains("e-popup-close") && !Browser.isDevice) {
          this.parent.hidePopup();
        }
      }
    };
    CheckBoxSelection2.prototype.onDocumentClick = function(e) {
      if (this.parent.getLocaleName() !== "listbox") {
        var target = e.target;
        if (!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id="' + this.parent.popupObj.element.id + '"]')) {
          if (!(this.filterInput && this.filterInput.value !== "")) {
            e.preventDefault();
          }
        }
        if (!(!isNullOrUndefined(this.parent.popupObj) && closest(target, '[id="' + this.parent.popupObj.element.id + '"]')) && !isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target)) {
          if (this.parent.overAllWrapper.classList.contains(dropDownBaseClasses.focus) || this.parent.isPopupOpen()) {
            this.parent.inputFocus = false;
            this.parent.scrollFocusStatus = false;
            this.parent.hidePopup();
            this.parent.onBlurHandler(e, true);
            this.parent.focused = true;
          }
        } else {
          this.parent.scrollFocusStatus = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.filterInput;
        }
        if (!isNullOrUndefined(this.parent.overAllWrapper) && !this.parent.overAllWrapper.contains(e.target) && this.parent.overAllWrapper.classList.contains("e-input-focus") && !this.parent.isPopupOpen()) {
          if (Browser.isIE) {
            this.parent.onBlurHandler();
          } else {
            this.parent.onBlurHandler(e);
          }
        }
        if (this.filterInput === target) {
          this.filterInput.focus();
        }
      }
    };
    CheckBoxSelection2.prototype.getFocus = function(e) {
      this.parent.overAllWrapper.classList.remove(FOCUS3);
      if (this.parent.keyAction && e.value !== "clear" && e.value !== "focus") {
        this.parent.keyAction = false;
        return;
      }
      if (e.value === "focus") {
        this.filterInput.focus();
        this.parent.removeFocus();
        EventHandler.remove(this.parent.list, "keydown", this.parent.onKeyDown);
      }
      if (e.value === "clear") {
        this.filterInput.value = "";
        this.clearIconElement.style.visibility = "hidden";
      }
    };
    CheckBoxSelection2.prototype.checkSelectAll = function(e) {
      if (e.value === "check") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale(true);
      }
      if (e.value === "uncheck") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale();
      }
      if (e.value === "indeterminate") {
        this.changeState(this.checkAllParent, e.value, null, null, false);
        this.setLocale();
      }
    };
    CheckBoxSelection2.prototype.setLocale = function(unSelect) {
      if (this.parent.selectAllText !== "Select All" || this.parent.unSelectAllText !== "Unselect All") {
        var template = unSelect ? this.parent.unSelectAllText : this.parent.selectAllText;
        this.selectAllSpan.textContent = "";
        var compiledString = compile(template);
        var templateName = unSelect ? "unSelectAllText" : "selectAllText";
        for (var _i = 0, _a = compiledString({}, this.parent, templateName, null, !this.parent.isStringTemplate); _i < _a.length; _i++) {
          var item = _a[_i];
          this.selectAllSpan.textContent = item.textContent;
        }
      } else {
        var l10nLocale = { selectAllText: "Select All", unSelectAllText: "Unselect All" };
        var l10n = new L10n(this.parent.getLocaleName(), {}, this.parent.locale);
        if (l10n.getConstant("selectAllText") === "") {
          l10n = new L10n("dropdowns", l10nLocale, this.parent.locale);
        }
        this.selectAllSpan.textContent = unSelect ? l10n.getConstant("unSelectAllText") : l10n.getConstant("selectAllText");
      }
    };
    CheckBoxSelection2.prototype.getActiveList = function(args) {
      if (args.li.classList.contains("e-active")) {
        this.activeLi.push(args.li.cloneNode(true));
      } else {
        this.activeLi.splice(args.index, 1);
      }
    };
    CheckBoxSelection2.prototype.setReorder = function(args) {
      if (this.parent.enableSelectionOrder && !isNullOrUndefined(this.parent.value)) {
        var activeLiCount = this.parent.ulElement.querySelectorAll("li.e-active").length;
        var remLi = void 0;
        var ulEle_1 = this.parent.createElement("ul", {
          className: "e-list-parent e-ul e-reorder"
        });
        if (activeLiCount > 0) {
          var activeListItems = this.parent.ulElement.querySelectorAll("li.e-active");
          activeListItems.forEach(function(item) {
            ulEle_1.appendChild(item);
          });
          remLi = this.parent.ulElement.querySelectorAll("li.e-active");
          addClass(remLi, "e-reorder-hide");
          prepend([ulEle_1], this.parent.list);
        }
        this.parent.focusAtFirstListItem();
      }
    };
    return CheckBoxSelection2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/list-box/list-box.js
var __extends39 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate36 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SelectionSettings = (
  /** @class */
  function(_super) {
    __extends39(SelectionSettings2, _super);
    function SelectionSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate36([
      Property("Multiple")
    ], SelectionSettings2.prototype, "mode", void 0);
    __decorate36([
      Property(false)
    ], SelectionSettings2.prototype, "showCheckbox", void 0);
    __decorate36([
      Property(false)
    ], SelectionSettings2.prototype, "showSelectAll", void 0);
    __decorate36([
      Property("Left")
    ], SelectionSettings2.prototype, "checkboxPosition", void 0);
    return SelectionSettings2;
  }(ChildProperty)
);
var ToolbarSettings = (
  /** @class */
  function(_super) {
    __extends39(ToolbarSettings2, _super);
    function ToolbarSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate36([
      Property([])
    ], ToolbarSettings2.prototype, "items", void 0);
    __decorate36([
      Property("Right")
    ], ToolbarSettings2.prototype, "position", void 0);
    return ToolbarSettings2;
  }(ChildProperty)
);
var ListBox = (
  /** @class */
  function(_super) {
    __extends39(ListBox2, _super);
    function ListBox2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isValidKey = false;
      _this.isDataSourceUpdate = false;
      _this.keyDownStatus = false;
      return _this;
    }
    ListBox_1 = ListBox2;
    ListBox2.prototype.addItem = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    ListBox2.prototype.render = function() {
      this.inputString = "";
      this.initLoad = true;
      this.isCustomFiltering = false;
      this.initialSelectedOptions = this.value;
      _super.prototype.render.call(this);
      this.setEnabled();
      this.renderComplete();
    };
    ListBox2.prototype.initWrapper = function() {
      var hiddenSelect = this.createElement("select", { className: "e-hidden-select", attrs: { "multiple": "" } });
      hiddenSelect.style.visibility = "hidden";
      this.list.classList.add("e-listbox-wrapper");
      if (this.itemTemplate) {
        this.list.classList.add("e-list-template");
      }
      this.list.classList.add("e-wrapper");
      this.list.classList.add("e-lib");
      if (this.element.tagName === "EJS-LISTBOX") {
        this.element.setAttribute("tabindex", "0");
        if (this.initLoad) {
          this.element.appendChild(this.list);
        }
      } else {
        if (this.initLoad) {
          this.element.parentElement.insertBefore(this.list, this.element);
        }
        this.list.insertBefore(this.element, this.list.firstChild);
        this.element.style.display = "none";
      }
      this.list.insertBefore(hiddenSelect, this.list.firstChild);
      if (this.list.getElementsByClassName("e-list-item")[0]) {
        this.list.getElementsByClassName("e-list-item")[0].classList.remove(dropDownBaseClasses.focus);
      }
      if (this.itemTemplate) {
        this.renderReactTemplates();
      }
      removeClass([this.list], [dropDownBaseClasses.content, dropDownBaseClasses.root]);
      this.validationAttribute(this.element, hiddenSelect);
      this.list.setAttribute("role", "listbox");
      attributes(this.list, { "role": "listbox", "aria-label": "listbox", "aria-multiselectable": this.selectionSettings.mode === "Multiple" ? "true" : "false" });
      this.updateSelectionSettings();
    };
    ListBox2.prototype.updateSelectionSettings = function() {
      if (this.selectionSettings.showCheckbox && this.selectionSettings.showSelectAll && this.liCollections.length) {
        var l10nSelect = new L10n(this.getModuleName(), { selectAllText: "Select All", unSelectAllText: "Unselect All" }, this.locale);
        this.showSelectAll = true;
        this.selectAllText = l10nSelect.getConstant("selectAllText");
        this.unSelectAllText = l10nSelect.getConstant("unSelectAllText");
        this.popupWrapper = this.list;
        this.checkBoxSelectionModule.checkAllParent = null;
        this.notify("selectAll", {});
      }
    };
    ListBox2.prototype.initDraggable = function() {
      var _this = this;
      if (this.ulElement) {
        this.ulElement.id = this.element.id + "_parent";
      }
      if (this.allowDragAndDrop) {
        new Sortable(this.ulElement, {
          scope: this.scope,
          itemClass: "e-list-item",
          dragStart: this.triggerDragStart.bind(this),
          drag: this.triggerDrag.bind(this),
          beforeDrop: this.beforeDragEnd.bind(this),
          drop: this.dragEnd.bind(this),
          placeHolder: function() {
            return _this.createElement("span", { className: "e-placeholder" });
          },
          helper: function(e) {
            var wrapper = _this.list.cloneNode();
            var ele = e.sender.cloneNode(true);
            wrapper.appendChild(ele);
            var refEle = _this.getItems()[0];
            wrapper.style.width = refEle.offsetWidth + "px";
            wrapper.style.height = refEle.offsetHeight + "px";
            if ((_this.value && _this.value.length) > 1 && _this.isSelected(ele)) {
              ele.appendChild(_this.createElement("span", {
                className: "e-list-badge",
                innerHTML: _this.value.length + ""
              }));
            }
            wrapper.style.zIndex = getZindexPartial(_this.element) + "";
            return wrapper;
          }
        });
      }
    };
    ListBox2.prototype.updateActionCompleteData = function(li, item, index) {
      this.jsonData.splice(index, 0, item);
    };
    ListBox2.prototype.initToolbar = function() {
      var pos = this.toolbarSettings.position;
      var prevScope = this.element.getAttribute("data-value");
      if (this.toolbarSettings.items.length) {
        var toolElem = this.createElement("div", { className: "e-listbox-tool", attrs: { "role": "toolbar" } });
        var wrapper = this.createElement("div", {
          className: "e-listboxtool-wrapper e-lib e-" + pos.toLowerCase()
        });
        this.list.parentElement.insertBefore(wrapper, this.list);
        wrapper.appendChild(pos === "Right" ? this.list : toolElem);
        wrapper.appendChild(pos === "Right" ? toolElem : this.list);
        this.createButtons(toolElem);
        if (!this.element.id) {
          this.element.id = getUniqueID("e-" + this.getModuleName());
        }
        if (this.scope) {
          document.querySelector(this.scope).setAttribute("data-value", this.element.id);
        } else {
          this.updateToolBarState();
        }
      }
      var scope = this.element.getAttribute("data-value");
      if (prevScope && scope && prevScope !== scope) {
        this.tBListBox = getComponent(document.getElementById(prevScope), this.getModuleName());
        this.tBListBox.updateToolBarState();
      } else if (scope) {
        this.tBListBox = getComponent(document.getElementById(scope), this.getModuleName());
        this.tBListBox.updateToolBarState();
      }
    };
    ListBox2.prototype.createButtons = function(toolElem) {
      var _this = this;
      var btn;
      var ele;
      var title;
      var l10n = new L10n(this.getModuleName(), {
        moveUp: "Move Up",
        moveDown: "Move Down",
        moveTo: "Move To",
        moveFrom: "Move From",
        moveAllTo: "Move All To",
        moveAllFrom: "Move All From"
      }, this.locale);
      this.toolbarSettings.items.forEach(function(value) {
        title = l10n.getConstant(value);
        ele = _this.createElement("button", {
          attrs: {
            "type": "button",
            "data-value": value,
            "title": title,
            "aria-label": title
          }
        });
        toolElem.appendChild(ele);
        btn = new Button({ iconCss: "e-icons e-" + value.toLowerCase() }, ele);
        btn.createElement = _this.createElement;
      });
    };
    ListBox2.prototype.validationAttribute = function(input, hiddenSelect) {
      _super.prototype.validationAttribute.call(this, input, hiddenSelect);
      hiddenSelect.required = input.required;
      input.required = false;
    };
    ListBox2.prototype.setHeight = function() {
      var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      ele.style.height = formatUnit(this.height);
      if (this.allowFiltering && this.height.toString().indexOf("%") < 0) {
        addClass([this.list], "e-filter-list");
      } else {
        removeClass([this.list], "e-filter-list");
      }
    };
    ListBox2.prototype.setCssClass = function() {
      var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      if (this.cssClass) {
        addClass([wrap], this.cssClass.replace(/\s+/g, " ").trim().split(" "));
      }
      if (this.enableRtl) {
        addClass([this.list], "e-rtl");
      }
    };
    ListBox2.prototype.setEnable = function() {
      var ele = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      if (this.enabled) {
        removeClass([ele], cssClass.disabled);
      } else {
        addClass([ele], cssClass.disabled);
      }
    };
    ListBox2.prototype.showSpinner = function() {
      if (!this.spinner) {
        this.spinner = this.createElement("div", { className: "e-listbox-wrapper" });
      }
      this.spinner.style.height = formatUnit(this.height);
      this.element.parentElement.insertBefore(this.spinner, this.element.nextSibling);
      createSpinner({ target: this.spinner }, this.createElement);
      showSpinner(this.spinner);
    };
    ListBox2.prototype.hideSpinner = function() {
      if (this.spinner.querySelector(".e-spinner-pane")) {
        hideSpinner(this.spinner);
      }
      if (this.spinner.parentElement) {
        detach(this.spinner);
      }
    };
    ListBox2.prototype.onInput = function() {
      this.isDataSourceUpdate = false;
      if (this.keyDownStatus) {
        this.isValidKey = true;
      } else {
        this.isValidKey = false;
      }
      this.keyDownStatus = false;
      this.refreshClearIcon();
    };
    ListBox2.prototype.clearText = function() {
      this.filterInput.value = "";
      this.refreshClearIcon();
      var event = document.createEvent("KeyboardEvent");
      this.isValidKey = true;
      this.KeyUp(event);
    };
    ListBox2.prototype.refreshClearIcon = function() {
      if (this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon)) {
        var clearElement = this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon);
        clearElement.style.visibility = this.filterInput.value === "" ? "hidden" : "visible";
      }
    };
    ListBox2.prototype.onActionComplete = function(ulElement, list, e) {
      var searchEle;
      if (this.allowFiltering && this.list.getElementsByClassName("e-filter-parent")[0]) {
        searchEle = this.list.getElementsByClassName("e-filter-parent")[0].cloneNode(true);
      }
      if (list.length === 0) {
        var noRecElem = ulElement.childNodes[0];
        if (noRecElem) {
          ulElement.removeChild(noRecElem);
        }
      }
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.allowFiltering && !isNullOrUndefined(searchEle)) {
        this.list.insertBefore(searchEle, this.list.firstElementChild);
        this.filterParent = this.list.getElementsByClassName("e-filter-parent")[0];
        this.filterWireEvents(searchEle);
      }
      this.initWrapper();
      this.setSelection();
      this.initDraggable();
      this.mainList = this.ulElement;
      if (this.initLoad) {
        this.jsonData = [];
        extend(this.jsonData, list, []);
        this.initToolbarAndStyles();
        this.wireEvents();
        if (this.showCheckbox) {
          this.setCheckboxPosition();
        }
        if (this.allowFiltering) {
          this.setFiltering();
        }
      } else {
        if (this.isDataSourceUpdate) {
          this.jsonData = [];
          extend(this.jsonData, list, []);
          this.isDataSourceUpdate = false;
        }
        if (this.allowFiltering) {
          var filterElem = this.list.getElementsByClassName("e-input-filter")[0];
          var txtLength = this.filterInput.value.length;
          filterElem.selectionStart = txtLength;
          filterElem.selectionEnd = txtLength;
          filterElem.focus();
        }
      }
      if (this.toolbarSettings.items.length && this.scope && this.scope.indexOf("#") > -1 && !isNullOrUndefined(e)) {
        var scope = this.scope.replace("#", "");
        var scopedLB = getComponent(document.getElementById(scope), this.getModuleName());
        scopedLB.initToolbar();
      }
      this.initLoad = false;
    };
    ListBox2.prototype.initToolbarAndStyles = function() {
      this.initToolbar();
      this.setCssClass();
      this.setEnable();
      this.setHeight();
    };
    ListBox2.prototype.triggerDragStart = function(args) {
      var _this = this;
      var badge;
      args = extend(this.getDragArgs(args), { dragSelected: true });
      if (Browser.isIos) {
        this.list.style.overflow = "hidden";
      }
      this.trigger("dragStart", args, function(dragEventArgs) {
        _this.allowDragAll = dragEventArgs.dragSelected;
        if (!_this.allowDragAll) {
          badge = _this.ulElement.getElementsByClassName("e-list-badge")[0];
          if (badge) {
            detach(badge);
          }
        }
      });
    };
    ListBox2.prototype.triggerDrag = function(args) {
      var scrollParent;
      var boundRect;
      var scrollMoved = 36;
      var scrollHeight = 10;
      if (this.itemTemplate && args.target) {
        if (args.target && args.target.closest(".e-list-item")) {
          scrollHeight = args.target.closest(".e-list-item").scrollHeight;
        } else {
          var listItem = args.element.querySelector(".e-list-item");
          if (listItem) {
            scrollHeight = listItem.scrollHeight;
          }
        }
      }
      var event = args.event;
      var wrapper;
      if (args.target && (args.target.classList.contains("e-listbox-wrapper") || args.target.classList.contains("e-list-item") || args.target.classList.contains("e-filter-parent") || args.target.classList.contains("e-input-group") || args.target.closest(".e-list-item"))) {
        if (args.target.classList.contains("e-list-item") || args.target.classList.contains("e-filter-parent") || args.target.classList.contains("e-input-group") || args.target.closest(".e-list-item")) {
          wrapper = args.target.closest(".e-listbox-wrapper");
        } else {
          wrapper = args.target;
        }
        if (this.allowFiltering) {
          scrollParent = wrapper.querySelector(".e-list-parent");
        } else {
          scrollParent = wrapper;
        }
        boundRect = scrollParent.getBoundingClientRect();
        if (boundRect.y + scrollParent.offsetHeight - (event.pageY + scrollMoved) < 1) {
          scrollParent.scrollTop = scrollParent.scrollTop + scrollHeight;
        } else if (event.pageY - scrollMoved - boundRect.y < 1) {
          scrollParent.scrollTop = scrollParent.scrollTop - scrollHeight;
        }
      }
      if (args.target === null) {
        return;
      }
      this.trigger("drag", this.getDragArgs(args));
    };
    ListBox2.prototype.beforeDragEnd = function(args) {
      var items = [];
      this.dragValue = this.getFormattedValue(args.droppedElement.getAttribute("data-value"));
      if (this.value.indexOf(this.dragValue) > -1) {
        args.items = this.getDataByValues(this.value);
      } else {
        args.items = this.getDataByValues([this.dragValue]);
      }
      extend(items, args.items);
      this.trigger("beforeDrop", args);
      if (args.items !== items) {
        this.customDraggedItem = args.items;
      }
    };
    ListBox2.prototype.dragEnd = function(args) {
      var _this = this;
      var listData;
      var liColl;
      var jsonData;
      var droppedData;
      var selectedOptions;
      var sortedData;
      var dropValue = this.getFormattedValue(args.droppedElement.getAttribute("data-value"));
      var listObj = this.getComponent(args.droppedElement);
      var getArgs = this.getDragArgs({ target: args.droppedElement }, true);
      var sourceArgs = { previousData: this.dataSource };
      var destArgs = { previousData: listObj.dataSource };
      var dragArgs = extend({}, getArgs, {
        target: args.target,
        source: { previousData: this.dataSource },
        previousIndex: args.previousIndex,
        currentIndex: args.currentIndex
      });
      if (listObj !== this) {
        var sourceArgs1 = extend(sourceArgs, { currentData: this.listData });
        dragArgs = extend(dragArgs, { source: sourceArgs1, destination: destArgs });
      }
      if (Browser.isIos) {
        this.list.style.overflow = "";
      }
      var targetListObj = this.getComponent(args.target);
      if (targetListObj && targetListObj.listData.length === 0) {
        var noRecElem = targetListObj.ulElement.childNodes[0];
        if (noRecElem) {
          targetListObj.ulElement.removeChild(noRecElem);
        }
      }
      if (listObj === this) {
        var ul_1 = this.ulElement;
        listData = [].slice.call(this.listData);
        liColl = [].slice.call(this.liCollections);
        jsonData = [].slice.call(this.jsonData);
        sortedData = [].slice.call(this.sortedData);
        var toSortIdx_1 = args.currentIndex;
        var toIdx_1 = args.currentIndex = this.getCurIdx(this, args.currentIndex);
        var rIdx = listData.indexOf(this.getDataByValue(dropValue));
        var jsonIdx = jsonData.indexOf(this.getDataByValue(dropValue));
        var sIdx = sortedData.indexOf(this.getDataByValue(dropValue));
        listData.splice(toIdx_1, 0, listData.splice(rIdx, 1)[0]);
        sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx, 1)[0]);
        jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx, 1)[0]);
        liColl.splice(toIdx_1, 0, liColl.splice(rIdx, 1)[0]);
        if (this.allowDragAll) {
          selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 ? this.value : [dropValue];
          if (!isNullOrUndefined(this.customDraggedItem)) {
            selectedOptions = [];
            this.customDraggedItem.forEach(function(item) {
              selectedOptions.push(getValue(_this.fields.value, item));
            });
          }
          selectedOptions.forEach(function(value) {
            if (value !== dropValue) {
              var idx = listData.indexOf(_this.getDataByValue(value));
              var jsonIdx_1 = jsonData.indexOf(_this.getDataByValue(value));
              var sIdx_1 = sortedData.indexOf(_this.getDataByValue(value));
              if (idx > toIdx_1) {
                toIdx_1++;
              }
              jsonData.splice(toIdx_1, 0, jsonData.splice(jsonIdx_1, 1)[0]);
              listData.splice(toIdx_1, 0, listData.splice(idx, 1)[0]);
              sortedData.splice(toSortIdx_1, 0, sortedData.splice(sIdx_1, 1)[0]);
              liColl.splice(toIdx_1, 0, liColl.splice(idx, 1)[0]);
              ul_1.insertBefore(_this.getItems()[_this.getIndexByValue(value)], ul_1.getElementsByClassName("e-placeholder")[0]);
            }
          });
        }
        this.listData = listData;
        this.jsonData = jsonData;
        this.sortedData = sortedData;
        this.liCollections = liColl;
      } else {
        var li_1;
        var fLiColl_1 = [].slice.call(this.liCollections);
        var currIdx_1 = args.currentIndex = this.getCurIdx(listObj, args.currentIndex);
        var ul_2 = listObj.ulElement;
        listData = [].slice.call(listObj.listData);
        liColl = [].slice.call(listObj.liCollections);
        jsonData = [].slice.call(listObj.jsonData);
        sortedData = [].slice.call(listObj.sortedData);
        selectedOptions = this.value && Array.prototype.indexOf.call(this.value, dropValue) > -1 && this.allowDragAll ? this.value : [dropValue];
        if (!isNullOrUndefined(this.customDraggedItem)) {
          selectedOptions = [];
          this.customDraggedItem.forEach(function(item) {
            selectedOptions.push(getValue(_this.fields.value, item));
          });
        }
        var fListData_1 = [].slice.call(this.listData);
        var fSortData_1 = [].slice.call(this.sortedData);
        selectedOptions.forEach(function(value, index) {
          droppedData = _this.getDataByValue(value);
          var srcIdx = _this.listData.indexOf(droppedData);
          var jsonSrcIdx = _this.jsonData.indexOf(droppedData);
          var sortIdx = _this.sortedData.indexOf(droppedData);
          fListData_1.splice(srcIdx, 1);
          _this.jsonData.splice(jsonSrcIdx, 1);
          fSortData_1.splice(sortIdx, 1);
          _this.listData = fListData_1;
          _this.sortedData = fSortData_1;
          var destIdx = value === dropValue ? args.currentIndex : currIdx_1;
          listData.splice(destIdx, 0, droppedData);
          jsonData.splice(destIdx, 0, droppedData);
          sortedData.splice(destIdx, 0, droppedData);
          liColl.splice(destIdx, 0, fLiColl_1.splice(srcIdx, 1)[0]);
          if (!value) {
            var liCollElem_1 = _this.getItems();
            for (var i2 = 0; i2 < liCollElem_1.length; i2++) {
              if (liCollElem_1[i2].getAttribute("data-value") === null && liCollElem_1[i2].classList.contains("e-list-item")) {
                li_1 = liCollElem_1[i2];
                break;
              }
            }
          } else {
            li_1 = _this.getItems()[_this.getIndexByValue(value)];
          }
          if (!li_1) {
            li_1 = args.helper;
          }
          _this.removeSelected(_this, value === dropValue ? [args.droppedElement] : [li_1]);
          ul_2.insertBefore(li_1, ul_2.getElementsByClassName("e-placeholder")[0]);
          currIdx_1++;
        });
        if (this.fields.groupBy) {
          var sourceElem = this.renderItems(this.listData, this.fields);
          this.updateListItems(sourceElem, this.ulElement);
          this.setSelection();
        }
        if (listObj.sortOrder !== "None" || this.selectionSettings.showCheckbox !== listObj.selectionSettings.showCheckbox || listObj.fields.groupBy || listObj.itemTemplate || this.itemTemplate) {
          var sortable = getComponent(ul_2, "sortable");
          var sourceElem = listObj.renderItems(listData, listObj.fields);
          listObj.updateListItems(sourceElem, ul_2);
          this.setSelection();
          if (sortable.placeHolderElement) {
            ul_2.appendChild(sortable.placeHolderElement);
          }
          ul_2.appendChild(args.helper);
          listObj.setSelection();
        }
        this.liCollections = fLiColl_1;
        listObj.liCollections = liColl;
        listObj.jsonData = extend([], [], jsonData, false);
        listObj.listData = extend([], [], listData, false);
        listObj.sortedData = extend([], [], sortedData, false);
        if (this.listData.length === 0) {
          this.l10nUpdate();
        }
      }
      if (this === listObj) {
        var sourceArgs1 = extend(sourceArgs, { currentData: listData });
        dragArgs = extend(dragArgs, { source: sourceArgs1 });
      } else {
        var dragArgs1 = extend(destArgs, { currentData: listData });
        dragArgs = extend(dragArgs, { destination: dragArgs1 });
      }
      if (!isNullOrUndefined(this.customDraggedItem)) {
        dragArgs.items = this.customDraggedItem;
      }
      this.trigger("drop", dragArgs);
      var liCollElem = dragArgs.elements;
      if (liCollElem.length) {
        for (var i = 0; i < liCollElem.length; i++) {
          liCollElem[i].classList.remove("e-grabbed");
        }
      }
    };
    ListBox2.prototype.updateListItems = function(sourceElem, destElem) {
      var i = 0;
      destElem.innerHTML = "";
      while (i < sourceElem.childNodes.length) {
        destElem.appendChild(sourceElem.childNodes[i]);
      }
    };
    ListBox2.prototype.removeSelected = function(listObj, elems) {
      if (listObj.selectionSettings.showCheckbox) {
        elems.forEach(function(ele) {
          ele.getElementsByClassName("e-frame")[0].classList.remove("e-check");
        });
      } else {
        removeClass(elems, cssClass.selected);
      }
    };
    ListBox2.prototype.getCurIdx = function(listObj, idx) {
      if (listObj.fields.groupBy) {
        idx -= [].slice.call(listObj.ulElement.children).slice(0, idx).filter(function(ele) {
          return ele.classList.contains(cssClass.group);
        }).length;
      }
      return idx;
    };
    ListBox2.prototype.getComponent = function(li) {
      var listObj;
      var ele = this.element.tagName === "EJS-LISTBOX" ? closest(li, ".e-listbox") : closest(li, ".e-listbox-wrapper") && closest(li, ".e-listbox-wrapper").querySelector(".e-listbox");
      if (ele) {
        listObj = getComponent(ele, this.getModuleName());
      }
      return listObj;
    };
    ListBox2.prototype.setEnabled = function() {
      this.element.setAttribute("aria-disabled", this.enabled ? "false" : "true");
    };
    ListBox2.prototype.listOption = function(dataSource, fields) {
      this.listCurrentOptions = _super.prototype.listOption.call(this, dataSource, fields);
      this.listCurrentOptions = extend({}, this.listCurrentOptions, { itemCreated: this.triggerBeforeItemRender.bind(this) }, true);
      this.notify("listoption", { module: "CheckBoxSelection" });
      return this.listCurrentOptions;
    };
    ListBox2.prototype.triggerBeforeItemRender = function(e) {
      e.item.setAttribute("tabindex", "-1");
      this.trigger("beforeItemRender", { element: e.item, item: e.curData });
    };
    ListBox2.prototype.requiredModules = function() {
      var modules = [];
      if (this.selectionSettings.showCheckbox) {
        modules.push({
          member: "CheckBoxSelection",
          args: [this]
        });
      }
      return modules;
    };
    ListBox2.prototype.enableItems = function(items, enable, isValue) {
      var _this = this;
      if (enable === void 0) {
        enable = true;
      }
      var li;
      items.forEach(function(item) {
        var text = item;
        li = _this.findListElement(_this.list, "li", "data-value", isValue ? text : _this.getValueByText(text));
        if (!li) {
          return;
        }
        if (enable) {
          removeClass([li], cssClass.disabled);
          li.removeAttribute("aria-disabled");
        } else {
          addClass([li], cssClass.disabled);
          li.setAttribute("aria-disabled", "true");
        }
      });
    };
    ListBox2.prototype.selectItems = function(items, state, isValue) {
      if (state === void 0) {
        state = true;
      }
      if (state && !this.selectionSettings.showCheckbox && this.selectionSettings.mode === "Single") {
        this.getSelectedItems().forEach(function(li) {
          li.classList.remove("e-active");
          li.removeAttribute("aria-selected");
          removeClass([li], cssClass.selected);
        });
      }
      this.setSelection(items, state, !isValue);
      this.updateSelectedOptions();
      var selElems = [];
      for (var i = 0; i < items.length; i++) {
        var liColl = this.list.querySelectorAll('[aria-selected="true"]');
        for (var j = 0; j < liColl.length; j++) {
          if (items[i] === this.getFormattedValue(liColl[j].getAttribute("data-value"))) {
            selElems.push(liColl[j]);
          }
        }
      }
      this.triggerChange(selElems, null);
    };
    ListBox2.prototype.selectAll = function(state) {
      if (state === void 0) {
        state = true;
      }
      this.selectAllItems(state);
    };
    ListBox2.prototype.addItems = function(items, itemIndex) {
      _super.prototype.addItem.call(this, items, itemIndex);
    };
    ListBox2.prototype.removeItems = function(items, itemIndex) {
      this.removeItem(items, itemIndex);
    };
    ListBox2.prototype.removeItem = function(items, itemIndex) {
      var liCollections = [];
      var liElement = this.list.querySelectorAll("." + dropDownBaseClasses.li);
      if (items) {
        items = items instanceof Array ? items : [items];
        var fields = this.fields;
        var dataValue = void 0;
        var objValue = void 0;
        var dupData = [];
        var itemIdx = void 0;
        extend(dupData, [], this.jsonData);
        var removeIdxes = [];
        var removeLiIdxes = [];
        for (var j = 0; j < items.length; j++) {
          if (items[j] instanceof Object) {
            dataValue = getValue(fields.value, items[j]);
          } else {
            dataValue = items[j].toString();
          }
          for (var i = 0, len = dupData.length; i < len; i++) {
            if (dupData[i] instanceof Object) {
              objValue = getValue(fields.value, dupData[i]);
            } else {
              objValue = dupData[i].toString();
            }
            if (objValue === dataValue) {
              itemIdx = this.getIndexByValue(dataValue);
              var idx = itemIdx === i ? itemIdx : i;
              liCollections.push(liElement[idx]);
              removeIdxes.push(idx);
              removeLiIdxes.push(idx);
            }
          }
        }
        for (var k = removeIdxes.length - 1; k >= 0; k--) {
          this.listData.splice(removeIdxes[k], 1);
        }
        for (var k = removeIdxes.length - 1; k >= 0; k--) {
          this.jsonData.splice(removeIdxes[k], 1);
        }
        for (var k = removeLiIdxes.length - 1; k >= 0; k--) {
          this.updateLiCollection(removeLiIdxes[k]);
        }
      } else {
        itemIndex = itemIndex ? itemIndex : 0;
        liCollections.push(liElement[itemIndex]);
        this.listData.splice(itemIndex, 1);
        this.jsonData.splice(itemIndex, 1);
        this.updateLiCollection(itemIndex);
      }
      for (var i = 0; i < liCollections.length; i++) {
        this.ulElement.removeChild(liCollections[i]);
      }
      if (this.listData.length === 0) {
        this.l10nUpdate();
      }
      this.value = [];
      this.updateToolBarState();
    };
    ListBox2.prototype.getDataByValues = function(value) {
      var data = [];
      for (var i = 0; i < value.length; i++) {
        data.push(this.getDataByValue(value[i]));
      }
      return data;
    };
    ListBox2.prototype.moveUp = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(true, false, elem);
    };
    ListBox2.prototype.moveDown = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(false, false, elem);
    };
    ListBox2.prototype.moveTop = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(null, false, elem, true);
    };
    ListBox2.prototype.moveBottom = function(value) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      this.moveUpDown(true, false, elem, false, true);
    };
    ListBox2.prototype.moveTo = function(value, index, targetId) {
      var elem = value ? this.getElemByValue(value) : this.getSelectedItems();
      var tlistbox = targetId ? getComponent(targetId, ListBox_1) : this.getScopedListBox();
      this.moveData(this, tlistbox, false, elem, index);
    };
    ListBox2.prototype.moveAllTo = function(targetId, index) {
      if (this.listData.length > 0) {
        var tlistbox = targetId ? getComponent(targetId, ListBox_1) : this.getScopedListBox();
        this.moveAllData(this, tlistbox, false, index);
      }
    };
    ListBox2.prototype.getDataList = function() {
      return this.jsonData;
    };
    ListBox2.prototype.getSortedList = function() {
      var sortData;
      var tempData;
      sortData = tempData = this.sortedData;
      if (this.fields.groupBy) {
        sortData = [];
        for (var i = 0; i < tempData.length; i++) {
          if (tempData[i].isHeader) {
            continue;
          }
          sortData.push(tempData[i]);
        }
      }
      return sortData;
    };
    ListBox2.prototype.getElemByValue = function(value) {
      var elem = [];
      for (var i = 0; i < value.length; i++) {
        elem.push(this.ulElement.querySelector('[data-value ="' + value[i] + '"]'));
      }
      return elem;
    };
    ListBox2.prototype.updateLiCollection = function(index) {
      var tempLi = [].slice.call(this.liCollections);
      tempLi.splice(index, 1);
      this.liCollections = tempLi;
    };
    ListBox2.prototype.selectAllItems = function(state, event) {
      var _this = this;
      [].slice.call(this.getItems()).forEach(function(li) {
        if (!li.classList.contains(cssClass.disabled)) {
          if (_this.selectionSettings.showCheckbox) {
            var ele = li.getElementsByClassName("e-check")[0];
            if (!ele && state || ele && !state) {
              _this.notify("updatelist", { li, module: "listbox" });
              if (_this.maximumSelectionLength >= _this.list.querySelectorAll(".e-list-item span.e-check").length) {
                _this.checkMaxSelection();
              }
            }
          } else {
            if (state) {
              li.classList.add(cssClass.selected);
            } else {
              li.classList.remove(cssClass.selected);
            }
          }
        }
      });
      this.updateSelectedOptions();
      if (this.allowFiltering && this.selectionSettings.showCheckbox) {
        var liEle = this.list.getElementsByTagName("li");
        var index = 0;
        if (state) {
          var _loop_1 = function() {
            var dataValue1 = this_1.getFormattedValue(liEle[index].getAttribute("data-value"));
            if (!this_1.value.some(function(e) {
              return e === dataValue1;
            })) {
              this_1.value.push(this_1.getFormattedValue(liEle[index].getAttribute("data-value")));
            }
          };
          var this_1 = this;
          for (index = 0; index < liEle.length; index++) {
            _loop_1();
          }
        } else {
          var _loop_2 = function() {
            var dataValue2 = this_2.getFormattedValue(liEle[index].getAttribute("data-value"));
            this_2.value = this_2.value.filter(function(e) {
              return e !== dataValue2;
            });
          };
          var this_2 = this;
          for (index = 0; index < liEle.length; index++) {
            _loop_2();
          }
        }
        if (document.querySelectorAll("ul").length < 2) {
          this.updateMainList();
        }
      }
      this.triggerChange(this.getSelectedItems(), event);
    };
    ListBox2.prototype.updateMainList = function() {
      var mainList = this.mainList.querySelectorAll(".e-list-item");
      var ulList = this.ulElement.querySelectorAll(".e-list-item");
      var mainCount = mainList.length;
      var ulEleCount = ulList.length;
      if (this.selectionSettings.showCheckbox || (document.querySelectorAll("ul").length > 1 || mainCount !== ulEleCount)) {
        var listindex = 0;
        var valueindex = 0;
        var count = 0;
        for (listindex; listindex < mainCount; ) {
          if (this.value) {
            for (valueindex; valueindex < this.value.length; valueindex++) {
              if (mainList[listindex].getAttribute("data-value") === this.value[valueindex]) {
                count++;
              }
            }
          }
          if (!count && this.selectionSettings.showCheckbox) {
            mainList[listindex].getElementsByClassName("e-frame")[0].classList.remove("e-check");
          }
          if (document.querySelectorAll("ul").length > 1 && count && mainCount !== ulEleCount) {
            this.mainList.removeChild(this.mainList.getElementsByTagName("li")[listindex]);
            listindex = 0;
          } else {
            listindex++;
          }
          count = 0;
          valueindex = 0;
        }
      }
    };
    ListBox2.prototype.wireEvents = function() {
      var form = closest(this.element, "form");
      var wrapper = this.element.tagName === "EJS-LISTBOX" ? this.element : this.list;
      EventHandler.add(this.list, "click", this.clickHandler, this);
      EventHandler.add(wrapper, "keydown", this.keyDownHandler, this);
      EventHandler.add(wrapper, "focusout", this.focusOutHandler, this);
      this.wireToolbarEvent();
      if (this.selectionSettings.showCheckbox) {
        EventHandler.remove(document, "mousedown", this.checkBoxSelectionModule.onDocumentClick);
      }
      if (this.fields.groupBy || this.element.querySelector("select>optgroup")) {
        EventHandler.remove(this.list, "scroll", this.setFloatingHeader);
      }
      if (form) {
        EventHandler.add(form, "reset", this.formResetHandler, this);
      }
    };
    ListBox2.prototype.wireToolbarEvent = function() {
      if (this.toolbarSettings.items.length) {
        EventHandler.add(this.getToolElem(), "click", this.toolbarClickHandler, this);
      }
    };
    ListBox2.prototype.unwireEvents = function() {
      var form = closest(this.element, "form");
      var wrapper = this.element.tagName === "EJS-LISTBOX" ? this.element : this.list;
      EventHandler.remove(this.list, "click", this.clickHandler);
      EventHandler.remove(wrapper, "keydown", this.keyDownHandler);
      EventHandler.remove(wrapper, "focusout", this.focusOutHandler);
      if (this.allowFiltering && this.clearFilterIconElem) {
        EventHandler.remove(this.clearFilterIconElem, "click", this.clearText);
      }
      if (this.toolbarSettings.items.length) {
        EventHandler.remove(this.getToolElem(), "click", this.toolbarClickHandler);
      }
      if (form) {
        EventHandler.remove(form, "reset", this.formResetHandler);
      }
    };
    ListBox2.prototype.clickHandler = function(e) {
      this.selectHandler(e);
    };
    ListBox2.prototype.checkSelectAll = function() {
      var searchCount = 0;
      var liItems = this.list.querySelectorAll("li." + dropDownBaseClasses.li);
      for (var i = 0; i < liItems.length; i++) {
        if (!liItems[i].classList.contains("e-disabled")) {
          searchCount++;
        }
      }
      var len = this.getSelectedItems().length;
      if (this.showSelectAll && searchCount) {
        this.notify("checkSelectAll", {
          module: "CheckBoxSelection",
          value: searchCount === len ? "check" : len === 0 ? "uncheck" : "indeterminate"
        });
      }
    };
    ListBox2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      if (this.allowFiltering) {
        var filterType = this.inputString === "" ? "contains" : this.filterType;
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (dataType === null) {
          dataType = this.typeOfData(this.jsonData).typeof;
        }
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
        } else {
          var fields = this.fields.text ? this.fields.text : "";
          filterQuery.where(fields, filterType, this.inputString, this.ignoreCase, this.ignoreAccent);
        }
      } else {
        filterQuery = query ? query : this.query ? this.query : new Query();
      }
      return filterQuery;
    };
    ListBox2.prototype.setFiltering = function() {
      var filterInputObj;
      if (this.initLoad || isNullOrUndefined(this.filterParent)) {
        this.filterParent = this.createElement("span", {
          className: listBoxClasses.filterParent
        });
        this.filterInput = this.createElement("input", {
          attrs: { type: "text" },
          className: listBoxClasses.filterInput
        });
        this.element.parentNode.insertBefore(this.filterInput, this.element);
        filterInputObj = Input.createInput({
          element: this.filterInput,
          buttons: [listBoxClasses.filterBarClearIcon],
          properties: { placeholder: this.filterBarPlaceholder }
        }, this.createElement);
        append([filterInputObj.container], this.filterParent);
        prepend([this.filterParent], this.list);
        attributes(this.filterInput, {
          "aria-disabled": "false",
          "aria-label": "search list item",
          "autocomplete": "off",
          "autocorrect": "off",
          "autocapitalize": "off",
          "spellcheck": "false"
        });
        if (this.height.toString().indexOf("%") < 0) {
          addClass([this.list], "e-filter-list");
        }
        this.inputString = this.filterInput.value;
        this.filterWireEvents();
        return filterInputObj;
      }
    };
    ListBox2.prototype.filterWireEvents = function(filterElem) {
      if (filterElem) {
        this.filterInput = filterElem.querySelector(".e-input-filter");
      }
      this.clearFilterIconElem = this.filterInput.parentElement.querySelector("." + listBoxClasses.clearIcon);
      if (this.clearFilterIconElem) {
        EventHandler.add(this.clearFilterIconElem, "click", this.clearText, this);
        if (!filterElem) {
          this.clearFilterIconElem.style.visibility = "hidden";
        }
      }
      EventHandler.add(this.filterInput, "input", this.onInput, this);
      EventHandler.add(this.filterInput, "keyup", this.KeyUp, this);
      EventHandler.add(this.filterInput, "keydown", this.onKeyDown, this);
    };
    ListBox2.prototype.selectHandler = function(e, isKey) {
      var isSelect = true;
      var currSelIdx;
      var li = closest(e.target, ".e-list-item");
      var selectedLi = [li];
      if (li && li.parentElement) {
        currSelIdx = [].slice.call(li.parentElement.children).indexOf(li);
        if (!this.selectionSettings.showCheckbox) {
          if ((e.ctrlKey || e.metaKey || Browser.isDevice) && this.isSelected(li)) {
            li.classList.remove(cssClass.selected);
            li.removeAttribute("aria-selected");
            isSelect = false;
          } else if (!(this.selectionSettings.mode === "Multiple" && (e.ctrlKey || e.metaKey || Browser.isDevice))) {
            this.getSelectedItems().forEach(function(ele) {
              ele.removeAttribute("aria-selected");
            });
            removeClass(this.getSelectedItems(), cssClass.selected);
          }
        } else {
          isSelect = !li.getElementsByClassName("e-frame")[0].classList.contains("e-check");
        }
        if (e.shiftKey && !this.selectionSettings.showCheckbox && this.selectionSettings.mode !== "Single") {
          selectedLi = [].slice.call(li.parentElement.children).slice(Math.min(currSelIdx, this.prevSelIdx), Math.max(currSelIdx, this.prevSelIdx) + 1).filter(function(ele) {
            return ele.classList.contains("e-list-item");
          });
        } else {
          this.prevSelIdx = [].slice.call(li.parentElement.children).indexOf(li);
        }
        if (isSelect) {
          if (!this.selectionSettings.showCheckbox) {
            addClass(selectedLi, cssClass.selected);
          }
          selectedLi.forEach(function(ele) {
            ele.setAttribute("aria-selected", "true");
          });
          this.list.setAttribute("aria-activedescendant", li.id);
        } else {
          selectedLi.forEach(function(ele) {
            ele.setAttribute("aria-selected", "false");
          });
        }
        if (!isKey && (this.maximumSelectionLength > (this.value && this.value.length) || !isSelect) && (this.maximumSelectionLength >= (this.value && this.value.length) || !isSelect) && !(this.maximumSelectionLength < (this.value && this.value.length))) {
          this.notify("updatelist", { li, e, module: "listbox" });
        }
        if (this.allowFiltering && !isKey) {
          var liDataValue_1 = this.getFormattedValue(li.getAttribute("data-value"));
          if (!isSelect) {
            this.value = this.value.filter(function(value1) {
              return value1 !== liDataValue_1;
            });
          } else {
            var values = [];
            extend(values, this.value);
            values.push(liDataValue_1);
            this.value = values;
          }
          if (document.querySelectorAll("ul").length < 2) {
            this.updateMainList();
          }
        }
        this.updateSelectedOptions();
        this.triggerChange(this.getSelectedItems(), e);
        if (this.list) {
          this.checkMaxSelection();
        }
      }
    };
    ListBox2.prototype.triggerChange = function(selectedLis, event) {
      this.trigger("change", { elements: selectedLis, items: this.getDataByElements(selectedLis), value: this.value, event });
    };
    ListBox2.prototype.getDataByElems = function(elems) {
      var data = [];
      for (var i = 0, len = elems.length; i < len; i++) {
        data.push(this.getDataByValue(this.getFormattedValue(elems[i].getAttribute("data-value"))));
      }
      return data;
    };
    ListBox2.prototype.getDataByElements = function(elems) {
      var data = [];
      var value;
      var sIdx = 0;
      if (!isNullOrUndefined(this.listData)) {
        var type = this.typeOfData(this.listData).typeof;
        if (type === "string" || type === "number" || type === "boolean") {
          for (var _i = 0, _a = this.listData; _i < _a.length; _i++) {
            var item = _a[_i];
            for (var i = sIdx, len = elems.length; i < len; i++) {
              value = this.getFormattedValue(elems[i].getAttribute("data-value"));
              if (!isNullOrUndefined(item) && item === value) {
                sIdx = i;
                data.push(item);
                break;
              }
            }
            if (elems.length === data.length) {
              break;
            }
          }
        } else {
          for (var _b = 0, _c = this.listData; _b < _c.length; _b++) {
            var item = _c[_b];
            for (var i = sIdx, len = elems.length; i < len; i++) {
              value = this.getFormattedValue(elems[i].getAttribute("data-value"));
              if (!isNullOrUndefined(item) && getValue(this.fields.value ? this.fields.value : "value", item) === value) {
                sIdx = i;
                data.push(item);
                break;
              }
            }
            if (elems.length === data.length) {
              break;
            }
          }
        }
        return data;
      }
      return null;
    };
    ListBox2.prototype.checkMaxSelection = function() {
      var limit = this.list.querySelectorAll(".e-list-item span.e-check").length;
      if (this.selectionSettings.showCheckbox) {
        var index = 0;
        var liCollElem = this.list.getElementsByClassName("e-list-item");
        for (index; index < liCollElem.length; index++) {
          if (!liCollElem[index].querySelector(".e-frame.e-check")) {
            if (limit === this.maximumSelectionLength) {
              liCollElem[index].classList.add("e-disable");
            } else if (liCollElem[index].classList.contains("e-disable")) {
              liCollElem[index].classList.remove("e-disable");
            }
          }
        }
      }
    };
    ListBox2.prototype.toolbarClickHandler = function(e) {
      var btn = closest(e.target, "button");
      if (btn) {
        this.toolbarAction = btn.getAttribute("data-value");
        if (btn.disabled) {
          return;
        }
        switch (this.toolbarAction) {
          case "moveUp":
            this.moveUpDown(true);
            break;
          case "moveDown":
            this.moveUpDown();
            break;
          case "moveTo":
            this.moveItemTo();
            break;
          case "moveFrom":
            this.moveItemFrom();
            break;
          case "moveAllTo":
            this.moveAllItemTo();
            break;
          case "moveAllFrom":
            this.moveAllItemFrom();
            break;
          default:
            this.trigger("actionBegin", {
              cancel: false,
              items: this.getDataByElems(this.getSelectedItems()),
              eventName: this.toolbarAction
            });
            break;
        }
      }
    };
    ListBox2.prototype.moveUpDown = function(isUp, isKey, value, isTop, isBottom) {
      var _this = this;
      var elems = this.getSelectedItems();
      if (value) {
        elems = value;
      }
      if ((isUp && this.isSelected(this.ulElement.firstElementChild) || !isUp && this.isSelected(this.ulElement.lastElementChild)) && !value) {
        return;
      }
      var tempItems = this.getDataByElems(elems);
      var localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };
      this.trigger("actionBegin", localDataArgs);
      if (localDataArgs.cancel) {
        return;
      }
      (isUp ? elems : elems.reverse()).forEach(function(ele) {
        var jsonToIdx = Array.prototype.indexOf.call(_this.ulElement.querySelectorAll(".e-list-item"), ele);
        var idx = Array.prototype.indexOf.call(_this.ulElement.children, ele);
        if (isTop) {
          moveTo(_this.ulElement, _this.ulElement, [idx], 0);
          _this.changeData(idx, 0, jsonToIdx, ele);
        } else if (isBottom) {
          moveTo(_this.ulElement, _this.ulElement, [idx], _this.ulElement.querySelectorAll(".e-list-item").length);
          _this.changeData(idx, _this.ulElement.querySelectorAll(".e-list-item").length, jsonToIdx, ele);
        } else {
          moveTo(_this.ulElement, _this.ulElement, [idx], isUp ? idx - 1 : idx + 2);
          _this.changeData(idx, isUp ? idx - 1 : idx + 1, isUp ? jsonToIdx - 1 : jsonToIdx + 1, ele);
        }
      });
      this.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
      elems[0].focus();
      if (!isKey && this.toolbarSettings.items.length) {
        this.getToolElem().querySelector("[data-value=" + (isUp ? "moveUp" : "moveDown") + "]").focus();
      }
      this.updateToolBarState();
    };
    ListBox2.prototype.moveItemTo = function() {
      this.moveData(this, this.getScopedListBox());
    };
    ListBox2.prototype.moveItemFrom = function() {
      this.moveData(this.getScopedListBox(), this);
    };
    ListBox2.prototype.moveData = function(fListBox, tListBox, isKey, value, index) {
      var idx = [];
      var dataIdx = [];
      var jsonIdx = [];
      var sortIdx = [];
      var listData = [].slice.call(fListBox.listData);
      var tListData = [].slice.call(tListBox.listData);
      var sortData = [].slice.call(fListBox.sortedData);
      var tSortData = [].slice.call(tListBox.sortedData);
      var fliCollections = [].slice.call(fListBox.liCollections);
      var dataLiIdx = [];
      var tliCollections = [].slice.call(tListBox.liCollections);
      var tempItems = [];
      var data = [];
      var elems = fListBox.getSelectedItems();
      if (value) {
        elems = value;
      }
      var isRefresh = tListBox.sortOrder !== "None" || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;
      fListBox.value = [];
      if (elems.length) {
        this.removeSelected(fListBox, elems);
        elems.forEach(function(ele) {
          idx.push(Array.prototype.indexOf.call(fListBox.ulElement.children, ele));
          dataLiIdx.push(Array.prototype.indexOf.call(fListBox.ulElement.querySelectorAll(".e-list-item"), ele));
          dataIdx.push(Array.prototype.indexOf.call(fListBox.listData, fListBox.getDataByElems([ele])[0]));
          sortIdx.push(Array.prototype.indexOf.call(fListBox.sortedData, fListBox.getDataByElems([ele])[0]));
          jsonIdx.push(Array.prototype.indexOf.call(fListBox.jsonData, fListBox.getDataByElems([ele])[0]));
        });
        if (this.sortOrder !== "None") {
          sortIdx.forEach(function(i2) {
            tempItems.push(fListBox.sortedData[i2]);
          });
        } else {
          jsonIdx.forEach(function(i2) {
            tempItems.push(fListBox.jsonData[i2]);
          });
        }
        var localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };
        fListBox.trigger("actionBegin", localDataArgs);
        if (localDataArgs.cancel) {
          return;
        }
        var rLiCollection_1 = [];
        dataLiIdx.sort(function(n1, n2) {
          return n1 - n2;
        }).reverse().forEach(function(i2) {
          rLiCollection_1.push(fliCollections.splice(i2, 1)[0]);
        });
        fListBox.liCollections = fliCollections;
        if (index) {
          var toColl = tliCollections.splice(0, index);
          tListBox.liCollections = toColl.concat(rLiCollection_1.reverse()).concat(tliCollections);
        } else {
          tListBox.liCollections = tliCollections.concat(rLiCollection_1.reverse());
        }
        if (tListBox.listData.length === 0) {
          var noRecElem = tListBox.ulElement.childNodes[0];
          if (noRecElem) {
            tListBox.ulElement.removeChild(noRecElem);
          }
        }
        dataIdx.sort(function(n1, n2) {
          return n2 - n1;
        }).forEach(function(i2) {
          listData.splice(i2, 1)[0];
        });
        sortIdx.sort(function(n1, n2) {
          return n2 - n1;
        }).forEach(function(i2) {
          sortData.splice(i2, 1)[0];
        });
        jsonIdx.slice().reverse().forEach(function(i2) {
          data.push(fListBox.jsonData.splice(i2, 1)[0]);
        });
        if (isRefresh) {
          if (fListBox.fields.groupBy) {
            var sourceElem = fListBox.renderItems(listData, fListBox.fields);
            fListBox.updateListItems(sourceElem, fListBox.ulElement);
          } else {
            elems.forEach(function(ele) {
              detach(ele);
            });
          }
        } else {
          moveTo(fListBox.ulElement, tListBox.ulElement, idx, index);
          fListBox.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
        }
        if (tListBox.mainList.childElementCount !== tListBox.jsonData.length) {
          tListBox.mainList = tListBox.ulElement;
        }
        fListBox.updateMainList();
        var tJsonData = [].slice.call(tListBox.jsonData);
        tSortData = [].slice.call(tListBox.sortedData);
        this.selectNextList(elems, dataLiIdx, dataIdx, fListBox);
        if (isKey) {
          this.list.focus();
        }
        fListBox.listData = listData;
        fListBox.sortedData = sortData;
        index = index ? index : tListData.length;
        for (var i = tempItems.length - 1; i >= 0; i--) {
          tListData.splice(index, 0, tempItems[i]);
          tJsonData.splice(index, 0, tempItems[i]);
          tSortData.splice(index, 0, tempItems[i]);
        }
        tListBox.listData = tListData;
        tListBox.jsonData = tJsonData;
        tListBox.sortedData = tSortData;
        if (isRefresh) {
          var sourceElem = tListBox.renderItems(tListData, tListBox.fields);
          tListBox.updateListItems(sourceElem, tListBox.ulElement);
          tListBox.setSelection();
          fListBox.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
        }
        fListBox.updateSelectedOptions();
        if (fListBox.listData.length === 0) {
          fListBox.l10nUpdate();
        }
      }
      if (fListBox.value.length === 1 && fListBox.getSelectedItems().length) {
        fListBox.value[0] = fListBox.getFormattedValue(fListBox.getSelectedItems()[0].getAttribute("data-value"));
      }
    };
    ListBox2.prototype.selectNextList = function(elems, dataLiIdx, dataIdx, inst) {
      var childCnt = inst.ulElement.querySelectorAll(".e-list-item").length;
      var ele;
      var liIdx;
      var validIdx = -1;
      if (elems.length === 1 && childCnt && !inst.selectionSettings.showCheckbox) {
        liIdx = childCnt <= dataLiIdx[0] ? childCnt - 1 : dataLiIdx[0];
        ele = inst.ulElement.querySelectorAll(".e-list-item")[liIdx];
        validIdx = inst.getValidIndex(ele, liIdx, childCnt === dataIdx[0] ? 38 : 40);
        if (validIdx > -1) {
          inst.ulElement.querySelectorAll(".e-list-item")[validIdx].classList.add(cssClass.selected);
        }
      }
    };
    ListBox2.prototype.moveAllItemTo = function() {
      this.moveAllData(this, this.getScopedListBox());
    };
    ListBox2.prototype.moveAllItemFrom = function() {
      this.moveAllData(this.getScopedListBox(), this);
    };
    ListBox2.prototype.moveAllData = function(fListBox, tListBox, isKey, index) {
      var listData = [].slice.call(tListBox.listData);
      var jsonData = [].slice.call(tListBox.jsonData);
      var isRefresh = tListBox.sortOrder !== "None" || tListBox.selectionSettings.showCheckbox !== fListBox.selectionSettings.showCheckbox || tListBox.fields.groupBy || tListBox.itemTemplate || fListBox.itemTemplate;
      this.removeSelected(fListBox, fListBox.getSelectedItems());
      var tempItems = [].slice.call(fListBox.listData);
      var localDataArgs = { cancel: false, items: tempItems, eventName: this.toolbarAction };
      fListBox.trigger("actionBegin", localDataArgs);
      if (localDataArgs.cancel) {
        return;
      }
      if (tListBox.listData.length === 0) {
        var noRecElem = tListBox.ulElement.childNodes[0];
        if (noRecElem) {
          tListBox.ulElement.removeChild(noRecElem);
        }
      }
      if (isRefresh) {
        var noRecElem = fListBox.ulElement.childNodes[0];
        if (noRecElem) {
          fListBox.ulElement.removeChild(noRecElem);
        }
      }
      moveTo(
        fListBox.ulElement,
        tListBox.ulElement,
        // eslint-disable-next-line prefer-spread
        Array.apply(null, { length: fListBox.ulElement.childElementCount }).map(Number.call, Number),
        index
      );
      this.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
      if (isKey) {
        this.list.focus();
      }
      index = index ? index : listData.length;
      for (var i = 0; i < fListBox.listData.length; i++) {
        listData.splice(index + i, 0, fListBox.listData[i]);
      }
      for (var i = 0; i < fListBox.jsonData.length; i++) {
        jsonData.splice(index + i, 0, fListBox.jsonData[i]);
      }
      var fliCollections = [].slice.call(fListBox.liCollections);
      var tliCollections = [].slice.call(tListBox.liCollections);
      fListBox.liCollections = [];
      if (index) {
        var toColl = tliCollections.splice(0, index);
        tListBox.liCollections = toColl.concat(fliCollections).concat(tliCollections);
      } else {
        tListBox.liCollections = tliCollections.concat(fliCollections);
      }
      fListBox.value = [];
      listData = listData.filter(function(data) {
        return data.isHeader !== true;
      });
      var sortedData = listData.filter(function(val) {
        return tListBox.jsonData.indexOf(val) === -1;
      });
      for (var i = 0; i < sortedData.length; i++) {
        tListBox.jsonData.splice(index + i, 0, sortedData[i]);
      }
      tListBox.listData = listData;
      if (fListBox.listData.length === fListBox.jsonData.length) {
        fListBox.listData = fListBox.sortedData = fListBox.jsonData = [];
      } else if (fListBox.allowFiltering) {
        for (var i = 0; i < fListBox.listData.length; i++) {
          for (var j = 0; j < fListBox.jsonData.length; j++) {
            if (fListBox.listData[i] === fListBox.jsonData[j]) {
              fListBox.jsonData.splice(j, 1);
            }
          }
        }
        fListBox.listData = fListBox.sortedData = [];
      }
      if (isRefresh) {
        var sourceElem = tListBox.renderItems(listData, tListBox.fields);
        tListBox.updateListItems(sourceElem, tListBox.ulElement);
        this.trigger("actionComplete", { items: tempItems, eventName: this.toolbarAction });
      } else {
        tListBox.sortedData = listData;
      }
      fListBox.updateSelectedOptions();
      if (fListBox.listData.length === 0) {
        fListBox.l10nUpdate();
      }
    };
    ListBox2.prototype.changeData = function(fromIdx, toIdx, jsonToIdx, ele) {
      var listData = [].slice.call(this.listData);
      var jsonData = [].slice.call(this.jsonData);
      var sortData = [].slice.call(this.sortedData);
      var jsonIdx = Array.prototype.indexOf.call(this.jsonData, this.getDataByElems([ele])[0]);
      var sortIdx = Array.prototype.indexOf.call(this.sortedData, this.getDataByElems([ele])[0]);
      var liColl = [].slice.call(this.liCollections);
      listData.splice(toIdx, 0, listData.splice(fromIdx, 1)[0]);
      jsonData.splice(jsonToIdx, 0, jsonData.splice(jsonIdx, 1)[0]);
      sortData.splice(toIdx, 0, sortData.splice(sortIdx, 1)[0]);
      liColl.splice(toIdx, 0, liColl.splice(fromIdx, 1)[0]);
      this.listData = listData;
      this.jsonData = jsonData;
      this.liCollections = liColl;
      this.sortedData = sortData;
    };
    ListBox2.prototype.getSelectedItems = function() {
      var ele = [];
      if (this.selectionSettings.showCheckbox) {
        [].slice.call(this.ulElement.getElementsByClassName("e-check")).forEach(function(cbox) {
          ele.push(closest(cbox, ".e-list-item"));
        });
      } else {
        ele = [].slice.call(this.ulElement.getElementsByClassName(cssClass.selected));
      }
      return ele;
    };
    ListBox2.prototype.getScopedListBox = function() {
      var _this = this;
      var listObj;
      if (this.scope) {
        [].slice.call(document.querySelectorAll(this.scope)).forEach(function(ele) {
          if (getComponent(ele, _this.getModuleName())) {
            listObj = getComponent(ele, _this.getModuleName());
          }
        });
      }
      return listObj;
    };
    ListBox2.prototype.getGrabbedItems = function(args) {
      var grabbItems = false;
      for (var i = 0; i < this.value.length; i++) {
        if (this.value[i] === this.getFormattedValue(args.target.getAttribute("data-value"))) {
          grabbItems = true;
          break;
        }
      }
      if (grabbItems) {
        for (var i = 0; i < this.value.length; i++) {
          var liColl = this.list.querySelectorAll('[aria-selected="true"]');
          for (var j = 0; j < liColl.length; j++) {
            if (this.value[i] === this.getFormattedValue(liColl[j].getAttribute("data-value"))) {
              liColl[j].classList.add("e-grabbed");
            }
          }
        }
      }
      var elems;
      if (this.isAngular) {
        elems = Array.prototype.slice.call(this.element.getElementsByClassName("e-list-parent")[0].querySelectorAll(".e-grabbed"));
      } else {
        elems = Array.prototype.slice.call(this.element.nextElementSibling.querySelectorAll(".e-grabbed"));
      }
      return elems;
    };
    ListBox2.prototype.getDragArgs = function(args, isDragEnd) {
      var elems = this.getGrabbedItems(args);
      if (elems.length) {
        if (isDragEnd) {
          elems.push(args.target);
        }
      } else {
        elems = [args.target];
      }
      return { elements: elems, items: this.getDataByElems(elems) };
    };
    ListBox2.prototype.onKeyDown = function(e) {
      this.keyDownHandler(e);
      e.stopPropagation();
    };
    ListBox2.prototype.keyDownHandler = function(e) {
      if ([32, 35, 36, 37, 38, 39, 40, 65].indexOf(e.keyCode) > -1 && !this.allowFiltering) {
        if (e.target && e.target.className.indexOf("e-edit-template") > -1) {
          return;
        }
        e.preventDefault();
        if (e.keyCode === 32 && this.ulElement.children.length) {
          this.selectHandler({
            target: this.ulElement.getElementsByClassName("e-focused")[0],
            ctrlKey: e.ctrlKey,
            shiftKey: e.shiftKey
          });
        } else if (e.keyCode === 65 && e.ctrlKey) {
          this.selectAll();
        } else if ((e.keyCode === 38 || e.keyCode === 40) && e.ctrlKey && e.shiftKey) {
          this.moveUpDown(e.keyCode === 38 ? true : false, true);
        } else if ((this.toolbarSettings.items.length || this.tBListBox) && (e.keyCode === 39 || e.keyCode === 37) && e.ctrlKey) {
          var listObj = this.tBListBox || this.getScopedListBox();
          if (e.keyCode === 39) {
            if (e.shiftKey) {
              this.moveAllData(this, listObj, true);
            } else {
              this.moveData(this, listObj, true);
            }
          } else {
            if (e.shiftKey) {
              this.moveAllData(listObj, this, true);
            } else {
              this.moveData(listObj, this, true);
            }
          }
        } else if (e.keyCode !== 37 && e.keyCode !== 39 && e.code !== "KeyA") {
          this.upDownKeyHandler(e);
        }
      } else if (this.allowFiltering) {
        if (e.keyCode === 40 || e.keyCode === 38) {
          this.upDownKeyHandler(e);
        }
      }
    };
    ListBox2.prototype.upDownKeyHandler = function(e) {
      var ul = this.ulElement;
      var defaultIdx = e.keyCode === 40 || e.keyCode === 36 ? 0 : ul.childElementCount - 1;
      var fliIdx = defaultIdx;
      var fli = ul.getElementsByClassName("e-focused")[0] || ul.getElementsByClassName(cssClass.selected)[0];
      if (fli) {
        if (e.keyCode !== 35 && e.keyCode !== 36) {
          fliIdx = Array.prototype.indexOf.call(ul.children, fli);
          if (e.keyCode === 40) {
            fliIdx++;
          } else {
            fliIdx--;
          }
          if (fliIdx < 0 || fliIdx > ul.childElementCount - 1) {
            return;
          }
        }
        removeClass([fli], "e-focused");
      }
      var cli = ul.children[fliIdx];
      if (cli) {
        fliIdx = this.getValidIndex(cli, fliIdx, e.keyCode);
        if (fliIdx === -1) {
          addClass([fli], "e-focused");
          return;
        }
        ul.children[fliIdx].focus();
        ul.children[fliIdx].classList.add("e-focused");
        if (!e.ctrlKey || !this.selectionSettings.showCheckbox && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {
          this.selectHandler({ target: ul.children[fliIdx], ctrlKey: e.ctrlKey, shiftKey: e.shiftKey }, true);
        }
        if (this.selectionSettings.showCheckbox && e.ctrlKey && e.shiftKey && (e.keyCode === 36 || e.keyCode === 35)) {
          var selectedidx = Array.prototype.indexOf.call(ul.children, fli);
          var sidx = e.code === "Home" ? 0 : selectedidx;
          var eidx = e.code === "Home" ? selectedidx : ul.children.length - 1;
          for (var i = sidx; i <= eidx; i++) {
            var item = ul.children[i];
            this.notify("updatelist", { li: item, e: {
              target: this.ulElement.getElementsByClassName("e-focused")[0],
              ctrlKey: e.ctrlKey,
              shiftKey: e.shiftKey
            }, module: "listbox" });
          }
        }
      }
    };
    ListBox2.prototype.KeyUp = function(e) {
      var _this = this;
      var char = String.fromCharCode(e.keyCode);
      var isWordCharacter = char.match(/\w/);
      if (!isNullOrUndefined(isWordCharacter)) {
        this.isValidKey = true;
      }
      this.isValidKey = e.keyCode === 8 || e.keyCode === 46 || this.isValidKey;
      if (this.isValidKey) {
        this.isValidKey = false;
        switch (e.keyCode) {
          default:
            if (this.allowFiltering) {
              var eventArgsData_1 = {
                preventDefaultAction: false,
                text: this.targetElement(),
                updateData: function(dataSource, query, fields) {
                  if (eventArgsData_1.cancel) {
                    return;
                  }
                  _this.isFiltered = true;
                  _this.remoteFilterAction = true;
                  _this.dataUpdater(dataSource, query, fields);
                },
                event: e,
                cancel: false
              };
              this.trigger("filtering", eventArgsData_1, function(args) {
                _this.isDataFetched = false;
                if (args.cancel || _this.filterInput.value !== "" && _this.isFiltered) {
                  return;
                }
                if (!args.cancel && !_this.isCustomFiltering && !args.preventDefaultAction) {
                  _this.inputString = _this.filterInput.value;
                  _this.filteringAction(_this.jsonData, new Query(), _this.fields);
                }
                if (!_this.isFiltered && !_this.isCustomFiltering && !args.preventDefaultAction) {
                  _this.dataUpdater(_this.jsonData, new Query(), _this.fields);
                }
              });
            }
        }
      }
    };
    ListBox2.prototype.filter = function(dataSource, query, fields) {
      this.isCustomFiltering = true;
      this.filteringAction(dataSource, query, fields);
    };
    ListBox2.prototype.filteringAction = function(dataSource, query, fields) {
      this.resetList(dataSource, fields, query);
    };
    ListBox2.prototype.targetElement = function() {
      this.targetInputElement = this.list.getElementsByClassName("e-input-filter")[0];
      return this.targetInputElement.value;
    };
    ListBox2.prototype.dataUpdater = function(dataSource, query, fields) {
      this.isDataFetched = false;
      var backCommand = true;
      if (this.targetElement().trim() === "") {
        var list = this.mainList.cloneNode ? this.mainList.cloneNode(true) : this.mainList;
        if (backCommand) {
          this.remoteCustomValue = false;
          this.onActionComplete(list, this.jsonData);
          this.notify("reOrder", { module: "CheckBoxSelection", enable: this.selectionSettings.showCheckbox, e: this });
        }
      } else {
        this.resetList(dataSource, fields, query);
      }
    };
    ListBox2.prototype.focusOutHandler = function() {
      var ele = this.list.getElementsByClassName("e-focused")[0];
      if (ele) {
        ele.classList.remove("e-focused");
      }
      if (this.allowFiltering) {
        this.refreshClearIcon();
      }
    };
    ListBox2.prototype.getValidIndex = function(cli, index, keyCode) {
      var cul = this.ulElement;
      if (cli.classList.contains("e-disabled") || cli.classList.contains(cssClass.group)) {
        if (keyCode === 40 || keyCode === 36) {
          index++;
        } else {
          index--;
        }
      }
      if (index < 0 || index === cul.childElementCount) {
        return -1;
      }
      cli = cul.childNodes[index];
      if (cli.classList.contains("e-disabled") || cli.classList.contains(cssClass.group)) {
        index = this.getValidIndex(cli, index, keyCode);
      }
      return index;
    };
    ListBox2.prototype.updateSelectedOptions = function() {
      var _this = this;
      var selectedOptions = [];
      var values = [];
      extend(values, this.value);
      this.getSelectedItems().forEach(function(ele) {
        if (!ele.classList.contains("e-grabbed")) {
          selectedOptions.push(_this.getFormattedValue(ele.getAttribute("data-value")));
        }
      });
      if (this.mainList.childElementCount === this.ulElement.childElementCount) {
        if (this.allowFiltering && this.selectionSettings.showCheckbox) {
          for (var i = 0; i < selectedOptions.length; i++) {
            if (values.indexOf(selectedOptions[i]) > -1) {
              continue;
            } else {
              values.push(selectedOptions[i]);
            }
          }
          this.setProperties({ value: values }, true);
        } else {
          this.setProperties({ value: selectedOptions }, true);
        }
      }
      this.updateSelectTag();
      this.updateToolBarState();
      if (this.tBListBox) {
        this.tBListBox.updateToolBarState();
      }
    };
    ListBox2.prototype.clearSelection = function(values) {
      var _this = this;
      if (values === void 0) {
        values = this.value;
      }
      if (this.selectionSettings.showCheckbox) {
        var dvalue_1;
        this.getSelectedItems().forEach(function(li) {
          dvalue_1 = _this.getFormattedValue(li.getAttribute("data-value"));
          if (values.indexOf(dvalue_1) < 0) {
            li.getElementsByClassName("e-check")[0].classList.remove("e-check");
            li.removeAttribute("aria-selected");
          }
        });
      }
    };
    ListBox2.prototype.setSelection = function(values, isSelect, isText) {
      var _this = this;
      if (values === void 0) {
        values = this.value;
      }
      if (isSelect === void 0) {
        isSelect = true;
      }
      if (isText === void 0) {
        isText = false;
      }
      var li;
      var liselect;
      if (values) {
        values.forEach(function(value) {
          var text;
          if (isText) {
            text = _this.getValueByText(value);
          } else {
            text = value;
          }
          if (typeof text === "string") {
            text = text.split("\\").join("\\\\");
            li = _this.list.querySelector('[data-value="' + text.replace(/"/g, '\\"') + '"]');
          } else {
            li = _this.list.querySelector('[data-value="' + text + '"]');
          }
          if (li) {
            if (_this.selectionSettings.showCheckbox) {
              liselect = li.getElementsByClassName("e-frame")[0].classList.contains("e-check");
            } else {
              liselect = li.classList.contains("e-selected");
            }
            if (!isSelect && liselect || isSelect && !liselect && li) {
              if (_this.selectionSettings.showCheckbox) {
                _this.notify("updatelist", { li, module: "listbox" });
                li.focus();
              } else {
                if (isSelect) {
                  li.classList.add(cssClass.selected);
                  li.setAttribute("aria-selected", "true");
                  li.focus();
                } else {
                  li.classList.remove(cssClass.selected);
                  li.removeAttribute("aria-selected");
                }
              }
            }
          }
        });
      }
      this.updateSelectTag();
    };
    ListBox2.prototype.updateSelectTag = function() {
      var ele = this.getSelectTag();
      var innerHTML = "";
      ele.innerHTML = "";
      if (this.value) {
        for (var i = 0, len = this.value.length; i < len; i++) {
          innerHTML += "<option selected>" + this.value[i] + "</option>";
        }
        ele.innerHTML += innerHTML;
        for (var i = 0, len = ele.childNodes.length; i < len; i++) {
          ele.childNodes[i].setAttribute("value", this.value[i].toString());
        }
      }
      this.checkSelectAll();
    };
    ListBox2.prototype.checkDisabledState = function(inst) {
      return inst.ulElement.querySelectorAll("." + cssClass.li).length === 0;
    };
    ListBox2.prototype.updateToolBarState = function() {
      var _this = this;
      if (this.toolbarSettings.items.length) {
        var listObj_1 = this.getScopedListBox();
        var wrap_1 = this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
        this.toolbarSettings.items.forEach(function(value) {
          var btn = wrap_1.querySelector('[data-value="' + value + '"]');
          switch (value) {
            case "moveAllTo":
              btn.disabled = _this.checkDisabledState(_this);
              break;
            case "moveAllFrom":
              btn.disabled = _this.checkDisabledState(listObj_1);
              break;
            case "moveFrom":
              btn.disabled = listObj_1.value && listObj_1.value.length ? false : true;
              break;
            case "moveUp":
              btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[0]) ? false : true;
              break;
            case "moveDown":
              btn.disabled = _this.value && _this.value.length && !_this.isSelected(_this.ulElement.children[_this.ulElement.childElementCount - 1]) ? false : true;
              break;
            default:
              btn.disabled = _this.value && _this.value.length ? false : true;
              break;
          }
        });
      }
    };
    ListBox2.prototype.setCheckboxPosition = function() {
      var listWrap = this.list;
      if (!this.initLoad && this.selectionSettings.checkboxPosition === "Left") {
        listWrap.classList.remove("e-right");
      }
      if (this.selectionSettings.checkboxPosition === "Right") {
        listWrap.classList.add("e-right");
      }
    };
    ListBox2.prototype.showCheckbox = function(showCheckbox) {
      var index = 0;
      var liColl = this.list.lastElementChild.querySelectorAll("li");
      var liCollLen = this.list.lastElementChild.getElementsByClassName("e-list-item").length;
      if (showCheckbox) {
        this.ulElement = this.renderItems(this.listData, this.fields);
        this.mainList = this.ulElement;
        this.list.removeChild(this.list.getElementsByTagName("ul")[0]);
        this.list.appendChild(this.ulElement);
        if (this.selectionSettings.showSelectAll && !this.list.getElementsByClassName("e-selectall-parent")[0]) {
          var l10nShow = new L10n(this.getModuleName(), { selectAllText: "Select All", unSelectAllText: "Unselect All" }, this.locale);
          this.showSelectAll = true;
          this.selectAllText = l10nShow.getConstant("selectAllText");
          this.unSelectAllText = l10nShow.getConstant("unSelectAllText");
          this.popupWrapper = this.list;
          this.checkBoxSelectionModule.checkAllParent = null;
          this.notify("selectAll", {});
          this.checkSelectAll();
        }
      } else {
        if (this.list.getElementsByClassName("e-selectall-parent")[0]) {
          this.list.removeChild(this.list.getElementsByClassName("e-selectall-parent")[0]);
        }
        for (index; index < liCollLen; index++) {
          if (liColl[index].classList.contains("e-list-item")) {
            liColl[index].removeChild(liColl[index].getElementsByClassName("e-checkbox-wrapper")[0]);
          }
          if (liColl[index].hasAttribute("aria-selected")) {
            liColl[index].removeAttribute("aria-selected");
          }
        }
        this.mainList = this.ulElement;
      }
      this.value = [];
    };
    ListBox2.prototype.isSelected = function(ele) {
      if (!isNullOrUndefined(ele)) {
        return ele.classList.contains(cssClass.selected) || ele.querySelector(".e-check") !== null;
      } else {
        return false;
      }
    };
    ListBox2.prototype.getSelectTag = function() {
      return this.list.getElementsByClassName("e-hidden-select")[0];
    };
    ListBox2.prototype.getToolElem = function() {
      return this.list.parentElement.getElementsByClassName("e-listbox-tool")[0];
    };
    ListBox2.prototype.formResetHandler = function() {
      this.value = this.initialSelectedOptions;
    };
    ListBox2.prototype.getModuleName = function() {
      return "listbox";
    };
    ListBox2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    ListBox2.prototype.getLocaleName = function() {
      return "listbox";
    };
    ListBox2.prototype.destroy = function() {
      this.unwireEvents();
      if (this.element.tagName === "EJS-LISTBOX") {
        this.element.innerHTML = "";
      } else {
        this.element.style.display = "inline-block";
        if (this.toolbarSettings.items.length) {
          this.list.parentElement.parentElement.insertBefore(this.list, this.list.parentElement);
          detach(this.list.nextElementSibling);
        }
        this.list.parentElement.insertBefore(this.element, this.list);
      }
      _super.prototype.destroy.call(this);
      this.enableRtlElements = [];
      this.liCollections = null;
      this.list = null;
      this.ulElement = null;
      this.mainList = null;
      this.spinner = null;
      this.rippleFun = null;
      if (this.itemTemplate) {
        this.clearTemplate();
      }
    };
    ListBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrap = this.toolbarSettings.items.length ? this.list.parentElement : this.list;
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      this.setUpdateInitial(["fields", "query", "dataSource"], newProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrap], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrap], newProp.cssClass.replace(/\s+/g, " ").trim().split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.list.classList.add("e-rtl");
            } else {
              this.list.classList.remove("e-rtl");
            }
            break;
          case "value":
            removeClass(this.list.querySelectorAll("." + cssClass.selected), cssClass.selected);
            this.clearSelection(this.value);
            this.setSelection();
            break;
          case "height":
            this.setHeight();
            break;
          case "enabled":
            this.setEnable();
            break;
          case "allowDragAndDrop":
            if (newProp.allowDragAndDrop) {
              this.initDraggable();
            } else {
              getComponent(this.ulElement, "sortable").destroy();
            }
            break;
          case "allowFiltering":
            if (this.allowFiltering) {
              this.setFiltering();
            } else {
              this.list.removeChild(this.list.getElementsByClassName("e-filter-parent")[0]);
              this.filterParent = null;
              removeClass([this.list], "e-filter-list");
            }
            break;
          case "filterBarPlaceholder":
            if (this.allowFiltering) {
              if (this.filterInput) {
                Input.setPlaceholder(newProp.filterBarPlaceholder, this.filterInput);
              }
            }
            break;
          case "scope":
            if (this.allowDragAndDrop) {
              getComponent(this.ulElement, "sortable").scope = newProp.scope;
            }
            if (this.toolbarSettings.items.length) {
              if (oldProp.scope) {
                getComponent(document.querySelector(oldProp.scope), this.getModuleName()).tBListBox = null;
              }
              if (newProp.scope) {
                getComponent(document.querySelector(newProp.scope), this.getModuleName()).tBListBox = this;
              }
            }
            break;
          case "toolbarSettings": {
            var ele = void 0;
            var pos = newProp.toolbarSettings.position;
            var toolElem = this.getToolElem();
            if (pos) {
              removeClass([wrap], ["e-right", "e-left"]);
              wrap.classList.add("e-" + pos.toLowerCase());
              if (pos === "Left") {
                wrap.insertBefore(toolElem, this.list);
              } else {
                wrap.appendChild(toolElem);
              }
            }
            if (newProp.toolbarSettings.items) {
              if (oldProp.toolbarSettings && oldProp.toolbarSettings.items.length) {
                ele = this.list.parentElement;
                ele.parentElement.insertBefore(this.list, ele);
                detach(ele);
              }
              this.initToolbarAndStyles();
              this.wireToolbarEvent();
            }
            break;
          }
          case "selectionSettings": {
            var showSelectAll = newProp.selectionSettings.showSelectAll;
            var showCheckbox = newProp.selectionSettings.showCheckbox;
            if (!isNullOrUndefined(showSelectAll)) {
              this.showSelectAll = showSelectAll;
              if (this.showSelectAll) {
                var l10nSel = new L10n(this.getModuleName(), { selectAllText: "Select All", unSelectAllText: "Unselect All" }, this.locale);
                this.checkBoxSelectionModule.checkAllParent = null;
                this.showSelectAll = true;
                this.selectAllText = l10nSel.getConstant("selectAllText");
                this.unSelectAllText = l10nSel.getConstant("selectAllText");
                this.popupWrapper = this.list;
              }
              this.notify("selectAll", {});
              this.checkSelectAll();
            }
            if (!isNullOrUndefined(showCheckbox)) {
              this.showCheckbox(showCheckbox);
            }
            if (this.selectionSettings.showCheckbox) {
              this.setCheckboxPosition();
            }
            break;
          }
          case "dataSource":
            this.isDataSourceUpdate = true;
            this.jsonData = [].slice.call(this.dataSource);
            break;
        }
      }
    };
    var ListBox_1;
    __decorate36([
      Property("")
    ], ListBox2.prototype, "cssClass", void 0);
    __decorate36([
      Property([])
    ], ListBox2.prototype, "value", void 0);
    __decorate36([
      Property("")
    ], ListBox2.prototype, "height", void 0);
    __decorate36([
      Property(true)
    ], ListBox2.prototype, "enabled", void 0);
    __decorate36([
      Property(false)
    ], ListBox2.prototype, "enablePersistence", void 0);
    __decorate36([
      Property(false)
    ], ListBox2.prototype, "allowDragAndDrop", void 0);
    __decorate36([
      Property(1e3)
    ], ListBox2.prototype, "maximumSelectionLength", void 0);
    __decorate36([
      Property(false)
    ], ListBox2.prototype, "allowFiltering", void 0);
    __decorate36([
      Property("")
    ], ListBox2.prototype, "scope", void 0);
    __decorate36([
      Property(true)
    ], ListBox2.prototype, "ignoreCase", void 0);
    __decorate36([
      Property(null)
    ], ListBox2.prototype, "filterBarPlaceholder", void 0);
    __decorate36([
      Event()
    ], ListBox2.prototype, "beforeItemRender", void 0);
    __decorate36([
      Event()
    ], ListBox2.prototype, "filtering", void 0);
    __decorate36([
      Event()
    ], ListBox2.prototype, "select", void 0);
    __decorate36([
      Event()
    ], ListBox2.prototype, "change", void 0);
    __decorate36([
      Event()
    ], ListBox2.prototype, "beforeDrop", void 0);
    __decorate36([
      Event()
    ], ListBox2.prototype, "dragStart", void 0);
    __decorate36([
      Event()
    ], ListBox2.prototype, "drag", void 0);
    __decorate36([
      Event()
    ], ListBox2.prototype, "drop", void 0);
    __decorate36([
      Event()
    ], ListBox2.prototype, "dataBound", void 0);
    __decorate36([
      Property(null)
    ], ListBox2.prototype, "groupTemplate", void 0);
    __decorate36([
      Property("Request failed")
    ], ListBox2.prototype, "actionFailureTemplate", void 0);
    __decorate36([
      Property(1e3)
    ], ListBox2.prototype, "zIndex", void 0);
    __decorate36([
      Property(false)
    ], ListBox2.prototype, "ignoreAccent", void 0);
    __decorate36([
      Complex({}, ToolbarSettings)
    ], ListBox2.prototype, "toolbarSettings", void 0);
    __decorate36([
      Complex({}, SelectionSettings)
    ], ListBox2.prototype, "selectionSettings", void 0);
    ListBox2 = ListBox_1 = __decorate36([
      NotifyPropertyChanges
    ], ListBox2);
    return ListBox2;
  }(DropDownBase)
);
var listBoxClasses = {
  backIcon: "e-input-group-icon e-back-icon e-icons",
  filterBarClearIcon: "e-input-group-icon e-clear-icon e-icons",
  filterInput: "e-input-filter",
  filterParent: "e-filter-parent",
  clearIcon: "e-clear-icon"
};

// node_modules/@syncfusion/ej2-kanban/node_modules/@syncfusion/ej2-dropdowns/src/mention/mention.js
var __extends40 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate37 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Mention = (
  /** @class */
  function(_super) {
    __extends40(Mention2, _super);
    function Mention2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    Mention2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "minLength":
            this.minLength = newProp.minLength;
            break;
          case "suffixText":
            this.suffixText = newProp.suffixText;
            break;
          case "allowSpaces":
            this.allowSpaces = newProp.allowSpaces;
            break;
          case "mentionChar":
            this.mentionChar = newProp.mentionChar;
            break;
          case "showMentionChar":
            this.showMentionChar = newProp.showMentionChar;
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
        }
      }
    };
    Mention2.prototype.updateCssClass = function(newClass, oldClass) {
      if (!isNullOrUndefined(oldClass)) {
        oldClass = oldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newClass)) {
        newClass = newClass.replace(/\s+/g, " ").trim();
      }
      this.setCssClass(newClass, [this.inputElement], oldClass);
      if (this.popupObj) {
        this.setCssClass(newClass, [this.popupObj.element], oldClass);
      }
    };
    Mention2.prototype.setCssClass = function(cssClass2, elements, oldClass) {
      if (!isNullOrUndefined(oldClass) && oldClass !== "") {
        removeClass(elements, oldClass.split(" "));
      }
      if (!isNullOrUndefined(cssClass2) && cssClass2 !== "") {
        addClass(elements, cssClass2.split(" "));
      }
    };
    Mention2.prototype.initializeData = function() {
      this.isSelected = false;
      this.isFiltered = false;
      this.beforePopupOpen = false;
      this.initRemoteRender = false;
      this.isListResetted = false;
      this.isPopupOpen = false;
      this.isCollided = false;
      this.lineBreak = false;
      this.keyConfigure = {
        tab: "tab",
        enter: "13",
        escape: "27",
        end: "35",
        home: "36",
        down: "40",
        up: "38",
        pageUp: "33",
        pageDown: "34",
        open: "alt+40",
        close: "shift+tab",
        hide: "alt+38",
        space: "32"
      };
    };
    Mention2.prototype.preRender = function() {
      this.initializeData();
      _super.prototype.preRender.call(this);
    };
    Mention2.prototype.render = function() {
      var isSelector = typeof this.target === "string";
      this.inputElement = !isNullOrUndefined(this.target) ? this.checkAndUpdateInternalComponent(isSelector ? document.querySelector(this.target) : this.target) : this.element;
      if (this.isContentEditable(this.inputElement)) {
        this.inputElement.setAttribute("contenteditable", "true");
        addClass([this.inputElement], ["e-mention"]);
        if (isNullOrUndefined(this.target)) {
          addClass([this.inputElement], ["e-editable-element"]);
        }
      }
      this.inputElement.setAttribute("role", "textbox");
      this.queryString = this.elementValue();
      this.wireEvent();
    };
    Mention2.prototype.wireEvent = function() {
      EventHandler.add(this.inputElement, "keyup", this.onKeyUp, this);
      this.bindCommonEvent();
    };
    Mention2.prototype.unWireEvent = function() {
      EventHandler.remove(this.inputElement, "keyup", this.onKeyUp);
      this.unBindCommonEvent();
    };
    Mention2.prototype.bindCommonEvent = function() {
      if (!Browser.isDevice) {
        this.keyboardModule = new KeyboardEvents(this.inputElement, {
          keyAction: this.keyActionHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
      }
    };
    Mention2.prototype.hideSpinner = function() {
      this.hideWaitingSpinner();
    };
    Mention2.prototype.hideWaitingSpinner = function() {
      if (!isNullOrUndefined(this.spinnerElement)) {
        hideSpinner(this.spinnerElement);
      }
      if (!isNullOrUndefined(this.spinnerTemplate) && !isNullOrUndefined(this.spinnerTemplateElement)) {
        detach(this.spinnerTemplateElement);
      }
    };
    Mention2.prototype.checkAndUpdateInternalComponent = function(targetElement2) {
      if (!this.isVue && targetElement2.classList.contains("e-richtexteditor")) {
        return targetElement2.querySelector(".e-content");
      }
      if (this.isVue && targetElement2.nodeName === "TEXTAREA" && targetElement2.classList.contains("e-rte-hidden")) {
        var parentElement = targetElement2.parentElement;
        if (parentElement && parentElement.classList.contains("e-richtexteditor")) {
          return parentElement.querySelector(".e-content");
        }
      }
      return targetElement2;
    };
    Mention2.prototype.showWaitingSpinner = function() {
      if (!isNullOrUndefined(this.popupObj)) {
        if (isNullOrUndefined(this.spinnerTemplate) && isNullOrUndefined(this.spinnerElement)) {
          this.spinnerElement = this.popupObj.element;
          createSpinner({
            target: this.spinnerElement,
            width: Browser.isDevice ? "16px" : "14px"
          }, this.createElement);
          showSpinner(this.spinnerElement);
        }
        if (!isNullOrUndefined(this.spinnerTemplate)) {
          this.setSpinnerTemplate();
        }
      }
    };
    Mention2.prototype.keyActionHandler = function(e) {
      var isNavigation = e.action === "down" || e.action === "up" || e.action === "pageUp" || e.action === "pageDown" || e.action === "home" || e.action === "end";
      var isTabAction = e.action === "tab" || e.action === "close";
      if (this.list === void 0 && !this.isRequested && !isTabAction && e.action !== "escape" && e.action !== "space") {
        this.renderList();
      }
      if (isNullOrUndefined(this.list) || !isNullOrUndefined(this.liCollections) && isNavigation && this.liCollections.length === 0 || this.isRequested) {
        return;
      }
      if (e.action === "escape") {
        e.preventDefault();
      }
      this.isSelected = e.action === "escape" ? false : this.isSelected;
      switch (e.action) {
        case "down":
        case "up":
          this.updateUpDownAction(e);
          break;
        case "tab":
          if (this.isPopupOpen) {
            e.preventDefault();
            var li = this.list.querySelector("." + dropDownBaseClasses.selected);
            if (li) {
              this.setSelection(li, e);
            }
            if (this.isPopupOpen) {
              this.hidePopup(e);
            }
          }
          break;
        case "enter":
          if (this.isPopupOpen) {
            e.preventDefault();
            if (this.popupObj && this.popupObj.element.contains(this.selectedLI)) {
              this.updateSelectedItem(this.selectedLI, e, false, true);
            }
          }
          break;
        case "escape":
          if (this.isPopupOpen) {
            this.hidePopup(e);
          }
          break;
      }
    };
    Mention2.prototype.updateUpDownAction = function(e) {
      var focusEle = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (this.isSelectFocusItem(focusEle)) {
        this.setSelection(focusEle, e);
      } else if (!isNullOrUndefined(this.liCollections)) {
        var li = this.list.querySelector("." + dropDownBaseClasses.selected);
        if (!isNullOrUndefined(li)) {
          var value = this.getFormattedValue(li.getAttribute("data-value"));
          this.activeIndex = this.getIndexByValue(value);
        }
        var index = e.action === "down" ? this.activeIndex + 1 : this.activeIndex - 1;
        var startIndex = 0;
        startIndex = e.action === "down" && isNullOrUndefined(this.activeIndex) ? 0 : this.liCollections.length - 1;
        index = index < 0 ? this.liCollections.length - 1 : index === this.liCollections.length ? 0 : index;
        var nextItem = isNullOrUndefined(this.activeIndex) ? this.liCollections[startIndex] : this.liCollections[index];
        if (!isNullOrUndefined(nextItem)) {
          this.setSelection(nextItem, e);
        }
      }
      if (this.isPopupOpen) {
        e.preventDefault();
      }
    };
    Mention2.prototype.isSelectFocusItem = function(element2) {
      return !isNullOrUndefined(element2);
    };
    Mention2.prototype.unBindCommonEvent = function() {
      if (!Browser.isDevice) {
        this.keyboardModule.destroy();
      }
    };
    Mention2.prototype.onKeyUp = function(e) {
      var rangetextContent;
      this.isTyped = e.code !== "Enter" && e.code !== "Space" && e.code !== "ArrowDown" && e.code !== "ArrowUp" ? true : false;
      if (document.activeElement != this.inputElement) {
        this.inputElement.focus();
      }
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
        rangetextContent = this.range.startContainer.textContent.split("");
      }
      var currentRange = this.getTextRange();
      var lastWordRange = this.getLastLetter(currentRange);
      var Regex = new RegExp(this.mentionChar, "g");
      var charRegex = new RegExp("[a-zA-Z]", "g");
      if (e.key === "Shift" || e.keyCode === 37 || e.keyCode === 39) {
        return;
      }
      if (!currentRange || !lastWordRange || e.code === "Enter" || e.keyCode === 27 || lastWordRange.match(Regex) && lastWordRange.match(Regex).length > 1 || this.isContentEditable(this.inputElement) && this.range.startContainer && this.range.startContainer.previousElementSibling && this.range.startContainer.textContent.split("").length > 0 && (rangetextContent.length === 1 || rangetextContent[rangetextContent.length - 2].indexOf("") === -1 || this.range.startContainer.nodeType === 1)) {
        if (this.allowSpaces && currentRange && currentRange.trim() !== "" && charRegex.test(currentRange) && currentRange.indexOf(this.mentionChar) !== -1 && !this.isMatchedText() && (currentRange.length > 1 && currentRange.replace(/\u00A0/g, " ").charAt(currentRange.length - 2) !== " ") && (this.list && this.list.querySelectorAll("ul").length > 0)) {
          this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace(" ", " ");
          this.searchLists(e);
        } else if (this.isPopupOpen && (!this.allowSpaces || !lastWordRange) && (e.code !== "ArrowDown" && e.code !== "ArrowUp")) {
          this.hidePopup();
          this.lineBreak = true;
        }
        return;
      }
      this.queryString = lastWordRange.replace(this.mentionChar, "");
      if (this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0) && this.queryString !== "" && e.keyCode !== 38 && e.keyCode !== 40 && !this.lineBreak) {
        this.searchLists(e);
        if (!this.isPopupOpen && this.queryString.length >= this.minLength) {
          if (!this.isContentEditable(this.inputElement)) {
            this.showPopup();
          } else if (this.isContentEditable(this.inputElement) && this.range && this.range.startContainer !== this.inputElement && e.keyCode !== 9) {
            this.showPopup();
          }
        }
      } else if (lastWordRange.indexOf(this.mentionChar) === 0 && !this.isPopupOpen && e.keyCode !== 8 && (!this.popupObj || (isNullOrUndefined(this.target) && !document.body.contains(this.popupObj.element) || !isNullOrUndefined(this.target) && document.body.contains(this.popupObj.element)))) {
        if (this.initRemoteRender && this.list && this.list.classList.contains("e-nodata")) {
          this.searchLists(e);
        }
        this.resetList(this.dataSource, this.fields);
        if (isNullOrUndefined(this.list)) {
          this.initValue();
        }
        if (!this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40) {
          this.didPopupOpenByTypingInitialChar = true;
          this.showPopup();
          if (this.initRemoteRender && this.list.querySelectorAll("li").length === 0) {
            this.showWaitingSpinner();
          }
          this.lineBreak = false;
        }
      } else if (this.allowSpaces && this.queryString !== "" && currentRange && currentRange.trim() !== "" && currentRange.replace(" ", " ").lastIndexOf(" ") < currentRange.length - 1 && e.keyCode !== 38 && e.keyCode !== 40 && e.keyCode !== 8 && this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0)) {
        this.queryString = currentRange.substring(currentRange.lastIndexOf(this.mentionChar) + 1).replace(" ", " ");
        this.searchLists(e);
      } else if (this.queryString === "" && this.isPopupOpen && e.keyCode !== 38 && e.keyCode !== 40 && this.mentionChar.charCodeAt(0) === lastWordRange.charCodeAt(0)) {
        this.searchLists(e);
        if (!this.isListResetted) {
          this.resetList(this.dataSource, this.fields);
        }
      }
      this.isListResetted = false;
    };
    Mention2.prototype.isMatchedText = function() {
      var isMatched = false;
      for (var i = 0; i < (this.liCollections && this.liCollections.length); i++) {
        if (this.getTextRange() && this.getTextRange().substring(this.getTextRange().lastIndexOf(this.mentionChar) + 1).replace(" ", " ").trim() === this.liCollections[i].getAttribute("data-value").toLowerCase()) {
          isMatched = true;
        }
      }
      return isMatched;
    };
    Mention2.prototype.getCurrentRange = function() {
      this.range = this.inputElement.ownerDocument.getSelection().getRangeAt(0);
      return this.range;
    };
    Mention2.prototype.searchLists = function(e) {
      var _this = this;
      this.isDataFetched = false;
      if (isNullOrUndefined(this.list)) {
        _super.prototype.render.call(this);
        this.unWireListEvents();
        this.wireListEvents();
      }
      if (e.type !== "mousedown" && (e.keyCode === 40 || e.keyCode === 38)) {
        this.queryString = this.queryString === "" ? null : this.queryString;
        this.beforePopupOpen = true;
        this.resetList(this.dataSource, this.fields);
        return;
      }
      this.isSelected = false;
      this.activeIndex = null;
      var eventArgs = {
        preventDefaultAction: false,
        text: this.queryString,
        updateData: function(dataSource, query, fields) {
          if (eventArgs.cancel) {
            return;
          }
          _this.isFiltered = true;
          _this.filterAction(dataSource, query, fields);
        },
        cancel: false
      };
      this.trigger("filtering", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && !_this.isFiltered && !eventArgs2.preventDefaultAction) {
          _this.filterAction(_this.dataSource, null, _this.fields);
        }
      });
    };
    Mention2.prototype.filterAction = function(dataSource, query, fields) {
      this.beforePopupOpen = true;
      if (this.queryString.length >= this.minLength) {
        this.resetList(dataSource, fields, query);
        this.isListResetted = true;
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        this.beforePopupOpen = false;
      }
      this.setDataIndex();
      this.renderReactTemplates();
    };
    Mention2.prototype.onActionComplete = function(ulElement, list, e, isUpdated) {
      _super.prototype.onActionComplete.call(this, ulElement, list, e);
      if (this.isActive) {
        if (!isNullOrUndefined(ulElement)) {
          attributes(ulElement, { "id": this.inputElement.id + "_options", "role": "listbox", "aria-hidden": "false" });
        }
        var focusItem = ulElement.querySelector("." + dropDownBaseClasses.li);
        if (focusItem) {
          focusItem.classList.add(dropDownBaseClasses.selected);
          this.selectedLI = focusItem;
          var value = this.getFormattedValue(focusItem.getAttribute("data-value"));
          this.selectEventCallback(focusItem, this.getDataByValue(value), value, true);
        }
      }
    };
    Mention2.prototype.setDataIndex = function() {
      for (var i = 0; this.liCollections && i < this.liCollections.length; i++) {
        this.liCollections[i].setAttribute("data-index", i.toString());
      }
    };
    Mention2.prototype.listOption = function(dataSource, fieldsSettings) {
      var _this = this;
      var fields = _super.prototype.listOption.call(this, dataSource, fieldsSettings);
      if (isNullOrUndefined(fields.itemCreated)) {
        fields.itemCreated = function(e) {
          if (_this.highlight) {
            if (_this.inputElement.tagName === _this.getNgDirective() && _this.itemTemplate) {
              setTimeout(function() {
                highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
              }, 0);
            } else {
              highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
            }
          }
        };
      } else {
        var itemCreated_1 = fields.itemCreated;
        fields.itemCreated = function(e) {
          if (_this.highlight) {
            highlightSearch(e.item, _this.queryString, _this.ignoreCase, _this.filterType);
          }
          itemCreated_1.apply(_this, [e]);
        };
      }
      return fields;
    };
    Mention2.prototype.elementValue = function() {
      if (!this.isContentEditable(this.inputElement)) {
        return this.inputElement.value.replace(this.mentionChar, "");
      } else {
        return this.inputElement.textContent.replace(this.mentionChar, "");
      }
    };
    Mention2.prototype.getQuery = function(query) {
      var filterQuery = query ? query.clone() : this.query ? this.query.clone() : new Query();
      var filterType = this.queryString === "" && !isNullOrUndefined(this.elementValue()) ? "equal" : this.filterType;
      var queryString2 = this.queryString === "" && !isNullOrUndefined(this.elementValue()) ? this.elementValue() : this.queryString;
      if (this.isFiltered) {
        return filterQuery;
      }
      if (this.queryString !== null && this.queryString !== "") {
        var dataType = this.typeOfData(this.dataSource).typeof;
        if (!(this.dataSource instanceof DataManager) && dataType === "string" || dataType === "number") {
          filterQuery.where("", filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        } else {
          var mapping = !isNullOrUndefined(this.fields.text) ? this.fields.text : "";
          filterQuery.where(mapping, filterType, queryString2, this.ignoreCase, this.ignoreAccent);
        }
      }
      if (!isNullOrUndefined(this.suggestionCount)) {
        if (this.suggestionCount !== 25) {
          for (var queryElements = 0; queryElements < filterQuery.queries.length; queryElements++) {
            if (filterQuery.queries[queryElements].fn === "onTake") {
              filterQuery.queries.splice(queryElements, 1);
            }
          }
        }
        filterQuery.take(this.suggestionCount);
      }
      return filterQuery;
    };
    Mention2.prototype.renderHightSearch = function() {
      if (this.highlight) {
        for (var i = 0; i < this.liCollections.length; i++) {
          var isHighlight = this.ulElement.querySelector(".e-active");
          if (!isHighlight) {
            revertHighlightSearch(this.liCollections[i]);
            highlightSearch(this.liCollections[i], this.queryString, this.ignoreCase, this.filterType);
          }
        }
      }
    };
    Mention2.prototype.getTextRange = function() {
      var text;
      if (!this.isContentEditable(this.inputElement)) {
        var component = this.inputElement;
        if (!isNullOrUndefined(component)) {
          var startPos = component.selectionStart;
          if (component.value && startPos >= 0) {
            text = component.value.substring(0, startPos);
          }
        }
      } else {
        if (this.range) {
          var selectedElem = this.range.startContainer;
          if (!isNullOrUndefined(selectedElem)) {
            var workingNodeContent = selectedElem.textContent;
            var selectStartOffset = this.range.startOffset;
            if (workingNodeContent && selectStartOffset >= 0) {
              text = workingNodeContent.substring(0, selectStartOffset);
            }
          }
        }
      }
      return text;
    };
    Mention2.prototype.getLastLetter = function(text) {
      if (isNullOrUndefined(text)) {
        return "";
      }
      var textValue = text.replace(/\u00A0/g, " ");
      var words = textValue.split(/\s+/);
      var wordCnt = words.length - 1;
      return words[wordCnt].trim();
    };
    Mention2.prototype.isContentEditable = function(element2) {
      return element2 && element2.nodeName !== "INPUT" && element2.nodeName !== "TEXTAREA";
    };
    Mention2.prototype.showPopup = function() {
      this.beforePopupOpen = true;
      if (document.activeElement != this.inputElement) {
        this.inputElement.focus();
      }
      this.queryString = this.didPopupOpenByTypingInitialChar ? this.queryString : "";
      this.didPopupOpenByTypingInitialChar = false;
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
      }
      if (!this.isTyped) {
        this.resetList(this.dataSource, this.fields);
      }
      if (isNullOrUndefined(this.list)) {
        this.initValue();
      }
      this.renderPopup();
      attributes(this.inputElement, { "aria-activedescendant": this.selectedElementID });
      if (this.selectedElementID == null) {
        this.inputElement.removeAttribute("aria-activedescendant");
      }
    };
    Mention2.prototype.hidePopup = function(e) {
      this.removeSelection();
      this.closePopup(0, e);
    };
    Mention2.prototype.closePopup = function(delay, e) {
      var _this = this;
      if (!(this.popupObj && document.body.contains(this.popupObj.element) && this.beforePopupOpen)) {
        return;
      }
      EventHandler.remove(document, "mousedown", this.onDocumentClick);
      this.inputElement.removeAttribute("aria-owns");
      this.inputElement.removeAttribute("aria-activedescendant");
      this.beforePopupOpen = false;
      var animModel = {
        name: "FadeOut",
        duration: 100,
        delay: delay ? delay : 0
      };
      var popupInstance = this.popupObj;
      var eventArgs = { popup: popupInstance, cancel: false, animation: animModel, event: e || null };
      this.trigger("closed", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel && _this.popupObj) {
          if (_this.isPopupOpen) {
            _this.popupObj.hide(new Animation(eventArgs2.animation));
          } else {
            _this.destroyPopup();
          }
        }
      });
    };
    Mention2.prototype.renderPopup = function() {
      var _this = this;
      var args = { cancel: false };
      this.trigger("beforeOpen", args, function(args2) {
        if (!args2.cancel) {
          var popupEle_1;
          if (isNullOrUndefined(_this.target)) {
            popupEle_1 = _this.createElement("div", {
              id: _this.inputElement.id + "_popup",
              className: "e-mention e-popup " + (_this.cssClass != null ? _this.cssClass : "")
            });
          } else {
            popupEle_1 = _this.element;
            if (_this.cssClass != null) {
              addClass([popupEle_1], _this.cssClass.split(" "));
            }
          }
          if (!isNullOrUndefined(_this.target)) {
            popupEle_1.id = _this.inputElement.id + "_popup";
          }
          _this.listHeight = formatUnit(_this.popupHeight);
          if (!isNullOrUndefined(_this.list.querySelector("li")) && !_this.initRemoteRender) {
            var li = _this.list.querySelector("." + dropDownBaseClasses.focus);
            if (!isNullOrUndefined(li)) {
              _this.selectedLI = li;
              var value = _this.getFormattedValue(li.getAttribute("data-value"));
              _this.selectEventCallback(li, _this.getDataByValue(value), value, true);
            }
          }
          append([_this.list], popupEle_1);
          if (_this.inputElement.parentElement && _this.inputElement.parentElement.parentElement && _this.inputElement.parentElement.parentElement.classList.contains("e-richtexteditor")) {
            if (popupEle_1.firstElementChild && popupEle_1.firstElementChild.childElementCount > 0) {
              popupEle_1.firstElementChild.setAttribute("aria-owns", _this.inputElement.parentElement.parentElement.id);
            }
          }
          if (!_this.popupObj || !document.body.contains(_this.popupObj.element) || !document.contains(popupEle_1) && isNullOrUndefined(_this.target)) {
            document.body.appendChild(popupEle_1);
          }
          var coordinates_1;
          popupEle_1.style.visibility = "hidden";
          _this.setHeight(popupEle_1);
          var offsetValue = 0;
          var left = 0;
          _this.initializePopup(popupEle_1, offsetValue, left);
          _this.checkCollision(popupEle_1);
          popupEle_1.style.visibility = "visible";
          addClass([popupEle_1], ["e-mention", "e-popup", "e-popup-close"]);
          if (!isNullOrUndefined(_this.list)) {
            _this.unWireListEvents();
            _this.wireListEvents();
          }
          _this.selectedElementID = _this.selectedLI ? _this.selectedLI.id : null;
          attributes(_this.inputElement, { "aria-owns": _this.inputElement.id + "_options", "aria-activedescendant": _this.selectedElementID });
          if (_this.selectedElementID == null) {
            _this.inputElement.removeAttribute("aria-activedescendant");
          }
          var animModel = { name: "FadeIn", duration: 100 };
          _this.beforePopupOpen = true;
          var popupInstance = _this.popupObj;
          var eventArgs = { popup: popupInstance, cancel: false, animation: animModel };
          _this.trigger("opened", eventArgs, function(eventArgs2) {
            if (!eventArgs2.cancel) {
              _this.renderReactTemplates();
              _this.popupObj.show(new Animation(eventArgs2.animation), _this.zIndex === 1e3 ? _this.inputElement : null);
              if (isNullOrUndefined(_this.getTriggerCharPosition())) {
                return;
              }
              coordinates_1 = _this.getCoordinates(_this.inputElement, _this.getTriggerCharPosition());
              if (!_this.isCollided) {
                popupEle_1.style.cssText = "top: ".concat(coordinates_1.top.toString(), "px;\n left: ").concat(coordinates_1.left.toString(), "px;\nposition: absolute;\n display: block;");
              } else {
                popupEle_1.style.left = formatUnit(coordinates_1.left);
                popupEle_1.style.top = formatUnit(coordinates_1.top - parseInt(_this.popupHeight.toString()));
                _this.isCollided = false;
              }
              popupEle_1.style.width = _this.popupWidth !== "100%" && !isNullOrUndefined(_this.popupWidth) ? formatUnit(_this.popupWidth) : "auto";
              _this.setHeight(popupEle_1);
              popupEle_1.style.zIndex = _this.zIndex === 1e3 ? getZindexPartial(popupEle_1).toString() : _this.zIndex.toString();
            } else {
              _this.beforePopupOpen = false;
              _this.destroyPopup();
            }
          });
        } else {
          _this.beforePopupOpen = false;
        }
      });
    };
    Mention2.prototype.setHeight = function(popupEle) {
      if (this.popupHeight !== "auto" && this.list) {
        this.list.style.maxHeight = (parseInt(this.listHeight, 10) - 2).toString() + "px";
        popupEle.style.maxHeight = formatUnit(this.popupHeight);
      } else {
        popupEle.style.height = "auto";
      }
    };
    Mention2.prototype.checkCollision = function(popupEle) {
      if (!Browser.isDevice || Browser.isDevice && !(this.getModuleName() === "mention")) {
        var coordinates = this.getCoordinates(this.inputElement, this.getTriggerCharPosition());
        var collision = isCollide(popupEle, null, coordinates.left, coordinates.top);
        if (collision.length > 0) {
          popupEle.style.marginTop = -parseInt(getComputedStyle(popupEle).marginTop, 10) + "px";
          this.isCollided = true;
        }
        this.popupObj.resolveCollision();
      }
    };
    Mention2.prototype.getTriggerCharPosition = function() {
      var mostRecentTriggerCharPos;
      var currentRange = this.getTextRange();
      if (currentRange !== void 0 && currentRange !== null) {
        mostRecentTriggerCharPos = 0;
        var idx = currentRange.lastIndexOf(this.mentionChar);
        if (idx >= mostRecentTriggerCharPos) {
          mostRecentTriggerCharPos = idx;
        }
      }
      return mostRecentTriggerCharPos ? mostRecentTriggerCharPos : 0;
    };
    Mention2.prototype.initializePopup = function(element2, offsetValue, left) {
      var _this = this;
      this.popupObj = new Popup(element2, {
        width: this.setWidth(),
        targetType: "relative",
        relateTo: this.inputElement,
        collision: { X: "flip", Y: "flip" },
        offsetY: offsetValue,
        enableRtl: this.enableRtl,
        offsetX: left,
        position: { X: "left", Y: "bottom" },
        actionOnScroll: "hide",
        zIndex: this.zIndex,
        close: function() {
          _this.destroyPopup();
        },
        open: function() {
          EventHandler.add(document, "mousedown", _this.onDocumentClick, _this);
          _this.isPopupOpen = true;
          _this.setDataIndex();
        }
      });
    };
    Mention2.prototype.setWidth = function() {
      var width = formatUnit(this.popupWidth);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.inputElement.offsetWidth * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    Mention2.prototype.destroyPopup = function() {
      this.isPopupOpen = false;
      this.popupObj.destroy();
      if (isNullOrUndefined(this.target)) {
        detach(this.popupObj.element);
      } else {
        this.popupObj.element.innerHTML = "";
        this.popupObj.element.removeAttribute("style");
        this.popupObj.element.removeAttribute("aria-disabled");
      }
    };
    Mention2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (!(!isNullOrUndefined(this.popupObj) && closest(target, "#" + this.popupObj.element.id))) {
        this.hidePopup(e);
      }
    };
    Mention2.prototype.getCoordinates = function(element2, position) {
      var properties = ["direction", "boxSizing", "width", "height", "overflowX", "overflowY", "borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "fontStyle", "fontVariant", "fontWeight", "fontStretch", "fontSize", "fontSizeAdjust", "lineHeight", "fontFamily", "textAlign", "textTransform", "textIndent", "textDecoration", "letterSpacing", "wordSpacing"];
      var div;
      var span;
      var range;
      var globalRange;
      var coordinates;
      var computed;
      var rect;
      if (!this.isContentEditable(this.inputElement)) {
        div = this.createElement("div", { className: "e-form-mirror-div" });
        document.body.appendChild(div);
        computed = getComputedStyle(element2);
        div.style.position = "absolute";
        div.style.visibility = "hidden";
        properties.forEach(function(prop) {
          div.style[prop] = computed[prop];
        });
        div.textContent = element2.value.substring(0, position);
        if (this.inputElement.nodeName === "INPUT") {
          div.textContent = div.textContent.replace(/\s/g, " ");
        }
        span = this.createElement("span");
        span.textContent = element2.value.substring(position) || ".";
        div.appendChild(span);
        rect = element2.getBoundingClientRect();
      } else {
        var selectedNodePosition = this.getTriggerCharPosition();
        globalRange = this.range;
        range = document.createRange();
        if (this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) {
          range.setStart(globalRange.startContainer, selectedNodePosition);
          range.setEnd(globalRange.startContainer, selectedNodePosition);
        } else {
          range.setStart(globalRange.startContainer, globalRange.startOffset);
          range.setEnd(globalRange.startContainer, globalRange.endOffset);
        }
        this.isTyped = false;
        range.collapse(false);
        rect = range.getBoundingClientRect().top === 0 ? range.startContainer.getClientRects()[0] : range.getBoundingClientRect();
      }
      var doc = document.documentElement;
      var windowLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
      var windowTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
      var width = 0;
      if (!isNullOrUndefined(range) && range.getBoundingClientRect().top === 0) {
        for (var i = 0; i < this.range.startContainer.childNodes.length; i++) {
          if (this.range.startContainer.childNodes[i].nodeType !== Node.TEXT_NODE && this.range.startContainer.childNodes[i].textContent.trim() !== "") {
            width += this.range.startContainer.childNodes[i].getClientRects()[0].width;
          } else if (this.range.startContainer.childNodes[i].textContent !== "") {
            var span_1 = document.createElement("span");
            span_1.innerHTML = this.range.startContainer.childNodes[i].nodeValue;
            document.body.appendChild(span_1);
            var textNodeWidth = span_1.offsetWidth;
            document.body.removeChild(span_1);
            width += textNodeWidth;
          }
        }
      }
      if (!this.isContentEditable(this.inputElement)) {
        coordinates = {
          top: rect.top + windowTop + span.offsetTop + parseInt(computed.borderTopWidth, 10) + parseInt(computed.fontSize, 10) + 3 - element2.scrollTop - (this.isCollided ? 10 : 0),
          left: rect.left + windowLeft + span.offsetLeft + parseInt(computed.borderLeftWidth, 10)
        };
        document.body.removeChild(div);
      } else {
        coordinates = {
          top: rect.top + windowTop + parseInt(getComputedStyle(this.inputElement).fontSize, 10) - (this.isCollided ? 10 : 0),
          left: rect.left + windowLeft + width
        };
      }
      return coordinates;
    };
    Mention2.prototype.initValue = function() {
      this.renderList();
      if (this.dataSource instanceof DataManager) {
        this.initRemoteRender = true;
      } else {
        this.updateValues();
      }
    };
    Mention2.prototype.updateValues = function() {
      var li = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (!isNullOrUndefined(li)) {
        this.setSelection(li, null);
      }
    };
    Mention2.prototype.renderList = function() {
      _super.prototype.render.call(this);
      this.unWireListEvents();
      this.wireListEvents();
    };
    Mention2.prototype.wireListEvents = function() {
      EventHandler.add(this.list, "click", this.onMouseClick, this);
      EventHandler.add(this.list, "mouseover", this.onMouseOver, this);
      EventHandler.add(this.list, "mouseout", this.onMouseLeave, this);
    };
    Mention2.prototype.unWireListEvents = function() {
      EventHandler.remove(this.list, "click", this.onMouseClick);
      EventHandler.remove(this.list, "mouseover", this.onMouseOver);
      EventHandler.remove(this.list, "mouseout", this.onMouseLeave);
    };
    Mention2.prototype.onMouseClick = function(e) {
      var target = e.target;
      var li = closest(target, "." + dropDownBaseClasses.li);
      if (!this.isValidLI(li)) {
        return;
      }
      this.isSelected = true;
      this.setSelection(li, e);
      var delay = 100;
      this.closePopup(delay, e);
      this.inputElement.focus();
    };
    Mention2.prototype.updateSelectedItem = function(li, e, preventSelect, isSelection) {
      var _this = this;
      this.removeSelection();
      li.classList.add(dropDownBaseClasses.selected);
      this.removeHover();
      var value = this.getFormattedValue(li.getAttribute("data-value"));
      var selectedData = this.getDataByValue(value);
      if (!preventSelect && !isNullOrUndefined(e) && !(e.action === "down" || e.action === "up")) {
        var items = this.detachChanges(selectedData);
        this.isSelected = true;
        var eventArgs = {
          e,
          item: li,
          itemData: items,
          isInteracted: e ? true : false,
          cancel: false
        };
        this.trigger("select", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            li.classList.remove(dropDownBaseClasses.selected);
            _this.isSelected = false;
            _this.isSelectCancel = true;
          } else {
            _this.selectEventCallback(li, selectedData, value);
            if (isSelection) {
              _this.setSelectOptions(li, e);
            }
          }
        });
      } else {
        this.selectEventCallback(li, selectedData, value);
        if (isSelection) {
          this.setSelectOptions(li, e);
        }
      }
    };
    Mention2.prototype.setSelection = function(li, e) {
      if (this.isValidLI(li) && (!li.classList.contains(dropDownBaseClasses.selected) || this.isPopupOpen && this.isSelected && li.classList.contains(dropDownBaseClasses.selected))) {
        this.updateSelectedItem(li, e, false, true);
      } else {
        this.setSelectOptions(li, e);
      }
    };
    Mention2.prototype.setSelectOptions = function(li, e) {
      if (this.list) {
        this.removeHover();
      }
      this.previousSelectedLI = !isNullOrUndefined(this.selectedLI) ? this.selectedLI : null;
      this.selectedLI = li;
      if (this.isPopupOpen && !isNullOrUndefined(this.selectedLI)) {
        this.setScrollPosition(e);
      }
      if (e && (e.keyCode === 38 || e.keyCode === 40)) {
        return;
      }
      if (isNullOrUndefined(e) || this.setValue(e)) {
        return;
      }
    };
    Mention2.prototype.setScrollPosition = function(e) {
      if (!isNullOrUndefined(e)) {
        switch (e.action) {
          case "pageDown":
          case "down":
          case "end":
            this.scrollBottom();
            break;
          default:
            this.scrollTop();
            break;
        }
      } else {
        this.scrollBottom(true);
      }
    };
    Mention2.prototype.scrollBottom = function(isInitial) {
      if (!isNullOrUndefined(this.selectedLI)) {
        var currentOffset = this.list.offsetHeight;
        var nextBottom = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        var nextOffset = this.list.scrollTop + nextBottom - currentOffset;
        nextOffset = isInitial ? nextOffset + parseInt(getComputedStyle(this.list).paddingTop, 10) * 2 : nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextBottom > currentOffset || !(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = nextOffset;
        }
      }
    };
    Mention2.prototype.scrollTop = function() {
      if (!isNullOrUndefined(this.selectedLI)) {
        var nextOffset = this.selectedLI.offsetTop - this.list.scrollTop;
        nextOffset = this.fields.groupBy && nextOffset;
        var boxRange = this.selectedLI.offsetTop + this.selectedLI.offsetHeight - this.list.scrollTop;
        if (this.activeIndex === 0) {
          this.list.scrollTop = 0;
        } else if (nextOffset < 0) {
          this.list.scrollTop = this.list.scrollTop + nextOffset;
        } else if (!(boxRange > 0 && this.list.offsetHeight > boxRange)) {
          this.list.scrollTop = this.selectedLI.offsetTop;
        }
      }
    };
    Mention2.prototype.selectEventCallback = function(li, selectedData, value, selectLi) {
      this.previousItemData = !isNullOrUndefined(this.itemData) ? this.itemData : null;
      this.item = li;
      this.itemData = selectedData;
      var focusedItem = this.list.querySelector("." + dropDownBaseClasses.focus);
      if (focusedItem) {
        removeClass([focusedItem], dropDownBaseClasses.focus);
      }
      if (selectLi) {
        addClass([li], dropDownBaseClasses.selected);
      }
      li.setAttribute("aria-selected", "true");
      this.activeIndex = this.getIndexByValue(value);
    };
    Mention2.prototype.detachChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    Mention2.prototype.setValue = function(e) {
      if (!this.isReact) {
        if (!isNullOrUndefined(this.displayTemplate)) {
          this.setDisplayTemplate();
        }
        this.updateMentionValue(e);
        return true;
      } else {
        if (!isNullOrUndefined(this.displayTemplate)) {
          this.setDisplayTemplate(e);
        } else {
          this.updateMentionValue(e);
        }
        return true;
      }
    };
    Mention2.prototype.updateMentionValue = function(e) {
      var dataItem = this.getItemData();
      var textSuffix;
      var value;
      var endPos;
      var range;
      var globalRange;
      var selection = this.inputElement.ownerDocument.getSelection();
      var startPos = this.getTriggerCharPosition();
      textSuffix = typeof this.suffixText === "string" ? this.suffixText : "";
      if (this.isSelectCancel) {
        this.isSelectCancel = false;
        return;
      }
      if (dataItem.text !== null) {
        value = this.mentionVal(dataItem.text);
      }
      if (!this.isContentEditable(this.inputElement)) {
        var myField = this.inputElement;
        var currentTriggerSnippet = this.getTextRange().substring(startPos + this.mentionChar.length, this.getTextRange().length);
        value += textSuffix;
        endPos = startPos + this.mentionChar.length;
        endPos += currentTriggerSnippet.length;
        myField.value = myField.value.substring(0, startPos) + value + myField.value.substring(endPos, myField.value.length);
        myField.selectionStart = startPos + value.length;
        myField.selectionEnd = startPos + value.length;
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        this.onChangeEvent(e);
      } else {
        endPos = this.getTriggerCharPosition() + this.mentionChar.length;
        if (this.range && this.range.startContainer.textContent.trim() !== this.mentionChar) {
          endPos = this.range.endOffset;
        }
        globalRange = this.range;
        range = document.createRange();
        if (this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1 || this.getTextRange() && this.getTextRange().trim() === this.mentionChar) {
          range.setStart(globalRange.startContainer, startPos);
          range.setEnd(globalRange.startContainer, endPos);
        } else {
          if (globalRange.commonAncestorContainer.textContent.trim() !== "" && !isNullOrUndefined(globalRange.commonAncestorContainer.textContent.trim()) && this.getTextRange() && this.getTextRange().lastIndexOf(this.mentionChar) !== -1) {
            range.setStart(globalRange.startContainer, globalRange.startOffset - 1);
            range.setEnd(globalRange.startContainer, globalRange.endOffset - 1);
          } else {
            range.setStart(globalRange.startContainer, globalRange.startOffset);
            range.setEnd(globalRange.startContainer, globalRange.endOffset);
          }
        }
        this.isTyped = false;
        range.deleteContents();
        var element2 = this.createElement("div");
        element2.innerHTML = value;
        var frag = document.createDocumentFragment();
        var node = void 0;
        var lastNode = void 0;
        while (node = element2.firstChild) {
          lastNode = frag.appendChild(node);
        }
        range.insertNode(frag);
        if (lastNode) {
          range = range.cloneRange();
          range.setStartAfter(lastNode);
          range.collapse(true);
          selection.removeAllRanges();
          selection.addRange(range);
        }
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        this.onChangeEvent(e);
      }
    };
    Mention2.prototype.mentionVal = function(value) {
      var showChar = this.showMentionChar ? this.mentionChar : "";
      if (!isNullOrUndefined(this.displayTemplate) && !isNullOrUndefined(this.displayTempElement)) {
        value = this.displayTempElement.innerHTML;
      }
      if (this.isContentEditable(this.inputElement)) {
        return '<span contenteditable="false" class="e-mention-chip">' + showChar + value + "</span>".concat(typeof this.suffixText === "string" ? this.suffixText : " ");
      } else {
        return showChar + value;
      }
    };
    Mention2.prototype.setDisplayTemplate = function(e) {
      var _this = this;
      var compiledString;
      if (this.isReact) {
        this.clearTemplate(["displayTemplate"]);
        if (this.displayTempElement) {
          detach(this.displayTempElement);
          this.displayTempElement = null;
        }
      }
      if (!this.displayTempElement) {
        this.displayTempElement = this.createElement("div");
      }
      if (!this.isReact) {
        this.displayTempElement.innerHTML = "";
      }
      compiledString = compile(this.displayTemplate);
      var displayCompTemp = compiledString(this.itemData, this, "displayTemplate", this.displayTemplateId, this.isStringTemplate, null, this.displayTempElement);
      if (displayCompTemp && displayCompTemp.length > 0) {
        append(displayCompTemp, this.displayTempElement);
      }
      if (!this.isReact) {
        this.renderTemplates();
      } else {
        this.renderTemplates(function() {
          _this.updateMentionValue(e);
        });
      }
    };
    Mention2.prototype.renderTemplates = function(callBack) {
      this.renderReactTemplates(callBack);
    };
    Mention2.prototype.setSpinnerTemplate = function() {
      var _this = this;
      var compiledString;
      if (this.isReact) {
        this.clearTemplate(["spinnerTemplate"]);
        if (this.spinnerTemplateElement) {
          detach(this.spinnerTemplateElement);
          this.spinnerTemplateElement = null;
        }
      }
      if (!this.spinnerTemplateElement) {
        this.spinnerTemplateElement = this.createElement("div");
      }
      if (!this.isReact) {
        this.spinnerTemplateElement.innerHTML = "";
      }
      compiledString = compile(this.spinnerTemplate);
      var spinnerCompTemp = compiledString(null, this, "spinnerTemplate", this.spinnerTemplateId, this.isStringTemplate, null, this.spinnerTemplateElement);
      if (spinnerCompTemp && spinnerCompTemp.length > 0) {
        for (var i = 0; i < spinnerCompTemp.length; i++) {
          this.spinnerTemplateElement.appendChild(spinnerCompTemp[i]);
        }
      }
      if (!this.isReact) {
        this.renderTemplates();
        this.popupObj.element.appendChild(this.spinnerTemplateElement);
      } else {
        this.renderTemplates(function() {
          _this.popupObj.element.appendChild(_this.spinnerTemplateElement);
        });
      }
    };
    Mention2.prototype.onChangeEvent = function(eve) {
      this.isSelected = false;
      var items = this.detachMentionChanges(this.itemData);
      var preItems;
      if (typeof this.previousItemData === "string" || typeof this.previousItemData === "boolean" || typeof this.previousItemData === "number") {
        preItems = Object.defineProperties({}, {
          value: {
            value: this.previousItemData,
            enumerable: true
          },
          text: {
            value: this.previousItemData,
            enumerable: true
          }
        });
      } else {
        preItems = this.previousItemData;
      }
      var eventArgs = {
        e: eve,
        item: this.item,
        itemData: items,
        previousItem: this.previousSelectedLI,
        previousItemData: preItems,
        isInteracted: eve ? true : false,
        value: this.item.innerHTML,
        element: this.inputElement
      };
      this.trigger("change", eventArgs);
    };
    Mention2.prototype.detachMentionChanges = function(value) {
      var items;
      if (typeof value === "string" || typeof value === "boolean" || typeof value === "number") {
        items = Object.defineProperties({}, {
          value: {
            value,
            enumerable: true
          },
          text: {
            value,
            enumerable: true
          }
        });
      } else {
        items = value;
      }
      return items;
    };
    Mention2.prototype.getItemData = function() {
      var fields = this.fields;
      var dataItem = null;
      dataItem = this.itemData;
      var dataValue;
      var dataText;
      if (!isNullOrUndefined(dataItem)) {
        dataValue = getValue(fields.value, dataItem);
        dataText = getValue(fields.text, dataItem);
      }
      var value = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataValue : dataItem;
      var text = !isNullOrUndefined(dataItem) && !isUndefined(dataValue) ? dataText : dataItem;
      return { value, text };
    };
    Mention2.prototype.removeSelection = function() {
      if (this.list) {
        var selectedItems = this.list.querySelectorAll("." + dropDownBaseClasses.selected);
        if (selectedItems.length) {
          removeClass(selectedItems, dropDownBaseClasses.selected);
          selectedItems[0].removeAttribute("aria-selected");
        }
      }
    };
    Mention2.prototype.onMouseOver = function(e) {
      var currentLi = closest(e.target, "." + dropDownBaseClasses.li);
      this.setHover(currentLi);
    };
    Mention2.prototype.setHover = function(li) {
      if (this.isValidLI(li) && !li.classList.contains(dropDownBaseClasses.hover)) {
        this.removeHover();
        addClass([li], dropDownBaseClasses.hover);
      }
    };
    Mention2.prototype.removeHover = function() {
      if (this.list) {
        var hoveredItem = this.list.querySelectorAll("." + dropDownBaseClasses.hover);
        if (hoveredItem && hoveredItem.length) {
          removeClass(hoveredItem, dropDownBaseClasses.hover);
        }
      }
    };
    Mention2.prototype.isValidLI = function(li) {
      return li && li.hasAttribute("role") && li.getAttribute("role") === "option";
    };
    Mention2.prototype.onMouseLeave = function() {
      this.removeHover();
    };
    Mention2.prototype.search = function(text, positionX, positionY) {
      if (this.isContentEditable(this.inputElement)) {
        this.range = this.getCurrentRange();
      }
      var currentRange = this.getTextRange();
      var lastWordRange = this.getLastLetter(currentRange);
      if (this.ignoreCase && (text === lastWordRange || text === lastWordRange.toLowerCase()) || !this.ignoreCase && text === lastWordRange) {
        this.resetList(this.dataSource, this.fields);
      } else {
        if (this.isPopupOpen) {
          this.hidePopup();
        }
        return;
      }
      if (isNullOrUndefined(this.list)) {
        this.renderList();
        this.renderPopup();
      } else {
        this.showPopup();
      }
      this.popupObj.element.style.left = formatUnit(positionX);
      this.popupObj.element.style.top = formatUnit(positionY);
    };
    Mention2.prototype.destroy = function() {
      this.hidePopup();
      this.unWireEvent();
      if (this.list) {
        this.unWireListEvents();
      }
      if (this.inputElement && !this.inputElement.classList.contains("e-" + this.getModuleName())) {
        return;
      }
      _super.prototype.destroy.call(this);
    };
    Mention2.prototype.getLocaleName = function() {
      return "mention";
    };
    Mention2.prototype.getNgDirective = function() {
      return "EJS-MENTION";
    };
    Mention2.prototype.getModuleName = function() {
      return "mention";
    };
    __decorate37([
      Property(null)
    ], Mention2.prototype, "cssClass", void 0);
    __decorate37([
      Property("@")
    ], Mention2.prototype, "mentionChar", void 0);
    __decorate37([
      Property(false)
    ], Mention2.prototype, "showMentionChar", void 0);
    __decorate37([
      Property(false)
    ], Mention2.prototype, "allowSpaces", void 0);
    __decorate37([
      Property(null)
    ], Mention2.prototype, "suffixText", void 0);
    __decorate37([
      Property(25)
    ], Mention2.prototype, "suggestionCount", void 0);
    __decorate37([
      Property(0)
    ], Mention2.prototype, "minLength", void 0);
    __decorate37([
      Property("None")
    ], Mention2.prototype, "sortOrder", void 0);
    __decorate37([
      Property(true)
    ], Mention2.prototype, "ignoreCase", void 0);
    __decorate37([
      Property(false)
    ], Mention2.prototype, "highlight", void 0);
    __decorate37([
      Property()
    ], Mention2.prototype, "locale", void 0);
    __decorate37([
      Property("auto")
    ], Mention2.prototype, "popupWidth", void 0);
    __decorate37([
      Property("300px")
    ], Mention2.prototype, "popupHeight", void 0);
    __decorate37([
      Property(null)
    ], Mention2.prototype, "displayTemplate", void 0);
    __decorate37([
      Property(null)
    ], Mention2.prototype, "itemTemplate", void 0);
    __decorate37([
      Property("No records found")
    ], Mention2.prototype, "noRecordsTemplate", void 0);
    __decorate37([
      Property(null)
    ], Mention2.prototype, "spinnerTemplate", void 0);
    __decorate37([
      Property()
    ], Mention2.prototype, "target", void 0);
    __decorate37([
      Property([])
    ], Mention2.prototype, "dataSource", void 0);
    __decorate37([
      Property(null)
    ], Mention2.prototype, "query", void 0);
    __decorate37([
      Property("Contains")
    ], Mention2.prototype, "filterType", void 0);
    __decorate37([
      Complex({ text: null, value: null, iconCss: null, groupBy: null }, FieldSettings)
    ], Mention2.prototype, "fields", void 0);
    __decorate37([
      Event()
    ], Mention2.prototype, "actionBegin", void 0);
    __decorate37([
      Event()
    ], Mention2.prototype, "actionComplete", void 0);
    __decorate37([
      Event()
    ], Mention2.prototype, "actionFailure", void 0);
    __decorate37([
      Event()
    ], Mention2.prototype, "change", void 0);
    __decorate37([
      Event()
    ], Mention2.prototype, "beforeOpen", void 0);
    __decorate37([
      Event()
    ], Mention2.prototype, "opened", void 0);
    __decorate37([
      Event()
    ], Mention2.prototype, "closed", void 0);
    __decorate37([
      Event()
    ], Mention2.prototype, "select", void 0);
    __decorate37([
      Event()
    ], Mention2.prototype, "filtering", void 0);
    __decorate37([
      Event()
    ], Mention2.prototype, "created", void 0);
    __decorate37([
      Event()
    ], Mention2.prototype, "destroyed", void 0);
    Mention2 = __decorate37([
      NotifyPropertyChanges
    ], Mention2);
    return Mention2;
  }(DropDownBase)
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/actions/dialog.js
var KanbanDialog = (
  /** @class */
  function() {
    function KanbanDialog2(parent) {
      this.preventUpdate = false;
      this.parent = parent;
    }
    KanbanDialog2.prototype.openDialog = function(action, data) {
      this.action = action;
      this.parent.activeCardData.data = data;
      this.renderDialog(data, action);
      this.dialogObj.show();
    };
    KanbanDialog2.prototype.closeDialog = function() {
      this.dialogObj.hide();
    };
    KanbanDialog2.prototype.renderDialog = function(args, action) {
      this.element = createElement("div", { id: this.parent.element.id + "_dialog_wrapper" });
      this.parent.element.appendChild(this.element);
      var dialogModel = {
        buttons: this.getDialogButtons(action),
        content: this.getDialogContent(args, action),
        cssClass: DIALOG_CLASS,
        enableRtl: this.parent.enableRtl,
        header: this.parent.localeObj.getConstant(action === "Add" ? "addTitle" : action === "Edit" ? "editTitle" : "deleteTitle"),
        height: "auto",
        isModal: true,
        showCloseIcon: true,
        width: action === "Delete" ? 400 : 350,
        visible: false,
        beforeOpen: this.onBeforeDialogOpen.bind(this),
        beforeClose: this.onBeforeDialogClose.bind(this)
      };
      this.dialogObj = new Dialog(extend(dialogModel, action !== "Delete" ? this.parent.dialogSettings.model || {} : {}), this.element);
      if (action !== "Delete") {
        this.applyFormValidation();
      }
      this.dialogObj.element.querySelector(".e-dlg-closeicon-btn").title = this.parent.localeObj.getConstant("close");
    };
    KanbanDialog2.prototype.getDialogContent = function(args, action) {
      if (action === "Delete") {
        return this.parent.localeObj.getConstant("deleteContent");
      } else {
        var container = createElement("div", { className: FORM_WRAPPER_CLASS });
        var form = createElement("form", {
          id: this.parent.element.id + "EditForm",
          className: FORM_CLASS,
          attrs: { onsubmit: "return false;" }
        });
        if (this.parent.dialogSettings.template) {
          if (args) {
            this.destroyComponents();
            [].slice.call(form.childNodes).forEach(function(node) {
              return remove(node);
            });
          }
          var templateId = this.parent.element.id + "_dialogTemplate";
          var dialogTemplate = this.parent.templateParser(this.parent.dialogSettings.template)(args, this.parent, "dialogTemplate", templateId, false);
          append(dialogTemplate, form);
          this.parent.renderTemplates();
        } else {
          var dialogWrapper = createElement("div", { className: DIALOG_CONTENT_CONTAINER });
          form.appendChild(dialogWrapper);
          var table = createElement("table");
          dialogWrapper.appendChild(table);
          var dialogFields = this.getDialogFields();
          for (var _i = 0, dialogFields_1 = dialogFields; _i < dialogFields_1.length; _i++) {
            var field = dialogFields_1[_i];
            var tr = createElement("tr");
            table.appendChild(tr);
            tr.appendChild(createElement("td", { className: "e-label", innerHTML: field.text ? field.text : field.key }));
            var td = createElement("td");
            tr.appendChild(td);
            td.appendChild(this.renderComponents(field));
          }
        }
        container.appendChild(form);
        return container;
      }
    };
    KanbanDialog2.prototype.getDialogFields = function() {
      var fields = this.parent.dialogSettings.fields;
      if (fields.length === 0) {
        fields = [
          { text: "ID", key: this.parent.cardSettings.headerField, type: "TextBox" },
          { key: this.parent.keyField, type: "DropDown" },
          { key: this.parent.cardSettings.contentField, type: "TextArea" }
        ];
        if (this.parent.sortSettings.field) {
          fields.splice(fields.length - 1, 0, { key: this.parent.sortSettings.field, type: "TextBox" });
        }
        if (this.parent.swimlaneSettings.keyField) {
          fields.splice(fields.length - 1, 0, { key: this.parent.swimlaneSettings.keyField, type: "DropDown" });
        }
      }
      return fields;
    };
    KanbanDialog2.prototype.getDialogButtons = function(action) {
      var primaryButtonClass = action === "Delete" ? "e-dialog-yes" : action === "Add" ? "e-dialog-add" : "e-dialog-edit";
      var flatButtonClass = action === "Delete" ? "e-dialog-no" : "e-dialog-cancel";
      var dialogButtons = [
        {
          buttonModel: {
            cssClass: "e-flat " + primaryButtonClass,
            isPrimary: true,
            content: this.parent.localeObj.getConstant(action === "Add" || action === "Edit" ? "save" : "yes")
          },
          click: this.dialogButtonClick.bind(this)
        },
        {
          buttonModel: {
            cssClass: "e-flat " + flatButtonClass,
            isPrimary: false,
            content: this.parent.localeObj.getConstant(action === "Add" || action === "Edit" ? "cancel" : "no")
          },
          click: this.dialogButtonClick.bind(this)
        }
      ];
      if (action === "Edit") {
        var deleteButton = {
          buttonModel: { cssClass: "e-flat e-dialog-delete", isPrimary: false, content: this.parent.localeObj.getConstant("delete") },
          click: this.dialogButtonClick.bind(this)
        };
        dialogButtons.splice(0, 0, deleteButton);
      }
      return dialogButtons;
    };
    KanbanDialog2.prototype.renderComponents = function(field) {
      var wrapper = createElement("div", { className: field.key + "_wrapper" });
      var element2 = createElement("input", { className: FIELD_CLASS, attrs: { "name": field.key } });
      wrapper.appendChild(element2);
      var divElement;
      var dropDownOptions;
      var controlObj;
      var fieldValue = this.parent.activeCardData.data ? this.parent.activeCardData.data[field.key] : null;
      switch (field.type) {
        case "DropDown":
          if (field.key === this.parent.keyField) {
            var currentKeys = this.parent.enableVirtualization ? this.parent.virtualLayoutModule.columnKeys : this.parent.layoutModule.columnKeys;
            if (this.parent.actionModule.hideColumnKeys.length > 0) {
              currentKeys = [];
              for (var i = 0; i < this.parent.columns.length; i++) {
                var isColumnVisible = this.parent.enableVirtualization ? this.parent.virtualLayoutModule.isColumnVisible(this.parent.columns[i]) : this.parent.layoutModule.isColumnVisible(this.parent.columns[i]);
                if (isColumnVisible) {
                  var isNumeric = typeof this.parent.columns[i].keyField === "number";
                  if (isNumeric) {
                    currentKeys = currentKeys.concat(this.parent.columns[i].keyField.toString());
                  } else {
                    currentKeys = currentKeys.concat(this.parent.columns[i].keyField.split(",").map(function(e) {
                      return e.trim();
                    }));
                  }
                }
              }
            }
            dropDownOptions = { dataSource: currentKeys, value: fieldValue ? fieldValue.toString() : fieldValue };
          } else if (field.key === this.parent.swimlaneSettings.keyField) {
            dropDownOptions = {
              dataSource: [].slice.call(this.parent.enableVirtualization ? this.parent.virtualLayoutModule.kanbanRows : this.parent.layoutModule.kanbanRows),
              fields: { text: "textField", value: "keyField" },
              value: fieldValue
            };
          }
          controlObj = new DropDownList(dropDownOptions);
          break;
        case "Numeric":
          controlObj = new NumericTextBox({ value: fieldValue });
          break;
        case "TextBox":
          controlObj = new TextBox({ value: fieldValue });
          if (fieldValue && this.parent.cardSettings.headerField === field.key) {
            controlObj.enabled = false;
          }
          break;
        case "TextArea":
          remove(element2);
          divElement = createElement("div");
          element2 = createElement("textarea", {
            className: FIELD_CLASS,
            attrs: { "name": field.key, "rows": "3", "aria-label": this.parent.cardSettings.contentField },
            innerHTML: fieldValue
          });
          wrapper.appendChild(divElement).appendChild(element2);
          break;
        default:
          break;
      }
      if (controlObj) {
        controlObj.appendTo(element2);
      }
      return wrapper;
    };
    KanbanDialog2.prototype.onBeforeDialogOpen = function(args) {
      var _this = this;
      var eventProp = {
        data: this.parent.activeCardData.data,
        cancel: false,
        element: this.element,
        target: this.parent.activeCardData.element,
        requestType: this.action
      };
      this.storeElement = document.activeElement;
      if (parseInt(args.maxHeight, 10) <= 250) {
        args.maxHeight = "250px";
      }
      this.parent.trigger(dialogOpen, eventProp, function(openArgs) {
        args.cancel = openArgs.cancel;
        if (openArgs.cancel) {
          _this.destroy();
        }
      });
    };
    KanbanDialog2.prototype.onBeforeDialogClose = function(args) {
      var _this = this;
      var formInputs = this.getFormElements();
      var cardObj = {};
      if (args.isInteracted) {
        this.preventUpdate = true;
      }
      if (!this.preventUpdate) {
        for (var _i = 0, formInputs_1 = formInputs; _i < formInputs_1.length; _i++) {
          var input = formInputs_1[_i];
          var columnName = input.name || this.getColumnName(input);
          if (!isNullOrUndefined(columnName) && columnName !== "") {
            var value = this.getValueFromElement(input);
            if (columnName === this.parent.cardSettings.headerField) {
              value = this.getIDType() === "string" ? value : parseInt(value, 10);
            }
            cardObj[columnName] = value;
          }
        }
      }
      this.preventUpdate = false;
      cardObj = extend(this.parent.activeCardData.data, cardObj);
      var eventProp = { data: cardObj, cancel: false, element: this.element, requestType: this.action };
      this.parent.trigger(dialogClose, eventProp, function(closeArgs) {
        args.cancel = closeArgs.cancel;
        if (!closeArgs.cancel) {
          _this.cardData = eventProp.data;
          _this.destroy();
          _this.parent.actionModule.SingleCardSelection(_this.cardData);
        }
      });
    };
    KanbanDialog2.prototype.getIDType = function() {
      if (this.parent.kanbanData.length !== 0) {
        return typeof this.parent.kanbanData[0][this.parent.cardSettings.headerField];
      }
      return "string";
    };
    KanbanDialog2.prototype.applyFormValidation = function() {
      var _this = this;
      var form = this.element.querySelector("." + FORM_CLASS);
      var rules = {};
      for (var _i = 0, _a = this.parent.dialogSettings.fields; _i < _a.length; _i++) {
        var field = _a[_i];
        rules[field.key] = field.validationRules && Object.keys(field.validationRules).length > 0 ? field.validationRules : null;
      }
      this.formObj = new FormValidator(form, {
        rules,
        customPlacement: function(inputElement, error) {
          var id = error.getAttribute("for");
          var elem = _this.element.querySelector("#" + id + "_Error");
          if (!elem) {
            _this.createTooltip(inputElement, error, id, "");
          }
        },
        validationComplete: function(args) {
          var elem = _this.element.querySelector("#" + args.inputName + "_Error");
          if (elem) {
            elem.style.display = args.status === "failure" ? "" : "none";
          }
        }
      });
    };
    KanbanDialog2.prototype.createTooltip = function(element2, error, name, display) {
      var dlgContent;
      var client;
      var inputClient = element2.parentElement.getBoundingClientRect();
      if (this.element.classList.contains(DIALOG_CLASS)) {
        dlgContent = this.element;
        client = this.element.getBoundingClientRect();
      } else {
        dlgContent = this.element.querySelector(".e-kanban-dialog .e-dlg-content");
        client = dlgContent.getBoundingClientRect();
      }
      var div = createElement("div", {
        className: "e-tooltip-wrap e-popup " + ERROR_VALIDATION_CLASS,
        id: name + "_Error",
        styles: "display:" + display + ";top:" + (inputClient.bottom - client.top + dlgContent.scrollTop + 9) + "px;left:" + (inputClient.left - client.left + dlgContent.scrollLeft + inputClient.width / 2) + "px;"
      });
      var content = createElement("div", { className: "e-tip-content" });
      content.appendChild(error);
      var arrow = createElement("div", { className: "e-arrow-tip e-tip-top" });
      arrow.appendChild(createElement("div", { className: "e-arrow-tip-outer e-tip-top" }));
      arrow.appendChild(createElement("div", { className: "e-arrow-tip-inner e-tip-top" }));
      div.appendChild(content);
      div.appendChild(arrow);
      dlgContent.appendChild(div);
      div.style.left = parseInt(div.style.left, 10) - div.offsetWidth / 2 + "px";
    };
    KanbanDialog2.prototype.destroyToolTip = function() {
      if (this.element) {
        this.element.querySelectorAll("." + ERROR_VALIDATION_CLASS).forEach(function(node) {
          return remove(node);
        });
      }
      if (this.formObj && this.formObj.element) {
        this.formObj.reset();
      }
    };
    KanbanDialog2.prototype.dialogButtonClick = function(event) {
      var target = event.target.cloneNode(true);
      var id = this.formObj.element.id;
      if (document.getElementById(id) && this.formObj.validate() && (target.classList.contains("e-dialog-edit") || target.classList.contains("e-dialog-add"))) {
        this.dialogObj.hide();
        if (target.classList.contains("e-dialog-edit")) {
          var activeCard = this.parent.activeCardData;
          var updateIndex = void 0;
          if (activeCard.data[this.parent.keyField] === this.cardData[this.parent.keyField] && activeCard.element) {
            updateIndex = [].slice.call(activeCard.element.parentElement.children).indexOf(activeCard.element);
          }
          if (this.parent.enableHtmlSanitizer) {
            if (typeof this.cardData[this.parent.cardSettings.contentField] === "string") {
              this.cardData[this.parent.cardSettings.contentField] = SanitizeHtmlHelper.sanitize(this.cardData[this.parent.cardSettings.contentField]);
            }
          }
          this.parent.crudModule.updateCard(this.cardData, updateIndex);
        }
        if (target.classList.contains("e-dialog-add")) {
          this.parent.crudModule.addCard(this.cardData);
        }
        this.parent.actionModule.SingleCardSelection(this.cardData);
        this.cardData = null;
      }
      if (!target.classList.contains("e-dialog-edit") && !target.classList.contains("e-dialog-add")) {
        if (target.classList.contains("e-dialog-cancel")) {
          this.preventUpdate = true;
        }
        this.dialogObj.hide();
        if (target.classList.contains("e-dialog-yes")) {
          this.parent.crudModule.deleteCard(this.parent.activeCardData.data);
        } else if (target.classList.contains("e-dialog-no")) {
          this.openDialog("Edit", this.parent.activeCardData.data);
        } else if (target.classList.contains("e-dialog-delete")) {
          this.openDialog("Delete", this.parent.activeCardData.data);
        }
      }
    };
    KanbanDialog2.prototype.getFormElements = function() {
      var elements = [].slice.call(this.element.querySelectorAll("." + FIELD_CLASS));
      var validElements = [];
      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
        var element2 = elements_1[_i];
        if (element2.classList.contains("e-control")) {
          validElements.push(element2);
        } else if (element2.querySelector(".e-control")) {
          validElements.push(element2.querySelector(".e-control"));
        } else {
          validElements.push(element2);
        }
      }
      return validElements;
    };
    KanbanDialog2.prototype.getColumnName = function(element2) {
      var attrName = element2.getAttribute("data-name") || "";
      if (attrName === "") {
        var isDropDowns = false;
        var fieldSelector = "";
        if (element2.classList.contains("e-dropdownlist") || element2.classList.contains("e-multiselect")) {
          fieldSelector = element2.classList.contains("e-dropdownlist") ? "e-ddl" : "e-multiselect";
          isDropDowns = true;
        } else if (element2.classList.contains("e-numerictextbox")) {
          fieldSelector = "e-numeric";
        }
        var classSelector = isDropDowns ? "." + fieldSelector + ":not(.e-control)" : "." + fieldSelector;
        var control = closest(element2, classSelector) || element2.querySelector("." + fieldSelector);
        if (control) {
          var attrEle = control.querySelector("[name]");
          if (attrEle) {
            attrName = attrEle.name;
          }
        }
      }
      return attrName;
    };
    KanbanDialog2.prototype.getValueFromElement = function(element2) {
      var value;
      if (element2.classList.contains("e-dropdownlist")) {
        value = element2.ej2_instances[0].value;
      } else if (element2.classList.contains("e-multiselect")) {
        value = element2.ej2_instances[0].value;
      } else if (element2.classList.contains("e-checkbox")) {
        value = element2.ej2_instances[0].checked;
      } else {
        if (element2.type === "checkbox") {
          value = element2.checked;
        } else {
          value = element2.value;
        }
      }
      return value;
    };
    KanbanDialog2.prototype.destroyComponents = function() {
      var formelement = this.getFormElements();
      for (var _i = 0, formelement_1 = formelement; _i < formelement_1.length; _i++) {
        var element2 = formelement_1[_i];
        var instance = element2.ej2_instances;
        if (instance && instance.length > 0) {
          instance.forEach(function(node) {
            return node.destroy();
          });
        }
      }
    };
    KanbanDialog2.prototype.destroy = function() {
      this.destroyToolTip();
      this.destroyComponents();
      if (this.dialogObj) {
        this.dialogObj.destroy();
        this.storeElement.focus();
        this.dialogObj = null;
        remove(this.element);
        this.element = null;
      }
    };
    return KanbanDialog2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/actions/keyboard.js
var Keyboard = (
  /** @class */
  function() {
    function Keyboard2(parent) {
      this.keyConfigs = {
        firstCardSelection: "36",
        lastCardSelection: "35",
        upArrow: "38",
        downArrow: "40",
        rightArrow: "39",
        leftArrow: "37",
        multiSelectionEnter: "ctrl+13",
        multiSelectionSpace: "ctrl+32",
        multiSelectionByUpArrow: "shift+38",
        multiSelectionByDownArrow: "shift+40",
        shiftTab: "shift+tab",
        enter: "13",
        tab: "tab",
        delete: "46",
        escape: "27",
        space: "32"
      };
      this.parent = parent;
      this.parent.element.tabIndex = this.parent.element.tabIndex === -1 ? 0 : this.parent.element.tabIndex;
      this.keyboardModule = new KeyboardEvents(this.parent.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      this.multiSelection = false;
    }
    Keyboard2.prototype.keyActionHandler = function(e) {
      var _this = this;
      var selectedCard = this.parent.element.querySelectorAll("." + CARD_CLASS + "." + CARD_SELECTION_CLASS).item(0);
      if (!selectedCard && !closest(document.activeElement, "." + ROOT_CLASS)) {
        return;
      }
      var contentCell;
      var selectedCards;
      var selectedCardsData = [];
      switch (e.action) {
        case "upArrow":
        case "downArrow":
        case "multiSelectionByUpArrow":
        case "multiSelectionByDownArrow":
          e.preventDefault();
          this.processUpDownArrow(e.action, selectedCard);
          break;
        case "rightArrow":
        case "leftArrow":
          this.processLeftRightArrow(e);
          break;
        case "firstCardSelection":
        case "lastCardSelection":
          this.processCardSelection(e.action, selectedCard);
          break;
        case "multiSelectionEnter":
        case "multiSelectionSpace":
          if (document.activeElement) {
            this.parent.actionModule.cardSelection(document.activeElement, true, false);
          }
          break;
        case "space":
        case "enter":
          this.processEnter(e, selectedCard);
          break;
        case "escape":
          if (document.activeElement.classList.contains(CARD_CLASS) || document.activeElement.classList.contains(SHOW_ADD_BUTTON)) {
            if (document.activeElement.classList.contains(CARD_SELECTION_CLASS)) {
              removeClass([document.activeElement], CARD_SELECTION_CLASS);
              document.activeElement.focus();
            } else {
              var ele = closest(document.activeElement, "." + CONTENT_CELLS_CLASS);
              var cards = [].slice.call(ele.querySelectorAll("." + CARD_CLASS));
              removeClass(cards, CARD_SELECTION_CLASS);
              ele.focus();
              this.cardTabIndexRemove();
              this.addRemoveTabIndex("Add");
            }
          }
          break;
        case "tab":
        case "shiftTab":
          contentCell = closest(document.activeElement, "." + CONTENT_CELLS_CLASS);
          if (document.activeElement.classList.contains(CARD_CLASS)) {
            if (!document.activeElement.nextElementSibling && e.action === "tab") {
              e.preventDefault();
            }
            if (!document.activeElement.previousElementSibling && contentCell.querySelector("." + SHOW_ADD_BUTTON) && e.action === "tab") {
              addClass([contentCell.querySelector("." + SHOW_ADD_BUTTON)], SHOW_ADD_FOCUS);
            }
          }
          if (document.activeElement.classList.contains(SHOW_ADD_BUTTON)) {
            if (!contentCell.querySelector("." + CARD_CLASS) && e.action === "tab" || e.action === "shiftTab") {
              e.preventDefault();
            }
          }
          if (document.activeElement.classList.contains(ROOT_CLASS)) {
            this.cardTabIndexRemove();
            this.parent.keyboardModule.addRemoveTabIndex("Add");
          }
          break;
        case "delete":
          selectedCards = [].slice.call(this.parent.element.querySelectorAll("." + CARD_CLASS + "." + CARD_SELECTION_CLASS));
          selectedCards.forEach(function(selected) {
            selectedCardsData.push(_this.parent.getCardDetails(selected));
          });
          this.parent.crudModule.deleteCard(selectedCardsData);
          break;
      }
    };
    Keyboard2.prototype.processCardSelection = function(action, selectedCard) {
      if (selectedCard) {
        removeClass([selectedCard], CARD_SELECTION_CLASS);
        if (this.parent.enableVirtualization) {
          this.parent.virtualLayoutModule.disableAttributeSelection(selectedCard);
        } else {
          this.parent.layoutModule.disableAttributeSelection(selectedCard);
        }
        var selection = this.parent.actionModule.selectionArray;
        selection.splice(selection.indexOf(selectedCard.getAttribute("data-id")), 1);
      }
      this.cardTabIndexRemove();
      var cards = [].slice.call(this.parent.element.querySelectorAll("." + CARD_CLASS));
      var element2 = action === "firstCardSelection" ? cards[0] : cards[cards.length - 1];
      this.parent.actionModule.cardSelection(element2, false, false);
      this.addRemoveTabIndex("Remove");
      element2.focus();
      var card = [].slice.call(closest(element2, "." + CONTENT_CELLS_CLASS).querySelectorAll("." + CARD_CLASS));
      card.forEach(function(element3) {
        element3.setAttribute("tabindex", "0");
      });
    };
    Keyboard2.prototype.processLeftRightArrow = function(e) {
      if (document.activeElement.classList.contains(CONTENT_CELLS_CLASS)) {
        if (e.action === "rightArrow" && document.activeElement.nextElementSibling) {
          document.activeElement.nextElementSibling.focus();
        } else if (e.action === "leftArrow" && document.activeElement.previousElementSibling) {
          document.activeElement.previousElementSibling.focus();
        }
      }
    };
    Keyboard2.prototype.processUpDownArrow = function(action, selectedCard) {
      if (action === "upArrow" && document.activeElement) {
        if (document.activeElement.classList.contains(CARD_CLASS) && document.activeElement.previousElementSibling) {
          document.activeElement.previousElementSibling.focus();
        } else if (document.activeElement.classList.contains(SHOW_ADD_BUTTON)) {
          document.activeElement.setAttribute("tabindex", "-1");
          removeClass([document.activeElement], SHOW_ADD_FOCUS);
          var cell = closest(document.activeElement, "." + CONTENT_CELLS_CLASS);
          if (cell.querySelectorAll("." + CARD_CLASS).length > 0) {
            [].slice.call(cell.querySelectorAll("." + CARD_CLASS)).slice(-1)[0].focus();
          }
        }
        this.removeSelection();
      } else if (action === "downArrow" && document.activeElement && document.activeElement.classList.contains(CARD_CLASS)) {
        if (document.activeElement.nextElementSibling) {
          document.activeElement.nextElementSibling.focus();
        } else if (closest(document.activeElement, "." + CARD_WRAPPER_CLASS).nextElementSibling) {
          var ele = closest(document.activeElement, "." + CARD_WRAPPER_CLASS).nextElementSibling;
          ele.setAttribute("tabindex", "0");
          addClass([ele], SHOW_ADD_FOCUS);
          ele.focus();
        }
        this.removeSelection();
      }
      if ((action === "multiSelectionByUpArrow" || action === "multiSelectionByDownArrow") && selectedCard && this.parent.cardSettings.selectionType === "Multiple") {
        var card = void 0;
        if (action === "multiSelectionByUpArrow") {
          card = document.activeElement.previousElementSibling;
        } else {
          card = document.activeElement.nextElementSibling;
        }
        if (card) {
          this.parent.actionModule.cardSelection(card, false, true);
          card.focus();
          this.multiSelection = true;
        }
      }
    };
    Keyboard2.prototype.removeSelection = function() {
      if (this.multiSelection) {
        var cards = this.parent.getSelectedCards();
        if (cards.length > 0) {
          removeClass(cards, CARD_SELECTION_CLASS);
          if (this.parent.enableVirtualization) {
            this.parent.virtualLayoutModule.disableAttributeSelection(cards);
          } else {
            this.parent.layoutModule.disableAttributeSelection(cards);
          }
        }
        this.multiSelection = false;
      }
    };
    Keyboard2.prototype.cardTabIndexRemove = function() {
      var cards = [].slice.call(this.parent.element.querySelectorAll("." + CARD_CLASS));
      cards.forEach(function(card) {
        card.setAttribute("tabindex", "-1");
      });
      var addButton = [].slice.call(this.parent.element.querySelectorAll("." + SHOW_ADD_BUTTON));
      addButton.forEach(function(add) {
        add.setAttribute("tabindex", "-1");
        removeClass([add], SHOW_ADD_FOCUS);
      });
    };
    Keyboard2.prototype.processEnter = function(e, selectedCard) {
      if (e.action === "space") {
        e.preventDefault();
      }
      var element2 = e.target;
      if (element2.classList.contains(HEADER_ICON_CLASS)) {
        this.parent.actionModule.columnExpandCollapse(e);
      }
      if (element2.classList.contains(SWIMLANE_ROW_EXPAND_CLASS) || element2.classList.contains(SWIMLANE_ROW_COLLAPSE_CLASS)) {
        this.parent.actionModule.rowExpandCollapse(e);
      }
      if (document.activeElement.classList.contains(CARD_CLASS)) {
        this.parent.actionModule.cardSelection(document.activeElement, false, false);
      }
      if (document.activeElement.classList.contains(SHOW_ADD_BUTTON)) {
        if (!this.parent.dialogModule.dialogObj) {
          this.parent.actionModule.addButtonClick(document.activeElement);
        }
        document.activeElement.focus();
      }
      if (element2.classList.contains(CONTENT_CELLS_CLASS)) {
        var cards = [].slice.call(element2.querySelectorAll("." + CARD_CLASS));
        this.addRemoveTabIndex("Remove");
        if (cards.length > 0) {
          element2.querySelector("." + CARD_CLASS).focus();
          cards.forEach(function(element3) {
            element3.setAttribute("tabindex", "0");
          });
        }
        if (element2.querySelector("." + SHOW_ADD_BUTTON)) {
          element2.querySelector("." + SHOW_ADD_BUTTON).setAttribute("tabindex", "0");
          element2.querySelector("." + SHOW_ADD_BUTTON).focus();
        }
      }
      if (selectedCard === document.activeElement && this.parent.element.querySelectorAll("." + CARD_SELECTION_CLASS).length === 1) {
        this.parent.activeCardData = {
          data: this.parent.getCardDetails(selectedCard),
          element: selectedCard
        };
        if (!this.parent.dialogModule.dialogObj) {
          this.parent.dialogModule.openDialog("Edit", this.parent.getCardDetails(selectedCard));
        }
        selectedCard.focus();
      }
    };
    Keyboard2.prototype.addRemoveTabIndex = function(action) {
      var attribute = action === "Add" ? "0" : "-1";
      var headerIcon = [].slice.call(this.parent.element.querySelectorAll("." + HEADER_ICON_CLASS));
      if (headerIcon.length > 0) {
        headerIcon.forEach(function(element2) {
          element2.setAttribute("tabindex", attribute);
        });
      }
      var swimlaneIcon = [].slice.call(this.parent.element.querySelectorAll("." + SWIMLANE_ROW_EXPAND_CLASS));
      if (swimlaneIcon.length > 0) {
        swimlaneIcon.forEach(function(element2) {
          element2.setAttribute("tabindex", attribute);
        });
      }
      var className = "." + CONTENT_ROW_CLASS + ":not(." + SWIMLANE_ROW_CLASS + ") ." + CONTENT_CELLS_CLASS;
      var contentCell = [].slice.call(this.parent.element.querySelectorAll(className));
      contentCell.forEach(function(element2) {
        element2.setAttribute("tabindex", attribute);
      });
    };
    Keyboard2.prototype.destroy = function() {
      this.keyboardModule.destroy();
    };
    return Keyboard2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/actions/tooltip.js
var KanbanTooltip = (
  /** @class */
  function() {
    function KanbanTooltip2(parent) {
      this.parent = parent;
      this.renderTooltip();
    }
    KanbanTooltip2.prototype.renderTooltip = function() {
      this.tooltipObj = new Tooltip({
        cssClass: this.parent.cssClass + " " + TOOLTIP_CLASS,
        enableRtl: this.parent.enableRtl,
        mouseTrail: !this.parent.isAdaptive,
        offsetY: 5,
        position: "BottomCenter",
        showTipPointer: true,
        target: "." + TOOLTIP_TEXT_CLASS,
        beforeRender: this.onBeforeRender.bind(this),
        beforeClose: this.onBeforeClose.bind(this)
      });
      this.tooltipObj.appendTo(this.parent.element);
      this.tooltipObj.isStringTemplate = true;
    };
    KanbanTooltip2.prototype.onBeforeRender = function(args) {
      if (this.parent.dragAndDropModule.isDragging) {
        args.cancel = true;
        return;
      }
      var tooltipContent;
      if (this.parent.tooltipTemplate) {
        tooltipContent = createElement("div");
        var target = closest(args.target, "." + CARD_CLASS);
        var data = this.parent.getCardDetails(target);
        var templateId = this.parent.element.id + "_tooltipTemplate";
        var tooltipTemplate = this.parent.templateParser(this.parent.tooltipTemplate)(data, this.parent, "tooltipTemplate", templateId, false);
        append(tooltipTemplate, tooltipContent);
        this.parent.renderTemplates();
      } else {
        tooltipContent = initializeCSPTemplate(function() {
          return '<div class="e-card-header-caption">' + args.target.innerText + "</div>";
        });
      }
      this.tooltipObj.setProperties({ content: tooltipContent }, true);
    };
    KanbanTooltip2.prototype.onBeforeClose = function() {
      this.parent.resetTemplates(["tooltipTemplate"]);
    };
    KanbanTooltip2.prototype.destroy = function() {
      this.tooltipObj.destroy();
      addClass([this.parent.element], "e-control");
      this.tooltipObj = null;
    };
    return KanbanTooltip2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/actions/touch.js
var KanbanTouch = (
  /** @class */
  function() {
    function KanbanTouch2(parent) {
      this.parent = parent;
      this.tabHold = false;
    }
    KanbanTouch2.prototype.wireTouchEvents = function() {
      this.element = this.parent.element.querySelector("." + CONTENT_CLASS);
      this.touchObj = new Touch(this.element, { tapHold: this.tapHoldHandler.bind(this) });
    };
    KanbanTouch2.prototype.tapHoldHandler = function(e) {
      this.tabHold = true;
      var target = closest(e.originalEvent.target, "." + CARD_CLASS);
      if (target && this.parent.cardSettings.selectionType === "Multiple") {
        this.parent.actionModule.cardSelection(target, true, false);
        if (!this.mobilePopup) {
          this.renderMobilePopup();
          this.mobilePopup.show();
        }
        this.updatePopupContent();
      }
    };
    KanbanTouch2.prototype.renderMobilePopup = function() {
      if (this.parent.cardSettings.selectionType === "Multiple") {
        var mobilePopupWrapper = createElement("div", {
          className: POPUP_WRAPPER_CLASS + " e-popup-close",
          innerHTML: '<div class="' + POPUP_HEADER_CLASS + '"><button class="' + CLOSE_CLASS + '"></button></div>' + ('<div class="' + POPUP_CONTENT_CLASS + '"></div>')
        });
        document.body.appendChild(mobilePopupWrapper);
        addClass([mobilePopupWrapper], DEVICE_CLASS);
        this.mobilePopup = new Popup(mobilePopupWrapper, {
          targetType: "container",
          enableRtl: this.parent.enableRtl,
          hideAnimation: { name: "ZoomOut" },
          showAnimation: { name: "ZoomIn" },
          collision: { X: "fit", Y: "fit" },
          position: { X: "left", Y: "top" },
          viewPortElement: document.body,
          zIndex: 1004,
          close: this.popupClose.bind(this)
        });
        var closeIcon = this.mobilePopup.element.querySelector("." + CLOSE_CLASS);
        var buttonObj = new Button({
          cssClass: "e-flat e-round e-small",
          enableRtl: this.parent.enableRtl,
          iconCss: ICON_CLASS + " " + CLOSE_ICON_CLASS
        });
        buttonObj.appendTo(closeIcon);
        buttonObj.isStringTemplate = true;
        EventHandler.add(closeIcon, "click", this.closeClick, this);
      }
    };
    KanbanTouch2.prototype.getPopupContent = function() {
      var popupContent;
      var selectedCards = this.parent.getSelectedCards();
      if (selectedCards.length > 1) {
        popupContent = "(" + selectedCards.length + ") " + this.parent.localeObj.getConstant("cardsSelected");
      } else if (selectedCards.length === 1) {
        popupContent = " " + this.parent.getCardDetails(selectedCards[0])[this.parent.cardSettings.headerField];
      }
      return popupContent;
    };
    KanbanTouch2.prototype.updatePopupContent = function() {
      if (!this.mobilePopup) {
        return;
      }
      var popupContent = this.getPopupContent();
      if (popupContent) {
        this.mobilePopup.element.querySelector("." + POPUP_CONTENT_CLASS).textContent = popupContent;
      } else {
        this.mobilePopup.hide();
      }
    };
    KanbanTouch2.prototype.closeClick = function() {
      this.parent.touchModule.mobilePopup.hide();
    };
    KanbanTouch2.prototype.popupClose = function() {
      this.popupDestroy();
    };
    KanbanTouch2.prototype.popupDestroy = function() {
      if (this.mobilePopup && this.mobilePopup.element) {
        var instance = this.mobilePopup.element.querySelector(".e-control.e-btn").ej2_instances[0];
        if (instance) {
          instance.destroy();
        }
        this.mobilePopup.destroy();
        remove(this.mobilePopup.element);
        this.mobilePopup = null;
      }
    };
    KanbanTouch2.prototype.unWireTouchEvents = function() {
      if (this.touchObj) {
        this.touchObj.destroy();
      }
      this.touchObj = null;
      this.element = null;
    };
    KanbanTouch2.prototype.destroy = function() {
      this.popupDestroy();
      this.unWireTouchEvents();
      this.tabHold = false;
    };
    return KanbanTouch2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/base/mobile-layout.js
var MobileLayout = (
  /** @class */
  function() {
    function MobileLayout2(parent) {
      this.parent = parent;
    }
    MobileLayout2.prototype.renderSwimlaneHeader = function() {
      var toolbarWrapper = createElement("div", {
        className: SWIMLANE_HEADER_CLASS,
        innerHTML: '<div class="' + SWIMLANE_HEADER_TOOLBAR_CLASS + '"><div class="' + TOOLBAR_MENU_CLASS + '"><div class="e-icons ' + TOOLBAR_MENU_ICON_CLASS + '"></div></div><div class="' + TOOLBAR_LEVEL_TITLE_CLASS + '"><div class="' + TOOLBAR_SWIMLANE_NAME_CLASS + '"></div></div></div>'
      });
      this.parent.element.appendChild(toolbarWrapper);
      EventHandler.add(toolbarWrapper.querySelector("." + TOOLBAR_MENU_ICON_CLASS), "click", this.menuClick, this);
    };
    MobileLayout2.prototype.renderSwimlaneTree = function() {
      var height = this.parent.element.querySelector("." + SWIMLANE_HEADER_CLASS).offsetHeight;
      var treeHeight = window.innerHeight - height;
      this.popupOverlay = createElement("div", { className: SWIMLANE_OVERLAY_CLASS, styles: "height: " + treeHeight + "px;" });
      var wrapper = createElement("div", { className: SWIMLANE_CONTENT_CLASS, styles: "top:" + height + "px;" });
      var treeWrapper = createElement("div", {
        className: SWIMLANE_RESOURCE_CLASS + " e-popup-close",
        styles: "height: " + treeHeight + "px;"
      });
      wrapper.appendChild(treeWrapper);
      wrapper.appendChild(this.popupOverlay);
      this.parent.element.appendChild(wrapper);
      var swimlaneTree = createElement("div", { className: SWIMLANE_TREE_CLASS });
      treeWrapper.appendChild(swimlaneTree);
      var dataSource = this.parent.enableVirtualization ? this.parent.virtualLayoutModule.kanbanRows : this.parent.layoutModule.kanbanRows;
      this.treeViewObj = new TreeView({
        cssClass: this.parent.cssClass,
        enableRtl: this.parent.enableRtl,
        fields: {
          dataSource,
          id: "keyField",
          text: "textField"
        },
        nodeTemplate: this.parent.swimlaneSettings.template,
        nodeClicked: this.treeSwimlaneClick.bind(this),
        drawNode: this.drawNode.bind(this)
      });
      this.treeViewObj.appendTo(swimlaneTree);
      var popupObj = {
        targetType: "relative",
        actionOnScroll: "none",
        enableRtl: this.parent.enableRtl,
        zIndex: 10,
        hideAnimation: { name: "SlideLeftOut", duration: 500 },
        showAnimation: { name: "SlideLeftIn", duration: 500 },
        viewPortElement: this.parent.element.querySelector("." + CONTENT_CLASS)
      };
      popupObj.content = this.treeViewObj.element;
      this.treePopup = new Popup(treeWrapper, popupObj);
    };
    MobileLayout2.prototype.menuClick = function() {
      if (this.parent.element.querySelector("." + SWIMLANE_RESOURCE_CLASS).classList.contains("e-popup-open")) {
        this.treePopup.hide();
        removeClass([this.popupOverlay], "e-enable");
      } else {
        var treeNodes = [].slice.call(this.treeViewObj.element.querySelectorAll(".e-list-item"));
        removeClass(treeNodes, "e-active");
        addClass([treeNodes[this.parent.layoutModule.swimlaneIndex]], "e-active");
        this.treePopup.show();
        addClass([this.popupOverlay], "e-enable");
      }
    };
    MobileLayout2.prototype.treeSwimlaneClick = function(args) {
      this.treePopup.hide();
      var treeNodes = [].slice.call(this.treeViewObj.element.querySelectorAll(".e-list-item"));
      this.parent.layoutModule.swimlaneIndex = treeNodes.indexOf(args.node);
      this.parent.layoutModule.scrollLeft = 0;
      this.parent.notify(dataReady, { processedData: this.parent.kanbanData });
      args.event.preventDefault();
    };
    MobileLayout2.prototype.hidePopup = function() {
      this.treePopup.hide();
      removeClass([this.popupOverlay], "e-enable");
    };
    MobileLayout2.prototype.getWidth = function() {
      return window.innerWidth * 80 / 100;
    };
    MobileLayout2.prototype.drawNode = function(args) {
      if (this.parent.swimlaneSettings.template && this.parent.isReact) {
        var templateId = this.parent.element.id + "_treeviewTemplate";
        var treeViewTemplate = this.parent.templateParser(this.parent.swimlaneSettings.template)(args.nodeData, this.parent, "nodeTemplate", templateId, false);
        append(treeViewTemplate, args.node.querySelector(".e-list-text"));
      }
    };
    return MobileLayout2;
  }()
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/base/layout-render.js
var __extends41 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var LayoutRender = (
  /** @class */
  function(_super) {
    __extends41(LayoutRender2, _super);
    function LayoutRender2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.kanbanRows = [];
      _this.parent = parent;
      _this.columnKeys = [];
      _this.swimlaneIndex = 0;
      _this.swimlaneData = {};
      _this.scrollLeft = 0;
      _this.frozenOrder = 0;
      _this.parent.on(dataReady, _this.initRender, _this);
      _this.parent.on(contentReady, _this.scrollUiUpdate, _this);
      return _this;
    }
    LayoutRender2.prototype.initRender = function() {
      if (this.parent.columns.length === 0) {
        return;
      }
      this.columnData = this.getColumnCards();
      this.kanbanRows = this.getRows();
      this.swimlaneData = this.getSwimlaneCards();
      if (this.parent.isAdaptive) {
        var parent_1 = this.parent.element.querySelector("." + CONTENT_CLASS);
        if (parent_1) {
          this.scrollLeft = parent_1.scrollLeft;
        }
      }
      this.destroy();
      this.parent.on(dataReady, this.initRender, this);
      this.parent.on(contentReady, this.scrollUiUpdate, this);
      if (this.parent.isAdaptive && this.parent.swimlaneSettings.keyField && this.parent.kanbanData.length !== 0) {
        this.renderSwimlaneHeader();
      }
      var header = createElement("div", { className: HEADER_CLASS });
      this.parent.element.appendChild(header);
      this.renderHeader(header);
      this.renderContent();
      this.renderCards();
      this.renderValidation();
      this.parent.renderTemplates();
      this.parent.notify(contentReady, {});
      this.wireEvents();
      if (this.parent.isInitialRender) {
        this.parent.isInitialRender = false;
      }
    };
    LayoutRender2.prototype.renderHeader = function(header) {
      var headerWrap = createElement("div", { className: this.parent.swimlaneSettings.keyField ? SWIMLANE_CLASS : "" });
      header.appendChild(headerWrap);
      var headerTable = createElement("table", {
        className: TABLE_CLASS + " " + HEADER_TABLE_CLASS,
        attrs: { "role": "table" }
      });
      headerWrap.appendChild(headerTable);
      this.renderColGroup(headerTable);
      var tableHead = createElement("thead");
      headerTable.appendChild(tableHead);
      if (this.parent.stackedHeaders.length > 0) {
        tableHead.appendChild(this.createStackedRow(this.parent.stackedHeaders));
      }
      var tr = createElement("tr", { className: HEADER_ROW_CLASS });
      tableHead.appendChild(tr);
      var _loop_1 = function(column2) {
        if (this_1.isColumnVisible(column2)) {
          var index = this_1.parent.actionModule.columnToggleArray.indexOf(column2.keyField.toString());
          var th_1 = createElement("th", {
            className: index === -1 ? HEADER_CELLS_CLASS : HEADER_CELLS_CLASS + " " + COLLAPSED_CLASS,
            attrs: { "data-role": "kanban-column", "data-key": column2.keyField.toString() }
          });
          var classList2 = [];
          if (column2.allowToggle) {
            classList2.push(HEADER_ROW_TOGGLE_CLASS);
            if (!column2.isExpanded) {
              classList2.push(COLLAPSED_CLASS);
            }
          }
          addClass([th_1], classList2);
          var headerWrapper = createElement("div", { className: HEADER_WRAP_CLASS });
          th_1.appendChild(headerWrapper);
          var noOfCard = this_1.columnData[column2.keyField].length;
          var headerTitle = createElement("div", { className: HEADER_TITLE_CLASS });
          headerWrapper.appendChild(headerTitle);
          if (column2.template) {
            var templateArgs = {
              keyField: column2.keyField,
              headerText: column2.headerText,
              minCount: column2.minCount,
              maxCount: column2.maxCount,
              allowToggle: column2.allowToggle,
              isExpanded: column2.isExpanded,
              showItemCount: column2.showItemCount,
              count: noOfCard
            };
            addClass([th_1], TEMPLATE_CLASS);
            var templateId = this_1.parent.element.id + "_columnTemplate";
            var templateHeader = this_1.parent.templateParser(column2.template)(templateArgs, this_1.parent, "columnTemplate", templateId, false);
            append(templateHeader, headerTitle);
          } else {
            var header_1 = createElement("div", { className: HEADER_TEXT_CLASS, innerHTML: column2.headerText });
            headerTitle.appendChild(header_1);
            if (column2.showItemCount) {
              var itemCount = createElement("div", {
                className: CARD_ITEM_COUNT_CLASS,
                innerHTML: "- " + noOfCard.toString() + " " + this_1.parent.localeObj.getConstant("items")
              });
              headerTitle.appendChild(itemCount);
            }
          }
          if (column2.allowToggle) {
            var isExpand = column2.isExpanded && index === -1 ? true : false;
            var name_1 = isExpand ? COLUMN_EXPAND_CLASS : COLUMN_COLLAPSE_CLASS;
            var icon = createElement("div", {
              className: HEADER_ICON_CLASS + " " + ICON_CLASS + " " + name_1,
              attrs: { "tabindex": "0", "role": "button" }
            });
            icon.setAttribute("aria-label", isExpand ? column2.keyField + " Expand" : column2.keyField + " Collapse");
            th_1.setAttribute("aria-expanded", isExpand.toString());
            headerWrapper.appendChild(icon);
          }
          var dataObj = [{ keyField: column2.keyField, textField: column2.headerText, count: noOfCard }];
          var args = { data: dataObj, element: tr, cancel: false, requestType: "headerRow" };
          this_1.parent.trigger(queryCellInfo, args, function(columnArgs) {
            if (!columnArgs.cancel) {
              tr.appendChild(th_1);
            }
          });
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = this.parent.columns; _i < _a.length; _i++) {
        var column = _a[_i];
        _loop_1(column);
      }
    };
    LayoutRender2.prototype.renderContent = function() {
      var content = createElement("div", { className: CONTENT_CLASS });
      this.parent.element.appendChild(content);
      var contentWrap = createElement("div", { className: this.parent.swimlaneSettings.keyField ? SWIMLANE_CLASS : "" });
      content.appendChild(contentWrap);
      var contentTable = createElement("table", {
        className: TABLE_CLASS + " " + CONTENT_TABLE_CLASS,
        attrs: { "role": "presentation" }
      });
      contentWrap.appendChild(contentTable);
      this.renderColGroup(contentTable);
      var tBody = createElement("tbody");
      tBody.setAttribute("role", "rowgroup");
      contentTable.appendChild(tBody);
      var isCollaspsed = false;
      this.swimlaneRow = this.kanbanRows;
      this.initializeSwimlaneTree();
      for (var _i = 0, _a = this.swimlaneRow; _i < _a.length; _i++) {
        var row = _a[_i];
        if (this.parent.swimlaneSettings.keyField && this.parent.swimlaneToggleArray.length !== 0) {
          var index = this.parent.swimlaneToggleArray.indexOf(row.keyField);
          isCollaspsed = index !== -1;
        }
        if (this.parent.swimlaneSettings.keyField && !this.parent.isAdaptive) {
          this.renderSwimlaneRow(tBody, row, isCollaspsed);
        }
        this.renderSingleContent(tBody, row, isCollaspsed);
      }
    };
    LayoutRender2.prototype.renderSingleContent = function(tBody, row, isCollaspsed) {
      var className = isCollaspsed ? CONTENT_ROW_CLASS + " " + COLLAPSED_CLASS : CONTENT_ROW_CLASS;
      var tr = createElement("tr", { className, attrs: { "aria-expanded": "true", "role": "row" } });
      for (var _i = 0, _a = this.parent.columns; _i < _a.length; _i++) {
        var column = _a[_i];
        if (this.isColumnVisible(column)) {
          var index = this.parent.actionModule.columnToggleArray.indexOf(column.keyField.toString());
          var className_1 = index === -1 ? CONTENT_CELLS_CLASS : CONTENT_CELLS_CLASS + " " + COLLAPSED_CLASS;
          var dragClass = (column.allowDrag ? " " + DRAG_CLASS : "") + (column.allowDrop ? " " + DROP_CLASS + " " + DROPPABLE_CLASS : "");
          var td = createElement("td", {
            className: className_1 + dragClass,
            attrs: {
              "data-role": "kanban-column",
              "data-key": column.keyField.toString(),
              "tabindex": "0",
              "role": "treegrid",
              "aria-label": column.keyField.toString()
            }
          });
          if (column.allowToggle && !column.isExpanded || index !== -1) {
            addClass([td], COLLAPSED_CLASS);
            var text = (column.showItemCount ? "[" + this.getColumnData(column.keyField, this.swimlaneData[row.keyField]).length + "] " : "") + column.headerText;
            td.appendChild(createElement("div", { className: COLLAPSE_HEADER_TEXT_CLASS, innerHTML: text }));
            td.setAttribute("aria-expanded", "false");
          }
          if (column.showAddButton) {
            var button = createElement("div", { className: SHOW_ADD_BUTTON, attrs: { "tabindex": "-1" } });
            button.appendChild(createElement("div", { className: SHOW_ADD_ICON + " " + ICON_CLASS }));
            td.appendChild(button);
          }
          tr.appendChild(td);
        }
      }
      var dataObj = [{ keyField: row.keyField, textField: row.textField, count: row.count }];
      var args = { data: dataObj, element: tr, cancel: false, requestType: "contentRow" };
      this.parent.trigger(queryCellInfo, args, function(columnArgs) {
        if (!columnArgs.cancel) {
          if (tBody.classList.contains("e-swimlane-row")) {
            tBody.insertAdjacentElement("beforebegin", tr);
          } else {
            tBody.appendChild(tr);
          }
        }
      });
    };
    LayoutRender2.prototype.initializeSwimlaneTree = function() {
      if (this.parent.swimlaneSettings.keyField && this.parent.isAdaptive && this.parent.kanbanData.length !== 0) {
        this.swimlaneRow = [this.kanbanRows[this.swimlaneIndex]];
        this.renderSwimlaneTree();
        this.parent.element.querySelector("." + TOOLBAR_SWIMLANE_NAME_CLASS).innerHTML = this.swimlaneRow[0].textField;
      }
    };
    LayoutRender2.prototype.renderSwimlaneRow = function(tBody, row, isCollapsed) {
      var name = CONTENT_ROW_CLASS + " " + SWIMLANE_ROW_CLASS;
      var className = isCollapsed ? " " + COLLAPSED_CLASS : "";
      var tr = createElement("tr", {
        className: name + className,
        attrs: { "data-key": row.keyField, "aria-expanded": (!isCollapsed).toString(), "role": "row" }
      });
      var col = this.parent.columns.length - this.parent.actionModule.hideColumnKeys.length;
      var td = createElement("td", {
        className: CONTENT_CELLS_CLASS,
        attrs: { "data-role": "kanban-column", "colspan": col.toString() }
      });
      var swimlaneHeader = createElement("div", { className: SWIMLANE_HEADER_CLASS });
      td.appendChild(swimlaneHeader);
      var iconClass = isCollapsed ? SWIMLANE_ROW_COLLAPSE_CLASS : SWIMLANE_ROW_EXPAND_CLASS;
      var iconDiv = createElement("div", {
        className: ICON_CLASS + " " + iconClass,
        attrs: {
          "tabindex": "0",
          "role": "button",
          "aria-label": isCollapsed ? row.keyField + " Collapse" : row.keyField + " Expand"
        }
      });
      swimlaneHeader.appendChild(iconDiv);
      var headerWrap = createElement("div", { className: HEADER_WRAP_CLASS });
      swimlaneHeader.appendChild(headerWrap);
      var cardCount = this.swimlaneData[row.keyField].length;
      if (this.parent.swimlaneSettings.template) {
        var templateArgs = extend({}, row, { count: cardCount }, true);
        addClass([td], TEMPLATE_CLASS);
        var templateId = this.parent.element.id + "_swimlaneTemplate";
        var swimlaneTemplate = this.parent.templateParser(this.parent.swimlaneSettings.template)(templateArgs, this.parent, "swimlaneTemplate", templateId, false);
        append(swimlaneTemplate, headerWrap);
      } else {
        headerWrap.appendChild(createElement("div", {
          className: SWIMLANE_ROW_TEXT_CLASS,
          innerHTML: row.textField,
          attrs: { "data-role": row.textField }
        }));
      }
      if (this.parent.swimlaneSettings.showItemCount) {
        swimlaneHeader.appendChild(createElement("div", {
          className: CARD_ITEM_COUNT_CLASS,
          innerHTML: "- " + cardCount.toString() + " " + this.parent.localeObj.getConstant("items")
        }));
      }
      tr.appendChild(td);
      var dataObj = [{ keyField: row.keyField, textField: row.textField, count: row.count }];
      var args = { data: dataObj, element: tr, cancel: false, requestType: "swimlaneRow" };
      this.parent.trigger(queryCellInfo, args, function(columnArgs) {
        if (!columnArgs.cancel) {
          if (tBody.classList.contains("e-swimlane-row")) {
            tBody.insertAdjacentElement("beforebegin", tr);
          } else {
            tBody.appendChild(tr);
          }
        }
      });
    };
    LayoutRender2.prototype.renderCards = function() {
      var _this = this;
      var rows = this.swimlaneRow;
      var cardRows = [].slice.call(this.parent.element.querySelectorAll(".e-content-row:not(.e-swimlane-row)"));
      var swimlaneRows = [].slice.call(this.parent.element.querySelectorAll(".e-content-row.e-swimlane-row"));
      var removeTrs = [];
      var columnTransition = false;
      cardRows.forEach(function(tr, index) {
        var dataCount = 0;
        var _loop_2 = function(column2) {
          if (_this.isColumnVisible(column2)) {
            var columnData = _this.parent.swimlaneSettings.keyField ? _this.getColumnData(column2.keyField, _this.swimlaneData[rows[index].keyField]) : _this.columnData[column2.keyField];
            dataCount += columnData.length;
            var columnWrapper = tr.querySelector('[data-key="' + column2.keyField + '"]');
            var cardWrapper_1 = createElement("div", {
              className: CARD_WRAPPER_CLASS,
              attrs: { "role": "listbox", "tabindex": "0" }
            });
            if (column2.transitionColumns.length > 0) {
              columnTransition = true;
            }
            if (!columnTransition && isNullOrUndefined(_this.parent.swimlaneSettings.keyField)) {
              var borderElem = createElement("div", { className: BORDER_CLASS });
              columnWrapper.appendChild(borderElem);
            }
            columnWrapper.appendChild(cardWrapper_1);
            if (columnData.length > 0) {
              var _loop_3 = function(data2) {
                var cardText = data2[_this.parent.cardSettings.headerField];
                var cardIndex = _this.parent.actionModule.selectionArray.indexOf(cardText);
                var cardElement = _this.renderCard(data2);
                if (cardIndex !== -1) {
                  cardElement.setAttribute("aria-selected", "true");
                  addClass([cardElement], CARD_SELECTION_CLASS);
                }
                var args = { data: data2, element: cardElement, cancel: false };
                _this.parent.trigger(cardRendered, args, function(cardArgs) {
                  if (!cardArgs.cancel) {
                    cardWrapper_1.appendChild(cardElement);
                  }
                });
              };
              for (var _i2 = 0, _a2 = columnData; _i2 < _a2.length; _i2++) {
                var data = _a2[_i2];
                _loop_3(data);
              }
            } else {
              cardWrapper_1.appendChild(_this.renderEmptyCard());
            }
          }
        };
        for (var _i = 0, _a = _this.parent.columns; _i < _a.length; _i++) {
          var column = _a[_i];
          _loop_2(column);
        }
        if (dataCount === 0) {
          removeTrs.push(tr);
          if (swimlaneRows.length > 0) {
            removeTrs.push(swimlaneRows[index]);
          }
        }
      });
      if (!this.parent.swimlaneSettings.showEmptyRow && (this.parent.kanbanData.length === 0 && !this.parent.showEmptyColumn)) {
        removeTrs.forEach(function(tr) {
          return remove(tr);
        });
      }
    };
    LayoutRender2.prototype.renderCard = function(data) {
      var cardElement = createElement("div", {
        className: CARD_CLASS,
        attrs: {
          "data-id": data[this.parent.cardSettings.headerField],
          "data-key": data[this.parent.keyField],
          "aria-selected": "false",
          "tabindex": "-1",
          "role": "option"
        }
      });
      if (this.parent.cardHeight !== "auto") {
        cardElement.style.height = formatUnit(this.parent.cardHeight);
      }
      if (this.parent.cardSettings.template) {
        addClass([cardElement], TEMPLATE_CLASS);
        var templateId = this.parent.element.id + "_cardTemplate";
        var cardTemplate = this.parent.templateParser(this.parent.cardSettings.template)(data, this.parent, "cardTemplate", templateId, false);
        append(cardTemplate, cardElement);
      } else {
        var tooltipClass = this.parent.enableTooltip ? " " + TOOLTIP_TEXT_CLASS : "";
        if (this.parent.cardSettings.showHeader) {
          var cardHeader = createElement("div", { className: CARD_HEADER_CLASS });
          var cardCaption = createElement("div", { className: CARD_HEADER_TEXT_CLASS });
          var cardText = createElement("div", {
            className: CARD_HEADER_TITLE_CLASS + tooltipClass,
            innerHTML: data[this.parent.cardSettings.headerField] || ""
          });
          cardHeader.appendChild(cardCaption);
          cardCaption.appendChild(cardText);
          cardElement.appendChild(cardHeader);
        }
        var cardContent = createElement("div", {
          className: CARD_CONTENT_CLASS + tooltipClass,
          innerHTML: data[this.parent.cardSettings.contentField] || ""
        });
        cardElement.appendChild(cardContent);
        if (this.parent.cardSettings.tagsField && data[this.parent.cardSettings.tagsField]) {
          var cardTags = createElement("div", { className: CARD_TAGS_CLASS });
          var tags = data[this.parent.cardSettings.tagsField].toString().split(",");
          for (var _i = 0, tags_1 = tags; _i < tags_1.length; _i++) {
            var tag = tags_1[_i];
            cardTags.appendChild(createElement("div", {
              className: CARD_TAG_CLASS + " " + CARD_LABEL_CLASS,
              innerHTML: tag
            }));
          }
          cardElement.appendChild(cardTags);
        }
        if (this.parent.cardSettings.grabberField && data[this.parent.cardSettings.grabberField]) {
          addClass([cardElement], CARD_COLOR_CLASS);
          cardElement.style.borderLeftColor = data[this.parent.cardSettings.grabberField];
        }
        if (this.parent.cardSettings.footerCssField) {
          var cardFields = createElement("div", { className: CARD_FOOTER_CLASS });
          var keys = data[this.parent.cardSettings.footerCssField].split(",");
          for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
            var key = keys_1[_a];
            cardFields.appendChild(createElement("div", {
              className: key.trim() + " " + CARD_FOOTER_CSS_CLASS
            }));
          }
          cardElement.appendChild(cardFields);
        }
      }
      return cardElement;
    };
    LayoutRender2.prototype.renderEmptyCard = function() {
      var emptyCard = createElement("span", {
        className: EMPTY_CARD_CLASS,
        innerHTML: this.parent.localeObj.getConstant("noCard")
      });
      return emptyCard;
    };
    LayoutRender2.prototype.renderColGroup = function(table) {
      var _this = this;
      var colGroup = createElement("colgroup");
      this.parent.columns.forEach(function(column) {
        if (_this.isColumnVisible(column)) {
          var index = _this.parent.actionModule.columnToggleArray.indexOf(column.keyField.toString());
          var isToggle = column.allowToggle && !column.isExpanded;
          var className = index === -1 ? isToggle ? COLLAPSED_CLASS : "" : COLLAPSED_CLASS;
          var col = createElement("col", {
            className,
            attrs: { "data-key": column.keyField.toString() },
            styles: _this.parent.isAdaptive ? "width: " + (isToggle ? formatUnit(toggleWidth) : formatUnit(_this.getWidth())) : ""
          });
          colGroup.appendChild(col);
        }
      });
      table.appendChild(colGroup);
    };
    LayoutRender2.prototype.getRows = function() {
      var _this = this;
      var kanbanRows = [];
      if (this.parent.swimlaneSettings.keyField) {
        this.parent.kanbanData.map(function(obj) {
          if (!_this.parent.swimlaneSettings.showEmptyRow) {
            if (isNullOrUndefined(obj[_this.parent.keyField]) || obj[_this.parent.keyField] === "" || obj[_this.parent.keyField] && _this.columnKeys.indexOf(obj[_this.parent.keyField].toString()) === -1) {
              return;
            }
          }
          var textField = obj[_this.parent.swimlaneSettings.textField] || obj[_this.parent.swimlaneSettings.keyField];
          var keyField = obj[_this.parent.swimlaneSettings.keyField];
          if (!obj[_this.parent.swimlaneSettings.keyField]) {
            if (_this.parent.swimlaneSettings.showUnassignedRow) {
              textField = _this.parent.localeObj.getConstant("unassigned");
              keyField = "";
            } else {
              return;
            }
          }
          kanbanRows.push({ keyField, textField });
        });
        kanbanRows = kanbanRows.filter(function(item, index, arr) {
          return index === arr.map(function(item2) {
            return item2.keyField;
          }).indexOf(item.keyField);
        });
        kanbanRows = this.swimlaneSorting(kanbanRows);
        kanbanRows.forEach(function(row) {
          row.count = _this.parent.kanbanData.filter(function(obj) {
            return _this.columnKeys.indexOf(obj[_this.parent.keyField]) > -1 && obj[_this.parent.swimlaneSettings.keyField] === row.keyField;
          }).length;
        });
        if (kanbanRows.length === 0) {
          kanbanRows.push({ keyField: "", textField: "" });
        }
      } else {
        kanbanRows.push({ keyField: "", textField: "" });
      }
      return kanbanRows;
    };
    LayoutRender2.prototype.swimlaneSorting = function(rows) {
      if (this.parent.swimlaneSettings.sortComparer) {
        rows = this.parent.swimlaneSettings.sortComparer.call(this.parent, rows);
      } else {
        rows.sort(function(a, b) {
          return a.textField.localeCompare(b.textField, void 0, { numeric: true });
        });
        if (this.parent.swimlaneSettings.sortDirection === "Descending") {
          rows.reverse();
        }
      }
      return rows;
    };
    LayoutRender2.prototype.createStackedRow = function(rows) {
      var tr = createElement("tr", { className: HEADER_ROW_CLASS + " " + STACKED_HEADER_ROW_CLASS });
      var stackedHeaders = [];
      this.parent.columns.forEach(function(column) {
        var headerText = "";
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
          var row = rows_1[_i];
          if (row.keyFields.indexOf(column.keyField.toString()) !== -1) {
            headerText = row.text;
          }
        }
        stackedHeaders.push(headerText);
      });
      for (var h = 0; h < stackedHeaders.length; h++) {
        var colSpan = 1;
        for (var j = h + 1; j < stackedHeaders.length; j++) {
          if (stackedHeaders[h] !== "" && stackedHeaders[j] !== "" && stackedHeaders[h] === stackedHeaders[j]) {
            colSpan++;
          } else {
            break;
          }
        }
        var div = createElement("div", { className: HEADER_TEXT_CLASS, innerHTML: stackedHeaders[h] });
        var th = createElement("th", {
          className: HEADER_CELLS_CLASS + " " + STACKED_HEADER_CELL_CLASS,
          attrs: { "colspan": colSpan.toString() }
        });
        tr.appendChild(th).appendChild(div);
        h += colSpan - 1;
      }
      return tr;
    };
    LayoutRender2.prototype.scrollUiUpdate = function() {
      var _this = this;
      var header = this.parent.element.querySelector("." + HEADER_CLASS);
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      var height = this.parent.element.offsetHeight - header.offsetHeight;
      if (this.parent.isAdaptive) {
        height = window.innerHeight - (header.offsetHeight + bottomSpace);
        var swimlaneToolbar = this.parent.element.querySelector("." + SWIMLANE_HEADER_CLASS);
        if (swimlaneToolbar) {
          height -= swimlaneToolbar.offsetHeight;
        }
        var cardWrappers = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_CELLS_CLASS));
        cardWrappers.forEach(function(cell) {
          var cardWrapper = cell.querySelector("." + CARD_WRAPPER_CLASS);
          if (!cardWrapper.classList.contains(MULTI_CARD_WRAPPER_CLASS)) {
            cardWrapper.style.height = formatUnit(height);
            EventHandler.add(cell, "touchmove", _this.onAdaptiveScroll, _this);
          }
        });
      }
      if (this.parent.height !== "auto" && this.parent.height !== "100%") {
        content.style.height = formatUnit(height);
      }
      [].slice.call(header.children).forEach(function(node) {
        var paddingValue = 0;
        if (content.offsetWidth - content.clientWidth > 0) {
          paddingValue = 17;
          if (content.offsetHeight - content.clientHeight > 0) {
            node.style.width = formatUnit(content.clientWidth);
          }
        }
        if (_this.parent.enableRtl) {
          node.style.paddingLeft = formatUnit(paddingValue);
        } else {
          node.style.paddingRight = formatUnit(paddingValue);
        }
      });
      this.updateScrollPosition();
    };
    LayoutRender2.prototype.onContentScroll = function(e) {
      var target = e.target;
      var header = this.parent.element.querySelector("." + HEADER_CLASS);
      [].slice.call(header.children).forEach(function(node) {
        node.scrollLeft = target.scrollLeft;
      });
      this.parent.scrollPosition.content = { left: target.scrollLeft, top: target.scrollTop };
      if (!isNullOrUndefined(this.parent.swimlaneSettings.keyField) && this.parent.swimlaneSettings.enableFrozenRows) {
        this.frozenRows(e);
      }
    };
    LayoutRender2.prototype.addFrozenSwimlaneDataKey = function(currentElem) {
      var frozenKey = currentElem.getAttribute("data-key");
      if (!isNullOrUndefined(frozenKey)) {
        this.frozenSwimlaneRow.setAttribute("data-key", frozenKey);
      }
    };
    LayoutRender2.prototype.frozenRows = function(e) {
      var firstSwimlane = this.parent.element.querySelector("." + SWIMLANE_ROW_CLASS);
      var header = this.parent.element.querySelector("." + HEADER_CLASS);
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      if (isNullOrUndefined(this.frozenSwimlaneRow)) {
        this.frozenSwimlaneRow = createElement("div", { className: FROZEN_SWIMLANE_ROW_CLASS });
        var frozenRow = createElement("div", { className: FROZEN_ROW_CLASS });
        this.frozenSwimlaneRow.appendChild(frozenRow);
        this.parent.element.insertBefore(this.frozenSwimlaneRow, this.parent.element.firstElementChild);
        frozenRow.appendChild(firstSwimlane.querySelector("." + SWIMLANE_HEADER_CLASS).cloneNode(true));
        this.addFrozenSwimlaneDataKey(firstSwimlane);
        setStyleAttribute(this.frozenSwimlaneRow, {
          height: formatUnit(firstSwimlane.getBoundingClientRect().height),
          width: formatUnit(content.querySelector(".e-swimlane").getBoundingClientRect().width),
          top: formatUnit(header.getBoundingClientRect().height.toString())
        });
        setStyleAttribute(header, { position: "relative", top: formatUnit(-this.frozenSwimlaneRow.getBoundingClientRect().height) });
        setStyleAttribute(content, { position: "relative", top: formatUnit(-this.frozenSwimlaneRow.getBoundingClientRect().height) });
      } else {
        var swimlaneRows = [].slice.call(this.parent.element.querySelectorAll("." + SWIMLANE_ROW_CLASS));
        var curSwim = swimlaneRows[this.frozenOrder];
        var prevSwim = swimlaneRows[this.frozenOrder - 1];
        var nextSwim = swimlaneRows[this.frozenOrder + 1];
        var curSwimHeight = void 0;
        var prevSwimHeight = void 0;
        var nextSwimHeight = void 0;
        if (curSwim) {
          curSwimHeight = curSwim.getBoundingClientRect().top + curSwim.getBoundingClientRect().height;
        }
        if (prevSwim) {
          prevSwimHeight = prevSwim.getBoundingClientRect().top + prevSwim.getBoundingClientRect().height;
        }
        if (nextSwim) {
          nextSwimHeight = nextSwim.getBoundingClientRect().top + nextSwim.getBoundingClientRect().height;
        }
        var frozenSwimHeight = content.getBoundingClientRect().top + this.frozenSwimlaneRow.getBoundingClientRect().height;
        var frozenRowsElement = this.frozenSwimlaneRow.querySelector("." + FROZEN_ROW_CLASS);
        if (nextSwimHeight && frozenSwimHeight >= nextSwimHeight && this.frozenOrder < swimlaneRows.length - 1) {
          if (frozenRowsElement) {
            remove(frozenRowsElement.querySelector("." + SWIMLANE_HEADER_CLASS));
            frozenRowsElement.appendChild(nextSwim.querySelector("." + SWIMLANE_HEADER_CLASS).cloneNode(true));
            this.addFrozenSwimlaneDataKey(nextSwim);
          }
          ++this.frozenOrder;
        } else if (prevSwimHeight && frozenSwimHeight < curSwimHeight && frozenSwimHeight > prevSwimHeight && this.frozenOrder > 0) {
          if (frozenRowsElement) {
            remove(frozenRowsElement.querySelector("." + SWIMLANE_HEADER_CLASS));
            frozenRowsElement.appendChild(prevSwim.querySelector("." + SWIMLANE_HEADER_CLASS).cloneNode(true));
            this.addFrozenSwimlaneDataKey(prevSwim);
          }
          --this.frozenOrder;
        }
      }
      if (e && e.target.scrollTop === 0) {
        this.removeFrozenRows();
      }
    };
    LayoutRender2.prototype.removeFrozenRows = function() {
      remove(this.frozenSwimlaneRow);
      this.frozenSwimlaneRow = null;
      var header = this.parent.element.querySelector("." + HEADER_CLASS);
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      setStyleAttribute(header, { position: "", top: "" });
      setStyleAttribute(content, { position: "", top: "" });
      this.parent.scrollPosition.content = { left: this.parent.scrollPosition.content.left, top: 0 };
      content.scrollTop = 0;
      this.frozenOrder = 0;
    };
    LayoutRender2.prototype.onColumnScroll = function(e) {
      var target = e.target;
      if (target.offsetParent) {
        var columnKey = target.offsetParent.getAttribute("data-key");
        this.parent.scrollPosition.column["" + columnKey] = { left: target.scrollLeft, top: target.scrollTop };
      }
    };
    LayoutRender2.prototype.onAdaptiveScroll = function(e) {
      if (this.parent.touchModule.tabHold && !this.parent.touchModule.mobilePopup) {
        e.preventDefault();
      }
    };
    LayoutRender2.prototype.isColumnVisible = function(column) {
      var _this = this;
      var isVisible2 = false;
      var isNumeric = typeof column.keyField === "number";
      if (isNumeric) {
        isVisible2 = this.parent.actionModule.hideColumnKeys.indexOf(column.keyField.toString()) === -1;
      } else {
        column.keyField.split(",").forEach(function(key) {
          isVisible2 = _this.parent.actionModule.hideColumnKeys.indexOf(key) === -1;
        });
      }
      return isVisible2;
    };
    LayoutRender2.prototype.renderLimits = function(column, target) {
      var limits = createElement("div", { className: LIMITS_CLASS });
      if (column.minCount) {
        limits.appendChild(createElement("div", {
          className: MIN_COUNT_CLASS,
          innerHTML: this.parent.localeObj.getConstant("min") + ": " + column.minCount.toString()
        }));
      }
      if (column.maxCount) {
        limits.appendChild(createElement("div", {
          className: MAX_COUNT_CLASS,
          innerHTML: this.parent.localeObj.getConstant("max") + ": " + column.maxCount.toString()
        }));
      }
      if (limits.childElementCount > 0) {
        if (target.querySelector("." + CARD_WRAPPER_CLASS)) {
          target.insertBefore(limits, target.firstElementChild);
        } else {
          target.appendChild(limits);
        }
      }
    };
    LayoutRender2.prototype.renderValidation = function() {
      var _this = this;
      this.parent.columns.forEach(function(column) {
        if (!column.minCount && !column.maxCount) {
          return;
        }
        var cardData = _this.columnData[column.keyField];
        var keySelector = '[data-key="' + column.keyField + '"]';
        var headerCell = _this.parent.element.querySelector("." + (HEADER_CELLS_CLASS + keySelector));
        var rowCells = [].slice.call(_this.parent.element.querySelectorAll("." + (CONTENT_CELLS_CLASS + keySelector)));
        if (_this.parent.constraintType === "Swimlane" && _this.parent.swimlaneSettings.keyField) {
          _this.swimlaneRow.forEach(function(row, index) {
            _this.renderLimits(column, rowCells[index]);
            var rowCards = cardData.filter(function(card) {
              return card[_this.parent.swimlaneSettings.keyField] === row.keyField;
            });
            var colorClass2 = _this.getValidationClass(column, rowCards.length);
            if (colorClass2) {
              addClass([rowCells[index]], colorClass2);
            }
          });
        } else {
          _this.renderLimits(column, headerCell);
          var colorClass = _this.getValidationClass(column, cardData.length);
          if (colorClass) {
            addClass(rowCells.concat(headerCell), colorClass);
          }
        }
      });
    };
    LayoutRender2.prototype.getValidationClass = function(column, count) {
      var colorClass;
      if (column.maxCount && count > column.maxCount) {
        colorClass = MAX_COLOR_CLASS;
      } else if (column.minCount && count < column.minCount) {
        colorClass = MIN_COLOR_CLASS;
      }
      return colorClass;
    };
    LayoutRender2.prototype.refreshValidation = function() {
      var validations = [].slice.call(this.parent.element.querySelectorAll("." + LIMITS_CLASS));
      validations.forEach(function(node) {
        remove(node);
      });
      var minClass = [].slice.call(this.parent.element.querySelectorAll("." + MIN_COLOR_CLASS));
      removeClass(minClass, MIN_COLOR_CLASS);
      var maxClass = [].slice.call(this.parent.element.querySelectorAll("." + MAX_COLOR_CLASS));
      removeClass(maxClass, MAX_COLOR_CLASS);
      this.renderValidation();
    };
    LayoutRender2.prototype.getColumnData = function(columnValue, dataSource) {
      var _this = this;
      if (dataSource === void 0) {
        dataSource = this.parent.kanbanData;
      }
      var cardData = [];
      var isNumeric = typeof columnValue === "number";
      if (isNumeric) {
        var keyData = dataSource.filter(function(cardObj) {
          return cardObj[_this.parent.keyField] === columnValue;
        });
        cardData = cardData.concat(keyData);
      } else {
        var columnKeys = columnValue.split(",");
        var _loop_4 = function(key2) {
          var keyData2 = dataSource.filter(function(cardObj) {
            return cardObj[_this.parent.keyField] === key2.trim();
          });
          cardData = cardData.concat(keyData2);
        };
        for (var _i = 0, columnKeys_1 = columnKeys; _i < columnKeys_1.length; _i++) {
          var key = columnKeys_1[_i];
          _loop_4(key);
        }
      }
      this.sortCategory(cardData);
      return cardData;
    };
    LayoutRender2.prototype.sortCategory = function(cardData) {
      var key = this.parent.cardSettings.headerField;
      var direction = this.parent.sortSettings.direction;
      switch (this.parent.sortSettings.sortBy) {
        case "DataSourceOrder":
          this.sortOrder(key, direction, cardData);
          break;
        case "Custom":
        case "Index":
          if (this.parent.sortSettings.field) {
            key = this.parent.sortSettings.field;
          }
          this.sortOrder(key, direction, cardData);
          break;
      }
      return cardData;
    };
    LayoutRender2.prototype.sortOrder = function(key, direction, cardData) {
      var isNumeric = true;
      if (this.parent.kanbanData.length > 0) {
        isNumeric = typeof this.parent.kanbanData[0]["" + key] === "number";
      }
      if (!isNumeric && this.parent.sortSettings.sortBy === "Index") {
        return cardData;
      }
      var first;
      var second;
      cardData = cardData.sort(function(firstData, secondData) {
        if (!isNumeric) {
          first = firstData["" + key].toLowerCase();
          second = secondData["" + key].toLowerCase();
        } else {
          first = firstData["" + key];
          second = secondData["" + key];
        }
        return first > second ? 1 : second > first ? -1 : 0;
      });
      if (direction === "Descending") {
        cardData.reverse();
      }
      return cardData;
    };
    LayoutRender2.prototype.documentClick = function(args) {
      if (args.target.classList.contains(SWIMLANE_OVERLAY_CLASS) && this.parent.element.querySelector("." + SWIMLANE_RESOURCE_CLASS).classList.contains("e-popup-open")) {
        this.treePopup.hide();
        removeClass([this.popupOverlay], "e-enable");
      }
      if (closest(args.target, "." + ROOT_CLASS)) {
        return;
      }
      var cards = [].slice.call(this.parent.element.querySelectorAll("." + CARD_CLASS + "." + CARD_SELECTION_CLASS));
      removeClass(cards, CARD_SELECTION_CLASS);
      this.disableAttributeSelection(cards);
    };
    LayoutRender2.prototype.disableAttributeSelection = function(cards) {
      if (cards instanceof Element) {
        cards.setAttribute("aria-selected", "false");
      } else {
        cards.forEach(function(card) {
          card.setAttribute("aria-selected", "false");
        });
      }
    };
    LayoutRender2.prototype.getColumnCards = function(data) {
      var _this = this;
      var columnData = {};
      this.columnKeys = [];
      this.parent.columns.forEach(function(column) {
        var isNumeric = typeof column.keyField === "number";
        if (isNumeric) {
          _this.columnKeys = _this.columnKeys.concat(column.keyField.toString());
        } else {
          _this.columnKeys = _this.columnKeys.concat(column.keyField.split(",").map(function(e) {
            return e.trim();
          }));
        }
        var cardData = _this.getColumnData(column.keyField, data);
        columnData[column.keyField] = cardData;
      });
      return columnData;
    };
    LayoutRender2.prototype.getSwimlaneCards = function() {
      var _this = this;
      var swimlaneData = {};
      if (this.parent.swimlaneSettings.keyField) {
        this.kanbanRows.forEach(function(row) {
          return swimlaneData[row.keyField] = _this.parent.kanbanData.filter(function(obj) {
            return !isNullOrUndefined(obj[_this.parent.keyField]) && _this.columnKeys.indexOf(obj[_this.parent.keyField].toString()) > -1 && (!obj[_this.parent.swimlaneSettings.keyField] && _this.parent.swimlaneSettings.showUnassignedRow ? "" : obj[_this.parent.swimlaneSettings.keyField]) === row.keyField;
          });
        });
      }
      return swimlaneData;
    };
    LayoutRender2.prototype.refreshHeaders = function() {
      var header = this.parent.element.querySelector("." + HEADER_CLASS);
      [].slice.call(header.children).forEach(function(child) {
        return remove(child);
      });
      this.renderHeader(header);
    };
    LayoutRender2.prototype.refreshCards = function() {
      this.parent.resetTemplates(["cardTemplate"]);
      var cards = [].slice.call(this.parent.element.querySelectorAll("." + CARD_WRAPPER_CLASS));
      cards.forEach(function(card) {
        return remove(card);
      });
      this.renderCards();
      this.wireDragEvent();
      this.parent.renderTemplates();
    };
    LayoutRender2.prototype.refresh = function() {
      var _this = this;
      var isColumnTemplateRefreshed = false;
      this.parent.columns.forEach(function(column) {
        if (column.showItemCount) {
          if (column && column.template && !isColumnTemplateRefreshed) {
            _this.refreshHeaders();
            isColumnTemplateRefreshed = true;
          }
          var countSelector = "." + HEADER_CELLS_CLASS + '[data-key="' + column.keyField + '"] .' + CARD_ITEM_COUNT_CLASS;
          var itemCount = _this.parent.element.querySelector(countSelector);
          if (itemCount) {
            var isNumeric = typeof column.keyField === "number";
            var cardLength = 0;
            if (isNumeric) {
              cardLength = [].slice.call(_this.parent.element.querySelectorAll("." + CARD_CLASS + '[data-key="' + column.keyField + '"]')).length;
            } else {
              var keys = column.keyField.split(",");
              for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
                var key = keys_2[_i];
                var cards = [].slice.call(_this.parent.element.querySelectorAll("." + CARD_CLASS + '[data-key="' + key.trim() + '"]'));
                cardLength = cards.length + cardLength;
              }
            }
            itemCount.innerHTML = "- " + cardLength + " " + _this.parent.localeObj.getConstant("items");
          }
        }
      });
      if (this.parent.swimlaneSettings.keyField) {
        var swimlaneRows = [].slice.call(this.parent.element.querySelectorAll("." + SWIMLANE_ROW_CLASS));
        swimlaneRows.forEach(function(swimlane) {
          var swimlaneKey = swimlane.getAttribute("data-key");
          var itemCount = swimlane.querySelector("." + CARD_ITEM_COUNT_CLASS);
          if (itemCount && swimlaneKey) {
            var cards = [].slice.call(swimlane.nextElementSibling.querySelectorAll("." + CARD_CLASS));
            itemCount.innerHTML = "- " + cards.length + " " + _this.parent.localeObj.getConstant("items");
          }
        });
      }
      this.refreshValidation();
    };
    LayoutRender2.prototype.updateScrollPosition = function() {
      var _this = this;
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      if (content) {
        if (!Browser.isIE) {
          content.scrollTo(this.parent.scrollPosition.content.left, this.parent.scrollPosition.content.top);
        } else {
          content.scrollTop = this.parent.scrollPosition.content.top;
          content.scrollLeft = this.parent.scrollPosition.content.left;
        }
      }
      var cardWrapper = [].slice.call(this.parent.element.querySelectorAll("." + CARD_WRAPPER_CLASS));
      cardWrapper.forEach(function(wrapper) {
        if (wrapper.offsetParent) {
          var scrollData = _this.parent.scrollPosition.column[wrapper.offsetParent.getAttribute("data-key")];
          if (scrollData) {
            if (!Browser.isIE) {
              wrapper.scrollTo(scrollData.left, scrollData.top);
            } else {
              wrapper.scrollTop = scrollData.top;
              wrapper.scrollLeft = scrollData.left;
            }
          }
        }
      });
    };
    LayoutRender2.prototype.renderCardBasedOnIndex = function(data, index) {
      var _this = this;
      var key = data[this.parent.keyField];
      var cardRow = this.parent.element.querySelector(".e-content-row:not(.e-swimlane-row)");
      if (this.parent.swimlaneSettings.keyField && !this.parent.isAdaptive) {
        var rowSelector = '.e-content-row.e-swimlane-row[data-key="' + data[this.parent.swimlaneSettings.keyField] + '"]';
        if (this.parent.element.querySelector(rowSelector)) {
          cardRow = this.parent.element.querySelector(rowSelector).nextElementSibling;
        } else {
          var columnIndex = this.columnKeys.indexOf(key);
          if (columnIndex !== -1 && this.parent.actionModule.hideColumnKeys.indexOf(key) === -1) {
            var index_1 = this.kanbanRows.findIndex(function(rowData) {
              return rowData["keyField"] === data[_this.parent.swimlaneSettings.keyField];
            });
            var swim = [].slice.call(this.parent.element.querySelectorAll(".e-swimlane-row"));
            var swimRow = this.parent.element.querySelector("." + CONTENT_TABLE_CLASS + " tbody");
            if (swim[index_1]) {
              swimRow = swim[index_1];
            }
            this.renderSwimlaneRow(swimRow, this.kanbanRows[index_1], false);
            this.renderSingleContent(swimRow, this.kanbanRows[index_1], false);
          }
          cardRow = this.parent.element.querySelector(rowSelector).nextElementSibling;
          [].slice.call(cardRow.children).forEach(function(cell) {
            var cardWrapper = createElement("div", { className: CARD_WRAPPER_CLASS });
            cell.appendChild(cardWrapper);
            cardWrapper.appendChild(_this.renderEmptyCard());
          });
        }
      }
      if (this.parent.sortSettings.sortBy !== "Index") {
        var field_1 = this.parent.cardSettings.headerField;
        if (this.parent.sortSettings.sortBy === "Custom") {
          field_1 = this.parent.sortSettings.field;
        }
        if (isNullOrUndefined(this.parent.swimlaneSettings.keyField)) {
          index = this.getColumnData(key, this.parent.kanbanData).findIndex(function(colData) {
            return colData["" + field_1] === data["" + field_1];
          });
        } else {
          var swimlaneDatas = this.parent.getSwimlaneData(data[this.parent.swimlaneSettings.keyField]);
          index = this.getColumnData(key, swimlaneDatas).findIndex(function(colData) {
            return colData["" + field_1] === data["" + field_1];
          });
        }
      } else if (this.parent.sortSettings.sortBy === "Index" && this.parent.sortSettings.field && this.parent.sortSettings.direction === "Ascending") {
        index = data[this.parent.sortSettings.field] - 1;
      }
      if (cardRow) {
        var td = [].slice.call(cardRow.children).filter(function(e) {
          return e.getAttribute("data-key").replace(/\s/g, "").split(",").indexOf(key.toString().replace(/\s/g, "")) !== -1;
        })[0];
        var cardWrapper_2 = td.querySelector("." + CARD_WRAPPER_CLASS);
        var emptyCard = cardWrapper_2.querySelector("." + EMPTY_CARD_CLASS);
        if (emptyCard) {
          remove(emptyCard);
        }
        var cardElement_1 = this.renderCard(data);
        if (this.parent.allowDragAndDrop && td.classList.contains(DRAG_CLASS)) {
          this.parent.dragAndDropModule.wireDragEvents(cardElement_1);
          addClass([cardElement_1], DROPPABLE_CLASS);
        }
        var args = { data, element: cardElement_1, cancel: false };
        this.parent.trigger(cardRendered, args, function(cardArgs) {
          if (!cardArgs.cancel) {
            if (isNullOrUndefined(index) || cardWrapper_2.children.length === 0) {
              cardWrapper_2.appendChild(cardElement_1);
            } else {
              cardWrapper_2.insertBefore(cardElement_1, cardWrapper_2.childNodes[index]);
            }
          }
        });
      }
    };
    LayoutRender2.prototype.removeCard = function(data) {
      var cardKey = data[this.parent.cardSettings.headerField];
      var cardElement = this.parent.element.querySelector("." + CARD_CLASS + '[data-id="' + cardKey + '"]');
      this.isSelectedCard = cardElement.classList.contains(CARD_SELECTION_CLASS) ? true : false;
      var cardContainer = cardElement.parentElement;
      if (cardElement) {
        remove(cardElement);
      }
      if (cardContainer.querySelectorAll("." + CARD_CLASS + ":not(." + CLONED_CARD_CLASS + ")").length === 0) {
        cardContainer.appendChild(this.renderEmptyCard());
      }
    };
    LayoutRender2.prototype.wireEvents = function() {
      var _this = this;
      EventHandler.add(this.parent.element, "click", this.parent.actionModule.clickHandler, this.parent.actionModule);
      EventHandler.add(this.parent.element, "dblclick", this.parent.actionModule.doubleClickHandler, this.parent.actionModule);
      EventHandler.add(document, Browser.touchStartEvent, this.documentClick, this);
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      EventHandler.add(content, "scroll", this.onContentScroll, this);
      var cardWrapper = [].slice.call(this.parent.element.querySelectorAll("." + CARD_WRAPPER_CLASS));
      cardWrapper.forEach(function(wrapper) {
        if (_this.parent.isInitialRender && wrapper.offsetParent) {
          _this.parent.scrollPosition.column[wrapper.offsetParent.getAttribute("data-key")] = { left: 0, top: 0 };
        }
        EventHandler.add(wrapper, "scroll", _this.onColumnScroll, _this);
      });
      if (this.parent.isAdaptive) {
        this.parent.touchModule.wireTouchEvents();
        content.scrollLeft = this.scrollLeft;
      }
      this.wireDragEvent();
    };
    LayoutRender2.prototype.unWireEvents = function() {
      var _this = this;
      EventHandler.remove(this.parent.element, "click", this.parent.actionModule.clickHandler);
      EventHandler.remove(this.parent.element, "dblclick", this.parent.actionModule.doubleClickHandler);
      EventHandler.remove(document, Browser.touchStartEvent, this.documentClick);
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      if (content) {
        EventHandler.remove(content, "scroll", this.onContentScroll);
        if (this.parent.allowDragAndDrop) {
          this.unWireDragEvent();
        }
      }
      var cardWrapper = [].slice.call(this.parent.element.querySelectorAll("." + CARD_WRAPPER_CLASS));
      if (cardWrapper.length > 0) {
        cardWrapper.forEach(function(wrapper) {
          EventHandler.remove(wrapper, "scroll", _this.onColumnScroll);
        });
      }
      if (this.parent.isAdaptive) {
        this.parent.touchModule.unWireTouchEvents();
      }
    };
    LayoutRender2.prototype.wireDragEvent = function() {
      var _this = this;
      if (this.parent.allowDragAndDrop) {
        var cards = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_CELLS_CLASS + "." + DRAG_CLASS + " ." + CARD_CLASS));
        addClass(cards, DROPPABLE_CLASS);
        cards.forEach(function(card) {
          return _this.parent.dragAndDropModule.wireDragEvents(card);
        });
      }
    };
    LayoutRender2.prototype.unWireDragEvent = function() {
      var _this = this;
      var cards = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_CELLS_CLASS + "." + DRAG_CLASS + " ." + CARD_CLASS));
      removeClass(cards, DROPPABLE_CLASS);
      cards.forEach(function(card) {
        return _this.parent.dragAndDropModule.unWireDragEvents(card);
      });
    };
    LayoutRender2.prototype.destroy = function() {
      this.parent.resetTemplates();
      this.parent.off(dataReady, this.initRender);
      this.parent.off(contentReady, this.scrollUiUpdate);
      this.unWireEvents();
      var header = this.parent.element.querySelector("." + HEADER_CLASS);
      if (header) {
        remove(header);
      }
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      if (content) {
        remove(content);
      }
      if (this.treeViewObj) {
        this.treeViewObj.destroy();
        this.treeViewObj = null;
      }
      if (this.treePopup) {
        this.treePopup.destroy();
        this.treePopup = null;
      }
      var swimlaneToolBarEle = this.parent.element.querySelector("." + SWIMLANE_HEADER_CLASS);
      if (swimlaneToolBarEle) {
        remove(swimlaneToolBarEle);
      }
      var swimlaneContent = this.parent.element.querySelector("." + SWIMLANE_CONTENT_CLASS);
      if (swimlaneContent) {
        remove(swimlaneContent);
      }
    };
    return LayoutRender2;
  }(MobileLayout)
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/base/virtual-layout-render.js
var __extends42 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VirtualLayoutRender = (
  /** @class */
  function(_super) {
    __extends42(VirtualLayoutRender2, _super);
    function VirtualLayoutRender2(parent) {
      var _this = _super.call(this, parent) || this;
      _this.parent = parent;
      _this.kanbanRows = [];
      _this.scrollStatus = {};
      _this.offsets = {};
      _this.tempOffsets = {};
      _this.offsetKeys = [];
      _this.columnKeys = [];
      _this.scrollLeft = 0;
      _this.frozenOrder = 0;
      if (_this.parent.enableVirtualization) {
        _this.parent.on(dataReady, _this.initRender, _this);
        _this.parent.on(contentReady, _this.scrollUiUpdate, _this);
      }
      return _this;
    }
    VirtualLayoutRender2.prototype.initRender = function() {
      this.isSwimlane = !isNullOrUndefined(this.parent.swimlaneSettings.keyField) && this.parent.swimlaneSettings.keyField.trim().length > 1 ? true : false;
      this.query = this.parent.query instanceof Query ? this.parent.query : new Query();
      if (this.parent.columns.length === 0) {
        return;
      }
      this.cardHeight = this.cardHeightCalculate();
      this.columnData = this.getColumnCards();
      this.kanbanRows = this.getRows();
      if (this.parent.isAdaptive) {
        var parent_1 = this.parent.element.querySelector("." + CONTENT_CLASS);
        if (parent_1) {
          this.scrollLeft = parent_1.scrollLeft;
        }
      }
      this.destroy();
      this.parent.on(dataReady, this.initRender, this);
      this.parent.on(contentReady, this.scrollUiUpdate, this);
      var header = createElement("div", { className: HEADER_CLASS });
      this.parent.element.appendChild(header);
      this.renderHeader(header);
      if (!this.isSwimlane) {
        this.renderContent();
        this.renderCards();
      }
      this.renderValidation();
      this.parent.renderTemplates();
      this.parent.notify(contentReady, {});
      this.wireEvents();
      if (this.parent.isInitialRender) {
        this.parent.isInitialRender = false;
      }
    };
    VirtualLayoutRender2.prototype.cardHeightCalculate = function() {
      var cardHeight;
      if (this.parent.cardHeight === "auto") {
        cardHeight = 100 + 8;
      } else {
        cardHeight = parseInt(formatUnit(this.parent.cardHeight).split("px")[0], 10) + 8;
      }
      return cardHeight;
    };
    VirtualLayoutRender2.prototype.renderHeader = function(header) {
      var headerWrap = createElement("div", { className: this.parent.swimlaneSettings.keyField ? SWIMLANE_CLASS : "" });
      header.appendChild(headerWrap);
      var headerTable = createElement("table", {
        className: TABLE_CLASS + " " + HEADER_TABLE_CLASS,
        attrs: { "role": "presentation" }
      });
      headerWrap.appendChild(headerTable);
      this.renderColGroup(headerTable);
      var tableHead = createElement("thead");
      headerTable.appendChild(tableHead);
      if (this.parent.stackedHeaders.length > 0) {
        tableHead.appendChild(this.createStackedRow(this.parent.stackedHeaders));
      }
      var tr = createElement("tr", { className: HEADER_ROW_CLASS });
      tableHead.appendChild(tr);
      var _loop_1 = function(column2) {
        if (this_1.isColumnVisible(column2)) {
          var index = this_1.parent.actionModule.columnToggleArray.indexOf(column2.keyField.toString());
          var th_1 = createElement("th", {
            className: index === -1 ? HEADER_CELLS_CLASS : HEADER_CELLS_CLASS + " " + COLLAPSED_CLASS,
            attrs: { "data-role": "kanban-column", "data-key": column2.keyField.toString() }
          });
          var classList2 = [];
          if (column2.allowToggle) {
            classList2.push(HEADER_ROW_TOGGLE_CLASS);
            if (!column2.isExpanded) {
              classList2.push(COLLAPSED_CLASS);
            }
          }
          addClass([th_1], classList2);
          var headerWrapper = createElement("div", { className: HEADER_WRAP_CLASS });
          th_1.appendChild(headerWrapper);
          var noOfCard = this_1.parent.dataModule.isRemote() ? this_1.parent.columnDataCount[column2.keyField] : this_1.columnData[column2.keyField].length;
          var headerTitle = createElement("div", { className: HEADER_TITLE_CLASS });
          headerWrapper.appendChild(headerTitle);
          if (column2.template) {
            var templateArgs = {
              keyField: column2.keyField,
              headerText: column2.headerText,
              minCount: column2.minCount,
              maxCount: column2.maxCount,
              allowToggle: column2.allowToggle,
              isExpanded: column2.isExpanded,
              showItemCount: column2.showItemCount,
              count: noOfCard
            };
            addClass([th_1], TEMPLATE_CLASS);
            var templateId = this_1.parent.element.id + "_columnTemplate";
            var templateHeader = this_1.parent.templateParser(column2.template)(templateArgs, this_1.parent, "columnTemplate", templateId, false);
            append(templateHeader, headerTitle);
          } else {
            var header_1 = createElement("div", { className: HEADER_TEXT_CLASS, innerHTML: column2.headerText });
            headerTitle.appendChild(header_1);
            if (column2.showItemCount) {
              var itemCount = createElement("div", {
                className: CARD_ITEM_COUNT_CLASS,
                innerHTML: "- " + noOfCard.toString() + " " + this_1.parent.localeObj.getConstant("items")
              });
              headerTitle.appendChild(itemCount);
            }
          }
          if (column2.allowToggle) {
            var isExpand = column2.isExpanded && index === -1 ? true : false;
            var name_1 = isExpand ? COLUMN_EXPAND_CLASS : COLUMN_COLLAPSE_CLASS;
            var icon = createElement("div", {
              className: HEADER_ICON_CLASS + " " + ICON_CLASS + " " + name_1,
              attrs: { "tabindex": "0" }
            });
            icon.setAttribute("aria-label", isExpand ? column2.keyField + " Expand" : column2.keyField + " Collapse");
            th_1.setAttribute("aria-expanded", isExpand.toString());
            headerWrapper.appendChild(icon);
          }
          var dataObj = [{ keyField: column2.keyField, textField: column2.headerText, count: noOfCard }];
          var args = { data: dataObj, element: tr, cancel: false, requestType: "headerRow" };
          this_1.parent.trigger(queryCellInfo, args, function(columnArgs) {
            if (!columnArgs.cancel) {
              tr.appendChild(th_1);
            }
          });
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = this.parent.columns; _i < _a.length; _i++) {
        var column = _a[_i];
        _loop_1(column);
      }
    };
    VirtualLayoutRender2.prototype.renderContent = function() {
      var content = createElement("div", { className: CONTENT_CLASS });
      this.parent.element.appendChild(content);
      var contentWrap = createElement("div", { className: this.parent.swimlaneSettings.keyField ? SWIMLANE_CLASS : "" });
      content.appendChild(contentWrap);
      var contentTable = createElement("table", {
        className: TABLE_CLASS + " " + CONTENT_TABLE_CLASS,
        attrs: { "role": "presentation" }
      });
      contentWrap.appendChild(contentTable);
      this.renderColGroup(contentTable);
      var tBody = createElement("tbody");
      contentTable.appendChild(tBody);
      var isCollaspsed = false;
      for (var _i = 0, _a = this.kanbanRows; _i < _a.length; _i++) {
        var row = _a[_i];
        if (this.parent.swimlaneSettings.keyField && this.parent.swimlaneToggleArray.length !== 0) {
          var index = this.parent.swimlaneToggleArray.indexOf(row.keyField);
          isCollaspsed = index !== -1;
        }
        this.renderSingleContent(tBody, row, isCollaspsed);
      }
    };
    VirtualLayoutRender2.prototype.renderSingleContent = function(tBody, row, isCollaspsed) {
      var className = isCollaspsed ? CONTENT_ROW_CLASS + " " + COLLAPSED_CLASS : CONTENT_ROW_CLASS;
      var tr = createElement("tr", { className, attrs: { "aria-expanded": "true" } });
      for (var _i = 0, _a = this.parent.columns; _i < _a.length; _i++) {
        var column = _a[_i];
        if (this.isColumnVisible(column)) {
          var index = this.parent.actionModule.columnToggleArray.indexOf(column.keyField.toString());
          var className_1 = index === -1 ? CONTENT_CELLS_CLASS : CONTENT_CELLS_CLASS + " " + COLLAPSED_CLASS;
          var dragClass = (column.allowDrag ? " " + DRAG_CLASS : "") + (column.allowDrop ? " " + DROP_CLASS + " " + DROPPABLE_CLASS : "");
          var td = createElement("td", {
            className: className_1 + dragClass,
            attrs: {
              "data-role": "kanban-column",
              "data-key": column.keyField.toString(),
              "aria-expanded": "true",
              "tabindex": "0",
              "role": "navigation"
            }
          });
          if (column.allowToggle && !column.isExpanded || index !== -1) {
            addClass([td], COLLAPSED_CLASS);
            var text = (column.showItemCount ? "[" + (this.parent.dataModule.isRemote() ? this.parent.columnDataCount[column.keyField] : this.getColumnData(column.keyField).length) + "] " : "") + column.headerText;
            td.appendChild(createElement("div", { className: COLLAPSE_HEADER_TEXT_CLASS, innerHTML: text }));
            td.setAttribute("aria-expanded", "false");
          }
          if (column.showAddButton) {
            var button = createElement("div", { className: SHOW_ADD_BUTTON, attrs: { "tabindex": "-1" } });
            button.appendChild(createElement("div", { className: SHOW_ADD_ICON + " " + ICON_CLASS }));
            td.appendChild(button);
          }
          tr.appendChild(td);
          if (this.parent.enableVirtualization) {
            var headerHeight = this.parent.element.querySelector(".e-kanban-header").getBoundingClientRect().height;
            if (this.parent.height === "auto") {
              td.style.height = window.innerHeight - (headerHeight + this.parent.element.getBoundingClientRect().top + 15) + "px";
            } else {
              td.style.height = parseInt(formatUnit(this.parent.height).split("px")[0], 10) - (headerHeight + 15) + "px";
            }
          }
        }
      }
      var dataObj = [{ keyField: row.keyField, textField: row.textField, count: row.count }];
      var args = { data: dataObj, element: tr, cancel: false, requestType: "contentRow" };
      this.parent.trigger(queryCellInfo, args, function(columnArgs) {
        if (!columnArgs.cancel) {
          if (tBody.classList.contains("e-swimlane-row")) {
            tBody.insertAdjacentElement("beforebegin", tr);
          } else {
            tBody.appendChild(tr);
          }
        }
      });
    };
    VirtualLayoutRender2.prototype.windowResize = function() {
      var cloumnsTDElem = this.parent.element.querySelectorAll("." + CONTENT_CELLS_CLASS);
      var headerHeight = this.parent.element.querySelector(".e-kanban-header").getBoundingClientRect().height;
      for (var j = 0; j < cloumnsTDElem.length; j++) {
        if (this.parent.height === "auto") {
          cloumnsTDElem[j].style.height = window.innerHeight - (headerHeight + this.parent.element.getBoundingClientRect().top + 15) + "px";
        } else {
          cloumnsTDElem[j].style.height = parseInt(formatUnit(this.parent.height).split("px")[0], 10) - (headerHeight + 15) + "px";
        }
      }
    };
    VirtualLayoutRender2.prototype.refreshColumnData = function(draggedColumnKey, droppedColumnKey, requestType, crudKeyField) {
      var _this = this;
      var cardRows = [].slice.call(this.parent.element.querySelectorAll(".e-content-row:not(.e-swimlane-row)"));
      var isCRUD = (requestType === "cardChanged" || requestType === "cardCreated" || requestType === "cardRemoved") && !isNullOrUndefined(crudKeyField);
      cardRows.forEach(function(tr, index) {
        var _loop_2 = function(column2) {
          if (_this.isColumnVisible(column2) && (column2.keyField === draggedColumnKey || column2.keyField === droppedColumnKey) || isCRUD) {
            var cards_1 = 0;
            var blocks = [];
            var columnData = _this.getColumnCards()[column2.keyField];
            var currentColumnDataCount = _this.parent.dataModule.isRemote() ? _this.parent.columnDataCount[column2.keyField] : columnData.length;
            var overallHeight = _this.cardHeight * currentColumnDataCount;
            blocks = Array.apply(null, Array(currentColumnDataCount)).map(function() {
              return ++cards_1;
            });
            var columnWrapper = tr.querySelector('[data-key="' + column2.keyField + '"]');
            var singleIndexCardCount = Math.ceil(parseInt(columnWrapper.style.height.split("px")[0], 10) / _this.cardHeight);
            _this.offsets[1] = singleIndexCardCount * _this.cardHeight;
            for (var i = 1; i < blocks.length; i++) {
              _this.offsets[blocks[i]] = _this.offsets[blocks[i - 1]] + singleIndexCardCount * _this.cardHeight;
              _this.tempOffsets[blocks[i]] = _this.offsets[blocks[i] - 1] | 0;
            }
            var cardWrapper = columnWrapper.querySelector("." + CARD_WRAPPER_CLASS);
            var maxBlock = currentColumnDataCount % 2 === 0 ? currentColumnDataCount - 2 : currentColumnDataCount - 1;
            var viewInfo = _this.getInfoFromView(_this.scrollStatus[column2.keyField]);
            var transformY = _this.getTranslateY(viewInfo);
            var cardVirtualElement = cardWrapper.querySelector("." + CARD_VIRTUAL_WRAPPER_CLASS);
            cardVirtualElement.style.maxHeight = currentColumnDataCount * _this.cardHeight + "px";
            _this.setPadding(transformY, cardVirtualElement, currentColumnDataCount);
            _this.currentStatus = {
              column: column2.keyField,
              columnOverAllHeight: overallHeight,
              columnHeight: parseInt(columnWrapper.style.height.split("px")[0], 10),
              previousScrollTop: _this.scrollStatus[column2.keyField].currentScrollTop,
              currentScrollTop: cardWrapper.scrollTop,
              scrollDirection: _this.scrollStatus[column2.keyField].scrollDirection,
              currentBlockIndex: _this.scrollStatus[column2.keyField].currentBlockIndex,
              oldBlockIndex: _this.scrollStatus[column2.keyField].oldBlockIndex,
              offsets: _this.offsets,
              tempOffsets: _this.tempOffsets,
              totalColumnData: currentColumnDataCount,
              singleIndexCardCount,
              maxBlock
            };
            _this.scrollStatus[column2.keyField] = _this.currentStatus;
          }
        };
        for (var _i = 0, _a = _this.parent.columns; _i < _a.length; _i++) {
          var column = _a[_i];
          _loop_2(column);
        }
      });
    };
    VirtualLayoutRender2.prototype.renderCards = function() {
      var _this = this;
      var rows = this.kanbanRows;
      var cardRows = [].slice.call(this.parent.element.querySelectorAll(".e-content-row:not(.e-swimlane-row)"));
      var swimlaneRows = [].slice.call(this.parent.element.querySelectorAll(".e-content-row.e-swimlane-row"));
      var removeTrs = [];
      var columnTransition = false;
      cardRows.forEach(function(tr, index) {
        var dataCount = 0;
        var _loop_3 = function(column2) {
          if (_this.isColumnVisible(column2)) {
            var cards_2 = 0;
            var currentScrollIndex = 0;
            var blocks = [];
            _this.offsets = {};
            _this.tempOffsets = {};
            var columnData = _this.columnData[column2.keyField];
            var currentColumnDataCount = _this.parent.dataModule.isRemote() ? _this.parent.columnDataCount[column2.keyField] : columnData.length;
            dataCount += currentColumnDataCount;
            var overallHeight = _this.cardHeight * currentColumnDataCount + 7;
            var columnWrapper = tr.querySelector('[data-key="' + column2.keyField + '"]');
            var singleIndexCardCount = Math.ceil(parseFloat(columnWrapper.style.height.split("px")[0]) / _this.cardHeight);
            var currentColumnBlock = Math.floor(currentColumnDataCount / singleIndexCardCount);
            blocks = Array.apply(null, Array(currentColumnDataCount)).map(function() {
              return ++cards_2;
            });
            _this.offsets[1] = singleIndexCardCount * _this.cardHeight + 7;
            for (var i = 1; i < blocks.length; i++) {
              _this.offsets[blocks[i]] = _this.offsets[blocks[i - 1]] + singleIndexCardCount * _this.cardHeight;
              _this.tempOffsets[blocks[i]] = _this.offsets[blocks[i] - 1] | 0;
            }
            var cardWrapper = createElement("div", {
              className: CARD_WRAPPER_CLASS,
              attrs: { "role": "listbox" }
            });
            var cardVirtualWrapper_1 = createElement("div", {
              className: CARD_VIRTUAL_WRAPPER_CLASS,
              attrs: { "role": "listbox" }
            });
            cardWrapper.appendChild(cardVirtualWrapper_1);
            var maxBlock = currentColumnBlock % 2 === 0 ? currentColumnBlock : currentColumnBlock + 1;
            _this.currentStatus = {
              column: column2.keyField,
              columnOverAllHeight: overallHeight,
              columnHeight: parseInt(columnWrapper.style.height.split("px")[0], 10),
              previousScrollTop: null,
              currentScrollTop: cardWrapper.scrollTop,
              scrollDirection: null,
              currentBlockIndex: [1, 2],
              oldBlockIndex: [1, 2],
              offsets: _this.offsets,
              tempOffsets: _this.tempOffsets,
              totalColumnData: currentColumnDataCount,
              singleIndexCardCount,
              maxBlock
            };
            _this.scrollStatus[column2.keyField] = _this.currentStatus;
            if (column2.transitionColumns.length > 0) {
              columnTransition = true;
            }
            if (!columnTransition && isNullOrUndefined(_this.parent.swimlaneSettings.keyField)) {
              var borderElem = createElement("div", { className: BORDER_CLASS });
              columnWrapper.appendChild(borderElem);
            }
            columnWrapper.appendChild(cardWrapper);
            if (currentColumnDataCount > 0) {
              var _loop_4 = function(i2) {
                var cardText = columnData[i2][_this.parent.cardSettings.headerField];
                var cardIndex = _this.parent.actionModule.selectionArray.indexOf(cardText);
                var cardElement = _this.renderCard(columnData[i2]);
                if (cardIndex !== -1) {
                  cardElement.setAttribute("aria-selected", "true");
                  addClass([cardElement], CARD_SELECTION_CLASS);
                }
                var args = { data: columnData[i2], element: cardElement, cancel: false };
                _this.parent.trigger(cardRendered, args, function(cardArgs) {
                  if (!cardArgs.cancel) {
                    cardVirtualWrapper_1.appendChild(cardElement);
                  }
                });
              };
              for (var i = currentScrollIndex; i < singleIndexCardCount * 2; i++) {
                _loop_4(i);
              }
              cardVirtualWrapper_1.style.maxHeight = _this.cardHeight * currentColumnDataCount + "px";
            } else {
              cardVirtualWrapper_1.appendChild(_this.renderEmptyCard());
            }
            _this.setPadding(0, cardVirtualWrapper_1, currentColumnDataCount);
          }
        };
        for (var _i = 0, _a = _this.parent.columns; _i < _a.length; _i++) {
          var column = _a[_i];
          _loop_3(column);
        }
        if (dataCount === 0) {
          removeTrs.push(tr);
          if (swimlaneRows.length > 0) {
            removeTrs.push(swimlaneRows[index]);
          }
        }
      });
      if (!this.parent.swimlaneSettings.showEmptyRow && (this.parent.kanbanData.length === 0 && !this.parent.showEmptyColumn)) {
        removeTrs.forEach(function(tr) {
          return remove(tr);
        });
      }
    };
    VirtualLayoutRender2.prototype.renderCard = function(data) {
      var cardElement = createElement("div", {
        className: CARD_CLASS,
        attrs: {
          "data-id": data[this.parent.cardSettings.headerField],
          "data-key": data[this.parent.keyField],
          "aria-selected": "false",
          "tabindex": "-1",
          "role": "option"
        }
      });
      cardElement.style.height = this.cardHeight - 8 + "px";
      if (this.parent.cardSettings.template) {
        addClass([cardElement], TEMPLATE_CLASS);
        var templateId = this.parent.element.id + "_cardTemplate";
        var cardTemplate = this.parent.templateParser(this.parent.cardSettings.template)(data, this.parent, "cardTemplate", templateId, false);
        append(cardTemplate, cardElement);
      } else {
        var tooltipClass = this.parent.enableTooltip ? " " + TOOLTIP_TEXT_CLASS : "";
        if (this.parent.cardSettings.showHeader) {
          var cardHeader = createElement("div", { className: CARD_HEADER_CLASS });
          var cardCaption = createElement("div", { className: CARD_HEADER_TEXT_CLASS });
          var cardText = createElement("div", {
            className: CARD_HEADER_TITLE_CLASS + tooltipClass,
            innerHTML: data[this.parent.cardSettings.headerField] || ""
          });
          cardHeader.appendChild(cardCaption);
          cardCaption.appendChild(cardText);
          cardElement.appendChild(cardHeader);
        }
        var cardContent = createElement("div", {
          className: CARD_CONTENT_CLASS + tooltipClass,
          innerHTML: data[this.parent.cardSettings.contentField] || ""
        });
        cardElement.appendChild(cardContent);
        if (this.parent.cardSettings.tagsField && data[this.parent.cardSettings.tagsField]) {
          var cardTags = createElement("div", { className: CARD_TAGS_CLASS });
          var tags = data[this.parent.cardSettings.tagsField].toString().split(",");
          for (var _i = 0, tags_1 = tags; _i < tags_1.length; _i++) {
            var tag = tags_1[_i];
            cardTags.appendChild(createElement("div", {
              className: CARD_TAG_CLASS + " " + CARD_LABEL_CLASS,
              innerHTML: tag
            }));
          }
          cardElement.appendChild(cardTags);
        }
        if (this.parent.cardSettings.grabberField && data[this.parent.cardSettings.grabberField]) {
          addClass([cardElement], CARD_COLOR_CLASS);
          cardElement.style.borderLeftColor = data[this.parent.cardSettings.grabberField];
        }
        if (this.parent.cardSettings.footerCssField) {
          var cardFields = createElement("div", { className: CARD_FOOTER_CLASS });
          var keys = data[this.parent.cardSettings.footerCssField].split(",");
          for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
            var key = keys_1[_a];
            cardFields.appendChild(createElement("div", {
              className: key.trim() + " " + CARD_FOOTER_CSS_CLASS
            }));
          }
          cardElement.appendChild(cardFields);
        }
      }
      return cardElement;
    };
    VirtualLayoutRender2.prototype.renderEmptyCard = function() {
      var emptyCard = createElement("span", {
        className: EMPTY_CARD_CLASS,
        innerHTML: this.parent.localeObj.getConstant("noCard")
      });
      return emptyCard;
    };
    VirtualLayoutRender2.prototype.renderColGroup = function(table) {
      var _this = this;
      var colGroup = createElement("colgroup");
      this.parent.columns.forEach(function(column) {
        if (_this.isColumnVisible(column)) {
          var index = _this.parent.actionModule.columnToggleArray.indexOf(column.keyField.toString());
          var isToggle = column.allowToggle && !column.isExpanded;
          var className = index === -1 ? isToggle ? COLLAPSED_CLASS : "" : COLLAPSED_CLASS;
          var col = createElement("col", {
            className,
            attrs: { "data-key": column.keyField.toString() },
            styles: _this.parent.isAdaptive ? "width: " + (isToggle ? formatUnit(toggleWidth) : formatUnit(_this.getWidth())) : ""
          });
          colGroup.appendChild(col);
        }
      });
      table.appendChild(colGroup);
    };
    VirtualLayoutRender2.prototype.getRows = function() {
      var kanbanRows = [];
      kanbanRows.push({ keyField: "", textField: "" });
      return kanbanRows;
    };
    VirtualLayoutRender2.prototype.createStackedRow = function(rows) {
      var tr = createElement("tr", { className: HEADER_ROW_CLASS + " " + STACKED_HEADER_ROW_CLASS });
      var stackedHeaders = [];
      this.parent.columns.forEach(function(column) {
        var headerText = "";
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
          var row = rows_1[_i];
          if (row.keyFields.indexOf(column.keyField.toString()) !== -1) {
            headerText = row.text;
          }
        }
        stackedHeaders.push(headerText);
      });
      for (var h = 0; h < stackedHeaders.length; h++) {
        var colSpan = 1;
        for (var j = h + 1; j < stackedHeaders.length; j++) {
          if (stackedHeaders[h] !== "" && stackedHeaders[j] !== "" && stackedHeaders[h] === stackedHeaders[j]) {
            colSpan++;
          } else {
            break;
          }
        }
        var div = createElement("div", { className: HEADER_TEXT_CLASS, innerHTML: stackedHeaders[h] });
        var th = createElement("th", {
          className: HEADER_CELLS_CLASS + " " + STACKED_HEADER_CELL_CLASS,
          attrs: { "colspan": colSpan.toString() }
        });
        tr.appendChild(th).appendChild(div);
        h += colSpan - 1;
      }
      return tr;
    };
    VirtualLayoutRender2.prototype.scrollUiUpdate = function() {
      var _this = this;
      var header = this.parent.element.querySelector("." + HEADER_CLASS);
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      var height = this.parent.element.offsetHeight - header.offsetHeight;
      if (this.parent.isAdaptive) {
        height = window.innerHeight - (header.offsetHeight + bottomSpace);
        var swimlaneToolbar = this.parent.element.querySelector("." + SWIMLANE_HEADER_CLASS);
        if (swimlaneToolbar) {
          height -= swimlaneToolbar.offsetHeight;
        }
        var cardWrappers = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_CELLS_CLASS));
        cardWrappers.forEach(function(cell) {
          var cardWrapper = cell.querySelector("." + CARD_WRAPPER_CLASS);
          if (!cardWrapper.classList.contains(MULTI_CARD_WRAPPER_CLASS)) {
            cardWrapper.style.height = formatUnit(height);
            EventHandler.add(cell, "touchmove", _this.onAdaptiveScroll, _this);
          }
        });
      }
      if (this.parent.height !== "auto" && this.parent.height !== "100%") {
        content.style.height = formatUnit(height);
      }
      [].slice.call(header.children).forEach(function(node) {
        var paddingValue = 0;
        if (content.offsetWidth - content.clientWidth > 0) {
          paddingValue = 17;
          if (content.offsetHeight - content.clientHeight > 0) {
            node.style.width = formatUnit(content.clientWidth);
          }
        }
        if (_this.parent.enableRtl) {
          node.style.paddingLeft = formatUnit(paddingValue);
        } else {
          node.style.paddingRight = formatUnit(paddingValue);
        }
      });
      this.updateScrollPosition();
    };
    VirtualLayoutRender2.prototype.onContentScroll = function(e) {
      var target = e.target;
      var header = this.parent.element.querySelector("." + HEADER_CLASS);
      [].slice.call(header.children).forEach(function(node) {
        node.scrollLeft = target.scrollLeft;
      });
      this.parent.scrollPosition.content = { left: target.scrollLeft, top: target.scrollTop };
    };
    VirtualLayoutRender2.prototype.getOffset = function(block, viewInfo) {
      return Math.min(viewInfo.offsets[block] | 0, viewInfo.offsets[viewInfo.maxBlock] | 0);
    };
    VirtualLayoutRender2.prototype.getTranslateY = function(viewInfo) {
      var block = (viewInfo.newBlockIndex[0] || 1) - 1;
      var translate = this.getOffset(block, viewInfo);
      var endTranslate = this.getOffset(viewInfo.newBlockIndex[viewInfo.newBlockIndex.length - 1], viewInfo);
      var result = translate > viewInfo.currentScrollTop ? this.getOffset(block - 1, viewInfo) : endTranslate < viewInfo.currentScrollTop + viewInfo.columnHeight ? this.getOffset(block + 1, viewInfo) : translate;
      return result;
    };
    VirtualLayoutRender2.prototype.setPadding = function(paddingTop, scrollElem, dataCount, isScrolledToLast, direction) {
      if (isScrolledToLast && direction === "down") {
        scrollElem.style.paddingTop = paddingTop + "px";
        scrollElem.style.paddingBottom = "0px";
      } else {
        scrollElem.style.paddingTop = paddingTop + "px";
        scrollElem.style.paddingBottom = this.cardHeight * dataCount - paddingTop + "px";
      }
    };
    VirtualLayoutRender2.prototype.getData = function(keyField, column, take, skip) {
      var query = this.query.clone();
      var predicate = new Predicate(keyField, "equal", column, true);
      query.where(predicate);
      query.take(take);
      query.skip(skip);
      query.addParams("KanbanVirtualScroll", "KanbanVirtualScroll");
      if (this.parent.dataSource && "result" in this.parent.dataSource) {
        var def = this.eventPromise({ requestType: "" }, query);
        return def.promise;
      }
      return this.parent.dataModule.dataManager.executeQuery(query);
    };
    VirtualLayoutRender2.prototype.eventPromise = function(args, query) {
      var state = this.getStateEventArgument(query);
      var def = new Deferred();
      state.updateData = def.resolve;
      state.action = args;
      return def;
    };
    VirtualLayoutRender2.prototype.getStateEventArgument = function(query) {
      var adaptr = new UrlAdaptor();
      var dm = new DataManager({ url: "", adaptor: new UrlAdaptor() });
      var state = adaptr.processQuery(dm, query);
      var data = JSON.parse(state.data);
      return extend(data, state.pvtData);
    };
    VirtualLayoutRender2.prototype.dataManagerSuccess = function(e, type, offlineArgs, index) {
      var _this = this;
      var resultData;
      if (type) {
        resultData = extend([], !isNullOrUndefined(e.result.result) ? e.result.result : e.result, null, true);
      } else {
        this.parent.trigger(dataBinding, e, function(args) {
          resultData = extend([], !isNullOrUndefined(args.result.result) ? args.result.result : args.result, null, true);
          _this.parent.trigger(dataBound, null, function() {
            return _this.parent.hideSpinner();
          });
        });
      }
      return resultData;
    };
    VirtualLayoutRender2.prototype.dataManagerFailure = function(e) {
      var _this = this;
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.trigger(actionFailure, { error: e }, function() {
        return _this.parent.hideSpinner();
      });
    };
    VirtualLayoutRender2.prototype.onColScrollShowSkeleton = function(args) {
      var target = args.target;
      if (this.parent.element.querySelectorAll(".e-card-skeleton-wrapper").length > 0) {
        return;
      }
      var key = target.parentElement.getAttribute("data-key");
      var previousScrollTop = this.scrollStatus[key].previousScrollTop;
      var parentElemHeight = target.parentElement.clientHeight;
      if (target.scrollTop - previousScrollTop > parentElemHeight || previousScrollTop - target.scrollTop > parentElemHeight) {
        this.showSkeleton(target, this.scrollStatus[key].singleIndexCardCount);
      }
    };
    VirtualLayoutRender2.prototype.showSkeleton = function(cardWrapper, skeletonCount) {
      var cardVirtualSkeletonWrapper = createElement("div", {
        className: "e-card-virtual-skeleton-wrapper",
        attrs: { "role": "listbox" }
      });
      cardWrapper.parentElement.insertBefore(cardVirtualSkeletonWrapper, cardWrapper);
      cardVirtualSkeletonWrapper.style.position = "absolute";
      cardVirtualSkeletonWrapper.style.zIndex = "10";
      for (var j = 0; j < skeletonCount; j++) {
        var skeletonWrapper = createElement("div", { className: "e-card-skeleton-wrapper" });
        var skeleton = createElement("span", { className: "e-skeleton e-skeleton-text e-shimmer-wave" });
        skeleton.style.height = this.cardHeight + "px";
        skeleton.style.width = cardWrapper.querySelector(".e-card").getBoundingClientRect().width + "px";
        skeletonWrapper.appendChild(skeleton);
        cardVirtualSkeletonWrapper.appendChild(skeletonWrapper);
      }
    };
    VirtualLayoutRender2.prototype.hideSkeleton = function(cardWrapper) {
      setTimeout(function() {
        var skeletonWrapper = cardWrapper.querySelectorAll(".e-card-virtual-skeleton-wrapper");
        for (var i = 0; i < skeletonWrapper.length; i++) {
          detach(skeletonWrapper[i]);
        }
      }, 50);
    };
    VirtualLayoutRender2.prototype.onColumnScroll = function(e) {
      var _this = this;
      var target = e.target;
      var currentScrolledHeight = target.scrollTop;
      var columnKey;
      if (target.offsetParent) {
        columnKey = target.offsetParent.getAttribute("data-key");
        this.parent.scrollPosition.column[columnKey] = { left: target.scrollLeft, top: target.scrollTop };
      }
      if (this.parent.enableVirtualization) {
        var cardWrapper_1 = target;
        var dataCount = 0;
        var columnData = this.getColumnCards()[columnKey];
        var currentColumnDataCount = this.parent.dataModule.isRemote() ? this.parent.columnDataCount[columnKey] : columnData.length;
        dataCount += currentColumnDataCount;
        var overallHeight = this.cardHeight * dataCount;
        var removeIndex = [];
        var addIndex = [];
        this.checkScrollDirection(columnKey, currentScrolledHeight);
        if (this.findScrollSpeed(target, columnKey) === "fast" && currentScrolledHeight > overallHeight) {
          this.hideSkeleton(cardWrapper_1.parentElement);
          return;
        }
        var maxBlock = this.scrollStatus[columnKey].maxBlock;
        var isLastBlockRendered = this.scrollStatus[columnKey].currentBlockIndex.indexOf(maxBlock) > -1;
        var isDuplicateScroll = e.timeStamp - this.scrollStatus[columnKey].previousTimeStamps < 300;
        if (isLastBlockRendered && !isNullOrUndefined(this.scrollStatus[columnKey].previousTimeStamps) && isDuplicateScroll) {
          this.hideSkeleton(cardWrapper_1.parentElement);
          return;
        }
        this.scrollStatus[columnKey].previousTimeStamps = e.timeStamp;
        var viewInfo_1 = this.getInfoFromView(this.scrollStatus[columnKey]);
        removeIndex = viewInfo_1.currentBlockIndex.filter(function(val) {
          return viewInfo_1.newBlockIndex.indexOf(val) === -1;
        });
        addIndex = viewInfo_1.newBlockIndex.filter(function(val) {
          return viewInfo_1.currentBlockIndex.indexOf(val) === -1;
        });
        var isScrolledToLast = currentScrolledHeight + target.clientHeight >= overallHeight;
        var transformY = isScrolledToLast ? overallHeight - cardWrapper_1.querySelector("." + CARD_VIRTUAL_WRAPPER_CLASS).childElementCount * this.cardHeight : this.getTranslateY(viewInfo_1);
        var cardVirtualElement_1 = cardWrapper_1.querySelector("." + CARD_VIRTUAL_WRAPPER_CLASS);
        if (removeIndex.length > 0) {
          var removeStartIndex = void 0;
          var removeEndIndex = void 0;
          if (removeIndex[0] === 1) {
            removeStartIndex = 0;
            removeEndIndex = removeIndex.length * this.scrollStatus[columnKey].singleIndexCardCount - 1;
          } else {
            removeStartIndex = (removeIndex[0] - 1) * this.scrollStatus[columnKey].singleIndexCardCount;
            removeEndIndex = removeStartIndex + removeIndex.length * this.scrollStatus[columnKey].singleIndexCardCount;
          }
          this.removeCardsOnScroll(cardVirtualElement_1, this.scrollStatus[columnKey].scrollDirection === "down" ? true : false, removeStartIndex, removeEndIndex);
        }
        if (addIndex.length > 0) {
          if (this.parent.dataModule.isRemote()) {
            var visibleStartIndex = (addIndex[0] - 1) * this.scrollStatus[columnKey].singleIndexCardCount;
            var resultData_1 = [];
            var dataManager = this.getData(this.parent.keyField, columnKey, this.scrollStatus[columnKey].singleIndexCardCount * addIndex.length, visibleStartIndex);
            dataManager.then(function(e2) {
              resultData_1 = _this.dataManagerSuccess(e2);
              _this.scrollCardInsert(columnKey, cardVirtualElement_1, target, currentScrolledHeight, cardWrapper_1, _this.scrollStatus[columnKey].scrollDirection === "down" ? 0 : resultData_1.length - 1, true, resultData_1, null);
            }).catch(function(e2) {
              return _this.dataManagerFailure(e2);
            });
          } else {
            var visibleStartIndex = this.scrollStatus[columnKey].scrollDirection === "down" ? (addIndex[0] - 1) * this.scrollStatus[columnKey].singleIndexCardCount : (addIndex[0] - 1) * this.scrollStatus[columnKey].singleIndexCardCount + this.scrollStatus[columnKey].singleIndexCardCount * addIndex.length - 1;
            var visibleLength = this.scrollStatus[columnKey].scrollDirection === "down" ? visibleStartIndex + this.scrollStatus[columnKey].singleIndexCardCount * addIndex.length : (addIndex[0] - 1) * this.scrollStatus[columnKey].singleIndexCardCount;
            this.scrollCardInsert(columnKey, cardVirtualElement_1, target, currentScrolledHeight, cardWrapper_1, visibleStartIndex, false, columnData, visibleLength);
          }
        }
        this.scrollStatus[columnKey].currentBlockIndex = this.scrollStatus[columnKey].newBlockIndex;
        this.setPadding(transformY, cardVirtualElement_1, currentColumnDataCount, isScrolledToLast, this.scrollStatus[columnKey].scrollDirection);
        viewInfo_1.currentBlockIndex = viewInfo_1.newBlockIndex;
        this.parent.renderTemplates();
        this.hideSkeleton(cardWrapper_1.parentElement);
      }
    };
    VirtualLayoutRender2.prototype.checkScrollDirection = function(columnKey, currentScrolledHeight) {
      this.scrollStatus[columnKey].previousScrollTop = this.scrollStatus[columnKey].currentScrollTop;
      this.scrollStatus[columnKey].currentScrollTop = currentScrolledHeight;
      if (currentScrolledHeight > this.scrollStatus[columnKey].previousScrollTop) {
        this.scrollStatus[columnKey].scrollDirection = "down";
      } else {
        this.scrollStatus[columnKey].scrollDirection = "up";
      }
    };
    VirtualLayoutRender2.prototype.findScrollSpeed = function(target, columnKey) {
      if (this.scrollStatus[columnKey].scrollDirection === "down" && target.scrollTop - this.scrollStatus[columnKey].previousScrollTop > target.clientHeight) {
        return "fast";
      } else if (this.scrollStatus[columnKey].scrollDirection === "up" && this.scrollStatus[columnKey].previousScrollTop - target.scrollTop > target.clientHeight) {
        return "fast";
      }
      return "slow";
    };
    VirtualLayoutRender2.prototype.removeCardsOnScroll = function(cardVirtualElement, isDown, removeStartIndex, removeEndIndex) {
      for (var j = removeStartIndex; j < removeEndIndex; j++) {
        var removableElem = isDown ? cardVirtualElement.firstChild : cardVirtualElement.lastChild;
        while (!isNullOrUndefined(removableElem) && (removableElem.classList.contains(DRAGGED_CARD_CLASS) || removableElem.classList.contains(DRAGGED_CLONE_CLASS) || removableElem.classList.contains(DROPPED_CLONE_CLASS) || removableElem.classList.contains(CLONED_CARD_CLASS))) {
          removableElem = isDown ? removableElem.nextSibling : removableElem.previousSibling;
        }
        if (!isNullOrUndefined(removableElem)) {
          detach(removableElem);
        }
      }
    };
    VirtualLayoutRender2.prototype.scrollCardInsert = function(columnKey, cardVirtualElement, target, currentScrolledHeight, cardWrapper, startNumber, isRemote, resultData, visibleLength) {
      var _this = this;
      var conditonsScrollDownCase = isRemote ? resultData.length : visibleLength;
      var conditonsScrollUpCase = isRemote ? 0 : visibleLength;
      if (resultData.length > 0) {
        var _loop_5 = function(j2) {
          if (!isNullOrUndefined(resultData[j2])) {
            var cardText = resultData[j2][this_2.parent.cardSettings.headerField];
            var cardIndex = this_2.parent.actionModule.selectionArray.indexOf(cardText);
            var cardElement_1 = this_2.renderCard(resultData[j2]);
            if (cardIndex !== -1) {
              cardElement_1.setAttribute("aria-selected", "true");
              addClass([cardElement_1], CARD_SELECTION_CLASS);
            }
            var args = { data: resultData[j2], element: cardElement_1, cancel: false };
            this_2.parent.trigger(cardRendered, args, function(cardArgs) {
              if (!cardArgs.cancel) {
                if (_this.scrollStatus[columnKey].scrollDirection === "down") {
                  cardVirtualElement.appendChild(cardElement_1);
                } else {
                  cardVirtualElement.insertBefore(cardElement_1, cardVirtualElement.firstChild);
                }
                _this.parent.dragAndDropModule.wireDragEvents(cardElement_1);
                addClass([cardElement_1], DROPPABLE_CLASS);
              }
            });
          }
        };
        var this_2 = this;
        for (var j = startNumber; this.scrollStatus[columnKey].scrollDirection === "down" ? j < conditonsScrollDownCase : j >= conditonsScrollUpCase; this.scrollStatus[columnKey].scrollDirection === "down" ? j++ : j--) {
          _loop_5(j);
        }
        target.scrollTop = currentScrolledHeight;
      } else {
        cardWrapper.appendChild(this.renderEmptyCard());
      }
    };
    VirtualLayoutRender2.prototype.ensureColumnNotEmpty = function(draggedColumnKey) {
      var singleIndexCardCount = this.scrollStatus[draggedColumnKey].singleIndexCardCount;
      var draggedColumnData = this.columnData[draggedColumnKey];
      var draggedTdColummElement = this.parent.element.querySelector('.e-content-row:not(.e-swimlane-row) [data-key="' + draggedColumnKey + '"]');
      var wrapperELement = draggedTdColummElement.querySelector("." + CARD_VIRTUAL_WRAPPER_CLASS);
      var cardsList = wrapperELement.querySelectorAll("." + CARD_CLASS);
      var lastCardDataId = cardsList[cardsList.length - 1].getAttribute("data-id");
      var firstCardDataId = cardsList[0].getAttribute("data-id");
      var lastCardIndex;
      var firstCardIndex;
      if (cardsList.length < singleIndexCardCount * 2) {
        for (var i = 0; i < draggedColumnData.length; i++) {
          if (lastCardDataId === draggedColumnData[i][this.parent.cardSettings.headerField].toString()) {
            lastCardIndex = i;
          }
          if (firstCardDataId === draggedColumnData[i][this.parent.cardSettings.headerField].toString()) {
            firstCardIndex = i;
          }
        }
        var cardCount = cardsList.length;
        for (var i = cardCount; i < singleIndexCardCount * 2; i++) {
          var isLast = lastCardIndex === draggedColumnData.length - 1 ? true : false;
          var nextCardIndex = lastCardIndex < draggedColumnData.length ? lastCardIndex + 1 : firstCardIndex - 1;
          if (nextCardIndex <= draggedColumnData.length) {
            var nextCardData = draggedColumnData[nextCardIndex];
            if (!isNullOrUndefined(nextCardData)) {
              var nextCard = this.renderCard(nextCardData);
              this.triggerCardRendering(nextCard, nextCardIndex, draggedColumnData, wrapperELement, isLast);
              if (isLast) {
                firstCardIndex = nextCardIndex;
              } else {
                lastCardIndex = nextCardIndex;
              }
            }
          }
        }
      }
    };
    VirtualLayoutRender2.prototype.triggerCardRendering = function(nextCard, nextCardIndex, draggedColumnData, wrapperELement, isLast) {
      var _this = this;
      var cardText = draggedColumnData[nextCardIndex][this.parent.cardSettings.headerField];
      var cardIndex = this.parent.actionModule.selectionArray.indexOf(cardText);
      if (cardIndex !== -1) {
        nextCard.setAttribute("aria-selected", "true");
        addClass([nextCard], CARD_SELECTION_CLASS);
      }
      var args = { data: draggedColumnData[nextCardIndex], element: nextCard, cancel: false };
      this.parent.trigger(cardRendered, args, function(cardArgs) {
        if (!cardArgs.cancel) {
          if (!isLast) {
            wrapperELement.appendChild(nextCard);
          } else {
            wrapperELement.insertBefore(nextCard, wrapperELement.querySelectorAll("." + CARD_CLASS)[0]);
          }
          _this.parent.dragAndDropModule.wireDragEvents(nextCard);
          addClass([nextCard], DROPPABLE_CLASS);
        }
      });
    };
    VirtualLayoutRender2.prototype.ensureBlocks = function(info) {
      var index = info.newBlockIndex[info.block];
      var maxPage = Math.ceil(info.totalColumnData / info.singleIndexCardCount);
      var max = Math.max;
      var indexes;
      if (info.scrollDirection === "down") {
        indexes = index >= maxPage ? [max(index, 1), --index, --index].reverse() : index + 1 >= maxPage ? [max(index - 1, 1), index, ++index] : [max(index, 1), ++index, ++index];
      } else {
        indexes = index === maxPage ? [max(index - 2, 1), max(index - 1, 1), index] : [max(index - 1, 1), index, index + 1];
      }
      return indexes;
    };
    VirtualLayoutRender2.prototype.getInfoFromView = function(scrollStatus) {
      var isBlockAdded = false;
      var tempBlocks = [];
      var infoType = scrollStatus;
      infoType.page = this.getPageFromTop(scrollStatus);
      infoType.newBlockIndex = tempBlocks = this.getBlockIndexes(infoType.page);
      var blocks = this.ensureBlocks(infoType);
      if (infoType.newBlockIndex.toString() !== blocks.toString()) {
        var newBlock = blocks[blocks.length - 1];
        if (infoType.newBlockIndex.indexOf(newBlock) === -1) {
          isBlockAdded = true;
        }
      }
      infoType.newBlockIndex = blocks;
      return infoType;
    };
    VirtualLayoutRender2.prototype.getBlockIndexes = function(page) {
      return [page + (page - 1), page * 2];
    };
    VirtualLayoutRender2.prototype.getPageFromTop = function(info) {
      var _this = this;
      var total = info.totalColumnData;
      var page = 0;
      this.offsetKeys = Object.keys(info.offsets);
      this.offsetKeys.some(function(offset) {
        var iOffset = Number(offset);
        var border = info.currentScrollTop <= _this.offsets[parseInt(offset, 10)] || iOffset === total && info.currentScrollTop > _this.offsets[parseInt(offset, 10)];
        if (border) {
          var maxPage = Math.ceil(total / info.singleIndexCardCount);
          if (_this.offsetKeys.length % 2 !== 0 && iOffset.toString() === _this.offsetKeys[_this.offsetKeys.length - 2] && info.currentScrollTop <= _this.offsets[_this.offsetKeys.length - 1]) {
            iOffset = iOffset + 1 > maxPage ? maxPage : iOffset + 1;
          }
          iOffset = iOffset > maxPage ? maxPage : iOffset;
          info.block = iOffset % 2 === 0 ? 1 : 0;
          page = Math.max(1, Math.min(_this.getPage(iOffset, maxPage), maxPage));
        }
        return border;
      });
      return page;
    };
    VirtualLayoutRender2.prototype.getPage = function(block, maxPage) {
      if (block + 1 > maxPage) {
        return block % 2 === 0 ? block / 2 : (block - 1) / 2;
      } else {
        return block % 2 === 0 ? block / 2 : (block + 1) / 2;
      }
    };
    VirtualLayoutRender2.prototype.onAdaptiveScroll = function(e) {
      if (this.parent.touchModule.tabHold && !this.parent.touchModule.mobilePopup) {
        e.preventDefault();
      }
    };
    VirtualLayoutRender2.prototype.isColumnVisible = function(column) {
      var _this = this;
      var isVisible2 = false;
      var isNumeric = typeof column.keyField === "number";
      if (isNumeric) {
        isVisible2 = this.parent.actionModule.hideColumnKeys.indexOf(column.keyField.toString()) === -1;
      } else {
        column.keyField.split(",").forEach(function(key) {
          isVisible2 = _this.parent.actionModule.hideColumnKeys.indexOf(key) === -1;
        });
      }
      return isVisible2;
    };
    VirtualLayoutRender2.prototype.renderLimits = function(column, target) {
      var limits = createElement("div", { className: LIMITS_CLASS });
      if (column.minCount) {
        limits.appendChild(createElement("div", {
          className: MIN_COUNT_CLASS,
          innerHTML: this.parent.localeObj.getConstant("min") + ": " + column.minCount.toString()
        }));
      }
      if (column.maxCount) {
        limits.appendChild(createElement("div", {
          className: MAX_COUNT_CLASS,
          innerHTML: this.parent.localeObj.getConstant("max") + ": " + column.maxCount.toString()
        }));
      }
      if (limits.childElementCount > 0) {
        if (target.querySelector("." + CARD_WRAPPER_CLASS)) {
          target.insertBefore(limits, target.firstElementChild);
        } else {
          target.appendChild(limits);
        }
      }
    };
    VirtualLayoutRender2.prototype.renderValidation = function() {
      var _this = this;
      this.parent.columns.forEach(function(column) {
        if (!column.minCount && !column.maxCount) {
          return;
        }
        var cardData = _this.columnData[column.keyField];
        var keySelector = '[data-key="' + column.keyField + '"]';
        var headerCell = _this.parent.element.querySelector("." + (HEADER_CELLS_CLASS + keySelector));
        var rowCells = [].slice.call(_this.parent.element.querySelectorAll("." + (CONTENT_CELLS_CLASS + keySelector)));
        _this.renderLimits(column, headerCell);
        var colorClass = _this.getValidationClass(column, cardData.length);
        if (colorClass) {
          addClass(rowCells.concat(headerCell), colorClass);
        }
      });
    };
    VirtualLayoutRender2.prototype.getValidationClass = function(column, count) {
      var colorClass;
      if (column.maxCount && count > column.maxCount) {
        colorClass = MAX_COLOR_CLASS;
      } else if (column.minCount && count < column.minCount) {
        colorClass = MIN_COLOR_CLASS;
      }
      return colorClass;
    };
    VirtualLayoutRender2.prototype.refreshValidation = function() {
      var validations = [].slice.call(this.parent.element.querySelectorAll("." + LIMITS_CLASS));
      validations.forEach(function(node) {
        remove(node);
      });
      var minClass = [].slice.call(this.parent.element.querySelectorAll("." + MIN_COLOR_CLASS));
      removeClass(minClass, MIN_COLOR_CLASS);
      var maxClass = [].slice.call(this.parent.element.querySelectorAll("." + MAX_COLOR_CLASS));
      removeClass(maxClass, MAX_COLOR_CLASS);
      this.renderValidation();
    };
    VirtualLayoutRender2.prototype.getColumnData = function(columnValue, dataSource) {
      var _this = this;
      if (dataSource === void 0) {
        dataSource = this.parent.kanbanData;
      }
      var cardData = [];
      var isNumeric = typeof columnValue === "number";
      if (isNumeric) {
        var keyData = dataSource.filter(function(cardObj) {
          return cardObj[_this.parent.keyField] === columnValue;
        });
        cardData = cardData.concat(keyData);
      } else {
        var columnKeys = columnValue.split(",");
        var _loop_6 = function(key2) {
          var keyData2 = dataSource.filter(function(cardObj) {
            return cardObj[_this.parent.keyField] === key2.trim();
          });
          cardData = cardData.concat(keyData2);
        };
        for (var _i = 0, columnKeys_1 = columnKeys; _i < columnKeys_1.length; _i++) {
          var key = columnKeys_1[_i];
          _loop_6(key);
        }
      }
      this.sortCategory(cardData);
      return cardData;
    };
    VirtualLayoutRender2.prototype.sortCategory = function(cardData) {
      var key = this.parent.cardSettings.headerField;
      var direction = this.parent.sortSettings.direction;
      switch (this.parent.sortSettings.sortBy) {
        case "DataSourceOrder":
          this.sortOrder(key, direction, cardData);
          break;
        case "Custom":
        case "Index":
          if (this.parent.sortSettings.field) {
            key = this.parent.sortSettings.field;
          }
          this.sortOrder(key, direction, cardData);
          break;
      }
      return cardData;
    };
    VirtualLayoutRender2.prototype.sortOrder = function(key, direction, cardData) {
      var isNumeric = true;
      if (this.parent.kanbanData.length > 0) {
        isNumeric = typeof this.parent.kanbanData[0][key] === "number";
      }
      if (!isNumeric && this.parent.sortSettings.sortBy === "Index") {
        return cardData;
      }
      var first;
      var second;
      cardData = cardData.sort(function(firstData, secondData) {
        if (!isNumeric) {
          first = firstData[key].toLowerCase();
          second = secondData[key].toLowerCase();
        } else {
          first = firstData[key];
          second = secondData[key];
        }
        return first > second ? 1 : second > first ? -1 : 0;
      });
      if (direction === "Descending") {
        cardData.reverse();
      }
      return cardData;
    };
    VirtualLayoutRender2.prototype.documentClick = function(args) {
      if (args.target.classList.contains(SWIMLANE_OVERLAY_CLASS) && this.parent.element.querySelector("." + SWIMLANE_RESOURCE_CLASS).classList.contains("e-popup-open")) {
        this.treePopup.hide();
        removeClass([this.popupOverlay], "e-enable");
      }
      if (closest(args.target, "." + ROOT_CLASS)) {
        return;
      }
      var cards = [].slice.call(this.parent.element.querySelectorAll("." + CARD_CLASS + "." + CARD_SELECTION_CLASS));
      removeClass(cards, CARD_SELECTION_CLASS);
      this.disableAttributeSelection(cards);
    };
    VirtualLayoutRender2.prototype.disableAttributeSelection = function(cards) {
      if (cards instanceof Element) {
        cards.setAttribute("aria-selected", "false");
      } else {
        cards.forEach(function(card) {
          card.setAttribute("aria-selected", "false");
        });
      }
    };
    VirtualLayoutRender2.prototype.getColumnCards = function(data) {
      var _this = this;
      var columnData = {};
      this.columnKeys = [];
      this.parent.columns.forEach(function(column) {
        var isNumeric = typeof column.keyField === "number";
        if (isNumeric) {
          _this.columnKeys = _this.columnKeys.concat(column.keyField.toString());
        } else {
          _this.columnKeys = _this.columnKeys.concat(column.keyField.split(",").map(function(e) {
            return e.trim();
          }));
        }
        var cardData = _this.getColumnData(column.keyField, data);
        columnData[column.keyField] = cardData;
      });
      return columnData;
    };
    VirtualLayoutRender2.prototype.refreshHeaders = function() {
      var header = this.parent.element.querySelector("." + HEADER_CLASS);
      [].slice.call(header.children).forEach(function(child) {
        return remove(child);
      });
      this.renderHeader(header);
    };
    VirtualLayoutRender2.prototype.refreshCards = function() {
      this.parent.resetTemplates(["cardTemplate"]);
      var cards = [].slice.call(this.parent.element.querySelectorAll("." + CARD_VIRTUAL_WRAPPER_CLASS));
      cards.forEach(function(card) {
        return remove(card);
      });
      this.renderCards();
      this.wireDragEvent();
      this.parent.renderTemplates();
    };
    VirtualLayoutRender2.prototype.refresh = function() {
      var _this = this;
      var isColumnTemplateRefreshed = false;
      this.parent.columns.forEach(function(column) {
        if (column.showItemCount) {
          if (column && column.template && !isColumnTemplateRefreshed) {
            _this.refreshHeaders();
            isColumnTemplateRefreshed = true;
          }
          var countSelector = "." + HEADER_CELLS_CLASS + '[data-key="' + column.keyField + '"] .' + CARD_ITEM_COUNT_CLASS;
          var itemCount = _this.parent.element.querySelector(countSelector);
          if (itemCount) {
            var columnDataLength = _this.parent.dataModule.isRemote() ? _this.parent.columnDataCount[column.keyField] : _this.columnData[column.keyField].length;
            var isNumeric = typeof column.keyField === "number";
            var cardLength = 0;
            if (isNumeric) {
              cardLength = [].slice.call(_this.parent.element.querySelectorAll("." + CARD_CLASS + "[data-key=" + column.keyField + "]")).length;
            } else {
              var keys = column.keyField.split(",");
              for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
                var key = keys_2[_i];
                var cards = [].slice.call(_this.parent.element.querySelectorAll("." + CARD_CLASS + "[data-key=" + key.trim() + "]"));
                cardLength = cards.length + cardLength;
              }
            }
            itemCount.innerHTML = "- " + columnDataLength + " " + _this.parent.localeObj.getConstant("items");
          }
        }
      });
      this.refreshValidation();
    };
    VirtualLayoutRender2.prototype.updateScrollPosition = function() {
      var _this = this;
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      if (content) {
        if (!Browser.isIE) {
          content.scrollTo(this.parent.scrollPosition.content.left, this.parent.scrollPosition.content.top);
        } else {
          content.scrollTop = this.parent.scrollPosition.content.top;
          content.scrollLeft = this.parent.scrollPosition.content.left;
        }
      }
      var cardWrapper = [].slice.call(this.parent.element.querySelectorAll("." + CARD_WRAPPER_CLASS));
      cardWrapper.forEach(function(wrapper) {
        if (wrapper.offsetParent) {
          var scrollData = _this.parent.scrollPosition.column[wrapper.offsetParent.getAttribute("data-key")];
          if (scrollData) {
            if (!Browser.isIE) {
              wrapper.scrollTo(scrollData.left, scrollData.top);
            } else {
              wrapper.scrollTop = scrollData.top;
              wrapper.scrollLeft = scrollData.left;
            }
          }
        }
      });
    };
    VirtualLayoutRender2.prototype.renderCardBasedOnIndex = function(data, index, isDropped, requestType) {
      var _this = this;
      var key = data[this.parent.keyField];
      var cardRow = this.parent.element.querySelector(".e-content-row:not(.e-swimlane-row)");
      if (this.parent.sortSettings.sortBy !== "Index") {
        var field_1 = this.parent.cardSettings.headerField;
        if (this.parent.sortSettings.sortBy === "Custom") {
          field_1 = this.parent.sortSettings.field;
        }
        if (isNullOrUndefined(this.parent.swimlaneSettings.keyField)) {
          index = this.getColumnData(key, this.parent.kanbanData).findIndex(function(colData) {
            return colData[field_1] === data[field_1];
          });
        } else {
          var swimlaneDatas = this.parent.getSwimlaneData(data[this.parent.swimlaneSettings.keyField]);
          index = this.getColumnData(key, swimlaneDatas).findIndex(function(colData) {
            return colData[field_1] === data[field_1];
          });
        }
      } else if (this.parent.sortSettings.sortBy === "Index" && this.parent.sortSettings.field && this.parent.sortSettings.direction === "Ascending") {
        index = data[this.parent.sortSettings.field] - 1;
      }
      if (cardRow) {
        var td = [].slice.call(cardRow.children).filter(function(e) {
          return e.getAttribute("data-key").replace(/\s/g, "").split(",").indexOf(key.toString().replace(/\s/g, "")) !== -1;
        })[0];
        var cardWrapper_2 = td.querySelector("." + CARD_VIRTUAL_WRAPPER_CLASS);
        var emptyCard = cardWrapper_2.querySelector("." + EMPTY_CARD_CLASS);
        if (emptyCard) {
          remove(emptyCard);
        }
        var cardElement_2 = this.renderCard(data);
        if (this.parent.allowDragAndDrop && td.classList.contains(DRAG_CLASS)) {
          this.parent.dragAndDropModule.wireDragEvents(cardElement_2);
          addClass([cardElement_2], DROPPABLE_CLASS);
        }
        var args = { data, element: cardElement_2, cancel: false };
        this.parent.trigger(cardRendered, args, function(cardArgs) {
          var addCardCondition = isDropped ? true : cardWrapper_2.childNodes.length < _this.scrollStatus[key].singleIndexCardCount;
          if (!cardArgs.cancel && addCardCondition || !isNullOrUndefined(requestType)) {
            if (isNullOrUndefined(index) || cardWrapper_2.children.length === 0) {
              cardWrapper_2.appendChild(cardElement_2);
            } else {
              cardWrapper_2.insertBefore(cardElement_2, cardWrapper_2.childNodes[index]);
            }
          }
        });
      }
    };
    VirtualLayoutRender2.prototype.removeCard = function(data) {
      var cardKey = data[this.parent.cardSettings.headerField];
      var cardElement = this.parent.element.querySelector("." + CARD_CLASS + '[data-id="' + cardKey + '"]');
      this.isSelectedCard = cardElement.classList.contains(CARD_SELECTION_CLASS) ? true : false;
      var cardContainer = cardElement.parentElement;
      if (cardElement) {
        remove(cardElement);
      }
      if (cardContainer.querySelectorAll("." + CARD_CLASS + ":not(." + CLONED_CARD_CLASS + ")").length === 0) {
        cardContainer.appendChild(this.renderEmptyCard());
      }
    };
    VirtualLayoutRender2.prototype.wireEvents = function() {
      var _this = this;
      EventHandler.add(this.parent.element, "click", this.parent.actionModule.clickHandler, this.parent.actionModule);
      EventHandler.add(this.parent.element, "dblclick", this.parent.actionModule.doubleClickHandler, this.parent.actionModule);
      EventHandler.add(document, Browser.touchStartEvent, this.documentClick, this);
      window.addEventListener("resize", this.windowResize.bind(this));
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      EventHandler.add(content, "scroll", this.onContentScroll, this);
      var cardWrapper = [].slice.call(this.parent.element.querySelectorAll("." + CARD_WRAPPER_CLASS));
      cardWrapper.forEach(function(wrapper) {
        if (_this.parent.isInitialRender && wrapper.offsetParent) {
          _this.parent.scrollPosition.column[wrapper.offsetParent.getAttribute("data-key")] = { left: 0, top: 0 };
        }
        EventHandler.add(wrapper, "scroll", _this.onColScrollShowSkeleton, _this);
        EventHandler.add(wrapper, "scroll", debounce(_this.onColumnScroll, 200), _this);
      });
      if (this.parent.isAdaptive) {
        this.parent.touchModule.wireTouchEvents();
        content.scrollLeft = this.scrollLeft;
      }
      this.wireDragEvent();
    };
    VirtualLayoutRender2.prototype.unWireEvents = function() {
      var _this = this;
      EventHandler.remove(this.parent.element, "click", this.parent.actionModule.clickHandler);
      EventHandler.remove(this.parent.element, "dblclick", this.parent.actionModule.doubleClickHandler);
      EventHandler.remove(document, Browser.touchStartEvent, this.documentClick);
      window.removeEventListener("resize", this.windowResize.bind(this));
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      if (content) {
        EventHandler.remove(content, "scroll", this.onContentScroll);
        EventHandler.remove(content, "scroll", this.onColScrollShowSkeleton);
        if (this.parent.allowDragAndDrop) {
          this.unWireDragEvent();
        }
      }
      var cardWrapper = [].slice.call(this.parent.element.querySelectorAll("." + CARD_WRAPPER_CLASS));
      if (cardWrapper.length > 0) {
        cardWrapper.forEach(function(wrapper) {
          EventHandler.remove(wrapper, "scroll", debounce(_this.onColumnScroll, 200));
        });
      }
      if (this.parent.isAdaptive) {
        this.parent.touchModule.unWireTouchEvents();
      }
    };
    VirtualLayoutRender2.prototype.wireDragEvent = function() {
      var _this = this;
      if (this.parent.allowDragAndDrop) {
        var cards = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_CELLS_CLASS + "." + DRAG_CLASS + " ." + CARD_CLASS));
        addClass(cards, DROPPABLE_CLASS);
        if (cards.length > 0) {
          cards.forEach(function(card) {
            return _this.parent.dragAndDropModule.wireDragEvents(card);
          });
        }
      }
    };
    VirtualLayoutRender2.prototype.unWireDragEvent = function() {
      var _this = this;
      var cards = [].slice.call(this.parent.element.querySelectorAll("." + CONTENT_CELLS_CLASS + "." + DRAG_CLASS + " ." + CARD_CLASS));
      removeClass(cards, DROPPABLE_CLASS);
      if (cards.length > 0) {
        cards.forEach(function(card) {
          return _this.parent.dragAndDropModule.unWireDragEvents(card);
        });
      }
    };
    VirtualLayoutRender2.prototype.destroy = function() {
      this.parent.resetTemplates();
      this.parent.off(dataReady, this.initRender);
      this.parent.off(contentReady, this.scrollUiUpdate);
      this.unWireEvents();
      var header = this.parent.element.querySelector("." + HEADER_CLASS);
      if (header) {
        remove(header);
      }
      var content = this.parent.element.querySelector("." + CONTENT_CLASS);
      if (content) {
        remove(content);
      }
      if (this.treeViewObj) {
        this.treeViewObj.destroy();
        this.treeViewObj = null;
      }
      if (this.treePopup) {
        this.treePopup.destroy();
        this.treePopup = null;
      }
      var swimlaneToolBarEle = this.parent.element.querySelector("." + SWIMLANE_HEADER_CLASS);
      if (swimlaneToolBarEle) {
        remove(swimlaneToolBarEle);
      }
      var swimlaneContent = this.parent.element.querySelector("." + SWIMLANE_CONTENT_CLASS);
      if (swimlaneContent) {
        remove(swimlaneContent);
      }
    };
    return VirtualLayoutRender2;
  }(MobileLayout)
);

// node_modules/@syncfusion/ej2-kanban/src/kanban/base/kanban.js
var __extends43 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate38 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Kanban = (
  /** @class */
  function(_super) {
    __extends43(Kanban2, _super);
    function Kanban2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.columnDataCount = {};
      _this.needsID = true;
      return _this;
    }
    Kanban2.prototype.preRender = function() {
      this.isAdaptive = Browser.isDevice;
      this.kanbanData = [];
      if (!this.enablePersistence || !this.swimlaneToggleArray) {
        this.swimlaneToggleArray = [];
      }
      this.activeCardData = { data: null, element: null };
      var defaultLocale = {
        items: "items",
        min: "Min",
        max: "Max",
        cardsSelected: "Cards Selected",
        addTitle: "Add New Card",
        editTitle: "Edit Card Details",
        deleteTitle: "Delete Card",
        deleteContent: "Are you sure you want to delete this card?",
        save: "Save",
        delete: "Delete",
        cancel: "Cancel",
        yes: "Yes",
        no: "No",
        close: "Close",
        noCard: "No cards to display",
        unassigned: "Unassigned"
      };
      this.localeObj = new L10n(this.getModuleName(), defaultLocale, this.locale);
      this.scrollPosition = { content: { left: 0, top: 0 }, column: {} };
      this.isInitialRender = true;
    };
    Kanban2.prototype.requiredModules = function() {
      var modules = [];
      return modules;
    };
    Kanban2.prototype.getPersistData = function() {
      if (this.dataSource.length > 0) {
        return this.addOnPersist(["columns", "dataSource", "swimlaneToggleArray"]);
      } else {
        return this.addOnPersist(["columns", "kanbanData", "swimlaneToggleArray"]);
      }
    };
    Kanban2.prototype.getModuleName = function() {
      return "kanban";
    };
    Kanban2.prototype.render = function() {
      var addClasses = [ROOT_CLASS];
      var removeClasses = [];
      if (this.enableRtl) {
        addClasses.push(RTL_CLASS);
      } else {
        removeClasses.push(RTL_CLASS);
      }
      if (this.isAdaptive) {
        addClasses.push(DEVICE_CLASS);
      } else {
        removeClasses.push(DEVICE_CLASS);
      }
      if (this.cssClass) {
        addClasses.push(this.cssClass);
      }
      this.element.setAttribute("role", "main");
      classList(this.element, addClasses, removeClasses);
      this.element.style.width = formatUnit(this.width);
      this.element.style.height = formatUnit(this.height);
      createSpinner({ target: this.element });
      this.showSpinner();
      this.initializeModules();
    };
    Kanban2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass);
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass);
            }
            break;
          case "enableRtl":
          case "locale":
            this.refresh();
            break;
          case "width":
            this.element.style.width = formatUnit(newProp.width);
            this.element.querySelector("." + HEADER_CLASS).firstElementChild.style.width = "auto";
            this.notify(contentReady, {});
            break;
          case "height":
            this.element.style.height = formatUnit(newProp.height);
            this.element.querySelector("." + CONTENT_CLASS).style.height = "auto";
            this.notify(contentReady, {});
            break;
          case "dataSource":
          case "query":
            if (this.dataModule) {
              this.dataModule.setState({ isDataChanged: false });
            }
            this.dataModule = new Data(this);
            break;
          case "columns":
          case "constraintType":
            this.notify(dataReady, { processedData: this.kanbanData });
            break;
          case "swimlaneSettings":
            this.onSwimlaneSettingsPropertyChanged(newProp.swimlaneSettings, oldProp.swimlaneSettings);
            break;
          case "cardSettings":
            this.onCardSettingsPropertyChanged(newProp.cardSettings, oldProp.cardSettings);
            break;
          case "allowDragAndDrop":
            if (newProp.allowDragAndDrop) {
              if (this.enableVirtualization) {
                this.virtualLayoutModule.wireDragEvent();
              } else {
                this.layoutModule.wireDragEvent();
              }
            } else {
              if (this.enableVirtualization) {
                this.virtualLayoutModule.unWireDragEvent();
              } else {
                this.layoutModule.unWireDragEvent();
              }
            }
            break;
          case "enableTooltip":
            if (this.tooltipModule) {
              this.tooltipModule.destroy();
              this.tooltipModule = null;
            }
            if (newProp.enableTooltip) {
              this.tooltipModule = new KanbanTooltip(this);
              if (this.enableVirtualization) {
                this.virtualLayoutModule.refreshCards();
              } else {
                this.layoutModule.refreshCards();
              }
            }
            break;
          case "dialogSettings":
            if (newProp.dialogSettings) {
              this.dialogModule = new KanbanDialog(this);
            }
            break;
          case "allowKeyboard":
            if (this.keyboardModule) {
              this.keyboardModule.destroy();
              this.keyboardModule = null;
            }
            if (newProp.allowKeyboard) {
              this.keyboardModule = new Keyboard(this);
            }
            break;
          case "stackedHeaders":
            if (this.enableVirtualization) {
              this.virtualLayoutModule.refreshHeaders();
            } else {
              this.layoutModule.refreshHeaders();
            }
            break;
          case "sortSettings":
            this.notify(dataReady, { processedData: this.kanbanData });
            break;
          default:
            break;
        }
      }
    };
    Kanban2.prototype.onSwimlaneSettingsPropertyChanged = function(newProp, _oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "keyField":
          case "textField":
          case "showEmptyRow":
          case "showItemCount":
          case "template":
          case "sortDirection":
            this.notify(dataReady, { processedData: this.kanbanData });
            break;
          case "enableFrozenRows":
            if (this.layoutModule.frozenSwimlaneRow && !this.swimlaneSettings.enableFrozenRows) {
              this.layoutModule.removeFrozenRows();
            }
            break;
        }
      }
    };
    Kanban2.prototype.onCardSettingsPropertyChanged = function(newProp, _oldProp) {
      var cards = [];
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "showHeader":
          case "headerField":
          case "contentField":
          case "template":
          case "tagsField":
          case "grabberField":
          case "footerCssField":
            if (this.enableVirtualization) {
              this.virtualLayoutModule.refreshCards();
            } else {
              this.layoutModule.refreshCards();
            }
            break;
          case "selectionType":
            cards = this.getSelectedCards();
            if (cards.length > 0) {
              removeClass(cards, CARD_SELECTION_CLASS);
              if (this.enableVirtualization) {
                this.virtualLayoutModule.disableAttributeSelection(cards);
              } else {
                this.layoutModule.disableAttributeSelection(cards);
              }
            }
            break;
        }
      }
    };
    Kanban2.prototype.initializeModules = function() {
      this.dataModule = new Data(this);
      if (this.enableVirtualization) {
        this.virtualLayoutModule = new VirtualLayoutRender(this);
      } else {
        this.layoutModule = new LayoutRender(this);
      }
      if (this.allowKeyboard) {
        this.keyboardModule = new Keyboard(this);
      }
      this.actionModule = new Action(this);
      this.crudModule = new Crud(this);
      this.dragAndDropModule = new DragAndDrop(this);
      this.dialogModule = new KanbanDialog(this);
      if (this.enableTooltip) {
        this.tooltipModule = new KanbanTooltip(this);
      }
      if (Browser.isDevice || Browser.isTouch) {
        this.touchModule = new KanbanTouch(this);
      }
    };
    Kanban2.prototype.renderTemplates = function() {
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Kanban2.prototype.resetTemplates = function(templates) {
      if (this.isReact) {
        this.clearTemplate(templates);
      }
    };
    Kanban2.prototype.destroyModules = function() {
      if (this.layoutModule) {
        this.layoutModule.destroy();
        this.layoutModule = null;
      }
      if (this.keyboardModule) {
        this.keyboardModule.destroy();
        this.keyboardModule = null;
      }
      if (this.touchModule) {
        this.touchModule.destroy();
        this.touchModule = null;
      }
      if (this.tooltipModule) {
        this.tooltipModule.destroy();
        this.tooltipModule = null;
      }
      if (this.virtualLayoutModule) {
        this.virtualLayoutModule.destroy();
        this.virtualLayoutModule = null;
      }
      this.dialogModule = null;
      this.actionModule = null;
      this.crudModule = null;
      this.dataModule = null;
      this.dragAndDropModule = null;
    };
    Kanban2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template === "function") {
            return compile(template);
          } else if (document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          return compile(template);
        }
      }
      return void 0;
    };
    Kanban2.prototype.getCardDetails = function(target) {
      var _this = this;
      var isNumeric = typeof this.kanbanData[0][this.cardSettings.headerField] === "number";
      var targetId = isNumeric ? parseInt(target.getAttribute("data-id"), 10) : target.getAttribute("data-id");
      var cardObj = this.kanbanData.filter(function(data) {
        return data[_this.cardSettings.headerField] === targetId;
      })[0];
      return cardObj;
    };
    Kanban2.prototype.getColumnData = function(columnKey, dataSource) {
      if (this.enableVirtualization) {
        return this.virtualLayoutModule.getColumnCards(dataSource)["" + columnKey] || [];
      }
      return this.layoutModule.getColumnCards(dataSource)["" + columnKey] || [];
    };
    Kanban2.prototype.getSwimlaneData = function(keyField) {
      return this.layoutModule.getSwimlaneCards()["" + keyField] || [];
    };
    Kanban2.prototype.getSelectedCards = function() {
      return [].slice.call(this.element.querySelectorAll("." + CARD_CLASS + "." + CARD_SELECTION_CLASS));
    };
    Kanban2.prototype.showSpinner = function() {
      showSpinner(this.element);
    };
    Kanban2.prototype.hideSpinner = function() {
      hideSpinner(this.element);
    };
    Kanban2.prototype.openDialog = function(action, data) {
      this.dialogModule.openDialog(action, data);
    };
    Kanban2.prototype.closeDialog = function() {
      this.dialogModule.closeDialog();
    };
    Kanban2.prototype.addCard = function(cardData, index) {
      this.crudModule.addCard(cardData, index);
    };
    Kanban2.prototype.updateCard = function(cardData, index) {
      this.crudModule.updateCard(cardData, index);
    };
    Kanban2.prototype.deleteCard = function(cardData) {
      this.crudModule.deleteCard(cardData);
    };
    Kanban2.prototype.addColumn = function(columnOptions, index) {
      this.actionModule.addColumn(columnOptions, index);
    };
    Kanban2.prototype.deleteColumn = function(index) {
      this.actionModule.deleteColumn(index);
    };
    Kanban2.prototype.showColumn = function(key) {
      this.actionModule.showColumn(key);
    };
    Kanban2.prototype.hideColumn = function(key) {
      this.actionModule.hideColumn(key);
    };
    Kanban2.prototype.refreshUI = function(args, index) {
      index = index ? index : 0;
      this.dataModule.refreshUI(args, index);
    };
    Kanban2.prototype.refreshHeader = function() {
      this.resetTemplates(["columnTemplate"]);
      if (this.layoutModule) {
        this.layoutModule.refreshHeaders();
      }
      this.renderTemplates();
    };
    Kanban2.prototype.destroy = function() {
      this.destroyModules();
      [].slice.call(this.element.childNodes).forEach(function(node) {
        detach(node);
      });
      var removeClasses = [ROOT_CLASS];
      if (this.cssClass) {
        removeClasses = removeClasses.concat(this.cssClass.split(" "));
      }
      removeClass([this.element], removeClasses);
      _super.prototype.destroy.call(this);
    };
    __decorate38([
      Property()
    ], Kanban2.prototype, "cssClass", void 0);
    __decorate38([
      Property("auto")
    ], Kanban2.prototype, "width", void 0);
    __decorate38([
      Property("auto")
    ], Kanban2.prototype, "height", void 0);
    __decorate38([
      Property("auto")
    ], Kanban2.prototype, "cardHeight", void 0);
    __decorate38([
      Property()
    ], Kanban2.prototype, "enableVirtualization", void 0);
    __decorate38([
      Property([])
    ], Kanban2.prototype, "dataSource", void 0);
    __decorate38([
      Property()
    ], Kanban2.prototype, "query", void 0);
    __decorate38([
      Property()
    ], Kanban2.prototype, "keyField", void 0);
    __decorate38([
      Property("Column")
    ], Kanban2.prototype, "constraintType", void 0);
    __decorate38([
      Property([])
    ], Kanban2.prototype, "externalDropId", void 0);
    __decorate38([
      Collection([], Columns)
    ], Kanban2.prototype, "columns", void 0);
    __decorate38([
      Property(true)
    ], Kanban2.prototype, "allowKeyboard", void 0);
    __decorate38([
      Property(true)
    ], Kanban2.prototype, "enableHtmlSanitizer", void 0);
    __decorate38([
      Collection([], StackedHeaders)
    ], Kanban2.prototype, "stackedHeaders", void 0);
    __decorate38([
      Complex({}, SwimlaneSettings)
    ], Kanban2.prototype, "swimlaneSettings", void 0);
    __decorate38([
      Complex({}, CardSettings)
    ], Kanban2.prototype, "cardSettings", void 0);
    __decorate38([
      Complex({}, SortSettings)
    ], Kanban2.prototype, "sortSettings", void 0);
    __decorate38([
      Complex({}, DialogSettings)
    ], Kanban2.prototype, "dialogSettings", void 0);
    __decorate38([
      Property(true)
    ], Kanban2.prototype, "allowDragAndDrop", void 0);
    __decorate38([
      Property(false)
    ], Kanban2.prototype, "enableTooltip", void 0);
    __decorate38([
      Property(false)
    ], Kanban2.prototype, "showEmptyColumn", void 0);
    __decorate38([
      Property(false)
    ], Kanban2.prototype, "enablePersistence", void 0);
    __decorate38([
      Property()
    ], Kanban2.prototype, "tooltipTemplate", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "actionBegin", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "actionComplete", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "actionFailure", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "created", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "dataBinding", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "dataBound", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "cardClick", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "cardDoubleClick", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "queryCellInfo", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "cardRendered", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "dragStart", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "drag", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "dragStop", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "dialogOpen", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "dialogClose", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "dataStateChange", void 0);
    __decorate38([
      Event()
    ], Kanban2.prototype, "dataSourceChanged", void 0);
    Kanban2 = __decorate38([
      NotifyPropertyChanges
    ], Kanban2);
    return Kanban2;
  }(Component)
);

// node_modules/@syncfusion/ej2-react-kanban/src/kanban/kanban.component.js
var __extends44 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var KanbanComponent = (
  /** @class */
  function(_super) {
    __extends44(KanbanComponent2, _super);
    function KanbanComponent2(props) {
      var _this = _super.call(this, props) || this;
      _this.initRenderCalled = false;
      _this.checkInjectedModules = true;
      _this.directivekeys = { "columns": "column", "stackedHeaders": "stackedHeader" };
      _this.statelessTemplateProps = null;
      _this.templateProps = null;
      _this.immediateRender = false;
      _this.portals = [];
      return _this;
    }
    KanbanComponent2.prototype.render = function() {
      if ((this.element && !this.initRenderCalled || this.refreshing) && !this.isReactForeceUpdate) {
        _super.prototype.render.call(this);
        this.initRenderCalled = true;
      } else {
        return React.createElement("div", this.getDefaultAttributes(), [].concat(this.props.children, this.portals));
      }
    };
    return KanbanComponent2;
  }(Kanban)
);
applyMixins(KanbanComponent, [ComponentBase, React.Component]);
export {
  ColumnDirective,
  ColumnsDirective,
  Inject,
  Kanban,
  KanbanComponent,
  StackedHeaderDirective,
  StackedHeadersDirective,
  actionBegin,
  actionComplete,
  actionFailure,
  bottomSpace,
  cardClick,
  cardDoubleClick,
  cardRendered,
  cardSpace,
  contentReady,
  dataBinding,
  dataBound,
  dataReady,
  dataSourceChanged,
  dataStateChange,
  dialogClose,
  dialogOpen,
  documentClick,
  drag,
  dragStart,
  dragStop,
  queryCellInfo,
  toggleWidth
};
//# sourceMappingURL=@syncfusion_ej2-react-kanban.js.map
