import {
  ContextMenu as ContextMenu2,
  Grid,
  Resize,
  Sort,
  VirtualScroll
} from "./chunk-G363M2PP.js";
import "./chunk-HFNKP7FH.js";
import {
  ContextMenu,
  DataManager,
  Query,
  Toolbar,
  TreeView
} from "./chunk-TLGL2WVJ.js";
import "./chunk-MNZ573ZI.js";
import {
  Dialog,
  Popup,
  Tooltip,
  createSpinner,
  getScrollableParent,
  hideSpinner,
  isCollide,
  showSpinner
} from "./chunk-UKG7RZWV.js";
import {
  Button,
  CheckBox,
  RadioButton,
  createCheckBox
} from "./chunk-K7IDEQWJ.js";
import {
  ListBase
} from "./chunk-ESDGPFSH.js";
import {
  ColorPicker,
  DropDownButton,
  Input,
  NumericTextBox,
  TextBox,
  Uploader
} from "./chunk-SCEQET5H.js";
import {
  ComponentBase,
  Inject,
  applyMixins
} from "./chunk-FRFQHC7U.js";
import "./chunk-QQXVNJFE.js";
import {
  require_react
} from "./chunk-ZOIWZPCO.js";
import {
  Ajax,
  Base,
  Browser,
  ChildProperty,
  Collection,
  Complex,
  Component,
  Draggable,
  Event,
  EventHandler,
  Internationalization,
  KeyboardEvents,
  L10n,
  NotifyPropertyChanges,
  Observer,
  Property,
  SanitizeHtmlHelper,
  Touch,
  addClass,
  append,
  attributes,
  closest,
  compile,
  createElement,
  debounce,
  detach,
  extend,
  formatUnit,
  getEnumValue,
  getInstance,
  getUniqueID,
  getValue,
  initializeCSPTemplate,
  isNullOrUndefined,
  isUndefined,
  isVisible,
  matches,
  prepend,
  print,
  remove,
  removeClass,
  select,
  selectAll,
  setStyleAttribute,
  setValue
} from "./chunk-I2N4YRAY.js";
import {
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/@syncfusion/ej2-react-richtexteditor/src/rich-text-editor/richtexteditor.component.js
var React = __toESM(require_react());

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/base/constant.js
var created = "create";
var destroyed = "destroy";
var tableclass = "tableclass";
var load = "load";
var initialLoad = "initial-load";
var contentChanged = "content-changed";
var initialEnd = "initial-end";
var iframeMouseDown = "iframe-click";
var destroy = "destroy";
var toolbarClick = "toolbarClick";
var toolbarRefresh = "toolbar-refresh";
var refreshBegin = "refresh-begin";
var toolbarUpdated = "toolbar-updated";
var bindOnEnd = "bind-on-end";
var renderColorPicker = "render-color-picker";
var htmlToolbarClick = "html-toolbar-click";
var markdownToolbarClick = "markdown-toolbar-click";
var destroyColorPicker = "destroy-color-picker";
var modelChanged = "model-changed";
var tableModulekeyUp = "tableModulekeyUp";
var keyUp = "keyUp";
var keyDown = "keyDown";
var mouseUp = "mouseUp";
var toolbarCreated = "toolbarCreated";
var toolbarRenderComplete = "toolbarRenderComplete";
var enableFullScreen = "enableFullScreen";
var disableFullScreen = "disableFullScreen";
var dropDownSelect = "dropDownSelect";
var beforeDropDownItemRender = "beforeDropDownItemRender";
var execCommandCallBack = "execCommandCallBack";
var imageToolbarAction = "image-toolbar-action";
var audioToolbarAction = "audio-toolbar-action";
var videoToolbarAction = "video-toolbar-action";
var linkToolbarAction = "link-toolbar-action";
var windowResize = "resize";
var resizeStart = "resizeStart";
var onResize = "resizing";
var resizeStop = "resizeStop";
var undo = "undo";
var redo = "redo";
var insertLink = "insertLink";
var unLink = "unLink";
var editLink = "editLink";
var openLink = "openLink";
var actionBegin = "actionBegin";
var actionComplete = "actionComplete";
var updatedToolbarStatus = "updatedToolbarStatus";
var actionSuccess = "actionSuccess";
var updateToolbarItem = "updateToolbarItem";
var insertImage = "insertImage";
var insertAudio = "insertAudio";
var insertVideo = "insertVideo";
var insertCompleted = "insertCompleted";
var imageLeft = "justifyLeft";
var imageRight = "justifyRight";
var imageCenter = "justifyCenter";
var imageBreak = "break";
var imageInline = "inline";
var imageLink = "insertImgLink";
var imageAlt = "imgAltText";
var imageDelete = "delete";
var audioDelete = "delete";
var videoDelete = "delete";
var imageCaption = "caption";
var imageSize = "imageSize";
var videoSize = "videoSize";
var sourceCode = "sourceCode";
var updateSource = "updateSource";
var toolbarOpen = "toolbarOpen";
var beforeDropDownOpen = "beforeDropDownOpen";
var selectionSave = "selection-save";
var selectionRestore = "selection-restore";
var expandPopupClick = "expandPopupClick";
var count = "count";
var contentFocus = "contentFocus";
var contentBlur = "contentBlur";
var mouseDown = "mouseDown";
var sourceCodeMouseDown = "sourceCodeMouseDown";
var editAreaClick = "editAreaClick";
var scroll = "scroll";
var contentscroll = "contentscroll";
var colorPickerChanged = "colorPickerChanged";
var tableColorPickerChanged = "tableColorPickerChanged";
var focusChange = "focusChange";
var selectAll2 = "selectAll";
var selectRange = "selectRange";
var getSelectedHtml = "getSelectedHtml";
var renderInlineToolbar = "renderInlineToolbar";
var paste = "paste-content";
var imgModule = "imageModule";
var rtlMode = "rtl-mode";
var createTable = "createTable";
var docClick = "docClick";
var tableToolbarAction = "table-toolbar-action";
var checkUndo = "checkUndoStack";
var readOnlyMode = "readOnlyMode";
var moduleDestroy = "moduleDestroy";
var pasteClean = "pasteClean";
var enterHandler = "enterHandler";
var beforeDialogOpen = "beforeDialogOpen";
var clearDialogObj = "clearDialogObj";
var dialogOpen = "dialogOpen";
var beforeDialogClose = "beforeDialogClose";
var dialogClose = "dialogClose";
var beforeQuickToolbarOpen = "beforeQuickToolbarOpen";
var quickToolbarOpen = "quickToolbarOpen";
var quickToolbarClose = "quickToolbarClose";
var popupHide = "popupHide";
var imageSelected = "imageSelected";
var imageUploading = "imageUploading";
var imageUploadSuccess = "imageUploadSuccess";
var imageUploadFailed = "imageUploadFailed";
var imageRemoving = "imageRemoving";
var fileSelected = "fileSelected";
var fileUploading = "fileUploading";
var fileUploadSuccess = "fileUploadSuccess";
var fileUploadFailed = "fileUploadFailed";
var fileRemoving = "fileRemoving";
var afterImageDelete = "afterImageDelete";
var afterMediaDelete = "afterMediaDelete";
var drop = "drop";
var xhtmlValidation = "xhtmlValidation";
var beforeImageUpload = "beforeImageUpload";
var beforeFileUpload = "beforeFileUpload";
var resizeInitialized = "resizeInitialized";
var renderFileManager = "renderFileManager";
var beforeImageDrop = "beforeImageDrop";
var dynamicModule = "dynamicModule";
var beforePasteCleanup = "beforePasteCleanup";
var afterPasteCleanup = "afterPasteCleanup";
var updateTbItemsStatus = "updateTbItemsStatus";
var showLinkDialog = "showLinkDialog";
var closeLinkDialog = "closeLinkDialog";
var showImageDialog = "showImageDialog";
var showAudioDialog = "showAudioDialog";
var showVideoDialog = "showVideoDialog";
var closeImageDialog = "closeImageDialog";
var closeAudioDialog = "closeAudioDialog";
var closeVideoDialog = "closeVideoDialog";
var showTableDialog = "showTableDialog";
var closeTableDialog = "closeTableDialog";
var bindCssClass = "closeTableDialog";
var formatPainterClick = "formatPainterClick";
var formatPainterDoubleClick = "formatPainterDoubleClick";
var emojiPicker = "emojiPicker";
var maximizeMinimizeClick = "maximizeMinimizeClick";
var blockEmptyNodes = "address:empty, article:empty, aside:empty, blockquote:empty,\n details:empty, dd:empty, div:empty, dl:empty, dt:empty, fieldset:empty, footer:empty,form:empty, h1:empty,\n h2:empty, h3:empty, h4:empty, h5:empty, h6:empty, header:empty, hgroup:empty, li:empty, main:empty, nav:empty,\n noscript:empty, output:empty, p:empty, pre:empty, section:empty, td:empty, th:empty";
var inlineEmptyNodes = "a:empty, abbr:empty, acronym:empty, b:empty, bdi:empty, bdo:empty, big:empty, button:empty,\ncanvas:empty, cite:empty, code:empty, data:empty, datalist:empty, del:empty, dfn:empty, em:empty, font:empty, i:empty, iframe:empty,\nins:empty, kbd:empty, label:empty, map:empty, mark:empty, meter:empty, noscript:empty, object:empty, output:empty, picture:empty, progress:empty,\nq:empty, ruby:empty, s:empty, samp:empty, script:empty, select:empty, slot:empty, small:empty, span:empty, strong:empty, strike:empty, sub:empty, sup:empty, svg:empty,\ntemplate:empty, textarea:empty, time:empty, u:empty, tt:empty, var:empty, wbr:empty";

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/base/classes.js
var CLS_RTE = "e-richtexteditor";
var CLS_RTL = "e-rtl";
var CLS_CONTENT = "e-content";
var CLS_DISABLED = "e-disabled";
var CLS_SCRIPT_SHEET = "rte-iframe-script-sheet";
var CLS_STYLE_SHEET = "rte-iframe-style-sheet";
var CLS_TOOLBAR = "e-rte-toolbar";
var CLS_TB_FIXED = "e-rte-tb-fixed";
var CLS_TB_FLOAT = "e-rte-tb-float";
var CLS_TB_ABS_FLOAT = "e-rte-tb-abs-float";
var CLS_INLINE = "e-rte-inline";
var CLS_TB_INLINE = "e-rte-tb-inline";
var CLS_RTE_EXPAND_TB = "e-rte-tb-expand";
var CLS_FULL_SCREEN = "e-rte-full-screen";
var CLS_QUICK_TB = "e-rte-quick-toolbar";
var CLS_POP = "e-rte-pop";
var CLS_TB_STATIC = "e-tb-static";
var CLS_QUICK_POP = "e-rte-quick-popup";
var CLS_QUICK_DROPDOWN = "e-quick-dropdown";
var CLS_IMAGE_POP = "e-rte-image-popup";
var CLS_INLINE_POP = "e-rte-inline-popup";
var CLS_INLINE_DROPDOWN = "e-rte-inline-dropdown";
var CLS_DROPDOWN_POPUP = "e-rte-dropdown-popup";
var CLS_DROPDOWN_ICONS = "e-rte-dropdown-icons";
var CLS_DROPDOWN_ITEMS = "e-rte-dropdown-items";
var CLS_DROPDOWN_BTN = "e-rte-dropdown-btn";
var CLS_RTE_CONTENT = "e-rte-content";
var CLS_TB_ITEM = "e-toolbar-item";
var CLS_TB_EXTENDED = "e-toolbar-extended";
var CLS_TB_WRAP = "e-toolbar-wrapper";
var CLS_POPUP = "e-popup";
var CLS_SEPARATOR = "e-separator";
var CLS_MINIMIZE = "e-minimize";
var CLS_MAXIMIZE = "e-maximize";
var CLS_BACK = "e-back";
var CLS_SHOW = "e-show";
var CLS_HIDE = "e-hide";
var CLS_VISIBLE = "e-visible";
var CLS_FOCUS = "e-focused";
var CLS_RM_WHITE_SPACE = "e-remove-white-space";
var CLS_IMGRIGHT = "e-imgright";
var CLS_IMGLEFT = "e-imgleft";
var CLS_IMGCENTER = "e-imgcenter";
var CLS_IMGBREAK = "e-imgbreak";
var CLS_AUDIOBREAK = "e-audio-break";
var CLS_CLICKELEM = "e-clickelem";
var CLS_VID_CLICK_ELEM = "e-video-clickelem";
var CLS_AUDIOWRAP = "e-audio-wrap";
var CLS_VIDEOWRAP = "e-video-wrap";
var CLS_VIDEOBREAK = "e-video-break";
var CLS_CAPTION = "e-img-caption";
var CLS_RTE_CAPTION = "e-rte-img-caption";
var CLS_CAPINLINE = "e-caption-inline";
var CLS_IMGINLINE = "e-imginline";
var CLS_AUDIOINLINE = "e-audio-inline";
var CLS_VIDEOINLINE = "e-video-inline";
var CLS_COUNT = "e-rte-character-count";
var CLS_WARNING = "e-warning";
var CLS_ERROR = "e-error";
var CLS_ICONS = "e-icons";
var CLS_ACTIVE = "e-active";
var CLS_EXPAND_OPEN = "e-expand-open";
var CLS_RTE_ELEMENTS = "e-rte-elements";
var CLS_TB_BTN = "e-tbar-btn";
var CLS_HR_SEPARATOR = "e-rte-horizontal-separator";
var CLS_TB_IOS_FIX = "e-tbar-ios-fixed";
var CLS_LIST_PRIMARY_CONTENT = "e-rte-list-primary-content";
var CLS_NUMBERFORMATLIST_TB_BTN = "e-rte-numberformatlist-dropdown";
var CLS_BULLETFORMATLIST_TB_BTN = "e-rte-bulletformatlist-dropdown";
var CLS_FORMATS_TB_BTN = "e-formats-tbar-btn";
var CLS_FONT_NAME_TB_BTN = "e-font-name-tbar-btn";
var CLS_FONT_SIZE_TB_BTN = "e-font-size-tbar-btn";
var CLS_ALIGN_TB_BTN = "e-alignment-tbar-btn";
var CLS_FONT_COLOR_TARGET = "e-rte-fontcolor-element";
var CLS_BACKGROUND_COLOR_TARGET = "e-rte-backgroundcolor-element";
var CLS_COLOR_CONTENT = "e-rte-color-content";
var CLS_FONT_COLOR_DROPDOWN = "e-rte-fontcolor-dropdown";
var CLS_BACKGROUND_COLOR_DROPDOWN = "e-rte-backgroundcolor-dropdown";
var CLS_COLOR_PALETTE = "e-rte-square-palette";
var CLS_FONT_COLOR_PICKER = "e-rte-fontcolor-colorpicker";
var CLS_BACKGROUND_COLOR_PICKER = "e-rte-backgroundcolor-colorpicker";
var CLS_RTE_READONLY = "e-rte-readonly";
var CLS_TABLE_SEL = "e-cell-select";
var CLS_TB_DASH_BOR = "e-dashed-border";
var CLS_TB_ALT_BOR = "e-alternate-border";
var CLS_TB_COL_RES = "e-column-resize";
var CLS_TB_ROW_RES = "e-row-resize";
var CLS_TB_BOX_RES = "e-table-box";
var CLS_RTE_HIDDEN = "e-rte-hidden";
var CLS_RTE_PASTE_KEEP_FORMAT = "e-rte-keepformat";
var CLS_RTE_PASTE_REMOVE_FORMAT = "e-rte-removeformat";
var CLS_RTE_PASTE_PLAIN_FORMAT = "e-rte-plainformat";
var CLS_RTE_PASTE_OK = "e-rte-pasteok";
var CLS_RTE_PASTE_CANCEL = "e-rte-pastecancel";
var CLS_RTE_DIALOG_MIN_HEIGHT = "e-rte-dialog-minheight";
var CLS_RTE_RES_HANDLE = "e-resize-handle";
var CLS_RTE_RES_EAST = "e-south-east";
var CLS_RTE_IMAGE = "e-rte-image";
var CLS_RESIZE = "e-resize";
var CLS_IMG_FOCUS = "e-img-focus";
var CLS_AUD_FOCUS = "e-audio-focus";
var CLS_VID_FOCUS = "e-video-focus";
var CLS_RTE_DRAG_IMAGE = "e-rte-drag-image";
var CLS_RTE_UPLOAD_POPUP = "e-rte-upload-popup";
var CLS_POPUP_OPEN = "e-popup-open";
var CLS_IMG_RESIZE = "e-img-resize";
var CLS_DROPAREA = "e-droparea";
var CLS_IMG_INNER = "e-img-inner";
var CLS_UPLOAD_FILES = "e-upload-files";
var CLS_RTE_DIALOG_UPLOAD = "e-rte-dialog-upload";
var CLS_RTE_RES_CNT = "e-rte-resize";
var CLS_CUSTOM_TILE = "e-custom-tile";
var CLS_NOCOLOR_ITEM = "e-nocolor-item";
var CLS_TABLE = "e-rte-table";
var CLS_TABLE_BORDER = "e-rte-table-border";
var CLS_RTE_TABLE_RESIZE = "e-rte-table-resize";
var CLS_RTE_FIXED_TB_EXPAND = "e-rte-fixed-tb-expand";
var CLS_RTE_TB_ENABLED = "e-rte-toolbar-enabled";
var CLS_RTE_RES_WEST = "e-south-west";

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/base/enum.js
var RenderType;
(function(RenderType2) {
  RenderType2[RenderType2["Toolbar"] = 0] = "Toolbar";
  RenderType2[RenderType2["Content"] = 1] = "Content";
  RenderType2[RenderType2["Popup"] = 2] = "Popup";
  RenderType2[RenderType2["LinkToolbar"] = 3] = "LinkToolbar";
  RenderType2[RenderType2["TextToolbar"] = 4] = "TextToolbar";
  RenderType2[RenderType2["ImageToolbar"] = 5] = "ImageToolbar";
  RenderType2[RenderType2["AudioToolbar"] = 6] = "AudioToolbar";
  RenderType2[RenderType2["VideoToolbar"] = 7] = "VideoToolbar";
  RenderType2[RenderType2["InlineToolbar"] = 8] = "InlineToolbar";
  RenderType2[RenderType2["TableToolbar"] = 9] = "TableToolbar";
})(RenderType || (RenderType = {}));
var ToolbarType;
(function(ToolbarType2) {
  ToolbarType2["Expand"] = "Expand";
  ToolbarType2["MultiRow"] = "MultiRow";
  ToolbarType2["Scrollable"] = "Scrollable";
})(ToolbarType || (ToolbarType = {}));
var DialogType;
(function(DialogType2) {
  DialogType2["InsertLink"] = "InsertLink";
  DialogType2["InsertImage"] = "InsertImage";
  DialogType2["InsertAudio"] = "InsertAudio";
  DialogType2["InsertVideo"] = "InsertVideo";
  DialogType2["InsertTable"] = "InsertTable";
})(DialogType || (DialogType = {}));

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/models/items.js
var templateItems = ["alignments", "formats", "fontname", "fontsize", "fontcolor", "backgroundcolor", "align", "display", "audiolayoutoption", "videolayoutoption", "videoalign", "tablerows", "tablecolumns", "tablecell", "tablecellhorizontalalign", "tablecellverticalalign", "styles", "numberformatlist", "bulletformatlist"];
var tools = {
  "alignments": {
    "id": "Alignments",
    "icon": "e-alignments",
    "tooltip": "Alignments",
    "command": "Alignments",
    "subCommand": "Alignments"
  },
  "justifyleft": {
    "id": "JustifyLeft",
    "icon": "e-justify-left",
    "tooltip": "JustifyLeft",
    "command": "Alignments",
    "subCommand": "JustifyLeft"
  },
  "justifycenter": {
    "id": "JustifyCenter",
    "icon": "e-justify-center",
    "tooltip": "JustifyCenter",
    "command": "Alignments",
    "subCommand": "JustifyCenter"
  },
  "justifyright": {
    "id": "JustifyRight",
    "icon": "e-justify-right",
    "tooltip": "JustifyRight",
    "command": "Alignments",
    "subCommand": "JustifyRight"
  },
  "justifyfull": {
    "id": "JustifyFull",
    "icon": "e-justify-full",
    "tooltip": "JustifyFull",
    "command": "Alignments",
    "subCommand": "JustifyFull"
  },
  "fontname": {
    "id": "FontName",
    "icon": "e-font-name",
    "tooltip": "Font Name",
    "command": "Font",
    "subCommand": "FontName"
  },
  "fontsize": {
    "id": "FontSize",
    "icon": "e-font-size",
    "tooltip": "Font Size",
    "command": "Font",
    "subCommand": "FontSize"
  },
  "fontcolor": {
    "id": "FontColor",
    "icon": "e-rte-font-color",
    "tooltip": "Font Color",
    "command": "Font",
    "subCommand": "FontColor",
    "value": "#ff0000ff"
  },
  "backgroundcolor": {
    "id": "BackgroundColor",
    "icon": "e-background-color",
    "tooltip": "Background Color",
    "command": "Font",
    "subCommand": "BackgroundColor",
    "value": "#ffff00ff"
  },
  "bold": {
    "id": "Bold",
    "icon": "e-bold",
    "tooltip": "Bold",
    "command": "Style",
    "subCommand": "Bold"
  },
  "italic": {
    "id": "Italic",
    "icon": "e-italic",
    "tooltip": "Italic",
    "command": "Style",
    "subCommand": "Italic"
  },
  "underline": {
    "id": "Underline",
    "icon": "e-underline",
    "tooltip": "Underline",
    "command": "Style",
    "subCommand": "Underline"
  },
  "strikethrough": {
    "id": "StrikeThrough",
    "icon": "e-strike-through",
    "tooltip": "StrikeThrough",
    "command": "Style",
    "subCommand": "StrikeThrough"
  },
  "clearformat": {
    "id": "ClearFormat",
    "icon": "e-clear-format",
    "tooltip": "Clear Format",
    "command": "Clear",
    "subCommand": "ClearFormat"
  },
  "clearall": {
    "id": "ClearAll",
    "icon": "e-clear-all",
    "tooltip": "Clear All",
    "command": "Clear",
    "subCommand": "ClearAll"
  },
  "cut": {
    "id": "Cut",
    "icon": "e-cut",
    "tooltip": "Cut",
    "command": "ClipBoard",
    "subCommand": "Cut"
  },
  "copy": {
    "id": "Copy",
    "icon": "e-copy",
    "tooltip": "Copy",
    "command": "ClipBoard",
    "subCommand": "Copy"
  },
  "paste": {
    "id": "Paste",
    "icon": "e-paste",
    "tooltip": "Paste",
    "command": "ClipBoard",
    "subCommand": "Paste"
  },
  "unorderedlist": {
    "id": "UnorderedList",
    "icon": "e-unorder-list",
    "tooltip": "Bulleted List",
    "command": "Lists",
    "subCommand": "UL"
  },
  "orderedlist": {
    "id": "OrderedList",
    "icon": "e-order-list",
    "tooltip": "Numbered List",
    "command": "Lists",
    "subCommand": "OL"
  },
  "numberformatlist": {
    "id": "NumberFormatList",
    "icon": "e-order-list",
    "tooltip": "Number Format List",
    "command": "NumberFormatList",
    "subCommand": "NumberFormatList"
  },
  "bulletformatlist": {
    "id": "BulletFormatList",
    "icon": "e-unorder-list",
    "tooltip": "Bullet Format List",
    "command": "BulletFormatList",
    "subCommand": "BulletFormatList"
  },
  "indent": {
    "id": "Indent",
    "icon": "e-indent",
    "tooltip": "Increase Indent",
    "command": "Indents",
    "subCommand": "Indent"
  },
  "outdent": {
    "id": "Outdent",
    "icon": "e-outdent",
    "tooltip": "Decrease Indent",
    "command": "Indents",
    "subCommand": "Outdent"
  },
  "undo": {
    "id": "Undo",
    "icon": "e-undo",
    "tooltip": "Undo",
    "command": "Actions",
    "subCommand": "Undo"
  },
  "redo": {
    "id": "Redo",
    "icon": "e-redo",
    "tooltip": "Redo",
    "command": "Actions",
    "subCommand": "Redo"
  },
  "superscript": {
    "id": "SuperScript",
    "icon": "e-super-script",
    "tooltip": "Superscript",
    "command": "Effects",
    "subCommand": "SuperScript"
  },
  "subscript": {
    "id": "SubScript",
    "icon": "e-sub-script",
    "tooltip": "Subscript",
    "command": "Effects",
    "subCommand": "SubScript"
  },
  "createlink": {
    "id": "CreateLink",
    "icon": "e-create-link",
    "tooltip": "Insert Hyperlink",
    "command": "Links",
    "subCommand": "CreateLink"
  },
  "openlink": {
    "id": "OpenLink",
    "icon": "e-open-link",
    "tooltip": "Open Link",
    "command": "Links",
    "subCommand": "OpenLink"
  },
  "editlink": {
    "id": "EditLink",
    "icon": "e-edit-link",
    "tooltip": "Edit Link",
    "command": "Links",
    "subCommand": "EditLink"
  },
  "removelink": {
    "id": "RemoveLink",
    "icon": "e-remove-link",
    "tooltip": "Remove Link",
    "command": "Links",
    "subCommand": "RemoveLink"
  },
  "image": {
    "id": "Image",
    "icon": "e-image",
    "tooltip": "Insert Image",
    "command": "Images",
    "subCommand": "Image"
  },
  "audio": {
    "id": "Audio",
    "icon": "e-audio",
    "tooltip": "Insert Audio",
    "command": "Audios",
    "subCommand": "Audio"
  },
  "video": {
    "id": "Video",
    "icon": "e-video",
    "tooltip": "Insert Video",
    "command": "Videos",
    "subCommand": "Video"
  },
  "filemanager": {
    "id": "FileManager",
    "icon": "e-rte-file-manager",
    "tooltip": "File Manager",
    "command": "Files",
    "subCommand": "File"
  },
  "createtable": {
    "id": "CreateTable",
    "icon": "e-create-table",
    "tooltip": "Create Table",
    "command": "Table",
    "subCommand": "CreateTable"
  },
  "removetable": {
    "id": "removeTable",
    "icon": "e-remove-table",
    "tooltip": "Remove Table",
    "command": "removeTable",
    "subCommand": "removeTable"
  },
  "replace": {
    "id": "Replace",
    "icon": "e-replace",
    "tooltip": "Replace",
    "command": "Images",
    "subCommand": "Replace"
  },
  "audioreplace": {
    "id": "AudioReplace",
    "icon": "e-audio-replace",
    "tooltip": "Audio Replace",
    "command": "Audios",
    "subCommand": "AudioReplace"
  },
  "audioremove": {
    "id": "AudioRemove",
    "icon": "e-audio-remove",
    "tooltip": "Audio Remove",
    "command": "Audios",
    "subCommand": "AudioRemove"
  },
  "audiolayoutoption": {
    "id": "AudioLayoutOption",
    "icon": "e-audio-display",
    "tooltip": "Audio LayoutOption",
    "command": "Audios",
    "subCommand": "AudioLayoutOption"
  },
  "videoreplace": {
    "id": "VideoReplace",
    "icon": "e-video-replace",
    "tooltip": "Video Replace",
    "command": "Videos",
    "subCommand": "VideoReplace"
  },
  "videoalign": {
    "id": "VideoAlign",
    "icon": "e-video-align",
    "tooltip": "Video Align",
    "command": "Videos",
    "subCommand": "VideoAlign"
  },
  "videoremove": {
    "id": "VideoRemove",
    "icon": "e-video-remove",
    "tooltip": "Video Remove",
    "command": "Videos",
    "subCommand": "VideoRemove"
  },
  "videolayoutoption": {
    "id": "VideoLayoutOption",
    "icon": "e-video-display",
    "tooltip": "Video LayoutOption",
    "command": "Videos",
    "subCommand": "VideoLayoutOption"
  },
  "videodimension": {
    "id": "VideoDimension",
    "icon": "e-video-dimension",
    "tooltip": "Video Dimension",
    "command": "Videos",
    "subCommand": "VideoDimension"
  },
  "align": {
    "id": "Align",
    "icon": "e-align",
    "tooltip": "Align",
    "command": "Images",
    "subCommand": "Align"
  },
  "caption": {
    "id": "Caption",
    "icon": "e-caption",
    "tooltip": "Image Caption",
    "command": "Images",
    "subCommand": "Caption"
  },
  "remove": {
    "id": "Remove",
    "icon": "e-remove",
    "tooltip": "Remove",
    "command": "Images",
    "subCommand": "Remove"
  },
  "openimagelink": {
    "id": "OpenImageLink",
    "icon": "e-open-link",
    "tooltip": "Open Link",
    "command": "Images",
    "subCommand": "OpenImageLink"
  },
  "editimagelink": {
    "id": "EditImageLink",
    "icon": "e-edit-link",
    "tooltip": "Edit Link",
    "command": "Images",
    "subCommand": "EditImageLink"
  },
  "removeimagelink": {
    "id": "RemoveImageLink",
    "icon": "e-remove-link",
    "tooltip": "Remove Link",
    "command": "Images",
    "subCommand": "RemoveImageLink"
  },
  "insertlink": {
    "id": "InsertLink",
    "icon": "e-insert-link",
    "tooltip": "Insert Link",
    "command": "Images",
    "subCommand": "InsertLink"
  },
  "display": {
    "id": "Display",
    "icon": "e-display",
    "tooltip": "Display",
    "command": "Images",
    "subCommand": "Display"
  },
  "alttext": {
    "id": "AltText",
    "icon": "e-alt-text",
    "tooltip": "Alternative Text",
    "command": "Images",
    "subCommand": "AltText"
  },
  "dimension": {
    "id": "Dimension",
    "icon": "e-img-dimension",
    "tooltip": "Change Size",
    "command": "Images",
    "subCommand": "Dimension"
  },
  "fullscreen": {
    "id": "Maximize",
    "icon": "e-maximize",
    "tooltip": "Maximize",
    "command": "View",
    "subCommand": "Maximize"
  },
  "maximize": {
    "id": "Maximize",
    "icon": "e-maximize",
    "tooltip": "Maximize",
    "command": "FullScreen",
    "subCommand": "Maximize"
  },
  "minimize": {
    "id": "Minimize",
    "icon": "e-minimize",
    "tooltip": "Minimize",
    "command": "FullScreen",
    "subCommand": "Minimize"
  },
  "lowercase": {
    "id": "LowerCase",
    "icon": "e-lower-case",
    "tooltip": "Lower Case",
    "command": "Casing",
    "subCommand": "LowerCase"
  },
  "uppercase": {
    "id": "UpperCase",
    "icon": "e-upper-case",
    "tooltip": "Upper Case",
    "command": "Casing",
    "subCommand": "UpperCase"
  },
  "print": {
    "id": "Print",
    "icon": "e-print",
    "tooltip": "Print",
    "command": "Print",
    "subCommand": "Print"
  },
  "formats": {
    "id": "Formats",
    "icon": "e-formats",
    "tooltip": "Formats",
    "command": "Formats",
    "subCommand": "Formats"
  },
  "sourcecode": {
    "id": "SourceCode",
    "icon": "e-source-code",
    "tooltip": "Source Code",
    "command": "SourceCode",
    "subCommand": "SourceCode"
  },
  "preview": {
    "id": "Preview",
    "icon": "e-preview",
    "tooltip": "Preview",
    "command": "Preview",
    "subCommand": "Preview"
  },
  "viewside": {
    "id": "ViewSide",
    "icon": "e-view-side",
    "tooltip": "ViewSide",
    "command": "ViewSide",
    "subCommand": "ViewSide"
  },
  "insertcode": {
    "id": "InsertCode",
    "icon": "e-insert-code",
    "tooltip": "Insert Code",
    "command": "Formats",
    "subCommand": "Pre"
  },
  "tableheader": {
    "id": "TableHeader",
    "icon": "e-table-header",
    "tooltip": "Table Header",
    "command": "Table",
    "subCommand": "TableHeader"
  },
  "tableremove": {
    "id": "TableRemove",
    "icon": "e-table-remove",
    "tooltip": "Table Remove",
    "command": "Table",
    "subCommand": "TableRemove"
  },
  "tablerows": {
    "id": "TableRows",
    "icon": "e-table-rows",
    "tooltip": "Table Rows",
    "command": "Table",
    "subCommand": "TableRows"
  },
  "tablecolumns": {
    "id": "TableColumns",
    "icon": "e-table-columns",
    "tooltip": "Table Columns",
    "command": "Table",
    "subCommand": "TableColumns"
  },
  "tablecell": {
    "id": "TableCell",
    "icon": "e-table-cell",
    "tooltip": "Table Cell",
    "command": "Table",
    "subCommand": "TableCell"
  },
  "tablecellbackground": {
    "id": "TableCellBackground",
    "icon": "e-table-cell-background",
    "tooltip": "Table Cell Background",
    "command": "Table",
    "subCommand": "TableCellBackground"
  },
  "tablecellhorizontalalign": {
    "id": "TableCellHorizontalAlign",
    "icon": "e-table-cell-horizontalAlign",
    "tooltip": "Table Cell HorizontalAlign",
    "command": "Table",
    "subCommand": "TableCellHorizontalAlign"
  },
  "tablecellverticalalign": {
    "id": "TableCellVerticalAlign",
    "icon": "e-table-cell-verticalAlign",
    "tooltip": "Table Cell VerticalAlign",
    "command": "Table",
    "subCommand": "TableCellVerticalAlign"
  },
  "tableeditproperties": {
    "id": "TableEditProperties",
    "icon": "e-table-edit-properties",
    "tooltip": "Table Edit Properties",
    "command": "Table",
    "subCommand": "TableEditProperties"
  },
  "styles": {
    "id": "Styles",
    "icon": "e-table-styles",
    "tooltip": "Styles",
    "command": "Table",
    "subCommand": "Styles"
  },
  "formatpainter": {
    "id": "FormatPainter",
    "icon": "e-rte-format-painter",
    "tooltip": "Format Painter",
    "command": "FormatPainter",
    "subCommand": "FormatPainter"
  },
  "emojipicker": {
    "id": "EmojiPicker",
    "icon": "e-emoji",
    "tooltip": "Emoji Icon",
    "command": "EmojiPicker",
    "subCommand": "EmojiPicker"
  }
};
var alignmentLocale = [
  { locale: "alignmentsDropDownLeft", value: "JustifyLeft" },
  { locale: "alignmentsDropDownCenter", value: "JustifyCenter" },
  { locale: "alignmentsDropDownRight", value: "JustifyRight" },
  { locale: "alignmentsDropDownJustify", value: "JustifyFull" }
];
var alignmentItems = [
  { iconCss: "e-icons e-justify-left", text: "Align Left", command: "Alignments", subCommand: "JustifyLeft" },
  { iconCss: "e-icons e-justify-center", text: "Align Center", command: "Alignments", subCommand: "JustifyCenter" },
  { iconCss: "e-icons e-justify-right", text: "Align Right", command: "Alignments", subCommand: "JustifyRight" },
  { iconCss: "e-icons e-justify-full", text: "Align Justify", command: "Alignments", subCommand: "JustifyFull" }
];
var imageAlignItems = [
  { iconCss: "e-icons e-justify-left", command: "Images", subCommand: "JustifyLeft" },
  { iconCss: "e-icons e-justify-center", command: "Images", subCommand: "JustifyCenter" },
  { iconCss: "e-icons e-justify-right", command: "Images", subCommand: "JustifyRight" }
];
var videoAlignItems = [
  { iconCss: "e-icons e-justify-left", command: "Videos", subCommand: "JustifyLeft" },
  { iconCss: "e-icons e-justify-center", command: "Videos", subCommand: "JustifyCenter" },
  { iconCss: "e-icons e-justify-right", command: "Videos", subCommand: "JustifyRight" }
];
var displayLocale = [
  { locale: "imageDisplayDropDownInline", value: "Inline" },
  { locale: "imageDisplayDropDownBreak", value: "Break" }
];
var audioLayoutOptionLocale = [
  { locale: "audioLayoutOptionDropDownInline", value: "Inline" },
  { locale: "audioLayoutOptionDropDownBreak", value: "Break" }
];
var videoLayoutOptionLocale = [
  { locale: "videoLayoutOptionDropDownInline", value: "Inline" },
  { locale: "videoLayoutOptionDropDownBreak", value: "Break" }
];
var imageDisplayItems = [
  { text: "Inline", cssClass: "e-inline", command: "Images", subCommand: "Inline" },
  { text: "Break", cssClass: "e-break", command: "Images", subCommand: "Break" }
];
var audioLayoutOptionItems = [
  { text: "Inline", cssClass: "e-audio-inline", command: "Audios", subCommand: "Inline" },
  { text: "Break", cssClass: "e-audio-break", command: "Audios", subCommand: "Break" }
];
var videoLayoutOptionItems = [
  { text: "Inline", cssClass: "e-video-inline", command: "Videos", subCommand: "Inline" },
  { text: "Break", cssClass: "e-video-break", command: "Videos", subCommand: "Break" }
];
var tableCellItems = [
  { iconCss: "e-icons e-cell-merge", text: "Merge cells", command: "Table", subCommand: "Merge" },
  { iconCss: "e-icons e-cell-horizontal-split", text: "Horizontal split", command: "Table", subCommand: "HorizontalSplit" },
  { iconCss: "e-icons e-cell-vertical-split", text: "Vertical split", command: "Table", subCommand: "VerticalSplit" }
];
var tableRowLocale = [
  { locale: "tableInsertRowDropDownBefore", value: "InsertRowBefore" },
  { locale: "tableInsertRowDropDownAfter", value: "InsertRowAfter" },
  { locale: "tableInsertRowDropDownDelete", value: "DeleteRow" }
];
var tableRowsItems = [
  { iconCss: "e-icons e-insert-row-before", text: "Insert row before", command: "Table", subCommand: "InsertRowBefore" },
  { iconCss: "e-icons e-insert-row-after", text: "Insert row after", command: "Table", subCommand: "InsertRowAfter" },
  { iconCss: "e-icons e-delete-row", text: "Delete row", command: "Table", subCommand: "DeleteRow" }
];
var tableColumnLocale = [
  { locale: "tableInsertColumnDropDownLeft", value: "InsertColumnLeft" },
  { locale: "tableInsertColumnDropDownRight", value: "InsertColumnRight" },
  { locale: "tableInsertColumnDropDownDelete", value: "DeleteColumn" }
];
var tableColumnsItems = [
  { iconCss: "e-icons e-insert-column-left", text: "Insert column left", command: "Table", subCommand: "InsertColumnLeft" },
  { iconCss: "e-icons e-insert-column-right", text: "Insert column right", command: "Table", subCommand: "InsertColumnRight" },
  { iconCss: "e-icons e-delete-column", text: "Delete column", command: "Table", subCommand: "DeleteColumn" }
];
var tableVerticalLocale = [
  { locale: "tableVerticalAlignDropDownTop", value: "AlignTop" },
  { locale: "tableVerticalAlignDropDownMiddle", value: "AlignMiddle" },
  { locale: "tableVerticalAlignDropDownBottom", value: "AlignBottom" }
];
var TableCellVerticalAlignItems = [
  { iconCss: "e-icons e-align-top", text: "Align Top", command: "Table", subCommand: "AlignTop" },
  { iconCss: "e-icons e-align-middle", text: "Align Middle", command: "Table", subCommand: "AlignMiddle" },
  { iconCss: "e-icons e-align-bottom", text: "Align Bottom", command: "Table", subCommand: "AlignBottom" }
];
var tableStyleLocale = [
  { locale: "tableStylesDropDownDashedBorder", value: "Dashed" },
  { locale: "tableStylesDropDownAlternateRows", value: "Alternate" }
];
var TableStyleItems = [
  { text: "Dashed Borders", cssClass: "e-dashed-borders", command: "Table", subCommand: "Dashed" },
  { text: "Alternate Rows", cssClass: "e-alternate-rows", command: "Table", subCommand: "Alternate" }
];
var predefinedItems = [
  "Bold",
  "Italic",
  "Underline",
  "|",
  "Formats",
  "Alignments",
  "OrderedList",
  "UnorderedList",
  "|",
  "CreateLink",
  "Image",
  "|",
  "SourceCode",
  "Undo",
  "Redo"
];
var fontFamily = [
  { cssClass: "e-segoe-ui", text: "Segoe UI", command: "Font", subCommand: "FontName", value: "Segoe UI" },
  { cssClass: "e-arial", text: "Arial", command: "Font", subCommand: "FontName", value: "Arial,Helvetica,sans-serif" },
  { cssClass: "e-georgia", text: "Georgia", command: "Font", subCommand: "FontName", value: "Georgia,serif" },
  { cssClass: "e-impact", text: "Impact", command: "Font", subCommand: "FontName", value: "Impact,Charcoal,sans-serif" },
  { cssClass: "e-tahoma", text: "Tahoma", command: "Font", subCommand: "FontName", value: "Tahoma,Geneva,sans-serif" },
  { cssClass: "e-times-new-roman", text: "Times New Roman", command: "Font", subCommand: "FontName", value: "Times New Roman,Times,serif" },
  { cssClass: "e-verdana", text: "Verdana", command: "Font", subCommand: "FontName", value: "Verdana,Geneva,sans-serif" }
];
var fontSize = [
  { text: "8 pt", value: "8pt" },
  { text: "10 pt", value: "10pt" },
  { text: "12 pt", value: "12pt" },
  { text: "14 pt", value: "14pt" },
  { text: "18 pt", value: "18pt" },
  { text: "24 pt", value: "24pt" },
  { text: "36 pt", value: "36pt" }
];
var formatItems = [
  { cssClass: "e-paragraph", text: "Paragraph", command: "Formats", subCommand: "P", value: "P" },
  { cssClass: "e-code", text: "Code", command: "Formats", subCommand: "Pre", value: "Pre" },
  { cssClass: "e-quote", text: "Quotation", command: "Formats", subCommand: "BlockQuote", value: "BlockQuote" },
  { cssClass: "e-h1", text: "Heading 1", command: "Formats", subCommand: "H1", value: "H1" },
  { cssClass: "e-h2", text: "Heading 2", command: "Formats", subCommand: "H2", value: "H2" },
  { cssClass: "e-h3", text: "Heading 3", command: "Formats", subCommand: "H3", value: "H3" },
  { cssClass: "e-h4", text: "Heading 4", command: "Formats", subCommand: "H4", value: "H4" }
];
var fontColor = {
  "Custom": [
    "",
    "#000000",
    "#e7e6e6",
    "#44546a",
    "#4472c4",
    "#ed7d31",
    "#a5a5a5",
    "#ffc000",
    "#70ad47",
    "#ff0000",
    "#f2f2f2",
    "#808080",
    "#cfcdcd",
    "#d5dce4",
    "#d9e2f3",
    "#fbe4d5",
    "#ededed",
    "#fff2cc",
    "#e2efd9",
    "#ffcccc",
    "#d9d9d9",
    "#595959",
    "#aeaaaa",
    "#acb9ca",
    "#b4c6e7",
    "#f7caac",
    "#dbdbdb",
    "#ffe599",
    "#c5e0b3",
    "#ff8080",
    "#bfbfbf",
    "#404040",
    "#747070",
    "#8496b0",
    "#8eaadb",
    "#f4b083",
    "#c9c9c9",
    "#ffd966",
    "#a8d08d",
    "#ff3333",
    "#a6a6a6",
    "#262626",
    "#3b3838",
    "#323e4f",
    "#2f5496",
    "#c45911",
    "#7b7b7b",
    "#bf8f00",
    "#538135",
    "#b30000",
    "#7f7f7f",
    "#0d0d0d",
    "#161616",
    "#212934",
    "#1f3763",
    "#823b0b",
    "#525252",
    "#7f5f00",
    "#375623",
    "#660000"
  ]
};
var backgroundColor = {
  "Custom": [
    "",
    "#000000",
    "#ffff00",
    "#00ff00",
    "#00ffff",
    "#0000ff",
    "#ff0000",
    "#000080",
    "#800080",
    "#996633",
    "#f2f2f2",
    "#808080",
    "#ffffcc",
    "#b3ffb3",
    "#ccffff",
    "#ccccff",
    "#ffcccc",
    "#ccccff",
    "#ff80ff",
    "#f2e6d9",
    "#d9d9d9",
    "#595959",
    "#ffff80",
    "#80ff80",
    "#b3ffff",
    "#8080ff",
    "#ff8080",
    "#8080ff",
    "#ff00ff",
    "#dfbf9f",
    "#bfbfbf",
    "#404040",
    "#ffff33",
    "#33ff33",
    "#33ffff",
    "#3333ff",
    "#ff3333",
    "#0000b3",
    "#b300b3",
    "#c68c53",
    "#a6a6a6",
    "#262626",
    "#e6e600",
    "#00b300",
    "#009999",
    "#000099",
    "#b30000",
    "#000066",
    "#660066",
    "#86592d",
    "#7f7f7f",
    "#0d0d0d",
    "#999900",
    "#006600",
    "#006666",
    "#000066",
    "#660000",
    "#00004d",
    "#4d004d",
    "#734d26"
  ]
};
var numberFormatList = [
  { text: "None", command: "Lists", subCommand: "NumberFormatList", value: "none" },
  { text: "Number", command: "Lists", subCommand: "NumberFormatList", value: "decimal" },
  { text: "Lower Greek", command: "Lists", subCommand: "NumberFormatList", value: "lowerGreek" },
  { text: "Lower Roman", command: "Lists", subCommand: "NumberFormatList", value: "lowerRoman" },
  { text: "Upper Alpha", command: "Lists", subCommand: "NumberFormatList", value: "upperAlpha" },
  { text: "Lower Alpha", command: "Lists", subCommand: "NumberFormatList", value: "lowerAlpha" },
  { text: "Upper Roman", command: "Lists", subCommand: "NumberFormatList", value: "upperRoman" }
];
var bulletFormatList = [
  { text: "None", command: "Lists", subCommand: "BulletFormatList", value: "none" },
  { text: "Disc", command: "Lists", subCommand: "BulletFormatList", value: "disc" },
  { text: "Circle", command: "Lists", subCommand: "BulletFormatList", value: "circle" },
  { text: "Square", command: "Lists", subCommand: "BulletFormatList", value: "square" }
];
function getLocale(self, localeItems, item) {
  for (var i = 0; localeItems.length > i; i++) {
    if (localeItems[i].value === item.subCommand) {
      return self.localeObj.getConstant(localeItems[i].locale);
    }
  }
  return item.text;
}
function updateDropDownLocale(self) {
  alignmentItems.forEach(function(item, i) {
    alignmentItems[i].text = getLocale(self, alignmentLocale, alignmentItems[i]);
  });
  imageDisplayItems.forEach(function(item, i) {
    imageDisplayItems[i].text = getLocale(self, displayLocale, imageDisplayItems[i]);
  });
  audioLayoutOptionItems.forEach(function(item, i) {
    audioLayoutOptionItems[i].text = getLocale(self, audioLayoutOptionLocale, audioLayoutOptionItems[i]);
  });
  videoLayoutOptionItems.forEach(function(item, i) {
    videoLayoutOptionItems[i].text = getLocale(self, videoLayoutOptionLocale, videoLayoutOptionItems[i]);
  });
  tableRowsItems.forEach(function(item, i) {
    tableRowsItems[i].text = getLocale(self, tableRowLocale, tableRowsItems[i]);
  });
  tableColumnsItems.forEach(function(item, i) {
    tableColumnsItems[i].text = getLocale(self, tableColumnLocale, tableColumnsItems[i]);
  });
  TableCellVerticalAlignItems.forEach(function(item, i) {
    TableCellVerticalAlignItems[i].text = getLocale(self, tableVerticalLocale, TableCellVerticalAlignItems[i]);
  });
  TableStyleItems.forEach(function(item, i) {
    TableStyleItems[i].text = getLocale(self, tableStyleLocale, TableStyleItems[i]);
  });
}
var windowKeys = {
  "Insert Link": "Ctrl + K",
  "Insert Image": "Ctrl + Shift + I",
  "Create Table": "Ctrl + Shift + E",
  "Undo": "Ctrl + Z",
  "Redo": "Ctrl + Y",
  "Copy": "Ctrl + C",
  "Cut": "Ctrl + X",
  "Paste": "Ctrl + V",
  "Bold": "Ctrl + B",
  "Italic": "Ctrl + I",
  "Underline": "Ctrl + U",
  "Strikethrough": "Ctrl + Shift + S",
  "Upper Case": "Ctrl + Shift + U",
  "Lower Case": "Ctrl + Shift + L",
  "Superscript": "Ctrl + Shift + =",
  "Subscript": "Ctrl + =",
  "Source Code": "Ctrl + Shift + H",
  "Maximize": "Ctrl + Shift + F",
  "Minimize": "Esc",
  "Clear Format": "Ctrl + Shift + R",
  "Numbered List": "Ctrl + Shift + O",
  "Bulleted List": "Ctrl + Alt + O",
  "Format Painter": "Alt + Shift + C, Alt + Shift + V"
};
var defaultEmojiIcons = [{
  name: "Smilies & People",
  code: "1F600",
  iconCss: "e-emoji",
  icons: [
    { code: "1F600", desc: "Grinning face" },
    { code: "1F603", desc: "Grinning face with big eyes" },
    { code: "1F604", desc: "Grinning face with smiling eyes" },
    { code: "1F606", desc: "Grinning squinting face" },
    { code: "1F605", desc: "Grinning face with sweat" },
    { code: "1F602", desc: "Face with tears of joy" },
    { code: "1F923", desc: "Rolling on the floor laughing" },
    { code: "1F60A", desc: "Smiling face with smiling eyes" },
    { code: "1F607", desc: "Smiling face with halo" },
    { code: "1F642", desc: "Slightly smiling face" },
    { code: "1F643", desc: "Upside-down face" },
    { code: "1F60D", desc: "Smiling face with heart-eyes" },
    { code: "1F618", desc: "Face blowing a kiss" },
    { code: "1F61B", desc: "Face with tongue" },
    { code: "1F61C", desc: "Winking face with tongue" },
    { code: "1F604", desc: "Grinning face with smiling eyes" },
    { code: "1F469", desc: "Woman" },
    { code: "1F468", desc: "Man" },
    { code: "1F467", desc: "Girl" },
    { code: "1F466", desc: "Boy" },
    { code: "1F476", desc: "Baby" },
    { code: "1F475", desc: "Old woman" },
    { code: "1F474", desc: "Old man" },
    { code: "1F46E", desc: "Police officer" },
    { code: "1F477", desc: "Construction worker" },
    { code: "1F482", desc: "Guard" },
    { code: "1F575", desc: "Detective" },
    { code: "1F9D1", desc: "Cook" }
  ]
}, {
  name: "Animals & Nature",
  code: "1F435",
  iconCss: "e-animals",
  icons: [
    { code: "1F436", desc: "Dog face" },
    { code: "1F431", desc: "Cat face" },
    { code: "1F42D", desc: "Mouse face" },
    { code: "1F439", desc: "Hamster face" },
    { code: "1F430", desc: "Rabbit face" },
    { code: "1F98A", desc: "Fox face" },
    { code: "1F43B", desc: "Bear face" },
    { code: "1F43C", desc: "Panda face" },
    { code: "1F428", desc: "Koala" },
    { code: "1F42F", desc: "Tiger face" },
    { code: "1F981", desc: "Lion face" },
    { code: "1F42E", desc: "Cow face" },
    { code: "1F437", desc: "Pig face" },
    { code: "1F43D", desc: "Pig nose" },
    { code: "1F438", desc: "Frog face" },
    { code: "1F435", desc: "Monkey face" },
    { code: "1F649", desc: "Hear-no-evil monkey" },
    { code: "1F64A", desc: "Speak-no-evil monkey" },
    { code: "1F412", desc: "Monkey" },
    { code: "1F414", desc: "Chicken" },
    { code: "1F427", desc: "Penguin" },
    { code: "1F426", desc: "Bird" },
    { code: "1F424", desc: "Baby chick" },
    { code: "1F986", desc: "Duck" },
    { code: "1F985", desc: "Eagle" }
  ]
}, {
  name: "Food & Drink",
  code: "1F347",
  iconCss: "e-food-and-drinks",
  icons: [
    { code: "1F34E", desc: "Red apple" },
    { code: "1F34C", desc: "Banana" },
    { code: "1F347", desc: "Grapes" },
    { code: "1F353", desc: "Strawberry" },
    { code: "1F35E", desc: "Bread" },
    { code: "1F950", desc: "Croissant" },
    { code: "1F955", desc: "Carrot" },
    { code: "1F354", desc: "Hamburger" },
    { code: "1F355", desc: "Pizza" },
    { code: "1F32D", desc: "Hot dog" },
    { code: "1F35F", desc: "French fries" },
    { code: "1F37F", desc: "Popcorn" },
    { code: "1F366", desc: "Soft ice cream" },
    { code: "1F367", desc: "Shaved ice" },
    { code: "1F36A", desc: "Cookie" },
    { code: "1F382", desc: "Birthday cake" },
    { code: "1F370", desc: "Shortcake" },
    { code: "1F36B", desc: "Chocolate bar" },
    { code: "1F369", desc: "Donut" },
    { code: "1F36E", desc: "Custard" },
    { code: "1F36D", desc: "Lollipop" },
    { code: "1F36C", desc: "Candy" },
    { code: "1F377", desc: "Wine glass" },
    { code: "1F37A", desc: "Beer mug" },
    { code: "1F37E", desc: "Bottle with popping cork" }
  ]
}, {
  name: "Activities",
  code: "1F383",
  iconCss: "e-activities",
  icons: [
    { code: "26BD", desc: "Soccer ball" },
    { code: "1F3C0", desc: "Basketball" },
    { code: "1F3C8", desc: "American football" },
    { code: "26BE", desc: "Baseball" },
    { code: "1F3BE", desc: "Tennis" },
    { code: "1F3D0", desc: "Volleyball" },
    { code: "1F3C9", desc: "Rugby football" },
    { code: "1F3B1", desc: "Pool 8 ball" },
    { code: "1F3D3", desc: "Ping pong" },
    { code: "1F3F8", desc: "Badminton" },
    { code: "1F94A", desc: "Boxing glove" },
    { code: "1F3CA", desc: "Swimmer" },
    { code: "1F3CB", desc: "Weightlifter" },
    { code: "1F6B4", desc: "Bicyclist" },
    { code: "1F6F9", desc: "Skateboard" },
    { code: "1F3AE", desc: "Video game" },
    { code: "1F579", desc: "Joystick" },
    { code: "1F3CF", desc: "Cricket" },
    { code: "1F3C7", desc: "Horse racing" },
    { code: "1F3AF", desc: "Direct hit" },
    { code: "1F3D1", desc: "Field hockey" },
    { code: "1F3B0", desc: "Slot machine" },
    { code: "1F3B3", desc: "Bowling" },
    { code: "1F3B2", desc: "Game die" },
    { code: "265F", desc: "Chess pawn" }
  ]
}, {
  name: "Travel & Places",
  code: "1F30D",
  iconCss: "e-travel-and-places",
  icons: [
    { code: "2708", desc: "Airplane" },
    { code: "1F697", desc: "Automobile" },
    { code: "1F695", desc: "Taxi" },
    { code: "1F6B2", desc: "Bicycle" },
    { code: "1F68C", desc: "Bus" },
    { code: "1F682", desc: "Locomotive" },
    { code: "1F6F3", desc: "Passenger ship" },
    { code: "1F680", desc: "Rocket" },
    { code: "1F681", desc: "Helicopter" },
    { code: "1F6A2", desc: "Ship" },
    { code: "1F3DF", desc: "Stadium" },
    { code: "1F54C", desc: "Mosque" },
    { code: "26EA", desc: "Church" },
    { code: "1F6D5", desc: "Hindu Temple" },
    { code: "1F3D4", desc: "Snow-capped mountain" },
    { code: "1F3EB", desc: "School" },
    { code: "1F30B", desc: "Volcano" },
    { code: "1F3D6", desc: "Beach with umbrella" },
    { code: "1F3DD", desc: "Desert island" },
    { code: "1F3DE", desc: "National park" },
    { code: "1F3F0", desc: "Castle" },
    { code: "1F5FC", desc: "Tokyo tower" },
    { code: "1F5FD", desc: "Statue of liberty" },
    { code: "26E9", desc: "Shinto shrine" },
    { code: "1F3EF", desc: "Japanese castle" },
    { code: "1F3A2", desc: "Roller coaster" }
  ]
}, {
  name: "Objects",
  code: "1F507",
  iconCss: "e-objects",
  icons: [
    { code: "1F4A1", desc: "Light bulb" },
    { code: "1F526", desc: "Flashlight" },
    { code: "1F4BB", desc: "Laptop computer" },
    { code: "1F5A5", desc: "Desktop computer" },
    { code: "1F5A8", desc: "Printer" },
    { code: "1F4F7", desc: "Camera" },
    { code: "1F4F8", desc: "Camera with flash" },
    { code: "1F4FD", desc: "Film projector" },
    { code: "1F3A5", desc: "Movie camera" },
    { code: "1F4FA", desc: "Television" },
    { code: "1F4FB", desc: "Radio" },
    { code: "1F50B", desc: "Battery" },
    { code: "231A", desc: "Watch" },
    { code: "1F4F1", desc: "Mobile phone" },
    { code: "260E", desc: "Telephone" },
    { code: "1F4BE", desc: "Floppy disk" },
    { code: "1F4BF", desc: "Optical disk" },
    { code: "1F4C0", desc: "Digital versatile disc" },
    { code: "1F4BD", desc: "Computer disk" },
    { code: "1F3A7", desc: "Headphone" },
    { code: "1F3A4", desc: "Microphone" },
    { code: "1F3B6", desc: "Multiple musical notes" },
    { code: "1F4DA", desc: "Books" }
  ]
}, {
  name: "Symbols",
  code: "1F3E7",
  iconCss: "e-symbols",
  icons: [
    { code: "274C", desc: "Cross mark" },
    { code: "2714", desc: "Check mark" },
    { code: "26A0", desc: "Warning sign" },
    { code: "1F6AB", desc: "Prohibited" },
    { code: "2139", desc: "Information" },
    { code: "267B", desc: "Recycling symbol" },
    { code: "1F6AD", desc: "No smoking" },
    { code: "1F4F5", desc: "No mobile phones" },
    { code: "1F6AF", desc: "No littering" },
    { code: "1F6B3", desc: "No bicycles" },
    { code: "1F6B7", desc: "No pedestrians" },
    { code: "2795", desc: "Plus" },
    { code: "2796", desc: "Minus" },
    { code: "2797", desc: "Divide" },
    { code: "2716", desc: "Multiplication" },
    { code: "1F4B2", desc: "Dollar banknote" },
    { code: "1F4AC", desc: "Speech balloon" },
    { code: "2755", desc: "White exclamation mark" },
    { code: "2754", desc: "White question mark" },
    { code: "2764", desc: "Red heart" }
  ]
}];

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/models/default-locale.js
var defaultLocale = {
  "alignments": "Alignments",
  "justifyLeft": "Align Left",
  "justifyCenter": "Align Center",
  "justifyRight": "Align Right",
  "justifyFull": "Align Justify",
  "fontName": "Font Name",
  "fontSize": "Font Size",
  "fontColor": "Font Color",
  "backgroundColor": "Background Color",
  "bold": "Bold",
  "italic": "Italic",
  "underline": "Underline",
  "strikethrough": "Strikethrough",
  "clearFormat": "Clear Format",
  "clearAll": "Clear All",
  "cut": "Cut",
  "copy": "Copy",
  "paste": "Paste",
  "unorderedList": "Bulleted List",
  "orderedList": "Numbered List",
  "indent": "Increase Indent",
  "outdent": "Decrease Indent",
  "undo": "Undo",
  "redo": "Redo",
  "superscript": "Superscript",
  "subscript": "Subscript",
  "createLink": "Insert Link",
  "openLink": "Open Link",
  "editLink": "Edit Link",
  "removeLink": "Remove Link",
  "image": "Insert Image",
  "audio": "Insert Audio",
  "video": "Insert Video",
  "replace": "Replace",
  "numberFormatList": "Number Format List",
  "bulletFormatList": "Bullet Format List",
  "audioReplace": "Replace",
  "videoReplace": "Replace",
  "videoAlign": "Align",
  "videoDimension": "Dimension",
  "audioRemove": "Remove",
  "videoRemove": "Remove",
  "audioLayoutOption": "Layout option",
  "videoLayoutOption": "Layout option",
  "align": "Align",
  "caption": "Image Caption",
  "remove": "Remove",
  "insertLink": "Insert Link",
  "display": "Display",
  "altText": "Alternative Text",
  "dimension": "Change Size",
  "fullscreen": "Maximize",
  "maximize": "Maximize",
  "minimize": "Minimize",
  "lowerCase": "Lower Case",
  "upperCase": "Upper Case",
  "print": "Print",
  "formats": "Formats",
  "sourcecode": "Code View",
  "preview": "Preview",
  "viewside": "ViewSide",
  "insertCode": "Insert Code",
  "linkText": "Display Text",
  "linkTooltipLabel": "Title",
  "linkWebUrl": "Web Address",
  "linkTitle": "Enter a title",
  "linkurl": "http://example.com",
  "linkOpenInNewWindow": "Open Link in New Window",
  "linkHeader": "Insert Link",
  "dialogInsert": "Insert",
  "dialogCancel": "Cancel",
  "dialogUpdate": "Update",
  "imageHeader": "Insert Image",
  "audioHeader": "Insert Audio",
  "videoHeader": "Insert Video",
  "imageLinkHeader": "You can also provide a link from the web",
  "audioLinkHeader": "You can also provide a link from the web",
  "videoLinkHeader": "Web URL",
  "embedVideoLinkHeader": "Media Embed URL",
  "mdimageLink": "Please provide a URL for your image",
  "imageUploadMessage": "Drop image here or browse to upload",
  "audioUploadMessage": "Drop an audio file or browse to upload",
  "videoUploadMessage": "Drop a video file or browse to upload",
  "imageDeviceUploadMessage": "Click here to upload",
  "audioDeviceUploadMessage": "Click here to upload",
  "videoDeviceUploadMessage": "Click here to upload",
  "imageAlternateText": "Alternate Text",
  "alternateHeader": "Alternative Text",
  "browse": "Browse",
  "imageUrl": "http://example.com/image.png",
  "audioUrl": "http://example.com/audio.mp3",
  "videoUrl": "http://example.com/video.mp3",
  "webUrl": "Web URL",
  "embedUrl": "Embed Code",
  "imageCaption": "Caption",
  "imageSizeHeader": "Image Size",
  "videoSizeHeader": "Video Size",
  "imageHeight": "Height",
  "imageWidth": "Width",
  "videoHeight": "Height",
  "videoWidth": "Width",
  "textPlaceholder": "Enter Text",
  "inserttablebtn": "Insert Table",
  "tabledialogHeader": "Insert Table",
  "tableWidth": "Width",
  "cellpadding": "Cell Padding",
  "cellspacing": "Cell Spacing",
  "columns": "Number of columns",
  "rows": "Number of rows",
  "tableRows": "Table Rows",
  "tableColumns": "Table Columns",
  "tableCellHorizontalAlign": "Table Cell Horizontal Align",
  "tableCellVerticalAlign": "Table Cell Vertical Align",
  "createTable": "Create Table",
  "removeTable": "Remove Table",
  "tableHeader": "Table Header",
  "tableRemove": "Table Remove",
  "tableCellBackground": "Table Cell Background",
  "tableEditProperties": "Table Edit Properties",
  "styles": "Styles",
  "insertColumnLeft": "Insert Column Left",
  "insertColumnRight": "Insert Column Right",
  "deleteColumn": "Delete Column",
  "insertRowBefore": "Insert Row Before",
  "insertRowAfter": "Insert Row After",
  "deleteRow": "Delete Row",
  "tableEditHeader": "Edit Table",
  "TableHeadingText": "Heading",
  "TableColText": "Col",
  "imageInsertLinkHeader": "Insert Link",
  "editImageHeader": "Edit Image",
  "editAudioHeader": "Edit Audio",
  "editVideoHeader": "Edit Video",
  "alignmentsDropDownLeft": "Align Left",
  "alignmentsDropDownCenter": "Align Center",
  "alignmentsDropDownRight": "Align Right",
  "alignmentsDropDownJustify": "Align Justify",
  "imageDisplayDropDownInline": "Inline",
  "imageDisplayDropDownBreak": "Break",
  "audioLayoutOptionDropDownInline": "Inline",
  "audioLayoutOptionDropDownBreak": "Break",
  "videoLayoutOptionDropDownInline": "Inline",
  "videoLayoutOptionDropDownBreak": "Break",
  "tableInsertRowDropDownBefore": "Insert row before",
  "tableInsertRowDropDownAfter": "Insert row after",
  "tableInsertRowDropDownDelete": "Delete row",
  "tableInsertColumnDropDownLeft": "Insert column left",
  "tableInsertColumnDropDownRight": "Insert column right",
  "tableInsertColumnDropDownDelete": "Delete column",
  "tableVerticalAlignDropDownTop": "Align Top",
  "tableVerticalAlignDropDownMiddle": "Align Middle",
  "tableVerticalAlignDropDownBottom": "Align Bottom",
  "tableStylesDropDownDashedBorder": "Dashed Borders",
  "tableStylesDropDownAlternateRows": "Alternate Rows",
  "pasteFormat": "Paste Format",
  "pasteFormatContent": "Choose the formatting action",
  "plainText": "Plain Text",
  "cleanFormat": "Clean",
  "keepFormat": "Keep",
  "pasteDialogOk": "OK",
  "pasteDialogCancel": "Cancel",
  "fileManager": "File Manager",
  "fileDialogHeader": "File Browser",
  "formatsDropDownParagraph": "Paragraph",
  "formatsDropDownCode": "Code",
  "formatsDropDownQuotation": "Quotation",
  "formatsDropDownHeading1": "Heading 1",
  "formatsDropDownHeading2": "Heading 2",
  "formatsDropDownHeading3": "Heading 3",
  "formatsDropDownHeading4": "Heading 4",
  "fontNameSegoeUI": "Segoe UI",
  "fontNameArial": "Arial",
  "fontNameGeorgia": "Georgia",
  "fontNameImpact": "Impact",
  "fontNameTahoma": "Tahoma",
  "fontNameTimesNewRoman": "Times New Roman",
  "fontNameVerdana": "Verdana",
  "numberFormatListNumber": "Number",
  "numberFormatListLowerAlpha": "LowerAlpha",
  "numberFormatListUpperAlpha": "UpperAlpha",
  "numberFormatListLowerRoman": "LowerRoman",
  "numberFormatListUpperRoman": "UpperRoman",
  "numberFormatListLowerGreek": "LowerGreek",
  "bulletFormatListDisc": "Disc",
  "bulletFormatListCircle": "Circle",
  "bulletFormatListSquare": "Square",
  "numberFormatListNone": "None",
  "bulletFormatListNone": "None",
  "formatPainter": "Format Painter",
  "emojiPicker": "Emoji Picker",
  "embeddedCode": "Embedded Code",
  "pasteEmbeddedCodeHere": "Paste Embedded Code here",
  "emojiPickerTypeToFind": "Type to find",
  "emojiPickerNoResultFound": "No results found",
  "emojiPickerTrySomethingElse": "Try something else"
};
var toolsLocale = {
  "alignments": "alignments",
  "justifyleft": "justifyLeft",
  "justifycenter": "justifyCenter",
  "justifyright": "justifyRight",
  "justifyfull": "justifyFull",
  "fontname": "fontName",
  "fontsize": "fontSize",
  "fontcolor": "fontColor",
  "backgroundcolor": "backgroundColor",
  "bold": "bold",
  "italic": "italic",
  "underline": "underline",
  "strikethrough": "strikethrough",
  "clearformat": "clearFormat",
  "clearall": "clearAll",
  "cut": "cut",
  "copy": "copy",
  "paste": "paste",
  "unorderedlist": "unorderedList",
  "orderedlist": "orderedList",
  "indent": "indent",
  "outdent": "outdent",
  "numberformatlist": "numberFormatList",
  "bulletformatlist": "bulletFormatList",
  "undo": "undo",
  "redo": "redo",
  "superscript": "superscript",
  "subscript": "subscript",
  "createlink": "createLink",
  "openlink": "openLink",
  "editlink": "editLink",
  "removelink": "removeLink",
  "openimagelink": "openLink",
  "editimagelink": "editLink",
  "removeimagelink": "removeLink",
  "image": "image",
  "audio": "audio",
  "video": "video",
  "replace": "replace",
  "audioreplace": "audioReplace",
  "videoreplace": "videoReplace",
  "videoalign": "videoAlign",
  "videodimension": "videoDimension",
  "audioremove": "audioRemove",
  "videoremove": "videoRemove",
  "audiolayoutoption": "audioLayoutOption",
  "videolayoutoption": "videoLayoutOption",
  "align": "align",
  "caption": "caption",
  "remove": "remove",
  "insertlink": "insertLink",
  "display": "display",
  "alttext": "altText",
  "dimension": "dimension",
  "fullscreen": "fullscreen",
  "maximize": "maximize",
  "minimize": "minimize",
  "lowercase": "lowerCase",
  "uppercase": "upperCase",
  "print": "print",
  "formats": "formats",
  "sourcecode": "sourcecode",
  "preview": "preview",
  "viewside": "viewside",
  "insertcode": "insertCode",
  "tablerows": "tableRows",
  "tablecolumns": "tableColumns",
  "tablecellhorizontalalign": "tableCellHorizontalAlign",
  "tablecellverticalalign": "tableCellVerticalAlign",
  "createtable": "createTable",
  "removetable": "removeTable",
  "tableheader": "tableHeader",
  "tableremove": "tableRemove",
  "tablecellbackground": "tableCellBackground",
  "tableeditproperties": "tableEditProperties",
  "styles": "styles",
  "insertcolumnleft": "insertColumnLeft",
  "insertcolumnright": "insertColumnRight",
  "deletecolumn": "deleteColumn",
  "aligntop": "AlignTop",
  "alignmiddle": "AlignMiddle",
  "alignbottom": "AlignBottom",
  "insertrowbefore": "insertRowBefore",
  "insertrowafter": "insertRowAfter",
  "deleterow": "deleteRow",
  "formatpainter": "formatPainter",
  "emojipicker": "emojiPicker",
  "embeddedCode": "Embedded Code",
  "pasteEmbeddedCodeHere": "Paste Embedded Code here",
  "emojiPickerTypeToFind": "Type to find",
  "emojiPickerNoResultFound": "No results found",
  "emojiPickerTrySomethingElse": "Try something else"
};
var fontNameLocale = [
  { locale: "fontNameSegoeUI", value: "Segoe UI" },
  { locale: "fontNameArial", value: "Arial,Helvetica,sans-serif" },
  { locale: "fontNameGeorgia", value: "Georgia,serif" },
  { locale: "fontNameImpact", value: "Impact,Charcoal,sans-serif" },
  { locale: "fontNameTahoma", value: "Tahoma,Geneva,sans-serif" },
  { locale: "fontNameTimesNewRoman", value: "Times New Roman,Times,serif" },
  { locale: "fontNameVerdana", value: "Verdana,Geneva,sans-serif" }
];
var formatsLocale = [
  { locale: "formatsDropDownParagraph", value: "P" },
  { locale: "formatsDropDownCode", value: "Pre" },
  { locale: "formatsDropDownQuotation", value: "BlockQuote" },
  { locale: "formatsDropDownHeading1", value: "H1" },
  { locale: "formatsDropDownHeading2", value: "H2" },
  { locale: "formatsDropDownHeading3", value: "H3" },
  { locale: "formatsDropDownHeading4", value: "H4" }
];
var numberFormatListLocale = [
  { locale: "numberFormatListNone", value: "none" },
  { locale: "numberFormatListNumber", value: "decimal" },
  { locale: "numberFormatListLowerAlpha", value: "lower-alpha" },
  { locale: "numberFormatListUpperAlpha", value: "upper-alpha" },
  { locale: "numberFormatListLowerRoman", value: "lower-roman" },
  { locale: "numberFormatListUpperRoman", value: "upper-roman" },
  { locale: "numberFormatListLowerGreek", value: "lower-greek" }
];
var bulletFormatListLocale = [
  { locale: "bulletFormatListNone", value: "none" },
  { locale: "bulletFormatListDisc", value: "disc" },
  { locale: "bulletFormatListCircle", value: "circle" },
  { locale: "bulletFormatListSquare", value: "square" }
];

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/base/util.js
var undoRedoItems = ["Undo", "Redo"];
var inlineNode = [
  "a",
  "abbr",
  "acronym",
  "audio",
  "b",
  "bdi",
  "bdo",
  "big",
  "br",
  "button",
  "canvas",
  "cite",
  "code",
  "data",
  "datalist",
  "del",
  "dfn",
  "em",
  "embed",
  "font",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "map",
  "mark",
  "meter",
  "noscript",
  "object",
  "output",
  "picture",
  "progress",
  "q",
  "ruby",
  "s",
  "samp",
  "script",
  "select",
  "slot",
  "small",
  "span",
  "strong",
  "strike",
  "sub",
  "sup",
  "svg",
  "template",
  "textarea",
  "time",
  "u",
  "tt",
  "var",
  "video",
  "wbr"
];
function getIndex(val, items) {
  var index = -1;
  items.some(function(item, i) {
    if (typeof item === "string" && val === item.toLocaleLowerCase()) {
      index = i;
      return true;
    }
    return false;
  });
  return index;
}
function hasClass(element, className) {
  var hasClass2 = false;
  if (element.classList.contains(className)) {
    hasClass2 = true;
  }
  return hasClass2;
}
function getDropDownValue(items, value, type, returnType) {
  var data;
  var result;
  for (var k = 0; k < items.length; k++) {
    if (type === "value" && items[k].value.toLocaleLowerCase() === value.toLocaleLowerCase()) {
      data = items[k];
      break;
    } else if (type === "text" && items[k].text.toLocaleLowerCase() === value.toLocaleLowerCase()) {
      data = items[k];
      break;
    } else if (type === "subCommand" && items[k].subCommand.toLocaleLowerCase() === value.toLocaleLowerCase()) {
      data = items[k];
      break;
    }
  }
  if (!isNullOrUndefined(data)) {
    switch (returnType) {
      case "text":
        result = data.text;
        break;
      case "value":
        result = data.value;
        break;
      case "iconCss":
        result = data.iconCss;
        break;
    }
  }
  return result;
}
function isIDevice() {
  var result = false;
  if (Browser.isDevice && Browser.isIos) {
    result = true;
  }
  return result;
}
function getFormattedFontSize(value) {
  if (isNullOrUndefined(value)) {
    return "";
  }
  return value;
}
function pageYOffset(e, parentElement, isIFrame) {
  var y = 0;
  if (isIFrame) {
    y = window.pageYOffset + parentElement.getBoundingClientRect().top + e.clientY;
  } else {
    y = e.pageY;
  }
  return y;
}
function getTooltipText(item, serviceLocator) {
  var i10n = serviceLocator.getService("rteLocale");
  var itemLocale = toolsLocale["" + item];
  var tooltipText = i10n.getConstant(itemLocale);
  return tooltipText;
}
function setToolbarStatus(e, isPopToolbar, self) {
  updateDropDownFontFormatLocale(self);
  var dropDown = e.dropDownModule;
  var data = e.args;
  var keys = Object.keys(e.args);
  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
    var key = keys_1[_i];
    for (var j = 0; j < e.tbItems.length; j++) {
      var item = e.tbItems[j].subCommand;
      var itemStr = item && item.toLocaleLowerCase();
      if (item && itemStr === key || item === "UL" && key === "unorderedlist" || item === "OL" && key === "orderedlist" || itemStr === "pre" && key === "insertcode" || (item === "NumberFormatList" && key === "numberFormatList" || item === "BulletFormatList" && key === "bulletFormatList")) {
        if (typeof data["" + key] === "boolean") {
          if (data["" + key] === true) {
            addClass([e.tbElements[j]], [CLS_ACTIVE]);
          } else {
            removeClass([e.tbElements[j]], [CLS_ACTIVE]);
          }
        } else if ((typeof data["" + key] === "string" || data["" + key] === null) && getIndex(key, e.parent.toolbarSettings.items) > -1) {
          var value = data["" + key] ? data["" + key] : "";
          var result = "";
          switch (key) {
            case "formats": {
              if (isNullOrUndefined(dropDown.formatDropDown) || isPopToolbar || !isNullOrUndefined(dropDown.formatDropDown) && dropDown.formatDropDown.isDestroyed) {
                break;
              }
              var formatItems2 = e.parent.format.types;
              var formatContent = isNullOrUndefined(e.parent.format.default) ? formatItems2[0].text : e.parent.format.default;
              result = getDropDownValue(formatItems2, value, "subCommand", "text");
              dropDown.formatDropDown.content = '<span style="display: inline-flex;width:' + e.parent.format.width + '" ><span class="e-rte-dropdown-btn-text' + (isNullOrUndefined(e.parent.cssClass) ? "" : " " + e.parent.cssClass) + '">' + (isNullOrUndefined(result) ? formatContent : result) + "</span></span>";
              dropDown.formatDropDown.dataBind();
              break;
            }
            case "alignments": {
              if (isNullOrUndefined(dropDown.alignDropDown) || !isNullOrUndefined(dropDown.alignDropDown) && dropDown.alignDropDown.isDestroyed) {
                break;
              }
              var alignItems = alignmentItems;
              result = getDropDownValue(alignItems, value, "subCommand", "iconCss");
              dropDown.alignDropDown.iconCss = isNullOrUndefined(result) ? "e-icons e-justify-left" : result;
              dropDown.alignDropDown.dataBind();
              break;
            }
            case "fontname": {
              if (isNullOrUndefined(dropDown.fontNameDropDown) || isPopToolbar || !isNullOrUndefined(dropDown.fontNameDropDown) && dropDown.fontNameDropDown.isDestroyed) {
                break;
              }
              var fontNameItems = e.parent.fontFamily.items;
              result = getDropDownValue(fontNameItems, value, "value", "text");
              var fontNameContent = isNullOrUndefined(e.parent.fontFamily.default) ? fontNameItems[0].text : e.parent.fontFamily.default;
              var name_1 = isNullOrUndefined(result) ? fontNameContent : result;
              dropDown.fontNameDropDown.content = '<span style="display: inline-flex;width:' + e.parent.fontFamily.width + '" ><span class="e-rte-dropdown-btn-text' + (isNullOrUndefined(e.parent.cssClass) ? "" : " " + e.parent.cssClass) + '">' + name_1 + "</span></span>";
              dropDown.fontNameDropDown.dataBind();
              break;
            }
            case "fontsize": {
              if (isNullOrUndefined(dropDown.fontSizeDropDown) || !isNullOrUndefined(dropDown.fontSizeDropDown) && dropDown.fontSizeDropDown.isDestroyed) {
                break;
              }
              var fontSizeItems = e.parent.fontSize.items;
              var fontSizeContent = isNullOrUndefined(e.parent.fontSize.default) ? fontSizeItems[1].text : e.parent.fontSize.default;
              result = getDropDownValue(fontSizeItems, value === "" ? fontSizeContent.replace(/\s/g, "") : value, "value", "text");
              dropDown.fontSizeDropDown.content = '<span style="display: inline-flex;width:' + e.parent.fontSize.width + '" ><span class="e-rte-dropdown-btn-text' + (isNullOrUndefined(e.parent.cssClass) ? "" : " " + e.parent.cssClass) + '">' + getFormattedFontSize(result) + "</span></span>";
              dropDown.fontSizeDropDown.dataBind();
              break;
            }
          }
        }
      }
    }
  }
}
function getCollection(items) {
  if (typeof items === "object") {
    return items;
  } else {
    return [items];
  }
}
function getTBarItemsIndex(items, toolbarItems2) {
  var itemsIndex = [];
  for (var i = 0; i < items.length; i++) {
    for (var j = 0; j < toolbarItems2.length; j++) {
      if (toolbarItems2[j].type === "Separator") {
        continue;
      } else {
        if (items[i] === "OrderedList" && toolbarItems2[j].subCommand === "OL") {
          itemsIndex.push(j);
          break;
        } else if (items[i] === "UnorderedList" && toolbarItems2[j].subCommand === "UL") {
          itemsIndex.push(j);
          break;
        } else if (items[i] === "InsertCode" && toolbarItems2[j].subCommand === "Pre") {
          itemsIndex.push(j);
          break;
        } else if (items[i] === "FileManager" && toolbarItems2[j].subCommand === "File") {
          itemsIndex.push(j);
          break;
        } else if (typeof items[i] === "object" && items[i].command === "Custom") {
          itemsIndex.push(i);
          break;
        } else if (items[i] === toolbarItems2[j].subCommand) {
          itemsIndex.push(j);
          break;
        }
      }
    }
  }
  return itemsIndex;
}
function updateUndoRedoStatus(baseToolbar, undoRedoStatus) {
  var i = 0;
  var trgItems = getTBarItemsIndex(getCollection(undoRedoItems), baseToolbar.toolbarObj.items);
  var tbItems = selectAll("." + CLS_TB_ITEM, baseToolbar.toolbarObj.element);
  var keys = Object.keys(undoRedoStatus);
  for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
    var key = keys_2[_i];
    var target = tbItems[trgItems[i]];
    if (target) {
      baseToolbar.toolbarObj.enableItems(target, undoRedoStatus["" + key]);
    }
    i++;
  }
}
function dispatchEvent(element, type) {
  var evt = document.createEvent("HTMLEvents");
  evt.initEvent(type, false, true);
  element.dispatchEvent(evt);
}
function parseHtml(value) {
  var tempNode = createElement("template");
  tempNode.innerHTML = value;
  if (tempNode.content instanceof DocumentFragment) {
    return tempNode.content;
  } else {
    return document.createRange().createContextualFragment(value);
  }
}
function getTextNodesUnder(docElement, node) {
  var nodes = [];
  for (node = node.firstChild; node; node = node.nextSibling) {
    if (node.nodeType === 3) {
      nodes.push(node);
    } else {
      nodes = nodes.concat(getTextNodesUnder(docElement, node));
    }
  }
  return nodes;
}
function toObjectLowerCase(obj) {
  var convertedValue = {};
  var keys = Object.keys(obj);
  for (var i = 0; i < Object.keys(obj).length; i++) {
    convertedValue[keys[i].toLocaleLowerCase()] = obj[keys[i]];
  }
  return convertedValue;
}
function getEditValue(value, rteObj) {
  var val;
  if (value !== null && value !== "") {
    val = rteObj.enableHtmlEncode ? updateTextNode(decode(value), rteObj) : updateTextNode(value, rteObj);
    rteObj.setProperties({ value: val }, true);
  } else {
    if (rteObj.enterKey === "DIV") {
      val = rteObj.enableHtmlEncode ? "&lt;div&gt;&lt;br/&gt;&lt;/div&gt;" : "<div><br/></div>";
    } else if (rteObj.enterKey === "BR") {
      val = rteObj.enableHtmlEncode ? "&lt;br/&gt;" : "<br/>";
    } else {
      val = rteObj.enableHtmlEncode ? "&lt;p&gt;&lt;br/&gt;&lt;/p&gt;" : "<p><br/></p>";
    }
  }
  return val;
}
function updateTextNode(value, rteObj) {
  var tempNode = document.createElement("div");
  var resultElm = document.createElement("div");
  var childNodes = tempNode.childNodes;
  tempNode.innerHTML = value;
  tempNode.setAttribute("class", "tempDiv");
  if (childNodes.length > 0) {
    var isPreviousInlineElem = void 0;
    var previousParent = void 0;
    var insertElem = void 0;
    while (tempNode.firstChild) {
      var emptyBlockElem = tempNode.querySelectorAll(blockEmptyNodes);
      for (var i = 0; i < emptyBlockElem.length; i++) {
        emptyBlockElem[i].innerHTML = "<br>";
      }
      var emptyInlineElem = tempNode.querySelectorAll(inlineEmptyNodes);
      for (var i = 0; i < emptyInlineElem.length; i++) {
        emptyInlineElem[i].innerHTML = "&ZeroWidthSpace;";
      }
      if (rteObj.enterKey !== "BR" && (tempNode.firstChild.nodeName === "#text" && (tempNode.firstChild.textContent.indexOf("\n") < 0 || tempNode.firstChild.textContent.trim() !== "") || inlineNode.indexOf(tempNode.firstChild.nodeName.toLocaleLowerCase()) >= 0)) {
        if (!isPreviousInlineElem) {
          if (rteObj.enterKey === "DIV") {
            insertElem = createElement("div");
          } else {
            insertElem = createElement("p");
          }
          resultElm.appendChild(insertElem);
          insertElem.appendChild(tempNode.firstChild);
        } else {
          previousParent.appendChild(tempNode.firstChild);
        }
        previousParent = insertElem;
        isPreviousInlineElem = true;
      } else if (tempNode.firstChild.nodeName === "#text" && (tempNode.firstChild.textContent === "\n" || tempNode.firstChild.textContent.indexOf("\n") >= 0 && tempNode.firstChild.textContent.trim() === "")) {
        detach(tempNode.firstChild);
      } else {
        resultElm.appendChild(tempNode.firstChild);
        isPreviousInlineElem = false;
      }
    }
    var imageElm = resultElm.querySelectorAll("img");
    for (var i = 0; i < imageElm.length; i++) {
      if (!imageElm[i].classList.contains(CLS_RTE_IMAGE)) {
        imageElm[i].classList.add(CLS_RTE_IMAGE);
      }
      if (!(imageElm[i].classList.contains(CLS_IMGINLINE) || imageElm[i].classList.contains(CLS_IMGBREAK))) {
        imageElm[i].classList.add(CLS_IMGINLINE);
      }
    }
  }
  return resultElm.innerHTML;
}
function getDefaultValue(rteObj) {
  var currentVal;
  if (rteObj.enterKey === "DIV") {
    currentVal = rteObj.enableHtmlEncode ? "&lt;div&gt;&lt;br/&gt;&lt;/div&gt;" : "<div><br/></div>";
  } else if (rteObj.enterKey === "BR") {
    currentVal = rteObj.enableHtmlEncode ? "&lt;br/&gt;" : "<br/>";
  } else {
    currentVal = rteObj.enableHtmlEncode ? "&lt;p&gt;&lt;br/&gt;&lt;/p&gt;" : "<p><br/></p>";
  }
  return currentVal;
}
function isEditableValueEmpty(value) {
  return value === "<p><br></p>" || value === "&lt;p&gt;&lt;br&gt;&lt;/p&gt;" || value === "<div><br></div>" || value === "&lt;div&gt;&lt;br&gt;&lt;/div&gt;" || value === "<br>" || value === "&lt;br&gt;" || value === "" ? true : false;
}
function decode(value) {
  return value.replace(/&amp;/g, "&").replace(/&amp;lt;/g, "<").replace(/&lt;/g, "<").replace(/&amp;gt;/g, ">").replace(/&gt;/g, ">").replace(/&nbsp;/g, " ").replace(/&amp;nbsp;/g, " ").replace(/&quot;/g, "");
}
function sanitizeHelper(value, parent) {
  if (parent.enableHtmlSanitizer) {
    var item = SanitizeHtmlHelper.beforeSanitize();
    if (item.selectors.tags[2] && item.selectors.tags[2].indexOf("iframe") > -1) {
      item.selectors.tags[2] = "iframe:not(.e-rte-embed-url)";
    }
    var beforeEvent = {
      cancel: false,
      helper: null
    };
    extend(item, item, beforeEvent);
    parent.trigger("beforeSanitizeHtml", item);
    if (item.cancel && !isNullOrUndefined(item.helper)) {
      value = item.helper(value);
    } else if (!item.cancel) {
      value = SanitizeHtmlHelper.serializeValue(item, value);
    }
  }
  return value;
}
function convertToBlob(dataUrl) {
  var arr = dataUrl.split(",");
  var mime = arr[0].match(/:(.*?);/)[1];
  var bstr = atob(arr[1]);
  var n = bstr.length;
  var u8arr = new Uint8Array(n);
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }
  return new Blob([u8arr], { type: mime });
}
function getLocaleFontFormat(self, localeItems, item) {
  for (var i = 0; localeItems.length > i; i++) {
    if (localeItems[i].value === item.value || localeItems[i].value === item.subCommand) {
      return self.localeObj.getConstant(localeItems[i].locale);
    }
  }
  return item.text;
}
function updateDropDownFontFormatLocale(self) {
  fontFamily.forEach(function(item, i) {
    fontFamily[i].text = getLocaleFontFormat(self, fontNameLocale, fontFamily[i]);
  });
  formatItems.forEach(function(item, i) {
    formatItems[i].text = getLocaleFontFormat(self, formatsLocale, formatItems[i]);
  });
  numberFormatList.forEach(function(item, i) {
    numberFormatList[i].text = getLocaleFontFormat(self, numberFormatListLocale, numberFormatList[i]);
  });
  bulletFormatList.forEach(function(item, i) {
    bulletFormatList[i].text = getLocaleFontFormat(self, bulletFormatListLocale, bulletFormatList[i]);
  });
}

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/toolbar-renderer.js
var ToolbarRenderer = (
  /** @class */
  function() {
    function ToolbarRenderer2(parent) {
      this.parent = parent;
      this.wireEvent();
    }
    ToolbarRenderer2.prototype.wireEvent = function() {
      this.parent.on(destroy, this.unWireEvent, this);
      this.parent.on(maximizeMinimizeClick, this.destroyTooltip, this);
    };
    ToolbarRenderer2.prototype.destroyTooltip = function() {
      this.tooltip.close();
    };
    ToolbarRenderer2.prototype.unWireEvent = function() {
      this.parent.off(destroy, this.unWireEvent);
      if (this.popupOverlay) {
        EventHandler.remove(this.popupOverlay, "click touchmove", this.onPopupOverlay);
      }
      this.removePopupContainer();
    };
    ToolbarRenderer2.prototype.toolbarBeforeCreate = function(e) {
      if (this.mode === "Extended") {
        e.enableCollision = false;
      }
    };
    ToolbarRenderer2.prototype.toolbarCreated = function() {
      this.parent.notify(toolbarCreated, this);
    };
    ToolbarRenderer2.prototype.toolbarClicked = function(args) {
      if (!this.parent.enabled) {
        return;
      }
      if (!this.parent.readonly || isNullOrUndefined(args.item)) {
        this.parent.notify(toolbarClick, args);
      }
      this.parent.trigger("toolbarClick", args);
    };
    ToolbarRenderer2.prototype.dropDownSelected = function(args) {
      this.parent.notify(dropDownSelect, args);
      this.onPopupOverlay();
    };
    ToolbarRenderer2.prototype.beforeDropDownItemRender = function(args) {
      if (this.parent.readonly || !this.parent.enabled) {
        return;
      }
      this.parent.notify(beforeDropDownItemRender, args);
    };
    ToolbarRenderer2.prototype.dropDownOpen = function(args) {
      if (args.element.parentElement.getAttribute("id").indexOf("TableCell") > -1 && !isNullOrUndefined(args.element.parentElement.querySelector(".e-cell-merge")) && (!isNullOrUndefined(args.element.parentElement.querySelector(".e-cell-horizontal-split")) || !isNullOrUndefined(args.element.parentElement.querySelector(".e-cell-vertical-split")))) {
        var listEle = args.element.querySelectorAll("li");
        if (this.parent.inputElement.querySelectorAll(".e-cell-select").length === 1) {
          addClass([listEle[0]], "e-disabled");
          removeClass([listEle[1], listEle[2]], "e-disabled");
        } else if (this.parent.inputElement.querySelectorAll(".e-cell-select").length > 1) {
          removeClass([listEle[0]], "e-disabled");
          addClass([listEle[1], listEle[2]], "e-disabled");
        }
      }
      if (Browser.isDevice && !args.element.parentElement.classList.contains(CLS_QUICK_DROPDOWN)) {
        this.popupModal(args.element.parentElement);
      }
      this.parent.notify(selectionSave, args);
    };
    ToolbarRenderer2.prototype.dropDownClose = function(args) {
      this.removePopupContainer();
      this.parent.notify(selectionRestore, args);
    };
    ToolbarRenderer2.prototype.removePopupContainer = function() {
      if (Browser.isDevice && !isNullOrUndefined(this.popupContainer)) {
        var popupEle = this.popupContainer.querySelector(".e-dropdown-popup.e-tbar-btn.e-control");
        if (popupEle) {
          this.popupContainer.parentNode.insertBefore(popupEle, this.popupContainer.nextSibling);
          popupEle.style.removeProperty("position");
          removeClass([popupEle], "e-popup-modal");
        }
        detach(this.popupContainer);
        this.popupContainer = void 0;
      }
    };
    ToolbarRenderer2.prototype.renderToolbar = function(args) {
      this.setPanel(args.target);
      this.renderPanel();
      this.mode = args.overflowMode;
      args.rteToolbarObj.toolbarObj = new Toolbar({
        items: args.items,
        width: "100%",
        overflowMode: args.overflowMode,
        beforeCreate: this.toolbarBeforeCreate.bind(this),
        created: this.toolbarCreated.bind(this),
        clicked: this.toolbarClicked.bind(this),
        enablePersistence: args.enablePersistence,
        enableRtl: args.enableRtl,
        cssClass: args.cssClass
      });
      args.rteToolbarObj.toolbarObj.isStringTemplate = true;
      args.rteToolbarObj.toolbarObj.createElement = this.parent.createElement;
      args.rteToolbarObj.toolbarObj.appendTo(args.target);
      if (this.parent.showTooltip) {
        this.tooltip = new Tooltip({
          target: "#" + this.parent.getID() + "_toolbar_wrapper [title]",
          showTipPointer: true,
          openDelay: 400,
          cssClass: this.parent.cssClass
        });
        this.tooltip.appendTo(args.target);
      }
    };
    ToolbarRenderer2.prototype.renderDropDownButton = function(args) {
      var _this = this;
      var css;
      args.element.classList.add(CLS_DROPDOWN_BTN);
      css = args.cssClass + " " + CLS_RTE_ELEMENTS + " " + CLS_TB_BTN;
      if (this.parent.inlineMode.enable && Browser.isDevice) {
        css = css + " " + CLS_INLINE_DROPDOWN;
      }
      var proxy = this;
      var dropDown = new DropDownButton({
        items: args.items,
        iconCss: args.iconCss,
        cssClass: css,
        content: args.content,
        enablePersistence: this.parent.enablePersistence,
        enableRtl: this.parent.enableRtl,
        select: this.dropDownSelected.bind(this),
        beforeOpen: function(args2) {
          if (proxy.parent.readonly || !proxy.parent.enabled) {
            args2.cancel = true;
            return;
          }
          for (var index = 0; index < args2.element.childNodes.length; index++) {
            var divNode = _this.parent.createElement("div");
            divNode.innerHTML = dropDown.content.trim();
            if (divNode.textContent.trim() !== "" && args2.element.childNodes[index].textContent.trim() === divNode.textContent.trim()) {
              if (!args2.element.childNodes[index].classList.contains("e-active")) {
                addClass([args2.element.childNodes[index]], "e-active");
              }
            } else {
              removeClass([args2.element.childNodes[index]], "e-active");
            }
          }
          proxy.parent.notify(beforeDropDownOpen, args2);
        },
        close: this.dropDownClose.bind(this),
        open: this.dropDownOpen.bind(this),
        beforeItemRender: this.beforeDropDownItemRender.bind(this)
      });
      dropDown.isStringTemplate = true;
      dropDown.createElement = proxy.parent.createElement;
      dropDown.appendTo(args.element);
      args.element.tabIndex = -1;
      var popupElement = document.getElementById(dropDown.element.id + "-popup");
      popupElement.setAttribute("aria-owns", this.parent.getID());
      return dropDown;
    };
    ToolbarRenderer2.prototype.renderListDropDown = function(args) {
      var proxy = this;
      var css = CLS_RTE_ELEMENTS + " " + CLS_TB_BTN + (this.parent.inlineMode ? " " + CLS_INLINE_DROPDOWN : "");
      css += " " + (args.itemName === "NumberFormatList" ? CLS_NUMBERFORMATLIST_TB_BTN : CLS_BULLETFORMATLIST_TB_BTN);
      var content = proxy.parent.createElement("span", { className: CLS_LIST_PRIMARY_CONTENT });
      var inlineEle = proxy.parent.createElement("span", { className: args.cssClass });
      content.appendChild(inlineEle);
      var dropDown = new DropDownButton({
        items: args.items,
        cssClass: css,
        content: args.content,
        enablePersistence: this.parent.enablePersistence,
        enableRtl: this.parent.enableRtl,
        select: this.dropDownSelected.bind(this),
        beforeOpen: function(args2) {
          if (proxy.parent.readonly || !proxy.parent.enabled) {
            args2.cancel = true;
            return;
          }
          var element = args2.event ? args2.event.target : null;
          proxy.currentElement = dropDown.element;
          proxy.currentDropdown = dropDown;
          if (args2.event && args2.event.type === "click" && (element.classList.contains(CLS_LIST_PRIMARY_CONTENT) || element.parentElement.classList.contains(CLS_LIST_PRIMARY_CONTENT))) {
            args2.cancel = true;
            return;
          }
          proxy.parent.notify(beforeDropDownOpen, args2);
        },
        close: this.dropDownClose.bind(this),
        open: this.dropDownOpen.bind(this),
        beforeItemRender: this.beforeDropDownItemRender.bind(this)
      });
      dropDown.isStringTemplate = true;
      dropDown.createElement = proxy.parent.createElement;
      dropDown.appendTo(args.element);
      args.element.tabIndex = -1;
      args.element.setAttribute("role", "button");
      var popupElement = document.getElementById(dropDown.element.id + "-popup");
      popupElement.setAttribute("aria-owns", this.parent.getID());
      if (args.element.childElementCount === 1) {
        dropDown.element.insertBefore(content, dropDown.element.querySelector(".e-caret"));
      }
      args.element.tabIndex = -1;
      dropDown.element.removeAttribute("type");
      return dropDown;
    };
    ToolbarRenderer2.prototype.onPopupOverlay = function(args) {
      if (!isNullOrUndefined(this.popupOverlay)) {
        closest(this.popupOverlay, ".e-popup-container").style.display = "none";
        this.popupOverlay.style.display = "none";
        removeClass([this.popupOverlay], "e-popup-overlay");
      }
    };
    ToolbarRenderer2.prototype.setIsModel = function(element) {
      if (!closest(element, ".e-popup-container")) {
        this.popupContainer = this.parent.createElement("div", {
          className: "e-rte-modal-popup e-popup-container e-center"
        });
        element.parentNode.insertBefore(this.popupContainer, element);
        this.popupContainer.appendChild(element);
        this.popupContainer.style.zIndex = element.style.zIndex;
        this.popupContainer.style.display = "flex";
        element.style.position = "relative";
        addClass([element], "e-popup-modal");
        this.popupOverlay = this.parent.createElement("div", { className: "e-popup-overlay" });
        this.popupOverlay.style.zIndex = (parseInt(element.style.zIndex, null) - 1).toString();
        this.popupOverlay.style.display = "block";
        this.popupContainer.appendChild(this.popupOverlay);
        EventHandler.add(this.popupOverlay, "click touchmove", this.onPopupOverlay, this);
      } else {
        element.parentElement.style.display = "flex";
        this.popupOverlay = element.nextElementSibling;
        this.popupOverlay.style.display = "block";
        addClass([this.popupOverlay], "e-popup-overlay");
      }
    };
    ToolbarRenderer2.prototype.paletteSelection = function(dropDownArgs, currentElement) {
      var ele = dropDownArgs.element.querySelector(".e-control.e-colorpicker");
      var colorbox = [].slice.call(selectAll(".e-tile", ele.parentElement));
      removeClass(colorbox, "e-selected");
      var style = currentElement.querySelector("." + CLS_RTE_ELEMENTS).style.borderBottomColor;
      colorbox.filter(function(colorbox2) {
        if (colorbox2.style.backgroundColor === style) {
          addClass([colorbox2], "e-selected");
        }
      });
    };
    ToolbarRenderer2.prototype.renderColorPickerDropDown = function(args, item, colorPicker, defaultColor) {
      var _this = this;
      var proxy = this;
      var css = CLS_RTE_ELEMENTS + " " + CLS_TB_BTN + (this.parent.inlineMode ? " " + CLS_INLINE_DROPDOWN : "");
      css += " " + (item === "backgroundcolor" ? CLS_BACKGROUND_COLOR_DROPDOWN : CLS_FONT_COLOR_DROPDOWN);
      css += " " + this.parent.cssClass;
      var content = proxy.parent.createElement("span", { className: CLS_COLOR_CONTENT });
      var inlineEle = proxy.parent.createElement("span", { className: args.cssClass });
      var range;
      var initialBackgroundColor = isNullOrUndefined(defaultColor) ? proxy.parent.backgroundColor.default : defaultColor;
      inlineEle.style.borderBottomColor = item === "backgroundcolor" ? initialBackgroundColor : proxy.parent.fontColor.default;
      content.appendChild(inlineEle);
      var dropDown = new DropDownButton({
        target: colorPicker.element.parentElement,
        cssClass: css,
        enablePersistence: this.parent.enablePersistence,
        enableRtl: this.parent.enableRtl,
        beforeOpen: function(dropDownArgs) {
          colorPicker.inline = true;
          colorPicker.dataBind();
          if (proxy.parent.readonly || !proxy.parent.enabled) {
            dropDownArgs.cancel = true;
            return;
          }
          var element = dropDownArgs.event ? dropDownArgs.event.target : null;
          proxy.currentElement = dropDown.element;
          proxy.currentDropdown = dropDown;
          proxy.paletteSelection(dropDownArgs, proxy.currentElement);
          if (dropDownArgs.event && dropDownArgs.event.type === "click" && (element.classList.contains(CLS_COLOR_CONTENT) || element.parentElement.classList.contains(CLS_COLOR_CONTENT))) {
            dropDownArgs.cancel = true;
            var colorpickerValue = element.classList.contains(CLS_RTE_ELEMENTS) ? element.style.borderBottomColor : element.querySelector("." + CLS_RTE_ELEMENTS).style.borderBottomColor;
            proxy.parent.notify(selectionRestore, {});
            range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());
            var parentNode = range.startContainer.parentNode;
            var closestElement = closest(range.startContainer.parentNode, "table");
            if ((range.startContainer.nodeName === "TD" || range.startContainer.nodeName === "TH" || closest(range.startContainer.parentNode, "td,th") || proxy.parent.iframeSettings.enable && !hasClass(parentNode.ownerDocument.querySelector("body"), "e-lib")) && range.collapsed && args.subCommand === "BackgroundColor" && closest(closestElement, "." + CLS_RTE)) {
              proxy.parent.notify(tableColorPickerChanged, {
                item: {
                  command: args.command,
                  subCommand: args.subCommand,
                  value: colorpickerValue
                }
              });
            } else {
              proxy.parent.notify(colorPickerChanged, {
                item: {
                  command: args.command,
                  subCommand: args.subCommand,
                  value: colorpickerValue
                }
              });
            }
            return;
          } else {
            var ele = dropDownArgs.element.querySelector(".e-control.e-colorpicker");
            var inst = getInstance(ele, ColorPicker);
            inst.showButtons = dropDownArgs.element.querySelector(".e-color-palette") ? false : true;
            inst.dataBind();
          }
          dropDownArgs.element.onclick = function(args2) {
            if (args2.target.classList.contains("e-cancel")) {
              dropDown.toggle();
            }
          };
        },
        open: function(dropDownArgs) {
          _this.setColorPickerContentWidth(colorPicker);
          var focusEle;
          var ele = dropDownArgs.element.querySelector(".e-control.e-colorpicker");
          if (dropDownArgs.element.querySelector(".e-color-palette")) {
            focusEle = ele.parentElement.querySelector(".e-palette");
          } else {
            focusEle = ele.parentElement.querySelector("e-handler");
          }
          if (focusEle) {
            focusEle.focus();
          }
          if (Browser.isDevice) {
            _this.popupModal(dropDownArgs.element.parentElement);
          }
          _this.pickerRefresh(dropDownArgs);
        },
        beforeClose: function(dropDownArgs) {
          var element = dropDownArgs.event ? dropDownArgs.event.target : null;
          if (dropDownArgs.event && dropDownArgs.event.type === "click" && (element.classList.contains(CLS_COLOR_CONTENT) || element.parentElement.classList.contains(CLS_COLOR_CONTENT))) {
            var colorpickerValue = element.classList.contains(CLS_RTE_ELEMENTS) ? element.style.borderBottomColor : element.querySelector("." + CLS_RTE_ELEMENTS).style.borderBottomColor;
            range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());
            if ((range.startContainer.nodeName === "TD" || range.startContainer.nodeName === "TH" || closest(range.startContainer.parentNode, "td,th")) && range.collapsed) {
              proxy.parent.notify(tableColorPickerChanged, {
                item: {
                  command: args.command,
                  subCommand: args.subCommand,
                  value: colorpickerValue
                }
              });
            } else {
              proxy.parent.notify(colorPickerChanged, {
                item: {
                  command: args.command,
                  subCommand: args.subCommand,
                  value: colorpickerValue
                }
              });
            }
            return;
          }
        },
        close: function(dropDownArgs) {
          proxy.parent.notify(selectionRestore, {});
          var dropElement = closest(dropDownArgs.element.parentElement, ".e-popup-container");
          if (dropElement) {
            dropElement.style.display = "none";
            dropElement.lastElementChild.style.display = "none";
            removeClass([dropElement.lastElementChild], "e-popup-overlay");
          }
          if (Browser.isDevice && !isNullOrUndefined(dropElement)) {
            var popupEle = dropElement.querySelector(".e-dropdown-popup.e-tbar-btn.e-control");
            if (popupEle) {
              dropElement.parentNode.insertBefore(popupEle, dropElement.nextSibling);
              popupEle.style.removeProperty("position");
              removeClass([popupEle], "e-popup-modal");
            }
            detach(dropElement);
            proxy.popupContainer = void 0;
          }
        }
      });
      dropDown.isStringTemplate = true;
      dropDown.createElement = proxy.parent.createElement;
      args.element.setAttribute("role", "button");
      dropDown.appendTo(args.element);
      var popupElement = document.getElementById(dropDown.element.id + "-popup");
      popupElement.setAttribute("aria-owns", this.parent.getID());
      dropDown.element.insertBefore(content, dropDown.element.querySelector(".e-caret"));
      args.element.tabIndex = -1;
      dropDown.element.removeAttribute("type");
      dropDown.element.onmousedown = function() {
        proxy.parent.notify(selectionSave, {});
      };
      dropDown.element.onkeydown = function() {
        proxy.parent.notify(selectionSave, {});
      };
      return dropDown;
    };
    ToolbarRenderer2.prototype.pickerRefresh = function(dropDownArgs) {
      if (this.parent.backgroundColor.mode === "Picker") {
        var popupElem = dropDownArgs.element.parentElement;
        popupElem.style.width = (popupElem.offsetWidth + 5).toString() + "px";
        getInstance(popupElem, Popup).refreshPosition(popupElem);
        popupElem.style.width = (popupElem.offsetWidth - 5).toString() + "px";
      }
    };
    ToolbarRenderer2.prototype.popupModal = function(element) {
      var popupInst = getInstance(element, Popup);
      popupInst.relateTo = document.body;
      popupInst.position = { X: 0, Y: 0 };
      popupInst.targetType = "container";
      popupInst.collision = { X: "fit", Y: "fit" };
      popupInst.offsetY = 4;
      popupInst.dataBind();
      this.setIsModel(element);
    };
    ToolbarRenderer2.prototype.setColorPickerContentWidth = function(colorPicker) {
      var colorPickerContent = colorPicker.element.nextSibling;
      if (colorPickerContent.style.width === "0px") {
        colorPickerContent.style.width = "";
        var borderWidth = parseInt(getComputedStyle(colorPickerContent).borderBottomWidth, 10);
        colorPickerContent.style.width = formatUnit(colorPickerContent.children[0].offsetWidth + borderWidth + borderWidth);
      }
    };
    ToolbarRenderer2.prototype.renderColorPicker = function(args, item) {
      var _this = this;
      var proxy = this;
      var value;
      var colorPicker = new ColorPicker({
        enablePersistence: this.parent.enablePersistence,
        enableRtl: this.parent.enableRtl,
        inline: false,
        value: "#fff",
        created: function() {
          var value2 = item === "backgroundcolor" ? proxy.parent.backgroundColor.default : proxy.parent.fontColor.default;
          colorPicker.setProperties({ value: value2 });
        },
        mode: item === "backgroundcolor" ? proxy.parent.backgroundColor.mode : proxy.parent.fontColor.mode,
        modeSwitcher: item === "backgroundcolor" ? proxy.parent.backgroundColor.modeSwitcher : proxy.parent.fontColor.modeSwitcher,
        beforeTileRender: function(args2) {
          args2.element.classList.add(CLS_COLOR_PALETTE);
          args2.element.classList.add(CLS_CUSTOM_TILE);
          if (!isNullOrUndefined(_this.parent.cssClass)) {
            var allClassName = _this.parent.cssClass.split(" ");
            for (var i = 0; i < allClassName.length; i++) {
              if (allClassName[i].trim() !== "") {
                args2.element.classList.add(allClassName[i]);
              }
            }
          }
          if (args2.value === "") {
            args2.element.classList.add(CLS_NOCOLOR_ITEM);
          }
        },
        change: function(colorPickerArgs) {
          var colorpickerValue = colorPickerArgs.currentValue.rgba;
          colorPickerArgs.item = {
            command: args.command,
            subCommand: args.subCommand,
            value: colorpickerValue
          };
          proxy.parent.notify(selectionRestore, {});
          proxy.currentElement.querySelector("." + CLS_RTE_ELEMENTS).style.borderBottomColor = colorpickerValue;
          var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());
          var closestElement = closest(range.startContainer.parentNode, "table");
          if ((range.startContainer.nodeName === "TD" || range.startContainer.nodeName === "TH" || range.startContainer.nodeName === "BODY" || closest(range.startContainer.parentNode, "td,th")) && range.collapsed && args.subCommand === "BackgroundColor" && closest(closestElement, "." + CLS_RTE)) {
            proxy.parent.notify(tableColorPickerChanged, colorPickerArgs);
          } else {
            proxy.parent.notify(colorPickerChanged, colorPickerArgs);
          }
          proxy.currentDropdown.toggle();
        },
        beforeModeSwitch: function(args2) {
          value = colorPicker.value;
          if (value === "") {
            colorPicker.setProperties({ value: args2.mode === "Picker" ? "#008000ff" : "" }, true);
          }
          colorPicker.showButtons = args2.mode === "Palette" ? false : true;
        }
      });
      colorPicker.isStringTemplate = true;
      colorPicker.columns = item === "backgroundcolor" ? this.parent.backgroundColor.columns : this.parent.fontColor.columns;
      colorPicker.presetColors = item === "backgroundcolor" ? this.parent.backgroundColor.colorCode : this.parent.fontColor.colorCode;
      colorPicker.cssClass = (item === "backgroundcolor" ? CLS_BACKGROUND_COLOR_PICKER : CLS_FONT_COLOR_PICKER) + " " + args.cssClass;
      colorPicker.createElement = this.parent.createElement;
      colorPicker.appendTo(document.getElementById(args.target));
      return colorPicker;
    };
    ToolbarRenderer2.prototype.renderPanel = function() {
      this.getPanel().classList.add(CLS_TOOLBAR);
    };
    ToolbarRenderer2.prototype.getPanel = function() {
      return this.toolbarPanel;
    };
    ToolbarRenderer2.prototype.setPanel = function(panel2) {
      this.toolbarPanel = panel2;
    };
    return ToolbarRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/base-toolbar.js
var BaseToolbar = (
  /** @class */
  function() {
    function BaseToolbar2(parent, serviceLocator) {
      this.tools = {};
      this.parent = parent;
      this.locator = serviceLocator;
      this.renderFactory = this.locator.getService("rendererFactory");
      this.addEventListener();
      if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {
        extend(this.tools, tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);
      } else {
        this.tools = tools;
      }
    }
    BaseToolbar2.prototype.addEventListener = function() {
      this.parent.on(rtlMode, this.setRtl, this);
      this.parent.on(bindCssClass, this.setCssClass, this);
      this.parent.on(destroy, this.removeEventListener, this);
    };
    BaseToolbar2.prototype.removeEventListener = function() {
      this.parent.off(rtlMode, this.setRtl);
      this.parent.off(bindCssClass, this.setCssClass);
      this.parent.off(destroy, this.removeEventListener);
    };
    BaseToolbar2.prototype.setCssClass = function(e) {
      if (!isNullOrUndefined(this.toolbarObj)) {
        if (isNullOrUndefined(e.oldCssClass)) {
          this.toolbarObj.setProperties({ cssClass: (this.toolbarObj.cssClass + " " + e.cssClass).trim() });
        } else {
          this.toolbarObj.setProperties({ cssClass: (this.toolbarObj.cssClass.replace(e.oldCssClass, "").trim() + " " + e.cssClass).trim() });
        }
      }
    };
    BaseToolbar2.prototype.setRtl = function(args) {
      if (!isNullOrUndefined(this.toolbarObj)) {
        this.toolbarObj.setProperties({ enableRtl: args.enableRtl });
      }
    };
    BaseToolbar2.prototype.getClass = function(item) {
      var classes;
      switch (item) {
        case "fontsize":
          classes = "e-rte-inline-size-template";
          break;
        case "fontcolor":
        case "backgroundcolor":
          classes = "e-rte-inline-color-template";
          break;
        default:
          classes = "e-rte-inline-template";
          break;
      }
      return classes;
    };
    BaseToolbar2.prototype.getTemplateObject = function(itemStr, container) {
      var tagName;
      switch (itemStr) {
        case "fontcolor":
        case "backgroundcolor":
        case "numberformatlist":
        case "bulletformatlist":
          tagName = "span";
          break;
        default:
          tagName = "button";
          break;
      }
      return {
        command: this.tools[itemStr.toLocaleLowerCase()].command,
        subCommand: this.tools[itemStr.toLocaleLowerCase()].subCommand,
        template: this.parent.createElement(tagName, {
          id: this.parent.getID() + "_" + container + "_" + this.tools[itemStr.toLocaleLowerCase()].id
        }).outerHTML,
        cssClass: this.parent.inlineMode.enable ? this.getClass(itemStr) : "",
        tooltipText: getTooltipText(itemStr, this.locator)
      };
    };
    BaseToolbar2.prototype.getObject = function(item, container) {
      var itemStr = item.toLowerCase();
      if (templateItems.indexOf(itemStr) !== -1) {
        return this.getTemplateObject(itemStr, container);
      } else {
        switch (itemStr) {
          case "|":
            return { type: "Separator" };
          case "-":
            return { type: "Separator", cssClass: CLS_HR_SEPARATOR };
          default:
            if (this.parent.showTooltip) {
              return {
                id: this.parent.getID() + "_" + container + "_" + this.tools[itemStr.toLocaleLowerCase()].id,
                prefixIcon: this.tools[itemStr.toLocaleLowerCase()].icon,
                tooltipText: getTooltipText(itemStr, this.locator),
                command: this.tools[itemStr.toLocaleLowerCase()].command,
                subCommand: this.tools[itemStr.toLocaleLowerCase()].subCommand
              };
            } else {
              return {
                id: this.parent.getID() + "_" + container + "_" + this.tools[itemStr.toLocaleLowerCase()].id,
                prefixIcon: this.tools[itemStr.toLocaleLowerCase()].icon,
                command: this.tools[itemStr.toLocaleLowerCase()].command,
                subCommand: this.tools[itemStr.toLocaleLowerCase()].subCommand
              };
            }
        }
      }
    };
    BaseToolbar2.prototype.getItems = function(tbItems, container) {
      var _this = this;
      if (this.parent.toolbarSettings.items.length < 1) {
        return [];
      }
      var items = [];
      var _loop_1 = function(item2) {
        switch (typeof item2) {
          case "string":
            items.push(this_1.getObject(item2, container));
            break;
          default:
            if (!isNullOrUndefined(item2.click)) {
              var proxy_1 = item2;
              var callback_1 = proxy_1.click;
              proxy_1.click = function() {
                if (proxy_1.undo && _this.parent.formatter.getUndoRedoStack().length === 0) {
                  _this.parent.formatter.saveData();
                }
                callback_1.call(_this);
                var currentContentElem = _this.parent.createElement("div");
                currentContentElem.appendChild(_this.parent.formatter.getUndoRedoStack()[_this.parent.formatter.getUndoRedoStack().length - 1].text);
                if (currentContentElem.innerHTML.trim() === _this.parent.inputElement.innerHTML.trim()) {
                  return;
                }
                if (proxy_1.undo) {
                  _this.parent.formatter.saveData();
                }
              };
            }
            items.push(item2);
        }
      };
      var this_1 = this;
      for (var _i = 0, tbItems_1 = tbItems; _i < tbItems_1.length; _i++) {
        var item = tbItems_1[_i];
        _loop_1(item);
      }
      for (var num = 0; num < items.length; num++) {
        var tooltipText = items[num].tooltipText;
        var shortCutKey = void 0;
        if (windowKeys["" + tooltipText]) {
          shortCutKey = Browser.isDevice && isIDevice() ? windowKeys["" + tooltipText].replace("Ctrl", "Cmd") : windowKeys["" + tooltipText];
        } else {
          shortCutKey = tooltipText;
        }
        if (shortCutKey) {
          items[num].tooltipText = tooltipText !== shortCutKey ? tooltipText + " (" + shortCutKey + ")" : tooltipText;
        }
      }
      return items;
    };
    BaseToolbar2.prototype.getToolbarOptions = function(args) {
      return {
        target: args.target,
        rteToolbarObj: this,
        items: this.getItems(args.items, args.container),
        overflowMode: args.mode,
        enablePersistence: this.parent.enablePersistence,
        enableRtl: this.parent.enableRtl,
        cssClass: args.cssClass
      };
    };
    BaseToolbar2.prototype.render = function(args) {
      this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);
      this.toolbarRenderer.renderToolbar(this.getToolbarOptions(args));
    };
    return BaseToolbar2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/dropdown-buttons.js
var DropDownButtons = (
  /** @class */
  function() {
    function DropDownButtons2(parent, serviceLocator) {
      this.parent = parent;
      this.locator = serviceLocator;
      this.renderFactory = this.locator.getService("rendererFactory");
      this.addEventListener();
    }
    DropDownButtons2.prototype.initializeInstance = function() {
      this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);
    };
    DropDownButtons2.prototype.beforeRender = function(args) {
      var item = args.item;
      if (item.cssClass) {
        addClass([args.element], item.cssClass);
      }
      if (item.command === "Alignments" || item.subCommand === "JustifyLeft" || item.subCommand === "JustifyRight" || item.subCommand === "JustifyCenter") {
        args.element.setAttribute("title", getTooltipText(item.subCommand.toLocaleLowerCase(), this.locator));
      }
    };
    DropDownButtons2.prototype.dropdownContent = function(width, type, content) {
      return '<span style="display: inline-flex;width:' + (type === "quick" ? "auto" : width) + '" ><span class="e-rte-dropdown-btn-text">' + content + "</span></span>";
    };
    DropDownButtons2.prototype.renderDropDowns = function(args) {
      var _this = this;
      this.initializeInstance();
      var type = args.containerType;
      var tbElement = args.container;
      templateItems.forEach(function(item) {
        var targetElement = void 0;
        if (getIndex(item, args.items) !== -1) {
          switch (item) {
            case "numberformatlist": {
              targetElement = select("#" + _this.parent.getID() + "_" + type + "_NumberFormatList", tbElement);
              if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                return;
              }
              var formatOLItem = _this.parent.numberFormatList.types.slice();
              formatOLItem.forEach(function(item2) {
                Object.defineProperties(item2, {
                  command: { value: "Lists", enumerable: true },
                  subCommand: { value: "NumberFormatList", enumerable: true }
                });
              });
              _this.numberFormatListDropDown = _this.toolbarRenderer.renderListDropDown({
                cssClass: "e-order-list " + CLS_RTE_ELEMENTS + " " + CLS_ICONS,
                itemName: "NumberFormatList",
                items: formatOLItem,
                element: targetElement
              });
              break;
            }
            case "bulletformatlist": {
              targetElement = select("#" + _this.parent.getID() + "_" + type + "_BulletFormatList", tbElement);
              if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                return;
              }
              var formatULItem = _this.parent.bulletFormatList.types.slice();
              formatULItem.forEach(function(item2) {
                Object.defineProperties(item2, {
                  command: { value: "Lists", enumerable: true },
                  subCommand: { value: "BulletFormatList", enumerable: true }
                });
              });
              _this.bulletFormatListDropDown = _this.toolbarRenderer.renderListDropDown({
                cssClass: "e-unorder-list " + CLS_RTE_ELEMENTS + " " + CLS_ICONS,
                itemName: "BulletFormatList",
                items: formatULItem,
                element: targetElement
              });
              break;
            }
            case "formats": {
              targetElement = select("#" + _this.parent.getID() + "_" + type + "_Formats", tbElement);
              if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                return;
              }
              var formatItem = _this.parent.format.types.slice();
              formatItem.forEach(function(item2) {
                Object.defineProperties(item2, {
                  command: { value: "Formats", enumerable: true },
                  subCommand: { value: item2.value, enumerable: true }
                });
              });
              var formatContent = isNullOrUndefined(_this.parent.format.default) ? formatItem[0].text : _this.parent.format.default;
              _this.formatDropDown = _this.toolbarRenderer.renderDropDownButton({
                iconCss: type === "quick" ? "e-formats e-icons" : "",
                content: _this.dropdownContent(_this.parent.format.width, type, type === "quick" ? "" : getDropDownValue(formatItem, formatContent, "text", "text")),
                cssClass: CLS_DROPDOWN_POPUP + " " + CLS_DROPDOWN_ITEMS + " " + CLS_FORMATS_TB_BTN,
                itemName: "Formats",
                items: formatItem,
                element: targetElement
              });
              break;
            }
            case "fontname": {
              targetElement = select("#" + _this.parent.getID() + "_" + type + "_FontName", tbElement);
              if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                return;
              }
              var fontItem = _this.parent.fontFamily.items.slice();
              fontItem.forEach(function(item2) {
                Object.defineProperties(item2, {
                  command: { value: "Font", enumerable: true },
                  subCommand: { value: "FontName", enumerable: true }
                });
              });
              var fontNameContent = isNullOrUndefined(_this.parent.fontFamily.default) ? fontItem[0].text : _this.parent.fontFamily.default;
              _this.fontNameDropDown = _this.toolbarRenderer.renderDropDownButton({
                iconCss: type === "quick" ? "e-font-name e-icons" : "",
                content: _this.dropdownContent(_this.parent.fontFamily.width, type, type === "quick" ? "" : getDropDownValue(fontItem, fontNameContent, "text", "text")),
                cssClass: CLS_DROPDOWN_POPUP + " " + CLS_DROPDOWN_ITEMS + " " + CLS_FONT_NAME_TB_BTN,
                itemName: "FontName",
                items: fontItem,
                element: targetElement
              });
              if (!isNullOrUndefined(_this.parent.fontFamily.default)) {
                _this.getEditNode().style.fontFamily = _this.parent.fontFamily.default;
              }
              break;
            }
            case "fontsize": {
              targetElement = select("#" + _this.parent.getID() + "_" + type + "_FontSize", tbElement);
              if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                return;
              }
              var fontsize = _this.parent.fontSize.items.slice();
              fontsize.forEach(function(item2) {
                Object.defineProperties(item2, {
                  command: { value: "Font", enumerable: true },
                  subCommand: { value: "FontSize", enumerable: true }
                });
              });
              var fontSizeContent = isNullOrUndefined(_this.parent.fontSize.default) ? fontsize[1].text : _this.parent.fontSize.default;
              _this.fontSizeDropDown = _this.toolbarRenderer.renderDropDownButton({
                content: _this.dropdownContent(_this.parent.fontSize.width, type, getFormattedFontSize(getDropDownValue(fontsize, fontSizeContent.replace(/\s/g, ""), "value", "text"))),
                cssClass: CLS_DROPDOWN_POPUP + " " + CLS_DROPDOWN_ITEMS + " " + CLS_FONT_SIZE_TB_BTN,
                itemName: "FontSize",
                items: fontsize,
                element: targetElement
              });
              if (!isNullOrUndefined(_this.parent.fontSize.default)) {
                _this.getEditNode().style.fontSize = _this.parent.fontSize.default;
              }
              break;
            }
            case "alignments":
              targetElement = select("#" + _this.parent.getID() + "_" + type + "_Alignments", tbElement);
              if (isNullOrUndefined(targetElement) || targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
                return;
              }
              _this.alignDropDown = _this.toolbarRenderer.renderDropDownButton({
                iconCss: "e-justify-left e-icons",
                cssClass: CLS_DROPDOWN_POPUP + " " + CLS_DROPDOWN_ITEMS + " " + CLS_ALIGN_TB_BTN,
                itemName: "Alignments",
                items: alignmentItems,
                element: targetElement
              });
              break;
            case "align":
            case "videoalign":
              _this.renderAlignmentDropDown(type, tbElement, targetElement, item);
              break;
            case "display":
            case "audiolayoutoption":
            case "videolayoutoption":
              _this.renderDisplayDropDown(type, tbElement, targetElement, item);
              break;
            case "tablerows":
              _this.rowDropDown(type, tbElement, targetElement);
              break;
            case "tablecolumns":
              _this.columnDropDown(type, tbElement, targetElement);
              break;
            case "tablecell":
              _this.cellDropDown(type, tbElement, targetElement);
              break;
            case "tablecellverticalalign":
              _this.verticalAlignDropDown(type, tbElement, targetElement);
              break;
            case "styles":
              _this.tableStylesDropDown(type, tbElement, targetElement);
              break;
          }
        }
      });
      if (this.parent.inlineMode.enable) {
        this.setCssClass({ cssClass: this.parent.cssClass });
      }
    };
    DropDownButtons2.prototype.getUpdateItems = function(items, value) {
      var dropDownItems = items.slice();
      dropDownItems.forEach(function(item) {
        Object.defineProperties(item, {
          command: { value: value === "Format" ? "Formats" : "Font", enumerable: true },
          subCommand: { value: value === "Format" ? item.value : value, enumerable: true }
        });
      });
      return dropDownItems;
    };
    DropDownButtons2.prototype.onPropertyChanged = function(model) {
      var newProp = model.newProp;
      var type;
      var content;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "fontFamily":
            if (this.fontNameDropDown) {
              for (var _b = 0, _c = Object.keys(newProp.fontFamily); _b < _c.length; _b++) {
                var fontFamily2 = _c[_b];
                switch (fontFamily2) {
                  case "default":
                  case "width": {
                    var fontItems = this.fontNameDropDown.items;
                    type = !isNullOrUndefined(closest(this.fontNameDropDown.element, "." + CLS_QUICK_TB)) ? "quick" : "toolbar";
                    var fontNameContent = isNullOrUndefined(this.parent.fontFamily.default) ? fontItems[0].text : this.parent.fontFamily.default;
                    content = this.dropdownContent(this.parent.fontFamily.width, type, type === "quick" ? "" : getDropDownValue(fontItems, fontNameContent, "text", "text"));
                    this.fontNameDropDown.setProperties({ content });
                    if (!isNullOrUndefined(this.parent.fontFamily.default)) {
                      this.getEditNode().style.fontFamily = this.parent.fontFamily.default;
                    } else {
                      this.getEditNode().style.removeProperty("font-family");
                    }
                    break;
                  }
                  case "items":
                    this.fontNameDropDown.setProperties({
                      items: this.getUpdateItems(newProp.fontFamily.items, "FontName")
                    });
                    break;
                }
              }
            }
            break;
          case "fontSize":
            if (this.fontSizeDropDown) {
              for (var _d = 0, _e = Object.keys(newProp.fontSize); _d < _e.length; _d++) {
                var fontSize2 = _e[_d];
                switch (fontSize2) {
                  case "default":
                  case "width": {
                    var fontsize = this.fontSizeDropDown.items;
                    type = !isNullOrUndefined(closest(this.fontSizeDropDown.element, "." + CLS_QUICK_TB)) ? "quick" : "toolbar";
                    var fontSizeContent = isNullOrUndefined(this.parent.fontSize.default) ? fontsize[1].text : this.parent.fontSize.default;
                    content = this.dropdownContent(this.parent.fontSize.width, type, getFormattedFontSize(getDropDownValue(fontsize, fontSizeContent.replace(/\s/g, ""), "value", "text")));
                    this.fontSizeDropDown.setProperties({ content });
                    if (!isNullOrUndefined(this.parent.fontSize.default)) {
                      this.getEditNode().style.fontSize = this.parent.fontSize.default;
                    } else {
                      this.getEditNode().style.removeProperty("font-size");
                    }
                    break;
                  }
                  case "items":
                    this.fontSizeDropDown.setProperties({
                      items: this.getUpdateItems(newProp.fontSize.items, "FontSize")
                    });
                    break;
                }
              }
            }
            break;
          case "format":
            if (this.formatDropDown) {
              for (var _f = 0, _g = Object.keys(newProp.format); _f < _g.length; _f++) {
                var format = _g[_f];
                switch (format) {
                  case "default":
                  case "width": {
                    var formatItems2 = this.formatDropDown.items;
                    type = !isNullOrUndefined(closest(this.formatDropDown.element, "." + CLS_QUICK_TB)) ? "quick" : "toolbar";
                    var formatContent = isNullOrUndefined(this.parent.format.default) ? formatItems2[0].text : this.parent.format.default;
                    content = this.dropdownContent(this.parent.format.width, type, type === "quick" ? "" : getDropDownValue(formatItems2, formatContent, "text", "text"));
                    this.formatDropDown.setProperties({ content });
                    break;
                  }
                  case "types":
                    this.formatDropDown.setProperties({
                      items: this.getUpdateItems(newProp.format.types, "Format")
                    });
                    break;
                }
              }
            }
            break;
        }
      }
    };
    DropDownButtons2.prototype.getEditNode = function() {
      return this.parent.contentModule.getEditPanel();
    };
    DropDownButtons2.prototype.rowDropDown = function(type, tbElement, targetElement) {
      targetElement = select("#" + this.parent.getID() + "_" + type + "_TableRows", tbElement);
      if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
        return;
      }
      this.tableRowsDropDown = this.toolbarRenderer.renderDropDownButton({
        iconCss: "e-table-rows e-icons",
        cssClass: CLS_DROPDOWN_POPUP + " " + CLS_DROPDOWN_ITEMS + " " + CLS_QUICK_DROPDOWN,
        itemName: "TableRows",
        items: tableRowsItems,
        element: targetElement
      });
    };
    DropDownButtons2.prototype.columnDropDown = function(type, tbElement, targetElement) {
      targetElement = select("#" + this.parent.getID() + "_" + type + "_TableColumns", tbElement);
      if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
        return;
      }
      this.tableColumnsDropDown = this.toolbarRenderer.renderDropDownButton({
        iconCss: "e-table-columns e-icons",
        cssClass: CLS_DROPDOWN_POPUP + " " + CLS_DROPDOWN_ITEMS + " " + CLS_QUICK_DROPDOWN,
        itemName: "TableColumns",
        items: tableColumnsItems,
        element: targetElement
      });
    };
    DropDownButtons2.prototype.cellDropDown = function(type, tbElement, targetElement) {
      targetElement = select("#" + this.parent.getID() + "_" + type + "_TableCell", tbElement);
      if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
        return;
      }
      this.tableRowsDropDown = this.toolbarRenderer.renderDropDownButton({
        iconCss: "e-table-cell e-icons",
        cssClass: CLS_DROPDOWN_POPUP + " " + CLS_DROPDOWN_ITEMS + " " + CLS_QUICK_DROPDOWN,
        itemName: "TableCell",
        items: tableCellItems,
        element: targetElement
      });
    };
    DropDownButtons2.prototype.verticalAlignDropDown = function(type, tbElement, targetElement) {
      targetElement = select("#" + this.parent.getID() + "_" + type + "_TableCellVerticalAlign", tbElement);
      if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
        return;
      }
      this.tableCellVerticalAlignDropDown = this.toolbarRenderer.renderDropDownButton({
        iconCss: "e-table-cell-ver-align e-icons",
        cssClass: CLS_DROPDOWN_POPUP + " " + CLS_DROPDOWN_ITEMS + " " + CLS_QUICK_DROPDOWN,
        itemName: "TableCellVerticalAlign",
        items: TableCellVerticalAlignItems,
        element: targetElement
      });
    };
    DropDownButtons2.prototype.renderDisplayDropDown = function(type, tbElement, targetElement, item) {
      targetElement = select("#" + this.parent.getID() + "_" + type + (item === "display" ? "_Display" : item === "videolayoutoption" ? "_VideoLayoutOption" : "_AudioLayoutOption"), tbElement);
      if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
        return;
      }
      this.displayDropDown = this.toolbarRenderer.renderDropDownButton({
        iconCss: item === "display" ? "e-display e-icons" : item === "videolayoutoption" ? "e-video-display e-icons" : "e-audio-display e-icons",
        cssClass: CLS_DROPDOWN_POPUP + " " + CLS_DROPDOWN_ITEMS + " " + CLS_QUICK_DROPDOWN,
        itemName: item === "display" ? "Display" : item === "videolayoutoption" ? "VideoLayoutOption" : "AudioLayoutOption",
        items: item === "display" ? imageDisplayItems : item === "videolayoutoption" ? videoLayoutOptionItems : audioLayoutOptionItems,
        element: targetElement
      });
    };
    DropDownButtons2.prototype.renderAlignmentDropDown = function(type, tbElement, targetElement, item) {
      targetElement = select("#" + this.parent.getID() + "_" + type + (item === "align" ? "_Align" : "_VideoAlign"), tbElement);
      if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
        return;
      }
      this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({
        iconCss: "e-justify-left e-icons",
        cssClass: CLS_DROPDOWN_POPUP + " " + CLS_DROPDOWN_ICONS + " " + CLS_QUICK_DROPDOWN,
        itemName: item === "align" ? "Align" : "VideoAlign",
        items: item === "align" ? imageAlignItems : videoAlignItems,
        element: targetElement
      });
    };
    DropDownButtons2.prototype.tableStylesDropDown = function(type, tbElement, targetElement) {
      targetElement = select("#" + this.parent.getID() + "_" + type + "_Styles", tbElement);
      if (targetElement.classList.contains(CLS_DROPDOWN_BTN)) {
        return;
      }
      this.imageAlignDropDown = this.toolbarRenderer.renderDropDownButton({
        iconCss: "e-style e-icons",
        cssClass: CLS_DROPDOWN_POPUP + " " + CLS_DROPDOWN_ICONS + " " + CLS_QUICK_DROPDOWN,
        itemName: "Styles",
        items: this.parent.tableSettings.styles,
        element: targetElement
      });
    };
    DropDownButtons2.prototype.removeDropDownClasses = function(target) {
      removeClass([target], [
        CLS_DROPDOWN_BTN,
        CLS_DROPDOWN_POPUP,
        CLS_DROPDOWN_ICONS,
        CLS_DROPDOWN_ITEMS
      ]);
    };
    DropDownButtons2.prototype.destroyDropDowns = function() {
      if (this.formatDropDown) {
        this.removeDropDownClasses(this.formatDropDown.element);
        this.formatDropDown.destroy();
      }
      if (this.fontNameDropDown) {
        this.removeDropDownClasses(this.fontNameDropDown.element);
        this.fontNameDropDown.destroy();
      }
      if (this.fontSizeDropDown) {
        this.removeDropDownClasses(this.fontSizeDropDown.element);
        this.fontSizeDropDown.destroy();
      }
      if (this.alignDropDown) {
        this.removeDropDownClasses(this.alignDropDown.element);
        this.alignDropDown.destroy();
      }
      if (this.imageAlignDropDown) {
        this.removeDropDownClasses(this.imageAlignDropDown.element);
        this.imageAlignDropDown.destroy();
      }
      if (this.displayDropDown) {
        this.removeDropDownClasses(this.displayDropDown.element);
        this.displayDropDown.destroy();
      }
      if (this.tableRowsDropDown) {
        this.removeDropDownClasses(this.tableRowsDropDown.element);
        this.tableRowsDropDown.destroy();
      }
      if (this.tableColumnsDropDown) {
        this.removeDropDownClasses(this.tableColumnsDropDown.element);
        this.tableColumnsDropDown.destroy();
      }
      if (this.tableCellVerticalAlignDropDown) {
        this.removeDropDownClasses(this.tableCellVerticalAlignDropDown.element);
        this.tableCellVerticalAlignDropDown.destroy();
      }
      if (this.numberFormatListDropDown) {
        this.removeDropDownClasses(this.numberFormatListDropDown.element);
        this.numberFormatListDropDown.destroy();
      }
      if (this.bulletFormatListDropDown) {
        this.removeDropDownClasses(this.bulletFormatListDropDown.element);
        this.bulletFormatListDropDown.destroy();
      }
    };
    DropDownButtons2.prototype.setRtl = function(args) {
      if (this.formatDropDown) {
        this.formatDropDown.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.fontNameDropDown) {
        this.fontNameDropDown.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.fontSizeDropDown) {
        this.fontSizeDropDown.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.alignDropDown) {
        this.alignDropDown.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.imageAlignDropDown) {
        this.imageAlignDropDown.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.displayDropDown) {
        this.displayDropDown.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.numberFormatListDropDown) {
        this.numberFormatListDropDown.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.bulletFormatListDropDown) {
        this.bulletFormatListDropDown.setProperties({ enableRtl: args.enableRtl });
      }
    };
    DropDownButtons2.prototype.updateCss = function(dropDownObj, e) {
      if (dropDownObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass)) {
          dropDownObj.setProperties({ cssClass: (dropDownObj.cssClass + " " + e.cssClass).trim() });
        } else {
          dropDownObj.setProperties({ cssClass: (dropDownObj.cssClass.replace(e.oldCssClass, "").trim() + " " + e.cssClass).trim() });
        }
      }
    };
    DropDownButtons2.prototype.setCssClass = function(e) {
      var dropDownObj = [
        this.formatDropDown,
        this.fontNameDropDown,
        this.fontSizeDropDown,
        this.alignDropDown,
        this.imageAlignDropDown,
        this.displayDropDown,
        this.numberFormatListDropDown,
        this.bulletFormatListDropDown,
        this.tableRowsDropDown,
        this.tableColumnsDropDown,
        this.tableCellVerticalAlignDropDown
      ];
      for (var i = 0; i < dropDownObj.length; i++) {
        this.updateCss(dropDownObj[i], e);
      }
    };
    DropDownButtons2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(beforeDropDownItemRender, this.beforeRender, this);
      this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);
      this.parent.on(rtlMode, this.setRtl, this);
      this.parent.on(destroy, this.removeEventListener, this);
      this.parent.on(modelChanged, this.onPropertyChanged, this);
      this.parent.on(bindCssClass, this.setCssClass, this);
    };
    DropDownButtons2.prototype.onIframeMouseDown = function() {
      dispatchEvent(document, "mousedown");
    };
    DropDownButtons2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(iframeMouseDown, this.onIframeMouseDown);
      this.parent.off(rtlMode, this.setRtl);
      this.parent.off(beforeDropDownItemRender, this.beforeRender);
      this.parent.off(destroy, this.removeEventListener);
      this.parent.off(modelChanged, this.onPropertyChanged);
      this.parent.off(bindCssClass, this.setCssClass);
    };
    return DropDownButtons2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/services/service-locator.js
var ServiceLocator = (
  /** @class */
  function() {
    function ServiceLocator2() {
      this.services = {};
    }
    ServiceLocator2.prototype.register = function(name, type) {
      if (isNullOrUndefined(this.services["" + name])) {
        this.services["" + name] = type;
      }
    };
    ServiceLocator2.prototype.getService = function(name) {
      if (isNullOrUndefined(this.services["" + name])) {
        throw "The service " + name + " is not registered";
      }
      return this.services["" + name];
    };
    return ServiceLocator2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/services/renderer-factory.js
var RendererFactory = (
  /** @class */
  function() {
    function RendererFactory2() {
      this.rendererMap = {};
    }
    RendererFactory2.prototype.addRenderer = function(name, type) {
      var rName = getEnumValue(RenderType, name);
      if (isNullOrUndefined(this.rendererMap["" + rName])) {
        this.rendererMap["" + rName] = type;
      }
    };
    RendererFactory2.prototype.getRenderer = function(name) {
      var rName = getEnumValue(RenderType, name);
      if (isNullOrUndefined(this.rendererMap["" + rName])) {
        throw "The renderer " + rName + " is not found";
      } else {
        return this.rendererMap["" + rName];
      }
    };
    return RendererFactory2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/toolbar-action.js
var ToolbarAction = (
  /** @class */
  function() {
    function ToolbarAction2(parent) {
      this.parent = parent;
      this.addEventListener();
      this.serviceLocator = new ServiceLocator();
      this.serviceLocator.register("rendererFactory", new RendererFactory());
    }
    ToolbarAction2.prototype.addEventListener = function() {
      this.parent.on(toolbarClick, this.toolbarClick, this);
      this.parent.on(dropDownSelect, this.dropDownSelect, this);
      this.parent.on(colorPickerChanged, this.renderSelection, this);
      this.parent.on(destroy, this.removeEventListener, this);
    };
    ToolbarAction2.prototype.toolbarClick = function(args) {
      if (isNullOrUndefined(args.item)) {
        return;
      }
      if (!isNullOrUndefined(args.item.controlParent)) {
        var activeEle = args.item.controlParent.activeEle;
        if (activeEle) {
          activeEle.tabIndex = -1;
        }
      }
      if (args.item.command === "NumberFormatList" || args.item.command === "BulletFormatList") {
        if (args.originalEvent.target.classList.contains("e-order-list") || args.originalEvent.target.classList.contains("e-unorder-list")) {
          args.item.command = "Lists";
          args.item.subCommand = args.item.subCommand === "NumberFormatList" ? "OL" : "UL";
        }
      }
      if (args.item.command === "Lists") {
        if (args.originalEvent.target.classList.contains("e-caret") && (args.originalEvent.target.parentElement.classList.contains("e-rte-bulletformatlist-dropdown") || args.originalEvent.target.parentElement.classList.contains("e-rte-numberformatlist-dropdown"))) {
          args.item.command = args.item.subCommand = null;
        }
      }
      this.parent.notify(htmlToolbarClick, args);
      this.parent.notify(markdownToolbarClick, args);
    };
    ToolbarAction2.prototype.dropDownSelect = function(e) {
      this.parent.notify(selectionRestore, {});
      if (!(document.body.contains(document.body.querySelector(".e-rte-quick-toolbar")) && e.item && (e.item.command === "Images" || e.item.command === "Audios" || e.item.command === "Videos" || e.item.command === "VideoLayoutOption" || e.item.command === "Display" || e.item.command === "Table"))) {
        var value = e.item.controlParent && this.parent.quickToolbarModule && this.parent.quickToolbarModule.tableQTBar && this.parent.quickToolbarModule.tableQTBar.element.contains(e.item.controlParent.element) ? "Table" : null;
        if (e.item.command === "Lists") {
          var listItem = { listStyle: e.item.value, listImage: e.item.listImage, type: e.item.subCommand };
          this.parent.formatter.process(this.parent, e, e.originalEvent, listItem);
        } else {
          this.parent.formatter.process(this.parent, e, e.originalEvent, value);
        }
      }
      this.parent.notify(selectionSave, {});
    };
    ToolbarAction2.prototype.renderSelection = function(args) {
      this.parent.notify(selectionRestore, {});
      this.parent.formatter.process(this.parent, args, args.originalEvent, null);
      this.parent.notify(selectionSave, {});
    };
    ToolbarAction2.prototype.removeEventListener = function() {
      this.parent.off(toolbarClick, this.toolbarClick);
      this.parent.off(dropDownSelect, this.dropDownSelect);
      this.parent.off(colorPickerChanged, this.renderSelection);
      this.parent.off(destroy, this.removeEventListener);
    };
    return ToolbarAction2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/toolbar.js
var Toolbar2 = (
  /** @class */
  function() {
    function Toolbar4(parent, serviceLocator) {
      this.parent = parent;
      this.isToolbar = false;
      this.locator = serviceLocator;
      this.isTransformChild = false;
      this.renderFactory = this.locator.getService("rendererFactory");
      updateDropDownLocale(this.parent);
      updateDropDownFontFormatLocale(this.parent);
      this.renderFactory.addRenderer(RenderType.Toolbar, new ToolbarRenderer(this.parent));
      this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);
      this.baseToolbar = new BaseToolbar(this.parent, this.locator);
      this.addEventListener();
      if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {
        extend(this.tools, tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);
      } else {
        this.tools = tools;
      }
    }
    Toolbar4.prototype.initializeInstance = function() {
      this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
      this.editableElement = this.contentRenderer.getEditPanel();
      this.editPanel = this.contentRenderer.getPanel();
    };
    Toolbar4.prototype.toolbarBindEvent = function() {
      if (!this.parent.inlineMode.enable) {
        this.keyBoardModule = new KeyboardEvents(this.getToolbarElement(), {
          keyAction: this.toolBarKeyDown.bind(this),
          keyConfigs: this.parent.formatter.keyConfig,
          eventName: "keydown"
        });
      }
    };
    Toolbar4.prototype.toolBarKeyDown = function(e) {
      switch (e.action) {
        case "escape":
          this.parent.contentModule.getEditPanel().focus();
          break;
      }
    };
    Toolbar4.prototype.createToolbarElement = function() {
      this.tbElement = this.parent.createElement("div", { id: this.parent.getID() + "_toolbar" });
      if (!Browser.isDevice && this.parent.inlineMode.enable && isIDevice()) {
        return;
      } else {
        if (this.parent.toolbarSettings.enableFloating && !this.parent.inlineMode.enable) {
          this.tbWrapper = this.parent.createElement("div", {
            id: this.parent.getID() + "_toolbar_wrapper",
            innerHTML: this.tbElement.outerHTML,
            className: CLS_TB_WRAP
          });
          this.tbElement = this.tbWrapper.firstElementChild;
          this.parent.element.insertBefore(this.tbWrapper, this.editPanel);
        } else {
          this.parent.element.insertBefore(this.tbElement, this.editPanel);
        }
      }
    };
    Toolbar4.prototype.getToolbarMode = function() {
      var tbMode;
      switch (this.parent.toolbarSettings.type) {
        case ToolbarType.Expand:
          tbMode = "Extended";
          break;
        case ToolbarType.Scrollable:
          tbMode = "Scrollable";
          break;
        default:
          tbMode = "MultiRow";
      }
      if (isIDevice() && this.parent.toolbarSettings.type === ToolbarType.Expand) {
        tbMode = ToolbarType.Scrollable;
      }
      return tbMode;
    };
    Toolbar4.prototype.checkToolbarResponsive = function(ele) {
      if (!Browser.isDevice || isIDevice()) {
        return false;
      }
      var tBarMode;
      if (this.parent.toolbarSettings.type === ToolbarType.Expand) {
        tBarMode = ToolbarType.MultiRow;
      } else {
        tBarMode = this.parent.toolbarSettings.type;
      }
      this.baseToolbar.render({
        container: this.parent.inlineMode.enable ? "quick" : "toolbar",
        items: this.parent.toolbarSettings.items,
        mode: tBarMode,
        target: ele,
        cssClass: this.parent.cssClass
      });
      if (this.parent.toolbarSettings.type === ToolbarType.Expand) {
        addClass([ele], ["e-rte-tb-mobile"]);
        if (this.parent.inlineMode.enable) {
          this.addFixedTBarClass();
        } else {
          addClass([ele], [CLS_TB_STATIC]);
        }
      }
      this.wireEvents();
      this.dropDownModule.renderDropDowns({
        container: ele,
        containerType: this.parent.inlineMode.enable ? "quick" : "toolbar",
        items: this.parent.toolbarSettings.items
      });
      this.parent.notify(renderColorPicker, {
        container: this.tbElement,
        containerType: this.parent.inlineMode.enable ? "quick" : "toolbar",
        items: this.parent.toolbarSettings.items
      });
      return true;
    };
    Toolbar4.prototype.checkIsTransformChild = function() {
      this.isTransformChild = false;
      var transformElements = selectAll('[style*="transform"]', document);
      for (var i = 0; i < transformElements.length; i++) {
        if (!isNullOrUndefined(transformElements[i].contains) && transformElements[i].contains(this.parent.element)) {
          this.isTransformChild = true;
          break;
        }
      }
    };
    Toolbar4.prototype.toggleFloatClass = function(e) {
      var topValue;
      var isBody = false;
      var isFloat = false;
      var scrollParent;
      var floatOffset = this.parent.floatingToolbarOffset;
      if (e && this.parent.iframeSettings.enable && this.parent.inputElement.ownerDocument === e.target) {
        scrollParent = e.target.body;
      } else if (e && e.target !== document) {
        scrollParent = e.target;
      } else {
        isBody = true;
        scrollParent = document.body;
      }
      var tbHeight = this.getToolbarHeight() + this.getExpandTBarPopHeight();
      if (this.isTransformChild) {
        topValue = 0;
        var scrollParentRelativeTop = 0;
        var trgHeight = this.parent.element.offsetHeight;
        if (isBody) {
          var bodyStyle = window.getComputedStyle(scrollParent);
          scrollParentRelativeTop = parseFloat(bodyStyle.marginTop.split("px")[0]) + parseFloat(bodyStyle.paddingTop.split("px")[0]);
        }
        var targetTop = this.parent.element.getBoundingClientRect().top;
        var scrollParentYOffset = Browser.isMSPointer && isBody ? window.pageYOffset : scrollParent.parentElement.scrollTop;
        var scrollParentRect = scrollParent.getBoundingClientRect();
        var scrollParentTop = !isBody ? scrollParentRect.top : scrollParentRect.top + scrollParentYOffset;
        var outOfRange = targetTop - (!isBody ? scrollParentTop : 0) + trgHeight > tbHeight + floatOffset ? false : true;
        if (targetTop > scrollParentTop + floatOffset || targetTop < -trgHeight || (targetTop < 0 ? outOfRange : false)) {
          isFloat = false;
          removeClass([this.tbElement], [CLS_TB_ABS_FLOAT]);
        } else if (targetTop < scrollParentTop + floatOffset) {
          if (targetTop < 0) {
            topValue = -targetTop + scrollParentTop;
          } else {
            topValue = scrollParentTop - targetTop;
          }
          topValue = isBody ? topValue - scrollParentRelativeTop : topValue;
          addClass([this.tbElement], [CLS_TB_ABS_FLOAT]);
          isFloat = true;
        }
      } else {
        var parent_1 = this.parent.element.getBoundingClientRect();
        if (window.innerHeight < parent_1.top) {
          return;
        }
        topValue = e && e.target !== document ? scrollParent.getBoundingClientRect().top : 0;
        if (parent_1.bottom < floatOffset + tbHeight + topValue || parent_1.bottom < 0 || parent_1.top > floatOffset + topValue) {
          isFloat = false;
        } else if (parent_1.top < floatOffset || parent_1.top < floatOffset + topValue) {
          isFloat = true;
        }
      }
      if (!isFloat) {
        removeClass([this.tbElement], [CLS_TB_FLOAT]);
        setStyleAttribute(this.tbElement, { top: "0px", width: "100%" });
      } else {
        addClass([this.tbElement], [CLS_TB_FLOAT]);
        setStyleAttribute(this.tbElement, { width: this.parent.element.offsetWidth + "px", top: floatOffset + topValue + "px" });
      }
    };
    Toolbar4.prototype.renderToolbar = function() {
      this.initializeInstance();
      this.createToolbarElement();
      if (this.checkToolbarResponsive(this.tbElement)) {
        return;
      }
      if (this.parent.inlineMode.enable) {
        this.parent.notify(renderInlineToolbar, {});
      } else {
        this.baseToolbar.render({
          container: "toolbar",
          items: this.parent.toolbarSettings.items,
          mode: this.getToolbarMode(),
          target: this.tbElement,
          cssClass: this.parent.cssClass
        });
        if (!this.parent.inlineMode.enable) {
          if (this.parent.toolbarSettings.enableFloating) {
            this.checkIsTransformChild();
            this.toggleFloatClass();
          }
          addClass([this.parent.element], [CLS_RTE_TB_ENABLED]);
          if (this.parent.toolbarSettings.type === ToolbarType.Expand) {
            addClass([this.parent.element], [CLS_RTE_EXPAND_TB]);
          }
        }
      }
      this.wireEvents();
      if (this.parent.inlineMode.enable && !isIDevice()) {
        this.addFixedTBarClass();
      }
      if (!this.parent.inlineMode.enable) {
        this.dropDownModule.renderDropDowns({
          container: this.tbElement,
          containerType: "toolbar",
          items: this.parent.toolbarSettings.items
        });
        this.parent.notify(renderColorPicker, {
          container: this.tbElement,
          containerType: "toolbar",
          items: this.parent.toolbarSettings.items
        });
        this.refreshToolbarOverflow();
      }
      var divEle = this.parent.element.querySelector(".e-rte-srctextarea");
      var iframeEle = this.parent.element.querySelector(".e-source-content");
      if (!this.parent.iframeSettings.enable && (!isNullOrUndefined(divEle) && divEle.style.display === "block") || this.parent.iframeSettings.enable && (!isNullOrUndefined(iframeEle) && iframeEle.style.display === "block")) {
        this.parent.notify(updateToolbarItem, {
          targetItem: "SourceCode",
          updateItem: "Preview",
          baseToolbar: this.parent.getBaseToolbarObject()
        });
        this.parent.disableToolbarItem(this.parent.toolbarSettings.items);
      }
    };
    Toolbar4.prototype.addFixedTBarClass = function() {
      addClass([this.tbElement], [CLS_TB_FIXED]);
    };
    Toolbar4.prototype.removeFixedTBarClass = function() {
      removeClass([this.tbElement], [CLS_TB_FIXED]);
    };
    Toolbar4.prototype.showFixedTBar = function() {
      addClass([this.tbElement], [CLS_SHOW]);
      if (Browser.isIos) {
        addClass([this.tbElement], [CLS_TB_IOS_FIX]);
      }
    };
    Toolbar4.prototype.hideFixedTBar = function() {
      !this.isToolbar ? removeClass([this.tbElement], [CLS_SHOW, CLS_TB_IOS_FIX]) : this.isToolbar = false;
    };
    Toolbar4.prototype.updateItem = function(args) {
      var item = this.tools[args.updateItem.toLocaleLowerCase()];
      if (this.parent.locale !== "en-US") {
        item.tooltip = getTooltipText(args.updateItem.toLocaleLowerCase(), this.locator);
      }
      var trgItem = this.tools[args.targetItem.toLocaleLowerCase()];
      var index = getTBarItemsIndex(getCollection(trgItem.subCommand), args.baseToolbar.toolbarObj.items)[0];
      if (!isNullOrUndefined(index)) {
        var prefixId = this.parent.inlineMode.enable ? "_quick_" : "_toolbar_";
        args.baseToolbar.toolbarObj.items[index].id = this.parent.getID() + prefixId + item.id;
        args.baseToolbar.toolbarObj.items[index].prefixIcon = item.icon;
        args.baseToolbar.toolbarObj.items[index].tooltipText = item.tooltip;
        args.baseToolbar.toolbarObj.items[index].subCommand = item.subCommand;
        args.baseToolbar.toolbarObj.dataBind();
        args.baseToolbar.toolbarObj.refreshOverflow();
      } else {
        this.addTBarItem(args, 0);
      }
    };
    Toolbar4.prototype.updateToolbarStatus = function(args) {
      if (!this.tbElement || this.parent.inlineMode.enable && (isIDevice() || !Browser.isDevice)) {
        return;
      }
      var options = {
        args,
        dropDownModule: this.dropDownModule,
        parent: this.parent,
        tbElements: selectAll("." + CLS_TB_ITEM, this.tbElement),
        tbItems: this.baseToolbar.toolbarObj.items
      };
      setToolbarStatus(options, this.parent.inlineMode.enable ? true : false, this.parent);
    };
    Toolbar4.prototype.fullScreen = function(e) {
      this.parent.fullScreenModule.showFullScreen(e);
    };
    Toolbar4.prototype.hideScreen = function(e) {
      this.parent.fullScreenModule.hideFullScreen(e);
    };
    Toolbar4.prototype.getBaseToolbar = function() {
      return this.baseToolbar;
    };
    Toolbar4.prototype.addTBarItem = function(args, index) {
      args.baseToolbar.toolbarObj.addItems([args.baseToolbar.getObject(args.updateItem, "toolbar")], index);
    };
    Toolbar4.prototype.enableTBarItems = function(baseToolbar, items, isEnable, muteToolbarUpdate) {
      var trgItems = getTBarItemsIndex(getCollection(items), baseToolbar.toolbarObj.items);
      this.tbItems = selectAll("." + CLS_TB_ITEM, baseToolbar.toolbarObj.element);
      for (var i = 0; i < trgItems.length; i++) {
        var item = this.tbItems[trgItems[i]];
        if (item) {
          baseToolbar.toolbarObj.enableItems(item, isEnable);
        }
      }
      if (!select(".e-rte-srctextarea", this.parent.element) && !muteToolbarUpdate) {
        updateUndoRedoStatus(baseToolbar, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());
      }
    };
    Toolbar4.prototype.removeTBarItems = function(items) {
      if (isNullOrUndefined(this.baseToolbar.toolbarObj)) {
        this.baseToolbar = this.parent.getBaseToolbarObject();
      }
      var trgItems = getTBarItemsIndex(getCollection(items), this.baseToolbar.toolbarObj.items);
      this.tbItems = this.parent.inlineMode.enable ? selectAll("." + CLS_TB_ITEM, this.baseToolbar.toolbarObj.element) : selectAll("." + CLS_TB_ITEM, this.parent.element);
      for (var i = 0; i < trgItems.length; i++) {
        this.baseToolbar.toolbarObj.removeItems(this.tbItems[trgItems[i]]);
      }
    };
    Toolbar4.prototype.getExpandTBarPopHeight = function() {
      var popHeight = 0;
      if (this.parent.toolbarSettings.type === ToolbarType.Expand && this.tbElement.classList.contains("e-extended-toolbar")) {
        var expandPopup = select(".e-toolbar-extended", this.tbElement);
        if (expandPopup && this.tbElement.classList.contains("e-expand-open") || expandPopup && expandPopup.classList.contains("e-popup-open")) {
          addClass([expandPopup], [CLS_VISIBLE]);
          popHeight = popHeight + expandPopup.offsetHeight;
          removeClass([expandPopup], [CLS_VISIBLE]);
        } else {
          removeClass([this.tbElement], [CLS_EXPAND_OPEN]);
        }
      }
      return popHeight;
    };
    Toolbar4.prototype.getToolbarHeight = function() {
      return this.tbElement.offsetHeight;
    };
    Toolbar4.prototype.getToolbarElement = function() {
      return select("." + CLS_TOOLBAR, this.parent.element);
    };
    Toolbar4.prototype.refreshToolbarOverflow = function() {
      this.parent.element.classList.remove(CLS_RTL);
      this.baseToolbar.toolbarObj.refreshOverflow();
      if (this.parent.enableRtl) {
        this.parent.element.classList.add(CLS_RTL);
      }
    };
    Toolbar4.prototype.isToolbarDestroyed = function() {
      return this.baseToolbar.toolbarObj && !this.baseToolbar.toolbarObj.isDestroyed;
    };
    Toolbar4.prototype.destroyToolbar = function() {
      if (this.isToolbarDestroyed()) {
        this.parent.unWireScrollElementsEvents();
        this.unWireEvents();
        this.parent.notify(destroyColorPicker, {});
        this.dropDownModule.destroyDropDowns();
        this.baseToolbar.toolbarObj.destroy();
        this.removeEventListener();
        removeClass([this.parent.element], [CLS_RTE_TB_ENABLED]);
        removeClass([this.parent.element], [CLS_RTE_EXPAND_TB]);
        var tbWrapper = select("." + CLS_TB_WRAP, this.parent.element);
        var tbElement = select("." + CLS_TOOLBAR, this.parent.element);
        if (!isNullOrUndefined(tbWrapper)) {
          detach(tbWrapper);
        } else if (!isNullOrUndefined(tbElement)) {
          detach(tbElement);
        }
      }
    };
    Toolbar4.prototype.destroy = function() {
      if (this.isToolbarDestroyed()) {
        this.destroyToolbar();
        if (this.keyBoardModule) {
          this.keyBoardModule.destroy();
        }
      }
    };
    Toolbar4.prototype.moduleDestroy = function() {
      this.parent = null;
      this.baseToolbar.parent = null;
      this.toolbarActionModule.parent = null;
      this.dropDownModule.parent = null;
    };
    Toolbar4.prototype.scrollHandler = function(e) {
      if (!this.parent.inlineMode.enable) {
        if (this.parent.toolbarSettings.enableFloating && this.getDOMVisibility(this.tbElement)) {
          this.toggleFloatClass(e.args);
        }
      }
    };
    Toolbar4.prototype.getDOMVisibility = function(el) {
      if (!el.offsetParent && el.offsetWidth === 0 && el.offsetHeight === 0) {
        return false;
      }
      return true;
    };
    Toolbar4.prototype.mouseDownHandler = function() {
      if (Browser.isDevice && this.parent.inlineMode.enable && !isIDevice()) {
        this.showFixedTBar();
      }
    };
    Toolbar4.prototype.focusChangeHandler = function() {
      if (Browser.isDevice && this.parent.inlineMode.enable && !isIDevice()) {
        this.isToolbar = false;
        this.hideFixedTBar();
      }
    };
    Toolbar4.prototype.dropDownBeforeOpenHandler = function() {
      this.isToolbar = true;
    };
    Toolbar4.prototype.tbFocusHandler = function(e) {
      var activeElm = document.activeElement;
      var isToolbaractive = closest(activeElm, ".e-rte-toolbar");
      if (activeElm === this.parent.getToolbarElement() || isToolbaractive === this.parent.getToolbarElement()) {
        var toolbarItem = this.parent.getToolbarElement().querySelectorAll(".e-expended-nav");
        for (var i = 0; i < toolbarItem.length; i++) {
          if (isNullOrUndefined(this.parent.getToolbarElement().querySelector(".e-insert-table-btn"))) {
            toolbarItem[i].setAttribute("tabindex", "0");
          } else {
            toolbarItem[i].setAttribute("tabindex", "1");
          }
        }
      }
    };
    Toolbar4.prototype.tbKeydownHandler = function(e) {
      if (e.target.classList.contains("e-dropdown-btn") || e.target.getAttribute("id") === this.parent.getID() + "_toolbar_CreateTable") {
        e.target.setAttribute("tabindex", "0");
      }
    };
    Toolbar4.prototype.toolbarClickHandler = function(e) {
      var trg = closest(e.originalEvent.target, ".e-hor-nav");
      if (trg && this.parent.toolbarSettings.type === ToolbarType.Expand && !isNullOrUndefined(trg)) {
        var extendedTbar = this.tbElement.querySelector(".e-toolbar-extended");
        if (!isNullOrUndefined(extendedTbar)) {
          setStyleAttribute(extendedTbar, { maxHeight: "", display: "block" });
          setStyleAttribute(extendedTbar, { maxHeight: extendedTbar.offsetHeight + "px", display: "" });
        }
        if (!trg.classList.contains("e-nav-active")) {
          removeClass([this.tbElement], [CLS_EXPAND_OPEN]);
          this.parent.setContentHeight("toolbar", false);
        } else {
          addClass([this.tbElement], [CLS_EXPAND_OPEN]);
          this.parent.setContentHeight("toolbar", true);
        }
      } else if (Browser.isDevice || this.parent.inlineMode.enable) {
        this.isToolbar = true;
      }
      if (isNullOrUndefined(trg) && this.parent.toolbarSettings.type === ToolbarType.Expand) {
        removeClass([this.tbElement], [CLS_EXPAND_OPEN]);
      }
    };
    Toolbar4.prototype.wireEvents = function() {
      if (this.parent.inlineMode.enable && isIDevice()) {
        return;
      }
      EventHandler.add(this.tbElement, "focusin", this.tbFocusHandler, this);
      EventHandler.add(this.tbElement, "keydown", this.tbKeydownHandler, this);
    };
    Toolbar4.prototype.unWireEvents = function() {
      EventHandler.remove(this.tbElement, "focusin", this.tbFocusHandler);
      EventHandler.remove(this.tbElement, "keydown", this.tbKeydownHandler);
    };
    Toolbar4.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.dropDownModule = new DropDownButtons(this.parent, this.locator);
      this.toolbarActionModule = new ToolbarAction(this.parent);
      this.parent.on(initialEnd, this.renderToolbar, this);
      this.parent.on(scroll, this.scrollHandler, this);
      this.parent.on(bindOnEnd, this.toolbarBindEvent, this);
      this.parent.on(toolbarUpdated, this.updateToolbarStatus, this);
      this.parent.on(modelChanged, this.onPropertyChanged, this);
      this.parent.on(refreshBegin, this.onRefresh, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(enableFullScreen, this.fullScreen, this);
      this.parent.on(disableFullScreen, this.hideScreen, this);
      this.parent.on(updateToolbarItem, this.updateItem, this);
      this.parent.on(beforeDropDownOpen, this.dropDownBeforeOpenHandler, this);
      this.parent.on(expandPopupClick, this.parent.setContentHeight, this.parent);
      this.parent.on(focusChange, this.focusChangeHandler, this);
      this.parent.on(mouseDown, this.mouseDownHandler, this);
      this.parent.on(sourceCodeMouseDown, this.mouseDownHandler, this);
      this.parent.on(bindCssClass, this.setCssClass, this);
      this.parent.on(moduleDestroy, this.moduleDestroy, this);
      if (!this.parent.inlineMode.enable && !isIDevice()) {
        this.parent.on(toolbarClick, this.toolbarClickHandler, this);
      }
    };
    Toolbar4.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialEnd, this.renderToolbar);
      this.parent.off(scroll, this.scrollHandler);
      this.parent.off(bindOnEnd, this.toolbarBindEvent);
      this.parent.off(toolbarUpdated, this.updateToolbarStatus);
      this.parent.off(modelChanged, this.onPropertyChanged);
      this.parent.off(refreshBegin, this.onRefresh);
      this.parent.off(destroy, this.destroy);
      this.parent.off(enableFullScreen, this.parent.fullScreenModule.showFullScreen);
      this.parent.off(disableFullScreen, this.parent.fullScreenModule.hideFullScreen);
      this.parent.off(updateToolbarItem, this.updateItem);
      this.parent.off(beforeDropDownOpen, this.dropDownBeforeOpenHandler);
      this.parent.off(expandPopupClick, this.parent.setContentHeight);
      this.parent.off(focusChange, this.focusChangeHandler);
      this.parent.off(mouseDown, this.mouseDownHandler);
      this.parent.off(sourceCodeMouseDown, this.mouseDownHandler);
      this.parent.off(bindCssClass, this.setCssClass);
      this.parent.off(moduleDestroy, this.moduleDestroy);
      if (!this.parent.inlineMode.enable && !isIDevice()) {
        this.parent.off(toolbarClick, this.toolbarClickHandler);
      }
    };
    Toolbar4.prototype.setCssClass = function(e) {
      if (this.toolbarObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass)) {
          this.toolbarObj.setProperties({ cssClass: (this.toolbarObj.cssClass + " " + e.cssClass).trim() });
        } else {
          this.toolbarObj.setProperties({ cssClass: (this.toolbarObj.cssClass.replace(e.oldCssClass, "").trim() + " " + e.cssClass).trim() });
        }
      }
    };
    Toolbar4.prototype.onRefresh = function() {
      if (!this.parent.inlineMode.enable) {
        this.refreshToolbarOverflow();
      }
      this.parent.setContentHeight("", true);
    };
    Toolbar4.prototype.onPropertyChanged = function(e) {
      if (!isNullOrUndefined(e.newProp.inlineMode)) {
        for (var _i = 0, _a = Object.keys(e.newProp.inlineMode); _i < _a.length; _i++) {
          var prop = _a[_i];
          switch (prop) {
            case "enable":
              this.refreshToolbar();
              break;
          }
        }
      }
      if (e.module !== this.getModuleName()) {
        return;
      }
      this.refreshToolbar();
    };
    Toolbar4.prototype.refreshToolbar = function() {
      if (isNullOrUndefined(this.baseToolbar.toolbarObj)) {
        this.baseToolbar = this.parent.getBaseToolbarObject();
      }
      var tbWrapper = select("." + CLS_TB_WRAP, this.parent.element);
      var tbElement = select("." + CLS_TOOLBAR, this.parent.element);
      if (tbElement || tbWrapper) {
        this.destroyToolbar();
      }
      if (this.parent.toolbarSettings.enable) {
        this.addEventListener();
        this.renderToolbar();
        this.parent.wireScrollElementsEvents();
        if (!select(".e-rte-srctextarea", this.parent.element)) {
          updateUndoRedoStatus(this.baseToolbar, this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());
        }
        this.parent.notify(dynamicModule, {});
      }
    };
    Toolbar4.prototype.getModuleName = function() {
      return "toolbar";
    };
    return Toolbar4;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/keyboard.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var keyCode = {
  "backspace": 8,
  "tab": 9,
  "enter": 13,
  "shift": 16,
  "control": 17,
  "alt": 18,
  "pause": 19,
  "capslock": 20,
  "space": 32,
  "escape": 27,
  "pageup": 33,
  "pagedown": 34,
  "end": 35,
  "home": 36,
  "leftarrow": 37,
  "uparrow": 38,
  "rightarrow": 39,
  "downarrow": 40,
  "insert": 45,
  "delete": 46,
  "f1": 112,
  "f2": 113,
  "f3": 114,
  "f4": 115,
  "f5": 116,
  "f6": 117,
  "f7": 118,
  "f8": 119,
  "f9": 120,
  "f10": 121,
  "f11": 122,
  "f12": 123,
  "semicolon": 186,
  "plus": 187,
  "comma": 188,
  "minus": 189,
  "dot": 190,
  "forwardslash": 191,
  "graveaccent": 192,
  "openbracket": 219,
  "backslash": 220,
  "closebracket": 221,
  "singlequote": 222,
  "]": 221,
  "[": 219,
  "=": 187
};
var KeyboardEvents2 = (
  /** @class */
  function(_super) {
    __extends(KeyboardEvents3, _super);
    function KeyboardEvents3(element, options) {
      var _this = _super.call(this, options, element) || this;
      _this.keyPressHandler = function(e) {
        var isAltKey = e.altKey;
        var isCtrlKey = e.ctrlKey;
        var isShiftKey = e.shiftKey;
        var isMetaKey = e.metaKey;
        var curkeyCode = e.which;
        var keys = Object.keys(_this.keyConfigs);
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var key = keys_1[_i];
          var configCollection = _this.keyConfigs["" + key].split(",");
          for (var _a = 0, configCollection_1 = configCollection; _a < configCollection_1.length; _a++) {
            var rconfig = configCollection_1[_a];
            var rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());
            if (isAltKey === rKeyObj.altKey && (isCtrlKey === rKeyObj.ctrlKey || isMetaKey) && isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode) {
              e.action = key;
            }
          }
        }
        if (_this.keyAction) {
          _this.keyAction(e);
        }
      };
      _this.bind();
      return _this;
    }
    KeyboardEvents_1 = KeyboardEvents3;
    KeyboardEvents3.prototype.destroy = function() {
      this.unwireEvents();
      _super.prototype.destroy.call(this);
    };
    KeyboardEvents3.prototype.onPropertyChanged = function(newProp, oldProp) {
    };
    KeyboardEvents3.prototype.bind = function() {
      this.wireEvents();
    };
    KeyboardEvents3.prototype.getModuleName = function() {
      return "keyboard";
    };
    KeyboardEvents3.prototype.wireEvents = function() {
      this.element.addEventListener(this.eventName, this.keyPressHandler);
    };
    KeyboardEvents3.prototype.unwireEvents = function() {
      this.element.removeEventListener(this.eventName, this.keyPressHandler);
    };
    KeyboardEvents3.getKeyConfigData = function(config) {
      if (config in this.configCache) {
        return this.configCache["" + config];
      }
      var keys = config.toLowerCase().split("+");
      var keyData = {
        altKey: keys.indexOf("alt") !== -1 ? true : false,
        ctrlKey: keys.indexOf("ctrl") !== -1 ? true : false,
        shiftKey: keys.indexOf("shift") !== -1 ? true : false,
        keyCode: null
      };
      if (keys[keys.length - 1].length > 1 && !!Number(keys[keys.length - 1])) {
        keyData.keyCode = Number(keys[keys.length - 1]);
      } else {
        keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]);
      }
      KeyboardEvents_1.configCache["" + config] = keyData;
      return keyData;
    };
    KeyboardEvents3.getKeyCode = function(keyVal) {
      return keyCode["" + keyVal] || keyVal.toUpperCase().charCodeAt(0);
    };
    var KeyboardEvents_1;
    KeyboardEvents3.configCache = {};
    __decorate([
      Property({})
    ], KeyboardEvents3.prototype, "keyConfigs", void 0);
    __decorate([
      Property("keyup")
    ], KeyboardEvents3.prototype, "eventName", void 0);
    __decorate([
      Event()
    ], KeyboardEvents3.prototype, "keyAction", void 0);
    KeyboardEvents3 = KeyboardEvents_1 = __decorate([
      NotifyPropertyChanges
    ], KeyboardEvents3);
    return KeyboardEvents3;
  }(Base)
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/color-picker.js
var ColorPickerInput = (
  /** @class */
  function() {
    function ColorPickerInput2(parent, serviceLocator) {
      this.tools = {};
      this.parent = parent;
      this.locator = serviceLocator;
      this.renderFactory = this.locator.getService("rendererFactory");
      this.addEventListener();
      if (this.parent.toolbarSettings && Object.keys(this.parent.toolbarSettings.itemConfigs).length > 0) {
        extend(this.tools, tools, toObjectLowerCase(this.parent.toolbarSettings.itemConfigs), true);
      } else {
        this.tools = tools;
      }
    }
    ColorPickerInput2.prototype.initializeInstance = function() {
      this.toolbarRenderer = this.renderFactory.getRenderer(RenderType.Toolbar);
    };
    ColorPickerInput2.prototype.renderColorPickerInput = function(args) {
      var _this = this;
      this.initializeInstance();
      var suffixID = args.containerType;
      var tbElement = args.container;
      var targetID;
      var options;
      templateItems.forEach(function(item) {
        if (getIndex(item, args.items) !== -1) {
          switch (item) {
            case "fontcolor": {
              targetID = _this.parent.getID() + "_" + suffixID + "_FontColor_Target";
              var fontNode = _this.parent.createElement("input");
              fontNode.id = targetID;
              fontNode.classList.add(CLS_FONT_COLOR_TARGET);
              if (!isNullOrUndefined(_this.parent.cssClass)) {
                var allClassName = _this.parent.cssClass.split(" ");
                for (var i = 0; i < allClassName.length; i++) {
                  if (allClassName[i].trim() !== "") {
                    fontNode.classList.add(allClassName[i]);
                  }
                }
              }
              document.body.appendChild(fontNode);
              options = {
                cssClass: _this.tools[item.toLocaleLowerCase()].icon + " " + CLS_RTE_ELEMENTS + " " + CLS_ICONS + " " + _this.parent.cssClass,
                value: _this.tools[item.toLocaleLowerCase()].value,
                command: _this.tools[item.toLocaleLowerCase()].command,
                subCommand: _this.tools[item.toLocaleLowerCase()].subCommand,
                element: select("#" + _this.parent.getID() + "_" + suffixID + "_FontColor", tbElement),
                target: targetID
              };
              _this.fontColorPicker = _this.toolbarRenderer.renderColorPicker(options, "fontcolor");
              _this.fontColorDropDown = _this.toolbarRenderer.renderColorPickerDropDown(options, "fontcolor", _this.fontColorPicker);
              break;
            }
            case "backgroundcolor": {
              targetID = _this.parent.getID() + "_" + suffixID + "_BackgroundColor_Target";
              var backNode = _this.parent.createElement("input");
              backNode.id = targetID;
              backNode.classList.add(CLS_BACKGROUND_COLOR_TARGET);
              if (!isNullOrUndefined(_this.parent.cssClass)) {
                var allClassName = _this.parent.cssClass.split(" ");
                for (var i = 0; i < allClassName.length; i++) {
                  if (allClassName[i].trim() !== "") {
                    backNode.classList.add(allClassName[i]);
                  }
                }
              }
              document.body.appendChild(backNode);
              options = {
                cssClass: _this.tools[item.toLocaleLowerCase()].icon + " " + CLS_RTE_ELEMENTS + " " + CLS_ICONS + " " + _this.parent.cssClass,
                value: _this.tools[item.toLocaleLowerCase()].value,
                command: _this.tools[item.toLocaleLowerCase()].command,
                subCommand: _this.tools[item.toLocaleLowerCase()].subCommand,
                element: select("#" + _this.parent.getID() + "_" + suffixID + "_BackgroundColor", tbElement),
                target: targetID
              };
              _this.backgroundColorPicker = _this.toolbarRenderer.renderColorPicker(options, "backgroundcolor");
              _this.backgroundColorDropDown = _this.toolbarRenderer.renderColorPickerDropDown(options, "backgroundcolor", _this.backgroundColorPicker, _this.defaultColorPicker);
              break;
            }
          }
        }
      });
      if (this.parent.inlineMode.enable) {
        this.setCssClass({ cssClass: this.parent.cssClass });
      }
    };
    ColorPickerInput2.prototype.destroy = function() {
      this.removeEventListener();
      this.destroyColorPicker();
    };
    ColorPickerInput2.prototype.destroyColorPicker = function() {
      if (this.fontColorPicker && !this.fontColorPicker.isDestroyed) {
        this.fontColorPicker.destroy();
      }
      if (this.backgroundColorPicker && !this.backgroundColorPicker.isDestroyed) {
        this.backgroundColorPicker.destroy();
      }
      if (this.fontColorDropDown && !this.fontColorDropDown.isDestroyed) {
        var innerEle = this.fontColorDropDown.element.querySelector(".e-rte-color-content");
        if (innerEle) {
          detach(innerEle);
        }
        this.fontColorDropDown.destroy();
      }
      if (this.backgroundColorDropDown && !this.backgroundColorDropDown.isDestroyed) {
        var innerEle = this.backgroundColorDropDown.element.querySelector(".e-rte-color-content");
        if (innerEle) {
          this.defaultColorPicker = innerEle.children[0].style.borderBottomColor;
          detach(innerEle);
        }
        this.backgroundColorDropDown.destroy();
      }
    };
    ColorPickerInput2.prototype.setRtl = function(args) {
      if (this.fontColorPicker) {
        this.fontColorPicker.setProperties({ enableRtl: args.enableRtl });
        this.fontColorDropDown.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.backgroundColorPicker) {
        this.backgroundColorPicker.setProperties({ enableRtl: args.enableRtl });
        this.backgroundColorDropDown.setProperties({ enableRtl: args.enableRtl });
      }
    };
    ColorPickerInput2.prototype.setCssClass = function(e) {
      this.updateCss(this.fontColorPicker, this.fontColorDropDown, e);
      this.updateCss(this.backgroundColorPicker, this.backgroundColorDropDown, e);
    };
    ColorPickerInput2.prototype.updateCss = function(colorPickerObj, dropDownObj, e) {
      if (colorPickerObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass)) {
          colorPickerObj.setProperties({ cssClass: (colorPickerObj.cssClass + " " + e.cssClass).trim() });
          dropDownObj.setProperties({ cssClass: (dropDownObj.cssClass + " " + e.cssClass).trim() });
        } else {
          colorPickerObj.setProperties({ cssClass: (colorPickerObj.cssClass.replace(e.oldCssClass, "").replace("  ", " ").trim() + " " + e.cssClass).trim() });
          dropDownObj.setProperties({ cssClass: (dropDownObj.cssClass.replace(e.oldCssClass, "").replace("  ", " ").trim() + " " + e.cssClass).trim() });
        }
      }
    };
    ColorPickerInput2.prototype.addEventListener = function() {
      this.parent.on(toolbarRenderComplete, this.renderColorPickerInput, this);
      this.parent.on(rtlMode, this.setRtl, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(destroyColorPicker, this.destroyColorPicker, this);
      this.parent.on(modelChanged, this.onPropertyChanged, this);
      this.parent.on(bindCssClass, this.setCssClass, this);
    };
    ColorPickerInput2.prototype.onPropertyChanged = function(model) {
      var newProp = model.newProp;
      var element;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "fontColor":
            if (this.fontColorPicker) {
              for (var _b = 0, _c = Object.keys(newProp.fontColor); _b < _c.length; _b++) {
                var font = _c[_b];
                switch (font) {
                  case "default": {
                    this.fontColorPicker.setProperties({ value: newProp.fontColor.default });
                    element = this.fontColorDropDown.element;
                    var fontBorder = element.querySelector("." + this.tools["fontcolor"].icon);
                    fontBorder.style.borderBottomColor = newProp.fontColor.default;
                    break;
                  }
                  case "mode":
                    this.fontColorPicker.setProperties({ mode: newProp.fontColor.mode });
                    break;
                  case "columns":
                    this.fontColorPicker.setProperties({ columns: newProp.fontColor.columns });
                    break;
                  case "colorCode":
                    this.fontColorPicker.setProperties({ presetColors: newProp.fontColor.colorCode });
                    break;
                  case "modeSwitcher":
                    this.fontColorPicker.setProperties({ modeSwitcher: newProp.fontColor.modeSwitcher });
                    break;
                }
              }
            }
            break;
          case "backgroundColor":
            if (this.backgroundColorPicker) {
              for (var _d = 0, _e = Object.keys(newProp.backgroundColor); _d < _e.length; _d++) {
                var background = _e[_d];
                switch (background) {
                  case "default": {
                    this.backgroundColorPicker.setProperties({ value: newProp.backgroundColor.default });
                    element = this.backgroundColorDropDown.element;
                    var backgroundBorder = element.querySelector("." + this.tools["backgroundcolor"].icon);
                    backgroundBorder.style.borderBottomColor = newProp.backgroundColor.default;
                    break;
                  }
                  case "mode":
                    this.backgroundColorPicker.setProperties({ mode: newProp.backgroundColor.mode });
                    break;
                  case "columns":
                    this.backgroundColorPicker.setProperties({ columns: newProp.backgroundColor.columns });
                    break;
                  case "colorCode":
                    this.backgroundColorPicker.setProperties({ presetColors: newProp.backgroundColor.colorCode });
                    break;
                  case "modeSwitcher":
                    this.backgroundColorPicker.setProperties({ modeSwitcher: newProp.backgroundColor.modeSwitcher });
                    break;
                }
              }
            }
            break;
        }
      }
    };
    ColorPickerInput2.prototype.removeEventListener = function() {
      this.parent.off(toolbarRenderComplete, this.renderColorPickerInput);
      this.parent.off(destroy, this.destroy);
      this.parent.off(rtlMode, this.setRtl);
      this.parent.off(destroyColorPicker, this.destroyColorPicker);
      this.parent.off(modelChanged, this.onPropertyChanged);
      this.parent.off(bindCssClass, this.setCssClass);
    };
    return ColorPickerInput2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/base-quick-toolbar.js
var BaseQuickToolbar = (
  /** @class */
  function() {
    function BaseQuickToolbar2(parent, locator) {
      this.parent = parent;
      this.locator = locator;
      this.isDOMElement = false;
      this.renderFactory = this.locator.getService("rendererFactory");
      this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
      this.popupRenderer = this.renderFactory.getRenderer(RenderType.Popup);
      this.dropDownButtons = new DropDownButtons(this.parent, this.locator);
      this.colorPickerObj = new ColorPickerInput(this.parent, this.locator);
    }
    BaseQuickToolbar2.prototype.appendPopupContent = function() {
      this.toolbarElement = this.parent.createElement("div", { className: CLS_QUICK_TB });
      this.element.appendChild(this.toolbarElement);
    };
    BaseQuickToolbar2.prototype.render = function(args) {
      var className;
      if (args.popupType === "Image") {
        className = CLS_IMAGE_POP;
      } else if (args.popupType === "Inline") {
        className = CLS_INLINE_POP;
      } else {
        className = "";
      }
      var popupId = getUniqueID(args.popupType + "_Quick_Popup");
      this.stringItems = args.toolbarItems;
      this.element = this.parent.createElement("div", { id: popupId, className: className + " " + CLS_RTE_ELEMENTS });
      this.element.setAttribute("aria-owns", this.parent.getID());
      this.appendPopupContent();
      this.createToolbar(args.toolbarItems, args.mode, args.cssClass);
      this.popupRenderer.renderPopup(this);
      this.addEventListener();
    };
    BaseQuickToolbar2.prototype.createToolbar = function(items, mode, cssClass) {
      this.quickTBarObj = new BaseToolbar(this.parent, this.locator);
      this.quickTBarObj.render({
        container: "quick",
        target: this.toolbarElement,
        items,
        mode,
        cssClass
      });
      this.quickTBarObj.toolbarObj.refresh();
    };
    BaseQuickToolbar2.prototype.setPosition = function(e) {
      var x;
      var y;
      var imgWrapper = closest(e.target, ".e-img-caption");
      var isAligned = e.target.classList.contains("e-imginline") || e.target.classList.contains("e-imgbreak") ? false : true;
      var target = !isNullOrUndefined(imgWrapper) ? imgWrapper : e.target;
      addClass([this.toolbarElement], [CLS_RM_WHITE_SPACE]);
      var targetOffsetTop = target.offsetTop;
      var parentOffsetTop = window.pageYOffset + e.parentData.top;
      if (targetOffsetTop - e.editTop > e.popHeight) {
        y = parentOffsetTop + e.tBarElementHeight + (targetOffsetTop - e.editTop) - e.popHeight - 5;
      } else if (e.editTop + e.editHeight - (targetOffsetTop + target.offsetHeight) > e.popHeight) {
        y = parentOffsetTop + e.tBarElementHeight + (targetOffsetTop - e.editTop) + target.offsetHeight + 5;
      } else {
        y = e.y;
      }
      target = isAligned ? e.target : target;
      if (target.offsetWidth > e.popWidth) {
        x = target.offsetWidth / 2 - e.popWidth / 2 + e.parentData.left + target.offsetLeft;
      } else {
        x = e.parentData.left + target.offsetLeft;
      }
      this.popupObj.position.X = x + e.popWidth > e.parentData.right ? e.parentData.right - e.popWidth : x;
      this.popupObj.position.Y = y >= 0 ? y : e.y + 5;
      this.popupObj.dataBind();
      removeClass([this.toolbarElement], [CLS_RM_WHITE_SPACE]);
    };
    BaseQuickToolbar2.prototype.checkCollision = function(e, viewPort, type) {
      var x;
      var y;
      var parentTop = e.parentData.top;
      var contentTop = e.windowY + parentTop + e.tBarElementHeight;
      var collision = [];
      if (viewPort === "document") {
        collision = isCollide(e.popup);
      } else {
        collision = isCollide(e.popup, e.parentElement);
      }
      for (var i = 0; i < collision.length; i++) {
        switch (collision[i]) {
          case "top":
            if (viewPort === "document") {
              y = e.windowY;
            } else {
              y = window.pageYOffset + parentTop + e.tBarElementHeight;
            }
            break;
          case "bottom": {
            var posY = void 0;
            if (viewPort === "document") {
              if (type === "inline") {
                posY = e.y - e.popHeight - 10;
              } else {
                if (e.windowHeight - (parentTop + e.tBarElementHeight) > e.popHeight) {
                  if (contentTop - e.windowHeight > e.popHeight) {
                    posY = contentTop + (e.windowHeight - parentTop) - e.popHeight;
                  } else {
                    posY = contentTop;
                  }
                } else {
                  posY = e.windowY + (parentTop + e.tBarElementHeight);
                }
              }
            } else {
              if (e.target.tagName !== "IMG") {
                posY = e.parentData.bottom + window.pageYOffset - e.popHeight - 10;
              } else {
                posY = e.parentData.bottom + window.pageYOffset - e.popHeight - 5;
              }
            }
            y = posY;
            break;
          }
          case "right":
            if (type === "inline") {
              x = window.pageXOffset + (e.windowWidth - (e.popWidth + e.bodyRightSpace + 10));
            } else {
              x = e.x - e.popWidth;
            }
            break;
          case "left":
            if (type === "inline") {
              x = 0;
            } else {
              x = e.parentData.left;
            }
            break;
        }
      }
      this.popupObj.position.X = x ? x : this.popupObj.position.X;
      this.popupObj.position.Y = y ? y : this.popupObj.position.Y;
      this.popupObj.dataBind();
    };
    BaseQuickToolbar2.prototype.showPopup = function(x, y, target) {
      var _this = this;
      var eventArgs = {
        popup: this.popupObj,
        cancel: false,
        targetElement: target,
        positionX: x,
        positionY: y
      };
      this.parent.trigger(beforeQuickToolbarOpen, eventArgs, function(beforeQuickToolbarArgs) {
        if (!beforeQuickToolbarArgs.cancel) {
          var editPanelTop = void 0;
          var editPanelHeight = void 0;
          var bodyStyle = window.getComputedStyle(document.body);
          var bodyRight = parseFloat(bodyStyle.marginRight.split("px")[0]) + parseFloat(bodyStyle.paddingRight.split("px")[0]);
          var windowHeight = window.innerHeight;
          var windowWidth = window.innerWidth;
          var parent_1 = _this.parent.element;
          var toolbarAvail = !isNullOrUndefined(_this.parent.getToolbar());
          var tbHeight = toolbarAvail && _this.parent.toolbarModule.getToolbarHeight();
          var expTBHeight = toolbarAvail && _this.parent.toolbarModule.getExpandTBarPopHeight();
          var tBarHeight = toolbarAvail ? tbHeight + expTBHeight : 0;
          addClass([_this.element], [CLS_HIDE]);
          if (Browser.isDevice && !isIDevice()) {
            addClass([_this.parent.getToolbar()], [CLS_HIDE]);
          }
          if (_this.parent.iframeSettings.enable) {
            var cntEle = _this.contentRenderer.getPanel().contentWindow;
            editPanelTop = cntEle.pageYOffset;
            editPanelHeight = cntEle.innerHeight;
          } else {
            var cntEle = closest(target, "." + CLS_RTE_CONTENT);
            editPanelTop = cntEle ? cntEle.scrollTop : 0;
            editPanelHeight = cntEle ? cntEle.offsetHeight : 0;
          }
          if (!_this.parent.inlineMode.enable && !closest(target, "table")) {
            _this.parent.disableToolbarItem(_this.parent.toolbarSettings.items);
            _this.parent.enableToolbarItem(["Undo", "Redo"]);
          }
          append([_this.element], document.body);
          if (_this.parent.showTooltip) {
            _this.tooltip = new Tooltip({
              target: "#" + _this.element.id + " [title]",
              openDelay: 400,
              showTipPointer: true
            });
            _this.tooltip.appendTo(_this.element);
          }
          _this.popupObj.position.X = beforeQuickToolbarArgs.positionX + 20;
          _this.popupObj.position.Y = beforeQuickToolbarArgs.positionY + 20;
          _this.popupObj.dataBind();
          _this.popupObj.element.classList.add("e-popup-open");
          _this.dropDownButtons.renderDropDowns({
            container: _this.toolbarElement,
            containerType: "quick",
            items: _this.stringItems
          });
          _this.colorPickerObj.renderColorPickerInput({
            container: _this.toolbarElement,
            containerType: "quick",
            items: _this.stringItems
          });
          var showPopupData = {
            x,
            y,
            target,
            editTop: editPanelTop,
            editHeight: editPanelHeight,
            popup: _this.popupObj.element,
            popHeight: _this.popupObj.element.offsetHeight,
            popWidth: _this.popupObj.element.offsetWidth,
            parentElement: parent_1,
            bodyRightSpace: bodyRight,
            windowY: window.pageYOffset,
            windowHeight,
            windowWidth,
            parentData: parent_1.getBoundingClientRect(),
            tBarElementHeight: tBarHeight
          };
          if (target.tagName === "IMG" || target.tagName === "AUDIO" || target.tagName === "VIDEO" || target.tagName === "IFRAME" || target.classList && (target.classList.contains(CLS_AUDIOWRAP) || target.classList.contains(CLS_CLICKELEM) || target.classList.contains(CLS_VID_CLICK_ELEM))) {
            _this.setPosition(showPopupData);
          }
          if (!_this.parent.inlineMode.enable) {
            _this.checkCollision(showPopupData, "parent", "");
          }
          _this.checkCollision(showPopupData, "document", _this.parent.inlineMode.enable ? "inline" : "");
          _this.popupObj.element.classList.remove("e-popup-open");
          removeClass([_this.element], [CLS_HIDE]);
          _this.popupObj.show({ name: "ZoomIn", duration: Browser.isIE ? 250 : 400 });
          if (_this.popupObj && _this.parent.cssClass) {
            removeClass([_this.popupObj.element], _this.parent.cssClass);
            addClass([_this.popupObj.element], _this.parent.cssClass);
          }
          setStyleAttribute(_this.element, {
            maxWidth: window.outerWidth + "px"
          });
          addClass([_this.element], [CLS_POP]);
          _this.isDOMElement = true;
        }
      });
    };
    BaseQuickToolbar2.prototype.hidePopup = function() {
      var viewSourcePanel = this.parent.sourceCodeModule.getViewPanel();
      if (Browser.isDevice && !isIDevice()) {
        removeClass([this.parent.getToolbar()], [CLS_HIDE]);
      }
      if (!isNullOrUndefined(document.querySelector(".e-tooltip-wrap"))) {
        if (!isNullOrUndefined(document.querySelector("#" + this.element.id + " [data-tooltip-id]"))) {
          var tooltipTargetEle = document.querySelector("#" + this.element.id + " [data-tooltip-id]");
          var dataContent = tooltipTargetEle.getAttribute("data-content");
          tooltipTargetEle.removeAttribute("data-content");
          tooltipTargetEle.setAttribute("title", dataContent);
          tooltipTargetEle.removeAttribute("data-tooltip-id");
        }
        this.tooltip.destroy();
      } else {
        if (!isNullOrUndefined(this.tooltip)) {
          this.tooltip.destroy();
        }
      }
      if (!isNullOrUndefined(this.parent.getToolbar()) && !this.parent.inlineMode.enable) {
        if (isNullOrUndefined(viewSourcePanel) || viewSourcePanel.style.display === "none") {
          this.parent.enableToolbarItem(this.parent.toolbarSettings.items);
        }
      }
      this.removeEleFromDOM();
      this.isDOMElement = false;
    };
    BaseQuickToolbar2.prototype.addQTBarItem = function(item, index) {
      this.quickTBarObj.toolbarObj.addItems(this.quickTBarObj.getItems(item, "toolbar"), index);
    };
    BaseQuickToolbar2.prototype.removeQTBarItem = function(index) {
      this.quickTBarObj.toolbarObj.removeItems(index);
    };
    BaseQuickToolbar2.prototype.removeEleFromDOM = function() {
      var element = this.popupObj.element;
      if (this.isDOMElement) {
        this.dropDownButtons.destroyDropDowns();
        this.colorPickerObj.destroyColorPicker();
        removeClass([this.element], [CLS_POP]);
        detach(element);
        var args = this.popupObj;
        this.parent.trigger(quickToolbarClose, args);
      }
    };
    BaseQuickToolbar2.prototype.updateStatus = function(args) {
      var options = {
        args,
        dropDownModule: this.dropDownButtons,
        parent: this.parent,
        tbElements: selectAll("." + CLS_TB_ITEM, this.element),
        tbItems: this.quickTBarObj.toolbarObj.items
      };
      setToolbarStatus(options, true, this.parent);
      if (!select(".e-rte-srctextarea", this.parent.element)) {
        updateUndoRedoStatus(this.parent.getBaseToolbarObject(), this.parent.formatter.editorManager.undoRedoManager.getUndoStatus());
      }
    };
    BaseQuickToolbar2.prototype.destroy = function() {
      if (this.popupObj && !this.popupObj.isDestroyed) {
        this.popupObj.destroy();
        this.removeEleFromDOM();
      }
      this.removeEventListener();
    };
    BaseQuickToolbar2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(modelChanged, this.onPropertyChanged, this);
      if (this.parent.inlineMode.enable) {
        this.parent.on(toolbarUpdated, this.updateStatus, this);
      }
    };
    BaseQuickToolbar2.prototype.onPropertyChanged = function(e) {
      if (!isNullOrUndefined(e.newProp.inlineMode)) {
        for (var _i = 0, _a = Object.keys(e.newProp.inlineMode); _i < _a.length; _i++) {
          var prop = _a[_i];
          switch (prop) {
            case "enable":
              if (e.newProp.inlineMode.enable) {
                this.parent.on(toolbarUpdated, this.updateStatus, this);
              } else {
                this.parent.off(toolbarUpdated, this.updateStatus);
              }
              break;
          }
        }
      }
    };
    BaseQuickToolbar2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(destroy, this.destroy);
      this.parent.off(modelChanged, this.onPropertyChanged);
      if (this.parent.inlineMode.enable) {
        this.parent.off(toolbarUpdated, this.updateStatus);
      }
    };
    return BaseQuickToolbar2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/popup-renderer.js
var PopupRenderer = (
  /** @class */
  function() {
    function PopupRenderer2(parent) {
      this.parent = parent;
    }
    PopupRenderer2.prototype.quickToolbarOpen = function() {
      var args = this.popupObj;
      this.parent.trigger(quickToolbarOpen, args);
    };
    PopupRenderer2.prototype.renderPopup = function(args) {
      this.setPanel(args.element);
      this.renderPanel();
      args.popupObj = new Popup(args.element, {
        targetType: "relative",
        relateTo: this.parent.element,
        open: this.quickToolbarOpen.bind(this)
      });
      this.popupObj = args.popupObj;
      args.popupObj.hide();
    };
    PopupRenderer2.prototype.renderPanel = function() {
      this.getPanel().classList.add(CLS_QUICK_POP);
    };
    PopupRenderer2.prototype.getPanel = function() {
      return this.popupPanel;
    };
    PopupRenderer2.prototype.setPanel = function(panel2) {
      this.popupPanel = panel2;
    };
    return PopupRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/quick-toolbar.js
var QuickToolbar = (
  /** @class */
  function() {
    function QuickToolbar2(parent, locator) {
      this.parent = parent;
      this.locator = locator;
      this.renderFactory = this.locator.getService("rendererFactory");
      this.renderFactory.addRenderer(RenderType.Popup, new PopupRenderer(this.parent));
      this.addEventListener();
    }
    QuickToolbar2.prototype.formatItems = function(items) {
      var formattedItems = [];
      items.forEach(function(item) {
        if (typeof item === "string") {
          switch (item.toLocaleLowerCase()) {
            case "open":
              formattedItems.push("openLink");
              break;
            case "edit":
              formattedItems.push("editLink");
              break;
            case "unlink":
              formattedItems.push("removeLink");
              break;
            default:
              formattedItems.push(item);
              break;
          }
        } else {
          formattedItems.push(item);
        }
      });
      return formattedItems;
    };
    QuickToolbar2.prototype.getQTBarOptions = function(popType, mode, items, type) {
      return {
        popupType: popType,
        toolbarItems: items,
        mode,
        renderType: type,
        cssClass: this.parent.cssClass
      };
    };
    QuickToolbar2.prototype.createQTBar = function(popupType, mode, items, type) {
      if (items.length < 1) {
        return null;
      }
      var qTBar = new BaseQuickToolbar(this.parent, this.locator);
      qTBar.render(this.getQTBarOptions(popupType, mode, this.formatItems(items), type));
      return qTBar;
    };
    QuickToolbar2.prototype.initializeQuickToolbars = function() {
      this.parent.quickToolbarModule = this;
      this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
      if (this.parent.inlineMode.enable && this.parent.inlineMode.onSelection && isIDevice()) {
        EventHandler.add(this.contentRenderer.getDocument(), "selectionchange", this.selectionChangeHandler, this);
      }
    };
    QuickToolbar2.prototype.onMouseDown = function(e) {
      this.parent.isBlur = false;
      this.parent.isRTE = true;
    };
    QuickToolbar2.prototype.keyUpQT = function(e) {
      if (e.which === 27) {
        this.hideQuickToolbars();
      }
    };
    QuickToolbar2.prototype.renderQuickToolbars = function() {
      if (this.linkQTBar || this.imageQTBar || this.audioQTBar || this.videoQTBar || this.textQTBar || this.tableQTBar) {
        return;
      }
      this.linkQTBar = this.createQTBar("Link", "Scrollable", this.parent.quickToolbarSettings.link, RenderType.LinkToolbar);
      this.renderFactory.addRenderer(RenderType.LinkToolbar, this.linkQTBar);
      this.textQTBar = this.createQTBar("Text", "Scrollable", this.parent.quickToolbarSettings.text, RenderType.TextToolbar);
      this.renderFactory.addRenderer(RenderType.TextToolbar, this.textQTBar);
      this.imageQTBar = this.createQTBar("Image", "MultiRow", this.parent.quickToolbarSettings.image, RenderType.ImageToolbar);
      this.renderFactory.addRenderer(RenderType.ImageToolbar, this.imageQTBar);
      this.audioQTBar = this.createQTBar("Audio", "MultiRow", this.parent.quickToolbarSettings.audio, RenderType.AudioToolbar);
      this.renderFactory.addRenderer(RenderType.AudioToolbar, this.audioQTBar);
      this.videoQTBar = this.createQTBar("Video", "MultiRow", this.parent.quickToolbarSettings.video, RenderType.VideoToolbar);
      this.renderFactory.addRenderer(RenderType.VideoToolbar, this.videoQTBar);
      this.tableQTBar = this.createQTBar("Table", "MultiRow", this.parent.quickToolbarSettings.table, RenderType.TableToolbar);
      this.renderFactory.addRenderer(RenderType.TableToolbar, this.tableQTBar);
      if (this.linkQTBar) {
        EventHandler.add(this.linkQTBar.element, "mousedown", this.onMouseDown, this);
        EventHandler.add(this.linkQTBar.element, "keyup", this.keyUpQT, this);
      }
      if (this.imageQTBar) {
        EventHandler.add(this.imageQTBar.element, "mousedown", this.onMouseDown, this);
        EventHandler.add(this.imageQTBar.element, "keyup", this.keyUpQT, this);
      }
      if (this.audioQTBar) {
        EventHandler.add(this.audioQTBar.element, "mousedown", this.onMouseDown, this);
        EventHandler.add(this.audioQTBar.element, "keyup", this.keyUpQT, this);
      }
      if (this.videoQTBar) {
        EventHandler.add(this.videoQTBar.element, "mousedown", this.onMouseDown, this);
        EventHandler.add(this.videoQTBar.element, "keyup", this.keyUpQT, this);
      }
      if (this.textQTBar) {
        EventHandler.add(this.textQTBar.element, "mousedown", this.onMouseDown, this);
        EventHandler.add(this.textQTBar.element, "keyup", this.keyUpQT, this);
      }
      if (this.tableQTBar) {
        EventHandler.add(this.tableQTBar.element, "mousedown", this.onMouseDown, this);
        EventHandler.add(this.tableQTBar.element, "keyup", this.keyUpQT, this);
      }
    };
    QuickToolbar2.prototype.renderInlineQuickToolbar = function() {
      if (this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice())) {
        addClass([this.parent.element], [CLS_INLINE]);
        this.inlineQTBar = this.createQTBar("Inline", "MultiRow", this.parent.toolbarSettings.items, RenderType.InlineToolbar);
        this.renderFactory.addRenderer(RenderType.InlineToolbar, this.inlineQTBar);
        EventHandler.add(this.inlineQTBar.element, "mousedown", this.onMouseDown, this);
        EventHandler.add(this.inlineQTBar.element, "keyup", this.keyUpQT, this);
      }
    };
    QuickToolbar2.prototype.showInlineQTBar = function(x, y, target) {
      if (this.parent.readonly || target.tagName.toLowerCase() === "img") {
        return;
      }
      this.inlineQTBar.showPopup(x, y, target);
    };
    QuickToolbar2.prototype.hideInlineQTBar = function() {
      if (this.inlineQTBar && !hasClass(this.inlineQTBar.element, "e-popup-close")) {
        this.inlineQTBar.hidePopup();
      }
    };
    QuickToolbar2.prototype.hideQuickToolbars = function() {
      if (this.linkQTBar && !hasClass(this.linkQTBar.element, "e-popup-close") && document.body.contains(this.linkQTBar.element)) {
        this.linkQTBar.hidePopup();
      }
      if (this.textQTBar && !hasClass(this.textQTBar.element, "e-popup-close") && document.body.contains(this.textQTBar.element)) {
        this.textQTBar.hidePopup();
      }
      if (this.imageQTBar && !hasClass(this.imageQTBar.element, "e-popup-close") && document.body.contains(this.imageQTBar.element)) {
        this.imageQTBar.hidePopup();
      }
      if (this.audioQTBar && !hasClass(this.audioQTBar.element, "e-popup-close") && document.body.contains(this.audioQTBar.element)) {
        this.audioQTBar.hidePopup();
      }
      if (this.videoQTBar && !hasClass(this.videoQTBar.element, "e-popup-close") && document.body.contains(this.videoQTBar.element)) {
        this.videoQTBar.hidePopup();
      }
      if (this.tableQTBar && !hasClass(this.tableQTBar.element, "e-popup-close") && document.body.contains(this.tableQTBar.element)) {
        this.tableQTBar.hidePopup();
      }
      if (!isNullOrUndefined(this.parent) && this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice())) {
        this.hideInlineQTBar();
      }
    };
    QuickToolbar2.prototype.deBounce = function(x, y, target) {
      var _this = this;
      clearTimeout(this.deBouncer);
      this.deBouncer = window.setTimeout(function() {
        _this.showInlineQTBar(x, y, target);
      }, 1e3);
    };
    QuickToolbar2.prototype.mouseUpHandler = function(e) {
      if (this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice())) {
        var args = e.args.touches ? e.args.changedTouches[0] : e.args;
        var range = this.parent.getRange();
        var target = e.args.target;
        if (isNullOrUndefined(select("." + CLS_INLINE_POP, document.body))) {
          if (isIDevice() && e.touchData && e.touchData.prevClientX !== e.touchData.clientX && e.touchData.prevClientY !== e.touchData.clientY) {
            return;
          }
          this.hideInlineQTBar();
          var parentLeft = this.parent.element.getBoundingClientRect().left;
          this.offsetX = this.parent.iframeSettings.enable ? window.pageXOffset + parentLeft + args.clientX : args.pageX;
          this.offsetY = pageYOffset(args, this.parent.element, this.parent.iframeSettings.enable);
          if (target.nodeName === "TEXTAREA") {
            this.showInlineQTBar(this.offsetX, this.offsetY, target);
          } else {
            var closestAnchor = closest(target, "a");
            target = closestAnchor ? closestAnchor : target;
            var startNode = this.parent.getRange().startContainer.parentElement;
            var endNode = this.parent.getRange().endContainer.parentElement;
            if ((isNullOrUndefined(closest(startNode, "A")) || isNullOrUndefined(closest(endNode, "A"))) && (!closest(target, "td,th") || !range.collapsed) && (target.tagName !== "IMG" || this.parent.getRange().startOffset !== this.parent.getRange().endOffset)) {
              if (this.parent.inlineMode.onSelection && range.collapsed) {
                return;
              }
              this.target = target;
              this.showInlineQTBar(this.offsetX, this.offsetY, target);
            }
          }
        }
      }
    };
    QuickToolbar2.prototype.keyDownHandler = function() {
      if (this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice()) && !isNullOrUndefined(select("." + CLS_INLINE_POP, document))) {
        this.hideInlineQTBar();
      }
    };
    QuickToolbar2.prototype.inlineQTBarMouseDownHandler = function() {
      if (this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice()) && !isNullOrUndefined(select("." + CLS_INLINE_POP, document))) {
        this.hideInlineQTBar();
      }
    };
    QuickToolbar2.prototype.keyUpHandler = function(e) {
      if (this.parent.inlineMode.enable && !Browser.isDevice) {
        var args = e.args;
        if (this.parent.inlineMode.onSelection) {
          if (this.parent.getSelection().length > 0) {
            if (args.ctrlKey && args.keyCode === 65 || args.shiftKey && (args.keyCode === 33 || args.keyCode === 34 || args.keyCode === 35 || args.keyCode === 36 || args.keyCode === 37 || args.keyCode === 38 || args.keyCode === 39 || args.keyCode === 40)) {
              this.showInlineQTBar(this.offsetX, this.offsetY, args.target);
            }
          }
          return;
        }
        this.deBounce(this.offsetX, this.offsetY, args.target);
      }
    };
    QuickToolbar2.prototype.selectionChangeHandler = function(e) {
      var _this = this;
      clearTimeout(this.deBouncer);
      this.deBouncer = window.setTimeout(function() {
        _this.onSelectionChange(e);
      }, 1e3);
    };
    QuickToolbar2.prototype.onSelectionChange = function(e) {
      if (!isNullOrUndefined(select("." + CLS_INLINE_POP, document.body))) {
        return;
      }
      var selection = this.contentRenderer.getDocument().getSelection();
      if (!selection.isCollapsed) {
        this.mouseUpHandler({ args: e });
      }
    };
    QuickToolbar2.prototype.getInlineBaseToolbar = function() {
      return this.inlineQTBar && this.inlineQTBar.quickTBarObj;
    };
    QuickToolbar2.prototype.destroy = function() {
      if (this.linkQTBar) {
        EventHandler.remove(this.linkQTBar.element, "mousedown", this.onMouseDown);
        EventHandler.remove(this.linkQTBar.element, "keyup", this.keyUpQT);
        this.linkQTBar.destroy();
      }
      if (this.textQTBar) {
        EventHandler.remove(this.textQTBar.element, "mousedown", this.onMouseDown);
        EventHandler.remove(this.textQTBar.element, "keyup", this.keyUpQT);
        this.textQTBar.destroy();
      }
      if (this.imageQTBar) {
        EventHandler.remove(this.imageQTBar.element, "mousedown", this.onMouseDown);
        EventHandler.remove(this.imageQTBar.element, "keyup", this.keyUpQT);
        this.imageQTBar.destroy();
      }
      if (this.audioQTBar) {
        EventHandler.remove(this.audioQTBar.element, "mousedown", this.onMouseDown);
        EventHandler.remove(this.audioQTBar.element, "keyup", this.keyUpQT);
        this.audioQTBar.destroy();
      }
      if (this.videoQTBar) {
        EventHandler.remove(this.videoQTBar.element, "mousedown", this.onMouseDown);
        EventHandler.remove(this.videoQTBar.element, "keyup", this.keyUpQT);
        this.videoQTBar.destroy();
      }
      if (this.tableQTBar) {
        EventHandler.remove(this.tableQTBar.element, "mousedown", this.onMouseDown);
        EventHandler.remove(this.tableQTBar.element, "keyup", this.keyUpQT);
        this.tableQTBar.destroy();
      }
      if (this.inlineQTBar) {
        EventHandler.remove(this.inlineQTBar.element, "mousedown", this.onMouseDown);
        EventHandler.remove(this.inlineQTBar.element, "keyup", this.keyUpQT);
        if (isIDevice()) {
          EventHandler.remove(document, "selectionchange", this.selectionChangeHandler);
        }
        this.inlineQTBar.destroy();
      }
      this.removeEventListener();
    };
    QuickToolbar2.prototype.moduleDestroy = function() {
      this.parent = null;
    };
    QuickToolbar2.prototype.wireInlineQTBarEvents = function() {
      this.parent.on(mouseUp, this.mouseUpHandler, this);
      this.parent.on(mouseDown, this.inlineQTBarMouseDownHandler, this);
      this.parent.on(keyDown, this.keyDownHandler, this);
      this.parent.on(keyUp, this.keyUpHandler, this);
      this.parent.on(sourceCodeMouseDown, this.mouseUpHandler, this);
      this.parent.on(renderInlineToolbar, this.renderInlineQuickToolbar, this);
      this.parent.on(moduleDestroy, this.moduleDestroy, this);
    };
    QuickToolbar2.prototype.unWireInlineQTBarEvents = function() {
      this.parent.off(mouseUp, this.mouseUpHandler);
      this.parent.off(mouseDown, this.inlineQTBarMouseDownHandler);
      this.parent.off(keyDown, this.keyDownHandler);
      this.parent.off(keyUp, this.keyUpHandler);
      this.parent.off(sourceCodeMouseDown, this.mouseUpHandler);
      this.parent.off(renderInlineToolbar, this.renderInlineQuickToolbar);
      this.parent.off(moduleDestroy, this.moduleDestroy);
    };
    QuickToolbar2.prototype.toolbarUpdated = function(args) {
      if (this.linkQTBar && !hasClass(this.linkQTBar.element, "e-popup-close")) {
        this.linkQTBar.hidePopup();
      }
      if (this.imageQTBar && !hasClass(this.imageQTBar.element, "e-popup-close")) {
        this.imageQTBar.hidePopup();
      }
      if (this.audioQTBar && !hasClass(this.audioQTBar.element, "e-popup-close")) {
        this.audioQTBar.hidePopup();
      }
      if (this.videoQTBar && !hasClass(this.videoQTBar.element, "e-popup-close")) {
        this.videoQTBar.hidePopup();
      }
      if (this.tableQTBar && !hasClass(this.tableQTBar.element, "e-popup-close")) {
        this.tableQTBar.hidePopup();
      }
    };
    QuickToolbar2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialEnd, this.initializeQuickToolbars, this);
      this.parent.on(mouseDown, this.renderQuickToolbars, this);
      this.parent.on(toolbarUpdated, this.toolbarUpdated, this);
      this.parent.on(drop, this.renderQuickToolbars, this);
      this.wireInlineQTBarEvents();
      this.parent.on(modelChanged, this.onPropertyChanged, this);
      if (this.parent.quickToolbarSettings.actionOnScroll === "hide") {
        this.parent.on(scroll, this.hideQuickToolbars, this);
        this.parent.on(contentscroll, this.hideQuickToolbars, this);
      }
      this.parent.on(focusChange, this.hideQuickToolbars, this);
      this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(keyDown, this.onKeyDown, this);
      this.parent.on(rtlMode, this.setRtl, this);
      this.parent.on(bindCssClass, this.setCssClass, this);
    };
    QuickToolbar2.prototype.onKeyDown = function(e) {
      var args = e.args;
      if (args.which === 8 || args.which === 46) {
        if (this.imageQTBar && !hasClass(this.imageQTBar.element, "e-popup-close")) {
          this.imageQTBar.hidePopup();
        }
        if (this.audioQTBar && !hasClass(this.audioQTBar.element, "e-popup-close")) {
          this.audioQTBar.hidePopup();
        }
        if (this.videoQTBar && !hasClass(this.videoQTBar.element, "e-popup-close")) {
          this.videoQTBar.hidePopup();
        }
      }
    };
    QuickToolbar2.prototype.onIframeMouseDown = function() {
      this.hideQuickToolbars();
      this.hideInlineQTBar();
    };
    QuickToolbar2.prototype.updateCss = function(baseQTObj, e) {
      if (baseQTObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass && baseQTObj.quickTBarObj.toolbarObj.cssClass !== e.cssClass)) {
          baseQTObj.quickTBarObj.toolbarObj.setProperties({ cssClass: (baseQTObj.quickTBarObj.toolbarObj.cssClass + " " + e.cssClass).trim() });
        } else {
          baseQTObj.quickTBarObj.toolbarObj.setProperties({ cssClass: (baseQTObj.quickTBarObj.toolbarObj.cssClass.replace(e.oldCssClass, "").trim() + " " + e.cssClass).trim() });
        }
      }
    };
    QuickToolbar2.prototype.setCssClass = function(e) {
      var baseQuickToolbarObj = [
        this.inlineQTBar,
        this.imageQTBar,
        this.linkQTBar,
        this.textQTBar,
        this.tableQTBar
      ];
      for (var i = 0; i < baseQuickToolbarObj.length; i++) {
        this.updateCss(baseQuickToolbarObj[i], e);
      }
    };
    QuickToolbar2.prototype.setRtl = function(args) {
      if (this.inlineQTBar) {
        this.inlineQTBar.quickTBarObj.toolbarObj.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.imageQTBar) {
        this.imageQTBar.quickTBarObj.toolbarObj.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.audioQTBar) {
        this.audioQTBar.quickTBarObj.toolbarObj.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.videoQTBar) {
        this.videoQTBar.quickTBarObj.toolbarObj.setProperties({ enableRtl: args.enableRtl });
      }
      if (this.linkQTBar) {
        this.linkQTBar.quickTBarObj.toolbarObj.setProperties({ enableRtl: args.enableRtl });
      }
    };
    QuickToolbar2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialEnd, this.initializeQuickToolbars);
      this.parent.off(mouseDown, this.renderQuickToolbars);
      this.parent.off(toolbarUpdated, this.toolbarUpdated);
      this.parent.off(drop, this.renderQuickToolbars);
      this.unWireInlineQTBarEvents();
      this.parent.off(modelChanged, this.onPropertyChanged);
      if (this.parent.quickToolbarSettings.actionOnScroll === "hide") {
        this.parent.off(scroll, this.hideQuickToolbars);
        this.parent.off(contentscroll, this.hideQuickToolbars);
      }
      this.parent.off(focusChange, this.hideQuickToolbars);
      this.parent.off(destroy, this.destroy);
      this.parent.off(iframeMouseDown, this.onIframeMouseDown);
      this.parent.off(keyDown, this.onKeyDown);
      this.parent.off(rtlMode, this.setRtl);
      this.parent.off(bindCssClass, this.setCssClass);
    };
    QuickToolbar2.prototype.onPropertyChanged = function(e) {
      if (!isNullOrUndefined(e.newProp.quickToolbarSettings)) {
        for (var _i = 0, _a = Object.keys(e.newProp.quickToolbarSettings); _i < _a.length; _i++) {
          var prop = _a[_i];
          switch (prop) {
            case "actionOnScroll":
              if (e.newProp.quickToolbarSettings.actionOnScroll === "none") {
                this.parent.off(scroll, this.hideQuickToolbars);
                this.parent.off(contentscroll, this.hideQuickToolbars);
              } else {
                this.parent.on(scroll, this.hideQuickToolbars, this);
                this.parent.on(contentscroll, this.hideQuickToolbars, this);
              }
              break;
          }
        }
      }
      if (e.module !== this.getModuleName()) {
        return;
      }
      if (this.inlineQTBar) {
        removeClass([this.parent.element], [CLS_INLINE]);
        this.unWireInlineQTBarEvents();
        this.hideInlineQTBar();
      }
      if (this.parent.inlineMode.enable && (!Browser.isDevice || isIDevice())) {
        addClass([this.parent.element], [CLS_INLINE]);
        this.wireInlineQTBarEvents();
      }
    };
    QuickToolbar2.prototype.getModuleName = function() {
      return "quickToolbar";
    };
    return QuickToolbar2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/count.js
var Count = (
  /** @class */
  function() {
    function Count2(parent, serviceLocator) {
      this.parent = parent;
      this.locator = serviceLocator;
      this.renderFactory = this.locator.getService("rendererFactory");
      this.addEventListener();
    }
    Count2.prototype.initializeInstance = function() {
      this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
      this.editPanel = this.contentRenderer.getEditPanel();
      this.addEventListener();
    };
    Count2.prototype.renderCount = function() {
      this.initializeInstance();
      this.element = this.parent.createElement("span", { className: CLS_COUNT });
      this.contentRenderer.getPanel().parentElement.appendChild(this.element);
      this.appendCount();
      if (this.parent.maxLength !== -1) {
        this.charCountBackground(this.htmlLength);
      }
    };
    Count2.prototype.appendCount = function() {
      var htmlText = this.parent.editorMode === "Markdown" ? this.editPanel.value : this.editPanel.textContent;
      if (this.parent.editorMode !== "Markdown" && htmlText.indexOf("​") !== -1) {
        this.htmlLength = htmlText.replace(/\u200B/g, "").length;
      } else {
        this.htmlLength = htmlText.length;
      }
      var string = this.parent.maxLength === -1 ? this.htmlLength : this.htmlLength + " / " + this.parent.maxLength;
      this.element.innerHTML = string;
    };
    Count2.prototype.charCountBackground = function(htmlLength) {
      var percentage = htmlLength / this.parent.maxLength * 100;
      if (percentage < 85) {
        this.element.classList.remove(CLS_WARNING);
        this.element.classList.remove(CLS_ERROR);
      } else if (percentage > 85 && percentage <= 90) {
        this.element.classList.remove(CLS_ERROR);
        this.element.classList.add(CLS_WARNING);
      } else if (percentage > 90) {
        this.element.classList.remove(CLS_WARNING);
        this.element.classList.add(CLS_ERROR);
      }
    };
    Count2.prototype.refresh = function() {
      if (!isNullOrUndefined(this.editPanel)) {
        this.appendCount();
        if (this.parent.maxLength !== -1) {
          this.charCountBackground(this.htmlLength);
        }
      }
    };
    Count2.prototype.destroy = function() {
      if (this.element && !isNullOrUndefined(this.parent.element.querySelector("." + CLS_COUNT))) {
        detach(this.element);
      }
      this.removeEventListener();
    };
    Count2.prototype.toggle = function(e) {
      this.element.style.display = e.member === "viewSource" ? "none" : "block";
    };
    Count2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialEnd, this.renderCount, this);
      this.parent.on(keyUp, this.refresh, this);
      this.parent.on(count, this.refresh, this);
      this.parent.on(refreshBegin, this.refresh, this);
      this.parent.on(mouseDown, this.refresh, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(sourceCode, this.toggle, this);
      this.parent.on(updateSource, this.toggle, this);
    };
    Count2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialEnd, this.renderCount);
      this.parent.off(keyUp, this.refresh);
      this.parent.off(refreshBegin, this.refresh);
      this.parent.off(count, this.refresh);
      this.parent.off(mouseDown, this.refresh);
      this.parent.off(destroy, this.destroy);
      this.parent.off(sourceCode, this.toggle);
      this.parent.off(updateSource, this.toggle);
    };
    Count2.prototype.getModuleName = function() {
      return "count";
    };
    return Count2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/markdown-selection.js
var MarkdownSelection = (
  /** @class */
  function() {
    function MarkdownSelection2() {
    }
    MarkdownSelection2.prototype.getLineNumber = function(textarea, point) {
      return textarea.value.substr(0, point).split("\n").length;
    };
    MarkdownSelection2.prototype.getSelectedText = function(textarea) {
      var start = textarea.selectionStart;
      var end = textarea.selectionEnd;
      return textarea.value.substring(start, end);
    };
    MarkdownSelection2.prototype.getAllParents = function(value) {
      return value.split("\n");
    };
    MarkdownSelection2.prototype.getSelectedLine = function(textarea) {
      var lines = this.getAllParents(textarea.value);
      var index = this.getLineNumber(textarea, textarea.selectionStart);
      return lines[index - 1];
    };
    MarkdownSelection2.prototype.getLine = function(textarea, index) {
      var lines = this.getAllParents(textarea.value);
      return lines[index];
    };
    MarkdownSelection2.prototype.getSelectedParentPoints = function(textarea) {
      var lines = this.getAllParents(textarea.value);
      var start = this.getLineNumber(textarea, textarea.selectionStart);
      var end = this.getLineNumber(textarea, textarea.selectionEnd);
      var parents = this.getSelectedText(textarea).split("\n");
      var selectedPoints = [];
      var selectedLine = lines[start - 1];
      var startLength = lines.slice(0, start - 1).join("").length;
      var firstPoint = {};
      firstPoint.line = start - 1;
      firstPoint.start = startLength + firstPoint.line;
      firstPoint.end = selectedLine !== "" ? firstPoint.start + selectedLine.length + 1 : firstPoint.start + selectedLine.length;
      firstPoint.text = selectedLine;
      selectedPoints.push(firstPoint);
      if (parents.length > 1) {
        for (var i = 1; i < parents.length - 1; i++) {
          var points = {};
          points.line = selectedPoints[i - 1].line + 1;
          points.start = parents[i] !== "" ? selectedPoints[i - 1].end : selectedPoints[i - 1].end;
          points.end = points.start + parents[i].length + 1;
          points.text = parents[i];
          selectedPoints.push(points);
        }
        var lastPoint = {};
        lastPoint.line = selectedPoints[selectedPoints.length - 1].line + 1;
        lastPoint.start = selectedPoints[selectedPoints.length - 1].end;
        lastPoint.end = lastPoint.start + lines[end - 1].length + 1;
        lastPoint.text = lines[end - 1];
        selectedPoints.push(lastPoint);
      }
      return selectedPoints;
    };
    MarkdownSelection2.prototype.setSelection = function(textarea, start, end) {
      textarea.setSelectionRange(start, end);
      textarea.focus();
    };
    MarkdownSelection2.prototype.save = function(start, end) {
      this.selectionStart = start;
      this.selectionEnd = end;
    };
    MarkdownSelection2.prototype.restore = function(textArea) {
      this.setSelection(textArea, this.selectionStart, this.selectionEnd);
    };
    MarkdownSelection2.prototype.isStartWith = function(line, command) {
      var isStart = false;
      if (line) {
        var reg = line.trim() === command.trim() ? (
          // eslint-disable-next-line
          new RegExp("^(" + this.replaceSpecialChar(command.trim()) + ")", "gim")
        ) : (
          // eslint-disable-next-line
          new RegExp("^(" + this.replaceSpecialChar(command) + ")", "gim")
        );
        isStart = reg.test(line.trim());
      }
      return isStart;
    };
    MarkdownSelection2.prototype.replaceSpecialChar = function(value) {
      return value.replace(/[`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/g, "\\$&");
    };
    MarkdownSelection2.prototype.isClear = function(parents, regex) {
      var isClear = false;
      for (var i = 0; i < parents.length; i++) {
        if (new RegExp(regex, "gim").test(parents[i].text)) {
          return true;
        }
      }
      return isClear;
    };
    MarkdownSelection2.prototype.getSelectedInlinePoints = function(textarea) {
      var start = textarea.selectionStart;
      var end = textarea.selectionEnd;
      var selection = this.getSelectedText(textarea);
      return { start, end, text: selection };
    };
    return MarkdownSelection2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/common/util.js
var inlineNode2 = [
  "a",
  "abbr",
  "acronym",
  "audio",
  "b",
  "bdi",
  "bdo",
  "big",
  "br",
  "button",
  "canvas",
  "cite",
  "code",
  "data",
  "datalist",
  "del",
  "dfn",
  "em",
  "embed",
  "font",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "map",
  "mark",
  "meter",
  "noscript",
  "object",
  "output",
  "picture",
  "progress",
  "q",
  "ruby",
  "s",
  "samp",
  "script",
  "select",
  "slot",
  "small",
  "span",
  "strong",
  "strike",
  "sub",
  "sup",
  "svg",
  "template",
  "textarea",
  "time",
  "u",
  "tt",
  "var",
  "video",
  "wbr"
];
function isIDevice2() {
  var result = false;
  if (Browser.isDevice && Browser.isIos) {
    result = true;
  }
  return result;
}
function setEditFrameFocus(editableElement, selector) {
  if (editableElement.nodeName === "BODY" && !isNullOrUndefined(selector)) {
    var iframe = top.window.document.querySelector(selector);
    if (!isNullOrUndefined(iframe)) {
      iframe.contentWindow.focus();
    }
  }
}
function updateTextNode2(value, enterAction) {
  var tempNode = document.createElement("div");
  tempNode.innerHTML = value;
  tempNode.setAttribute("class", "tempDiv");
  var resultElm = document.createElement("div");
  var childNodes = tempNode.childNodes;
  if (childNodes.length > 0) {
    var isPreviousInlineElem = void 0;
    var previousParent = void 0;
    var paraElm = void 0;
    while (tempNode.firstChild) {
      if (tempNode.firstChild.nodeName === "#text" && (tempNode.firstChild.textContent.indexOf("\n") < 0 || tempNode.firstChild.textContent.trim() !== "") || inlineNode2.indexOf(tempNode.firstChild.nodeName.toLocaleLowerCase()) >= 0) {
        if (!isPreviousInlineElem) {
          if (enterAction === "BR") {
            resultElm.appendChild(tempNode.firstChild);
            previousParent = resultElm;
          } else {
            paraElm = createElement("p");
            resultElm.appendChild(paraElm);
            paraElm.appendChild(tempNode.firstChild);
            previousParent = paraElm;
            isPreviousInlineElem = true;
          }
        } else {
          previousParent.appendChild(tempNode.firstChild);
          previousParent = paraElm;
          isPreviousInlineElem = true;
        }
      } else if (tempNode.firstChild.nodeName === "#text" && (tempNode.firstChild.textContent === "\n" || tempNode.firstChild.textContent.indexOf("\n") >= 0 && tempNode.firstChild.textContent.trim() === "")) {
        detach(tempNode.firstChild);
      } else {
        resultElm.appendChild(tempNode.firstChild);
        isPreviousInlineElem = false;
      }
    }
    var tableElm = resultElm.querySelectorAll("table");
    for (var i = 0; i < tableElm.length; i++) {
      if (tableElm[i].getAttribute("border") === "0") {
        tableElm[i].removeAttribute("border");
      }
      var tdElm = tableElm[i].querySelectorAll("td");
      for (var j = 0; j < tdElm.length; j++) {
        if (tdElm[j].style.borderLeft === "none") {
          tdElm[j].style.removeProperty("border-left");
        }
        if (tdElm[j].style.borderRight === "none") {
          tdElm[j].style.removeProperty("border-right");
        }
        if (tdElm[j].style.borderBottom === "none") {
          tdElm[j].style.removeProperty("border-bottom");
        }
        if (tdElm[j].style.borderTop === "none") {
          tdElm[j].style.removeProperty("border-top");
        }
        if (tdElm[j].style.border === "none") {
          tdElm[j].style.removeProperty("border");
        }
      }
      if (!tableElm[i].classList.contains("e-rte-table")) {
        tableElm[i].classList.add("e-rte-table");
      }
    }
    var imageElm = resultElm.querySelectorAll("img");
    for (var i = 0; i < imageElm.length; i++) {
      if (!imageElm[i].classList.contains("e-rte-image")) {
        imageElm[i].classList.add("e-rte-image");
      }
      if (!(imageElm[i].classList.contains("e-imginline") || imageElm[i].classList.contains("e-imgbreak"))) {
        imageElm[i].classList.add("e-imginline");
      }
    }
  }
  return resultElm.innerHTML;
}
function getLastTextNode(startChildNodes) {
  var finalNode = startChildNodes;
  do {
    if (finalNode.childNodes.length > 0) {
      finalNode = finalNode.childNodes[0];
    }
  } while (finalNode.childNodes.length > 0);
  return finalNode;
}
function getDefaultHtmlTbStatus() {
  return {
    bold: false,
    italic: false,
    subscript: false,
    superscript: false,
    strikethrough: false,
    orderedlist: false,
    unorderedlist: false,
    numberFormatList: false,
    bulletFormatList: false,
    underline: false,
    alignments: null,
    backgroundcolor: null,
    fontcolor: null,
    fontname: null,
    fontsize: null,
    formats: null,
    createlink: false,
    insertcode: false
  };
}
function getDefaultMDTbStatus() {
  return {
    bold: false,
    italic: false,
    subscript: false,
    superscript: false,
    strikethrough: false,
    orderedlist: false,
    uppercase: false,
    lowercase: false,
    inlinecode: false,
    unorderedlist: false,
    formats: null
  };
}

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/markdown-toolbar-status.js
var MarkdownToolbarStatus = (
  /** @class */
  function() {
    function MarkdownToolbarStatus2(parent) {
      this.toolbarStatus = this.prevToolbarStatus = getDefaultMDTbStatus();
      this.selection = new MarkdownSelection();
      this.parent = parent;
      this.element = this.parent.contentModule.getEditPanel();
      this.addEventListener();
    }
    MarkdownToolbarStatus2.prototype.addEventListener = function() {
      this.parent.on(toolbarRefresh, this.onRefreshHandler, this);
      this.parent.on(destroy, this.removeEventListener, this);
    };
    MarkdownToolbarStatus2.prototype.removeEventListener = function() {
      this.parent.off(toolbarRefresh, this.onRefreshHandler);
      this.parent.off(destroy, this.removeEventListener);
    };
    MarkdownToolbarStatus2.prototype.onRefreshHandler = function(args) {
      var parentsLines = this.selection.getSelectedParentPoints(this.element);
      this.toolbarStatus = {
        orderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, "OL"),
        unorderedlist: args.documentNode ? false : this.isListsApplied(parentsLines, "UL"),
        formats: this.currentFormat(parentsLines, args.documentNode),
        bold: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand("Bold"),
        italic: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand("Italic"),
        inlinecode: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand("InlineCode"),
        strikethrough: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand("StrikeThrough"),
        subscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand("SubScript"),
        superscript: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand("SuperScript"),
        uppercase: args.documentNode ? false : this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand("UpperCase")
      };
      if (this.parent.formatter.editorManager.mdSelectionFormats.isAppliedCommand("InlineCode")) {
        this.toolbarStatus.formats = "pre";
      }
      var tbStatusString = JSON.stringify(this.toolbarStatus);
      this.parent.notify(toolbarUpdated, this.toolbarStatus);
      if (JSON.stringify(this.prevToolbarStatus) !== tbStatusString) {
        this.parent.notify(updateTbItemsStatus, { html: null, markdown: JSON.parse(tbStatusString) });
        this.prevToolbarStatus = JSON.parse(tbStatusString);
      }
    };
    MarkdownToolbarStatus2.prototype.isListsApplied = function(lines, type) {
      var isApply = true;
      if (type === "OL") {
        for (var i = 0; i < lines.length; i++) {
          var lineSplit = lines[i].text.trim().split(" ", 2)[0] + " ";
          if (!/^[\d.]+[ ]+$/.test(lineSplit)) {
            isApply = false;
            break;
          }
        }
      } else {
        for (var i = 0; i < lines.length; i++) {
          if (!this.selection.isStartWith(lines[i].text, this.parent.formatter.listTags["" + type])) {
            isApply = false;
            break;
          }
        }
      }
      return isApply;
    };
    MarkdownToolbarStatus2.prototype.currentFormat = function(lines, documentNode) {
      var format = "p";
      var keys = Object.keys(this.parent.formatter.formatTags);
      var direction = this.element.selectionDirection;
      var checkLine = direction === "backward" ? lines[0].text : lines[lines.length - 1].text;
      for (var i = 0; !documentNode && i < keys.length; i++) {
        if (keys[i] !== "pre" && this.selection.isStartWith(checkLine, this.parent.formatter.formatTags[keys[i]])) {
          format = keys[i];
          break;
        } else if (keys[i] === "pre") {
          if (this.codeFormat()) {
            format = keys[i];
            break;
          }
        }
      }
      return format;
    };
    MarkdownToolbarStatus2.prototype.codeFormat = function() {
      var isFormat = false;
      var textArea = this.parent.inputElement;
      var start = textArea.selectionStart;
      var splitAt = function(index) {
        return function(x) {
          return [x.slice(0, index), x.slice(index)];
        };
      };
      var splitText = splitAt(start)(textArea.value);
      var cmdPre = this.parent.formatter.formatTags.pre;
      var selectedText = this.getSelectedText(textArea);
      if (selectedText !== "" && selectedText === selectedText.toLocaleUpperCase()) {
        return true;
      } else if (selectedText === "") {
        var beforeText = textArea.value.substr(splitText[0].length - 1, 1);
        var afterText = splitText[1].substr(0, 1);
        if (beforeText !== "" && afterText !== "" && beforeText.match(/[a-z]/i) && beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase()) {
          return true;
        }
      }
      if (this.isCode(splitText[0], cmdPre) && this.isCode(splitText[1], cmdPre) && (splitText[0].match(this.multiCharRegx(cmdPre)).length % 2 === 1 && splitText[1].match(this.multiCharRegx(cmdPre)).length % 2 === 1)) {
        isFormat = true;
      }
      return isFormat;
    };
    MarkdownToolbarStatus2.prototype.getSelectedText = function(textarea) {
      return textarea.value.substring(textarea.selectionStart, textarea.selectionEnd);
    };
    MarkdownToolbarStatus2.prototype.isCode = function(text, cmd) {
      return text.search("\\" + cmd) !== -1;
    };
    MarkdownToolbarStatus2.prototype.multiCharRegx = function(cmd) {
      return new RegExp("(\\" + cmd + ")", "g");
    };
    return MarkdownToolbarStatus2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/execute-command-callback.js
var ExecCommandCallBack = (
  /** @class */
  function() {
    function ExecCommandCallBack2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    ExecCommandCallBack2.prototype.addEventListener = function() {
      this.parent.on(execCommandCallBack, this.commandCallBack, this);
      this.parent.on(destroy, this.removeEventListener, this);
    };
    ExecCommandCallBack2.prototype.commandCallBack = function(args) {
      var formatPainterCopy = !isNullOrUndefined(args.requestType) && args.requestType === "FormatPainter" && args.action === "format-copy";
      if (!isNullOrUndefined(args) && !isNullOrUndefined(args.requestType) && args.requestType !== "Undo" && args.requestType !== "Redo" && !formatPainterCopy) {
        this.parent.formatter.saveData();
      }
      this.parent.notify(toolbarRefresh, { args });
      this.parent.notify(count, {});
    };
    ExecCommandCallBack2.prototype.removeEventListener = function() {
      this.parent.off(execCommandCallBack, this.commandCallBack);
      this.parent.off(destroy, this.removeEventListener);
    };
    return ExecCommandCallBack2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/common/constant.js
var KEY_DOWN = "keydown";
var ACTION = "action";
var FORMAT_TYPE = "format-type";
var KEY_DOWN_HANDLER = "keydown-handler";
var LIST_TYPE = "list-type";
var KEY_UP_HANDLER = "keyup-handler";
var KEY_UP = "keyup";
var MODEL_CHANGED_PLUGIN = "model_changed_plugin";
var MODEL_CHANGED = "model_changed";
var MS_WORD_CLEANUP_PLUGIN = "ms_word_cleanup_plugin";
var MS_WORD_CLEANUP = "ms_word_cleanup";
var ON_BEGIN = "onBegin";
var SPACE_ACTION = "actionBegin";
var FORMAT_PAINTER_ACTIONS = "format_painter_actions";
var EMOJI_PICKER_ACTIONS = "emoji_picker_actions";

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/formatter/formatter.js
var Formatter = (
  /** @class */
  function() {
    function Formatter2() {
    }
    Formatter2.prototype.process = function(self, args, event2, value) {
      var _this = this;
      var selection = self.contentModule.getDocument().getSelection();
      var range = selection.rangeCount > 0 ? selection.getRangeAt(selection.rangeCount - 1) : null;
      var saveSelection;
      var isKeyboardVideoInsert = !isNullOrUndefined(value) && !isNullOrUndefined(value.cssClass) && value.cssClass !== "e-video-inline";
      if (self.editorMode === "HTML") {
        if (!isNullOrUndefined(args) && !isKeyboardVideoInsert) {
          if (isNullOrUndefined(args.name) || !isNullOrUndefined(args.name) && args.name !== "showDialog") {
            saveSelection = this.editorManager.nodeSelection.save(range, self.contentModule.getDocument());
          }
        }
      }
      if (!isNullOrUndefined(args) && args.item.command && args.item.command !== "Table" && args.item.command !== "Actions" && args.item.command !== "Links" && args.item.command !== "Images" && args.item.command !== "Files" && args.item.command !== "Audios" && args.item.command !== "Videos" && args.item.command !== "EmojiPicker" && range && !(self.contentModule.getEditPanel().contains(this.getAncestorNode(range.commonAncestorContainer)) || self.contentModule.getEditPanel() === range.commonAncestorContainer || self.contentModule.getPanel() === range.commonAncestorContainer)) {
        return;
      }
      if (!isNullOrUndefined(args) && self.maxLength !== -1 && !isNullOrUndefined(args.item.command)) {
        var currentInsertContentLength = 0;
        if (args.item.command === "Links") {
          currentInsertContentLength = value.text.length === 0 ? value.url.length : value.text.length;
        }
        if (args.item.command === "Images" || args.item.command === "Videos" || args.item.command === "Table" || args.item.command === "Files") {
          currentInsertContentLength = 1;
        }
        var currentLength = self.getText().trim().length;
        var selectionLength = self.getSelection().length;
        var totalLength = currentLength - selectionLength + currentInsertContentLength;
        if (!(self.maxLength === -1 || totalLength <= self.maxLength)) {
          return;
        }
      }
      if (isNullOrUndefined(args)) {
        var action_1 = event2.action;
        if (action_1 !== "tab" && action_1 !== "enter" && action_1 !== "space" && action_1 !== "escape") {
          args = {};
          if (self.editorMode === "Markdown" && action_1 === "insert-table") {
            value = {
              "headingText": self.localeObj.getConstant("TableHeadingText"),
              "colText": self.localeObj.getConstant("TableColText")
            };
          }
          var items = {
            originalEvent: event2,
            cancel: false,
            requestType: action_1 || event2.key + "Key",
            itemCollection: value
          };
          extend(args, args, items, true);
          self.trigger(actionBegin, args, function(actionBeginArgs) {
            if (actionBeginArgs.cancel) {
              if (action_1 === "paste" || action_1 === "cut" || action_1 === "copy") {
                event2.preventDefault();
              }
            }
          });
        }
        var isTableModule = isNullOrUndefined(self.tableModule) ? true : self.tableModule ? self.tableModule.ensureInsideTableList : false;
        if (event2.which === 9 && isTableModule || event2.which !== 9) {
          if (event2.which === 13 && self.editorMode === "HTML") {
            value = {
              "enterAction": self.enterKey
            };
          }
          this.editorManager.observer.notify(event2.type === "keydown" ? KEY_DOWN : KEY_UP, {
            event: event2,
            callBack: this.onSuccess.bind(this, self),
            value,
            enterAction: self.enterKey
          });
        }
      } else if (!isNullOrUndefined(args) && args.item.command && args.item.subCommand && (args.item.command !== args.item.subCommand && args.item.command !== "Font" || (args.item.subCommand === "FontName" || args.item.subCommand === "FontSize") && args.name === "dropDownSelect" || (args.item.subCommand === "BackgroundColor" || args.item.subCommand === "FontColor") && args.name === "colorPickerChanged" || args.item.subCommand === "FormatPainter" || args.item.subCommand === "EmojiPicker")) {
        extend(args, args, { requestType: args.item.subCommand, cancel: false, itemCollection: value, selectType: args.name }, true);
        self.trigger(actionBegin, args, function(actionBeginArgs) {
          if (!actionBeginArgs.cancel) {
            var formatPainterCopy = !isNullOrUndefined(actionBeginArgs.requestType) && actionBeginArgs.requestType === "FormatPainter" && actionBeginArgs.name === "format-copy";
            var formatPainterPaste = !isNullOrUndefined(actionBeginArgs.requestType) && actionBeginArgs.requestType === "FormatPainter" && actionBeginArgs.name === "format-paste";
            if (_this.getUndoRedoStack().length === 0 && actionBeginArgs.item.command !== "Links" && actionBeginArgs.item.command !== "Images" && !formatPainterCopy || formatPainterPaste) {
              _this.saveData();
            }
            self.isBlur = false;
            self.contentModule.getEditPanel().focus();
            if (self.editorMode === "HTML" && !isKeyboardVideoInsert) {
              if (isNullOrUndefined(args.selectType) || !isNullOrUndefined(args.selectType) && args.selectType !== "showDialog") {
                saveSelection.restore();
              }
            }
            var command = actionBeginArgs.item.subCommand.toLocaleLowerCase();
            if (command === "paste" || command === "cut" || command === "copy") {
              self.clipboardAction(command, event2);
            } else {
              _this.editorManager.observer.notify(checkUndo, { subCommand: actionBeginArgs.item.subCommand });
              _this.editorManager.execCommand(actionBeginArgs.item.command, actionBeginArgs.item.subCommand, event2, _this.onSuccess.bind(_this, self), actionBeginArgs.item.value, actionBeginArgs.item.subCommand === "Pre" && actionBeginArgs.selectType === "dropDownSelect" ? { name: actionBeginArgs.selectType } : value, "#" + self.getID() + " iframe", self.enterKey);
            }
          }
        });
      }
      if (isNullOrUndefined(event2) || event2 && event2.action !== "copy") {
        this.enableUndo(self);
      }
    };
    Formatter2.prototype.getAncestorNode = function(node) {
      node = node.nodeType === 3 ? node.parentNode : node;
      return node;
    };
    Formatter2.prototype.onKeyHandler = function(self, e) {
      var _this = this;
      this.editorManager.observer.notify(KEY_UP, {
        event: e,
        callBack: function() {
          self.notify(contentChanged, {});
          _this.enableUndo(self);
        }
      });
    };
    Formatter2.prototype.onSuccess = function(self, events) {
      self.notify(contentChanged, {});
      if (events && (isNullOrUndefined(events.event) || events.event.action !== "copy")) {
        this.enableUndo(self);
        self.notify(execCommandCallBack, events);
      }
      self.trigger(actionComplete, events, function(callbackArgs) {
        self.setPlaceHolder();
        if ((callbackArgs.requestType === "Images" || callbackArgs.requestType === "Links" || callbackArgs.requestType === "Audios" || callbackArgs.requestType === "Videos") && self.editorMode === "HTML") {
          var args = callbackArgs;
          if (callbackArgs.requestType === "Links" && callbackArgs.event && callbackArgs.event.type === "keydown" && callbackArgs.event.keyCode === 32) {
            return;
          }
          self.notify(insertCompleted, {
            args: args.event,
            type: callbackArgs.requestType,
            isNotify: true,
            elements: args.elements
          });
        }
        if (callbackArgs.requestType === "VideosPlayPause") {
          self.notify("editAreaClick", { args: event });
        }
        self.autoResize();
      });
    };
    Formatter2.prototype.saveData = function(e) {
      this.editorManager.undoRedoManager.saveData(e);
    };
    Formatter2.prototype.getUndoStatus = function() {
      return this.editorManager.undoRedoManager.getUndoStatus();
    };
    Formatter2.prototype.getUndoRedoStack = function() {
      return this.editorManager.undoRedoManager.undoRedoStack;
    };
    Formatter2.prototype.enableUndo = function(self) {
      var status = this.getUndoStatus();
      if (self.inlineMode.enable && (!Browser.isDevice || isIDevice())) {
        updateUndoRedoStatus(self.quickToolbarModule.inlineQTBar.quickTBarObj, status);
      } else {
        if (self.toolbarModule) {
          updateUndoRedoStatus(self.toolbarModule.baseToolbar, status);
        }
      }
    };
    return Formatter2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/base/constant.js
var LISTS_COMMAND = "lists-commands";
var selectionCommand = "command-type";
var LINK_COMMAND = "link-commands";
var CLEAR_COMMAND = "clear-commands";
var MD_TABLE = "insert-table";
var INSERT_TEXT_COMMAND = "insert-text";

// node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/lists.js
var MDLists = (
  /** @class */
  function() {
    function MDLists2(options) {
      extend(this, this, options, true);
      this.selection = this.parent.markdownSelection;
      this.addEventListener();
    }
    MDLists2.prototype.addEventListener = function() {
      this.parent.observer.on(LISTS_COMMAND, this.applyListsHandler, this);
      this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);
      this.parent.observer.on(KEY_UP_HANDLER, this.keyUpHandler, this);
    };
    MDLists2.prototype.keyDownHandler = function(event2) {
      switch (event2.event.which) {
        case 9:
          this.tabKey(event2);
          break;
      }
      switch (event2.event.action) {
        case "ordered-list":
          this.applyListsHandler({ subCommand: "OL", callBack: event2.callBack });
          event2.event.preventDefault();
          break;
        case "unordered-list":
          this.applyListsHandler({ subCommand: "UL", callBack: event2.callBack });
          event2.event.preventDefault();
          break;
      }
    };
    MDLists2.prototype.keyUpHandler = function(event2) {
      switch (event2.event.which) {
        case 13:
          this.enterKey(event2);
          break;
      }
    };
    MDLists2.prototype.tabKey = function(event2) {
      var textArea = this.parent.element;
      this.selection.save(textArea.selectionStart, textArea.selectionEnd);
      var start = textArea.selectionStart;
      var end = textArea.selectionEnd;
      var parents = this.selection.getSelectedParentPoints(textArea);
      var addedLength = 0;
      var isNotFirst = this.isNotFirstLine(textArea, parents[0]);
      if (!isNotFirst && !event2.event.shiftKey) {
        this.restore(textArea, start, end + addedLength, event2);
        return;
      }
      var listFormat = this.olListType();
      var regex = this.getListRegex();
      this.currentAction = this.getAction(parents[0].text);
      for (var i = 0; i < parents.length; i++) {
        var prevIndex = event2.event.shiftKey ? parents[i].line - 1 : parents[i].line - 1;
        var prevLine = this.selection.getLine(textArea, prevIndex);
        if (prevLine && (!event2.event.shiftKey && isNotFirst || event2.event.shiftKey)) {
          var prevLineSplit = prevLine.split(". ");
          var tabSpace = "	";
          var tabSpaceLength = event2.event.shiftKey ? -tabSpace.length : tabSpace.length;
          var splitTab = parents[i].text.split("	");
          if (event2.event.shiftKey && splitTab.length === 1) {
            break;
          }
          if (this.currentAction === "OL" && /^\d+$/.test(prevLineSplit[0].trim()) && listFormat) {
            event2.event.preventDefault();
            parents[i].text = event2.event.shiftKey ? splitTab.splice(1, splitTab.length).join("	") : tabSpace + parents[i].text;
            var curTabSpace = this.getTabSpace(parents[i].text);
            var prevTabSpace = this.getTabSpace(prevLine);
            var splitText = parents[i].text.split(". ");
            if (curTabSpace === prevTabSpace) {
              this.changeTextAreaValue(splitText, this.nextOrderedListValue(prevLineSplit[0].trim()), event2, textArea, parents, i, end);
            } else if (prevTabSpace < curTabSpace) {
              this.changeTextAreaValue(splitText, "1. ", event2, textArea, parents, i, end);
            } else {
              for (; prevTabSpace.length > curTabSpace.length; null) {
                prevIndex = prevIndex - 1;
                prevLine = this.selection.getLine(textArea, prevIndex);
                var prevLineSplit_1 = prevLine.trim().split(". ");
                if (/^\d+$/.test(prevLineSplit_1[0])) {
                  prevTabSpace = this.getTabSpace(prevLine);
                  if (prevTabSpace.length <= curTabSpace.length) {
                    this.changeTextAreaValue(splitText, this.nextOrderedListValue(prevLineSplit_1[0]), event2, textArea, parents, i, end);
                    break;
                  }
                }
              }
            }
          } else if (this.currentAction === "UL" && regex.test(prevLine.trim()) || !listFormat) {
            event2.event.preventDefault();
            parents[i].text = event2.event.shiftKey ? splitTab.splice(1, splitTab.length).join("	") : tabSpace + parents[i].text;
            textArea.value = textArea.value.substr(0, parents[i].start) + parents[i].text + "\n" + textArea.value.substr(parents[i].end, textArea.value.length);
          }
          start = i === 0 ? start + tabSpaceLength : start;
          addedLength += tabSpaceLength;
          if (parents.length !== 1) {
            for (var j = i; j < parents.length; j++) {
              parents[j].start = j !== 0 ? parents[j].start + tabSpaceLength : parents[j].start;
              parents[j].end = parents[j].end + tabSpaceLength;
            }
          }
        }
      }
      this.restore(textArea, start, end + addedLength, event2);
    };
    MDLists2.prototype.changeTextAreaValue = function(splitText, prefixValue, event2, textArea, parents, k, end) {
      var prefix = prefixValue;
      splitText.splice(0, 1);
      var textAreaLength = this.selection.getAllParents(textArea.value).length;
      var changedList = "";
      var curTabSpace = this.getTabSpace(parents[k].text);
      var prefixNumber = parseInt(prefix.split(".")[0], null);
      var nestedTabSpace = this.getTabSpace(parents[k].text);
      var nestedlistorder = true;
      var nestedListStart = true;
      var curTabSpaceLength;
      var nextPrefixValue = -1;
      var traversIncreased = true;
      var nextLineLength = 0;
      var lineBreak = "";
      changedList = this.selection.getLine(textArea, parents[0].line + 1) !== "" ? "" : changedList + textArea.value.substr(parents[0].end, textArea.value.length);
      for (var i = 1; i < textAreaLength && !isNullOrUndefined(this.selection.getLine(textArea, parents[0].line + i)) && this.selection.getLine(textArea, parents[0].line + i) !== ""; i++) {
        var nextLine = this.selection.getLine(textArea, parents[0].line + i);
        var nextTabSpace = this.getTabSpace(nextLine);
        var nextLineSplit = nextLine.split(". ");
        if (nextLineSplit.length === 1) {
          changedList += textArea.value.substr(parents[0].end + nextLineLength, textArea.value.length);
          break;
        } else {
          nextLineLength += nextLine.length;
          var shiftTabTargetList = false;
          curTabSpaceLength = event2.event.shiftKey ? curTabSpace.length + 1 : curTabSpace.length - 1;
          if (nextTabSpace.length > nestedTabSpace.length) {
            traversIncreased = false;
          }
          if (curTabSpace.length !== nextTabSpace.length && nextTabSpace.length < nestedTabSpace.length) {
            nestedListStart = true;
            nestedlistorder = false;
            shiftTabTargetList = event2.event.shiftKey && curTabSpace.length === nextTabSpace.length ? (nestedListStart = false, true) : false;
          } else if (traversIncreased && event2.event.shiftKey && curTabSpace.length === nextTabSpace.length && nextTabSpace.length === nestedTabSpace.length) {
            nestedListStart = false;
            shiftTabTargetList = true;
          }
          lineBreak = changedList === "" ? "" : "\n";
          if (curTabSpaceLength === nextTabSpace.length && nestedListStart) {
            var nextPrefix = event2.event.shiftKey ? (nextPrefixValue++, this.nextOrderedListValue(nextPrefixValue.toString())) : this.previousOrderedListValue(nextLineSplit[0]);
            nextLineSplit.splice(0, 1);
            changedList = changedList + lineBreak + nextTabSpace + nextPrefix + nextLineSplit.join(". ");
          } else if (curTabSpace.length === nextTabSpace.length && nestedlistorder || shiftTabTargetList) {
            var nextPrefix = this.nextOrderedListValue(prefixNumber.toString());
            prefixNumber++;
            nextLineSplit.splice(0, 1);
            changedList = changedList + lineBreak + nextTabSpace + nextPrefix + nextLineSplit.join(". ");
          } else {
            changedList = changedList + lineBreak + nextLine;
            nestedListStart = false;
          }
          nestedTabSpace = this.getTabSpace(nextLine);
        }
      }
      parents[k].text = this.getTabSpace(parents[k].text) + prefix + splitText.join(". ") + "\n";
      textArea.value = textArea.value.substr(0, parents[k].start) + parents[k].text + changedList;
    };
    MDLists2.prototype.getTabSpace = function(line) {
      var split = line.split("	");
      var tabs = "";
      for (var i = 0; i < split.length; i++) {
        if (split[i] === "") {
          tabs += "	";
        } else {
          break;
        }
      }
      return tabs;
    };
    MDLists2.prototype.isNotFirstLine = function(textArea, points) {
      var currentLine = points.text;
      var prevIndex = points.line - 1;
      var prevLine = this.selection.getLine(textArea, prevIndex);
      var regex = this.getListRegex();
      var isNotFirst = false;
      var regexFirstCondition;
      if (prevLine) {
        this.currentAction = this.getAction(prevLine);
        var prevLineSplit = prevLine.split(". ");
        regexFirstCondition = this.currentAction === "OL" ? /^\d+$/.test(prevLineSplit[0].trim()) : regex.test(prevLine.trim());
      }
      if (prevLine && regexFirstCondition) {
        var curTabSpace = this.getTabSpace(currentLine);
        var prevTabSpace = this.getTabSpace(prevLine);
        isNotFirst = curTabSpace === prevTabSpace ? true : isNotFirst;
        for (; prevTabSpace.length > curTabSpace.length; null) {
          prevIndex = prevIndex - 1;
          prevLine = this.selection.getLine(textArea, prevIndex);
          var prevLineSplit = prevLine.trim().split(". ");
          var regexSecondCondition = this.currentAction === "OL" ? /^\d+$/.test(prevLineSplit[0]) : regex.test(prevLine.trim());
          if (regexSecondCondition) {
            prevTabSpace = this.getTabSpace(prevLine);
            if (prevTabSpace.length <= curTabSpace.length) {
              isNotFirst = true;
              break;
            }
          }
        }
      }
      return isNotFirst;
    };
    MDLists2.prototype.getAction = function(line) {
      var ol = line.split(". ")[0];
      var currentState = /^\d+$/.test(ol.trim());
      var ul = line.trim().split(new RegExp("^(" + this.selection.replaceSpecialChar(this.syntax.UL).trim() + ")"))[1];
      return currentState ? "OL" : ul ? "UL" : "NOTLIST";
    };
    MDLists2.prototype.nextOrderedListValue = function(previousLine) {
      var currentValue = parseInt(previousLine, null);
      var nextValue = currentValue + 1;
      return nextValue.toString() + ". ";
    };
    MDLists2.prototype.previousOrderedListValue = function(previousLine) {
      var currentValue = parseInt(previousLine, null);
      var nextValue = currentValue - 1;
      return nextValue.toString() + ". ";
    };
    MDLists2.prototype.enterKey = function(event2) {
      var textArea = this.parent.element;
      this.selection.save(textArea.selectionStart, textArea.selectionEnd);
      var start = textArea.selectionStart;
      var end = textArea.selectionEnd;
      var parents = this.selection.getSelectedParentPoints(textArea);
      var prevLine = this.selection.getLine(textArea, parents[0].line - 1);
      var listFormat = this.olListType();
      var regex = this.getListRegex();
      var prevLineSplit = [];
      if (!isNullOrUndefined(prevLine)) {
        prevLineSplit = prevLine.split(". ");
        this.currentAction = this.getAction(prevLine);
      }
      var addedLength = 0;
      if (this.currentAction === "OL" && prevLineSplit.length > 1 && /^\d+$/.test(prevLineSplit[0].trim()) && listFormat && prevLineSplit[1] !== "") {
        var tabSpace = this.getTabSpace(prevLine);
        this.currentAction = this.getAction(prevLine);
        var prefix = this.nextOrderedListValue(prevLineSplit[0]);
        parents[0].text = tabSpace + prefix + parents[0].text;
        var textAreaLength = this.selection.getAllParents(textArea.value).length;
        var changedList = "\n";
        var curTabSpace = this.getTabSpace(prevLine);
        var nestedTabSpace = this.getTabSpace(parents[0].text);
        var nestedListOrder = true;
        for (var i = 1; i < textAreaLength && textArea.value.substr(parents[0].end, textArea.value.length) !== ""; i++) {
          var nextLine = this.selection.getLine(textArea, parents[0].line + i);
          if (isNullOrUndefined(nextLine)) {
            changedList = changedList + "";
          } else {
            var nextLineSplit = nextLine.split(". ");
            var nextTabSpace = this.getTabSpace(nextLine);
            if (nextTabSpace.length < nestedTabSpace.length) {
              nestedListOrder = false;
            }
            if (nextLineSplit.length > 1 && /^\d+$/.test(nextLineSplit[0].trim()) && curTabSpace.length === nextTabSpace.length && nestedListOrder) {
              var nextPrefix = this.nextOrderedListValue(nextLineSplit[0]);
              nextLineSplit.splice(0, 1);
              changedList = changedList + nextTabSpace + nextPrefix + nextLineSplit.join(". ") + "\n";
            } else {
              changedList = changedList + nextLine + "\n";
              nestedTabSpace = this.getTabSpace(nextLine);
            }
          }
        }
        textArea.value = textArea.value.substr(0, parents[0].start) + curTabSpace + prefix + this.selection.getLine(textArea, parents[0].line) + changedList;
        start = start + prefix.length + tabSpace.length;
        addedLength += prefix.length + tabSpace.length;
      } else if (this.currentAction === "UL" && (prevLine && regex.test(prevLine.trim())) && prevLine.trim().replace(regex, "") !== "" || this.currentAction === "OL" && !listFormat) {
        var tabSpace = this.getTabSpace(prevLine);
        var prefix = this.syntax[this.currentAction];
        parents[0].text = tabSpace + prefix + parents[0].text + (parents[0].text.trim().length > 0 ? "\n" : "");
        textArea.value = textArea.value.substr(0, parents[0].start) + parents[0].text + textArea.value.substr(parents[0].end, textArea.value.length);
        start = start + prefix.length + tabSpace.length;
        addedLength += prefix.length + tabSpace.length;
      }
      this.restore(textArea, start, end + addedLength, event2);
    };
    MDLists2.prototype.olListType = function() {
      var olSyntaxList = this.syntax.OL.split(".,");
      var listType = olSyntaxList.length === 1 ? null : (
        // eslint-disable-next-line
        parseInt(olSyntaxList[2].trim(), null) - parseInt(olSyntaxList[0].trim(), null)
      );
      if (listType) {
        return 1;
      } else {
        return 0;
      }
    };
    MDLists2.prototype.applyListsHandler = function(e) {
      var textArea = this.parent.element;
      this.selection.save(textArea.selectionStart, textArea.selectionEnd);
      this.currentAction = e.subCommand;
      var start = textArea.selectionStart;
      var end = textArea.selectionEnd;
      var addedLength = 0;
      var startLength = 0;
      var endLength = 0;
      var parents = this.selection.getSelectedParentPoints(textArea);
      var prefix = "";
      var listFormat = this.olListType();
      var regex;
      var perfixObj = {};
      for (var i = 0; i < parents.length; i++) {
        if (listFormat) {
          regex = this.currentAction === "OL" ? i + listFormat + ". " : this.syntax[this.currentAction];
        } else {
          regex = this.currentAction === "OL" ? this.syntax.OL : this.syntax[this.currentAction];
        }
        if (!this.selection.isStartWith(parents[i].text, regex)) {
          if (parents[i].text === "" && i === 0) {
            this.selection.save(start, end);
            if (parents.length !== 1) {
              for (var j = i; j < parents.length; j++) {
                parents[j].start = j !== 0 ? 1 + parents[j].start : parents[j].start;
                parents[j].end = 1 + parents[j].end;
              }
            }
          }
          var preLineTabSpaceLength = !isNullOrUndefined(parents[i - 1]) ? this.getTabSpace(parents[i - 1].text).length : 0;
          var replace = this.appliedLine(parents[i].text, regex, perfixObj, preLineTabSpaceLength);
          prefix = replace.line ? prefix : regex;
          parents[i].text = replace.line ? replace.line : prefix + parents[i].text;
          replace.space = replace.space ? replace.space : 0;
          textArea.value = textArea.value.substr(0, parents[i].start + endLength) + parents[i].text + "\n" + textArea.value.substr(parents[i].end, textArea.value.length);
          start = i === 0 ? start + prefix.length + replace.space > 0 ? start + prefix.length + replace.space : 0 : start;
          addedLength += prefix.length + replace.space;
          if (parents.length !== 1) {
            for (var j = i; j < parents.length; j++) {
              parents[j].start = j !== 0 ? prefix.length + parents[j].start + replace.space : parents[j].start;
              parents[j].end = prefix.length + parents[j].end + replace.space;
            }
          }
          this.restore(textArea, start, end + addedLength, null);
        } else {
          parents[i].text = parents[i].text.replace(regex, "");
          textArea.value = textArea.value.substr(0, parents[i].start + endLength) + parents[i].text + "\n" + textArea.value.substr(parents[i].end + endLength, textArea.value.length);
          endLength -= regex.length;
          startLength = regex.length;
          this.restore(textArea, start - startLength, end + endLength, null);
        }
      }
      this.restore(textArea, null, null, e);
    };
    MDLists2.prototype.appliedLine = function(line, prefixPattern, perfixObj, preTabSpaceLength) {
      var points = {};
      var regex = new RegExp("^[" + this.syntax.UL.trim() + "]");
      var lineSplit = line.split(". ");
      var currentPrefix = lineSplit[0] + ". ";
      var isExist = regex.test(line.trim()) || line.trim() === this.syntax.OL.trim() || line.trim() === this.syntax.UL.trim() || /^\d+$/.test(lineSplit[0].trim());
      var listFormat = this.olListType();
      var curTabSpaceLength = this.getTabSpace(line).length;
      if (this.currentAction === "OL" && listFormat) {
        perfixObj[curTabSpaceLength.toString()] = !isNullOrUndefined(perfixObj[curTabSpaceLength.toString()]) ? perfixObj[curTabSpaceLength.toString()].valueOf() + 1 : 1;
        prefixPattern = perfixObj[curTabSpaceLength.toString()].valueOf().toString() + ". ";
        if (!isNullOrUndefined(preTabSpaceLength) && preTabSpaceLength > curTabSpaceLength) {
          perfixObj[preTabSpaceLength.toString()] = 0;
        }
      }
      if (isExist) {
        var replace = void 0;
        var pattern = void 0;
        var space = 0;
        if (regex.test(line.trim())) {
          pattern = this.syntax.UL;
          replace = prefixPattern;
          points.space = prefixPattern.trim().length - this.syntax.UL.trim().length;
        } else if (/^\d+$/.test(lineSplit[0].trim()) && listFormat) {
          pattern = lineSplit[0].trim() + ". ";
          replace = prefixPattern;
          points.space = this.syntax.UL.trim().length - currentPrefix.trim().length;
        } else if (/^\d+$/.test(lineSplit[0].trim())) {
          pattern = lineSplit[0].trim() + ". ";
          replace = this.syntax.UL;
          points.space = this.syntax.UL.trim().length - currentPrefix.trim().length;
        }
        points.line = line.replace(pattern, replace);
      }
      return points;
    };
    MDLists2.prototype.restore = function(textArea, start, end, event2) {
      if (!isNullOrUndefined(start) && !isNullOrUndefined(start)) {
        this.selection.save(start, end);
      }
      if (!isNullOrUndefined(event2)) {
        this.selection.restore(textArea);
      }
      if (event2 && event2.callBack) {
        event2.callBack({
          requestType: this.currentAction,
          selectedText: this.selection.getSelectedText(textArea),
          editorMode: "Markdown",
          event: event2.event
        });
      }
    };
    MDLists2.prototype.getListRegex = function() {
      var regex = "";
      var configKey = Object.keys(this.syntax);
      for (var j = 0; j < configKey.length; j++) {
        var syntax = this.selection.replaceSpecialChar(this.syntax[configKey[j]]);
        regex += regex === "" ? "^(" + syntax + ")|^(" + syntax.trim() + ")" : "|^(" + syntax + ")|^(" + syntax.trim() + ")";
      }
      return new RegExp(regex);
    };
    return MDLists2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/formats.js
var MDFormats = (
  /** @class */
  function() {
    function MDFormats2(options) {
      extend(this, this, options, true);
      this.selection = this.parent.markdownSelection;
      this.addEventListener();
    }
    MDFormats2.prototype.addEventListener = function() {
      this.parent.observer.on(FORMAT_TYPE, this.applyFormats, this);
    };
    MDFormats2.prototype.applyFormats = function(e) {
      e.subCommand = e.subCommand.toLowerCase();
      var textArea = this.parent.element;
      this.selection.save(textArea.selectionStart, textArea.selectionEnd);
      var parents = this.selection.getSelectedParentPoints(textArea);
      if (this.isAppliedFormat(parents) === e.subCommand) {
        if (e.subCommand === "pre") {
          if (parents.length > 1) {
            this.applyCodeBlock(textArea, e, parents);
          } else {
            return;
          }
        }
        this.cleanFormat(textArea);
        this.restore(textArea, textArea.selectionStart, textArea.selectionEnd, e);
        return;
      }
      if (e.subCommand === "p") {
        this.cleanFormat(textArea);
        this.restore(textArea, textArea.selectionStart, textArea.selectionEnd, e);
        return;
      } else {
        if (e.subCommand === "pre" && parents.length !== 1 || e.subCommand !== "pre") {
          this.cleanFormat(textArea, e.subCommand);
        }
      }
      var start = textArea.selectionStart;
      var end = textArea.selectionEnd;
      var addedLength = 0;
      parents = this.selection.getSelectedParentPoints(textArea);
      if (e.subCommand === "pre") {
        if (parents.length > 1) {
          this.applyCodeBlock(textArea, e, parents);
        } else {
          extend(e, e, { subCommand: "InlineCode" }, true);
          this.parent.observer.notify(selectionCommand, e);
        }
        return;
      }
      for (var i = 0; i < parents.length; i++) {
        if (parents[i].text !== "" && !this.selection.isStartWith(parents[i].text, "\\" + this.syntax[e.subCommand])) {
          parents[i].text = this.syntax[e.subCommand] + parents[i].text;
          textArea.value = textArea.value.substr(0, parents[i].start) + parents[i].text + "\n" + textArea.value.substr(parents[i].end, textArea.value.length);
          start = i === 0 ? start + this.syntax[e.subCommand].length : start;
          addedLength += this.syntax[e.subCommand].length;
          if (parents.length !== 1) {
            for (var j = i; j < parents.length; j++) {
              parents[j].start = j !== 0 ? this.syntax[e.subCommand].length + parents[j].start : parents[j].start;
              parents[j].end = this.syntax[e.subCommand].length + parents[j].end;
            }
          }
        } else if (parents[i].text === "" && i === 0) {
          this.selection.save(start, end);
          if (this.selection.getSelectedText(textArea).length === 0) {
            parents[i].text = this.syntax[e.subCommand];
            textArea.value = textArea.value.substr(0, parents[i].start) + this.syntax[e.subCommand] + textArea.value.substr(parents[i].end, textArea.value.length);
            start = i === 0 ? start + this.syntax[e.subCommand].length : start;
            addedLength += this.syntax[e.subCommand].length;
          }
          if (parents.length !== 1) {
            for (var j = i; j < parents.length; j++) {
              parents[j].start = j !== 0 ? 1 + parents[j].start : parents[j].start;
              parents[j].end = 1 + parents[j].end;
            }
          }
        }
      }
      this.restore(textArea, start, end + addedLength, e);
    };
    MDFormats2.prototype.clearRegex = function() {
      var regex = "";
      var configKey = Object.keys(this.syntax);
      for (var j = 0; j < configKey.length && configKey[j] !== "pre" && configKey[j] !== "p"; j++) {
        regex += regex === "" ? "^(" + this.selection.replaceSpecialChar(this.syntax[configKey[j]].trim()) + ")" : "|^(" + this.selection.replaceSpecialChar(this.syntax[configKey[j]].trim()) + ")";
      }
      return regex;
    };
    MDFormats2.prototype.cleanFormat = function(textArea, command) {
      var parents = this.selection.getSelectedParentPoints(textArea);
      var start = textArea.selectionStart;
      var end = textArea.selectionEnd;
      var removeLength = 0;
      if (this.selection.isClear(parents, this.clearRegex())) {
        for (var i = 0; i < parents.length; i++) {
          var configKey = Object.keys(this.syntax);
          for (var j = 0; parents[i].text !== "" && j < configKey.length; j++) {
            var removeText = this.syntax[configKey[j]];
            if (configKey[j] === command) {
              continue;
            }
            var regex = new RegExp("^(" + this.selection.replaceSpecialChar(removeText) + ")", "gim");
            if (regex.test(parents[i].text)) {
              parents[i].text = parents[i].text.replace(regex, "");
              textArea.value = textArea.value.substr(0, parents[i].start) + parents[i].text + "\n" + textArea.value.substr(parents[i].end, textArea.value.length);
              start = i === 0 ? start - removeText.length > 0 ? start - removeText.length : 0 : start;
              removeLength += removeText.length;
              if (parents.length !== 1) {
                for (var k = 0; k < parents.length; k++) {
                  parents[k].start = k !== 0 ? parents[k].start - removeText.length : parents[k].start;
                  parents[k].end = parents[k].end - removeText.length;
                }
              }
              break;
            }
          }
          if (parents[i].text === "" && i === 0) {
            this.selection.save(start, end);
            if (parents.length !== 1) {
              for (var j = i; j < parents.length; j++) {
                parents[j].start = j !== 0 ? 1 + parents[j].start : parents[j].start;
                parents[j].end = 1 + parents[j].end;
              }
            }
          }
        }
        this.restore(textArea, start, end - removeLength);
      }
    };
    MDFormats2.prototype.applyCodeBlock = function(textArea, event2, parents) {
      var command = event2.subCommand;
      var start = parents[0].start;
      var end = parents[parents.length - 1].end;
      var parentLines = this.selection.getAllParents(textArea.value);
      var firstPrevText = parentLines[parents[0].line - 1];
      var lastNextText = parentLines[parents.length + 1 + 1];
      var addedLength = 0;
      if (!this.selection.isStartWith(firstPrevText, this.syntax.pre.split("\n")[0]) && !this.selection.isStartWith(lastNextText, this.syntax.pre.split("\n")[0])) {
        var lines = textArea.value.substring(start, end).split("\n");
        var lastLine = lines[lines.length - 1] === "" ? "" : "\n";
        textArea.value = textArea.value.substr(0, start) + this.syntax["" + command] + textArea.value.substring(start, end) + lastLine + this.syntax["" + command] + textArea.value.substr(end, textArea.value.length);
        start = this.selection.selectionStart + this.syntax["" + command].length;
        end = this.selection.selectionEnd + this.syntax["" + command].length - 1;
      } else {
        var cmd = this.syntax["" + command];
        var selection = this.parent.markdownSelection.getSelectedInlinePoints(textArea);
        var startNo = textArea.value.substr(0, textArea.selectionStart).lastIndexOf(cmd);
        var endNo = textArea.value.substr(textArea.selectionEnd, textArea.selectionEnd).indexOf(cmd);
        endNo = endNo + selection.end;
        var repStartText = this.replaceAt(textArea.value.substr(0, selection.start), cmd, "", startNo, selection.start);
        var repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), cmd, "", 0, endNo);
        textArea.value = repStartText + selection.text + repEndText;
        start = this.selection.selectionStart - cmd.length;
        end = this.selection.selectionEnd - cmd.length;
      }
      this.restore(textArea, start, end, event2);
    };
    MDFormats2.prototype.replaceAt = function(input, search2, replace, start, end) {
      return input.slice(0, start) + input.slice(start, end).replace(search2, replace) + input.slice(end);
    };
    MDFormats2.prototype.restore = function(textArea, start, end, event2) {
      this.selection.save(start, end);
      this.selection.restore(textArea);
      if (event2 && event2.callBack) {
        event2.callBack({
          requestType: event2.subCommand,
          selectedText: this.selection.getSelectedText(textArea),
          editorMode: "Markdown",
          event: event2.event
        });
      }
    };
    MDFormats2.prototype.isAppliedFormat = function(lines, documentNode) {
      var format = "p";
      var configKey = Object.keys(this.syntax);
      var keys = Object.keys(this.syntax);
      var direction = this.parent.element.selectionDirection;
      var checkLine = direction === "backward" ? lines[0].text : lines[lines.length - 1].text;
      for (var i = 0; !documentNode && i < keys.length; i++) {
        if (keys[i] !== "pre" && this.selection.isStartWith(checkLine, this.syntax[keys[i]])) {
          format = keys[i];
          break;
        } else if (keys[i] === "pre") {
          var parentLines = this.selection.getAllParents(this.parent.element.value);
          var firstPrevText = parentLines[lines[0].line - 1];
          var lastNextText = parentLines[lines.length + 1];
          if (this.selection.isStartWith(firstPrevText, this.syntax[keys[i]].split("\n")[0]) && this.selection.isStartWith(lastNextText, this.syntax[keys[i]].split("\n")[0])) {
            format = keys[i];
            break;
          }
        }
      }
      return format;
    };
    return MDFormats2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/md-selection-formats.js
var MDSelectionFormats = (
  /** @class */
  function() {
    function MDSelectionFormats2(parent) {
      extend(this, this, parent, true);
      this.selection = this.parent.markdownSelection;
      this.addEventListener();
    }
    MDSelectionFormats2.prototype.addEventListener = function() {
      this.parent.observer.on(selectionCommand, this.applyCommands, this);
      this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);
    };
    MDSelectionFormats2.prototype.keyDownHandler = function(e) {
      switch (e.event.action) {
        case "bold":
          this.applyCommands({ subCommand: "Bold", callBack: e.callBack });
          e.event.preventDefault();
          break;
        case "italic":
          this.applyCommands({ subCommand: "Italic", callBack: e.callBack });
          e.event.preventDefault();
          break;
        case "strikethrough":
          this.applyCommands({ subCommand: "StrikeThrough", callBack: e.callBack });
          e.event.preventDefault();
          break;
        case "uppercase":
          this.applyCommands({ subCommand: "UpperCase", callBack: e.callBack });
          e.event.preventDefault();
          break;
        case "lowercase":
          this.applyCommands({ subCommand: "LowerCase", callBack: e.callBack });
          e.event.preventDefault();
          break;
        case "superscript":
          this.applyCommands({ subCommand: "SuperScript", callBack: e.callBack });
          e.event.preventDefault();
          break;
        case "subscript":
          this.applyCommands({ subCommand: "SubScript", callBack: e.callBack });
          e.event.preventDefault();
          break;
      }
    };
    MDSelectionFormats2.prototype.isBold = function(text, cmd) {
      return text.search("\\" + cmd + "\\" + cmd) !== -1;
    };
    MDSelectionFormats2.prototype.isItalic = function(text, cmd) {
      return text.search("\\" + cmd) !== -1;
    };
    MDSelectionFormats2.prototype.isMatch = function(text, cmd) {
      var matchText = [""];
      switch (cmd) {
        case this.syntax.Italic:
          matchText = text.match(this.singleCharRegx(cmd));
          break;
        case this.syntax.InlineCode:
          matchText = text.match(this.singleCharRegx(cmd));
          break;
        case this.syntax.StrikeThrough:
          matchText = text.match(this.singleCharRegx(cmd));
          break;
      }
      return matchText;
    };
    MDSelectionFormats2.prototype.multiCharRegx = function(cmd) {
      return new RegExp("(\\" + cmd + "\\" + cmd + ")", "g");
    };
    MDSelectionFormats2.prototype.singleCharRegx = function(cmd) {
      return new RegExp("(\\" + cmd + ")", "g");
    };
    MDSelectionFormats2.prototype.isAppliedCommand = function(cmd) {
      var selectCmd = "";
      var isFormat = false;
      var textArea = this.parent.element;
      var start = textArea.selectionStart;
      var splitAt = function(index) {
        return function(x) {
          return [x.slice(0, index), x.slice(index)];
        };
      };
      var splitText = splitAt(start)(textArea.value);
      var cmdB = this.syntax.Bold.substr(0, 1);
      var cmdI = this.syntax.Italic;
      var selectedText = this.parent.markdownSelection.getSelectedText(textArea);
      if (selectedText !== "" && selectedText === selectedText.toLocaleUpperCase() && cmd === "UpperCase") {
        return true;
      } else if (selectedText === "") {
        var beforeText = textArea.value.substr(splitText[0].length - 1, 1);
        var afterText = splitText[1].substr(0, 1);
        if (beforeText !== "" && afterText !== "" && beforeText.match(/[a-z]/i) && beforeText === beforeText.toLocaleUpperCase() && afterText === afterText.toLocaleUpperCase() && cmd === "UpperCase") {
          return true;
        }
      }
      if (!this.isBold(splitText[0], cmdB) && !this.isItalic(splitText[0], cmdI) && !this.isBold(splitText[1], cmdB) && !this.isItalic(splitText[1], cmdI)) {
        if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.StrikeThrough)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.StrikeThrough)) && (this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1) && cmd === "StrikeThrough") {
          isFormat = true;
        }
        if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.InlineCode)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.InlineCode)) && (this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1) && cmd === "InlineCode") {
          isFormat = true;
        }
        if (!isNullOrUndefined(splitText[0].match(/\<sub>/g)) && !isNullOrUndefined(splitText[1].match(/\<\/sub>/g)) && (splitText[0].match(/\<sub>/g).length % 2 === 1 && splitText[1].match(/\<\/sub>/g).length % 2 === 1) && cmd === "SubScript") {
          isFormat = true;
        }
        if (!isNullOrUndefined(splitText[0].match(/\<sup>/g)) && !isNullOrUndefined(splitText[1].match(/\<\/sup>/g)) && (splitText[0].match(/\<sup>/g).length % 2 === 1 && splitText[1].match(/\<\/sup>/g).length % 2 === 1) && cmd === "SuperScript") {
          isFormat = true;
        }
      }
      if (this.isBold(splitText[0], cmdB) && this.isBold(splitText[1], cmdB) && (splitText[0].match(this.multiCharRegx(cmdB)).length % 2 === 1 && splitText[1].match(this.multiCharRegx(cmdB)).length % 2 === 1) && cmd === "Bold") {
        isFormat = true;
      }
      splitText[0] = this.isBold(splitText[0], cmdB) ? splitText[0].replace(this.multiCharRegx(cmdB), "$%@") : splitText[0];
      splitText[1] = this.isBold(splitText[1], cmdB) ? splitText[1].replace(this.multiCharRegx(cmdB), "$%@") : splitText[1];
      if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.Italic)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.Italic)) && (this.isMatch(splitText[0], this.syntax.Italic).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.Italic).length % 2 === 1) && cmd === "Italic") {
        isFormat = true;
      }
      if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.StrikeThrough)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.StrikeThrough)) && (this.isMatch(splitText[0], this.syntax.StrikeThrough).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.StrikeThrough).length % 2 === 1) && cmd === "StrikeThrough") {
        isFormat = true;
      }
      if (!isNullOrUndefined(this.isMatch(splitText[0], this.syntax.InlineCode)) && !isNullOrUndefined(this.isMatch(splitText[1], this.syntax.InlineCode)) && (this.isMatch(splitText[0], this.syntax.InlineCode).length % 2 === 1 && this.isMatch(splitText[1], this.syntax.InlineCode).length % 2 === 1) && cmd === "InlineCode") {
        isFormat = true;
      }
      if (!isNullOrUndefined(splitText[0].match(/\<sub>/g)) && !isNullOrUndefined(splitText[1].match(/\<\/sub>/g)) && (splitText[0].match(/\<sub>/g).length % 2 === 1 && splitText[1].match(/\<\/sub>/g).length % 2 === 1) && cmd === "SubScript") {
        isFormat = true;
      }
      if (!isNullOrUndefined(splitText[0].match(/\<sup>/g)) && !isNullOrUndefined(splitText[1].match(/\<\/sup>/g)) && (splitText[0].match(/\<sup>/g).length % 2 === 1 && splitText[1].match(/\<\/sup>/g).length % 2 === 1) && cmd === "SuperScript") {
        isFormat = true;
      }
      return isFormat;
    };
    MDSelectionFormats2.prototype.applyCommands = function(e) {
      this.currentAction = e.subCommand;
      var textArea = this.parent.element;
      this.selection.save(textArea.selectionStart, textArea.selectionEnd);
      var start = textArea.selectionStart;
      var end = textArea.selectionEnd;
      var addedLength = 0;
      var selection = this.parent.markdownSelection.getSelectedInlinePoints(textArea);
      if (this.isAppliedCommand(e.subCommand) && selection.text !== "") {
        var startCmd = this.syntax[e.subCommand];
        var endCmd = e.subCommand === "SubScript" ? "</sub>" : e.subCommand === "SuperScript" ? "</sup>" : this.syntax[e.subCommand];
        var startLength = e.subCommand === "UpperCase" || e.subCommand === "LowerCase" ? 0 : startCmd.length;
        var startNo = textArea.value.substr(0, selection.start).lastIndexOf(startCmd);
        var endNo = textArea.value.substr(selection.end, textArea.value.length).indexOf(endCmd);
        endNo = endNo + selection.end;
        var repStartText = this.replaceAt(textArea.value.substr(0, selection.start), startCmd, "", startNo, selection.start);
        var repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), endCmd, "", 0, endNo);
        textArea.value = repStartText + selection.text + repEndText;
        this.restore(textArea, start - startLength, end - startLength, e);
        return;
      }
      if (selection.text !== "" && !this.isApplied(selection, e.subCommand)) {
        addedLength = e.subCommand === "UpperCase" || e.subCommand === "LowerCase" ? 0 : this.syntax[e.subCommand].length;
        var repStart = textArea.value.substr(selection.start - this.syntax[e.subCommand].length, this.syntax[e.subCommand].length);
        var repEnd = void 0;
        if (repStart === e.subCommand || selection.start - this.syntax[e.subCommand].length === textArea.value.indexOf(this.syntax[e.subCommand]) && (selection.end === textArea.value.lastIndexOf(this.syntax[e.subCommand]) || selection.end === textArea.value.lastIndexOf("</" + this.syntax[e.subCommand].substring(1, 5)))) {
          if (e.subCommand === "SubScript" || e.subCommand === "SuperScript") {
            repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length + 1);
          } else {
            repEnd = textArea.value.substr(selection.end, this.syntax[e.subCommand].length);
          }
          var repStartText = this.replaceAt(textArea.value.substr(0, selection.start), repStart, "", selection.start - this.syntax[e.subCommand].length, selection.start);
          var repEndText = this.replaceAt(textArea.value.substr(selection.end, textArea.value.length), repEnd, "", 0, repEnd.length);
          textArea.value = repStartText + selection.text + repEndText;
          this.restore(textArea, start - addedLength, end - addedLength, e);
        } else {
          if (e.subCommand === "SubScript" || e.subCommand === "SuperScript") {
            selection.text = this.syntax[e.subCommand] + selection.text + "</" + this.syntax[e.subCommand].substring(1, 5);
          } else if (e.subCommand === "UpperCase" || e.subCommand === "LowerCase") {
            selection.text = e.subCommand === "UpperCase" ? selection.text.toUpperCase() : selection.text.toLowerCase();
          } else {
            selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];
          }
          textArea.value = textArea.value.substr(0, selection.start) + selection.text + textArea.value.substr(selection.end, textArea.value.length);
          this.restore(textArea, start + addedLength, end + addedLength, e);
        }
      } else if (e.subCommand !== "UpperCase" && e.subCommand !== "LowerCase") {
        if (e.subCommand === "SubScript" || e.subCommand === "SuperScript") {
          selection.text = this.textReplace(selection.text, e.subCommand);
          selection.text = this.syntax[e.subCommand] + selection.text + "</" + this.syntax[e.subCommand].substring(1, 5);
        } else {
          selection.text = this.textReplace(selection.text, e.subCommand);
          selection.text = this.syntax[e.subCommand] + selection.text + this.syntax[e.subCommand];
        }
        textArea.value = textArea.value.substr(0, selection.start) + selection.text + textArea.value.substr(selection.end, textArea.value.length);
        addedLength = this.syntax[e.subCommand].length;
        if (selection.start === selection.end) {
          this.restore(textArea, start + addedLength, end + addedLength, e);
        } else {
          this.restore(textArea, start + addedLength, end - addedLength, e);
        }
      } else {
        this.restore(textArea, start, end, e);
      }
      this.parent.undoRedoManager.saveData();
    };
    MDSelectionFormats2.prototype.replaceAt = function(input, search2, replace, start, end) {
      return input.slice(0, start) + input.slice(start, end).replace(search2, replace) + input.slice(end);
    };
    MDSelectionFormats2.prototype.restore = function(textArea, start, end, event2) {
      this.selection.save(start, end);
      this.selection.restore(textArea);
      if (event2 && event2.callBack) {
        event2.callBack({
          requestType: this.currentAction,
          selectedText: this.selection.getSelectedText(textArea),
          editorMode: "Markdown",
          event: event2.event
        });
      }
    };
    MDSelectionFormats2.prototype.textReplace = function(text, command) {
      var regx = this.singleCharRegx(this.syntax["" + command]);
      switch (command) {
        case "Bold":
          regx = this.multiCharRegx(this.syntax["" + command].substr(0, 1));
          text = text.replace(regx, "");
          break;
        case "Italic":
          if (!this.isBold(text, this.syntax["" + command].substr(0, 1))) {
            text = text.replace(regx, "");
          } else {
            var regxB = this.multiCharRegx(this.syntax["" + command].substr(0, 1));
            var repText = text;
            repText = repText.replace(regxB, "$%@").replace(regx, "");
            var regxTemp = new RegExp("\\$%@", "g");
            text = repText.replace(regxTemp, this.syntax["" + command].substr(0, 1) + this.syntax["" + command].substr(0, 1));
          }
          break;
        case "StrikeThrough":
          text = text.replace(regx, "");
          break;
        case "InlineCode":
          text = text.replace(regx, "");
          break;
        case "SubScript":
          text = text.replace(/<sub>/g, "").replace(/<\/sub>/g, "");
          break;
        case "SuperScript":
          text = text.replace(/<sup>/g, "").replace(/<\/sup>/g, "");
          break;
      }
      return text;
    };
    MDSelectionFormats2.prototype.isApplied = function(line, command) {
      var regx = this.singleCharRegx(this.syntax["" + command]);
      switch (command) {
        case "SubScript":
        case "SuperScript":
          regx = this.singleCharRegx(this.syntax["" + command]);
          return regx.test(line.text);
        case "Bold":
        case "StrikeThrough":
          regx = this.multiCharRegx(this.syntax["" + command].substr(0, 1));
          return regx.test(line.text);
        case "UpperCase":
        case "LowerCase":
          regx = new RegExp("^[" + this.syntax["" + command] + "]*$", "g");
          return regx.test(line.text);
        case "Italic": {
          var regTest = void 0;
          var regxB = this.multiCharRegx(this.syntax["" + command].substr(0, 1));
          if (regxB.test(line.text)) {
            var repText = line.text;
            repText = repText.replace(regxB, "$%#");
            regTest = regx.test(repText);
          } else {
            regTest = regx.test(line.text);
          }
          return regTest;
        }
        case "InlineCode":
          return regx.test(line.text);
      }
    };
    return MDSelectionFormats2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/common/config.js
var markdownFormatTags = {
  "h6": "###### ",
  "h5": "##### ",
  "h4": "#### ",
  "h3": "### ",
  "h2": "## ",
  "h1": "# ",
  "blockquote": "> ",
  "pre": "```\n",
  "p": ""
};
var markdownSelectionTags = {
  "Bold": "**",
  "Italic": "*",
  "StrikeThrough": "~~",
  "InlineCode": "`",
  "SubScript": "<sub>",
  "SuperScript": "<sup>",
  "UpperCase": "A-Z",
  "LowerCase": "a-z"
};
var markdownListsTags = {
  "OL": "1. ",
  "UL": "- "
};
var htmlKeyConfig = {
  "toolbar-focus": "alt+f10",
  "escape": "27",
  "insert-link": "ctrl+k",
  "insert-image": "ctrl+shift+i",
  "insert-audio": "ctrl+shift+a",
  "insert-video": "ctrl+shift+v",
  "insert-table": "ctrl+shift+e",
  "undo": "ctrl+z",
  "redo": "ctrl+y",
  "copy": "ctrl+c",
  "cut": "ctrl+x",
  "paste": "ctrl+v",
  "bold": "ctrl+b",
  "italic": "ctrl+i",
  "underline": "ctrl+u",
  "strikethrough": "ctrl+shift+s",
  "uppercase": "ctrl+shift+u",
  "lowercase": "ctrl+shift+l",
  "superscript": "ctrl+shift+=",
  "subscript": "ctrl+=",
  "indents": "ctrl+]",
  "outdents": "ctrl+[",
  "html-source": "ctrl+shift+h",
  "full-screen": "ctrl+shift+f",
  "decrease-fontsize": "ctrl+shift+<",
  "increase-fontsize": "ctrl+shift+>",
  "justify-center": "ctrl+e",
  "justify-full": "ctrl+j",
  "justify-left": "ctrl+l",
  "justify-right": "ctrl+r",
  "clear-format": "ctrl+shift+r",
  "ordered-list": "ctrl+shift+o",
  "unordered-list": "ctrl+alt+o",
  "space": "32",
  "enter": "13",
  "tab": "tab",
  "delete": "46",
  "format-copy": "alt+shift+c",
  "format-paste": "alt+shift+v"
};
var markdownKeyConfig = {
  "toolbar-focus": "alt+f10",
  "escape": "27",
  "insert-link": "ctrl+k",
  "insert-image": "ctrl+shift+i",
  "insert-table": "ctrl+shift+e",
  "undo": "ctrl+z",
  "redo": "ctrl+y",
  "copy": "ctrl+c",
  "cut": "ctrl+x",
  "paste": "ctrl+v",
  "bold": "ctrl+b",
  "italic": "ctrl+i",
  "strikethrough": "ctrl+shift+s",
  "uppercase": "ctrl+shift+u",
  "lowercase": "ctrl+shift+l",
  "superscript": "ctrl+shift+=",
  "subscript": "ctrl+=",
  "full-screen": "ctrl+shift+f",
  "ordered-list": "ctrl+shift+o",
  "unordered-list": "ctrl+alt+o"
};
var pasteCleanupGroupingTags = {
  "b": ["strong"],
  "strong": ["b"],
  "i": ["emp", "cite"],
  "emp": ["i", "cite"],
  "cite": ["i", "emp"]
};
var listConversionFilters = {
  "first": "MsoListParagraphCxSpFirst",
  "middle": "MsoListParagraphCxSpMiddle",
  "last": "MsoListParagraphCxSpLast"
};
var selfClosingTags = [
  "BR",
  "IMG"
];

// node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/undo.js
var UndoRedoCommands = (
  /** @class */
  function() {
    function UndoRedoCommands2(parent, options) {
      this.undoRedoStack = [];
      this.parent = parent;
      this.undoRedoSteps = !isNullOrUndefined(options) ? options.undoRedoSteps : 30;
      this.undoRedoTimer = !isNullOrUndefined(options) ? options.undoRedoTimer : 300;
      this.selection = this.parent.markdownSelection;
      this.addEventListener();
    }
    UndoRedoCommands2.prototype.addEventListener = function() {
      var debounceListener = debounce(this.keyUp, this.undoRedoTimer);
      this.parent.observer.on(KEY_UP_HANDLER, debounceListener, this);
      this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDown, this);
      this.parent.observer.on(ACTION, this.onAction, this);
      this.parent.observer.on(MODEL_CHANGED_PLUGIN, this.onPropertyChanged, this);
    };
    UndoRedoCommands2.prototype.onPropertyChanged = function(props) {
      for (var _i = 0, _a = Object.keys(props.newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "undoRedoSteps":
            this.undoRedoSteps = props.newProp.undoRedoSteps;
            break;
          case "undoRedoTimer":
            this.undoRedoTimer = props.newProp.undoRedoTimer;
            break;
        }
      }
    };
    UndoRedoCommands2.prototype.removeEventListener = function() {
      var debounceListener = debounce(this.keyUp, 300);
      this.parent.observer.off(KEY_UP_HANDLER, debounceListener);
      this.parent.observer.off(KEY_DOWN_HANDLER, this.keyDown);
      this.parent.observer.off(ACTION, this.onAction);
      this.parent.observer.off(MODEL_CHANGED_PLUGIN, this.onPropertyChanged);
    };
    UndoRedoCommands2.prototype.destroy = function() {
      this.removeEventListener();
    };
    UndoRedoCommands2.prototype.onAction = function(e) {
      if (e.subCommand === "Undo") {
        this.undo(e);
      } else {
        this.redo(e);
      }
    };
    UndoRedoCommands2.prototype.keyDown = function(e) {
      var event2 = e.event;
      var proxy = this;
      switch (event2.action) {
        case "undo":
          event2.preventDefault();
          proxy.undo(e);
          break;
        case "redo":
          event2.preventDefault();
          proxy.redo(e);
          break;
      }
    };
    UndoRedoCommands2.prototype.keyUp = function(e) {
      if (e.event.keyCode !== 17 && !e.event.ctrlKey) {
        this.saveData(e);
      }
    };
    UndoRedoCommands2.prototype.saveData = function(e) {
      var textArea = this.parent.element;
      this.selection.save(textArea.selectionStart, textArea.selectionEnd);
      var start = textArea.selectionStart;
      var end = textArea.selectionEnd;
      var textValue = this.parent.element.value;
      var changEle = { text: textValue, start, end };
      if (this.undoRedoStack.length >= this.steps) {
        this.undoRedoStack = this.undoRedoStack.slice(0, this.steps + 1);
      }
      if (this.undoRedoStack.length > 1 && this.undoRedoStack[this.undoRedoStack.length - 1].start === start && this.undoRedoStack[this.undoRedoStack.length - 1].end === end) {
        return;
      }
      this.undoRedoStack.push(changEle);
      this.steps = this.undoRedoStack.length - 1;
      if (this.steps > this.undoRedoSteps) {
        this.undoRedoStack.shift();
        this.steps--;
      }
      if (e && e.callBack) {
        e.callBack();
      }
    };
    UndoRedoCommands2.prototype.undo = function(e) {
      if (this.steps > 0) {
        this.currentAction = "Undo";
        var start = this.undoRedoStack[this.steps - 1].start;
        var end = this.undoRedoStack[this.steps - 1].end;
        var removedContent = this.undoRedoStack[this.steps - 1].text;
        this.parent.element.value = removedContent;
        this.parent.element.focus();
        this.steps--;
        this.restore(this.parent.element, start, end, e);
      }
    };
    UndoRedoCommands2.prototype.redo = function(e) {
      if (this.undoRedoStack[this.steps + 1] != null) {
        this.currentAction = "Redo";
        var start = this.undoRedoStack[this.steps + 1].start;
        var end = this.undoRedoStack[this.steps + 1].end;
        this.parent.element.value = this.undoRedoStack[this.steps + 1].text;
        this.parent.element.focus();
        this.steps++;
        this.restore(this.parent.element, start, end, e);
      }
    };
    UndoRedoCommands2.prototype.restore = function(textArea, start, end, event2) {
      this.selection.save(start, end);
      this.selection.restore(textArea);
      if (event2 && event2.callBack) {
        event2.callBack({
          requestType: this.currentAction,
          selectedText: this.selection.getSelectedText(textArea),
          editorMode: "Markdown",
          event: event2.event
        });
      }
    };
    UndoRedoCommands2.prototype.getUndoStatus = function() {
      var status = { undo: false, redo: false };
      if (this.steps > 0) {
        status.undo = true;
      }
      if (this.undoRedoStack[this.steps + 1] != null) {
        status.redo = true;
      }
      return status;
    };
    return UndoRedoCommands2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/link.js
var MDLink = (
  /** @class */
  function() {
    function MDLink2(parent) {
      this.parent = parent;
      this.selection = this.parent.markdownSelection;
      this.addEventListener();
    }
    MDLink2.prototype.addEventListener = function() {
      this.parent.observer.on(LINK_COMMAND, this.createLink, this);
    };
    MDLink2.prototype.createLink = function(e) {
      var textArea = this.parent.element;
      textArea.focus();
      var start = textArea.selectionStart;
      var end = textArea.selectionEnd;
      var text = e.subCommand === "Image" ? this.selection.getSelectedText(textArea) : e.item.text;
      var startOffset = e.subCommand === "Image" ? start + 2 : start + 1;
      var endOffset = e.subCommand === "Image" ? end + 2 : end + 1;
      text = e.subCommand === "Image" ? "![" + text + "](" + e.item.url + ")" : "[" + text + "](" + e.item.url + ")";
      textArea.value = textArea.value.substr(0, start) + text + textArea.value.substr(end, textArea.value.length);
      this.parent.markdownSelection.setSelection(textArea, startOffset, endOffset);
      this.restore(textArea, startOffset, endOffset, e);
    };
    MDLink2.prototype.restore = function(textArea, start, end, event2) {
      this.selection.save(start, end);
      this.selection.restore(textArea);
      if (event2 && event2.callBack) {
        event2.callBack({
          requestType: event2.subCommand,
          selectedText: this.selection.getSelectedText(textArea),
          editorMode: "Markdown",
          event: event2.event
        });
      }
    };
    return MDLink2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/table.js
var MDTable = (
  /** @class */
  function() {
    function MDTable2(options) {
      extend(this, this, options, true);
      this.selection = this.parent.markdownSelection;
      this.addEventListener();
    }
    MDTable2.prototype.addEventListener = function() {
      this.parent.observer.on(MD_TABLE, this.createTable, this);
      this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    };
    MDTable2.prototype.removeEventListener = function() {
      this.parent.observer.off(MD_TABLE, this.createTable);
      this.parent.observer.off(KEY_DOWN_HANDLER, this.onKeyDown);
    };
    MDTable2.prototype.destroy = function() {
      this.removeEventListener();
    };
    MDTable2.prototype.onKeyDown = function(e) {
      if (e.event.action === "insert-table") {
        e.item = e.value;
        this.createTable(e);
      }
    };
    MDTable2.prototype.createTable = function(e) {
      this.element = this.parent.element;
      var start = this.element.selectionStart;
      var end = this.element.selectionEnd;
      var textAreaInitial = this.element.value;
      this.locale = e;
      this.selection.save(start, end);
      this.restore(this.element.selectionStart, this.element.selectionEnd, null);
      this.insertTable(start, end, textAreaInitial, e);
    };
    MDTable2.prototype.getTable = function() {
      var table = "";
      table += this.textNonEmpty();
      table += this.tableHeader(this.locale);
      table += this.tableCell(this.locale);
      return table;
    };
    MDTable2.prototype.tableHeader = function(e) {
      var text = "";
      for (var i = 1; i <= 2; i++) {
        text += "|";
        for (var j = 1; j <= 2; j++) {
          if (i === 1) {
            text += e.item.headingText + " " + j + "|";
          } else {
            text += "---------|";
          }
        }
        text += this.insertLine();
      }
      return text;
    };
    MDTable2.prototype.tableCell = function(e) {
      var text = "";
      for (var i = 1; i <= 2; i++) {
        text += "|";
        for (var j = 1; j <= 2; j++) {
          text += e.item.colText + " " + this.convertToLetters(i) + j + "|";
        }
        text += this.insertLine();
      }
      text += this.insertLine();
      return text;
    };
    MDTable2.prototype.insertLine = function() {
      var dummyElement = document.createElement("div");
      dummyElement.innerHTML = "\n";
      return dummyElement.textContent;
    };
    MDTable2.prototype.insertTable = function(start, end, textAreaInitial, e) {
      var parentText = this.selection.getSelectedParentPoints(this.element);
      var lastLineSplit = parentText[parentText.length - 1].text.split(" ", 2);
      var syntaxArr = this.getFormatTag();
      var syntaxCount = 0;
      if (lastLineSplit.length < 2) {
        this.element.value = this.updateValue(this.getTable());
        this.makeSelection(textAreaInitial, start, end);
      } else {
        if (this.ensureFormatApply(parentText[parentText.length - 1].text)) {
          this.checkValid(start, end, this.getTable(), textAreaInitial, e, lastLineSplit, parentText, syntaxArr);
        } else {
          this.element.value = this.updateValue(this.getTable());
          this.makeSelection(textAreaInitial, start, end);
        }
      }
      this.restore(this.element.selectionStart, this.element.selectionEnd, e);
    };
    MDTable2.prototype.makeSelection = function(textAreaInitial, start, end) {
      end = start + (textAreaInitial.length > 0 ? 12 : 10);
      start += textAreaInitial.length > 0 ? 3 : 1;
      this.selection.setSelection(this.element, start, end);
    };
    MDTable2.prototype.getFormatTag = function() {
      var syntaxFormatKey = Object.keys(this.syntaxTag.Formats);
      var syntaxListKey = Object.keys(this.syntaxTag.List);
      var syntaxArr = [];
      for (var i = 0; i < syntaxFormatKey.length; i++) {
        syntaxArr.push(this.syntaxTag.Formats[syntaxFormatKey[i]]);
      }
      for (var j = 0; j < syntaxListKey.length; j++) {
        syntaxArr.push(this.syntaxTag.List[syntaxListKey[j]]);
      }
      return syntaxArr;
    };
    MDTable2.prototype.ensureFormatApply = function(line) {
      var formatTags = this.getFormatTag();
      var formatSplitZero = line.trim().split(" ", 2)[0] + " ";
      for (var i = 0; i < formatTags.length; i++) {
        if (formatSplitZero === formatTags[i] || /^[\d.]+[ ]+$/.test(formatSplitZero)) {
          return true;
        }
      }
      return false;
    };
    MDTable2.prototype.ensureStartValid = function(firstLine, parentText) {
      var firstLineSplit = parentText[0].text.split(" ", 2);
      for (var i = firstLine + 1; i <= firstLine + firstLineSplit[0].length + 1; i++) {
        if (this.element.selectionStart === i || this.element.selectionEnd === i) {
          return false;
        }
      }
      return true;
    };
    MDTable2.prototype.ensureEndValid = function(lastLine, formatSplitLength) {
      for (var i = lastLine + 1; i <= lastLine + formatSplitLength + 1; i++) {
        if (this.element.selectionEnd === i) {
          return false;
        }
      }
      return true;
    };
    MDTable2.prototype.updateValueWithFormat = function(formatSplit, text) {
      var textApplyFormat = this.element.value.substring(this.element.selectionEnd, this.element.value.length);
      text += textApplyFormat.replace(textApplyFormat, formatSplit[0] + " " + textApplyFormat);
      return this.element.value.substr(0, this.element.selectionStart) + text;
    };
    MDTable2.prototype.updateValue = function(text) {
      return this.element.value.substr(0, this.element.selectionStart) + text + this.element.value.substr(this.element.selectionEnd, this.element.value.length);
    };
    MDTable2.prototype.checkValid = function(start, end, text, textAreaInitial, e, formatSplit, parentText, syntaxArr) {
      if (this.ensureStartValid(parentText[0].start, parentText) && this.ensureEndValid(parentText[parentText.length - 1].start, formatSplit[0].length)) {
        if (start === parentText[0].start) {
          if (start !== end && end !== parentText[parentText.length - 1].end - 1) {
            this.element.value = this.updateValueWithFormat(formatSplit, text);
          } else {
            this.element.value = this.updateValue(text);
          }
        } else if (end === parentText[parentText.length - 1].end - 1) {
          this.element.value = this.updateValue(text);
        } else {
          this.element.value = this.updateValueWithFormat(formatSplit, text);
        }
        this.makeSelection(textAreaInitial, start, end);
      }
    };
    MDTable2.prototype.convertToLetters = function(rowNumber) {
      var baseChar = "A".charCodeAt(0);
      var letters = "";
      do {
        rowNumber -= 1;
        letters = String.fromCharCode(baseChar + rowNumber % 26) + letters;
        rowNumber = rowNumber / 26 >> 0;
      } while (rowNumber > 0);
      return letters;
    };
    MDTable2.prototype.textNonEmpty = function() {
      var emptyText = "";
      if (this.isCursorBased() || this.isSelectionBased()) {
        if (this.element.value.length > 0) {
          emptyText += this.insertLine();
          emptyText += this.insertLine();
        }
      }
      return emptyText;
    };
    MDTable2.prototype.isCursorBased = function() {
      return this.element.selectionStart === this.element.selectionEnd;
    };
    MDTable2.prototype.isSelectionBased = function() {
      return this.element.selectionStart !== this.element.selectionEnd;
    };
    MDTable2.prototype.restore = function(start, end, event2) {
      this.selection.save(start, end);
      this.selection.restore(this.element);
      if (event2 && event2.callBack) {
        event2.callBack({
          requestType: event2.subCommand,
          selectedText: this.selection.getSelectedText(this.element),
          editorMode: "Markdown",
          event: event2.event
        });
      }
    };
    return MDTable2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/clearformat.js
var ClearFormat = (
  /** @class */
  function() {
    function ClearFormat3(parent) {
      this.parent = parent;
      this.selection = this.parent.markdownSelection;
      this.addEventListener();
    }
    ClearFormat3.prototype.addEventListener = function() {
      this.parent.observer.on(CLEAR_COMMAND, this.clear, this);
    };
    ClearFormat3.prototype.replaceRegex = function(data) {
      return data.replace(/\*/ig, "\\*").replace(/\&/ig, "\\&").replace(/\-/ig, "\\-").replace(/\^/ig, "\\^").replace(/\$/ig, "\\$").replace(/\./ig, "\\.").replace(/\|/ig, "\\|").replace(/\?/ig, "\\?").replace(/\+/ig, "\\+").replace(/\-/ig, "\\-").replace(/\&/ig, "\\&");
    };
    ClearFormat3.prototype.clearSelectionTags = function(text) {
      var data = this.parent.selectionTags;
      var keys = Object.keys(data);
      for (var num = 0; num < keys.length; num++) {
        var key = keys[num];
        if (data.hasOwnProperty(key) && data[key] !== "") {
          var expString = this.replaceRegex(data["" + key]);
          var regExp = void 0;
          var startExp = data["" + key].length;
          var endExp = data["" + key] === "<sup>" || data["" + key] === "<sub>" ? data["" + key].length + 1 : data["" + key].length;
          if (data["" + key] === "<sup>") {
            regExp = new RegExp("<sup>(.*?)</sup>", "ig");
          } else if (data["" + key] === "<sub>") {
            regExp = new RegExp("<sub>(.*?)</sub>", "ig");
          } else {
            regExp = new RegExp(expString + "(.*?)" + expString, "ig");
          }
          var val = text.match(regExp);
          for (var index = 0; val && index < val.length && val[index] !== ""; index++) {
            text = text.replace(val[index], val[index].substr(startExp, val[index].length - endExp - startExp));
          }
        }
      }
      return text;
    };
    ClearFormat3.prototype.clearFormatTags = function(text) {
      var lines = text.split("\n");
      return this.clearFormatLines(lines);
    };
    ClearFormat3.prototype.clearFormatLines = function(lines) {
      var tags = [this.parent.formatTags, this.parent.listTags];
      var str = "";
      for (var len = 0; len < lines.length; len++) {
        for (var num = 0; num < tags.length; num++) {
          var data = tags[num];
          var keys = Object.keys(data);
          for (var index = 0; index < keys.length; index++) {
            var key = keys[index];
            if (data.hasOwnProperty(key) && data[key] !== "") {
              if (lines[len].indexOf(data["" + key]) === 0) {
                lines[len] = lines[len].replace(data["" + key], "");
                lines[len] = this.clearFormatLines([lines[len]]);
              }
            }
          }
        }
        str = str + lines[len] + (len !== lines.length - 1 ? "\n" : "");
      }
      return str;
    };
    ClearFormat3.prototype.clear = function(e) {
      var textArea = this.parent.element;
      textArea.focus();
      var start = textArea.selectionStart;
      var end = textArea.selectionEnd;
      var text = this.selection.getSelectedText(textArea);
      text = this.clearSelectionTags(text);
      text = this.clearFormatTags(text);
      textArea.value = textArea.value.substr(0, start) + text + textArea.value.substr(end, textArea.value.length);
      this.parent.markdownSelection.setSelection(textArea, start, start + text.length);
      this.restore(textArea, start, start + text.length, e);
    };
    ClearFormat3.prototype.restore = function(textArea, start, end, event2) {
      this.selection.save(start, end);
      this.selection.restore(textArea);
      if (event2 && event2.callBack) {
        event2.callBack({
          requestType: event2.subCommand,
          selectedText: this.selection.getSelectedText(textArea),
          editorMode: "Markdown",
          event: event2.event
        });
      }
    };
    return ClearFormat3;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/plugin/insert-text.js
var MDInsertText = (
  /** @class */
  function() {
    function MDInsertText2(parent) {
      this.parent = parent;
      this.selection = this.parent.markdownSelection;
      this.addEventListener();
    }
    MDInsertText2.prototype.addEventListener = function() {
      this.parent.observer.on(INSERT_TEXT_COMMAND, this.InsertTextExec, this);
    };
    MDInsertText2.prototype.InsertTextExec = function(e) {
      var textArea = this.parent.element;
      textArea.focus();
      var start = textArea.selectionStart;
      var end = textArea.selectionEnd;
      var text = e.value.text;
      var startOffset = start + text.length;
      var endOffset = end + text.length;
      textArea.value = textArea.value.substr(0, start) + text + textArea.value.substr(end, textArea.value.length);
      this.parent.markdownSelection.setSelection(textArea, startOffset, endOffset);
      this.restore(textArea, startOffset, endOffset, e);
    };
    MDInsertText2.prototype.restore = function(textArea, start, end, event2) {
      this.selection.save(start, end);
      this.selection.restore(textArea);
      if (event2 && event2.callBack) {
        event2.callBack({
          requestType: event2.subCommand,
          selectedText: this.selection.getSelectedText(textArea),
          editorMode: "Markdown",
          event: event2.event
        });
      }
    };
    return MDInsertText2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/markdown-parser/base/markdown-parser.js
var MarkdownParser = (
  /** @class */
  function() {
    function MarkdownParser2(options) {
      this.initialize();
      extend(this, this, options, true);
      this.observer = new Observer(this);
      this.markdownSelection = new MarkdownSelection();
      this.listObj = new MDLists({ parent: this, syntax: this.listTags });
      this.formatObj = new MDFormats({ parent: this, syntax: this.formatTags });
      this.undoRedoManager = new UndoRedoCommands(this, options.options);
      this.mdSelectionFormats = new MDSelectionFormats({ parent: this, syntax: this.selectionTags });
      this.linkObj = new MDLink(this);
      this.tableObj = new MDTable({ parent: this, syntaxTag: { Formats: this.formatTags, List: this.listTags } });
      this.clearObj = new ClearFormat(this);
      this.insertTextObj = new MDInsertText(this);
      this.wireEvents();
    }
    MarkdownParser2.prototype.initialize = function() {
      this.formatTags = markdownFormatTags;
      this.listTags = markdownListsTags;
      this.selectionTags = markdownSelectionTags;
    };
    MarkdownParser2.prototype.wireEvents = function() {
      this.observer.on(KEY_DOWN, this.editorKeyDown, this);
      this.observer.on(KEY_UP, this.editorKeyUp, this);
      this.observer.on(MODEL_CHANGED, this.onPropertyChanged, this);
    };
    MarkdownParser2.prototype.onPropertyChanged = function(props) {
      this.observer.notify(MODEL_CHANGED_PLUGIN, props);
    };
    MarkdownParser2.prototype.editorKeyDown = function(e) {
      this.observer.notify(KEY_DOWN_HANDLER, e);
    };
    MarkdownParser2.prototype.editorKeyUp = function(e) {
      this.observer.notify(KEY_UP_HANDLER, e);
    };
    MarkdownParser2.prototype.execCommand = function(command, value, event2, callBack, text, exeValue) {
      switch (command.toLocaleLowerCase()) {
        case "lists":
          this.observer.notify(LISTS_COMMAND, { subCommand: value, event: event2, callBack });
          break;
        case "formats":
          this.observer.notify(FORMAT_TYPE, { subCommand: value, event: event2, callBack });
          break;
        case "actions":
          this.observer.notify(ACTION, { subCommand: value, event: event2, callBack });
          break;
        case "style":
        case "effects":
        case "casing":
          this.observer.notify(selectionCommand, { subCommand: value, event: event2, callBack });
          break;
        case "links":
        case "images":
          this.observer.notify(LINK_COMMAND, { subCommand: value, event: event2, callBack, item: exeValue });
          break;
        case "table":
          switch (value.toString().toLocaleLowerCase()) {
            case "createtable":
              this.observer.notify(MD_TABLE, { subCommand: value, item: exeValue, event: event2, callBack });
              break;
          }
          break;
        case "clear":
          this.observer.notify(CLEAR_COMMAND, { subCommand: value, event: event2, callBack });
          break;
        case "inserttext":
          this.observer.notify(INSERT_TEXT_COMMAND, {
            subCommand: value,
            event: event2,
            callBack,
            value: { text: exeValue }
          });
          break;
      }
    };
    return MarkdownParser2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/formatter/markdown-formatter.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var MarkdownFormatter = (
  /** @class */
  function(_super) {
    __extends2(MarkdownFormatter2, _super);
    function MarkdownFormatter2(options) {
      var _this = _super.call(this) || this;
      _this.initialize();
      extend(_this, _this, options, true);
      if (options && _this.element) {
        _this.updateFormatter(_this.element, document, options.options);
      }
      return _this;
    }
    MarkdownFormatter2.prototype.initialize = function() {
      this.keyConfig = markdownKeyConfig;
      this.formatTags = markdownFormatTags;
      this.listTags = markdownListsTags;
      this.selectionTags = markdownSelectionTags;
    };
    MarkdownFormatter2.prototype.updateFormatter = function(editElement, doc, options) {
      if (editElement) {
        this.editorManager = new MarkdownParser({
          element: editElement,
          formatTags: this.formatTags,
          listTags: this.listTags,
          selectionTags: this.selectionTags,
          options
        });
      }
    };
    return MarkdownFormatter2;
  }(Formatter)
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/markdown-renderer.js
var MarkdownRender = (
  /** @class */
  function() {
    function MarkdownRender2(parent) {
      this.parent = parent;
    }
    MarkdownRender2.prototype.renderPanel = function() {
      var rteObj = this.parent;
      var div = this.parent.createElement("div", { id: this.parent.getID() + "_view", className: "e-rte-content" });
      this.editableElement = this.parent.createElement("textarea", {
        className: "e-content",
        id: this.parent.getID() + "_editable-content",
        attrs: { "aria-labelledby": this.parent.getID() + "_view" }
      });
      div.appendChild(this.editableElement);
      this.setPanel(div);
      rteObj.element.appendChild(div);
    };
    MarkdownRender2.prototype.getPanel = function() {
      return this.contentPanel;
    };
    MarkdownRender2.prototype.getEditPanel = function() {
      return this.editableElement;
    };
    MarkdownRender2.prototype.getText = function() {
      return this.getEditPanel().value;
    };
    MarkdownRender2.prototype.setPanel = function(panel2) {
      this.contentPanel = panel2;
    };
    MarkdownRender2.prototype.getDocument = function() {
      return this.getEditPanel().ownerDocument;
    };
    return MarkdownRender2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/markdown-editor.js
var MarkdownEditor = (
  /** @class */
  function() {
    function MarkdownEditor2(parent, serviceLocator) {
      this.parent = parent;
      this.locator = serviceLocator;
      this.renderFactory = this.locator.getService("rendererFactory");
      this.addEventListener();
    }
    MarkdownEditor2.prototype.destroy = function() {
      this.removeEventListener();
    };
    MarkdownEditor2.prototype.moduleDestroy = function() {
      this.parent = null;
      this.toolbarUpdate.parent = null;
    };
    MarkdownEditor2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.saveSelection = new MarkdownSelection();
      this.parent.on(initialLoad, this.instantiateRenderer, this);
      this.parent.on(initialEnd, this.render, this);
      this.parent.on(modelChanged, this.onPropertyChanged, this);
      this.parent.on(markdownToolbarClick, this.onToolbarClick, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(selectAll2, this.selectAll, this);
      this.parent.on(getSelectedHtml, this.getSelectedHtml, this);
      this.parent.on(selectionSave, this.onSelectionSave, this);
      this.parent.on(selectionRestore, this.onSelectionRestore, this);
      this.parent.on(readOnlyMode, this.updateReadOnly, this);
      this.parent.on(moduleDestroy, this.moduleDestroy, this);
    };
    MarkdownEditor2.prototype.updateReadOnly = function() {
      if (this.parent.readonly) {
        this.parent.contentModule.getEditPanel().setAttribute("readonly", "readonly");
        addClass([this.parent.element], CLS_RTE_READONLY);
      } else {
        this.parent.contentModule.getEditPanel().removeAttribute("readonly");
        removeClass([this.parent.element], CLS_RTE_READONLY);
      }
    };
    MarkdownEditor2.prototype.onSelectionSave = function() {
      var textArea = this.parent.contentModule.getEditPanel();
      this.saveSelection.save(textArea.selectionStart, textArea.selectionEnd);
    };
    MarkdownEditor2.prototype.onSelectionRestore = function(e) {
      this.contentRenderer.getEditPanel().focus();
      var textArea = this.parent.contentModule.getEditPanel();
      this.saveSelection.restore(textArea);
    };
    MarkdownEditor2.prototype.onToolbarClick = function(args) {
      var item = args.item;
      var textArea = this.parent.contentModule.getEditPanel();
      textArea.focus();
      var startOffset = textArea.selectionStart;
      var endOffset = textArea.selectionEnd;
      var text = textArea.value.substring(startOffset, endOffset);
      switch (item.subCommand) {
        case "Maximize":
          this.parent.notify(enableFullScreen, { args });
          break;
        case "Minimize":
          this.parent.notify(disableFullScreen, { args });
          break;
        case "CreateLink":
          this.parent.notify(insertLink, { member: "link", args, text, module: "Markdown" });
          break;
        case "Image":
          this.parent.notify(insertImage, { member: "image", args, text, module: "Markdown" });
          break;
        case "CreateTable": {
          var tableConstant = {
            "headingText": this.parent.localeObj.getConstant("TableHeadingText"),
            "colText": this.parent.localeObj.getConstant("TableColText")
          };
          this.parent.formatter.process(this.parent, args, args.originalEvent, tableConstant);
          break;
        }
        default:
          this.parent.formatter.process(this.parent, args, args.originalEvent, null);
          break;
      }
    };
    MarkdownEditor2.prototype.instantiateRenderer = function() {
      this.renderFactory.addRenderer(RenderType.Content, new MarkdownRender(this.parent));
    };
    MarkdownEditor2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialEnd, this.render);
      this.parent.off(modelChanged, this.onPropertyChanged);
      this.parent.off(destroy, this.destroy);
      this.parent.off(markdownToolbarClick, this.onToolbarClick);
      this.parent.off(initialLoad, this.instantiateRenderer);
      this.parent.off(selectAll2, this.selectAll);
      this.parent.off(getSelectedHtml, this.getSelectedHtml);
      this.parent.off(selectionSave, this.onSelectionSave);
      this.parent.off(selectionRestore, this.onSelectionRestore);
      this.parent.off(readOnlyMode, this.updateReadOnly);
      this.parent.off(moduleDestroy, this.moduleDestroy);
    };
    MarkdownEditor2.prototype.render = function() {
      this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
      var editElement = this.contentRenderer.getEditPanel();
      var option = { undoRedoSteps: this.parent.undoRedoSteps, undoRedoTimer: this.parent.undoRedoTimer };
      if (isNullOrUndefined(this.parent.formatter)) {
        this.parent.formatter = new MarkdownFormatter({
          element: editElement,
          options: option
        });
      } else {
        this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);
      }
      if (this.parent.toolbarSettings.enable) {
        this.toolbarUpdate = new MarkdownToolbarStatus(this.parent);
      }
      this.parent.notify(bindOnEnd, {});
    };
    MarkdownEditor2.prototype.onPropertyChanged = function(e) {
      if (!isNullOrUndefined(e.newProp.formatter)) {
        var editElement = this.contentRenderer.getEditPanel();
        var option = {
          undoRedoSteps: this.parent.undoRedoSteps,
          undoRedoTimer: this.parent.undoRedoTimer
        };
        this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);
      }
    };
    MarkdownEditor2.prototype.getModuleName = function() {
      return "markdownEditor";
    };
    MarkdownEditor2.prototype.selectAll = function() {
      this.parent.formatter.editorManager.markdownSelection.setSelection(this.parent.contentModule.getEditPanel(), 0, this.parent.contentModule.getEditPanel().value.length);
    };
    MarkdownEditor2.prototype.getSelectedHtml = function(e) {
      e.callBack(this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()));
    };
    return MarkdownEditor2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/base/constant.js
var IMAGE = "INSERT-IMAGE";
var AUDIO = "INSERT-AUDIO";
var VIDEO = "INSERT-VIDEO";
var TABLE = "INSERT-TABLE";
var LINK = "INSERT-LINK";
var INSERT_ROW = "INSERT-ROW";
var INSERT_COLUMN = "INSERT-COLUMN";
var DELETEROW = "DELETE-ROW";
var DELETECOLUMN = "DELETE-COLUMN";
var REMOVETABLE = "REMOVE-TABLE";
var TABLEHEADER = "TABLE-HEADER";
var TABLE_VERTICAL_ALIGN = "TABLE_VERTICAL_ALIGN";
var TABLE_MERGE = "TABLE_MERGE";
var TABLE_VERTICAL_SPLIT = "TABLE_VERTICAL_SPLIT";
var TABLE_HORIZONTAL_SPLIT = "TABLE_HORIZONTAL_SPLIT";
var TABLE_MOVE = "TABLE_MOVE";
var ALIGNMENT_TYPE = "alignment-type";
var INDENT_TYPE = "indent-type";
var DEFAULT_TAG = "p";
var BLOCK_TAGS = [
  "address",
  "article",
  "aside",
  "audio",
  "blockquote",
  "canvas",
  "details",
  "dd",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "hr",
  "li",
  "main",
  "nav",
  "noscript",
  "ol",
  "output",
  "p",
  "pre",
  "section",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "tr",
  "ul",
  "video",
  "body"
];
var IGNORE_BLOCK_TAGS = ["td", "th"];
var TABLE_BLOCK_TAGS = [
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "tr"
];
var SELECTION_TYPE = "selection-type";
var INSERTHTML_TYPE = "inserthtml-type";
var INSERT_TEXT_TYPE = "insert-text-type";
var CLEAR_TYPE = "clear-type";
var SELF_CLOSING_TAGS = ["area", "base", "br", "embed", "hr", "img", "input", "param", "source", "track", "wbr", "iframe", "td"];

// node_modules/@syncfusion/ej2-richtexteditor/src/selection/selection.js
var NodeSelection = (
  /** @class */
  function() {
    function NodeSelection2() {
      this.startNodeName = [];
      this.endNodeName = [];
    }
    NodeSelection2.prototype.saveInstance = function(range, body) {
      this.range = range.cloneRange();
      this.rootNode = this.documentFromRange(range);
      this.body = body;
      this.startContainer = this.getNodeArray(range.startContainer, true);
      this.endContainer = this.getNodeArray(range.endContainer, false);
      this.startOffset = range.startOffset;
      this.endOffset = range.endOffset;
      this.html = this.body.innerHTML;
      return this;
    };
    NodeSelection2.prototype.documentFromRange = function(range) {
      return 9 === range.startContainer.nodeType ? range.startContainer : range.startContainer.ownerDocument;
    };
    NodeSelection2.prototype.getRange = function(docElement) {
      var select2 = this.get(docElement);
      var range = select2 && select2.rangeCount > 0 ? select2.getRangeAt(select2.rangeCount - 1) : docElement.createRange();
      return range.startContainer !== docElement || range.endContainer !== docElement || range.startOffset || range.endOffset || (range.setStart(docElement.body, 0), range.collapse(true)), range;
    };
    NodeSelection2.prototype.get = function(docElement) {
      return docElement.defaultView.getSelection();
    };
    NodeSelection2.prototype.save = function(range, docElement) {
      range = range ? range.cloneRange() : this.getRange(docElement);
      return this.saveInstance(range, docElement.body);
    };
    NodeSelection2.prototype.getIndex = function(node) {
      var index;
      var num = 0;
      node = !node.previousSibling && node.tagName === "BR" ? node : node.previousSibling;
      if (node) {
        for (var type = node.nodeType; node; null) {
          index = node.nodeType;
          num++;
          type = index;
          node = node.previousSibling;
        }
      }
      return num;
    };
    NodeSelection2.prototype.isChildNode = function(nodeCollection, parentNode) {
      for (var index = 0; index < parentNode.childNodes.length; index++) {
        if (nodeCollection.indexOf(parentNode.childNodes[index]) > -1) {
          return true;
        }
      }
      return false;
    };
    NodeSelection2.prototype.getNode = function(startNode, endNode, nodeCollection) {
      if (endNode === startNode && (startNode.nodeType === 3 || !startNode.firstChild || nodeCollection.indexOf(startNode.firstChild) !== -1 || this.isChildNode(nodeCollection, startNode))) {
        return null;
      }
      if (nodeCollection.indexOf(startNode.firstChild) === -1 && startNode.firstChild && !this.isChildNode(nodeCollection, startNode)) {
        return startNode.firstChild;
      }
      if (startNode.nextSibling) {
        return startNode.nextSibling;
      }
      if (!startNode.parentNode) {
        return null;
      } else {
        return startNode.parentNode;
      }
    };
    NodeSelection2.prototype.getNodeCollection = function(range) {
      var startNode = range.startContainer.childNodes[range.startOffset] || range.startContainer;
      var endNode = range.endContainer.childNodes[range.endOffset > 0 ? range.endOffset - 1 : range.endOffset] || range.endContainer;
      if ((startNode === endNode || startNode.nodeName === "BR" && startNode === range.endContainer.childNodes[range.endOffset]) && startNode.childNodes.length === 0) {
        return [startNode];
      }
      if (range.startOffset === range.endOffset && range.startOffset !== 0 && range.startContainer.nodeName === "PRE") {
        return [startNode.nodeName === "BR" || startNode.nodeName === "#text" ? startNode : startNode.childNodes[0]];
      }
      var nodeCollection = [];
      do {
        if (nodeCollection.indexOf(startNode) === -1) {
          nodeCollection.push(startNode);
        }
        startNode = this.getNode(startNode, endNode, nodeCollection);
      } while (startNode);
      return nodeCollection;
    };
    NodeSelection2.prototype.getParentNodeCollection = function(range) {
      return this.getParentNodes(this.getNodeCollection(range), range);
    };
    NodeSelection2.prototype.getParentNodes = function(nodeCollection, range) {
      nodeCollection = nodeCollection.reverse();
      for (var index = 0; index < nodeCollection.length; index++) {
        if (nodeCollection.indexOf(nodeCollection[index].parentNode) !== -1 || nodeCollection[index].nodeType === 3 && range.startContainer !== range.endContainer && range.startContainer.parentNode !== range.endContainer.parentNode) {
          nodeCollection.splice(index, 1);
          index--;
        } else if (nodeCollection[index].nodeType === 3) {
          nodeCollection[index] = nodeCollection[index].parentNode;
        }
      }
      return nodeCollection;
    };
    NodeSelection2.prototype.getSelectionNodeCollection = function(range) {
      return this.getSelectionNodes(this.getNodeCollection(range));
    };
    NodeSelection2.prototype.getSelectionNodeCollectionBr = function(range) {
      return this.getSelectionNodesBr(this.getNodeCollection(range));
    };
    NodeSelection2.prototype.getSelectionNodes = function(nodeCollection) {
      nodeCollection = nodeCollection.reverse();
      var regEx = new RegExp(String.fromCharCode(8203), "g");
      for (var index = 0; index < nodeCollection.length; index++) {
        if (nodeCollection[index].nodeType !== 3 || (nodeCollection[index].textContent.trim() === "" || nodeCollection[index].textContent.length === 1 && nodeCollection[index].textContent.match(regEx))) {
          nodeCollection.splice(index, 1);
          index--;
        }
      }
      return nodeCollection.reverse();
    };
    NodeSelection2.prototype.getSelectionNodesBr = function(nodeCollection) {
      nodeCollection = nodeCollection.reverse();
      var regEx = new RegExp(String.fromCharCode(8203), "g");
      for (var index = 0; index < nodeCollection.length; index++) {
        if (nodeCollection[index].nodeName !== "BR" && (nodeCollection[index].nodeType !== 3 || (nodeCollection[index].textContent.trim() === "" || nodeCollection[index].textContent.length === 1 && nodeCollection[index].textContent.match(regEx)))) {
          nodeCollection.splice(index, 1);
          index--;
        }
      }
      return nodeCollection.reverse();
    };
    NodeSelection2.prototype.getInsertNodeCollection = function(range) {
      return this.getInsertNodes(this.getNodeCollection(range));
    };
    NodeSelection2.prototype.getInsertNodes = function(nodeCollection) {
      nodeCollection = nodeCollection.reverse();
      for (var index = 0; index < nodeCollection.length; index++) {
        if (nodeCollection[index].childNodes.length !== 0 && nodeCollection[index].nodeType !== 3 || nodeCollection[index].nodeType === 3 && nodeCollection[index].textContent === "") {
          nodeCollection.splice(index, 1);
          index--;
        }
      }
      return nodeCollection.reverse();
    };
    NodeSelection2.prototype.getNodeArray = function(node, isStart, root) {
      var array = [];
      isStart ? this.startNodeName = [] : this.endNodeName = [];
      for (; node !== (root ? root : this.rootNode); null) {
        if (isNullOrUndefined(node)) {
          break;
        }
        isStart ? this.startNodeName.push(node.nodeName.toLowerCase()) : this.endNodeName.push(node.nodeName.toLowerCase());
        array.push(this.getIndex(node));
        node = node.parentNode;
      }
      return array;
    };
    NodeSelection2.prototype.setRangePoint = function(range, isvalid, num, size) {
      var node = this.rootNode;
      var index = num.length;
      var constant = size;
      for (; index--; null) {
        node = node && node.childNodes[num[index]];
      }
      if (node && constant >= 0 && node.nodeName !== "html") {
        if (node.nodeType === 3 && node.nodeValue.replace(/\u00a0/g, "&nbsp;") === "&nbsp;") {
          constant = node.textContent.length;
        }
        range[isvalid ? "setStart" : "setEnd"](node, constant);
      }
      return range;
    };
    NodeSelection2.prototype.restore = function() {
      var range = this.range.cloneRange();
      range = this.setRangePoint(range, true, this.startContainer, this.startOffset);
      range = this.setRangePoint(range, false, this.endContainer, this.endOffset);
      this.selectRange(this.rootNode, range);
      return range;
    };
    NodeSelection2.prototype.selectRange = function(docElement, range) {
      this.setRange(docElement, range);
      this.save(range, docElement);
    };
    NodeSelection2.prototype.setRange = function(docElement, range) {
      var selection = this.get(docElement);
      selection.removeAllRanges();
      selection.addRange(range);
    };
    NodeSelection2.prototype.setSelectionText = function(docElement, startNode, endNode, startIndex, endIndex) {
      var range = docElement.createRange();
      range.setStart(startNode, startIndex);
      range.setEnd(endNode, endIndex);
      this.setRange(docElement, range);
    };
    NodeSelection2.prototype.setSelectionContents = function(docElement, element) {
      var range = docElement.createRange();
      range.selectNode(element);
      this.setRange(docElement, range);
    };
    NodeSelection2.prototype.setSelectionNode = function(docElement, element) {
      var range = docElement.createRange();
      range.selectNodeContents(element);
      this.setRange(docElement, range);
    };
    NodeSelection2.prototype.getSelectedNodes = function(docElement) {
      return this.getNodeCollection(this.getRange(docElement));
    };
    NodeSelection2.prototype.Clear = function(docElement) {
      this.get(docElement).removeAllRanges();
    };
    NodeSelection2.prototype.insertParentNode = function(docElement, newNode, range) {
      range.surroundContents(newNode);
      this.selectRange(docElement, range);
    };
    NodeSelection2.prototype.setCursorPoint = function(docElement, element, point) {
      var range = docElement.createRange();
      var selection = docElement.defaultView.getSelection();
      range.setStart(element, point);
      range.collapse(true);
      selection.removeAllRanges();
      selection.addRange(range);
    };
    return NodeSelection2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/dom-node.js
var markerClassName = {
  startSelection: "e-editor-select-start",
  endSelection: "e-editor-select-end"
};
var DOMNode = (
  /** @class */
  function() {
    function DOMNode2(parent, currentDocument) {
      this.parent = parent;
      this.nodeSelection = new NodeSelection();
      this.currentDocument = currentDocument;
    }
    DOMNode2.prototype.contents = function(element) {
      return element && "IFRAME" !== element.tagName ? Array.prototype.slice.call(element.childNodes || []) : [];
    };
    DOMNode2.prototype.isBlockNode = function(element) {
      return !!element && (element.nodeType === Node.ELEMENT_NODE && BLOCK_TAGS.indexOf(element.tagName.toLowerCase()) >= 0);
    };
    DOMNode2.prototype.isLink = function(element) {
      return !!element && (element.nodeType === Node.ELEMENT_NODE && "a" === element.tagName.toLowerCase());
    };
    DOMNode2.prototype.blockParentNode = function(element) {
      for (; element && element.parentNode !== this.parent && (!element.parentNode || !this.hasClass(element.parentNode, "e-node-inner")); null) {
        element = element.parentNode;
        if (this.isBlockNode(element)) {
          return element;
        }
      }
      return element;
    };
    DOMNode2.prototype.rawAttributes = function(element) {
      var rawAttr = {};
      var attributes2 = element.attributes;
      if (attributes2.length > 0) {
        for (var d = 0; d < attributes2.length; d++) {
          var e = attributes2[d];
          rawAttr[e.nodeName] = e.value;
        }
      }
      return rawAttr;
    };
    DOMNode2.prototype.attributes = function(element) {
      if (!element) {
        return "";
      }
      var attr = "";
      var rawAttr = this.rawAttributes(element);
      var orderRawAttr = Object.keys(rawAttr).sort();
      for (var e = 0; e < orderRawAttr.length; e++) {
        var attrKey = orderRawAttr[e];
        var attrValue = rawAttr["" + attrKey];
        if (attrValue.indexOf("'") < 0 && attrValue.indexOf('"') >= 0) {
          attr += " " + attrKey + "='" + attrValue + "'";
        } else if (attrValue.indexOf('"') >= 0 && attrValue.indexOf("'") >= 0) {
          attrValue = attrValue.replace(/"/g, "&quot;");
          attr += " " + attrKey + '="' + attrValue + '"';
        } else {
          attr += " " + attrKey + '="' + attrValue + '"';
        }
      }
      return attr;
    };
    DOMNode2.prototype.clearAttributes = function(element) {
      for (var attr = element.attributes, c = attr.length - 1; c >= 0; c--) {
        var key = attr[c];
        element.removeAttribute(key.nodeName);
      }
    };
    DOMNode2.prototype.openTagString = function(element) {
      return "<" + element.tagName.toLowerCase() + this.attributes(element) + ">";
    };
    DOMNode2.prototype.closeTagString = function(element) {
      return "</" + element.tagName.toLowerCase() + ">";
    };
    DOMNode2.prototype.createTagString = function(tagName, relativeElement, innerHTML) {
      return "<" + tagName.toLowerCase() + this.attributes(relativeElement) + ">" + innerHTML + "</" + tagName.toLowerCase() + ">";
    };
    DOMNode2.prototype.isList = function(element) {
      return !!element && ["UL", "OL"].indexOf(element.tagName) >= 0;
    };
    DOMNode2.prototype.isElement = function(element) {
      return element === this.parent;
    };
    DOMNode2.prototype.isEditable = function(element) {
      return (!element.getAttribute || element.getAttribute("contenteditable") === "true") && ["STYLE", "SCRIPT"].indexOf(element.tagName) < 0;
    };
    DOMNode2.prototype.hasClass = function(element, className) {
      return element && element.classList && element.classList.contains(className);
    };
    DOMNode2.prototype.replaceWith = function(element, value) {
      var parentNode = element.parentNode;
      parentNode.insertBefore(this.parseHTMLFragment(value), element);
      detach(element);
    };
    DOMNode2.prototype.parseHTMLFragment = function(value) {
      var temp = createElement("template");
      temp.innerHTML = value;
      if (temp.content instanceof DocumentFragment) {
        return temp.content;
      } else {
        return document.createRange().createContextualFragment(value);
      }
    };
    DOMNode2.prototype.wrap = function(element, wrapper) {
      element.parentNode.insertBefore(wrapper, element);
      wrapper = element.previousSibling;
      wrapper.appendChild(element);
      return wrapper;
    };
    DOMNode2.prototype.insertAfter = function(newNode, referenceNode) {
      referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    };
    DOMNode2.prototype.wrapInner = function(parent, wrapper) {
      parent.appendChild(wrapper);
      wrapper = parent.querySelector(".e-rte-wrap-inner");
      wrapper.classList.remove("e-rte-wrap-inner");
      if (wrapper.classList.length === 0) {
        wrapper.removeAttribute("class");
      }
      while (parent.firstChild !== wrapper) {
        wrapper.appendChild(parent.firstChild);
      }
      return wrapper;
    };
    DOMNode2.prototype.unWrap = function(element) {
      var parent = element.parentNode;
      var unWrapNode = [];
      while (element.firstChild) {
        unWrapNode.push(element.firstChild);
        parent.insertBefore(element.firstChild, element);
      }
      unWrapNode = unWrapNode.length > 0 ? unWrapNode : [element.parentNode];
      parent.removeChild(element);
      return unWrapNode;
    };
    DOMNode2.prototype.getSelectedNode = function(element, index) {
      if (element.nodeType === Node.ELEMENT_NODE && element.childNodes.length > 0 && element.childNodes[index - 1] && element.childNodes[index - 1].nodeType === Node.ELEMENT_NODE && (element.childNodes[index - 1].classList.contains(markerClassName.startSelection) || element.childNodes[index - 1].classList.contains(markerClassName.endSelection))) {
        element = element.childNodes[index - 1];
      } else if (element.nodeType === Node.ELEMENT_NODE && element.childNodes.length > 0 && element.childNodes[index]) {
        element = element.childNodes[index];
      }
      if (element.nodeType === Node.TEXT_NODE) {
        element = element.parentNode;
      }
      return element;
    };
    DOMNode2.prototype.nodeFinds = function(element, elements) {
      var existNodes = [];
      for (var i = 0; i < elements.length; i++) {
        if (element.contains(elements[i]) && element !== elements[i]) {
          existNodes.push(elements[i]);
        }
      }
      return existNodes;
    };
    DOMNode2.prototype.isEditorArea = function() {
      var range = this.getRangePoint(0);
      var element;
      for (element = range.commonAncestorContainer; element && !this.isElement(element); null) {
        element = element.parentNode;
      }
      return !!this.isElement(element);
    };
    DOMNode2.prototype.getRangePoint = function(point) {
      var selection = this.getSelection();
      var ranges = [];
      if (selection && selection.getRangeAt && selection.rangeCount) {
        ranges = [];
        for (var f = 0; f < selection.rangeCount; f++) {
          ranges.push(selection.getRangeAt(f));
        }
      } else {
        ranges = [this.currentDocument.createRange()];
      }
      return "undefined" !== typeof point ? ranges[point] : ranges;
    };
    DOMNode2.prototype.getSelection = function() {
      return this.nodeSelection.get(this.currentDocument);
    };
    DOMNode2.prototype.getPreviousNode = function(element) {
      element = element.previousElementSibling;
      for (; element && element.textContent === "\n"; null) {
        element = element.previousElementSibling;
      }
      return element;
    };
    DOMNode2.prototype.encode = function(value) {
      var divNode = document.createElement("div");
      divNode.innerText = value;
      return divNode.innerHTML.replace(/<br\s*[\/]?>/gi, "\n");
    };
    DOMNode2.prototype.saveMarker = function(save, action) {
      var start = this.parent.querySelector("." + markerClassName.startSelection);
      var end = this.parent.querySelector("." + markerClassName.endSelection);
      var startTextNode;
      var endTextNode;
      if (start.textContent === "" && isNullOrUndefined(end) && action !== "tab") {
        if (isNullOrUndefined(action) && save.range.startContainer.nodeType === 1 && save.range.startContainer.querySelectorAll("audio,video,image").length === 0) {
          start.innerHTML = "<br>";
        } else if (start.childNodes.length === 1 && start.childNodes[0].nodeName === "BR") {
          start.innerHTML = "&#65279;&#65279;<br>";
        } else {
          start.innerHTML = "&#65279;&#65279;";
        }
      }
      if (this.hasClass(start, markerClassName.startSelection) && start.classList.length > 1) {
        var replace = this.createTagString(DEFAULT_TAG, start, this.encode(start.textContent));
        this.replaceWith(start, replace);
        start = this.parent.querySelector("." + markerClassName.startSelection);
        start.classList.remove(markerClassName.startSelection);
        startTextNode = start.childNodes[0];
      } else {
        startTextNode = this.unWrap(start)[0];
      }
      if (this.hasClass(end, markerClassName.endSelection) && end.classList.length > 1) {
        var replace = this.createTagString(DEFAULT_TAG, end, this.encode(end.textContent));
        this.replaceWith(end, replace);
        end = this.parent.querySelector("." + markerClassName.endSelection);
        end.classList.remove(markerClassName.endSelection);
        endTextNode = end.childNodes[0];
      } else {
        endTextNode = end ? this.unWrap(end)[0] : startTextNode;
      }
      save.startContainer = save.getNodeArray(startTextNode, true);
      save.endContainer = save.getNodeArray(endTextNode, false);
      return save;
    };
    DOMNode2.prototype.marker = function(className, textContent) {
      return '<span class="' + className + '">' + textContent + "</span>";
    };
    DOMNode2.prototype.setMarker = function(save) {
      var range = save.range;
      var startChildNodes = range.startContainer.childNodes;
      var isTableStart = startChildNodes.length > 1 && startChildNodes[0].nodeName === "TABLE";
      var start = (isTableStart ? getLastTextNode(startChildNodes[range.startOffset + 1]) : startChildNodes[range.startOffset > 0 ? range.startOffset - 1 : range.startOffset]) || range.startContainer;
      var end = range.endContainer.childNodes[range.endOffset > 0 ? range.endOffset - 1 : range.endOffset] || range.endContainer;
      if (start.nodeType === Node.ELEMENT_NODE && end.nodeType === Node.ELEMENT_NODE && (start.contains(end) || end.contains(start))) {
        var existNode = start.contains(end) ? start : end;
        var isElement = existNode.nodeType !== Node.TEXT_NODE;
        if (isElement) {
          var nodes = [];
          var textNodes = [];
          for (var node = existNode; existNode.contains(node); null) {
            if (nodes.indexOf(node) < 0 && node.childNodes && node.childNodes.length) {
              nodes.push(node);
              node = node.childNodes[0];
            } else if (node.nextSibling) {
              node = node.nextSibling;
            } else if (node.parentNode) {
              node = node.parentNode;
              nodes.push(node);
            }
            if (textNodes.indexOf(node) < 0 && (node.nodeType === Node.TEXT_NODE || IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0 && (node.tagName === "BR" || node.tagName === "IMG"))) {
              textNodes.push(node);
            }
          }
          if (textNodes.length) {
            start = start.contains(end) ? textNodes[0] : start;
            end = textNodes[textNodes.length - 1];
          }
        }
      }
      if (start !== end) {
        if (start.nodeType !== Node.TEXT_NODE && (start.tagName === "BR" && IGNORE_BLOCK_TAGS.indexOf(start.parentNode.tagName.toLocaleLowerCase()) >= 0 || start.tagName === "IMG")) {
          this.replaceWith(start, this.marker(markerClassName.startSelection, this.encode(start.textContent)));
          var markerStart = range.startContainer.querySelector("." + markerClassName.startSelection);
          markerStart.appendChild(start);
        } else {
          if (start.nodeType !== 3 && start.nodeName !== "#text" && start.nodeName !== "BR") {
            var marker = this.marker(markerClassName.startSelection, "");
            append([this.parseHTMLFragment(marker)], start);
          } else {
            this.replaceWith(start, this.marker(markerClassName.startSelection, this.encode(start.textContent)));
          }
        }
        if (end.nodeType !== Node.TEXT_NODE && end.tagName === "BR" && IGNORE_BLOCK_TAGS.indexOf(end.parentNode.tagName.toLocaleLowerCase()) >= 0) {
          this.replaceWith(end, this.marker(markerClassName.endSelection, this.encode(end.textContent)));
          var markerEnd = range.endContainer.querySelector("." + markerClassName.endSelection);
          markerEnd.appendChild(end);
        } else {
          this.ensureSelfClosingTag(end, markerClassName.endSelection, range);
        }
      } else {
        this.ensureSelfClosingTag(start, markerClassName.startSelection, range);
      }
    };
    DOMNode2.prototype.ensureSelfClosingTag = function(start, className, range) {
      var isTable = false;
      if (start.nodeType === 3) {
        this.replaceWith(start, this.marker(className, this.encode(start.textContent)));
      } else if (start.tagName === "BR") {
        this.replaceWith(start, this.marker(className, this.encode(start.textContent)));
        var markerStart = range.startContainer.querySelector("." + className);
        markerStart.appendChild(start);
      } else {
        if (start.tagName === "IMG") {
          var parNode = document.createElement("p");
          start.parentElement.insertBefore(parNode, start);
          parNode.appendChild(start);
          start = parNode.children[0];
        }
        if (start.tagName === "TABLE") {
          isTable = true;
          if (start.textContent === "") {
            var tdNode = start.querySelectorAll("td");
            start = tdNode[tdNode.length - 1];
            start = !isNullOrUndefined(start.childNodes[0]) ? start.childNodes[0] : start;
          } else {
            var lastNode = start.lastChild;
            while (lastNode.nodeType !== 3 && lastNode.nodeName !== "#text" && lastNode.nodeName !== "BR") {
              lastNode = lastNode.lastChild;
            }
            start = lastNode;
          }
        }
        for (var i = 0; i < selfClosingTags.length; i++) {
          start = start.tagName === selfClosingTags[i] && !isTable ? start.parentNode : start;
        }
        if (start.nodeType === 3 && start.nodeName === "#text") {
          this.replaceWith(start, this.marker(className, this.encode(start.textContent)));
        } else if (start.nodeName === "BR") {
          this.replaceWith(start, this.marker(markerClassName.endSelection, this.encode(start.textContent)));
          var markerEnd = range.endContainer.querySelector("." + markerClassName.endSelection);
          markerEnd.appendChild(start);
        } else {
          var marker = this.marker(className, "");
          append([this.parseHTMLFragment(marker)], start);
        }
      }
    };
    DOMNode2.prototype.createTempNode = function(element) {
      var textContent = element.textContent;
      if (element.tagName === "BR") {
        var wrapper = "<" + DEFAULT_TAG + "></" + DEFAULT_TAG + ">";
        var node = element.parentNode;
        if (IGNORE_BLOCK_TAGS.indexOf(node.tagName.toLocaleLowerCase()) >= 0) {
          element = this.wrap(element, this.parseHTMLFragment(wrapper));
        }
      } else if (element.nodeType !== Node.TEXT_NODE && (element.classList.contains(markerClassName.startSelection) || element.classList.contains(markerClassName.endSelection)) || textContent.replace(/\n/g, "").replace(/(^ *)|( *$)/g, "").length > 0 || textContent.length && textContent.indexOf("\n") < 0) {
        var wrapper = "<" + DEFAULT_TAG + "></" + DEFAULT_TAG + ">";
        var target = element;
        element = this.wrap(element, this.parseHTMLFragment(wrapper));
        var ignoreBr = target.nodeType === Node.ELEMENT_NODE && target.firstChild && target.firstChild.nodeName === "BR" && (target.classList.contains(markerClassName.startSelection) || target.classList.contains(markerClassName.endSelection));
        if (!ignoreBr && element.nextElementSibling && element.nextElementSibling.tagName === "BR") {
          element.appendChild(element.nextElementSibling);
        }
      }
      return element;
    };
    DOMNode2.prototype.getImageTagInSelection = function() {
      var selection = this.getSelection();
      if (this.isEditorArea() && selection.rangeCount) {
        return selection.focusNode.querySelectorAll("img");
      }
      return null;
    };
    DOMNode2.prototype.blockNodes = function() {
      var collectionNodes = [];
      var selection = this.getSelection();
      if (this.isEditorArea() && selection.rangeCount) {
        var ranges = this.getRangePoint();
        for (var j = 0; j < ranges.length; j++) {
          var parentNode = void 0;
          var range = ranges[j];
          var startNode = this.getSelectedNode(range.startContainer, range.startOffset);
          var endNode = this.getSelectedNode(range.endContainer, range.endOffset);
          if (this.isBlockNode(startNode) && collectionNodes.indexOf(startNode) < 0) {
            collectionNodes.push(startNode);
          }
          parentNode = this.blockParentNode(startNode);
          if (parentNode && collectionNodes.indexOf(parentNode) < 0) {
            if (IGNORE_BLOCK_TAGS.indexOf(parentNode.tagName.toLocaleLowerCase()) >= 0 && (startNode.tagName === "BR" || startNode.nodeType === Node.TEXT_NODE || startNode.classList.contains(markerClassName.startSelection) || startNode.classList.contains(markerClassName.endSelection))) {
              var tempNode = startNode.previousSibling && startNode.previousSibling.nodeType === Node.TEXT_NODE ? startNode.previousSibling : startNode;
              if (!startNode.nextSibling && !startNode.previousSibling && startNode.tagName === "BR") {
                collectionNodes.push(tempNode);
              } else {
                collectionNodes.push(this.createTempNode(tempNode));
              }
            } else {
              collectionNodes.push(parentNode);
            }
          }
          var nodes = [];
          for (var node = startNode; node !== endNode && node !== this.parent; null) {
            if (nodes.indexOf(node) < 0 && node.childNodes && node.childNodes.length) {
              nodes.push(node);
              node = node.childNodes[0];
            } else if (node && node.nodeType !== 8 && (node.tagName === "BR" || node.nodeType === Node.TEXT_NODE && node.textContent.trim() !== "" || node.nodeType !== Node.TEXT_NODE && (node.classList.contains(markerClassName.startSelection) || node.classList.contains(markerClassName.endSelection))) && IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0) {
              node = this.createTempNode(node);
            } else if (node.nextSibling && node.nextSibling.nodeType !== 8 && (node.nextSibling.tagName === "BR" || node.nextSibling.nodeType === Node.TEXT_NODE || node.nextSibling.classList.contains(markerClassName.startSelection) || node.nextSibling.classList.contains(markerClassName.endSelection)) && IGNORE_BLOCK_TAGS.indexOf(node.nextSibling.parentNode.tagName.toLocaleLowerCase()) >= 0) {
              node = this.createTempNode(node.nextSibling);
            } else if (node.nextSibling) {
              node = node.nextSibling;
            } else if (node.parentNode) {
              node = node.parentNode;
              nodes.push(node);
            }
            if (collectionNodes.indexOf(node) < 0 && node.nodeType === Node.ELEMENT_NODE && IGNORE_BLOCK_TAGS.indexOf(node.parentNode.tagName.toLocaleLowerCase()) >= 0 && (node.classList.contains(markerClassName.startSelection) || node.classList.contains(markerClassName.endSelection))) {
              collectionNodes.push(this.createTempNode(node));
            }
            if (this.isBlockNode(node) && this.ignoreTableTag(node) && nodes.indexOf(node) < 0 && collectionNodes.indexOf(node) < 0 && (node !== endNode || range.endOffset > 0)) {
              collectionNodes.push(node);
            }
            if (node.nodeName === "IMG" && node.parentElement.contentEditable === "true") {
              collectionNodes.push(node);
            }
          }
          parentNode = this.blockParentNode(endNode);
          if (parentNode && this.ignoreTableTag(parentNode) && collectionNodes.indexOf(parentNode) < 0 && (!isNullOrUndefined(parentNode.previousElementSibling) && parentNode.previousElementSibling.tagName !== "IMG")) {
            collectionNodes.push(parentNode);
          }
        }
      }
      for (var i = collectionNodes.length - 1; i > 0; i--) {
        var nodes = this.nodeFinds(collectionNodes[i], collectionNodes);
        if (nodes.length) {
          var listNodes = collectionNodes[i].querySelectorAll("ul, ol");
          if (collectionNodes[i].tagName === "LI" && listNodes.length > 0) {
            continue;
          } else {
            collectionNodes.splice(i, 1);
          }
        }
      }
      return collectionNodes;
    };
    DOMNode2.prototype.ignoreTableTag = function(element) {
      return !(TABLE_BLOCK_TAGS.indexOf(element.tagName.toLocaleLowerCase()) >= 0);
    };
    return DOMNode2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/lists.js
var Lists = (
  /** @class */
  function() {
    function Lists2(parent) {
      this.parent = parent;
      this.domNode = this.parent.domNode;
      this.addEventListener();
    }
    Lists2.prototype.addEventListener = function() {
      this.parent.observer.on(LIST_TYPE, this.applyListsHandler, this);
      this.parent.observer.on(KEY_UP_HANDLER, this.onKeyUp, this);
      this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);
      this.parent.observer.on(SPACE_ACTION, this.spaceKeyAction, this);
    };
    Lists2.prototype.testList = function(elem) {
      var olListRegex = [
        /^[\d]+[.]+$/,
        /^(?=[MDCLXVI])M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})[.]$/gi,
        /^[a-zA-Z][.]+$/
      ];
      var elementStart = !isNullOrUndefined(elem) ? elem.innerText.trim().split(".")[0] + "." : null;
      if (!isNullOrUndefined(elementStart)) {
        for (var i = 0; i < olListRegex.length; i++) {
          if (olListRegex[i].test(elementStart)) {
            return true;
          }
        }
      }
      return false;
    };
    Lists2.prototype.testCurrentList = function(range) {
      var olListStartRegex = [/^[1]+[.]+$/, /^[i]+[.]+$/, /^[a]+[.]+$/];
      if (!isNullOrUndefined(range.startContainer.textContent.slice(0, range.startOffset))) {
        var currentContent = range.startContainer.textContent.replace(/\u200B/g, "").slice(0, range.startOffset).trim();
        for (var i = 0; i < olListStartRegex.length; i++) {
          if (olListStartRegex[i].test(currentContent) && currentContent.length === 2) {
            return true;
          }
        }
      }
      return false;
    };
    Lists2.prototype.spaceList = function(e) {
      var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);
      var startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);
      var endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);
      var preElement = startNode.previousElementSibling;
      var nextElement = startNode.nextElementSibling;
      var preElemULStart = !isNullOrUndefined(preElement) ? preElement.innerText.trim().substring(0, 1) : null;
      var nextElemULStart = !isNullOrUndefined(nextElement) ? nextElement.innerText.trim().substring(0, 1) : null;
      var startElementOLTest = this.testCurrentList(range);
      var preElementOLTest = this.testList(preElement);
      var nextElementOLTest = this.testList(nextElement);
      if (!preElementOLTest && !nextElementOLTest && preElemULStart !== "*" && nextElemULStart !== "*") {
        if (startElementOLTest) {
          range.startContainer.textContent = range.startContainer.textContent.slice(range.startOffset, range.startContainer.textContent.length);
          this.applyListsHandler({ subCommand: "OL", callBack: e.callBack });
          e.event.preventDefault();
        } else if (range.startContainer.textContent.replace(/\u200B/g, "").slice(0, range.startOffset).trim() === "*" || range.startContainer.textContent.replace(/\u200B/g, "").slice(0, range.startOffset).trim() === "-") {
          range.startContainer.textContent = range.startContainer.textContent.slice(range.startOffset, range.startContainer.textContent.length);
          this.applyListsHandler({ subCommand: "UL", callBack: e.callBack });
          e.event.preventDefault();
        }
      }
    };
    Lists2.prototype.enterList = function(e) {
      var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      var startNode = range.startContainer.nodeName === "LI" ? range.startContainer : range.startContainer.parentElement.closest("LI");
      var endNode = range.endContainer.nodeName === "LI" ? range.endContainer : range.endContainer.parentElement.closest("LI");
      var hasMediaElem = false;
      if (!isNullOrUndefined(startNode)) {
        var videoElemList = startNode.querySelectorAll(".e-video-clickelem");
        var embedVideoElem = videoElemList.length > 0 && videoElemList[0].childNodes[0].nodeName === "IFRAME";
        hasMediaElem = startNode.querySelectorAll("IMG").length > 0 || startNode.querySelectorAll("AUDIO").length > 0 || startNode.querySelectorAll("VIDEO").length > 0 || embedVideoElem;
      }
      if (!isNullOrUndefined(startNode) && !isNullOrUndefined(endNode) && startNode === endNode && startNode.tagName === "LI" && startNode.textContent.trim() === "" && !hasMediaElem) {
        if (startNode.innerHTML.indexOf("&nbsp;") >= 0) {
          return;
        }
        if (startNode.textContent.charCodeAt(0) === 65279) {
          startNode.textContent = "";
        }
        var startNodeParent = startNode.parentElement;
        if (isNullOrUndefined(startNodeParent.parentElement.closest("UL")) && isNullOrUndefined(startNodeParent.parentElement.closest("OL"))) {
          if (!isNullOrUndefined(startNode.nextElementSibling)) {
            var nearBlockNode = this.parent.domNode.blockParentNode(startNode);
            this.parent.nodeCutter.GetSpliceNode(range, nearBlockNode);
          }
          var insertTag = void 0;
          if (e.enterAction === "DIV") {
            insertTag = createElement("div");
            insertTag.innerHTML = "<br>";
          } else if (e.enterAction === "P") {
            insertTag = createElement("p");
            insertTag.innerHTML = "<br>";
          } else {
            insertTag = createElement("br");
          }
          this.parent.domNode.insertAfter(insertTag, startNodeParent);
          e.event.preventDefault();
          this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, insertTag, 0);
          if (startNodeParent.textContent === "" && startNodeParent.querySelectorAll("audio,video").length === 0) {
            detach(startNodeParent);
          } else {
            detach(startNode);
          }
        }
      }
    };
    Lists2.prototype.backspaceList = function(e) {
      var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      var startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);
      var endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);
      startNode = startNode.nodeName === "BR" ? startNode.parentElement : startNode;
      endNode = endNode.nodeName === "BR" ? endNode.parentElement : endNode;
      if (startNode === endNode && !isNullOrUndefined(closest(startNode, "li")) && (startNode.textContent.trim() === "" && startNode.textContent.charCodeAt(0) === 65279 || startNode.textContent.length === 1 && startNode.textContent.charCodeAt(0) === 8203)) {
        startNode.textContent = "";
      }
      if (startNode === endNode && startNode.tagName === "LI" && startNode.textContent.length === 0 && isNullOrUndefined(startNode.previousElementSibling)) {
        startNode.removeAttribute("style");
      }
      if (startNode === endNode && startNode.textContent === "") {
        if (startNode.parentElement.tagName === "LI" && endNode.parentElement.tagName === "LI") {
          detach(startNode);
        } else if (startNode.closest("ul") || startNode.closest("ol")) {
          var parentList = !isNullOrUndefined(startNode.closest("ul")) ? startNode.closest("ul") : startNode.closest("ol");
          if (parentList.firstElementChild === startNode && !isNullOrUndefined(parentList.children[1]) && (parentList.children[1].tagName === "OL" || parentList.children[1].tagName === "UL")) {
            if (parentList.tagName === parentList.children[1].tagName) {
              while (parentList.children[1].lastChild) {
                this.parent.domNode.insertAfter(parentList.children[1].lastChild, parentList.children[1]);
              }
              detach(parentList.children[1]);
            } else {
              parentList.parentElement.insertBefore(parentList.children[1], parentList);
            }
          }
        }
      } else if (!isNullOrUndefined(startNode.firstChild) && startNode.firstChild.nodeName === "BR" && (!isNullOrUndefined(startNode.childNodes[1]) && (startNode.childNodes[1].nodeName === "UL" || startNode.childNodes[1].nodeName === "OL"))) {
        var parentList = !isNullOrUndefined(startNode.closest("ul")) ? startNode.closest("ul") : startNode.closest("ol");
        if (parentList.tagName === startNode.childNodes[1].nodeName) {
          while (startNode.childNodes[1].lastChild) {
            this.parent.domNode.insertAfter(startNode.children[1].lastChild, startNode);
          }
          detach(startNode.childNodes[1]);
        } else {
          parentList.parentElement.insertBefore(startNode.children[1], parentList);
        }
      }
      this.removeList(range, e);
      this.firstListBackSpace(range, e);
    };
    Lists2.prototype.removeList = function(range, e) {
      var startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);
      var endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);
      startNode = startNode.nodeName === "BR" ? startNode.parentElement : startNode;
      endNode = endNode.nodeName === "BR" ? endNode.parentElement : endNode;
      startNode = startNode.nodeName !== "LI" && !isNullOrUndefined(startNode.closest("LI")) ? startNode.closest("LI") : startNode;
      endNode = endNode.nodeName !== "LI" && !isNullOrUndefined(endNode.closest("LI")) ? endNode.closest("LI") : endNode;
      if ((range.commonAncestorContainer.nodeName === "OL" || range.commonAncestorContainer.nodeName === "UL" || range.commonAncestorContainer.nodeName === "LI") && isNullOrUndefined(endNode.nextElementSibling) && endNode.textContent.length === range.endOffset && isNullOrUndefined(startNode.previousElementSibling) && range.startOffset === 0 || Browser.userAgent.indexOf("Firefox") !== -1 && range.startContainer === range.endContainer && range.startContainer === this.parent.editableElement && range.startOffset === 0 && range.endOffset === 1) {
        if (Browser.userAgent.indexOf("Firefox") !== -1) {
          detach(range.commonAncestorContainer.childNodes[0]);
        } else if (range.commonAncestorContainer.nodeName === "LI") {
          detach(range.commonAncestorContainer.parentElement);
        } else {
          detach(range.commonAncestorContainer);
        }
        e.event.preventDefault();
      }
    };
    Lists2.prototype.onKeyUp = function() {
      if (!isNullOrUndefined(this.commonLIParent) && !isNullOrUndefined(this.commonLIParent.querySelector(".removeList"))) {
        var currentLIElem = this.commonLIParent.querySelector(".removeList");
        while (!isNullOrUndefined(currentLIElem.firstChild)) {
          this.parent.domNode.insertAfter(currentLIElem.firstChild, currentLIElem);
        }
        detach(currentLIElem);
      }
    };
    Lists2.prototype.firstListBackSpace = function(range, _e) {
      var startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);
      if (!isNullOrUndefined(startNode.closest("OL"))) {
        this.commonLIParent = startNode.closest("OL");
      } else if (!isNullOrUndefined(startNode.closest("UL"))) {
        this.commonLIParent = startNode.closest("UL");
      }
      if (startNode.nodeName === "LI" && range.startOffset === 0 && range.endOffset === 0 && isNullOrUndefined(startNode.previousSibling) && !isNullOrUndefined(this.commonLIParent) && isNullOrUndefined(this.commonLIParent.previousSibling) && (isNullOrUndefined(this.commonLIParent.parentElement.closest("OL")) && isNullOrUndefined(this.commonLIParent.parentElement.closest("UL")) && isNullOrUndefined(this.commonLIParent.parentElement.closest("LI")))) {
        var currentElem = createElement("P");
        currentElem.innerHTML = "&#8203;";
        startNode.classList.add("removeList");
        this.commonLIParent.parentElement.insertBefore(currentElem, this.commonLIParent);
      }
    };
    Lists2.prototype.keyDownHandler = function(e) {
      if (e.event.which === 13) {
        this.enterList(e);
      }
      if (e.event.which === 32) {
        this.spaceList(e);
      }
      if (e.event.which === 8) {
        this.backspaceList(e);
      }
      if (e.event.which === 46 && e.event.action === "delete") {
        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
        var commonAncestor = range.commonAncestorContainer;
        var startEle = range.startContainer;
        var endEle = range.endContainer;
        var startNode = startEle.nodeType === 3 ? startEle.parentElement : startEle;
        var endNode = endEle.nodeType === 3 ? endEle.parentElement : endEle;
        if ((commonAncestor.nodeName === "UL" || commonAncestor.nodeName === "OL") && startNode !== endNode && (!isNullOrUndefined(closest(startNode, "ul")) || !isNullOrUndefined(closest(startNode, "ol"))) && (!isNullOrUndefined(closest(endNode, "ul")) || !isNullOrUndefined(closest(endNode, "ol"))) && commonAncestor.lastElementChild === closest(endNode, "li") && !range.collapsed) {
          detach(commonAncestor);
        }
        this.removeList(range, e);
      }
      if (e.event.which === 9) {
        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
        if (!(e.event.action && e.event.action === "indent")) {
          this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);
        }
        var blockNodes = void 0;
        var startOffset = range.startOffset;
        var endOffset = range.endOffset;
        var startNode = this.parent.domNode.getSelectedNode(range.startContainer, range.startOffset);
        var endNode = this.parent.domNode.getSelectedNode(range.endContainer, range.endOffset);
        if (startNode === endNode && (startNode.nodeName === "BR" || startNode.nodeName === "#text") && IGNORE_BLOCK_TAGS.indexOf(startNode.parentNode.tagName.toLocaleLowerCase()) >= 0) {
          return;
        } else {
          if (!(e.event.action && e.event.action === "indent")) {
            this.domNode.setMarker(this.saveSelection);
          }
          blockNodes = this.domNode.blockNodes();
        }
        var nodes = [];
        var isNested = true;
        for (var i = 0; i < blockNodes.length; i++) {
          if (blockNodes[i].parentNode.tagName === "LI") {
            nodes.push(blockNodes[i].parentNode);
          } else if (blockNodes[i].tagName === "LI" && blockNodes[i].childNodes[0].tagName !== "P" && (blockNodes[i].childNodes[0].tagName !== "OL" && blockNodes[i].childNodes[0].tagName !== "UL")) {
            nodes.push(blockNodes[i]);
          }
        }
        if (nodes.length > 1 || nodes.length && (startOffset === 0 && endOffset === 0 || e.ignoreDefault)) {
          e.event.preventDefault();
          e.event.stopPropagation();
          this.currentAction = this.getAction(nodes[0]);
          if (e.event.shiftKey) {
            this.revertList(nodes, e);
            this.revertClean();
          } else {
            isNested = this.nestedList(nodes);
          }
          if (isNested) {
            this.cleanNode();
            this.parent.editableElement.focus();
          }
          if (!(e.event.action && e.event.action === "indent")) {
            this.saveSelection = this.domNode.saveMarker(this.saveSelection);
            this.saveSelection.restore();
            if (e.callBack) {
              e.callBack({
                requestType: this.currentAction,
                editorMode: "HTML",
                range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
                elements: this.parent.domNode.blockNodes(),
                event: e.event
              });
            }
          }
        } else {
          if (!(e.event.action && e.event.action === "indent")) {
            if (e.event && e.event.shiftKey && e.event.key === "Tab") {
              e.event.action = "tab";
            }
            this.saveSelection = this.domNode.saveMarker(this.saveSelection, e.event.action);
            this.saveSelection.restore();
          }
        }
      } else {
        switch (e.event.action) {
          case "ordered-list":
            this.applyListsHandler({ subCommand: "OL", callBack: e.callBack });
            e.event.preventDefault();
            break;
          case "unordered-list":
            this.applyListsHandler({ subCommand: "UL", callBack: e.callBack });
            e.event.preventDefault();
            break;
        }
      }
    };
    Lists2.prototype.spaceKeyAction = function(e) {
      if (e.event.which === 32) {
        this.spaceList(e);
      }
    };
    Lists2.prototype.getAction = function(element) {
      var parentNode = element.parentNode;
      return parentNode.nodeName === "OL" ? "OL" : "UL";
    };
    Lists2.prototype.revertClean = function() {
      var collectionNodes = this.parent.editableElement.querySelectorAll("ul, ol");
      for (var i = 0; i < collectionNodes.length; i++) {
        var listNodes = collectionNodes[i].querySelectorAll("ul, ol");
        if (listNodes.length > 0) {
          for (var j = 0; j < listNodes.length; j++) {
            var prevSibling = listNodes[j].previousSibling;
            if (prevSibling && prevSibling.tagName === "LI") {
              prevSibling.appendChild(listNodes[j]);
            }
          }
        }
      }
    };
    Lists2.prototype.noPreviousElement = function(elements) {
      var firstNode;
      var firstNodeOL;
      var siblingListOL = elements.querySelectorAll("ol, ul");
      var siblingListLI = elements.querySelectorAll("li");
      var siblingListLIFirst = this.domNode.contents(siblingListLI[0])[0];
      if (siblingListLI.length > 0 && (siblingListLIFirst.nodeName === "OL" || siblingListLIFirst.nodeName === "UL")) {
        firstNode = siblingListLI[0];
      } else {
        firstNodeOL = siblingListOL[0];
      }
      if (firstNode) {
        for (var h = this.domNode.contents(elements)[0]; h && !this.domNode.isList(h); null) {
          var nextSibling = h.nextSibling;
          prepend([h], firstNode);
          setStyleAttribute(elements, { "list-style-type": "none" });
          setStyleAttribute(firstNode, { "list-style-type": "" });
          h = nextSibling;
        }
      } else if (firstNodeOL) {
        var nestedElement = createElement("li");
        prepend([nestedElement], firstNodeOL);
        for (var h = this.domNode.contents(elements)[0]; h && !this.domNode.isList(h); null) {
          var nextSibling = h.nextSibling;
          nestedElement.appendChild(h);
          h = nextSibling;
        }
        prepend([firstNodeOL], elements.parentNode);
        detach(elements);
        var nestedElementLI = createElement("li", { styles: "list-style-type: none;" });
        prepend([nestedElementLI], firstNodeOL.parentNode);
        append([firstNodeOL], nestedElementLI);
      } else {
        var nestedElementLI = createElement("li", { styles: "list-style-type: none;" });
        prepend([nestedElementLI], elements.parentNode);
        var nestedElement = createElement(elements.parentNode.tagName);
        prepend([nestedElement], nestedElementLI);
        append([elements], nestedElement);
      }
    };
    Lists2.prototype.nestedList = function(elements) {
      var isNested = false;
      for (var i = 0; i < elements.length; i++) {
        var prevSibling = this.domNode.getPreviousNode(elements[i]);
        if (prevSibling) {
          isNested = true;
          var firstNode = void 0;
          var firstNodeLI = void 0;
          var siblingListOL = elements[i].querySelectorAll("ol, ul");
          var siblingListLI = elements[i].querySelectorAll("li");
          var siblingListLIFirst = this.domNode.contents(siblingListLI[0])[0];
          if (siblingListLI.length > 0 && (siblingListLIFirst.nodeName === "OL" || siblingListLIFirst.nodeName === "UL")) {
            firstNodeLI = siblingListLI[0];
          } else {
            firstNode = siblingListOL[0];
          }
          if (firstNode) {
            var nestedElement = createElement("li");
            prepend([nestedElement], firstNode);
            for (var h = this.domNode.contents(elements[i])[0]; h && !this.domNode.isList(h); null) {
              var nextSibling = h.nextSibling;
              nestedElement.appendChild(h);
              h = nextSibling;
            }
            append([firstNode], prevSibling);
            detach(elements[i]);
          } else if (firstNodeLI) {
            if (prevSibling.tagName === "LI") {
              for (var h = this.domNode.contents(elements[i])[0]; h && !this.domNode.isList(h); null) {
                var nextSibling = h.nextSibling;
                prepend([h], firstNodeLI);
                setStyleAttribute(elements[i], { "list-style-type": "none" });
                setStyleAttribute(firstNodeLI, { "list-style-type": "" });
                h = nextSibling;
              }
              append([firstNodeLI.parentNode], prevSibling);
              detach(elements[i]);
            }
          } else {
            if (prevSibling.tagName === "LI") {
              var nestedElement = createElement(elements[i].parentNode.tagName);
              append([nestedElement], prevSibling);
              append([elements[i]], nestedElement);
            } else if (prevSibling.tagName === "OL" || prevSibling.tagName === "UL") {
              append([elements[i]], prevSibling);
            }
          }
        } else {
          var element = elements[i];
          isNested = true;
          this.noPreviousElement(element);
        }
      }
      return isNested;
    };
    Lists2.prototype.applyListsHandler = function(e) {
      var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      if (Browser.userAgent.indexOf("Firefox") !== -1 && range.startContainer === range.endContainer && range.startContainer === this.parent.editableElement) {
        var startChildNodes = range.startContainer.childNodes;
        var startNode = startChildNodes[range.startOffset > 0 ? range.startOffset - 1 : range.startOffset] || range.startContainer;
        var endNode = range.endContainer.childNodes[range.endOffset > 0 ? range.endOffset - 1 : range.endOffset] || range.endContainer;
        var lastSelectionNode = endNode.lastChild.nodeName === "BR" ? isNullOrUndefined(endNode.lastChild.previousSibling) ? endNode : endNode.lastChild.previousSibling : endNode.lastChild;
        while (!isNullOrUndefined(lastSelectionNode) && lastSelectionNode.nodeName !== "#text" && lastSelectionNode.nodeName !== "IMG" && lastSelectionNode.nodeName !== "BR" && lastSelectionNode.nodeName !== "HR") {
          lastSelectionNode = lastSelectionNode.lastChild;
        }
        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startNode, lastSelectionNode, 0, lastSelectionNode.textContent.length);
        range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      }
      if (range.startContainer === range.endContainer && range.startContainer === this.parent.editableElement && range.startOffset === range.endOffset && range.startOffset === 0 && this.parent.editableElement.textContent.length === 0 && (this.parent.editableElement.childNodes[0].nodeName !== "TABLE" && this.parent.editableElement.childNodes[0].nodeName !== "IMG")) {
        var focusNode = range.startContainer.childNodes[0];
        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, focusNode, focusNode, 0, 0);
        range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      }
      this.saveSelection = this.parent.nodeSelection.save(range, this.parent.currentDocument);
      this.currentAction = e.subCommand;
      this.currentAction = e.subCommand = this.currentAction === "NumberFormatList" ? "OL" : this.currentAction === "BulletFormatList" ? "UL" : this.currentAction;
      this.domNode.setMarker(this.saveSelection);
      var listsNodes = this.domNode.blockNodes();
      if (e.enterAction === "BR") {
        this.setSelectionBRConfig();
        var allSelectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument);
        var selectedNodes = this.parent.nodeSelection.getSelectionNodes(allSelectedNode);
        var currentFormatNodes = [];
        if (selectedNodes.length === 0) {
          selectedNodes.push(listsNodes[0]);
        }
        for (var i = 0; i < selectedNodes.length; i++) {
          var currentNode = selectedNodes[i];
          var previousCurrentNode = void 0;
          while (!this.parent.domNode.isBlockNode(currentNode) && currentNode !== this.parent.editableElement) {
            previousCurrentNode = currentNode;
            currentNode = currentNode.parentElement;
          }
          if (this.parent.domNode.isBlockNode(currentNode) && currentNode === this.parent.editableElement) {
            currentFormatNodes.push(previousCurrentNode);
          }
        }
        for (var i = 0; i < currentFormatNodes.length; i++) {
          if (!this.parent.domNode.isBlockNode(currentFormatNodes[i])) {
            var currentNode = currentFormatNodes[i];
            var previousNode = currentNode;
            while (currentNode === this.parent.editableElement) {
              previousNode = currentNode;
              currentNode = currentNode.parentElement;
            }
            var tempElem = void 0;
            if (this.parent.domNode.isBlockNode(previousNode.parentElement) && previousNode.parentElement === this.parent.editableElement) {
              tempElem = createElement("p");
              previousNode.parentElement.insertBefore(tempElem, previousNode);
              tempElem.appendChild(previousNode);
            } else {
              tempElem = previousNode;
            }
            var preNode = tempElem.previousSibling;
            while (!isNullOrUndefined(preNode) && preNode.nodeName !== "BR" && !this.parent.domNode.isBlockNode(preNode)) {
              tempElem.firstChild.parentElement.insertBefore(preNode, tempElem.firstChild);
              preNode = tempElem.previousSibling;
            }
            if (!isNullOrUndefined(preNode) && preNode.nodeName === "BR") {
              detach(preNode);
            }
            var postNode = tempElem.nextSibling;
            while (!isNullOrUndefined(postNode) && postNode.nodeName !== "BR" && !this.parent.domNode.isBlockNode(postNode)) {
              tempElem.appendChild(postNode);
              postNode = tempElem.nextSibling;
            }
            if (!isNullOrUndefined(postNode) && postNode.nodeName === "BR") {
              detach(postNode);
            }
          }
        }
        this.setSelectionBRConfig();
        listsNodes = this.parent.domNode.blockNodes();
      }
      for (var i = 0; i < listsNodes.length; i++) {
        if (listsNodes[i].tagName === "TABLE" && !range.collapsed) {
          listsNodes.splice(i, 1);
        }
        if (listsNodes.length > 0 && listsNodes[i].tagName !== "LI" && "LI" === listsNodes[i].parentNode.tagName) {
          listsNodes[i] = listsNodes[i].parentNode;
        }
      }
      this.applyLists(listsNodes, this.currentAction, e.selector, e.item, e);
      if (e.callBack) {
        e.callBack({
          requestType: this.currentAction,
          event: e.event,
          editorMode: "HTML",
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.domNode.blockNodes()
        });
      }
    };
    Lists2.prototype.setSelectionBRConfig = function() {
      var startElem = this.parent.editableElement.querySelector("." + markerClassName.startSelection);
      var endElem = this.parent.editableElement.querySelector("." + markerClassName.endSelection);
      if (isNullOrUndefined(endElem)) {
        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, startElem, 0);
      } else {
        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startElem, endElem, 0, 0);
      }
    };
    Lists2.prototype.applyLists = function(elements, type, selector, item, e) {
      var isReverse = true;
      if (this.isRevert(elements, type, item) && isNullOrUndefined(item)) {
        this.revertList(elements, e);
        this.removeEmptyListElements();
      } else {
        this.checkLists(elements, type, item);
        for (var i = 0; i < elements.length; i++) {
          if (!isNullOrUndefined(item) && !isNullOrUndefined(item.listStyle)) {
            if (item.listStyle === "listImage") {
              setStyleAttribute(elements[i], { "list-style-image": item.listImage });
            } else {
              setStyleAttribute(elements[i], { "list-style-image": "none" });
              setStyleAttribute(elements[i], { "list-style-type": item.listStyle.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase() });
            }
          }
          if (elements[i].getAttribute("contenteditable") === "true" && elements[i].childNodes.length === 1 && elements[i].childNodes[0].nodeName === "TABLE") {
            var listEle = document.createElement(type);
            listEle.innerHTML = "<li><br/></li>";
            elements[i].appendChild(listEle);
          } else if ("LI" !== elements[i].tagName && isNullOrUndefined(item)) {
            isReverse = false;
            var elemAtt = elements[i].tagName === "IMG" ? "" : this.domNode.attributes(elements[i]);
            var openTag = "<" + type + ">";
            var closeTag = "</" + type + ">";
            var newTag = "li" + elemAtt;
            var replaceHTML = elements[i].tagName.toLowerCase() === DEFAULT_TAG ? elements[i].innerHTML : elements[i].outerHTML;
            var innerHTML = this.domNode.createTagString(newTag, null, replaceHTML);
            var collectionString = openTag + innerHTML + closeTag;
            this.domNode.replaceWith(elements[i], collectionString);
          } else if (!isNullOrUndefined(item) && "LI" !== elements[i].tagName) {
            isReverse = false;
            var elemAtt = elements[i].tagName === "IMG" ? "" : this.domNode.attributes(elements[i]);
            var openTag = "<" + type + elemAtt + ">";
            var closeTag = "</" + type + ">";
            var newTag = "li";
            var replaceHTML = elements[i].tagName.toLowerCase() === DEFAULT_TAG ? elements[i].innerHTML : elements[i].outerHTML;
            var innerHTML = this.domNode.createTagString(newTag, null, replaceHTML);
            var collectionString = openTag + innerHTML + closeTag;
            this.domNode.replaceWith(elements[i], collectionString);
          }
        }
      }
      this.cleanNode();
      this.parent.editableElement.focus();
      if (isIDevice2()) {
        setEditFrameFocus(this.parent.editableElement, selector);
      }
      this.saveSelection = this.domNode.saveMarker(this.saveSelection);
      this.saveSelection.restore();
    };
    Lists2.prototype.removeEmptyListElements = function() {
      var listElem = this.parent.editableElement.querySelectorAll("ol, ul");
      for (var i = 0; i < listElem.length; i++) {
        if (listElem[i].textContent.trim() === "") {
          detach(listElem[i]);
        }
      }
    };
    Lists2.prototype.isRevert = function(nodes, tagName, item) {
      var isRevert = true;
      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].tagName !== "LI") {
          return false;
        }
        if (nodes[i].parentNode.tagName !== tagName || isNullOrUndefined(item) && nodes[i].parentNode.style.listStyleType !== "") {
          isRevert = false;
        }
      }
      return isRevert;
    };
    Lists2.prototype.checkLists = function(nodes, tagName, item) {
      var nodesTemp = [];
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i].parentNode;
        if (!isNullOrUndefined(item) && "LI" === nodes[i].tagName && !isNullOrUndefined(item.listStyle)) {
          if (item.listStyle === "listImage") {
            setStyleAttribute(node, { "list-style-image": item.listImage });
          } else {
            setStyleAttribute(node, { "list-style-image": "none" });
            setStyleAttribute(node, { "list-style-type": item.listStyle.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase() });
          }
        }
        if (nodes[i].tagName === "LI" && node.tagName !== tagName && nodesTemp.indexOf(node) < 0 || nodes[i].tagName === "LI" && node.tagName === tagName && nodesTemp.indexOf(node) < 0 && item !== null) {
          nodesTemp.push(node);
        }
        if (isNullOrUndefined(item) && (node.tagName === tagName || (node.tagName === "UL" || node.tagName === "OL") && node.hasAttribute("style"))) {
          if (node.hasAttribute("style")) {
            node.removeAttribute("style");
          }
        }
      }
      for (var j = nodesTemp.length - 1; j >= 0; j--) {
        var h = nodesTemp[j];
        var replace = "<" + tagName.toLowerCase() + " " + this.domNode.attributes(h) + ">" + h.innerHTML + "</" + tagName.toLowerCase() + ">";
        this.domNode.replaceWith(nodesTemp[j], replace);
      }
    };
    Lists2.prototype.cleanNode = function() {
      var liParents = this.parent.editableElement.querySelectorAll("ol + ol, ul + ul");
      for (var c = 0; c < liParents.length; c++) {
        var node = liParents[c];
        if (this.domNode.isList(node.previousElementSibling) && this.domNode.openTagString(node) === this.domNode.openTagString(node.previousElementSibling)) {
          var contentNodes = this.domNode.contents(node);
          for (var f = 0; f < contentNodes.length; f++) {
            node.previousElementSibling.appendChild(contentNodes[f]);
          }
          node.parentNode.removeChild(node);
        } else if (!isNullOrUndefined(node.getAttribute("level"))) {
          if (node.tagName === node.previousElementSibling.tagName) {
            node.previousElementSibling.lastChild.append(node);
          }
        }
      }
    };
    Lists2.prototype.findUnSelected = function(temp, elements) {
      temp = temp.slice().reverse();
      if (temp.length > 0) {
        var rightIndent = [];
        var indentElements = [];
        var lastElement = elements[elements.length - 1];
        var lastElementChild = [];
        var childElements = [];
        lastElementChild = lastElement.childNodes;
        for (var z = 0; z < lastElementChild.length; z++) {
          if (lastElementChild[z].tagName === "OL" || lastElementChild[z].tagName === "UL") {
            var childLI = lastElementChild[z].querySelectorAll("li");
            if (childLI.length > 0) {
              for (var y = 0; y < childLI.length; y++) {
                childElements.push(childLI[y]);
              }
            }
          }
        }
        for (var i = 0; i < childElements.length; i++) {
          var count2 = 0;
          for (var j = 0; j < temp.length; j++) {
            if (!childElements[i].contains(temp[j])) {
              count2 = count2 + 1;
            }
          }
          if (count2 === temp.length) {
            indentElements.push(childElements[i]);
          }
        }
        if (indentElements.length > 0) {
          for (var x = 0; x < indentElements.length; x++) {
            if (this.domNode.contents(indentElements[x])[0].nodeName !== "OL" && this.domNode.contents(indentElements[x])[0].nodeName !== "UL") {
              rightIndent.push(indentElements[x]);
            }
          }
        }
        if (rightIndent.length > 0) {
          this.nestedList(rightIndent);
        }
      }
    };
    Lists2.prototype.revertList = function(elements, e) {
      var temp = [];
      for (var i = elements.length - 1; i >= 0; i--) {
        for (var j = i - 1; j >= 0; j--) {
          if (elements[j].contains(elements[i]) || elements[j] === elements[i]) {
            temp.push(elements[i]);
            elements.splice(i, 1);
            break;
          }
        }
      }
      this.findUnSelected(temp, elements);
      var viewNode = [];
      for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        if (this.domNode.contents(element)[0].nodeType === 3 && this.domNode.contents(element)[0].textContent.trim().length === 0) {
          detach(this.domNode.contents(element)[0]);
        }
        var parentNode = elements[i].parentNode;
        var className = element.getAttribute("class");
        if (temp.length === 0) {
          var siblingList = elements[i].querySelectorAll("ul, ol");
          var firstNode = siblingList[0];
          if (firstNode) {
            var child = firstNode.querySelectorAll("li");
            if (child) {
              var nestedElement = createElement(firstNode.tagName);
              append([nestedElement], firstNode.parentNode);
              var nestedElementLI = createElement("li", { styles: "list-style-type: none;" });
              append([nestedElementLI], nestedElement);
              append([firstNode], nestedElementLI);
            }
          }
        }
        if (element.parentNode.insertBefore(this.closeTag(parentNode.tagName), element), "LI" === parentNode.parentNode.tagName || "OL" === parentNode.parentNode.tagName || "UL" === parentNode.parentNode.tagName) {
          element.parentNode.insertBefore(this.closeTag("LI"), element);
        } else {
          var classAttr = "";
          if (className) {
            classAttr += ' class="' + className + '"';
          }
          if (DEFAULT_TAG && 0 === element.querySelectorAll(BLOCK_TAGS.join(", ")).length) {
            var wrapperclass = isNullOrUndefined(className) ? ' class="e-rte-wrap-inner"' : ' class="' + className + ' e-rte-wrap-inner"';
            var wrapper = "<" + DEFAULT_TAG + wrapperclass + this.domNode.attributes(parentNode) + "></" + DEFAULT_TAG + ">";
            if (e.enterAction !== "BR") {
              this.domNode.wrapInner(element, this.domNode.parseHTMLFragment(wrapper));
            }
          } else if (this.domNode.contents(element)[0].nodeType === 3) {
            var replace = this.domNode.createTagString(DEFAULT_TAG, parentNode, this.parent.domNode.encode(this.domNode.contents(element)[0].textContent));
            this.domNode.replaceWith(this.domNode.contents(element)[0], replace);
          } else if (this.domNode.contents(element)[0].classList.contains(markerClassName.startSelection) || this.domNode.contents(element)[0].classList.contains(markerClassName.endSelection)) {
            var replace = this.domNode.createTagString(DEFAULT_TAG, parentNode, this.domNode.contents(element)[0].outerHTML);
            this.domNode.replaceWith(this.domNode.contents(element)[0], replace);
          } else {
            var childNode = element.firstChild;
            className = childNode.getAttribute("class");
            attributes(childNode, this.domNode.rawAttributes(parentNode));
            if (className && childNode.getAttribute("class")) {
              attributes(childNode, { "class": className + " " + childNode.getAttribute("class") });
            }
          }
          append([this.openTag("LI")], element);
          prepend([this.closeTag("LI")], element);
        }
        this.domNode.insertAfter(this.openTag(parentNode.tagName), element);
        if (parentNode.parentNode.tagName === "LI") {
          parentNode = parentNode.parentNode.parentNode;
        }
        if (viewNode.indexOf(parentNode) < 0) {
          viewNode.push(parentNode);
        }
      }
      for (var i = 0; i < viewNode.length; i++) {
        var node = viewNode[i];
        var nodeInnerHtml = node.innerHTML;
        var closeTag = /<span class="e-rte-list-close-([a-z]*)"><\/span>/g;
        var openTag = /<span class="e-rte-list-open-([a-z]*)"><\/span>/g;
        nodeInnerHtml = nodeInnerHtml.replace(closeTag, "</$1>");
        nodeInnerHtml = nodeInnerHtml.replace(openTag, "<$1 " + this.domNode.attributes(node) + ">");
        this.domNode.replaceWith(node, this.domNode.openTagString(node) + nodeInnerHtml.trim() + this.domNode.closeTagString(node));
      }
      var emptyUl = this.parent.editableElement.querySelectorAll("ul:empty, ol:empty");
      for (var i = 0; i < emptyUl.length; i++) {
        detach(emptyUl[i]);
      }
      var emptyLi = this.parent.editableElement.querySelectorAll("li:empty");
      for (var i = 0; i < emptyLi.length; i++) {
        detach(emptyLi[i]);
      }
    };
    Lists2.prototype.openTag = function(type) {
      return this.domNode.parseHTMLFragment('<span class="e-rte-list-open-' + type.toLowerCase() + '"></span>');
    };
    Lists2.prototype.closeTag = function(type) {
      return this.domNode.parseHTMLFragment('<span class="e-rte-list-close-' + type.toLowerCase() + '"></span>');
    };
    return Lists2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/insert-methods.js
var InsertMethods = (
  /** @class */
  function() {
    function InsertMethods2() {
    }
    InsertMethods2.WrapBefore = function(textNode, parentNode, isAfter) {
      parentNode.innerText = textNode.textContent;
      !isAfter ? this.AppendBefore(parentNode, textNode) : this.AppendBefore(parentNode, textNode, true);
      if (textNode.parentNode) {
        textNode.parentNode.removeChild(textNode);
      }
      return parentNode.childNodes[0];
    };
    InsertMethods2.Wrap = function(childNode, parentNode) {
      this.AppendBefore(parentNode, childNode);
      parentNode.appendChild(childNode);
      return childNode;
    };
    InsertMethods2.unwrap = function(node) {
      var parent = node.parentNode;
      var child = [];
      for (; node.firstChild; null) {
        child.push(parent.insertBefore(node.firstChild, node));
      }
      parent.removeChild(node);
      return child;
    };
    InsertMethods2.AppendBefore = function(textNode, parentNode, isAfter) {
      return parentNode.parentNode ? !isAfter ? parentNode.parentNode.insertBefore(textNode, parentNode) : parentNode.parentNode.insertBefore(textNode, parentNode.nextSibling) : parentNode;
    };
    return InsertMethods2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/nodecutter.js
var NodeCutter = (
  /** @class */
  function() {
    function NodeCutter2() {
      this.enterAction = "P";
      this.position = -1;
      this.nodeSelection = new NodeSelection();
    }
    NodeCutter2.prototype.GetSpliceNode = function(range, node) {
      node = this.SplitNode(range, node, true);
      node = this.SplitNode(range, node, false);
      return node;
    };
    NodeCutter2.prototype.SplitNode = function(range, node, isCollapsed) {
      if (node) {
        var clone = range.cloneRange();
        var parent_1 = node.parentNode;
        var index = this.nodeSelection.getIndex(node);
        clone.collapse(isCollapsed);
        isCollapsed ? clone.setStartBefore(node) : clone.setEndAfter(node);
        var fragment = clone.extractContents();
        if (isCollapsed) {
          node = parent_1.childNodes[index];
          fragment = this.spliceEmptyNode(fragment, false);
          if (fragment && fragment.childNodes.length > 0) {
            var isEmpty = fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== "IMG" && this.isRteElm(fragment) && fragment.textContent === "" ? true : false;
            if (!isEmpty) {
              if (node) {
                InsertMethods.AppendBefore(fragment, node);
              } else {
                parent_1.appendChild(fragment);
                var divNode = document.createElement("div");
                divNode.innerHTML = "&#65279;&#65279;";
                node = divNode.firstChild;
                parent_1.appendChild(node);
              }
            }
          }
        } else {
          node = parent_1.childNodes.length > 1 ? parent_1.childNodes[index] : parent_1.childNodes[0];
          fragment = this.spliceEmptyNode(fragment, true);
          if (fragment && fragment.childNodes.length > 0) {
            var isEmpty = fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== "IMG" && this.isRteElm(fragment) && fragment.textContent === "" ? true : false;
            if (!isEmpty) {
              if (node) {
                InsertMethods.AppendBefore(fragment, node, true);
              } else {
                parent_1.appendChild(fragment);
                var divNode = document.createElement("div");
                divNode.innerHTML = "&#65279;&#65279;";
                parent_1.insertBefore(divNode.firstChild, parent_1.firstChild);
                node = parent_1.firstChild;
              }
            }
          }
        }
        return node;
      } else {
        return null;
      }
    };
    NodeCutter2.prototype.isRteElm = function(fragment) {
      var result = true;
      if (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName !== "IMG") {
        var firstChild = fragment.childNodes[0];
        for (var i = 0; !isNullOrUndefined(firstChild.childNodes) && i < firstChild.childNodes.length; i++) {
          if (firstChild.childNodes[i].nodeName === "IMG" || firstChild.childNodes[i].nodeName === "SPAN" && (firstChild.childNodes[i].classList.contains("e-video-wrap") || firstChild.childNodes[i].classList.contains("e-embed-video-wrap") || firstChild.childNodes[i].classList.contains("e-audio-wrap"))) {
            result = false;
          }
        }
      } else {
        result = true;
      }
      return result;
    };
    NodeCutter2.prototype.spliceEmptyNode = function(fragment, isStart) {
      var len;
      if (fragment.childNodes.length === 1 && fragment.childNodes[0].nodeName === "#text" && fragment.childNodes[0].textContent === "" || fragment.textContent === "") {
        len = -1;
      } else {
        len = fragment.childNodes.length - 1;
      }
      if (len > -1 && !isStart) {
        this.spliceEmptyNode(fragment.childNodes[len], isStart);
      } else if (len > -1) {
        this.spliceEmptyNode(fragment.childNodes[0], isStart);
      } else if (fragment.nodeType !== 3 && fragment.nodeType !== 11 && fragment.nodeName !== "IMG" && !fragment.classList.contains("e-video-wrap") && !fragment.classList.contains("e-audio-wrap")) {
        fragment.parentNode.removeChild(fragment);
      }
      return fragment;
    };
    NodeCutter2.prototype.GetCursorStart = function(indexes, index, isStart) {
      indexes = isStart ? indexes : indexes.reverse();
      var position = indexes[0];
      for (var num = 0; num < indexes.length && (isStart ? indexes[num] < index : indexes[num] >= index); num++) {
        position = indexes[num];
      }
      return position;
    };
    NodeCutter2.prototype.GetCursorRange = function(docElement, range, node) {
      var cursorRange = docElement.createRange();
      var indexes = [];
      indexes.push(0);
      var str = this.TrimLineBreak(node.data);
      var index = str.indexOf(" ", 0);
      while (index !== -1) {
        if (indexes.indexOf(index) < 0) {
          indexes.push(index);
        }
        if (new RegExp("\\s").test(str[index - 1]) && indexes.indexOf(index - 1) < 0) {
          indexes.push(index - 1);
        }
        if (new RegExp("\\s").test(str[index + 1])) {
          indexes.push(index + 1);
        }
        index = str.indexOf(" ", index + 1);
      }
      indexes.push(str.length);
      if (indexes.indexOf(range.startOffset) >= 0 || (indexes.indexOf(range.startOffset - 1) >= 0 && (range.startOffset !== 1 || range.startOffset === 1 && new RegExp("\\s").test(str[0])) || indexes[indexes.length - 1] - 1 === range.startOffset)) {
        cursorRange = range;
        this.position = 1;
      } else {
        var startOffset = this.GetCursorStart(indexes, range.startOffset, true);
        this.position = range.startOffset - startOffset;
        cursorRange.setStart(range.startContainer, startOffset);
        cursorRange.setEnd(range.startContainer, this.GetCursorStart(indexes, range.startOffset, false));
      }
      return cursorRange;
    };
    NodeCutter2.prototype.GetCursorNode = function(docElement, range, node) {
      return this.GetSpliceNode(this.GetCursorRange(docElement, range, node), node);
    };
    NodeCutter2.prototype.TrimLineBreak = function(line) {
      return line.replace(/(\r\n\t|\n|\r\t)/gm, " ");
    };
    return NodeCutter2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/formats.js
var Formats = (
  /** @class */
  function() {
    function Formats2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    Formats2.prototype.addEventListener = function() {
      this.parent.observer.on(FORMAT_TYPE, this.applyFormats, this);
      this.parent.observer.on(KEY_UP_HANDLER, this.onKeyUp, this);
      this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    };
    Formats2.prototype.getParentNode = function(node) {
      for (; node.parentNode && node.parentNode !== this.parent.editableElement; null) {
        node = node.parentNode;
      }
      return node;
    };
    Formats2.prototype.onKeyUp = function(e) {
      var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      var endCon = range.endContainer;
      var lastChild = endCon.lastChild;
      if (e.event.which === 13 && range.startContainer === endCon && endCon.nodeType !== 3) {
        var pTag = createElement("p");
        pTag.innerHTML = "<br>";
        if (!isNullOrUndefined(lastChild) && lastChild && lastChild.nodeName === "BR" && (lastChild.previousSibling && lastChild.previousSibling.nodeName === "TABLE")) {
          endCon.replaceChild(pTag, lastChild);
          this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, pTag, 0);
        } else {
          var brNode = this.parent.nodeSelection.getSelectionNodeCollectionBr(range)[0];
          if (!isNullOrUndefined(brNode) && brNode.nodeName === "BR" && (brNode.previousSibling && brNode.previousSibling.nodeName === "TABLE")) {
            endCon.replaceChild(pTag, brNode);
            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, pTag, 0);
          }
        }
      }
    };
    Formats2.prototype.onKeyDown = function(e) {
      if (e.event.which === 13) {
        var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
        var startCon = range.startContainer.textContent.length === 0 || range.startContainer.nodeName === "PRE" ? range.startContainer : range.startContainer.parentElement;
        var endCon = range.endContainer.textContent.length === 0 || range.endContainer.nodeName === "PRE" ? range.endContainer : range.endContainer.parentElement;
        var preElem = closest(startCon, "pre");
        var endPreElem = closest(endCon, "pre");
        var liParent = !isNullOrUndefined(preElem) && !isNullOrUndefined(preElem.parentElement) && preElem.parentElement.tagName === "LI";
        if (liParent) {
          return;
        }
        if (isNullOrUndefined(preElem) && !isNullOrUndefined(endPreElem) || !isNullOrUndefined(preElem) && isNullOrUndefined(endPreElem)) {
          e.event.preventDefault();
          this.deleteContent(range);
          this.removeCodeContent(range);
          range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
          this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, endCon, 0);
        }
        if (e.event.which === 13 && !isNullOrUndefined(preElem) && !isNullOrUndefined(endPreElem)) {
          e.event.preventDefault();
          this.deleteContent(range);
          this.removeCodeContent(range);
          range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
          var lastEmpty = range.startContainer.childNodes[range.endOffset];
          var lastBeforeBr = range.startContainer.childNodes[range.endOffset - 1];
          var startParent = range.startContainer;
          if (!isNullOrUndefined(lastEmpty) && !isNullOrUndefined(lastBeforeBr) && isNullOrUndefined(lastEmpty.nextSibling) && lastEmpty.nodeName === "BR" && lastBeforeBr.nodeName === "BR") {
            this.paraFocus(range.startContainer, e.enterAction);
          } else if (startParent.textContent.charCodeAt(0) === 8203 && startParent.textContent.length === 1 || startParent.textContent.length === 0) {
            while (startParent.parentElement.nodeName !== "PRE" && (startParent.textContent.length === 1 || startParent.textContent.length === 0)) {
              startParent = startParent.parentElement;
            }
            if (!isNullOrUndefined(startParent.previousSibling) && startParent.previousSibling.nodeName === "BR" && isNullOrUndefined(startParent.nextSibling)) {
              this.paraFocus(startParent.parentElement);
            } else {
              this.isNotEndCursor(preElem, range);
            }
          } else {
            this.isNotEndCursor(preElem, range);
          }
        }
      }
    };
    Formats2.prototype.removeCodeContent = function(range) {
      var regEx = new RegExp(String.fromCharCode(65279), "g");
      if (!isNullOrUndefined(range.endContainer.textContent.match(regEx))) {
        var pointer = range.endContainer.textContent.charCodeAt(range.endOffset - 1) === 65279 ? range.endOffset - 2 : range.endOffset;
        range.endContainer.textContent = range.endContainer.textContent.replace(regEx, "");
        if (range.endContainer.textContent === "") {
          this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, range.endContainer.parentElement, 0);
        } else {
          this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, range.endContainer, pointer);
        }
      }
    };
    Formats2.prototype.deleteContent = function(range) {
      if (range.startContainer !== range.endContainer || range.startOffset !== range.endOffset) {
        range.deleteContents();
      }
    };
    Formats2.prototype.paraFocus = function(referNode, enterAction) {
      var insertTag;
      if (enterAction === "DIV") {
        insertTag = createElement("div");
        insertTag.innerHTML = "<br>";
      } else if (enterAction === "BR") {
        insertTag = createElement("br");
      } else {
        insertTag = createElement("p");
        insertTag.innerHTML = "<br>";
      }
      this.parent.domNode.insertAfter(insertTag, referNode);
      this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, insertTag, 0);
      detach(referNode.lastChild);
    };
    Formats2.prototype.isNotEndCursor = function(preElem, range) {
      var nodeCutter = new NodeCutter();
      var isEnd = range.startOffset === preElem.lastChild.textContent.length && preElem.lastChild.textContent === range.startContainer.textContent;
      if (preElem.textContent.indexOf(range.startContainer.textContent) === 0 && (range.startOffset === 0 && range.endOffset === 0 || range.startContainer.nodeName === "PRE")) {
        this.insertMarker(preElem, range);
        var brTag = createElement("br");
        preElem.childNodes[range.endOffset].parentElement.insertBefore(brTag, preElem.childNodes[range.endOffset]);
      } else {
        var cloneNode = nodeCutter.SplitNode(range, preElem, true);
        this.insertMarker(preElem, range);
        var previousSib = preElem.previousElementSibling;
        if (previousSib.tagName === "PRE") {
          previousSib.insertAdjacentHTML("beforeend", "<br>" + cloneNode.innerHTML);
          detach(preElem);
        }
      }
      this.setCursorPosition(isEnd, preElem);
    };
    Formats2.prototype.setCursorPosition = function(isEnd, preElem) {
      var isEmpty = false;
      var markerElem = this.parent.editableElement.querySelector(".tempSpan");
      var mrkParentElem = markerElem.parentElement;
      markerElem.parentNode.textContent === "" ? isEmpty = true : this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0);
      if (isEnd) {
        if (isEmpty) {
          if (mrkParentElem === preElem) {
            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0);
            detach(markerElem);
          } else {
            this.focusSelectionParent(markerElem, mrkParentElem);
          }
        } else {
          var brElm = createElement("br");
          this.parent.domNode.insertAfter(brElm, markerElem);
          this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, markerElem, 0);
          detach(markerElem);
        }
      } else {
        isEmpty ? this.focusSelectionParent(markerElem, mrkParentElem) : detach(markerElem);
      }
    };
    Formats2.prototype.focusSelectionParent = function(markerElem, tempSpanPElem) {
      detach(markerElem);
      tempSpanPElem.innerHTML = "​";
      this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, tempSpanPElem, 0);
    };
    Formats2.prototype.insertMarker = function(preElem, range) {
      var tempSpan = createElement("span", { className: "tempSpan" });
      if (range.startContainer.nodeName === "PRE") {
        preElem.childNodes[range.endOffset].parentElement.insertBefore(tempSpan, preElem.childNodes[range.endOffset]);
      } else {
        range.startContainer.parentElement.insertBefore(tempSpan, range.startContainer);
      }
    };
    Formats2.prototype.applyFormats = function(e) {
      var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      var isSelectAll = false;
      if (this.parent.editableElement === range.endContainer && !isNullOrUndefined(this.parent.editableElement.children[range.endOffset - 1]) && this.parent.editableElement.children[range.endOffset - 1].tagName === "TABLE" && !range.collapsed) {
        isSelectAll = true;
      }
      var save = this.parent.nodeSelection.save(range, this.parent.currentDocument);
      this.parent.domNode.setMarker(save);
      var formatsNodes = this.parent.domNode.blockNodes();
      if (e.enterAction === "BR") {
        this.setSelectionBRConfig();
        var allSelectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument);
        var selectedNodes = this.parent.nodeSelection.getSelectionNodes(allSelectedNode);
        var currentFormatNodes = [];
        if (selectedNodes.length === 0) {
          selectedNodes.push(formatsNodes[0]);
        }
        for (var i = 0; i < selectedNodes.length; i++) {
          var currentNode = selectedNodes[i];
          var previousCurrentNode = void 0;
          while (!this.parent.domNode.isBlockNode(currentNode) && currentNode !== this.parent.editableElement) {
            previousCurrentNode = currentNode;
            currentNode = currentNode.parentElement;
          }
          if (this.parent.domNode.isBlockNode(currentNode) && currentNode === this.parent.editableElement) {
            currentFormatNodes.push(previousCurrentNode);
          }
        }
        for (var i = 0; i < currentFormatNodes.length; i++) {
          if (!this.parent.domNode.isBlockNode(currentFormatNodes[i])) {
            var currentNode = currentFormatNodes[i];
            var previousNode = currentNode;
            while (currentNode === this.parent.editableElement) {
              previousNode = currentNode;
              currentNode = currentNode.parentElement;
            }
            var tempElem = void 0;
            if (this.parent.domNode.isBlockNode(previousNode.parentElement) && previousNode.parentElement === this.parent.editableElement) {
              tempElem = createElement("div");
              previousNode.parentElement.insertBefore(tempElem, previousNode);
              tempElem.appendChild(previousNode);
            } else {
              tempElem = previousNode;
            }
            var preNode = tempElem.previousSibling;
            while (!isNullOrUndefined(preNode) && preNode.nodeName !== "BR" && !this.parent.domNode.isBlockNode(preNode)) {
              tempElem.firstChild.parentElement.insertBefore(preNode, tempElem.firstChild);
              preNode = tempElem.previousSibling;
            }
            if (!isNullOrUndefined(preNode) && preNode.nodeName === "BR") {
              detach(preNode);
            }
            var postNode = tempElem.nextSibling;
            while (!isNullOrUndefined(postNode) && postNode.nodeName !== "BR" && !this.parent.domNode.isBlockNode(postNode)) {
              tempElem.appendChild(postNode);
              postNode = tempElem.nextSibling;
            }
            if (!isNullOrUndefined(postNode) && postNode.nodeName === "BR") {
              detach(postNode);
            }
          }
        }
        this.setSelectionBRConfig();
        formatsNodes = this.parent.domNode.blockNodes();
      }
      for (var i = 0; i < formatsNodes.length; i++) {
        var parentNode = void 0;
        var replaceHTML = void 0;
        if (e.subCommand.toLowerCase() === "blockquote") {
          parentNode = this.getParentNode(formatsNodes[i]);
          replaceHTML = this.parent.domNode.isList(parentNode) || parentNode.tagName === "TABLE" ? parentNode.outerHTML : parentNode.innerHTML;
        } else {
          parentNode = formatsNodes[i];
          replaceHTML = parentNode.innerHTML;
        }
        if (e.subCommand.toLowerCase() === parentNode.tagName.toLowerCase() && (e.subCommand.toLowerCase() !== "pre" || !isNullOrUndefined(e.exeValue) && e.exeValue.name === "dropDownSelect") || isNullOrUndefined(parentNode.parentNode) || parentNode.tagName === "TABLE" && e.subCommand.toLowerCase() === "pre") {
          continue;
        }
        this.cleanFormats(parentNode, e.subCommand);
        var replaceNode = e.subCommand.toLowerCase() === "pre" && parentNode.tagName.toLowerCase() === "pre" ? "p" : e.subCommand;
        var replaceTag = this.parent.domNode.createTagString(replaceNode, parentNode, replaceHTML.replace(/>\s+</g, "><"));
        if (parentNode.tagName === "LI") {
          parentNode.innerHTML = "";
          parentNode.insertAdjacentHTML("beforeend", replaceTag);
        } else {
          this.parent.domNode.replaceWith(parentNode, replaceTag);
        }
      }
      this.preFormatMerge();
      var startNode = this.parent.editableElement.querySelector("." + markerClassName.startSelection);
      var endNode = this.parent.editableElement.querySelector("." + markerClassName.endSelection);
      if (!isNullOrUndefined(startNode) && !isNullOrUndefined(endNode)) {
        startNode = startNode.lastChild;
        endNode = endNode.lastChild;
      }
      save = this.parent.domNode.saveMarker(save, null);
      if (isIDevice2()) {
        setEditFrameFocus(this.parent.editableElement, e.selector);
      }
      if (isSelectAll) {
        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startNode, endNode, 0, endNode.textContent.length);
      } else {
        save.restore();
      }
      if (e.callBack) {
        e.callBack({
          requestType: e.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.domNode.blockNodes()
        });
      }
    };
    Formats2.prototype.setSelectionBRConfig = function() {
      var startElem = this.parent.editableElement.querySelector("." + markerClassName.startSelection);
      var endElem = this.parent.editableElement.querySelector("." + markerClassName.endSelection);
      if (isNullOrUndefined(endElem)) {
        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, startElem, 0);
      } else {
        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, startElem, endElem, 0, 0);
      }
    };
    Formats2.prototype.preFormatMerge = function() {
      var preNodes = this.parent.editableElement.querySelectorAll("PRE");
      if (!isNullOrUndefined(preNodes)) {
        for (var i = 0; i < preNodes.length; i++) {
          var previousSib = preNodes[i].previousElementSibling;
          if (!isNullOrUndefined(previousSib) && previousSib.tagName === "PRE") {
            previousSib.insertAdjacentHTML("beforeend", "<br>" + preNodes[i].innerHTML);
            detach(preNodes[i]);
          }
        }
      }
    };
    Formats2.prototype.cleanFormats = function(element, tagName) {
      var ignoreAttr = ["display", "font-size", "margin-top", "margin-bottom", "margin-left", "margin-right", "font-weight"];
      tagName = tagName.toLowerCase();
      for (var i = 0; i < ignoreAttr.length && (tagName !== "p" && tagName !== "blockquote" && tagName !== "pre"); i++) {
        element.style.removeProperty(ignoreAttr[i]);
      }
    };
    return Formats2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/inserthtml.js
var InsertHtml = (
  /** @class */
  function() {
    function InsertHtml2() {
    }
    InsertHtml2.Insert = function(docElement, insertNode, editNode, isExternal, enterAction) {
      var node;
      if (typeof insertNode === "string") {
        var divNode = document.createElement("div");
        divNode.innerHTML = insertNode;
        node = isExternal ? divNode : divNode.firstChild;
      } else {
        if (isExternal && !(!isNullOrUndefined(insertNode) && !isNullOrUndefined(insertNode.classList) && insertNode.classList.contains("pasteContent"))) {
          var divNode = document.createElement("div");
          divNode.appendChild(insertNode);
          node = divNode;
        } else {
          node = insertNode;
        }
      }
      var nodeSelection = new NodeSelection();
      var nodeCutter = new NodeCutter();
      var range = nodeSelection.getRange(docElement);
      if (range.startContainer === editNode && range.startContainer === range.endContainer && range.startOffset === 0 && range.startOffset === range.endOffset && editNode.textContent.length === 0 && (editNode.children[0].tagName === "P" || editNode.children[0].tagName === "BR")) {
        nodeSelection.setSelectionText(docElement, range.startContainer.children[0], range.startContainer.children[0], 0, 0);
        range = nodeSelection.getRange(docElement);
      }
      if (range.startContainer.nodeName === "BR" && range.startOffset === 0 && range.startOffset === range.endOffset && range.startContainer === range.endContainer) {
        var currentIndex = Array.prototype.slice.call(range.startContainer.parentElement.childNodes).indexOf(range.startContainer);
        nodeSelection.setSelectionText(docElement, range.startContainer.parentElement, range.startContainer.parentElement, currentIndex, currentIndex);
        range = nodeSelection.getRange(docElement);
      }
      var isCursor = range.startOffset === range.endOffset && range.startOffset === 0 && range.startContainer === range.endContainer;
      var isCollapsed = range.collapsed;
      var nodes = this.getNodeCollection(range, nodeSelection, node);
      var closestParentNode = node.nodeName.toLowerCase() === "table" ? this.closestEle(nodes[0].parentNode, editNode) : nodes[0];
      if (isExternal || !isNullOrUndefined(node) && !isNullOrUndefined(node.classList) && node.classList.contains("pasteContent")) {
        this.pasteInsertHTML(nodes, node, range, nodeSelection, nodeCutter, docElement, isCollapsed, closestParentNode, editNode, enterAction);
        return;
      }
      if (editNode !== range.startContainer && (!isCollapsed && !(closestParentNode.nodeType === Node.ELEMENT_NODE && TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) !== -1) || node.nodeName.toLowerCase() === "table" && closestParentNode && TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) === -1)) {
        var preNode = nodeCutter.GetSpliceNode(range, closestParentNode);
        var sibNode = preNode.previousSibling;
        var parentNode = preNode.parentNode;
        if (nodes.length === 1 || node.nodeName.toLowerCase() === "table" && preNode.childElementCount === 0) {
          nodeSelection.setSelectionContents(docElement, preNode);
          range = nodeSelection.getRange(docElement);
        } else {
          var lasNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length - 1].parentElement);
          lasNode = isNullOrUndefined(lasNode) ? preNode : lasNode;
          nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, lasNode.nodeType === 3 ? lasNode.textContent.length : lasNode.childNodes.length);
          range = nodeSelection.getRange(docElement);
        }
        range.extractContents();
        if (insertNode.tagName === "TABLE") {
          this.removeEmptyElements(editNode);
        }
        for (var index = 0; index < nodes.length; index++) {
          if (nodes[index].nodeType !== 3 && nodes[index].parentNode != null) {
            if (nodes[index].nodeName === "IMG") {
              continue;
            }
            nodes[index].parentNode.removeChild(nodes[index]);
          }
        }
        if (sibNode) {
          InsertMethods.AppendBefore(node, sibNode, true);
        } else {
          var previousNode = null;
          while (parentNode !== editNode && parentNode.firstChild && parentNode.textContent.trim() === "") {
            var parentNode1 = parentNode.parentNode;
            previousNode = parentNode;
            parentNode = parentNode1;
          }
          if (previousNode !== null) {
            parentNode = previousNode;
          }
          if (parentNode.firstChild && (parentNode !== editNode || node.nodeName === "TABLE" && isCursor && parentNode === range.startContainer && parentNode === range.endContainer)) {
            if (parentNode.textContent.trim() === "" && parentNode !== editNode) {
              InsertMethods.AppendBefore(node, parentNode, false);
              detach(parentNode);
            } else {
              InsertMethods.AppendBefore(node, parentNode.firstChild, false);
            }
          } else {
            parentNode.appendChild(node);
          }
        }
        if (node.nodeName === "IMG") {
          this.imageFocus(node, nodeSelection, docElement);
        } else if (node.nodeType !== 3) {
          nodeSelection.setSelectionText(docElement, node, node, 0, node.childNodes.length);
        } else {
          nodeSelection.setSelectionText(docElement, node, node, 0, node.textContent.length);
        }
      } else {
        range.deleteContents();
        if (isCursor && range.startContainer.textContent === "" && range.startContainer.nodeName !== "BR") {
          range.startContainer.innerHTML = "";
        }
        if (Browser.isIE) {
          var frag = docElement.createDocumentFragment();
          frag.appendChild(node);
          range.insertNode(frag);
        } else if (range.startContainer.nodeType === 1 && range.startContainer.nodeName.toLowerCase() === "hr" && range.endContainer.nodeName.toLowerCase() === "hr") {
          var paraElem = range.startContainer.nextElementSibling;
          if (paraElem) {
            if (paraElem.querySelector("br")) {
              detach(paraElem.querySelector("br"));
            }
            paraElem.appendChild(node);
          }
        } else {
          if (range.startContainer.nodeName === "BR") {
            range.startContainer.parentElement.insertBefore(node, range.startContainer);
          } else {
            range.insertNode(node);
          }
        }
        if (node.nodeType !== 3 && node.childNodes.length > 0) {
          nodeSelection.setSelectionText(docElement, node, node, 1, 1);
        } else if (node.nodeName === "IMG") {
          this.imageFocus(node, nodeSelection, docElement);
        } else if (node.nodeType !== 3) {
          nodeSelection.setSelectionContents(docElement, node);
        } else {
          nodeSelection.setSelectionText(docElement, node, node, node.textContent.length, node.textContent.length);
        }
      }
    };
    InsertHtml2.pasteInsertHTML = function(nodes, node, range, nodeSelection, nodeCutter, docElement, isCollapsed, closestParentNode, editNode, enterAction) {
      var isCursor = range.startOffset === range.endOffset && range.startContainer === range.endContainer;
      if (isCursor && range.startContainer === editNode && editNode.textContent === "") {
        var currentBlockNode = this.getImmediateBlockNode(nodes[nodes.length - 1], editNode);
        nodeSelection.setSelectionText(docElement, currentBlockNode, currentBlockNode, 0, 0);
        range = nodeSelection.getRange(docElement);
      }
      var lasNode;
      var sibNode;
      var isSingleNode;
      var preNode;
      if (editNode !== range.startContainer && (!isCollapsed && !(closestParentNode.nodeType === Node.ELEMENT_NODE && TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) !== -1) || node.nodeName.toLowerCase() === "table" && closestParentNode && TABLE_BLOCK_TAGS.indexOf(closestParentNode.tagName.toLocaleLowerCase()) === -1)) {
        preNode = nodeCutter.GetSpliceNode(range, closestParentNode);
        sibNode = isNullOrUndefined(preNode.previousSibling) ? preNode.parentNode.previousSibling : preNode.previousSibling;
        if (nodes.length === 1) {
          nodeSelection.setSelectionContents(docElement, preNode);
          range = nodeSelection.getRange(docElement);
          isSingleNode = true;
        } else {
          lasNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length - 1].parentElement);
          lasNode = isNullOrUndefined(lasNode) ? preNode : lasNode;
          nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, lasNode.nodeType === 3 ? lasNode.textContent.length : lasNode.childNodes.length);
          range = nodeSelection.getRange(docElement);
          isSingleNode = false;
        }
      }
      var containsBlockNode = false;
      this.removingComments(node);
      var allChildNodes = node.childNodes;
      for (var i = 0; i < allChildNodes.length; i++) {
        if (BLOCK_TAGS.indexOf(allChildNodes[i].nodeName.toLocaleLowerCase()) >= 0) {
          containsBlockNode = true;
          break;
        }
      }
      var lastSelectionNode;
      var fragment = document.createDocumentFragment();
      if (!containsBlockNode) {
        if (!isCursor) {
          while (node.firstChild) {
            lastSelectionNode = node.firstChild;
            fragment.appendChild(node.firstChild);
          }
          if (isSingleNode) {
            preNode.parentNode.replaceChild(fragment, preNode);
          } else {
            range.deleteContents();
            if (!isNullOrUndefined(lasNode)) {
              detach(lasNode);
            }
            !isNullOrUndefined(sibNode) ? sibNode.parentNode.appendChild(fragment) : editNode.appendChild(fragment);
          }
        } else {
          var tempSpan = createElement("span", { className: "tempSpan" });
          var nearestAnchor = closest(range.startContainer.parentElement, "a");
          if (range.startContainer.nodeType === 3 && nearestAnchor && closest(nearestAnchor, "span")) {
            var immediateBlockNode = this.getImmediateBlockNode(range.startContainer, editNode);
            if (immediateBlockNode.querySelectorAll("br").length > 0) {
              detach(immediateBlockNode.querySelector("br"));
            }
            var rangeElement = closest(nearestAnchor, "span");
            rangeElement.appendChild(tempSpan);
          } else {
            range.insertNode(tempSpan);
          }
          while (node.firstChild) {
            lastSelectionNode = node.firstChild;
            fragment.appendChild(node.firstChild);
          }
          tempSpan.parentNode.replaceChild(fragment, tempSpan);
        }
      } else {
        var parentElem = range.startContainer;
        while (!isNullOrUndefined(parentElem) && parentElem.nodeName !== "PRE" && parentElem !== editNode) {
          parentElem = parentElem.parentElement;
        }
        if (!isNullOrUndefined(node) && !isNullOrUndefined(parentElem) && parentElem.nodeName === "PRE") {
          range.insertNode(node);
          lastSelectionNode = node.lastChild;
        } else {
          this.insertTempNode(range, node, nodes, nodeCutter, editNode);
          var isFirstTextNode = true;
          var isPreviousInlineElem = void 0;
          var paraElm = void 0;
          var previousParent = void 0;
          if (!this.contentsDeleted) {
            range.deleteContents();
          }
          while (node.firstChild) {
            if (node.firstChild.nodeName === "#text" && node.firstChild.textContent.trim() === "") {
              detach(node.firstChild);
              continue;
            }
            if (node.firstChild.nodeName === "#text" && isFirstTextNode || this.inlineNode.indexOf(node.firstChild.nodeName.toLocaleLowerCase()) >= 0 && isFirstTextNode) {
              lastSelectionNode = node.firstChild;
              if (isNullOrUndefined(node.previousElementSibling)) {
                var firstParaElm = createElement("p");
                node.parentElement.insertBefore(firstParaElm, node);
              }
              if (node.previousElementSibling.nodeName === "BR") {
                node.parentElement.insertBefore(node.firstChild, node);
              } else {
                node.previousElementSibling.appendChild(node.firstChild);
              }
            } else {
              lastSelectionNode = node.firstChild;
              if (node.firstChild.nodeName === "#text" || this.inlineNode.indexOf(node.firstChild.nodeName.toLocaleLowerCase()) >= 0) {
                if (!isPreviousInlineElem) {
                  paraElm = createElement("p");
                  paraElm.appendChild(node.firstChild);
                  fragment.appendChild(paraElm);
                } else {
                  previousParent.appendChild(node.firstChild);
                  fragment.appendChild(previousParent);
                }
                previousParent = paraElm;
                isPreviousInlineElem = true;
              } else {
                fragment.appendChild(node.firstChild);
                isPreviousInlineElem = false;
              }
              isFirstTextNode = false;
            }
          }
          node.parentNode.replaceChild(fragment, node);
        }
      }
      if (lastSelectionNode.nodeName === "#text") {
        this.placeCursorEnd(lastSelectionNode, node, nodeSelection, docElement, editNode);
      } else {
        this.cursorPos(lastSelectionNode, node, nodeSelection, docElement, editNode, enterAction);
      }
    };
    InsertHtml2.placeCursorEnd = function(lastSelectionNode, node, nodeSelection, docElement, editNode) {
      lastSelectionNode = lastSelectionNode.nodeName === "BR" ? isNullOrUndefined(lastSelectionNode.previousSibling) ? lastSelectionNode.parentNode : lastSelectionNode.previousSibling : lastSelectionNode;
      while (!isNullOrUndefined(lastSelectionNode) && lastSelectionNode.nodeName !== "#text" && lastSelectionNode.nodeName !== "IMG" && lastSelectionNode.nodeName !== "BR" && lastSelectionNode.nodeName !== "HR") {
        lastSelectionNode = lastSelectionNode.lastChild;
      }
      lastSelectionNode = isNullOrUndefined(lastSelectionNode) ? node : lastSelectionNode;
      if (lastSelectionNode.nodeName === "IMG") {
        this.imageFocus(lastSelectionNode, nodeSelection, docElement);
      } else {
        nodeSelection.setSelectionText(docElement, lastSelectionNode, lastSelectionNode, lastSelectionNode.textContent.length, lastSelectionNode.textContent.length);
      }
      this.removeEmptyElements(editNode);
    };
    InsertHtml2.getNodeCollection = function(range, nodeSelection, node) {
      var nodes = [];
      if (range.startOffset === range.endOffset && range.startContainer === range.endContainer && range.startContainer.nodeName !== "BR" && range.startContainer.childNodes.length > 0 && (range.startContainer.nodeName === "TD" || range.startContainer.nodeType !== 3 && node.classList && node.classList.contains("pasteContent"))) {
        nodes.push(range.startContainer.childNodes[range.endOffset]);
      } else {
        nodes = nodeSelection.getInsertNodeCollection(range);
      }
      return nodes;
    };
    InsertHtml2.insertTempNode = function(range, node, nodes, nodeCutter, editNode) {
      if (range.startContainer === editNode && !isNullOrUndefined(range.startContainer.childNodes[range.endOffset - 1]) && range.startContainer.childNodes[range.endOffset - 1].nodeName === "TABLE") {
        if (isNullOrUndefined(range.startContainer.childNodes[range.endOffset - 1].nextSibling)) {
          range.startContainer.appendChild(node);
        } else {
          range.startContainer.insertBefore(node, range.startContainer.childNodes[range.endOffset - 1].nextSibling);
        }
      } else if (range.startContainer === editNode && !isNullOrUndefined(range.startContainer.childNodes[range.endOffset]) && range.startContainer.childNodes[range.endOffset].nodeName === "TABLE") {
        range.startContainer.insertBefore(node, range.startContainer.childNodes[range.endOffset]);
      } else if (range.startContainer === range.endContainer && range.startContainer.nodeType !== 3 && node.firstChild.nodeName === "HR") {
        if (range.startContainer.classList.contains("e-content") || range.startContainer.nodeName === "BODY") {
          range.startContainer.appendChild(node);
        } else {
          range.startContainer.parentNode.insertBefore(node, range.startContainer);
        }
      } else {
        var blockNode = this.getImmediateBlockNode(nodes[nodes.length - 1], editNode);
        if ((isNullOrUndefined(blockNode) || isNullOrUndefined(blockNode.parentElement)) && range.endContainer.nodeType !== 3) {
          blockNode = range.endContainer;
          range.setEnd(blockNode, range.endContainer.textContent.length);
        }
        if (blockNode.nodeName === "BODY" && range.startContainer === range.endContainer && range.startContainer.nodeType === 1) {
          blockNode = range.startContainer;
        }
        if (blockNode.closest("LI") && node && node.firstElementChild && (node.firstElementChild.tagName === "OL" || node.firstElementChild.tagName === "UL")) {
          var liNode = void 0;
          while (node.firstElementChild.lastElementChild && node.firstElementChild.lastElementChild.tagName === "LI") {
            liNode = node.firstElementChild.lastElementChild;
            liNode.style.removeProperty("margin-left");
            liNode.style.removeProperty("margin-top");
            liNode.style.removeProperty("margin-bottom");
            node.firstElementChild.insertAdjacentElement("afterend", liNode);
          }
        }
        if (blockNode.nodeName === "TD" || blockNode.nodeName === "TH" || blockNode.nodeName === "TR") {
          var tempSpan = createElement("span", { className: "tempSpan" });
          range.insertNode(tempSpan);
          tempSpan.parentNode.replaceChild(node, tempSpan);
        } else {
          var nodeSelection = new NodeSelection();
          var currentNode = this.getNodeCollection(range, nodeSelection, node)[this.getNodeCollection(range, nodeSelection, node).length - 1];
          var splitedElm = void 0;
          if ((currentNode.nodeName === "BR" || currentNode.nodeName === "HR" || currentNode.nodeName === "#text" && !isNullOrUndefined(currentNode.parentElement) && currentNode.parentElement.nodeName === "LI") && (!isNullOrUndefined(currentNode.parentElement) && currentNode.parentElement.textContent.trim().length === 0)) {
            splitedElm = currentNode;
            if (currentNode.parentElement.nodeName === "LI" && !isNullOrUndefined(currentNode.nextSibling) && currentNode.nextSibling.nodeName === "BR") {
              detach(currentNode.nextSibling);
            }
          } else if ((currentNode.nodeName === "#text" || currentNode.nodeName === "BR") && !isNullOrUndefined(currentNode.parentElement) && (currentNode.parentElement.nodeName === "LI" || blockNode === editNode && currentNode.parentElement === blockNode) && currentNode.parentElement.textContent.trim().length > 0) {
            splitedElm = currentNode;
            if (currentNode.parentElement.nodeName === "LI" && !isNullOrUndefined(currentNode.nextSibling) && currentNode.nextSibling.nodeName === "BR") {
              detach(currentNode.nextSibling);
            }
            if (!range.collapsed) {
              range.deleteContents();
            }
            range.insertNode(node);
            this.contentsDeleted = true;
            return;
          } else {
            splitedElm = nodeCutter.GetSpliceNode(range, blockNode);
          }
          splitedElm.parentNode.replaceChild(node, splitedElm);
        }
      }
    };
    InsertHtml2.cursorPos = function(lastSelectionNode, node, nodeSelection, docElement, editNode, enterAction) {
      lastSelectionNode.classList.add("lastNode");
      editNode.innerHTML = updateTextNode2(editNode.innerHTML, enterAction);
      lastSelectionNode = editNode.querySelector(".lastNode");
      if (!isNullOrUndefined(lastSelectionNode)) {
        this.placeCursorEnd(lastSelectionNode, node, nodeSelection, docElement, editNode);
        lastSelectionNode.classList.remove("lastNode");
        if (lastSelectionNode.classList.length === 0) {
          lastSelectionNode.removeAttribute("class");
        }
      }
    };
    InsertHtml2.imageFocus = function(node, nodeSelection, docElement) {
      var focusNode = document.createTextNode(" ");
      node.parentNode.insertBefore(focusNode, node.nextSibling);
      nodeSelection.setSelectionText(docElement, node.nextSibling, node.nextSibling, 0, 0);
    };
    InsertHtml2.getImmediateBlockNode = function(node, editNode) {
      do {
        node = node.parentNode;
      } while (node && BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) < 0);
      return node;
    };
    InsertHtml2.removingComments = function(elm) {
      var innerElement = elm.innerHTML;
      innerElement = innerElement.replace(/<!--[\s\S]*?-->/g, "");
      elm.innerHTML = innerElement;
    };
    InsertHtml2.findDetachEmptyElem = function(element) {
      var removableElement;
      if (!isNullOrUndefined(element.parentElement)) {
        if (element.parentElement.textContent.trim() === "" && element.parentElement.contentEditable !== "true") {
          removableElement = this.findDetachEmptyElem(element.parentElement);
        } else {
          removableElement = element;
        }
      } else {
        removableElement = null;
      }
      return removableElement;
    };
    InsertHtml2.removeEmptyElements = function(element) {
      var emptyElements = element.querySelectorAll(":empty");
      for (var i = 0; i < emptyElements.length; i++) {
        var lineWithDiv = true;
        if (emptyElements[i].tagName === "DIV") {
          lineWithDiv = emptyElements[i].style.borderBottom === "none" || emptyElements[i].style.borderBottom === "" ? true : false;
        }
        if (SELF_CLOSING_TAGS.indexOf(emptyElements[i].tagName.toLowerCase()) < 0 && lineWithDiv) {
          var detachableElement = this.findDetachEmptyElem(emptyElements[i]);
          if (!isNullOrUndefined(detachableElement)) {
            detach(detachableElement);
          }
        }
      }
    };
    InsertHtml2.closestEle = function(element, editNode) {
      var el = element;
      while (el && el.nodeType === 1) {
        if (el.parentNode === editNode || !isNullOrUndefined(el.parentNode.tagName) && IGNORE_BLOCK_TAGS.indexOf(el.parentNode.tagName.toLocaleLowerCase()) !== -1) {
          return el;
        }
        el = el.parentNode;
      }
      return null;
    };
    InsertHtml2.inlineNode = [
      "a",
      "abbr",
      "acronym",
      "audio",
      "b",
      "bdi",
      "bdo",
      "big",
      "br",
      "button",
      "canvas",
      "cite",
      "code",
      "data",
      "datalist",
      "del",
      "dfn",
      "em",
      "embed",
      "font",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "label",
      "map",
      "mark",
      "meter",
      "noscript",
      "object",
      "output",
      "picture",
      "progress",
      "q",
      "ruby",
      "s",
      "samp",
      "script",
      "select",
      "slot",
      "small",
      "span",
      "strong",
      "sub",
      "sup",
      "svg",
      "template",
      "textarea",
      "time",
      "u",
      "tt",
      "var",
      "video",
      "wbr"
    ];
    InsertHtml2.contentsDeleted = false;
    return InsertHtml2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/link.js
var LinkCommand = (
  /** @class */
  function() {
    function LinkCommand2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    LinkCommand2.prototype.addEventListener = function() {
      this.parent.observer.on(LINK, this.linkCommand, this);
    };
    LinkCommand2.prototype.linkCommand = function(e) {
      switch (e.value.toString().toLocaleLowerCase()) {
        case "createlink":
        case "editlink":
          this.createLink(e);
          break;
        case "openlink":
          this.openLink(e);
          break;
        case "removelink":
          this.removeLink(e);
          break;
      }
    };
    LinkCommand2.prototype.createLink = function(e) {
      var closestAnchor = !isNullOrUndefined(e.item.selectParent) && e.item.selectParent.length > 0 && closest(e.item.selectParent[0], "a");
      closestAnchor = !isNullOrUndefined(closestAnchor) ? closestAnchor : !isNullOrUndefined(e.item.selectParent) && e.item.selectParent.length > 0 ? e.item.selectParent[0] : null;
      if (!isNullOrUndefined(closestAnchor) && closestAnchor.tagName === "A") {
        var anchorEle = closestAnchor;
        var linkText = "";
        if (!isNullOrUndefined(e.item.url)) {
          anchorEle.setAttribute("href", e.item.url);
        }
        if (!isNullOrUndefined(e.item.title)) {
          anchorEle.setAttribute("title", e.item.title);
        }
        if (!isNullOrUndefined(e.item.text) && e.item.text !== "") {
          linkText = anchorEle.innerText;
          anchorEle.innerText = e.item.text;
        }
        if (!isNullOrUndefined(e.item.target)) {
          anchorEle.setAttribute("target", e.item.target);
        } else {
          anchorEle.removeAttribute("target");
        }
        if (linkText === e.item.text) {
          e.item.selection.setSelectionText(this.parent.currentDocument, anchorEle, anchorEle, 1, 1);
          e.item.selection.restore();
        } else {
          var startIndex = e.item.action === "Paste" ? anchorEle.childNodes[0].textContent.length : 0;
          e.item.selection.setSelectionText(this.parent.currentDocument, anchorEle.childNodes[0], anchorEle.childNodes[0], startIndex, anchorEle.childNodes[0].textContent.length);
        }
      } else {
        var domSelection = new NodeSelection();
        var range = domSelection.getRange(this.parent.currentDocument);
        if (range.endContainer.nodeName === "#text" && range.startContainer.textContent.length === range.endOffset + 1 && range.endContainer.textContent.charAt(range.endOffset) === " " && (!isNullOrUndefined(range.endContainer.nextSibling) && range.endContainer.nextSibling.nodeName === "A")) {
          domSelection.setSelectionText(this.parent.currentDocument, range.startContainer, range.endContainer, range.startOffset, range.endOffset + 1);
          range = domSelection.getRange(this.parent.currentDocument);
        }
        var text = isNullOrUndefined(e.item.text) ? true : e.item.text.replace(/ /g, "").localeCompare(range.toString().replace(/\n/g, " ").replace(/ /g, "")) < 0;
        if (e.event && e.event.type === "keydown" && (e.event.keyCode === 32 || e.event.keyCode === 13) || e.item.action === "Paste" || range.collapsed || text) {
          var anchor = this.createAchorNode(e);
          anchor.innerText = e.item.text === "" ? e.item.url : e.item.text;
          e.item.selection.restore();
          InsertHtml.Insert(this.parent.currentDocument, anchor, this.parent.editableElement);
          if (e.event && e.event.type === "keydown" && (e.event.keyCode === 32 || e.event.keyCode === 13)) {
            var startContainer = e.item.selection.range.startContainer;
            startContainer.textContent = this.removeText(startContainer.textContent, e.item.text);
          } else {
            var startIndex = e.item.action === "Paste" ? anchor.childNodes[0].textContent.length : 0;
            e.item.selection.setSelectionText(this.parent.currentDocument, anchor.childNodes[0], anchor.childNodes[0], startIndex, anchor.childNodes[0].textContent.length);
          }
        } else {
          this.createLinkNode(e);
        }
      }
      if (e.callBack) {
        e.callBack({
          requestType: "Links",
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    LinkCommand2.prototype.createLinkNode = function(e) {
      var domSelection = new NodeSelection();
      var nodeCutter = new NodeCutter();
      var range = domSelection.getRange(this.parent.currentDocument);
      var nodes = this.getSelectionNodes(domSelection.getNodeCollection(range));
      var save = domSelection.save(range, this.parent.currentDocument);
      var txtArray = [];
      var inlineNodes = [];
      var currentNode;
      var removeNodes = [];
      var anchorNodes = [];
      var finalinlineNodes = [];
      var cloneNode;
      for (var index = 0; index < nodes.length; index++) {
        nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);
        txtArray[index] = nodes[index];
      }
      for (var i = 0; i < txtArray.length; i++) {
        var check = true;
        currentNode = txtArray[i];
        while (check === true) {
          if (currentNode.parentNode.nodeName === "A") {
            var anchorEle = currentNode.parentNode;
            currentNode.parentNode.parentNode.insertBefore(anchorEle.firstChild, anchorEle);
            currentNode.parentNode.removeChild(anchorEle);
          }
          if (this.isBlockNode(currentNode.parentNode) || txtArray.length === 0 || i === 0 || i === txtArray.length - 1 || range.startContainer.nodeType === 3) {
            inlineNodes[i] = currentNode;
            check = false;
          } else {
            currentNode = currentNode.parentNode;
          }
        }
      }
      for (var i = 0, j_1 = 0; i < inlineNodes.length; i++) {
        if (i === 0) {
          finalinlineNodes[j_1] = inlineNodes[i];
        }
        if (inlineNodes.length > 1 && i < inlineNodes.length - 1) {
          if (inlineNodes[i].parentElement === inlineNodes[i + 1].parentElement && inlineNodes[i] === inlineNodes[i + 1]) {
            continue;
          } else {
            finalinlineNodes[j_1 + 1] = inlineNodes[i + 1];
            j_1++;
          }
        }
      }
      var j = 0;
      anchorNodes[j] = this.createAchorNode(e);
      for (var i = 0; i < finalinlineNodes.length; i++) {
        if (i === 0) {
          cloneNode = finalinlineNodes[i].cloneNode(true);
          anchorNodes[i].appendChild(cloneNode);
        }
        if (i < finalinlineNodes.length - 1) {
          if (finalinlineNodes[i].parentNode === finalinlineNodes[i + 1].parentNode) {
            var cln = finalinlineNodes[i + 1].cloneNode(true);
            anchorNodes[j].appendChild(cln);
          } else {
            j = j + 1;
            anchorNodes[j] = this.createAchorNode(e);
            cloneNode = finalinlineNodes[i + 1].cloneNode(true);
            anchorNodes[j].appendChild(cloneNode);
          }
        }
      }
      this.parent.nodeSelection.setRange(document, save.range);
      for (var i = 0, j_2 = 0, k = 0; i <= finalinlineNodes.length; i++) {
        if (i === 0) {
          finalinlineNodes[i].parentNode.insertBefore(anchorNodes[j_2], finalinlineNodes[i].nextSibling);
          if (this.parent.domNode.blockNodes().length === 1) {
            this.parent.nodeSelection.setSelectionNode(this.parent.currentDocument, anchorNodes[j_2]);
          }
          removeNodes[k] = finalinlineNodes[i];
          k++;
        }
        if (i < finalinlineNodes.length - 1) {
          if (finalinlineNodes[i].parentNode === finalinlineNodes[i + 1].parentNode) {
            removeNodes[k] = finalinlineNodes[i + 1];
            k++;
          } else {
            j_2 = j_2 + 1;
            finalinlineNodes[i + 1].parentNode.insertBefore(anchorNodes[j_2], finalinlineNodes[i + 1]);
            removeNodes[k] = finalinlineNodes[i + 1];
            k++;
          }
        }
      }
      for (var i = 0; i < removeNodes.length; i++) {
        if (removeNodes[i].parentNode) {
          removeNodes[i].parentNode.removeChild(removeNodes[i]);
        }
      }
    };
    LinkCommand2.prototype.createAchorNode = function(e) {
      var anchorEle = createElement("a", {
        className: "e-rte-anchor",
        attrs: {
          href: e.item.url,
          title: isNullOrUndefined(e.item.title) || e.item.title === "" ? e.item.url : e.item.title
        }
      });
      if (!isNullOrUndefined(e.item.target)) {
        anchorEle.setAttribute("target", e.item.target);
      }
      return anchorEle;
    };
    LinkCommand2.prototype.getSelectionNodes = function(nodeCollection) {
      nodeCollection = nodeCollection.reverse();
      for (var index = 0; index < nodeCollection.length; index++) {
        if (nodeCollection[index].nodeType !== 3 || nodeCollection[index].textContent.trim() === "") {
          if (nodeCollection[index].nodeName !== "IMG") {
            nodeCollection.splice(index, 1);
            index--;
          }
        }
      }
      return nodeCollection.reverse();
    };
    LinkCommand2.prototype.isBlockNode = function(element) {
      return !!element && (element.nodeType === Node.ELEMENT_NODE && BLOCK_TAGS.indexOf(element.tagName.toLowerCase()) >= 0);
    };
    LinkCommand2.prototype.removeText = function(text, val) {
      var arr = text.split(" ");
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] === val) {
          arr.splice(i, 1);
          i--;
        }
      }
      return arr.join(" ") + " ";
    };
    LinkCommand2.prototype.openLink = function(e) {
      document.defaultView.open(e.item.url, e.item.target);
      this.callBack(e);
    };
    LinkCommand2.prototype.removeLink = function(e) {
      var blockNodes = this.parent.domNode.blockNodes();
      if (blockNodes.length < 2) {
        this.parent.domNode.setMarker(e.item.selection);
        var closestAnchor = closest(e.item.selectParent[0], "a");
        var selectParent = closestAnchor ? closestAnchor : e.item.selectParent[0];
        var parent_1 = selectParent.parentNode;
        var child = [];
        for (; selectParent.firstChild; null) {
          child.push(parent_1.insertBefore(selectParent.firstChild, selectParent));
        }
        parent_1.removeChild(selectParent);
        if (child && child.length === 1) {
          e.item.selection.startContainer = e.item.selection.getNodeArray(child[child.length - 1], true);
          e.item.selection.endContainer = e.item.selection.startContainer;
        }
        e.item.selection = this.parent.domNode.saveMarker(e.item.selection);
      } else {
        for (var i = 0; i < blockNodes.length; i++) {
          var linkNode = blockNodes[i].querySelectorAll("a");
          for (var j = 0; j < linkNode.length; j++) {
            if (document.getSelection().containsNode(linkNode[j], true)) {
              linkNode[j].outerHTML = linkNode[j].innerHTML;
            }
          }
        }
      }
      e.item.selection.restore();
      this.callBack(e);
    };
    LinkCommand2.prototype.callBack = function(e) {
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    return LinkCommand2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/alignments.js
var Alignments = (
  /** @class */
  function() {
    function Alignments2(parent) {
      this.alignments = {
        "JustifyLeft": "left",
        "JustifyCenter": "center",
        "JustifyRight": "right",
        "JustifyFull": "justify"
      };
      this.parent = parent;
      this.addEventListener();
    }
    Alignments2.prototype.addEventListener = function() {
      this.parent.observer.on(ALIGNMENT_TYPE, this.applyAlignment, this);
      this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    };
    Alignments2.prototype.onKeyDown = function(e) {
      switch (e.event.action) {
        case "justify-center":
          this.applyAlignment({ subCommand: "JustifyCenter", callBack: e.callBack });
          e.event.preventDefault();
          break;
        case "justify-full":
          this.applyAlignment({ subCommand: "JustifyFull", callBack: e.callBack });
          e.event.preventDefault();
          break;
        case "justify-left":
          this.applyAlignment({ subCommand: "JustifyLeft", callBack: e.callBack });
          e.event.preventDefault();
          break;
        case "justify-right":
          this.applyAlignment({ subCommand: "JustifyRight", callBack: e.callBack });
          e.event.preventDefault();
          break;
      }
    };
    Alignments2.prototype.getTableNode = function(range) {
      var startNode = range.startContainer.nodeType === Node.ELEMENT_NODE ? range.startContainer : range.startContainer.parentNode;
      var cellNode = closest(startNode, "td,th");
      return [cellNode];
    };
    Alignments2.prototype.applyAlignment = function(e) {
      var isTableAlign = e.value === "Table" ? true : false;
      var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      var save = this.parent.nodeSelection.save(range, this.parent.currentDocument);
      if (!isTableAlign) {
        this.parent.domNode.setMarker(save);
        var alignmentNodes = this.parent.domNode.blockNodes();
        for (var i = 0; i < alignmentNodes.length; i++) {
          var parentNode = alignmentNodes[i];
          setStyleAttribute(parentNode, { "text-align": this.alignments[e.subCommand] });
        }
        var imageTags = this.parent.domNode.getImageTagInSelection();
        for (var i = 0; i < imageTags.length; i++) {
          var elementNode = [];
          elementNode.push(imageTags[i]);
          this.parent.imgObj.imageCommand({
            item: {
              selectNode: elementNode
            },
            subCommand: e.subCommand,
            value: e.subCommand,
            callBack: e.callBack,
            selector: e.selector
          });
        }
        this.parent.editableElement.focus();
        save = this.parent.domNode.saveMarker(save);
        if (isIDevice2()) {
          setEditFrameFocus(this.parent.editableElement, e.selector);
        }
        save.restore();
      } else {
        setStyleAttribute(this.getTableNode(range)[0], { "text-align": this.alignments[e.subCommand] });
      }
      if (e.callBack) {
        e.callBack({
          requestType: e.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: isTableAlign ? this.getTableNode(range) : this.parent.domNode.blockNodes()
        });
      }
    };
    return Alignments2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/indents.js
var Indents = (
  /** @class */
  function() {
    function Indents2(parent) {
      this.indentValue = 20;
      this.parent = parent;
      this.addEventListener();
    }
    Indents2.prototype.addEventListener = function() {
      this.parent.observer.on(INDENT_TYPE, this.applyIndents, this);
      this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    };
    Indents2.prototype.onKeyDown = function(e) {
      switch (e.event.action) {
        case "indents":
          this.applyIndents({ subCommand: "Indent", callBack: e.callBack });
          e.event.preventDefault();
          break;
        case "outdents":
          this.applyIndents({ subCommand: "Outdent", callBack: e.callBack });
          e.event.preventDefault();
          break;
      }
    };
    Indents2.prototype.applyIndents = function(e) {
      var editEle = this.parent.editableElement;
      var isRtl = editEle.classList.contains("e-rtl");
      var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      var save = this.parent.nodeSelection.save(range, this.parent.currentDocument);
      this.parent.domNode.setMarker(save);
      var indentsNodes = this.parent.domNode.blockNodes();
      var parentNodes = indentsNodes.slice();
      var listsNodes = [];
      for (var i = 0; i < parentNodes.length; i++) {
        if (parentNodes[i].tagName !== "LI" && "LI" === parentNodes[i].parentNode.tagName) {
          indentsNodes.splice(indentsNodes.indexOf(parentNodes[i]), 1);
          listsNodes.push(parentNodes[i].parentNode);
        } else if (parentNodes[i].tagName === "LI") {
          indentsNodes.splice(indentsNodes.indexOf(parentNodes[i]), 1);
          listsNodes.push(parentNodes[i]);
        }
      }
      if (listsNodes.length > 0) {
        this.parent.observer.notify(KEY_DOWN_HANDLER, {
          event: {
            preventDefault: function() {
              return;
            },
            stopPropagation: function() {
              return;
            },
            shiftKey: e.subCommand === "Indent" ? false : true,
            which: 9,
            action: "indent"
          },
          ignoreDefault: true
        });
      }
      for (var i = 0; i < indentsNodes.length; i++) {
        var parentNode = indentsNodes[i];
        var marginLeftOrRight = isRtl ? parentNode.style.marginRight : parentNode.style.marginLeft;
        var indentsValue = void 0;
        if (e.subCommand === "Indent") {
          indentsValue = marginLeftOrRight === "" ? this.indentValue + "px" : parseInt(marginLeftOrRight, null) + this.indentValue + "px";
          isRtl ? parentNode.style.marginRight = indentsValue : parentNode.style.marginLeft = indentsValue;
        } else {
          indentsValue = marginLeftOrRight === "" || marginLeftOrRight === "0px" ? "" : parseInt(marginLeftOrRight, null) - this.indentValue + "px";
          isRtl ? parentNode.style.marginRight = indentsValue : parentNode.style.marginLeft = indentsValue;
        }
      }
      editEle.focus();
      if (isIDevice2()) {
        setEditFrameFocus(editEle, e.selector);
      }
      save = this.parent.domNode.saveMarker(save);
      save.restore();
      if (e.callBack) {
        e.callBack({
          requestType: e.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.domNode.blockNodes()
        });
      }
    };
    return Indents2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/base/classes.js
var CLASS_IMAGE_RIGHT = "e-imgright";
var CLASS_IMAGE_LEFT = "e-imgleft";
var CLASS_IMAGE_CENTER = "e-imgcenter";
var CLASS_VIDEO_RIGHT = "e-video-right";
var CLASS_VIDEO_LEFT = "e-video-left";
var CLASS_VIDEO_CENTER = "e-video-center";
var CLASS_IMAGE_BREAK = "e-imgbreak";
var CLASS_AUDIO_BREAK = "e-audio-break";
var CLASS_VIDEO_BREAK = "e-video-break";
var CLASS_CAPTION = "e-img-caption";
var CLASS_RTE_CAPTION = "e-rte-img-caption";
var CLASS_CAPTION_INLINE = "e-caption-inline";
var CLASS_IMAGE_INLINE = "e-imginline";
var CLASS_AUDIO_INLINE = "e-audio-inline";
var CLASS_CLICK_ELEM = "e-clickelem";
var CLASS_VIDEO_CLICK_ELEM = "e-video-clickelem";
var CLASS_AUDIO = "e-rte-audio";
var CLASS_VIDEO = "e-rte-video";
var CLASS_AUDIO_WRAP = "e-audio-wrap";
var CLASS_VIDEO_WRAP = "e-video-wrap";
var CLASS_EMBED_VIDEO_WRAP = "e-embed-video-wrap";
var CLASS_AUDIO_FOCUS = "e-audio-focus";
var CLASS_VIDEO_FOCUS = "e-video-focus";
var CLASS_VIDEO_INLINE = "e-video-inline";

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/image.js
var ImageCommand = (
  /** @class */
  function() {
    function ImageCommand2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    ImageCommand2.prototype.addEventListener = function() {
      this.parent.observer.on(IMAGE, this.imageCommand, this);
    };
    ImageCommand2.prototype.imageCommand = function(e) {
      switch (e.value.toString().toLowerCase()) {
        case "image":
        case "replace":
          this.createImage(e);
          break;
        case "insertlink":
          this.insertImageLink(e);
          break;
        case "openimagelink":
          this.openImageLink(e);
          break;
        case "editimagelink":
          this.editImageLink(e);
          break;
        case "removeimagelink":
          this.removeImageLink(e);
          break;
        case "remove":
          this.removeImage(e);
          break;
        case "alttext":
          this.insertAltTextImage(e);
          break;
        case "dimension":
          this.imageDimension(e);
          break;
        case "caption":
          this.imageCaption(e);
          break;
        case "justifyleft":
          this.imageJustifyLeft(e);
          break;
        case "justifycenter":
          this.imageJustifyCenter(e);
          break;
        case "justifyright":
          this.imageJustifyRight(e);
          break;
        case "inline":
          this.imageInline(e);
          break;
        case "break":
          this.imageBreak(e);
          break;
      }
    };
    ImageCommand2.prototype.createImage = function(e) {
      var _this = this;
      var isReplaced = false;
      e.item.url = isNullOrUndefined(e.item.url) || e.item.url === "undefined" ? e.item.src : e.item.url;
      if (!isNullOrUndefined(e.item.selectParent) && e.item.selectParent[0].tagName === "IMG") {
        var imgEle = e.item.selectParent[0];
        this.setStyle(imgEle, e);
        isReplaced = true;
      } else {
        var imgElement = createElement("img");
        this.setStyle(imgElement, e);
        if (!isNullOrUndefined(e.item.selection)) {
          e.item.selection.restore();
        }
        if (!isNullOrUndefined(e.selector) && e.selector === "pasteCleanupModule") {
          e.callBack({
            requestType: "Images",
            editorMode: "HTML",
            event: e.event,
            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
            elements: [imgElement]
          });
        } else {
          InsertHtml.Insert(this.parent.currentDocument, imgElement, this.parent.editableElement);
        }
      }
      if (e.callBack && (isNullOrUndefined(e.selector) || !isNullOrUndefined(e.selector) && e.selector !== "pasteCleanupModule")) {
        var selectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)[0];
        var imgElm_1 = e.value === "Replace" || isReplaced ? e.item.selectParent[0] : Browser.isIE ? selectedNode.previousSibling : selectedNode.previousElementSibling;
        imgElm_1.addEventListener("load", function() {
          if (e.value !== "Replace" || !isReplaced) {
            e.callBack({
              requestType: "Images",
              editorMode: "HTML",
              event: e.event,
              range: _this.parent.nodeSelection.getRange(_this.parent.currentDocument),
              elements: [imgElm_1]
            });
          }
        });
      }
    };
    ImageCommand2.prototype.setStyle = function(imgElement, e) {
      if (!isNullOrUndefined(e.item.url)) {
        imgElement.setAttribute("src", e.item.url);
      }
      imgElement.setAttribute("class", "e-rte-image" + (isNullOrUndefined(e.item.cssClass) ? "" : " " + e.item.cssClass));
      if (!isNullOrUndefined(e.item.altText)) {
        imgElement.setAttribute("alt", e.item.altText);
      }
      if (!isNullOrUndefined(e.item.width) && !isNullOrUndefined(e.item.width.width)) {
        imgElement.setAttribute("width", this.calculateStyleValue(e.item.width.width));
      }
      if (!isNullOrUndefined(e.item.height) && !isNullOrUndefined(e.item.height.height)) {
        imgElement.setAttribute("height", this.calculateStyleValue(e.item.height.height));
      }
      if (!isNullOrUndefined(e.item.width) && !isNullOrUndefined(e.item.width.minWidth)) {
        imgElement.style.minWidth = this.calculateStyleValue(e.item.width.minWidth);
      }
      if (!isNullOrUndefined(e.item.width) && !isNullOrUndefined(e.item.width.maxWidth)) {
        imgElement.style.maxWidth = this.calculateStyleValue(e.item.width.maxWidth);
      }
      if (!isNullOrUndefined(e.item.height) && !isNullOrUndefined(e.item.height.minHeight)) {
        imgElement.style.minHeight = this.calculateStyleValue(e.item.height.minHeight);
      }
      if (!isNullOrUndefined(e.item.height) && !isNullOrUndefined(e.item.height.maxHeight)) {
        imgElement.style.maxHeight = this.calculateStyleValue(e.item.height.maxHeight);
      }
    };
    ImageCommand2.prototype.calculateStyleValue = function(value) {
      var styleValue;
      if (typeof value === "string") {
        if (value.indexOf("px") || value.indexOf("%") || value.indexOf("auto")) {
          styleValue = value;
        } else {
          styleValue = value + "px";
        }
      } else {
        styleValue = value + "px";
      }
      return styleValue;
    };
    ImageCommand2.prototype.insertImageLink = function(e) {
      var anchor = createElement("a", {
        attrs: {
          href: e.item.url
        }
      });
      if (e.item.selectNode[0].parentElement.classList.contains("e-img-wrap")) {
        e.item.selection.restore();
        anchor.setAttribute("contenteditable", "true");
      }
      anchor.appendChild(e.item.selectNode[0]);
      if (!isNullOrUndefined(e.item.target)) {
        anchor.setAttribute("target", e.item.target);
      }
      InsertHtml.Insert(this.parent.currentDocument, anchor, this.parent.editableElement);
      this.callBack(e);
    };
    ImageCommand2.prototype.openImageLink = function(e) {
      document.defaultView.open(e.item.url, e.item.target);
      this.callBack(e);
    };
    ImageCommand2.prototype.removeImageLink = function(e) {
      var selectParent = e.item.selectParent[0];
      if (selectParent.classList.contains("e-img-caption")) {
        var capImgWrap = select(".e-img-wrap", selectParent);
        var textEle = select(".e-img-inner", selectParent);
        var newTextEle = textEle.cloneNode(true);
        detach(select("a", selectParent));
        detach(textEle);
        capImgWrap.appendChild(e.item.insertElement);
        capImgWrap.appendChild(newTextEle);
      } else {
        detach(selectParent);
        if (Browser.isIE && e.item.selection) {
          e.item.selection.restore();
        }
        InsertHtml.Insert(this.parent.currentDocument, e.item.insertElement, this.parent.editableElement);
      }
      this.callBack(e);
    };
    ImageCommand2.prototype.editImageLink = function(e) {
      e.item.selectNode[0].parentElement.href = e.item.url;
      if (isNullOrUndefined(e.item.target)) {
        e.item.selectNode[0].parentElement.removeAttribute("target");
      } else {
        e.item.selectNode[0].parentElement.target = e.item.target;
      }
      this.callBack(e);
    };
    ImageCommand2.prototype.removeImage = function(e) {
      if (closest(e.item.selectNode[0], "a")) {
        if (e.item.selectNode[0].parentElement.nodeName === "A" && !isNullOrUndefined(e.item.selectNode[0].parentElement.innerText)) {
          if (!isNullOrUndefined(closest(e.item.selectNode[0], "." + CLASS_CAPTION))) {
            detach(closest(e.item.selectNode[0], "." + CLASS_CAPTION));
          } else {
            detach(e.item.selectNode[0]);
          }
        } else {
          detach(closest(e.item.selectNode[0], "a"));
        }
      } else if (!isNullOrUndefined(closest(e.item.selectNode[0], "." + CLASS_CAPTION))) {
        detach(closest(e.item.selectNode[0], "." + CLASS_CAPTION));
      } else {
        detach(e.item.selectNode[0]);
      }
      this.callBack(e);
    };
    ImageCommand2.prototype.insertAltTextImage = function(e) {
      e.item.selectNode[0].setAttribute("alt", e.item.altText);
      this.callBack(e);
    };
    ImageCommand2.prototype.imageDimension = function(e) {
      var selectNode = e.item.selectNode[0];
      selectNode.style.height = "";
      selectNode.style.width = "";
      if (e.item.width !== "auto") {
        selectNode.style.width = formatUnit(e.item.width);
      } else {
        selectNode.removeAttribute("width");
      }
      if (e.item.height !== "auto") {
        selectNode.style.height = formatUnit(e.item.height);
      } else {
        selectNode.removeAttribute("height");
      }
      this.callBack(e);
    };
    ImageCommand2.prototype.imageCaption = function(e) {
      InsertHtml.Insert(this.parent.currentDocument, e.item.insertElement, this.parent.editableElement);
      this.callBack(e);
    };
    ImageCommand2.prototype.imageJustifyLeft = function(e) {
      var selectNode = e.item.selectNode[0];
      if (!isNullOrUndefined(selectNode)) {
        selectNode.removeAttribute("class");
        addClass([selectNode], "e-rte-image");
        if (!isNullOrUndefined(closest(selectNode, "." + CLASS_CAPTION))) {
          removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);
          addClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_LEFT);
        }
        if (selectNode.parentElement.nodeName === "A") {
          removeClass([selectNode.parentElement], CLASS_IMAGE_RIGHT);
          addClass([selectNode.parentElement], CLASS_IMAGE_LEFT);
          addClass([selectNode], CLASS_IMAGE_LEFT);
        } else {
          addClass([selectNode], CLASS_IMAGE_LEFT);
        }
        this.callBack(e);
      }
    };
    ImageCommand2.prototype.imageJustifyCenter = function(e) {
      var selectNode = e.item.selectNode[0];
      if (!isNullOrUndefined(selectNode)) {
        selectNode.removeAttribute("class");
        addClass([selectNode], "e-rte-image");
        if (!isNullOrUndefined(closest(selectNode, "." + CLASS_CAPTION))) {
          removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_LEFT);
          removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);
          addClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_CENTER);
        }
        if (selectNode.parentElement.nodeName === "A") {
          removeClass([selectNode.parentElement], CLASS_IMAGE_LEFT);
          removeClass([selectNode.parentElement], CLASS_IMAGE_RIGHT);
          addClass([selectNode.parentElement], CLASS_IMAGE_CENTER);
          addClass([selectNode], CLASS_IMAGE_CENTER);
        } else {
          addClass([selectNode], CLASS_IMAGE_CENTER);
        }
        this.callBack(e);
      }
    };
    ImageCommand2.prototype.imageJustifyRight = function(e) {
      var selectNode = e.item.selectNode[0];
      if (!isNullOrUndefined(selectNode)) {
        selectNode.removeAttribute("class");
        addClass([selectNode], "e-rte-image");
        if (!isNullOrUndefined(closest(selectNode, "." + CLASS_CAPTION))) {
          removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_LEFT);
          addClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);
        }
        if (selectNode.parentElement.nodeName === "A") {
          removeClass([selectNode.parentElement], CLASS_IMAGE_LEFT);
          addClass([selectNode.parentElement], CLASS_IMAGE_RIGHT);
          addClass([selectNode], CLASS_IMAGE_RIGHT);
        } else {
          addClass([selectNode], CLASS_IMAGE_RIGHT);
        }
        this.callBack(e);
      }
    };
    ImageCommand2.prototype.imageInline = function(e) {
      var selectNode = e.item.selectNode[0];
      selectNode.removeAttribute("class");
      addClass([selectNode], "e-rte-image");
      addClass([selectNode], CLASS_IMAGE_INLINE);
      if (!isNullOrUndefined(closest(selectNode, "." + CLASS_CAPTION))) {
        removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_BREAK);
        removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_CENTER);
        removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_LEFT);
        removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);
        addClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_CAPTION_INLINE);
      }
      this.callBack(e);
    };
    ImageCommand2.prototype.imageBreak = function(e) {
      var selectNode = e.item.selectNode[0];
      selectNode.removeAttribute("class");
      addClass([selectNode], CLASS_IMAGE_BREAK);
      addClass([selectNode], "e-rte-image");
      if (!isNullOrUndefined(closest(selectNode, "." + CLASS_CAPTION))) {
        removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_CAPTION_INLINE);
        removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_CENTER);
        removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_LEFT);
        removeClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_RIGHT);
        addClass([closest(selectNode, "." + CLASS_CAPTION)], CLASS_IMAGE_BREAK);
      }
      this.callBack(e);
    };
    ImageCommand2.prototype.callBack = function(e) {
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    return ImageCommand2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/audio.js
var AudioCommand = (
  /** @class */
  function() {
    function AudioCommand2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    AudioCommand2.prototype.addEventListener = function() {
      this.parent.observer.on(AUDIO, this.audioCommand, this);
    };
    AudioCommand2.prototype.audioCommand = function(e) {
      var selectNode;
      var value = e.value.toString().toLowerCase();
      if (value === "inline" || value === "break" || value === "audioremove") {
        selectNode = e.item.selectNode[0];
      }
      switch (value) {
        case "audio":
        case "audioreplace":
          this.createAudio(e);
          break;
        case "inline":
          selectNode.removeAttribute("class");
          selectNode.closest("." + CLASS_AUDIO_WRAP).style.display = "inline-block";
          addClass([selectNode], [CLASS_AUDIO, CLASS_AUDIO_INLINE, CLASS_AUDIO_FOCUS]);
          this.callBack(e);
          break;
        case "break":
          selectNode.removeAttribute("class");
          selectNode.closest("." + CLASS_AUDIO_WRAP).style.display = "block";
          addClass([selectNode], [CLASS_AUDIO_BREAK, CLASS_AUDIO, CLASS_AUDIO_FOCUS]);
          this.callBack(e);
          break;
        case "audioremove":
          detach(selectNode);
          this.callBack(e);
          break;
      }
    };
    AudioCommand2.prototype.createAudio = function(e) {
      var _this = this;
      var isReplaced = false;
      var wrapElement;
      if (!isNullOrUndefined(e.item.selectParent) && e.item.selectParent[0].classList && (e.item.selectParent[0].classList.contains(CLASS_CLICK_ELEM) || e.item.selectParent[0].classList.contains(CLASS_AUDIO_WRAP))) {
        var audioEle = e.item.selectParent[0].querySelector("source");
        this.setStyle(audioEle, e);
        isReplaced = true;
      } else {
        wrapElement = createElement("span", { className: CLASS_AUDIO_WRAP, attrs: { contentEditable: "false", title: e.item.fileName } });
        var audElement = createElement("audio", { className: CLASS_AUDIO + " " + CLASS_AUDIO_INLINE, attrs: { controls: "" } });
        var sourceElement = createElement("source");
        var clickElement = createElement("span", { className: CLASS_CLICK_ELEM });
        this.setStyle(sourceElement, e);
        audElement.appendChild(sourceElement);
        clickElement.appendChild(audElement);
        wrapElement.appendChild(clickElement);
        if (!isNullOrUndefined(e.item.selection)) {
          e.item.selection.restore();
        }
        InsertHtml.Insert(this.parent.currentDocument, wrapElement, this.parent.editableElement);
        if (wrapElement.nextElementSibling === null) {
          var insertElem = createElement("br");
          wrapElement.parentNode.insertBefore(insertElem, wrapElement.nextSibling);
        }
      }
      if (e.callBack && (isNullOrUndefined(e.selector) || !isNullOrUndefined(e.selector) && e.selector !== "pasteCleanupModule")) {
        var selectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)[0];
        var audioElm_1 = e.value === "AudioReplace" || isReplaced ? e.item.selectParent[0].querySelector("audio") : Browser.isIE ? selectedNode : selectedNode.querySelector("audio");
        audioElm_1.addEventListener("loadeddata", function() {
          if (e.value !== "AudioReplace" || !isReplaced) {
            e.callBack({
              requestType: "Audios",
              editorMode: "HTML",
              event: e.event,
              range: _this.parent.nodeSelection.getRange(_this.parent.currentDocument),
              elements: [audioElm_1]
            });
          }
        });
        if (isReplaced) {
          audioElm_1.load();
        }
      }
    };
    AudioCommand2.prototype.setStyle = function(sourceElement, e) {
      if (!isNullOrUndefined(e.item.url)) {
        sourceElement.setAttribute("src", e.item.url);
      }
      sourceElement.type = e.item.fileName && e.item.fileName.split(".").length > 0 ? "audio/" + e.item.fileName.split(".")[e.item.fileName.split(".").length - 1] : e.item.url && e.item.url.split(".").length > 0 ? "audio/" + e.item.url.split(".")[e.item.url.split(".").length - 1] : "";
    };
    AudioCommand2.prototype.callBack = function(e) {
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    return AudioCommand2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/video.js
var VideoCommand = (
  /** @class */
  function() {
    function VideoCommand2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    VideoCommand2.prototype.addEventListener = function() {
      this.parent.observer.on(VIDEO, this.videoCommand, this);
    };
    VideoCommand2.prototype.videoCommand = function(e) {
      var selectNode;
      var videoWrapNode;
      var videoClickElem;
      var value = e.value.toString().toLowerCase();
      if (value !== "video" && value !== "videoreplace") {
        selectNode = e.item.selectNode[0];
        videoWrapNode = selectNode.closest("." + CLASS_EMBED_VIDEO_WRAP);
        videoClickElem = selectNode.closest("." + CLASS_VIDEO_CLICK_ELEM);
      }
      switch (value) {
        case "video":
        case "videoreplace":
          this.createVideo(e);
          break;
        case "videodimension":
          this.videoDimension(e);
          break;
        case "inline":
          selectNode.removeAttribute("class");
          if (videoWrapNode) {
            videoWrapNode.style.display = "inline-block";
          }
          if (videoClickElem) {
            selectNode.parentElement.style.cssFloat = "";
          }
          addClass([selectNode], [CLASS_VIDEO, CLASS_VIDEO_INLINE, CLASS_VIDEO_FOCUS]);
          this.callBack(e);
          break;
        case "break":
          selectNode.removeAttribute("class");
          if (videoWrapNode) {
            videoWrapNode.style.display = "block";
          }
          if (videoClickElem) {
            selectNode.parentElement.style.cssFloat = "";
          }
          addClass([selectNode], [CLASS_VIDEO_BREAK, CLASS_VIDEO, CLASS_VIDEO_FOCUS]);
          this.callBack(e);
          break;
        case "justifyleft":
          selectNode.removeAttribute("class");
          if (videoWrapNode) {
            videoWrapNode.style.display = "block";
          }
          if (videoClickElem) {
            selectNode.parentElement.style.cssFloat = "left";
          }
          addClass([selectNode], [CLASS_VIDEO, CLASS_VIDEO_LEFT]);
          this.callBack(e);
          break;
        case "justifycenter":
          selectNode.removeAttribute("class");
          if (videoWrapNode) {
            videoWrapNode.style.display = "block";
          }
          if (videoClickElem) {
            selectNode.parentElement.style.cssFloat = "";
          }
          addClass([selectNode], [CLASS_VIDEO, CLASS_VIDEO_CENTER]);
          this.callBack(e);
          break;
        case "justifyright":
          selectNode.removeAttribute("class");
          if (videoWrapNode) {
            videoWrapNode.style.display = "block";
          }
          if (videoClickElem) {
            selectNode.parentElement.style.cssFloat = "right";
          }
          addClass([selectNode], [CLASS_VIDEO, CLASS_VIDEO_RIGHT]);
          this.callBack(e);
          break;
        case "videoremove":
          detach(selectNode.parentElement);
          this.callBack(e);
          break;
      }
    };
    VideoCommand2.prototype.createVideo = function(e) {
      var _this = this;
      var isReplaced = false;
      var wrapElement;
      var vidElement;
      var sourceElement;
      if (e.value === "VideoReplace" && !isNullOrUndefined(e.item.selectParent) && e.item.selectParent[0].tagName === "VIDEO") {
        var videoEle = e.item.selectParent[0].querySelector("source");
        this.setStyle(videoEle, e, videoEle);
        isReplaced = true;
      } else if (e.value === "VideoReplace" && !isNullOrUndefined(e.item.selectParent) && e.item.selectParent[0].classList && e.item.selectParent[0].classList.contains(CLASS_VIDEO_CLICK_ELEM)) {
        e.item.selectParent[0].innerHTML = e.item.fileName;
        this.setStyle(e.item.selectParent[0].firstElementChild, e, e.item.selectParent[0].firstElementChild);
      } else {
        if (!e.item.isEmbedUrl) {
          wrapElement = createElement("span", { className: CLASS_VIDEO_WRAP, attrs: { contentEditable: "false", title: e.item.fileName } });
          vidElement = createElement("video", { className: CLASS_VIDEO + " " + CLASS_VIDEO_INLINE, attrs: { controls: "" } });
          sourceElement = createElement("source");
          this.setStyle(sourceElement, e, vidElement);
          vidElement.appendChild(sourceElement);
          wrapElement.appendChild(vidElement);
        } else {
          wrapElement = createElement("span", { className: CLASS_EMBED_VIDEO_WRAP, attrs: { contentEditable: "false" } });
          var clickElement = createElement("span", { className: CLASS_VIDEO_CLICK_ELEM });
          var temp = createElement("template");
          temp.innerHTML = e.item.fileName;
          clickElement.appendChild(temp.content);
          vidElement = sourceElement = clickElement.firstElementChild;
          this.setStyle(sourceElement, e, vidElement);
          wrapElement.appendChild(clickElement);
        }
        if (!isNullOrUndefined(e.item.selection)) {
          e.item.selection.restore();
        }
        InsertHtml.Insert(this.parent.currentDocument, wrapElement, this.parent.editableElement);
        if (wrapElement.nextElementSibling === null) {
          var insertElem = createElement("br");
          wrapElement.parentNode.insertBefore(insertElem, wrapElement.nextSibling);
        }
      }
      if (e.callBack && (isNullOrUndefined(e.selector) || !isNullOrUndefined(e.selector) && e.selector !== "pasteCleanupModule")) {
        var selectedNode = this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)[0];
        var videoElm_1 = e.value === "VideoReplace" || isReplaced ? !e.item.isEmbedUrl ? e.item.selectParent[0] : e.item.selectParent[0].querySelector("iframe") : Browser.isIE ? selectedNode : !e.item.isEmbedUrl ? selectedNode.lastElementChild : selectedNode.querySelector("iframe");
        videoElm_1.addEventListener(videoElm_1.tagName !== "IFRAME" ? "loadeddata" : "load", function() {
          if (e.value !== "VideoReplace" || !isReplaced) {
            if (e.item.isEmbedUrl && videoElm_1) {
              videoElm_1.classList.add("e-rte-embed-url");
            }
            e.callBack({
              requestType: "Videos",
              editorMode: "HTML",
              event: e.event,
              range: _this.parent.nodeSelection.getRange(_this.parent.currentDocument),
              elements: [videoElm_1]
            });
          }
        });
        if (isReplaced) {
          videoElm_1.load();
        }
        if (Browser.userAgent.indexOf("Firefox") !== -1) {
          vidElement.addEventListener("play", function() {
            _this.editAreaVideoClick(e);
          });
          vidElement.addEventListener("pause", function() {
            _this.editAreaVideoClick(e);
          });
        }
      }
    };
    VideoCommand2.prototype.editAreaVideoClick = function(e) {
      e.callBack({
        requestType: "VideosPlayPause",
        editorMode: "HTML",
        event: e.event
      });
    };
    VideoCommand2.prototype.setStyle = function(sourceElement, e, videoEle) {
      if (e.item.url !== "" && !isNullOrUndefined(e.item.url)) {
        sourceElement.setAttribute("src", e.item.url);
      }
      if (!e.item.isEmbedUrl) {
        sourceElement.type = e.item.fileName && e.item.fileName.split(".").length > 0 ? "video/" + e.item.fileName.split(".")[e.item.fileName.split(".").length - 1] : e.item.url && e.item.url.split(".").length > 0 ? "video/" + e.item.url.split(".")[e.item.url.split(".").length - 1] : "";
      }
      if (!isNullOrUndefined(e.item.width) && !isNullOrUndefined(e.item.width.width)) {
        videoEle.setAttribute("width", formatUnit(e.item.width.width));
      }
      if (!isNullOrUndefined(e.item.height) && !isNullOrUndefined(e.item.height.height)) {
        videoEle.setAttribute("height", formatUnit(e.item.height.height));
      }
      if (!isNullOrUndefined(e.item.width) && !isNullOrUndefined(e.item.width.minWidth)) {
        videoEle.style.minWidth = formatUnit(e.item.width.minWidth);
      }
      if (!isNullOrUndefined(e.item.width) && !isNullOrUndefined(e.item.width.maxWidth)) {
        videoEle.style.maxWidth = formatUnit(e.item.width.maxWidth);
      }
      if (!isNullOrUndefined(e.item.height) && !isNullOrUndefined(e.item.height.minHeight)) {
        videoEle.style.minHeight = formatUnit(e.item.height.minHeight);
      }
      if (!isNullOrUndefined(e.item.height) && !isNullOrUndefined(e.item.height.maxHeight)) {
        videoEle.style.maxHeight = formatUnit(e.item.height.maxHeight);
      }
    };
    VideoCommand2.prototype.videoDimension = function(e) {
      var selectNode = !e.item.selectNode[0].classList.contains(CLASS_VIDEO_CLICK_ELEM) ? e.item.selectNode[0] : e.item.selectNode[0].querySelector("iframe");
      selectNode.style.height = "";
      selectNode.style.width = "";
      if (e.item.width !== "auto") {
        selectNode.style.width = formatUnit(e.item.width);
      } else {
        selectNode.removeAttribute("width");
      }
      if (e.item.height !== "auto") {
        selectNode.style.height = formatUnit(e.item.height);
      } else {
        selectNode.removeAttribute("height");
      }
      this.callBack(e);
    };
    VideoCommand2.prototype.callBack = function(e) {
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    return VideoCommand2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/table.js
var TableCommand = (
  /** @class */
  function() {
    function TableCommand2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    TableCommand2.prototype.addEventListener = function() {
      this.parent.observer.on(TABLE, this.createTable, this);
      this.parent.observer.on(INSERT_ROW, this.insertRow, this);
      this.parent.observer.on(INSERT_COLUMN, this.insertColumn, this);
      this.parent.observer.on(DELETEROW, this.deleteRow, this);
      this.parent.observer.on(DELETECOLUMN, this.deleteColumn, this);
      this.parent.observer.on(REMOVETABLE, this.removeTable, this);
      this.parent.observer.on(TABLEHEADER, this.tableHeader, this);
      this.parent.observer.on(TABLE_VERTICAL_ALIGN, this.tableVerticalAlign, this);
      this.parent.observer.on(TABLE_MERGE, this.cellMerge, this);
      this.parent.observer.on(TABLE_HORIZONTAL_SPLIT, this.HorizontalSplit, this);
      this.parent.observer.on(TABLE_VERTICAL_SPLIT, this.VerticalSplit, this);
      this.parent.observer.on(TABLE_MOVE, this.tableMove, this);
    };
    TableCommand2.prototype.createTable = function(e) {
      var table = createElement("table", { className: "e-rte-table" });
      var tblBody = createElement("tbody");
      if (!isNullOrUndefined(e.item.width.width)) {
        table.style.width = this.calculateStyleValue(e.item.width.width);
      }
      if (!isNullOrUndefined(e.item.width.minWidth)) {
        table.style.minWidth = this.calculateStyleValue(e.item.width.minWidth);
      }
      if (!isNullOrUndefined(e.item.width.maxWidth)) {
        table.style.maxWidth = this.calculateStyleValue(e.item.width.maxWidth);
      }
      var tdWid = parseInt(e.item.width.width, 10) > 100 ? 100 / e.item.columns : parseInt(e.item.width.width, 10) / e.item.columns;
      for (var i = 0; i < e.item.rows; i++) {
        var row = createElement("tr");
        for (var j = 0; j < e.item.columns; j++) {
          var cell = createElement("td");
          cell.appendChild(createElement("br"));
          cell.style.width = tdWid + "%";
          row.appendChild(cell);
        }
        tblBody.appendChild(row);
      }
      table.appendChild(tblBody);
      e.item.selection.restore();
      InsertHtml.Insert(this.parent.currentDocument, table, this.parent.editableElement);
      this.removeEmptyNode();
      e.item.selection.setSelectionText(this.parent.currentDocument, table.querySelector("td"), table.querySelector("td"), 0, 0);
      if (table.nextElementSibling === null) {
        var insertElem = void 0;
        if (e.enterAction === "DIV") {
          insertElem = createElement("div");
          insertElem.appendChild(createElement("br"));
        } else if (e.enterAction === "BR") {
          insertElem = createElement("br");
        } else {
          insertElem = createElement("p");
          insertElem.appendChild(createElement("br"));
        }
        this.insertAfter(insertElem, table);
      }
      table.querySelector("td").classList.add("e-cell-select");
      if (e.callBack) {
        e.callBack({
          requestType: "Table",
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: [table]
        });
      }
      return table;
    };
    TableCommand2.prototype.calculateStyleValue = function(value) {
      var styleValue;
      if (typeof value === "string") {
        if (value.indexOf("px") || value.indexOf("%") || value.indexOf("auto")) {
          styleValue = value;
        } else {
          styleValue = value + "px";
        }
      } else {
        styleValue = value + "px";
      }
      return styleValue;
    };
    TableCommand2.prototype.removeEmptyNode = function() {
      var emptyUl = this.parent.editableElement.querySelectorAll("ul:empty, ol:empty");
      for (var i = 0; i < emptyUl.length; i++) {
        detach(emptyUl[i]);
      }
      var emptyLiChild = this.parent.editableElement.querySelectorAll("li *:empty:not(img)");
      for (var i = 0; i < emptyLiChild.length; i++) {
        detach(emptyLiChild[i]);
        if (emptyLiChild.length === i + 1) {
          emptyLiChild = this.parent.editableElement.querySelectorAll("li *:empty:not(img)");
          i = -1;
        }
      }
      var emptyLi = this.parent.editableElement.querySelectorAll("li:empty");
      for (var i = 0; i < emptyLi.length; i++) {
        detach(emptyLi[i]);
      }
    };
    TableCommand2.prototype.insertAfter = function(newNode, referenceNode) {
      referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    };
    TableCommand2.prototype.getSelectedCellMinMaxIndex = function(e) {
      var selectedCells = this.curTable.querySelectorAll(".e-cell-select");
      var a = 0;
      var minI = e.length;
      var maxI = 0;
      var minJ = e[0].length;
      var maxJ = 0;
      for (var i = 0; a < selectedCells.length; a++) {
        var selectedCellIndex = this.getCorrespondingIndex(selectedCells[a], e);
        var minMaxIndex = this.FindIndex(selectedCellIndex[0], selectedCellIndex[1], e);
        minI = Math.min(selectedCellIndex[0], minI), maxI = Math.max(minMaxIndex[0], maxI), minJ = Math.min(selectedCellIndex[1], minJ), maxJ = Math.max(minMaxIndex[1], maxJ);
      }
      return {
        startRow: minI,
        endRow: maxI,
        startColumn: minJ,
        endColumn: maxJ
      };
    };
    TableCommand2.prototype.insertRow = function(e) {
      var isBelow = e.item.subCommand === "InsertRowBefore" ? false : true;
      var selectedCell = e.item.selection.range.startContainer;
      if (!(selectedCell.nodeName === "TH" || selectedCell.nodeName === "TD")) {
        selectedCell = closest(selectedCell.parentElement, "td,th");
      }
      if (selectedCell.nodeName.toLowerCase() === "th" && e.item.subCommand === "InsertRowBefore") {
        return;
      }
      this.curTable = closest(this.parent.nodeSelection.range.startContainer.parentElement, "table");
      if (this.curTable.querySelectorAll(".e-cell-select").length === 0) {
        var lastRow = this.curTable.rows[this.curTable.rows.length - 1];
        var cloneRow = lastRow.cloneNode(true);
        cloneRow.removeAttribute("rowspan");
        this.insertAfter(cloneRow, lastRow);
      } else {
        var allCells = this.getCorrespondingColumns();
        var minMaxIndex = this.getSelectedCellMinMaxIndex(allCells);
        var minVal = isBelow ? minMaxIndex.endRow : minMaxIndex.startRow;
        var newRow = createElement("tr");
        var isHeaderSelect = this.curTable.querySelectorAll("th.e-cell-select").length > 0;
        for (var i = 0; i < allCells[minVal].length; i++) {
          if (isBelow && minVal < allCells.length - 1 && allCells[minVal][i] === allCells[minVal + 1][i] || !isBelow && 0 < minVal && allCells[minVal][i] === allCells[minVal - 1][i]) {
            if (0 === i || 0 < i && allCells[minVal][i] !== allCells[minVal][i - 1]) {
              allCells[minVal][i].setAttribute("rowspan", (parseInt(allCells[minVal][i].getAttribute("rowspan"), 10) + 1).toString());
            }
          } else {
            var tdElement = createElement("td");
            tdElement.appendChild(createElement("br"));
            newRow.appendChild(tdElement);
            tdElement.setAttribute("style", allCells[isHeaderSelect && isBelow ? allCells[minVal + 1] ? minVal + 1 : minVal : minVal][i].getAttribute("style"));
          }
        }
        var selectedRow = void 0;
        if (isHeaderSelect && isBelow) {
          selectedRow = this.curTable.querySelector("tbody").childNodes[0];
        } else {
          selectedRow = this.curTable.rows[minVal];
        }
        e.item.subCommand === "InsertRowBefore" ? selectedRow.parentElement.insertBefore(newRow, selectedRow) : isHeaderSelect ? selectedRow.parentElement.insertBefore(newRow, selectedRow) : this.insertAfter(newRow, selectedRow);
      }
      e.item.selection.setSelectionText(this.parent.currentDocument, e.item.selection.range.startContainer, e.item.selection.range.startContainer, 0, 0);
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    TableCommand2.prototype.insertColumn = function(e) {
      var selectedCell = e.item.selection.range.startContainer;
      if (!(selectedCell.nodeName === "TH" || selectedCell.nodeName === "TD")) {
        selectedCell = closest(selectedCell.parentElement, "td,th");
      }
      var curRow = closest(selectedCell, "tr");
      var curCell;
      var allRows = closest(curRow, "table").rows;
      var colIndex = Array.prototype.slice.call(curRow.querySelectorAll(":scope > td, :scope > th")).indexOf(selectedCell);
      var previousWidth = parseInt(e.item.width, 10) / curRow.querySelectorAll(":scope > td, :scope > th").length;
      var currentWidth = parseInt(e.item.width, 10) / (curRow.querySelectorAll(":scope > td, :scope > th").length + 1);
      var currentTabElm = closest(curRow, "table");
      var thTdElm = closest(curRow, "table").querySelectorAll("th,td");
      for (var i = 0; i < thTdElm.length; i++) {
        thTdElm[i].dataset.oldWidth = thTdElm[i].offsetWidth / currentTabElm.offsetWidth * 100 + "%";
      }
      for (var i = 0; i < allRows.length; i++) {
        curCell = allRows[i].querySelectorAll(":scope > td, :scope > th")[colIndex];
        var colTemplate = curCell.cloneNode(true);
        colTemplate.innerHTML = "";
        colTemplate.appendChild(createElement("br"));
        colTemplate.removeAttribute("class");
        colTemplate.removeAttribute("colspan");
        colTemplate.removeAttribute("rowspan");
        e.item.subCommand === "InsertColumnLeft" ? curCell.parentElement.insertBefore(colTemplate, curCell) : this.insertAfter(colTemplate, curCell);
        colTemplate.style.width = currentWidth.toFixed(4) + "%";
        delete colTemplate.dataset.oldWidth;
      }
      for (var i = 0; i < thTdElm.length; i++) {
        thTdElm[i].style.width = (Number(thTdElm[i].dataset.oldWidth.split("%")[0]) * currentWidth / previousWidth).toFixed(4) + "%";
        delete thTdElm[i].dataset.oldWidth;
      }
      e.item.selection.setSelectionText(this.parent.currentDocument, selectedCell, selectedCell, 0, 0);
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    TableCommand2.prototype.deleteColumn = function(e) {
      var selectedCell = e.item.selection.range.startContainer;
      if (selectedCell.nodeType === 3) {
        selectedCell = closest(selectedCell.parentElement, "td,th");
      }
      var tBodyHeadEle = closest(selectedCell, selectedCell.tagName === "TH" ? "thead" : "tbody");
      var rowIndex = tBodyHeadEle && Array.prototype.indexOf.call(tBodyHeadEle.childNodes, selectedCell.parentNode);
      this.curTable = closest(selectedCell, "table");
      var curRow = closest(selectedCell, "tr");
      if (curRow.querySelectorAll("th,td").length === 1) {
        e.item.selection.restore();
        detach(closest(selectedCell.parentElement, "table"));
      } else {
        var deleteIndex = void 0;
        var allCells = this.getCorrespondingColumns();
        var selectedMinMaxIndex = this.getSelectedCellMinMaxIndex(allCells);
        var minCol = selectedMinMaxIndex.startColumn;
        var maxCol = selectedMinMaxIndex.endColumn;
        for (var i = 0; i < allCells.length; i++) {
          var currentRow = allCells[i];
          for (var j = 0; j < currentRow.length; j++) {
            var currentCell = currentRow[j];
            var currentCellIndex = this.getCorrespondingIndex(currentCell, allCells);
            var colSpanVal = parseInt(currentCell.getAttribute("colspan"), 10) || 1;
            if (currentCellIndex[1] + (colSpanVal - 1) >= minCol && currentCellIndex[1] <= maxCol) {
              if (colSpanVal > 1) {
                currentCell.setAttribute("colspan", (colSpanVal - 1).toString());
              } else {
                detach(currentCell);
                deleteIndex = j;
                if (Browser.isIE) {
                  e.item.selection.setSelectionText(this.parent.currentDocument, this.curTable.querySelector("td"), this.curTable.querySelector("td"), 0, 0);
                  this.curTable.querySelector("td, th").classList.add("e-cell-select");
                }
              }
            }
          }
        }
        if (deleteIndex > -1) {
          var rowHeadEle = tBodyHeadEle.children[rowIndex];
          var nextFocusCell = rowHeadEle && rowHeadEle.children[deleteIndex <= rowHeadEle.children.length - 1 ? deleteIndex : deleteIndex - 1];
          if (nextFocusCell) {
            e.item.selection.setSelectionText(this.parent.currentDocument, nextFocusCell, nextFocusCell, 0, 0);
            nextFocusCell.classList.add("e-cell-select");
          }
        }
      }
      if (e.callBack) {
        var sContainer = this.parent.nodeSelection.getRange(this.parent.currentDocument).startContainer;
        if (sContainer.nodeName !== "TD") {
          var startChildLength = this.parent.nodeSelection.getRange(this.parent.currentDocument).startOffset;
          var focusNode = sContainer.children[startChildLength];
          if (focusNode) {
            this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, focusNode, 0);
          }
        }
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    TableCommand2.prototype.deleteRow = function(e) {
      var selectedCell = e.item.selection.range.startContainer;
      if (selectedCell.nodeType === 3) {
        selectedCell = closest(selectedCell.parentElement, "td,th");
      }
      var colIndex = Array.prototype.indexOf.call(selectedCell.parentNode.childNodes, selectedCell);
      this.curTable = closest(selectedCell, "table");
      var currentRow;
      var allCells = this.getCorrespondingColumns();
      var minMaxIndex = this.getSelectedCellMinMaxIndex(allCells);
      var maxI;
      var j;
      if (this.curTable.rows.length === 1) {
        e.item.selection.restore();
        detach(closest(selectedCell.parentElement, "table"));
      } else {
        for (maxI = minMaxIndex.endRow; maxI >= minMaxIndex.startRow; maxI--) {
          currentRow = this.curTable.rows[maxI];
          for (j = 0; j < allCells[maxI].length; j++) {
            if (j === 0 || allCells[maxI][j] !== allCells[maxI][j - 1]) {
              if (1 < parseInt(allCells[maxI][j].getAttribute("rowspan"), 10)) {
                var rowSpanVal = parseInt(allCells[maxI][j].getAttribute("rowspan"), 10) - 1;
                if (1 === rowSpanVal) {
                  allCells[maxI][j].removeAttribute("rowspan");
                  var cell = this.getMergedRow(this.getCorrespondingColumns())[j];
                  if (cell) {
                    var cloneNode = cell.cloneNode(true);
                    cloneNode.innerHTML = "<br>";
                    if (cell.parentElement) {
                      cell.parentElement.insertBefore(cloneNode, cell);
                    }
                  }
                } else {
                  allCells[maxI][j].setAttribute("rowspan", rowSpanVal.toString());
                }
              }
            }
            if (maxI < allCells.length - 1 && allCells[maxI][j] === allCells[maxI + 1][j] && (0 === maxI || allCells[maxI][j] !== allCells[maxI - 1][j])) {
              var element = allCells[maxI][j];
              var index = void 0;
              for (index = j; 0 < index && allCells[maxI][index] === allCells[maxI][index - 1]; index--) {
                if (index === 0) {
                  this.curTable.rows[maxI + 1].prepend(element);
                } else {
                  allCells[maxI + 1][index - 1].insertAdjacentElement("afterend", element);
                }
              }
            }
          }
          var deleteIndex = currentRow.rowIndex;
          this.curTable.deleteRow(deleteIndex);
          var focusTrEle = !isNullOrUndefined(this.curTable.rows[deleteIndex]) ? this.curTable.querySelectorAll("tbody tr")[deleteIndex] : this.curTable.querySelectorAll("tbody tr")[deleteIndex - 1];
          var nextFocusCell = focusTrEle && focusTrEle.querySelectorAll("td")[colIndex];
          if (nextFocusCell) {
            e.item.selection.setSelectionText(this.parent.currentDocument, nextFocusCell, nextFocusCell, 0, 0);
            nextFocusCell.classList.add("e-cell-select");
          } else {
            e.item.selection.setSelectionText(this.parent.currentDocument, this.curTable.querySelector("td"), this.curTable.querySelector("td"), 0, 0);
            this.curTable.querySelector("td, th").classList.add("e-cell-select");
          }
        }
      }
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    TableCommand2.prototype.getMergedRow = function(cells) {
      var mergedRow;
      for (var i = 0; i < cells.length; i++) {
        if (cells[i].length !== this.curTable.rows[0].childNodes.length) {
          mergedRow = cells[i];
        }
      }
      return mergedRow;
    };
    TableCommand2.prototype.removeTable = function(e) {
      var selectedCell = e.item.selection.range.startContainer;
      selectedCell = selectedCell.nodeType === 3 ? selectedCell.parentNode : selectedCell;
      var selectedTable = closest(selectedCell.parentElement, "table");
      if (selectedTable) {
        e.item.selection.restore();
        detach(selectedTable);
      }
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    TableCommand2.prototype.tableHeader = function(e) {
      var headerExit = false;
      var selectedCell = e.item.selection.range.startContainer;
      selectedCell = selectedCell.nodeType === 3 ? selectedCell.parentNode : selectedCell;
      var table = closest(selectedCell.parentElement, "table");
      [].slice.call(table.childNodes).forEach(function(el) {
        if (el.nodeName === "THEAD") {
          headerExit = true;
        }
      });
      if (table && !headerExit) {
        var cellCount = table.querySelector("tr").childElementCount;
        var colSpanCount = 0;
        for (var i = 0; i < cellCount; i++) {
          colSpanCount = colSpanCount + (parseInt(table.querySelector("tr").children[i].getAttribute("colspan"), 10) || 1);
        }
        var header2 = table.createTHead();
        var row = header2.insertRow(0);
        for (var j = 0; j < colSpanCount; j++) {
          var th = createElement("th");
          th.appendChild(createElement("br"));
          row.appendChild(th);
        }
      } else {
        table.deleteTHead();
      }
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    TableCommand2.prototype.tableVerticalAlign = function(e) {
      if (e.item.subCommand === "AlignTop") {
        e.item.tableCell.style.verticalAlign = "top";
      } else if (e.item.subCommand === "AlignMiddle") {
        e.item.tableCell.style.verticalAlign = "middle";
      } else {
        e.item.tableCell.style.verticalAlign = "bottom";
      }
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    TableCommand2.prototype.cellMerge = function(e) {
      if (isNullOrUndefined(this.curTable)) {
        this.curTable = closest(this.parent.nodeSelection.range.startContainer.parentElement, "table");
      }
      var selectedCells = this.curTable.querySelectorAll(".e-cell-select");
      if (selectedCells.length < 2) {
        return;
      }
      this.mergeCellContent();
      var minMaxIndexes = this.getSelectedMinMaxIndexes(this.getCorrespondingColumns());
      var firstCell = selectedCells[0];
      var rowSelectedCells = firstCell.parentElement.querySelectorAll(".e-cell-select");
      if (minMaxIndexes.startColumn < minMaxIndexes.endColumn) {
        firstCell.setAttribute("colspan", (minMaxIndexes.endColumn - minMaxIndexes.startColumn + 1).toString());
      }
      if (minMaxIndexes.startRow < minMaxIndexes.endRow) {
        firstCell.setAttribute("rowspan", (minMaxIndexes.endRow - minMaxIndexes.startRow + 1).toString());
      }
      var totalWidth = 0;
      for (var j = rowSelectedCells.length - 1; j >= 0; j--) {
        totalWidth = totalWidth + parseFloat(rowSelectedCells[j].style.width);
      }
      firstCell.style.width = totalWidth + "%";
      for (var i = 1; i <= selectedCells.length - 1; i++) {
        detach(selectedCells[i]);
      }
      for (var i = 0; i < this.curTable.rows.length; i++) {
        if (this.curTable.rows[i].innerHTML === "") {
          detach(this.curTable.rows[i]);
        }
      }
      this.updateRowSpanStyle(minMaxIndexes.startRow, minMaxIndexes.endRow, this.getCorrespondingColumns());
      this.updateColSpanStyle(minMaxIndexes.startColumn, minMaxIndexes.endColumn, this.getCorrespondingColumns());
      e.item.selection.setSelectionText(this.parent.currentDocument, e.item.selection.range.startContainer, e.item.selection.range.startContainer, 0, 0);
      if (this.parent.nodeSelection && firstCell) {
        this.parent.nodeSelection.setCursorPoint(
          this.parent.currentDocument,
          // eslint-disable-next-line
          firstCell,
          0
        );
      }
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    TableCommand2.prototype.updateColSpanStyle = function(min, max, elements) {
      var colValue;
      var colIndex;
      var colMin;
      var index = 0;
      var attrValue;
      var count2 = 0;
      var eleArray = elements;
      if (min < (max = Math.min(max, eleArray[0].length - 1))) {
        for (colIndex === min; colIndex <= max; colIndex++) {
          if (!(min < colIndex && eleArray[0][colIndex] === eleArray[0][colIndex - 1]) && 1 < (index = Math.min(parseInt(eleArray[0][colIndex].getAttribute("colspan"), 10) || 1, max - min + 1)) && eleArray[0][colIndex] === eleArray[0][colIndex + 1]) {
            for (count2 = index - 1, colValue = 1; colValue < eleArray.length; colValue++) {
              if (eleArray[colValue][colIndex] !== eleArray[colValue - 1][colIndex]) {
                for (colMin = colIndex; colMin < colIndex + index; colMin++) {
                  if (1 < (attrValue = parseInt(eleArray[colValue][colMin].getAttribute("colspan"), 10) || 1) && eleArray[colValue][colMin] === eleArray[colValue][colMin + 1]) {
                    colMin += count2 = Math.min(count2, attrValue - 1);
                  } else if (!(count2 = Math.max(0, count2 - 1))) {
                    break;
                  }
                }
              }
              if (!count2) {
                break;
              }
            }
          }
        }
        if (count2) {
          this.updateCellAttribute(eleArray, count2, "colspan", 0, eleArray.length - 1, min, max);
        }
      }
    };
    TableCommand2.prototype.updateRowSpanStyle = function(min, max, ele) {
      var rowValue;
      var colIndex;
      var rowMin;
      var index = 0;
      var attrValue;
      var count2 = 0;
      var eleArray = ele;
      if (min < (max = Math.min(max, eleArray.length - 1))) {
        for (rowValue = min; rowValue <= max; rowValue++) {
          if (!(min < rowValue && eleArray[rowValue][0] === eleArray[rowValue - 1][0]) && eleArray[rowValue][0] && 1 < (index = Math.min(parseInt(eleArray[rowValue][0].getAttribute("rowspan"), 10) || 1, max - min + 1)) && eleArray[rowValue][0] === eleArray[rowValue + 1][0]) {
            for (count2 = index - 1, colIndex = 1; colIndex < eleArray[0].length; colIndex++) {
              if (eleArray[rowValue][colIndex] !== eleArray[rowValue][colIndex - 1]) {
                for (rowMin = rowValue; rowMin < rowValue + index; rowMin++) {
                  if (1 < (attrValue = parseInt(eleArray[rowMin][colIndex].getAttribute("rowspan"), 10) || 1) && eleArray[rowMin][colIndex] === eleArray[rowMin + 1][colIndex]) {
                    rowMin += count2 = Math.min(count2, attrValue - 1);
                  } else if (!(count2 = Math.max(0, count2 - 1))) {
                    break;
                  }
                }
                if (!count2) {
                  break;
                }
              }
            }
          }
        }
        if (count2) {
          this.updateCellAttribute(eleArray, count2, "rowspan", min, max, 0, eleArray[0].length - 1);
        }
      }
    };
    TableCommand2.prototype.updateCellAttribute = function(elements, index, attr, min, max, firstIndex, length) {
      var rowIndex;
      var colIndex;
      var spanCount;
      for (rowIndex = min; rowIndex <= max; rowIndex++) {
        for (colIndex = firstIndex; colIndex <= length; colIndex++) {
          min < rowIndex && elements[rowIndex][colIndex] === elements[rowIndex - 1][colIndex] || firstIndex < colIndex && elements[rowIndex][colIndex] === elements[rowIndex][colIndex - 1] || 1 < (spanCount = parseInt(elements[rowIndex][colIndex].getAttribute(attr), 10) || 1) && // eslint-disable-next-line max-len
          (1 < spanCount - index ? elements[rowIndex][colIndex].setAttribute(attr, (spanCount - index).toString()) : elements[rowIndex][colIndex].removeAttribute(attr));
        }
      }
    };
    TableCommand2.prototype.mergeCellContent = function() {
      var selectedCells = this.curTable.querySelectorAll(".e-cell-select");
      var innerHtml = selectedCells[0].innerHTML === "<br>" ? "" : selectedCells[0].innerHTML;
      for (var i = 1; i < selectedCells.length; i++) {
        if ("<br>" !== selectedCells[i].innerHTML) {
          innerHtml = innerHtml ? innerHtml + "<br>" + selectedCells[i].innerHTML : innerHtml + selectedCells[i].innerHTML;
        }
      }
      selectedCells[0].innerHTML = innerHtml;
    };
    TableCommand2.prototype.getSelectedMinMaxIndexes = function(correspondingCells) {
      var selectedCells = this.curTable.querySelectorAll(".e-cell-select");
      if (0 < selectedCells.length) {
        var minRow = correspondingCells.length;
        var maxRow = 0;
        var minCol = correspondingCells[0].length;
        var maxCol = 0;
        for (var i = 0; i < selectedCells.length; i++) {
          var currentRowCol = this.getCorrespondingIndex(selectedCells[i], correspondingCells);
          var targetRowCol = this.FindIndex(currentRowCol[0], currentRowCol[1], correspondingCells);
          minRow = Math.min(currentRowCol[0], minRow);
          maxRow = Math.max(targetRowCol[0], maxRow);
          minCol = Math.min(currentRowCol[1], minCol);
          maxCol = Math.max(targetRowCol[1], maxCol);
        }
        return {
          startRow: minRow,
          endRow: maxRow,
          startColumn: minCol,
          endColumn: maxCol
        };
      }
      return null;
    };
    TableCommand2.prototype.HorizontalSplit = function(e) {
      var selectedCell = e.item.selection.range.startContainer;
      this.curTable = closest(selectedCell.parentElement, "table");
      if (this.curTable.querySelectorAll(".e-cell-select").length > 1) {
        return;
      }
      this.activeCell = this.curTable.querySelector(".e-cell-select");
      var newCell = this.activeCell.cloneNode(true);
      newCell.removeAttribute("class");
      newCell.innerHTML = "</br>";
      var activeCellIndex = this.getCorrespondingIndex(this.activeCell, this.getCorrespondingColumns());
      var correspondingCells = this.getCorrespondingColumns();
      var activeCellRowSpan = this.activeCell.getAttribute("rowspan") ? parseInt(this.activeCell.getAttribute("rowspan"), 10) : 1;
      if (activeCellRowSpan > 1) {
        var avgCount = Math.ceil(activeCellRowSpan / 2);
        1 < avgCount ? this.activeCell.setAttribute("rowspan", avgCount.toString()) : this.activeCell.removeAttribute("rowspan");
        1 < activeCellRowSpan - avgCount ? newCell.setAttribute("rowspan", (activeCellRowSpan - avgCount).toString()) : newCell.removeAttribute("rowspan");
        var avgRowIndex = void 0;
        var colIndex = void 0;
        for (avgRowIndex = activeCellIndex[0] + Math.ceil(activeCellRowSpan / 2), colIndex = 0 === activeCellIndex[1] ? activeCellIndex[1] : activeCellIndex[1] - 1; 0 <= colIndex && (correspondingCells[avgRowIndex][colIndex] === // eslint-disable-next-line max-len
        correspondingCells[avgRowIndex][colIndex - 1] || 0 < avgRowIndex && correspondingCells[avgRowIndex][colIndex] === correspondingCells[avgRowIndex - 1][colIndex]); ) {
          colIndex--;
        }
        if (colIndex === -1) {
          this.curTable.rows[avgRowIndex].firstChild ? this.curTable.rows[avgRowIndex].prepend(newCell) : this.curTable.appendChild(newCell);
        } else {
          correspondingCells[avgRowIndex][colIndex].insertAdjacentElement("afterend", newCell);
        }
      } else {
        var newTrEle = createElement("tr");
        newTrEle.appendChild(newCell);
        var selectedRow = correspondingCells[activeCellIndex[0]];
        for (var j = 0; j <= selectedRow.length - 1; j++) {
          if (selectedRow[j] !== selectedRow[j - 1] && selectedRow[j] !== this.activeCell) {
            selectedRow[j].setAttribute("rowspan", ((parseInt(selectedRow[j].getAttribute("rowspan"), 10) ? parseInt(selectedRow[j].getAttribute("rowspan"), 10) : 1) + 1).toString());
          }
        }
        this.activeCell.parentNode.insertAdjacentElement("afterend", newTrEle);
      }
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    TableCommand2.prototype.VerticalSplit = function(e) {
      var selectedCell = e.item.selection.range.startContainer;
      this.curTable = closest(selectedCell.parentElement, "table");
      if (this.curTable.querySelectorAll(".e-cell-select").length > 1) {
        return;
      }
      this.activeCell = this.curTable.querySelector(".e-cell-select");
      var allRows = this.curTable.rows;
      var newCell = this.activeCell.cloneNode(true);
      newCell.removeAttribute("class");
      newCell.innerHTML = "</br>";
      var avgWidth = parseFloat(this.activeCell.style.width) / 2;
      if (this.activeCell.tagName === "TH" && isNaN(avgWidth)) {
        var cellCount = this.curTable.querySelector("tr").childElementCount;
        var colSpanCount = 0;
        for (var i = 0; i < cellCount; i++) {
          colSpanCount = colSpanCount + (parseInt(this.curTable.querySelector("tr").children[i].getAttribute("colspan"), 10) || 1);
        }
        avgWidth = parseFloat((this.activeCell.offsetWidth / 2 / this.curTable.offsetWidth * 100).toFixed(1));
      }
      var activeCellIndex = this.getCorrespondingIndex(this.activeCell, this.getCorrespondingColumns());
      var correspondingColumns = this.getCorrespondingColumns();
      var activeCellcolSpan = parseInt(this.activeCell.getAttribute("colspan"), 10);
      if (activeCellcolSpan > 1) {
        1 < Math.ceil(activeCellcolSpan / 2) ? this.activeCell.setAttribute("colspan", (activeCellcolSpan / 2).toString()) : this.activeCell.removeAttribute("colspan");
        1 < activeCellcolSpan - activeCellcolSpan / 2 ? newCell.setAttribute(
          "colspan",
          // eslint-disable-next-line
          (activeCellcolSpan - activeCellcolSpan / 2).toString()
        ) : newCell.removeAttribute("colspan");
      } else {
        for (var i = 0; i <= allRows.length - 1; i++) {
          if (0 === i || correspondingColumns[i][activeCellIndex[1]] !== correspondingColumns[i - 1][activeCellIndex[1]]) {
            var currentCell = correspondingColumns[i][activeCellIndex[1]];
            if (currentCell !== this.activeCell) {
              currentCell.setAttribute("colspan", ((parseInt(currentCell.getAttribute("colspan"), 10) ? parseInt(currentCell.getAttribute("colspan"), 10) : 1) + 1).toString());
            }
          }
        }
      }
      this.activeCell.style.width = avgWidth + "%";
      newCell.style.width = avgWidth + "%";
      this.activeCell.parentNode.insertBefore(newCell, this.activeCell.nextSibling);
      if (e.callBack) {
        e.callBack({
          requestType: e.item.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    TableCommand2.prototype.getCorrespondingColumns = function() {
      var elementArray = [];
      var _this = this;
      var colspan = 0;
      var allRows = _this.curTable.rows;
      for (var i = 0; i <= allRows.length - 1; i++) {
        var ele = allRows[i];
        var index = 0;
        for (var j = 0; j <= ele.children.length - 1; j++) {
          var colEle = ele.children[j];
          for (var ele_1 = colEle, colspan_1 = parseInt(ele_1.getAttribute("colspan"), 10) || 1, rowSpan = parseInt(ele_1.getAttribute("rowspan"), 10) || 1, rowIndex = i; rowIndex < i + rowSpan; rowIndex++) {
            for (var colIndex = index; colIndex < index + colspan_1; colIndex++) {
              elementArray[rowIndex] || (elementArray[rowIndex] = []);
              elementArray[rowIndex][colIndex] ? index++ : elementArray[rowIndex][colIndex] = colEle;
            }
          }
          index += colspan;
        }
      }
      return elementArray;
    };
    TableCommand2.prototype.FindIndex = function(rowIndex, columnIndex, cells) {
      var nextIndex;
      var nextCol;
      for (nextIndex = rowIndex + 1, nextCol = columnIndex + 1; nextIndex < cells.length; ) {
        if (cells[nextIndex][columnIndex] !== cells[rowIndex][columnIndex]) {
          nextIndex--;
          break;
        }
        nextIndex++;
      }
      for (nextIndex === cells.length && nextIndex--; nextCol < cells[rowIndex].length; ) {
        if (cells[rowIndex][nextCol] !== cells[rowIndex][columnIndex]) {
          nextCol--;
          break;
        }
        nextCol++;
      }
      return nextCol === cells[rowIndex].length && nextCol--, [
        nextIndex,
        nextCol
      ];
    };
    TableCommand2.prototype.getCorrespondingIndex = function(cell, allCells) {
      for (var i = 0; i < allCells.length; i++) {
        for (var j = 0; j < allCells[i].length; j++) {
          if (allCells[i][j] === cell) {
            return [i, j];
          }
        }
      }
      return [];
    };
    TableCommand2.prototype.highlightCells = function(minRow, maxRow, minCol, maxCol, eleArray) {
      var j;
      var k;
      var startCell;
      var endCell;
      var minRowIndex = minRow;
      var maxRowIndex = maxRow;
      var minColIndex = minCol;
      var maxColIndex = maxCol;
      var minMaxValues = new MinMax();
      for (j = minRowIndex; j <= maxRowIndex; j++) {
        if ((1 < (parseInt(eleArray[j][minColIndex].getAttribute("rowspan"), 10) || 1) || 1 < (parseInt(eleArray[j][minColIndex].getAttribute("colspan"), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[j][minColIndex], eleArray))[0], startCell[1], eleArray))) {
          minRowIndex = Math.min(startCell[0], minRowIndex);
          maxRowIndex = Math.max(endCell[0], maxRowIndex);
          minColIndex = Math.min(startCell[1], minColIndex);
          maxColIndex = Math.max(endCell[1], maxColIndex);
        } else if ((1 < (parseInt(eleArray[j][maxColIndex].getAttribute("rowspan"), 10) || 1) || 1 < (parseInt(eleArray[j][maxColIndex].getAttribute("colspan"), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[j][maxColIndex], eleArray))[0], startCell[1], eleArray))) {
          minRowIndex = Math.min(startCell[0], minRowIndex);
          maxRowIndex = Math.max(endCell[0], maxRowIndex);
          minColIndex = Math.min(startCell[1], minColIndex);
          maxColIndex = Math.max(endCell[1], maxColIndex);
        }
        for (k = minColIndex; k <= maxColIndex; k++) {
          if ((1 < (parseInt(eleArray[minRowIndex][k].getAttribute("rowspan"), 10) || 1) || 1 < (parseInt(eleArray[minRowIndex][k].getAttribute("colspan"), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[minRowIndex][k], eleArray))[0], startCell[1], eleArray))) {
            minRowIndex = Math.min(startCell[0], minRowIndex);
            maxRowIndex = Math.max(endCell[0], maxRowIndex);
            minColIndex = Math.min(startCell[1], minColIndex);
            maxColIndex = Math.max(endCell[1], maxColIndex);
          } else if ((1 < (parseInt(eleArray[maxRowIndex][k].getAttribute("rowspan"), 10) || 1) || 1 < (parseInt(eleArray[maxRowIndex][k].getAttribute("colspan"), 10) || 1)) && (endCell = this.FindIndex((startCell = this.getCorrespondingIndex(eleArray[maxRowIndex][k], eleArray))[0], startCell[1], eleArray))) {
            minRowIndex = Math.min(startCell[0], minRowIndex);
            maxRowIndex = Math.max(endCell[0], maxRowIndex);
            minColIndex = Math.min(startCell[1], minColIndex);
            maxColIndex = Math.max(endCell[1], maxColIndex);
          }
        }
        minMaxValues = minRowIndex === minRow && maxRowIndex === maxRow && minColIndex === minCol && maxColIndex === maxCol ? {
          startRow: minRow,
          endRow: maxRow,
          startColumn: minCol,
          endColumn: maxCol
        } : this.highlightCells(minRowIndex, maxRowIndex, minColIndex, maxColIndex, eleArray);
      }
      return minMaxValues;
    };
    TableCommand2.prototype.tableMove = function(e) {
      this.activeCell = e.selectNode[0];
      var target = e.event.target;
      var activeCellTag = this.activeCell.tagName;
      var targetCellTag = target.tagName;
      this.curTable = closest(target, "table");
      if (this.curTable.querySelectorAll(".e-cell-select").length > 1) {
        this.parent.nodeSelection.Clear(this.parent.currentDocument);
      }
      if (target.tagName !== "TD" && target.tagName !== "TH" && activeCellTag !== targetCellTag) {
        return;
      }
      var activeRowIndex = Array.prototype.slice.call(this.activeCell.parentElement.parentElement.children).indexOf(this.activeCell.parentElement);
      var activeColumnIndex = Array.prototype.slice.call(this.activeCell.parentElement.children).indexOf(this.activeCell);
      var targetRowIndex = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement);
      var targetColumnIndex = Array.prototype.slice.call(target.parentElement.children).indexOf(target);
      var activeCellList = this.curTable.querySelectorAll(".e-cell-select");
      for (var i = activeCellList.length - 1; i >= 0; i--) {
        if (this.activeCell !== activeCellList[i]) {
          activeCellList[i].classList.remove("e-cell-select");
        }
      }
      if (activeRowIndex === targetRowIndex && activeColumnIndex === targetColumnIndex) {
        return;
      }
      var correspondingCells = this.getCorrespondingColumns();
      var activeIndexes = this.getCorrespondingIndex(this.activeCell, correspondingCells);
      var targetIndexes = this.getCorrespondingIndex(target, correspondingCells);
      var minMaxIndexes = this.highlightCells(Math.min(activeIndexes[0], targetIndexes[0]), Math.max(
        activeIndexes[0],
        /* eslint-disable */
        targetIndexes[0]
      ), Math.min(activeIndexes[1], targetIndexes[1]), Math.max(activeIndexes[1], targetIndexes[1]), correspondingCells);
      for (var rowIndex = minMaxIndexes.startRow; rowIndex <= minMaxIndexes.endRow; rowIndex++) {
        for (var colIndex = minMaxIndexes.startColumn; colIndex <= minMaxIndexes.endColumn; colIndex++) {
          correspondingCells[rowIndex][colIndex].classList.add("e-cell-select");
        }
      }
      if (this.parent.nodeSelection.range) {
        this.parent.nodeSelection.setSelectionText(this.parent.currentDocument, this.parent.nodeSelection.range.endContainer, this.parent.nodeSelection.range.endContainer, 0, 0);
        this.parent.nodeSelection.setCursorPoint(this.parent.currentDocument, this.parent.nodeSelection.range.endContainer, 0);
      }
    };
    ;
    return TableCommand2;
  }()
);
var MinMax = (
  /** @class */
  function() {
    function MinMax2() {
    }
    return MinMax2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/isformatted.js
var IsFormatted = (
  /** @class */
  function() {
    function IsFormatted2() {
    }
    IsFormatted2.prototype.getFormattedNode = function(node, format, endNode) {
      var parentNode = this.getFormatParent(node, format, endNode);
      if (parentNode !== null && parentNode !== endNode) {
        return parentNode;
      }
      return null;
    };
    IsFormatted2.prototype.getFormatParent = function(node, format, endNode) {
      do {
        node = node.parentNode;
      } while (node && node !== endNode && !this.isFormattedNode(node, format));
      return node;
    };
    IsFormatted2.prototype.isFormattedNode = function(node, format) {
      switch (format) {
        case "bold":
          return IsFormatted2.isBold(node);
        case "italic":
          return IsFormatted2.isItalic(node);
        case "underline":
          return IsFormatted2.isUnderline(node);
        case "strikethrough":
          return IsFormatted2.isStrikethrough(node);
        case "superscript":
          return IsFormatted2.isSuperscript(node);
        case "subscript":
          return IsFormatted2.isSubscript(node);
        case "fontcolor":
          return this.isFontColor(node);
        case "fontname":
          return this.isFontName(node);
        case "fontsize":
          return this.isFontSize(node);
        case "backgroundcolor":
          return this.isBackgroundColor(node);
        default:
          return false;
      }
    };
    IsFormatted2.isBold = function(node) {
      var validTags = ["strong", "b"];
      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
        return true;
      } else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && node.style && node.style.fontWeight === "bold") {
        return true;
      } else {
        return false;
      }
    };
    IsFormatted2.isItalic = function(node) {
      var validTags = ["em", "i"];
      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
        return true;
      } else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && node.style && node.style.fontStyle === "italic") {
        return true;
      } else {
        return false;
      }
    };
    IsFormatted2.isUnderline = function(node) {
      var validTags = ["u"];
      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
        return true;
      } else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && node.style && (node.style.textDecoration === "underline" || node.style.textDecorationLine === "underline")) {
        return true;
      } else {
        return false;
      }
    };
    IsFormatted2.isStrikethrough = function(node) {
      var validTags = ["del", "strike"];
      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
        return true;
      } else if (this.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && node.style && (node.style.textDecoration === "line-through" || node.style.textDecorationLine === "line-through")) {
        return true;
      } else {
        return false;
      }
    };
    IsFormatted2.isSuperscript = function(node) {
      var validTags = ["sup"];
      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
        return true;
      } else {
        return false;
      }
    };
    IsFormatted2.isSubscript = function(node) {
      var validTags = ["sub"];
      if (validTags.indexOf(node.nodeName.toLowerCase()) !== -1) {
        return true;
      } else {
        return false;
      }
    };
    IsFormatted2.prototype.isFontColor = function(node) {
      var color = node.style && node.style.color;
      if (IsFormatted2.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && color !== null && color !== "" && color !== void 0) {
        return true;
      } else {
        return false;
      }
    };
    IsFormatted2.prototype.isBackgroundColor = function(node) {
      var backColor = node.style && node.style.backgroundColor;
      if (IsFormatted2.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && backColor !== null && backColor !== "" && backColor !== void 0) {
        return true;
      } else {
        return false;
      }
    };
    IsFormatted2.prototype.isFontSize = function(node) {
      var size = node.style && node.style.fontSize;
      if (IsFormatted2.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && size !== null && size !== "" && size !== void 0) {
        return true;
      } else {
        return false;
      }
    };
    IsFormatted2.prototype.isFontName = function(node) {
      var name = node.style && node.style.fontFamily;
      if (IsFormatted2.inlineTags.indexOf(node.nodeName.toLowerCase()) !== -1 && name !== null && name !== "" && name !== void 0) {
        return true;
      } else {
        return false;
      }
    };
    IsFormatted2.inlineTags = [
      "a",
      "abbr",
      "acronym",
      "b",
      "bdo",
      "big",
      "cite",
      "code",
      "dfn",
      "em",
      "font",
      "i",
      "kbd",
      "label",
      "q",
      "samp",
      "small",
      "span",
      "strong",
      "sub",
      "sup",
      "tt",
      "u",
      "var",
      "del"
    ];
    return IsFormatted2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/selection-commands.js
var SelectionCommands = (
  /** @class */
  function() {
    function SelectionCommands2() {
    }
    SelectionCommands2.applyFormat = function(docElement, format, endNode, enterAction, value, selector, painterValues) {
      this.enterAction = enterAction;
      var validFormats = [
        "bold",
        "italic",
        "underline",
        "strikethrough",
        "superscript",
        "subscript",
        "uppercase",
        "lowercase",
        "fontcolor",
        "fontname",
        "fontsize",
        "backgroundcolor"
      ];
      if (validFormats.indexOf(format) > -1 || value === "formatPainter") {
        if (format === "backgroundcolor" && value === "") {
          value = "transparent";
        }
        var domSelection = new NodeSelection();
        var domNode = new DOMNode(endNode, docElement);
        var nodeCutter = new NodeCutter();
        var isFormatted = new IsFormatted();
        var range = domSelection.getRange(docElement);
        var save = domSelection.save(range, docElement);
        var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range);
        var isCollapsed = false;
        var isFormat = false;
        var isCursor = false;
        var preventRestore = false;
        var isFontStyle = ["fontcolor", "fontname", "fontsize", "backgroundcolor"].indexOf(format) > -1;
        if (range.collapsed) {
          var currentFormatNode = isFormatted.getFormattedNode(range.startContainer, format, endNode);
          var currentSelector = !isNullOrUndefined(currentFormatNode) ? currentFormatNode.getAttribute("style") === null ? currentFormatNode.nodeName : currentFormatNode.nodeName + "[style='" + currentFormatNode.getAttribute("style") + "']" : null;
          if (nodes.length > 0) {
            isCollapsed = true;
            range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);
          } else if (range.startContainer.nodeType === 3 && (range.startContainer.parentElement.childElementCount > 0 && range.startOffset > 0 && range.startContainer.parentElement.firstElementChild.tagName.toLowerCase() !== "br" || !isNullOrUndefined(currentFormatNode) && currentFormatNode === range.startContainer.parentElement.closest(currentSelector) && range.startContainer.parentElement.closest(currentSelector).textContent.replace(
            // eslint-disable-next-line
            new RegExp(String.fromCharCode(8203), "g"),
            ""
          ).trim().length !== 0)) {
            isCollapsed = true;
            range = nodeCutter.GetCursorRange(docElement, range, range.startContainer);
            nodes.push(range.startContainer);
          } else {
            var cursorNode = this.insertCursorNode(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode);
            domSelection.endContainer = domSelection.startContainer = domSelection.getNodeArray(cursorNode, true);
            var childNodes = cursorNode.nodeName === "BR" && cursorNode.parentNode.childNodes;
            if (!isNullOrUndefined(childNodes) && childNodes.length === 1 && childNodes[0].nodeName === "BR" && nodes.length === 0) {
              domSelection.setSelectionText(docElement, range.startContainer, range.endContainer, 0, 0);
              preventRestore = true;
            } else {
              domSelection.endOffset = domSelection.startOffset = 1;
            }
            if (cursorNode.nodeName === "BR" && cursorNode.parentNode.textContent.length === 0) {
              preventRestore = true;
            }
          }
        }
        isCursor = range.collapsed;
        var isSubSup = false;
        for (var index = 0; index < nodes.length; index++) {
          var formatNode = isFormatted.getFormattedNode(nodes[index], format, endNode);
          if (formatNode === null) {
            if (format === "subscript") {
              formatNode = isFormatted.getFormattedNode(nodes[index], "superscript", endNode);
              isSubSup = formatNode === null ? false : true;
            } else if (format === "superscript") {
              formatNode = isFormatted.getFormattedNode(nodes[index], "subscript", endNode);
              isSubSup = formatNode === null ? false : true;
            }
          }
          if (index === 0 && formatNode === null) {
            isFormat = true;
          }
          if (formatNode !== null && (!isFormat || isFontStyle)) {
            nodes[index] = this.removeFormat(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode);
          } else {
            nodes[index] = this.insertFormat(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, painterValues, domNode, endNode);
          }
          domSelection = this.applySelection(nodes, domSelection, nodeCutter, index, isCollapsed);
        }
        if (isIDevice2()) {
          setEditFrameFocus(endNode, selector);
        }
        if (!preventRestore) {
          save.restore();
        }
        if (isSubSup) {
          this.applyFormat(docElement, format, endNode, enterAction);
        }
      }
    };
    SelectionCommands2.insertCursorNode = function(docElement, domSelection, range, isFormatted, nodeCutter, format, value, endNode) {
      var cursorNodes = domSelection.getNodeCollection(range);
      var domNode = new DOMNode(endNode, docElement);
      var cursorFormat = cursorNodes.length > 0 ? cursorNodes.length > 1 && range.startContainer === range.endContainer ? this.getCursorFormat(isFormatted, cursorNodes, format, endNode) : isFormatted.getFormattedNode(cursorNodes[0], format, endNode) : null;
      var cursorNode = null;
      if (cursorFormat) {
        cursorNode = cursorNodes[0];
        if (cursorFormat.firstChild.textContent.charCodeAt(0) === 8203 && cursorFormat.firstChild.nodeType === 3) {
          var regEx = new RegExp(String.fromCharCode(8203), "g");
          var emptySpaceNode = void 0;
          if (cursorFormat.firstChild === cursorNode) {
            cursorNode.textContent = cursorFormat.parentElement && (domNode.isBlockNode(cursorFormat.parentElement) && cursorFormat.parentElement.textContent.length <= 1 ? cursorFormat.parentElement.childElementCount > 1 : cursorFormat.childElementCount === 0) && (cursorFormat.parentElement.textContent.length > 1 || cursorFormat.parentElement.firstChild && cursorFormat.parentElement.firstChild.nodeType === 1) ? cursorNode.textContent : cursorNode.textContent.replace(regEx, "");
            emptySpaceNode = cursorNode;
          } else {
            cursorFormat.firstChild.textContent = cursorFormat.firstChild.textContent.replace(regEx, "");
            emptySpaceNode = cursorFormat.firstChild;
          }
          var pointer = void 0;
          if (emptySpaceNode.textContent.length === 0) {
            if (!isNullOrUndefined(emptySpaceNode.previousSibling)) {
              cursorNode = emptySpaceNode.previousSibling;
              pointer = emptySpaceNode.textContent.length - 1;
              domSelection.setCursorPoint(docElement, emptySpaceNode, pointer);
            } else if (!isNullOrUndefined(emptySpaceNode.parentElement) && emptySpaceNode.parentElement.textContent.length === 0) {
              var brElem = document.createElement("BR");
              emptySpaceNode.parentElement.appendChild(brElem);
              detach(emptySpaceNode);
              cursorNode = brElem;
              domSelection.setCursorPoint(docElement, cursorNode.parentElement, 0);
            }
          }
        }
        if (["fontcolor", "fontname", "fontsize", "backgroundcolor"].indexOf(format) > -1) {
          if (format === "fontcolor") {
            cursorFormat.style.color = value;
          } else if (format === "fontname") {
            cursorFormat.style.fontFamily = value;
          } else if (format === "fontsize") {
            cursorFormat.style.fontSize = value;
          } else {
            cursorFormat.style.backgroundColor = value;
          }
          cursorNode = cursorFormat;
        } else {
          InsertMethods.unwrap(cursorFormat);
        }
      } else {
        if (cursorNodes.length > 1 && range.startOffset > 0 && (cursorNodes[0].firstElementChild && cursorNodes[0].firstElementChild.tagName.toLowerCase() === "br")) {
          cursorNodes[0].innerHTML = "";
        }
        if (cursorNodes.length === 1 && range.startOffset === 0 && (cursorNodes[0].nodeName === "BR" || cursorNodes[0].nextSibling.nodeName === "BR")) {
          detach(cursorNodes[0].nodeName === "#text" ? cursorNodes[0].nextSibling : cursorNodes[0]);
        }
        cursorNode = this.getInsertNode(docElement, range, format, value).firstChild;
      }
      return cursorNode;
    };
    SelectionCommands2.getCursorFormat = function(isFormatted, cursorNodes, format, endNode) {
      var currentNode;
      for (var index = 0; index < cursorNodes.length; index++) {
        currentNode = cursorNodes[index].lastElementChild ? cursorNodes[index].lastElementChild : cursorNodes[index];
      }
      return isFormatted.getFormattedNode(currentNode, format, endNode);
    };
    SelectionCommands2.removeFormat = function(nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, domSelection, endNode, domNode) {
      var splitNode = null;
      var startText = range.startContainer.nodeName === "#text" ? range.startContainer.textContent.substring(range.startOffset, range.startContainer.textContent.length) : range.startContainer.textContent;
      var nodeText = nodes[index].textContent;
      if (!(range.startContainer === range.endContainer && range.startOffset === 0 && range.endOffset === range.startContainer.length)) {
        var nodeIndex = [];
        var cloneNode = nodes[index];
        do {
          nodeIndex.push(domSelection.getIndex(cloneNode));
          cloneNode = cloneNode.parentNode;
        } while (cloneNode && cloneNode !== formatNode);
        if (nodes[index].nodeName !== "BR") {
          cloneNode = splitNode = isCursor && formatNode.textContent.length - 1 === range.startOffset ? nodeCutter.SplitNode(range, formatNode, true) : nodeCutter.GetSpliceNode(range, formatNode);
        }
        if (!isCursor) {
          while (cloneNode && cloneNode.childNodes.length > 0 && nodeIndex.length - 1 >= 0 && cloneNode.childNodes.length > nodeIndex[nodeIndex.length - 1]) {
            cloneNode = cloneNode.childNodes[nodeIndex[nodeIndex.length - 1]];
            nodeIndex.pop();
          }
          if (nodes[index].nodeName !== "BR") {
            if (cloneNode.nodeType === 3 && !(isCursor && cloneNode.nodeValue === "")) {
              nodes[index] = cloneNode;
            } else {
              var divNode = document.createElement("div");
              divNode.innerHTML = "&#8203;";
              if (cloneNode.nodeType !== 3) {
                cloneNode.insertBefore(divNode.firstChild, cloneNode.firstChild);
                nodes[index] = cloneNode.firstChild;
              } else {
                cloneNode.parentNode.insertBefore(divNode.firstChild, cloneNode);
                nodes[index] = cloneNode.previousSibling;
                cloneNode.parentNode.removeChild(cloneNode);
              }
            }
          }
        } else {
          var lastNode = splitNode;
          for (; lastNode.firstChild !== null && lastNode.firstChild.nodeType !== 3; null) {
            lastNode = lastNode.firstChild;
          }
          lastNode.innerHTML = "&#8203;";
          nodes[index] = lastNode.firstChild;
        }
      } else if (isFontStyle && !nodes[index].contains(formatNode) && nodes[index].nodeType === 3 && nodes[index].textContent !== formatNode.textContent) {
        var isFullNodeSelected = nodes[index].textContent === nodes[index].wholeText;
        var nodeTraverse = nodes[index];
        var styleElement = this.GetFormatNode(format, value);
        while (nodeTraverse && nodeTraverse.textContent === nodeTraverse.parentElement.textContent) {
          nodeTraverse = nodeTraverse.parentElement;
        }
        if (isFullNodeSelected && formatNode.textContent !== nodeTraverse.textContent) {
          var nodeArray = [];
          var priorityNode = this.getPriorityFormatNode(nodeTraverse, endNode);
          if (priorityNode && priorityNode.textContent === nodeTraverse.textContent) {
            nodeTraverse = priorityNode;
          }
          nodeArray.push(nodeTraverse);
          this.applyStyles(nodeArray, 0, styleElement);
          return nodes[index];
        }
      }
      var fontStyle;
      if (format === "backgroundcolor") {
        fontStyle = formatNode.style.fontSize;
      }
      var bgStyle;
      if (format === "fontsize") {
        var bg = closest(nodes[index].parentElement, "span[style*=background-color]");
        if (!isNullOrUndefined(bg)) {
          bgStyle = bg.style.backgroundColor;
        }
      }
      var formatNodeStyles = formatNode.getAttribute("style");
      var formatNodeTagName = formatNode.tagName;
      var child = InsertMethods.unwrap(formatNode);
      if (child[0] && !isFontStyle) {
        var nodeTraverse = child[index] ? child[index] : child[0];
        var textNode = nodeTraverse;
        for (
          ;
          nodeTraverse && nodeTraverse.parentElement && nodeTraverse.parentElement !== endNode;
          // eslint-disable-next-line
          nodeTraverse = nodeTraverse
        ) {
          var nodeTraverseCondition = void 0;
          if (formatNode.nodeName === "SPAN") {
            nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase() && nodeTraverse.parentElement.getAttribute("style") === formatNodeStyles;
          } else {
            nodeTraverseCondition = nodeTraverse.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase();
          }
          if (nodeTraverse.parentElement && nodeTraverseCondition && (nodeTraverse.parentElement.childElementCount > 1 || range.startOffset > 1)) {
            if (textNode.parentElement && textNode.parentElement.tagName.toLocaleLowerCase() === formatNode.tagName.toLocaleLowerCase()) {
              if (range.startOffset === range.endOffset && textNode.nodeType !== 1 && !isNullOrUndefined(textNode.textContent) && textNode.parentElement.childElementCount > 1) {
                range.setStart(textNode, 0);
                range.setEnd(textNode, textNode.textContent.length);
                nodeCutter.SplitNode(range, textNode.parentElement, false);
              }
            }
            if (nodeTraverse.parentElement.tagName.toLocaleLowerCase() === "span") {
              if (formatNode.style.textDecoration === "underline" && nodeTraverse.parentElement.style.textDecoration !== "underline") {
                nodeTraverse = nodeTraverse.parentElement;
                continue;
              }
            }
            InsertMethods.unwrap(nodeTraverse.parentElement);
            nodeTraverse = !isNullOrUndefined(nodeTraverse.parentElement) && !domNode.isBlockNode(nodeTraverse.parentElement) ? textNode : nodeTraverse.parentElement;
          } else {
            nodeTraverse = nodeTraverse.parentElement;
          }
        }
      }
      if (child.length > 0 && isFontStyle) {
        for (var num = 0; num < child.length; num++) {
          if (child[num].nodeType !== 3 || child[num].textContent && child[num].textContent.trim().length > 0) {
            child[num] = InsertMethods.Wrap(child[num], this.GetFormatNode(format, value, formatNodeTagName, formatNodeStyles));
            if (child[num].textContent === startText) {
              if (num === 0) {
                range.setStartBefore(child[num]);
              } else if (num === child.length - 1) {
                range.setEndAfter(child[num]);
              }
            }
          }
        }
        var currentNodeElem = nodes[index].parentElement;
        if (!isNullOrUndefined(fontStyle) && fontStyle !== "") {
          currentNodeElem.style.fontSize = fontStyle;
        }
        if (!isNullOrUndefined(bgStyle) && bgStyle !== "") {
          currentNodeElem.style.backgroundColor = bgStyle;
        }
        if (format === "backgroundcolor" && !isNullOrUndefined(fontStyle) && fontStyle !== "" && currentNodeElem.parentElement.innerHTML === currentNodeElem.outerHTML) {
          var curParentElem = currentNodeElem.parentElement;
          curParentElem.parentElement.insertBefore(currentNodeElem, curParentElem);
          detach(curParentElem);
        }
        if (format === "fontsize" || format === "fontcolor") {
          var liElement = nodes[index].parentElement;
          var parentElement = nodes[index].parentElement;
          while (!isNullOrUndefined(parentElement) && parentElement.tagName.toLowerCase() !== "li") {
            parentElement = parentElement.parentElement;
            liElement = parentElement;
          }
          var num = index;
          var liChildContent = "";
          while (num >= 0 && !isNullOrUndefined(liElement) && liElement.tagName.toLowerCase() === "li" && liElement.textContent.replace("/​/g", "").trim().includes(nodes[num].textContent.trim())) {
            liChildContent = " " + nodes[num].textContent.trim() + liChildContent;
            num--;
          }
          var isNestedList = false;
          var nestedListCount = 0;
          var isNestedListItem = false;
          if (!isNullOrUndefined(liElement) && liElement.childNodes) {
            for (var num_1 = 0; num_1 < liElement.childNodes.length; num_1++) {
              if (liElement.childNodes[num_1].nodeName === "OL") {
                nestedListCount++;
                isNestedList = true;
              }
            }
          }
          if (!isNullOrUndefined(liElement) && liElement.tagName.toLowerCase() === "li" && liElement.textContent.split("​").join("").trim() === liChildContent.split("​").join("").trim()) {
            if (format === "fontsize") {
              liElement.style.fontSize = value;
            } else {
              liElement.style.color = value;
              liElement.style.textDecoration = "inherit";
            }
          } else if (!isNullOrUndefined(liElement) && liElement.tagName.toLowerCase() === "li" && isNestedList) {
            if (isNestedList && nestedListCount > 0) {
              for (var num_2 = 0; num_2 < liElement.childNodes.length; num_2++) {
                if (nodes[index].textContent === liElement.childNodes[num_2].textContent && nodes[index].textContent === nodeText && liElement.textContent.replace("/​/g", "").trim().includes(liChildContent.split("​").join("").trim())) {
                  isNestedListItem = true;
                }
              }
            }
            if (isNestedListItem) {
              for (var num_3 = 0; num_3 < liElement.childNodes.length; num_3++) {
                if (liElement.childNodes[num_3].nodeName === "OL") {
                  liElement.childNodes[num_3].style.fontSize = "initial";
                }
              }
              if (format === "fontsize") {
                liElement.style.fontSize = value;
              } else {
                liElement.style.color = value;
                liElement.style.textDecoration = "inherit";
              }
            }
          }
        }
      }
      return nodes[index];
    };
    SelectionCommands2.insertFormat = function(docElement, nodes, index, formatNode, isCursor, isFormat, isFontStyle, range, nodeCutter, format, value, painterValues, domNode, endNode) {
      if (!isCursor) {
        if (formatNode === null && isFormat || isFontStyle) {
          if (nodes[index].nodeName !== "BR") {
            nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);
            nodes[index].textContent = nodeCutter.TrimLineBreak(nodes[index].textContent);
          }
          if (format === "uppercase" || format === "lowercase") {
            nodes[index].textContent = format === "uppercase" ? nodes[index].textContent.toLocaleUpperCase() : nodes[index].textContent.toLocaleLowerCase();
          } else if (!(isFontStyle === true && value === "")) {
            var element = this.GetFormatNode(format, value);
            if (value === "formatPainter" || isFontStyle) {
              var liElement = nodes[index].parentElement;
              var parentElement = nodes[index].parentElement;
              while (!isNullOrUndefined(parentElement) && parentElement.tagName.toLowerCase() !== "li") {
                parentElement = parentElement.parentElement;
                liElement = parentElement;
              }
              if (!isNullOrUndefined(liElement) && liElement.tagName.toLowerCase() === "li" && liElement.textContent.trim() === nodes[index].textContent.trim()) {
                if (format === "fontsize") {
                  liElement.style.fontSize = value;
                } else if (format === "fontcolor") {
                  liElement.style.color = value;
                  liElement.style.textDecoration = "inherit";
                }
              }
              if (value === "formatPainter") {
                return this.insertFormatPainterElem(nodes, index, range, nodeCutter, painterValues, domNode);
              }
              var currentNode = nodes[index];
              var priorityNode = this.getPriorityFormatNode(currentNode, endNode);
              if (!isNullOrUndefined(priorityNode) || isFontStyle) {
                var currentFormatNode = isNullOrUndefined(priorityNode) ? currentNode : priorityNode;
                currentFormatNode = !isNullOrUndefined(priorityNode) && priorityNode.style.fontSize !== "" ? currentFormatNode.firstChild : currentFormatNode;
                if (isNullOrUndefined(priorityNode) || format === "fontsize") {
                  while (currentFormatNode) {
                    var isSameTextContent = currentFormatNode.parentElement.textContent.trim() === nodes[index].textContent.trim();
                    var parent_1 = currentFormatNode.parentElement;
                    if (!domNode.isBlockNode(parent_1) && isSameTextContent && !(parent_1.nodeName === "SPAN" && parent_1.classList.contains("e-img-inner"))) {
                      currentFormatNode = parent_1;
                    } else {
                      break;
                    }
                  }
                }
                var nodeList = [];
                if (format === "fontcolor") {
                  var closestAnchor = closest(nodes[index].parentElement, "A");
                  if (!isNullOrUndefined(closestAnchor) && closestAnchor.firstChild.textContent.trim() === nodes[index].textContent.trim()) {
                    currentFormatNode = nodes[index];
                  }
                }
                if (nodes[index].textContent.trim() !== currentFormatNode.textContent.trim()) {
                  currentFormatNode = nodes[index];
                }
                nodeList[0] = currentFormatNode;
                this.applyStyles(nodeList, 0, element);
              } else {
                nodes[index] = this.applyStyles(nodes, index, element);
              }
            } else {
              nodes[index] = this.applyStyles(nodes, index, element);
            }
          }
        } else {
          nodes[index] = nodeCutter.GetSpliceNode(range, nodes[index]);
        }
      } else {
        if (format !== "uppercase" && format !== "lowercase") {
          var element = this.getInsertNode(docElement, range, format, value);
          nodes[index] = element.firstChild;
          nodeCutter.position = 1;
        } else {
          nodeCutter.position = range.startOffset;
        }
      }
      return nodes[index];
    };
    SelectionCommands2.applyStyles = function(nodes, index, element) {
      if (!(nodes[index].nodeName === "BR" && this.enterAction === "BR")) {
        nodes[index] = index === nodes.length - 1 || nodes[index].nodeName === "BR" ? InsertMethods.Wrap(nodes[index], element) : InsertMethods.WrapBefore(nodes[index], element, true);
        nodes[index] = this.getChildNode(nodes[index], element);
      }
      return nodes[index];
    };
    SelectionCommands2.getPriorityFormatNode = function(node, endNode) {
      var isFormatted = new IsFormatted();
      var fontSizeNode = isFormatted.getFormattedNode(node, "fontsize", endNode);
      var fontColorNode;
      var backgroundColorNode;
      var fontNameNode;
      if (isNullOrUndefined(fontSizeNode)) {
        backgroundColorNode = isFormatted.getFormattedNode(node, "backgroundcolor", endNode);
        if (isNullOrUndefined(backgroundColorNode)) {
          fontNameNode = isFormatted.getFormattedNode(node, "fontname", endNode);
          if (isNullOrUndefined(fontNameNode)) {
            fontColorNode = isFormatted.getFormattedNode(node, "fontcolor", endNode);
            if (isNullOrUndefined(fontColorNode)) {
              return null;
            } else {
              return fontColorNode;
            }
          } else {
            return fontNameNode;
          }
        } else {
          return backgroundColorNode;
        }
      } else {
        return fontSizeNode;
      }
    };
    SelectionCommands2.getInsertNode = function(docElement, range, format, value) {
      var element = this.GetFormatNode(format, value);
      element.innerHTML = "&#8203;";
      if (Browser.isIE) {
        var frag = docElement.createDocumentFragment();
        frag.appendChild(element);
        range.insertNode(frag);
      } else {
        range.insertNode(element);
      }
      return element;
    };
    SelectionCommands2.getChildNode = function(node, element) {
      if (node === void 0 || node === null) {
        element.innerHTML = "&#8203;";
        node = element.firstChild;
      }
      return node;
    };
    SelectionCommands2.applySelection = function(nodes, domSelection, nodeCutter, index, isCollapsed) {
      if (nodes.length === 1 && !isCollapsed) {
        domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);
        domSelection.endContainer = domSelection.startContainer;
        domSelection.startOffset = 0;
        domSelection.endOffset = nodes[index].textContent.length;
      } else if (nodes.length === 1 && isCollapsed) {
        domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);
        domSelection.endContainer = domSelection.startContainer;
        domSelection.startOffset = nodeCutter.position;
        domSelection.endOffset = nodeCutter.position;
      } else if (index === 0) {
        domSelection.startContainer = domSelection.getNodeArray(nodes[index], true);
        domSelection.startOffset = 0;
      } else if (index === nodes.length - 1) {
        domSelection.endContainer = domSelection.getNodeArray(nodes[index], false);
        domSelection.endOffset = nodes[index].textContent.length;
      }
      return domSelection;
    };
    SelectionCommands2.GetFormatNode = function(format, value, tagName, styles) {
      var node;
      switch (format) {
        case "bold":
          return document.createElement("strong");
        case "italic":
          return document.createElement("em");
        case "underline":
          node = document.createElement("span");
          this.updateStyles(node, tagName, styles);
          node.style.textDecoration = "underline";
          return node;
        case "strikethrough":
          node = document.createElement("span");
          this.updateStyles(node, tagName, styles);
          node.style.textDecoration = "line-through";
          return node;
        case "superscript":
          return document.createElement("sup");
        case "subscript":
          return document.createElement("sub");
        case "fontcolor":
          node = document.createElement("span");
          this.updateStyles(node, tagName, styles);
          node.style.color = value;
          node.style.textDecoration = "inherit";
          return node;
        case "fontname":
          node = document.createElement("span");
          this.updateStyles(node, tagName, styles);
          node.style.fontFamily = value;
          return node;
        case "fontsize":
          node = document.createElement("span");
          this.updateStyles(node, tagName, styles);
          node.style.fontSize = value;
          return node;
        default:
          node = document.createElement("span");
          this.updateStyles(node, tagName, styles);
          node.style.backgroundColor = value;
          return node;
      }
    };
    SelectionCommands2.updateStyles = function(ele, tag, styles) {
      if (styles !== null && tag === "SPAN") {
        ele.setAttribute("style", styles);
      }
    };
    SelectionCommands2.insertFormatPainterElem = function(nodes, index, range, nodeCutter, painterValues, domNode) {
      var parent = !domNode.isBlockNode(nodes[index].parentElement) ? nodes[index].parentElement : nodes[index];
      if (!domNode.isBlockNode(parent)) {
        while (parent.textContent.trim() === parent.parentElement.textContent.trim() && !domNode.isBlockNode(parent.parentElement)) {
          parent = parent.parentElement;
        }
      }
      if (!isNullOrUndefined(parent) && parent.nodeType === 1 && !(parent.classList.contains("e-rte-img-caption") || parent.classList.contains("e-img-inner"))) {
        this.formatPainterCleanup(index, nodes, parent, range, nodeCutter, domNode);
      }
      var elem = painterValues.element;
      if (!isNullOrUndefined(elem)) {
        var clonedElement = elem.cloneNode(true);
        var elemList = clonedElement.querySelectorAll(painterValues.lastChild.nodeName);
        var lastElement = void 0;
        if (elemList.length > 0) {
          lastElement = elemList[elemList.length - 1];
        } else {
          if (!isNullOrUndefined(clonedElement) && clonedElement.nodeName === painterValues.lastChild.nodeName) {
            lastElement = clonedElement;
          }
        }
        lastElement.textContent = nodes[index].textContent;
        var lastChild = lastElement.childNodes[0];
        nodes[index] = InsertMethods.Wrap(nodes[index], clonedElement);
        nodes[index].textContent = "";
        nodes[index] = lastChild;
      }
      return nodes[index];
    };
    SelectionCommands2.formatPainterCleanup = function(index, nodes, parent, range, nodeCutter, domNode) {
      var INVALID_TAGS = ["A", "AUDIO", "IMG", "VIDEO", "IFRAME"];
      if (index === 0 && parent.textContent.trim() !== nodes[index].textContent.trim()) {
        nodeCutter.SplitNode(range, parent, true);
        var childELemList = nodes[index].parentElement.childNodes;
        for (var i = 0; i < childELemList.length; i++) {
          if (childELemList[i].textContent.trim() === nodes[i].textContent.trim()) {
            parent.parentNode.insertBefore(childELemList[i], parent);
            break;
          }
        }
        var blockChildNodes = parent.parentElement.childNodes;
        for (var k = 0; k < blockChildNodes.length; k++) {
          if (blockChildNodes[k].textContent.trim() === "" || blockChildNodes[k].textContent.length === 0) {
            detach(blockChildNodes[k]);
          }
        }
      } else if (parent.textContent.trim() !== nodes[index].textContent.trim()) {
        parent.parentElement.insertBefore(nodes[index], parent);
      } else {
        while (!isNullOrUndefined(parent) && parent.nodeType !== 3 && !domNode.isBlockNode(parent)) {
          var temp = void 0;
          for (var i = 0; i < parent.childNodes.length; i++) {
            var currentChild = parent.childNodes[i];
            if (currentChild.textContent.trim().length !== 0 && currentChild.nodeType !== 3) {
              temp = parent.childNodes[i];
            }
          }
          if (INVALID_TAGS.indexOf(parent.tagName) === -1) {
            InsertMethods.unwrap(parent);
          }
          parent = temp;
        }
      }
    };
    SelectionCommands2.enterAction = "P";
    return SelectionCommands2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/selection-exec.js
var SelectionBasedExec = (
  /** @class */
  function() {
    function SelectionBasedExec2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    SelectionBasedExec2.prototype.addEventListener = function() {
      this.parent.observer.on(SELECTION_TYPE, this.applySelection, this);
      this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDownHandler, this);
    };
    SelectionBasedExec2.prototype.keyDownHandler = function(e) {
      var validFormats = [
        "bold",
        "italic",
        "underline",
        "strikethrough",
        "superscript",
        "subscript",
        "uppercase",
        "lowercase"
      ];
      if (e.event.ctrlKey && validFormats.indexOf(e.event.action) > -1) {
        e.event.preventDefault();
        SelectionCommands.applyFormat(this.parent.currentDocument, e.event.action, this.parent.editableElement, e.enterAction);
        this.callBack(e, e.event.action);
      }
    };
    SelectionBasedExec2.prototype.applySelection = function(e) {
      SelectionCommands.applyFormat(this.parent.currentDocument, e.subCommand.toLocaleLowerCase(), this.parent.editableElement, e.enterAction, e.value, e.selector);
      this.callBack(e, e.subCommand);
    };
    SelectionBasedExec2.prototype.callBack = function(event2, action) {
      if (event2.callBack) {
        event2.callBack({
          requestType: action,
          event: event2.event,
          editorMode: "HTML",
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    return SelectionBasedExec2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/inserthtml-exec.js
var InsertHtmlExec = (
  /** @class */
  function() {
    function InsertHtmlExec2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    InsertHtmlExec2.prototype.addEventListener = function() {
      this.parent.observer.on(INSERTHTML_TYPE, this.applyHtml, this);
    };
    InsertHtmlExec2.prototype.applyHtml = function(e) {
      InsertHtml.Insert(this.parent.currentDocument, e.value, this.parent.editableElement, true, e.enterAction);
      if (e.subCommand === "pasteCleanup") {
        var pastedElements = this.parent.editableElement.querySelectorAll(".pasteContent_RTE");
        var allPastedElements = [].slice.call(pastedElements);
        var imgElements = this.parent.editableElement.querySelectorAll(".pasteContent_Img");
        var allImgElm = [].slice.call(imgElements);
        e.callBack({
          requestType: e.subCommand,
          editorMode: "HTML",
          elements: allPastedElements,
          imgElem: allImgElm
        });
      } else {
        if (e.callBack) {
          e.callBack({
            requestType: e.subCommand,
            editorMode: "HTML",
            event: e.event,
            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
          });
        }
      }
    };
    return InsertHtmlExec2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/clearformat.js
var ClearFormat2 = (
  /** @class */
  function() {
    function ClearFormat3() {
    }
    ClearFormat3.clear = function(docElement, endNode, enterAction, selector, command) {
      this.domNode = new DOMNode(endNode, docElement);
      this.defaultTag = enterAction === "P" ? this.defaultTag : "div";
      var nodeSelection = new NodeSelection();
      var nodeCutter = new NodeCutter();
      var range = nodeSelection.getRange(docElement);
      var nodes = range.collapsed ? nodeSelection.getSelectionNodeCollection(range) : nodeSelection.getSelectionNodeCollectionBr(range);
      var save = nodeSelection.save(range, docElement);
      var cursorRange = false;
      if (range.collapsed && command !== "ClearFormat") {
        cursorRange = true;
        range = nodeCutter.GetCursorRange(docElement, range, nodes[0]);
      }
      var isCollapsed = range.collapsed;
      if (!isCollapsed) {
        var preNode = void 0;
        if (nodes.length > 0 && nodes[0].nodeName === "BR" && closest(nodes[0], "table")) {
          preNode = nodeCutter.GetSpliceNode(range, closest(nodes[0], "table"));
        } else {
          preNode = nodeCutter.GetSpliceNode(range, nodes[nodes.length > 1 && nodes[0].nodeName === "IMG" ? 1 : 0]);
        }
        if (nodes.length === 1) {
          nodeSelection.setSelectionContents(docElement, preNode);
          range = nodeSelection.getRange(docElement);
        } else if (nodes.length > 1) {
          var i = 1;
          var lastText = nodes[nodes.length - i];
          while (nodes.length <= i && nodes[nodes.length - i].nodeName === "BR") {
            i++;
            lastText = nodes[nodes.length - i];
          }
          var lasNode = nodeCutter.GetSpliceNode(range, lastText);
          nodeSelection.setSelectionText(docElement, preNode, lasNode, 0, lasNode.nodeType === 3 ? lasNode.textContent.length : lasNode.childNodes.length);
          range = nodeSelection.getRange(docElement);
        }
        var exactNodes = nodeSelection.getNodeCollection(range);
        var cloneSelectNodes = exactNodes.slice();
        this.clearInlines(nodeSelection.getSelectionNodes(cloneSelectNodes), cloneSelectNodes, nodeSelection.getRange(docElement), nodeCutter, endNode);
        this.reSelection(docElement, save, exactNodes);
        range = nodeSelection.getRange(docElement);
        exactNodes = nodeSelection.getNodeCollection(range);
        var cloneParentNodes = exactNodes.slice();
        this.clearBlocks(docElement, cloneParentNodes, endNode, nodeCutter, nodeSelection);
        if (isIDevice2()) {
          setEditFrameFocus(endNode, selector);
        }
        this.reSelection(docElement, save, exactNodes);
      }
      if (cursorRange) {
        nodeSelection.setCursorPoint(docElement, range.endContainer, range.endOffset);
      }
    };
    ClearFormat3.reSelection = function(docElement, save, exactNodes) {
      var selectionNodes = save.getInsertNodes(exactNodes);
      save.startContainer = save.getNodeArray(selectionNodes[0], true, docElement);
      save.startOffset = 0;
      save.endContainer = save.getNodeArray(selectionNodes[selectionNodes.length - 1], false, docElement);
      var endIndexNode = selectionNodes[selectionNodes.length - 1];
      save.endOffset = endIndexNode.nodeType === 3 ? endIndexNode.textContent.length : endIndexNode.childNodes.length;
      save.restore();
    };
    ClearFormat3.clearBlocks = function(docElement, nodes, endNode, nodeCutter, nodeSelection) {
      var parentNodes = [];
      for (var index = 0; index < nodes.length; index++) {
        if (this.BLOCK_TAGS.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1 && parentNodes.indexOf(nodes[index]) === -1) {
          parentNodes.push(nodes[index]);
        } else if (this.BLOCK_TAGS.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1 && parentNodes.indexOf(nodes[index].parentNode) === -1 && endNode !== nodes[index].parentNode) {
          parentNodes.push(nodes[index].parentNode);
        }
      }
      parentNodes = this.spliceParent(parentNodes, nodes)[0];
      parentNodes = this.removeParent(parentNodes);
      this.unWrap(docElement, parentNodes, nodeCutter, nodeSelection);
    };
    ClearFormat3.spliceParent = function(parentNodes, nodes) {
      for (var index1 = 0; index1 < parentNodes.length; index1++) {
        var len = parentNodes[index1].childNodes.length;
        for (var index2 = 0; index2 < len; index2++) {
          if (nodes.indexOf(parentNodes[index1].childNodes[index2]) > 0 && parentNodes[index1].childNodes[index2].childNodes.length > 0) {
            nodes = this.spliceParent([parentNodes[index1].childNodes[index2]], nodes)[1];
          }
          if (nodes.indexOf(parentNodes[index1].childNodes[index2]) <= -1 && parentNodes[index1].childNodes[index2].textContent.trim() !== "") {
            for (var index3 = 0; index3 < len; index3++) {
              if (nodes.indexOf(parentNodes[index1].childNodes[index3]) > -1) {
                nodes.splice(nodes.indexOf(parentNodes[index1].childNodes[index3]), 1);
              }
            }
            index2 = parentNodes[index1].childNodes.length;
            var parentIndex = parentNodes.indexOf(parentNodes[index1].parentNode);
            var nodeIndex = nodes.indexOf(parentNodes[index1].parentNode);
            if (parentIndex > -1) {
              parentNodes.splice(parentIndex, 1);
            }
            if (nodeIndex > -1) {
              nodes.splice(nodeIndex, 1);
            }
            var elementIndex = nodes.indexOf(parentNodes[index1]);
            if (elementIndex > -1) {
              nodes.splice(elementIndex, 1);
            }
            parentNodes.splice(index1, 1);
            index1--;
          }
        }
      }
      return [parentNodes, nodes];
    };
    ClearFormat3.removeChild = function(parentNodes, parentNode) {
      var count2 = parentNode.childNodes.length;
      if (count2 > 0) {
        for (var index = 0; index < count2; index++) {
          if (parentNodes.indexOf(parentNode.childNodes[index]) > -1) {
            parentNodes = this.removeChild(parentNodes, parentNode.childNodes[index]);
            parentNodes.splice(parentNodes.indexOf(parentNode.childNodes[index]), 1);
          }
        }
      }
      return parentNodes;
    };
    ClearFormat3.removeParent = function(parentNodes) {
      for (var index = 0; index < parentNodes.length; index++) {
        if (parentNodes.indexOf(parentNodes[index].parentNode) > -1) {
          parentNodes = this.removeChild(parentNodes, parentNodes[index]);
          parentNodes.splice(index, 1);
          index--;
        }
      }
      return parentNodes;
    };
    ClearFormat3.unWrap = function(docElement, parentNodes, nodeCutter, nodeSelection) {
      for (var index1 = 0; index1 < parentNodes.length; index1++) {
        if (this.NONVALID_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase()) > -1 && parentNodes[index1].parentNode && this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].parentNode.nodeName.toLowerCase()) > -1) {
          nodeSelection.setSelectionText(docElement, parentNodes[index1], parentNodes[index1], 0, parentNodes[index1].childNodes.length);
          InsertMethods.unwrap(nodeCutter.GetSpliceNode(nodeSelection.getRange(docElement), parentNodes[index1].parentNode));
        }
        if (parentNodes[index1].nodeName.toLocaleLowerCase() !== "p") {
          if (this.NONVALID_PARENT_TAGS.indexOf(parentNodes[index1].nodeName.toLowerCase()) < 0 && parentNodes[index1].parentNode.nodeName.toLocaleLowerCase() !== "p" && !((parentNodes[index1].nodeName.toLocaleLowerCase() === "blockquote" || parentNodes[index1].nodeName.toLocaleLowerCase() === "li") && this.IGNORE_PARENT_TAGS.indexOf(parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase()) > -1) && !(parentNodes[index1].childNodes.length === 1 && parentNodes[index1].childNodes[0].nodeName.toLocaleLowerCase() === "p")) {
            InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));
          }
          var childNodes = InsertMethods.unwrap(parentNodes[index1]);
          if (childNodes.length === 1 && childNodes[0].parentNode.nodeName.toLocaleLowerCase() === "p") {
            InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));
            InsertMethods.unwrap(parentNodes[index1]);
          }
          for (var index2 = 0; index2 < childNodes.length; index2++) {
            if (this.NONVALID_TAGS.indexOf(childNodes[index2].nodeName.toLowerCase()) > -1) {
              this.unWrap(docElement, [childNodes[index2]], nodeCutter, nodeSelection);
            } else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && childNodes[index2].nodeName.toLocaleLowerCase() !== "p") {
              var blockNodes = this.removeParent([childNodes[index2]]);
              this.unWrap(docElement, blockNodes, nodeCutter, nodeSelection);
            } else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && childNodes[index2].parentNode.nodeName.toLocaleLowerCase() === childNodes[index2].nodeName.toLocaleLowerCase()) {
              InsertMethods.unwrap(childNodes[index2]);
            } else if (this.BLOCK_TAGS.indexOf(childNodes[index2].nodeName.toLocaleLowerCase()) > -1 && childNodes[index2].nodeName.toLocaleLowerCase() === "p") {
              InsertMethods.Wrap(childNodes[index2], docElement.createElement(this.defaultTag));
              InsertMethods.unwrap(childNodes[index2]);
            }
          }
        } else {
          InsertMethods.Wrap(parentNodes[index1], docElement.createElement(this.defaultTag));
          InsertMethods.unwrap(parentNodes[index1]);
        }
      }
    };
    ClearFormat3.clearInlines = function(textNodes, nodes, range, nodeCutter, endNode) {
      for (var index = 0; index < textNodes.length; index++) {
        var currentInlineNode = textNodes[index];
        var currentNode = void 0;
        while (!this.domNode.isBlockNode(currentInlineNode) && (currentInlineNode.parentElement && !currentInlineNode.parentElement.classList.contains("e-img-inner"))) {
          currentNode = currentInlineNode;
          currentInlineNode = currentInlineNode.parentElement;
        }
        if (currentNode && IsFormatted.inlineTags.indexOf(currentNode.nodeName.toLocaleLowerCase()) > -1) {
          nodeCutter.GetSpliceNode(range, currentNode);
          this.removeInlineParent(currentNode);
        }
      }
    };
    ClearFormat3.removeInlineParent = function(textNodes) {
      var nodes = InsertMethods.unwrap(textNodes);
      for (var index = 0; index < nodes.length; index++) {
        if (nodes[index].parentNode.childNodes.length === 1 && !nodes[index].parentNode.classList.contains("e-img-inner") && IsFormatted.inlineTags.indexOf(nodes[index].parentNode.nodeName.toLocaleLowerCase()) > -1) {
          this.removeInlineParent(nodes[index].parentNode);
        } else if (IsFormatted.inlineTags.indexOf(nodes[index].nodeName.toLocaleLowerCase()) > -1) {
          this.removeInlineParent(nodes[index]);
        }
      }
    };
    ClearFormat3.BLOCK_TAGS = [
      "address",
      "article",
      "aside",
      "blockquote",
      "details",
      "dd",
      "div",
      "dl",
      "dt",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "header",
      "hgroup",
      "li",
      "main",
      "nav",
      "noscript",
      "ol",
      "p",
      "pre",
      "section",
      "ul"
    ];
    ClearFormat3.NONVALID_PARENT_TAGS = ["thead", "tbody", "ul", "ol", "table", "tfoot", "tr"];
    ClearFormat3.IGNORE_PARENT_TAGS = ["ul", "ol", "table"];
    ClearFormat3.NONVALID_TAGS = ["thead", "tbody", "figcaption", "td", "tr", "th", "tfoot", "figcaption", "li"];
    ClearFormat3.defaultTag = "p";
    return ClearFormat3;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/clearformat-exec.js
var ClearFormatExec = (
  /** @class */
  function() {
    function ClearFormatExec2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    ClearFormatExec2.prototype.addEventListener = function() {
      this.parent.observer.on(CLEAR_TYPE, this.applyClear, this);
      this.parent.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    };
    ClearFormatExec2.prototype.onKeyDown = function(e) {
      switch (e.event.action) {
        case "clear-format":
          this.applyClear({ subCommand: "ClearFormat", callBack: e.callBack, enterAction: e.enterAction });
          e.event.preventDefault();
          break;
      }
    };
    ClearFormatExec2.prototype.applyClear = function(e) {
      if (e.subCommand === "ClearFormat") {
        ClearFormat2.clear(this.parent.currentDocument, this.parent.editableElement, e.enterAction, e.selector, e.subCommand);
        if (e.callBack) {
          e.callBack({
            requestType: e.subCommand,
            event: e.event,
            editorMode: "HTML",
            range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
          });
        }
      }
    };
    return ClearFormatExec2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/undo.js
var UndoRedoManager = (
  /** @class */
  function() {
    function UndoRedoManager2(parent, options) {
      this.undoRedoStack = [];
      this.parent = parent;
      this.undoRedoSteps = !isNullOrUndefined(options) ? options.undoRedoSteps : 30;
      this.undoRedoTimer = !isNullOrUndefined(options) ? options.undoRedoTimer : 300;
      this.addEventListener();
    }
    UndoRedoManager2.prototype.addEventListener = function() {
      var debounceListener = debounce(this.keyUp, this.undoRedoTimer);
      this.parent.observer.on(KEY_UP_HANDLER, debounceListener, this);
      this.parent.observer.on(KEY_DOWN_HANDLER, this.keyDown, this);
      this.parent.observer.on(ACTION, this.onAction, this);
      this.parent.observer.on(MODEL_CHANGED_PLUGIN, this.onPropertyChanged, this);
    };
    UndoRedoManager2.prototype.onPropertyChanged = function(props) {
      for (var _i = 0, _a = Object.keys(props.newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "undoRedoSteps":
            this.undoRedoSteps = props.newProp.undoRedoSteps;
            break;
          case "undoRedoTimer":
            this.undoRedoTimer = props.newProp.undoRedoTimer;
            break;
        }
      }
    };
    UndoRedoManager2.prototype.removeEventListener = function() {
      this.parent.observer.off(KEY_UP_HANDLER, this.keyUp);
      this.parent.observer.off(KEY_DOWN_HANDLER, this.keyDown);
      this.parent.observer.off(ACTION, this.onAction);
    };
    UndoRedoManager2.prototype.onAction = function(e) {
      if (e.subCommand === "Undo") {
        this.undo(e);
      } else {
        this.redo(e);
      }
    };
    UndoRedoManager2.prototype.destroy = function() {
      this.removeEventListener();
    };
    UndoRedoManager2.prototype.keyDown = function(e) {
      var event2 = e.event;
      var proxy = this;
      switch (event2.action) {
        case "undo":
          event2.preventDefault();
          proxy.undo(e);
          break;
        case "redo":
          event2.preventDefault();
          proxy.redo(e);
          break;
      }
    };
    UndoRedoManager2.prototype.keyUp = function(e) {
      if (e.event.keyCode !== 17 && !e.event.ctrlKey) {
        this.saveData(e);
      }
    };
    UndoRedoManager2.prototype.getTextContentFromFragment = function(fragment) {
      var textContent = "";
      for (var i = 0; i < fragment.childNodes.length; i++) {
        var childNode = fragment.childNodes[i];
        if (childNode.nodeType === Node.TEXT_NODE) {
          textContent += childNode.textContent;
        } else if (childNode.nodeType === Node.ELEMENT_NODE) {
          textContent += this.getTextContentFromFragment(childNode);
        }
      }
      return textContent;
    };
    UndoRedoManager2.prototype.saveData = function(e) {
      var range = new NodeSelection().getRange(this.parent.currentDocument);
      var currentContainer = this.parent.editableElement === range.startContainer.parentElement ? range.startContainer.parentElement : range.startContainer;
      for (var i = currentContainer.childNodes.length - 1; i >= 0; i--) {
        if (!isNullOrUndefined(currentContainer.childNodes[i]) && currentContainer.childNodes[i].nodeName === "#text" && currentContainer.childNodes[i].textContent.length === 0 && currentContainer.childNodes[i].nodeName !== "IMG" && currentContainer.childNodes[i].nodeName !== "BR" && currentContainer.childNodes[i].nodeName && "HR") {
          detach(currentContainer.childNodes[i]);
        }
      }
      range = new NodeSelection().getRange(this.parent.currentDocument);
      var save = new NodeSelection().save(range, this.parent.currentDocument);
      var clonedElement = this.parent.editableElement.cloneNode(true);
      var fragment = document.createDocumentFragment();
      while (clonedElement.firstChild) {
        fragment.appendChild(clonedElement.firstChild);
      }
      var changEle = { text: fragment, range: save };
      if (this.undoRedoStack.length >= this.steps) {
        this.undoRedoStack = this.undoRedoStack.slice(0, this.steps + 1);
      }
      if (this.undoRedoStack.length > 1 && this.undoRedoStack[this.undoRedoStack.length - 1].range.range.collapsed === range.collapsed && this.undoRedoStack[this.undoRedoStack.length - 1].range.startOffset === save.range.startOffset && this.undoRedoStack[this.undoRedoStack.length - 1].range.endOffset === save.range.endOffset && this.undoRedoStack[this.undoRedoStack.length - 1].range.range.startContainer === save.range.startContainer && this.getTextContentFromFragment(this.undoRedoStack[this.undoRedoStack.length - 1].text).trim() === this.getTextContentFromFragment(changEle.text).trim()) {
        return;
      }
      this.undoRedoStack.push(changEle);
      this.steps = this.undoRedoStack.length - 1;
      if (this.steps > this.undoRedoSteps) {
        this.undoRedoStack.shift();
        this.steps--;
      }
      if (e && e.callBack) {
        e.callBack();
      }
    };
    UndoRedoManager2.prototype.undo = function(e) {
      if (this.steps > 0) {
        var range = this.undoRedoStack[this.steps - 1].range;
        var removedContent = this.undoRedoStack[this.steps - 1].text;
        this.parent.editableElement.innerHTML = "";
        this.parent.editableElement.appendChild(removedContent.cloneNode(true));
        this.parent.editableElement.focus();
        if (isIDevice2()) {
          setEditFrameFocus(this.parent.editableElement, e.selector);
        }
        range.restore();
        this.steps--;
        if (e.callBack) {
          e.callBack({
            requestType: "Undo",
            editorMode: "HTML",
            range,
            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument),
            event: e.event
          });
        }
      }
    };
    UndoRedoManager2.prototype.redo = function(e) {
      if (this.undoRedoStack[this.steps + 1] != null) {
        var range = this.undoRedoStack[this.steps + 1].range;
        var addedContent = this.undoRedoStack[this.steps + 1].text;
        this.parent.editableElement.innerHTML = "";
        this.parent.editableElement.appendChild(addedContent.cloneNode(true));
        this.parent.editableElement.focus();
        if (isIDevice2()) {
          setEditFrameFocus(this.parent.editableElement, e.selector);
        }
        range.restore();
        this.steps++;
        if (e.callBack) {
          e.callBack({
            requestType: "Redo",
            editorMode: "HTML",
            range,
            elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument),
            event: e.event
          });
        }
      }
    };
    UndoRedoManager2.prototype.getUndoStatus = function() {
      var status = { undo: false, redo: false };
      if (this.steps > 0) {
        status.undo = true;
      }
      if (this.undoRedoStack[this.steps + 1] != null) {
        status.redo = true;
      }
      return status;
    };
    return UndoRedoManager2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/ms-word-clean-up.js
var MsWordPaste = (
  /** @class */
  function() {
    function MsWordPaste2(parent) {
      this.olData = [
        "decimal",
        "lower-alpha",
        "lower-roman",
        "upper-alpha",
        "upper-roman",
        "lower-greek"
      ];
      this.ulData = [
        "disc",
        "square",
        "circle",
        "disc",
        "square",
        "circle"
      ];
      this.ignorableNodes = [
        "A",
        "APPLET",
        "B",
        "BLOCKQUOTE",
        "BR",
        "BUTTON",
        "CENTER",
        "CODE",
        "COL",
        "COLGROUP",
        "DD",
        "DEL",
        "DFN",
        "DIR",
        "DIV",
        "DL",
        "DT",
        "EM",
        "FIELDSET",
        "FONT",
        "FORM",
        "FRAME",
        "FRAMESET",
        "H1",
        "H2",
        "H3",
        "H4",
        "H5",
        "H6",
        "HR",
        "I",
        "IMG",
        "IFRAME",
        "INPUT",
        "INS",
        "LABEL",
        "LI",
        "OL",
        "OPTION",
        "P",
        "PARAM",
        "PRE",
        "Q",
        "S",
        "SELECT",
        "SPAN",
        "STRIKE",
        "STRONG",
        "SUB",
        "SUP",
        "TABLE",
        "TBODY",
        "TD",
        "TEXTAREA",
        "TFOOT",
        "TH",
        "THEAD",
        "TITLE",
        "TR",
        "TT",
        "U",
        "UL"
      ];
      this.blockNode = [
        "div",
        "p",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "address",
        "blockquote",
        "button",
        "center",
        "dd",
        "dir",
        "dl",
        "dt",
        "fieldset",
        "frameset",
        "hr",
        "iframe",
        "isindex",
        "li",
        "map",
        "menu",
        "noframes",
        "noscript",
        "object",
        "ol",
        "pre",
        "table",
        "tbody",
        "td",
        "tfoot",
        "th",
        "thead",
        "tr",
        "ul",
        "header",
        "article",
        "nav",
        "footer",
        "section",
        "aside",
        "main",
        "figure",
        "figcaption"
      ];
      this.borderStyle = ["border-top", "border-right", "border-bottom", "border-left"];
      this.upperRomanNumber = [
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII",
        "XIII",
        "XIV",
        "XV",
        "XVI",
        "XVII",
        "XVIII",
        "XIX",
        "XX"
      ];
      this.lowerRomanNumber = [
        "i",
        "ii",
        "iii",
        "iv",
        "v",
        "vi",
        "vii",
        "viii",
        "ix",
        "x",
        "xi",
        "xii",
        "xiii",
        "xiv",
        "xv",
        "xvi",
        "xvii",
        "xviii",
        "xix",
        "xx"
      ];
      this.lowerGreekNumber = [
        "α",
        "β",
        "γ",
        "δ",
        "ε",
        "ζ",
        "η",
        "θ",
        "ι",
        "κ",
        "λ",
        "μ",
        "ν",
        "ξ",
        "ο",
        "π",
        "ρ",
        "σ",
        "τ",
        "υ",
        "φ",
        "χ",
        "ψ",
        "ω"
      ];
      this.removableElements = ["o:p", "style"];
      this.listContents = [];
      this.parent = parent;
      this.addEventListener();
    }
    MsWordPaste2.prototype.addEventListener = function() {
      this.parent.observer.on(MS_WORD_CLEANUP_PLUGIN, this.wordCleanup, this);
    };
    MsWordPaste2.prototype.wordCleanup = function(e) {
      var wordPasteStyleConfig = !isNullOrUndefined(e.allowedStylePropertiesArray) ? e.allowedStylePropertiesArray : [];
      var listNodes = [];
      var tempHTMLContent = e.args.clipboardData.getData("text/HTML");
      var rtfData = e.args.clipboardData.getData("text/rtf");
      var elm = createElement("p");
      elm.setAttribute("id", "MSWord-Content");
      elm.innerHTML = tempHTMLContent;
      var patern = /class='?Mso|style='[^ ]*\bmso-/i;
      var patern2 = /class="?Mso|style="[^ ]*\bmso-/i;
      var patern3 = /(class="?Mso|class='?Mso|class="?Xl|class='?Xl|class=Xl|style="[^"]*\bmso-|style='[^']*\bmso-|w:WordDocument)/gi;
      var pattern4 = /style='mso-width-source:/i;
      if (patern.test(tempHTMLContent) || patern2.test(tempHTMLContent) || patern3.test(tempHTMLContent) || pattern4.test(tempHTMLContent)) {
        this.imageConversion(elm, rtfData);
        tempHTMLContent = tempHTMLContent.replace(/<img[^>]+>/i, "");
        this.addListClass(elm);
        listNodes = this.cleanUp(elm, listNodes);
        if (!isNullOrUndefined(listNodes[0]) && listNodes[0].parentElement.tagName !== "UL" && listNodes[0].parentElement.tagName !== "OL") {
          this.listConverter(listNodes);
        }
        this.cleanList(elm, "UL");
        this.cleanList(elm, "OL");
        this.styleCorrection(elm, wordPasteStyleConfig);
        this.removingComments(elm);
        this.removeUnwantedElements(elm);
        this.removeEmptyElements(elm);
        this.removeEmptyAnchorTag(elm);
        this.breakLineAddition(elm);
        this.removeClassName(elm);
        if (pattern4.test(tempHTMLContent)) {
          this.addTableBorderClass(elm);
        }
        var liChildren = elm.querySelectorAll("li");
        if (liChildren.length > 0) {
          for (var i = 0; i < liChildren.length; i++) {
            if (!isNullOrUndefined(liChildren[i].style.marginLeft)) {
              liChildren[i].style.marginLeft = "";
            }
          }
        }
        e.callBack(elm.innerHTML);
      } else {
        e.callBack(elm.innerHTML);
      }
    };
    MsWordPaste2.prototype.cleanList = function(elm, listTag) {
      var replacableElem = elm.querySelectorAll(listTag + " div");
      for (var j = replacableElem.length - 1; j >= 0; j--) {
        var parentElem = replacableElem[j].parentNode;
        while (replacableElem[j].firstChild) {
          parentElem.insertBefore(replacableElem[j].firstChild, replacableElem[j]);
        }
        var closestListElem = this.findClosestListElem(replacableElem[j]);
        if (closestListElem) {
          this.insertAfter(replacableElem[j], closestListElem);
        }
      }
    };
    MsWordPaste2.prototype.insertAfter = function(newNode, referenceNode) {
      referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    };
    MsWordPaste2.prototype.findClosestListElem = function(listElem) {
      var closestListElem;
      while (!isNullOrUndefined(listElem)) {
        listElem = !isNullOrUndefined(listElem.closest("ul")) && listElem.tagName !== "UL" ? listElem.closest("ul") : listElem.tagName !== "OL" ? listElem.closest("ol") : null;
        closestListElem = !isNullOrUndefined(listElem) ? listElem : closestListElem;
      }
      return closestListElem;
    };
    MsWordPaste2.prototype.addListClass = function(elm) {
      var allNodes = elm.querySelectorAll("*");
      for (var index = 0; index < allNodes.length; index++) {
        if (!isNullOrUndefined(allNodes[index].getAttribute("style")) && allNodes[index].getAttribute("style").replace(/ /g, "").replace("\n", "").indexOf("mso-list:l") >= 0 && allNodes[index].className.toLowerCase().indexOf("msolistparagraph") === -1 && allNodes[index].tagName.charAt(0) !== "H" && allNodes[index].tagName !== "LI" && allNodes[index].tagName !== "OL" && allNodes[index].tagName !== "UL") {
          allNodes[index].classList.add("msolistparagraph");
        }
      }
    };
    MsWordPaste2.prototype.addTableBorderClass = function(elm) {
      var allTableElm = elm.querySelectorAll("table");
      var hasTableBorder = false;
      for (var i = 0; i < allTableElm.length; i++) {
        for (var j = 0; j < this.borderStyle.length; j++) {
          if (allTableElm[i].innerHTML.indexOf(this.borderStyle[j]) >= 0) {
            hasTableBorder = true;
            break;
          }
        }
        if (hasTableBorder) {
          allTableElm[i].classList.add("e-rte-table-border");
          hasTableBorder = false;
        }
      }
    };
    MsWordPaste2.prototype.imageConversion = function(elm, rtfData) {
      this.checkVShape(elm);
      var imgElem = elm.querySelectorAll("img");
      for (var i = 0; i < imgElem.length; i++) {
        if (!isNullOrUndefined(imgElem[i].getAttribute("v:shapes")) && imgElem[i].getAttribute("v:shapes").indexOf("Picture") < 0 && imgElem[i].getAttribute("v:shapes").indexOf("圖片") < 0 && imgElem[i].getAttribute("v:shapes").indexOf("Grafik") < 0 && imgElem[i].getAttribute("v:shapes").toLowerCase().indexOf("image") < 0 && imgElem[i].getAttribute("v:shapes").indexOf("Graphic") < 0) {
          detach(imgElem[i]);
        }
      }
      imgElem = elm.querySelectorAll("img");
      var imgSrc = [];
      var base64Src = [];
      var imgName = [];
      var linkRegex = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
      if (imgElem.length > 0) {
        for (var i = 0; i < imgElem.length; i++) {
          imgSrc.push(imgElem[i].getAttribute("src"));
          imgName.push(imgElem[i].getAttribute("src").split("/")[imgElem[i].getAttribute("src").split("/").length - 1].split(".")[0]);
        }
        var hexValue = this.hexConversion(rtfData);
        for (var i = 0; i < hexValue.length; i++) {
          base64Src.push(this.convertToBase64(hexValue[i]));
        }
        for (var i = 0; i < imgElem.length; i++) {
          if (imgSrc[i].match(linkRegex)) {
            imgElem[i].setAttribute("src", imgSrc[i]);
          } else {
            imgElem[i].setAttribute("src", base64Src[i]);
          }
          imgElem[i].setAttribute("id", "msWordImg-" + imgName[i]);
        }
      }
    };
    MsWordPaste2.prototype.checkVShape = function(elm) {
      var allNodes = elm.querySelectorAll("*");
      for (var i = 0; i < allNodes.length; i++) {
        switch (allNodes[i].nodeName) {
          case "V:SHAPETYPE":
            detach(allNodes[i]);
            break;
          case "V:SHAPE":
            if (allNodes[i].firstElementChild.nodeName === "V:IMAGEDATA") {
              var src = allNodes[i].firstElementChild.getAttribute("src");
              var imgElement = createElement("img");
              imgElement.setAttribute("src", src);
              allNodes[i].parentElement.insertBefore(imgElement, allNodes[i]);
              detach(allNodes[i]);
            }
            break;
        }
      }
    };
    MsWordPaste2.prototype.convertToBase64 = function(hexValue) {
      var byteArr = this.conHexStringToBytes(hexValue.hex);
      var base64String = this.conBytesToBase64(byteArr);
      var base64 = hexValue.type ? "data:" + hexValue.type + ";base64," + base64String : null;
      return base64;
    };
    MsWordPaste2.prototype.conBytesToBase64 = function(byteArr) {
      var base64Str = "";
      var base64Char = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var byteArrLen = byteArr.length;
      for (var i = 0; i < byteArrLen; i += 3) {
        var array3 = byteArr.slice(i, i + 3);
        var array3length = array3.length;
        var array4 = [];
        if (array3length < 3) {
          for (var j = array3length; j < 3; j++) {
            array3[j] = 0;
          }
        }
        array4[0] = (array3[0] & 252) >> 2;
        array4[1] = (array3[0] & 3) << 4 | array3[1] >> 4;
        array4[2] = (array3[1] & 15) << 2 | (array3[2] & 192) >> 6;
        array4[3] = array3[2] & 63;
        for (var j = 0; j < 4; j++) {
          if (j <= array3length) {
            base64Str += base64Char.charAt(array4[j]);
          } else {
            base64Str += "=";
          }
        }
      }
      return base64Str;
    };
    MsWordPaste2.prototype.conHexStringToBytes = function(hex) {
      var byteArr = [];
      var byteArrLen = hex.length / 2;
      for (var i = 0; i < byteArrLen; i++) {
        byteArr.push(parseInt(hex.substr(i * 2, 2), 16));
      }
      return byteArr;
    };
    MsWordPaste2.prototype.hexConversion = function(rtfData) {
      var picHead = /\{\\pict[\s\S]+?\\bliptag\-?\d+(\\blipupi\-?\d+)?(\{\\\*\\blipuid\s?[\da-fA-F]+)?[\s\}]*?/;
      var pic = new RegExp("(?:(" + picHead.source + "))([\\da-fA-F\\s]+)\\}", "g");
      var fullImg = rtfData.match(pic);
      var imgType;
      var result = [];
      if (!isNullOrUndefined(fullImg)) {
        for (var i = 0; i < fullImg.length; i++) {
          if (picHead.test(fullImg[i])) {
            if (fullImg[i].indexOf("\\pngblip") !== -1) {
              imgType = "image/png";
            } else if (fullImg[i].indexOf("\\jpegblip") !== -1) {
              imgType = "image/jpeg";
            } else {
              continue;
            }
            result.push({
              hex: imgType ? fullImg[i].replace(picHead, "").replace(/[^\da-fA-F]/g, "") : null,
              type: imgType
            });
          }
        }
      }
      return result;
    };
    MsWordPaste2.prototype.removeClassName = function(elm) {
      var elmWithClass = elm.querySelectorAll("*[class]");
      for (var i = 0; i < elmWithClass.length; i++) {
        elmWithClass[i].removeAttribute("class");
      }
    };
    MsWordPaste2.prototype.breakLineAddition = function(elm) {
      var allElements = elm.querySelectorAll("*");
      for (var i = 0; i < allElements.length; i++) {
        if (allElements[i].children.length === 0 && allElements[i].innerHTML === "&nbsp;" && (allElements[i].innerHTML === "&nbsp;" && !allElements[i].closest("li")) && !allElements[i].closest("td") && (allElements[i].nodeName !== "SPAN" || allElements[i].nodeName === "SPAN" && (isNullOrUndefined(allElements[i].previousElementSibling) && isNullOrUndefined(allElements[i].nextElementSibling)))) {
          var detachableElement = this.findDetachElem(allElements[i]);
          var brElement = createElement("br");
          if (!isNullOrUndefined(detachableElement.parentElement)) {
            detachableElement.parentElement.insertBefore(brElement, detachableElement);
            detach(detachableElement);
          }
        }
      }
    };
    MsWordPaste2.prototype.findDetachElem = function(element) {
      var removableElement;
      if (!isNullOrUndefined(element.parentElement) && element.parentElement.textContent.trim() === "" && element.parentElement.tagName !== "TD" && isNullOrUndefined(element.parentElement.querySelector("img"))) {
        removableElement = this.findDetachElem(element.parentElement);
      } else {
        removableElement = element;
      }
      return removableElement;
    };
    MsWordPaste2.prototype.removeUnwantedElements = function(elm) {
      var innerElement = elm.innerHTML;
      for (var i = 0; i < this.removableElements.length; i++) {
        var regExpStartElem = new RegExp("<" + this.removableElements[i] + ">", "g");
        var regExpEndElem = new RegExp("</" + this.removableElements[i] + ">", "g");
        innerElement = innerElement.replace(regExpStartElem, "");
        innerElement = innerElement.replace(regExpEndElem, "");
      }
      elm.innerHTML = innerElement;
      elm.querySelectorAll(":empty");
    };
    MsWordPaste2.prototype.findDetachEmptyElem = function(element) {
      var removableElement;
      if (!isNullOrUndefined(element.parentElement)) {
        if (element.parentElement.textContent.trim() === "" && element.parentElement.getAttribute("id") !== "MSWord-Content" && !this.hasParentWithClass(element, "MsoListParagraph") && isNullOrUndefined(element.parentElement.querySelector("img"))) {
          removableElement = this.findDetachEmptyElem(element.parentElement);
        } else {
          removableElement = element;
        }
      } else {
        removableElement = null;
      }
      return removableElement;
    };
    MsWordPaste2.prototype.hasParentWithClass = function(element, className) {
      var currentParentElem = element.parentElement;
      while (!isNullOrUndefined(currentParentElem)) {
        if (currentParentElem.classList.contains(className)) {
          return true;
        }
        currentParentElem = currentParentElem.parentElement;
      }
      return false;
    };
    MsWordPaste2.prototype.removeEmptyElements = function(element) {
      var emptyElements = element.querySelectorAll(":empty");
      for (var i = 0; i < emptyElements.length; i++) {
        if (!isNullOrUndefined(emptyElements[i].closest("td")) && !isNullOrUndefined(emptyElements[i].closest("td").querySelector(".MsoNormal"))) {
          emptyElements[i].innerHTML = "-";
        }
        var lineWithDiv = true;
        if (emptyElements[i].tagName === "DIV") {
          lineWithDiv = emptyElements[i].style.borderBottom === "none" || emptyElements[i].style.borderBottom === "" ? true : false;
        }
        if (emptyElements[i].tagName !== "IMG" && emptyElements[i].tagName !== "BR" && emptyElements[i].tagName !== "IFRAME" && emptyElements[i].tagName !== "TD" && emptyElements[i].tagName !== "HR" && lineWithDiv) {
          var detachableElement = this.findDetachEmptyElem(emptyElements[i]);
          if (!isNullOrUndefined(detachableElement)) {
            detach(detachableElement);
          }
        }
      }
    };
    MsWordPaste2.prototype.styleCorrection = function(elm, wordPasteStyleConfig) {
      var styleElement = elm.querySelectorAll("style");
      if (styleElement.length > 0) {
        var styles = styleElement[0].innerHTML.match(/[\S ]+\s+{[\s\S]+?}/gi);
        var styleClassObject_1 = !isNullOrUndefined(styles) ? this.findStyleObject(styles) : null;
        var keys = Object.keys(styleClassObject_1);
        var values = keys.map(function(key) {
          return styleClassObject_1["" + key];
        });
        values = this.removeUnwantedStyle(values, wordPasteStyleConfig);
        this.filterStyles(elm, wordPasteStyleConfig);
        var resultElem = void 0;
        var fromClass = false;
        for (var i = 0; i < keys.length; i++) {
          if (keys[i].split(".")[0] === "") {
            resultElem = elm.getElementsByClassName(keys[i].split(".")[1]);
            fromClass = true;
          } else if (keys[i].split(".").length === 1 && keys[i].split(".")[0].indexOf("@") >= 0) {
            continue;
          } else if (keys[i].split(".").length === 1 && keys[i].split(".")[0].indexOf("@") < 0) {
            resultElem = elm.getElementsByTagName(keys[i]);
          } else {
            resultElem = elm.querySelectorAll(keys[i]);
          }
          for (var j = 0; j < resultElem.length; j++) {
            var styleProperty = resultElem[j].getAttribute("style");
            if (!isNullOrUndefined(styleProperty) && styleProperty.trim() !== "") {
              var valueSplit = values[i].split(";");
              if (!fromClass) {
                for (var k = 0; k < valueSplit.length; k++) {
                  if (styleProperty.indexOf(valueSplit[k].split(":")[0]) >= 0) {
                    valueSplit.splice(k, 1);
                    k--;
                  }
                }
              }
              var changedValue = styleProperty + valueSplit.join(";") + ";";
              resultElem[j].setAttribute("style", changedValue);
            } else {
              values[i] = values[i].replace(/text-indent:-(.*?)(?=;|$)/gm, "");
              resultElem[j].setAttribute("style", values[i]);
            }
          }
          fromClass = false;
        }
        var listClass = ["MsoListParagraphCxSpFirst", "MsoListParagraphCxSpMiddle", "MsoListParagraphCxSpLast"];
        for (var i = 0; i < listClass.length; i++) {
          if (keys.indexOf("li." + listClass[i]) > -1) {
            var olULElems = elm.querySelectorAll("ol." + listClass[i] + ", ul." + listClass[i]);
            for (var j = 0; j < olULElems.length; j++) {
              var styleProperty = olULElems[j].getAttribute("style");
              if (!isNullOrUndefined(styleProperty) && styleProperty.trim() !== "" && olULElems[j].style.marginLeft !== "") {
                var valueSplit = values[keys.indexOf("li." + listClass[i])].split(";");
                for (var k = 0; k < valueSplit.length; k++) {
                  if ("margin-left".indexOf(valueSplit[k].split(":")[0]) >= 0) {
                    if (!isNullOrUndefined(valueSplit[k].split(":")[1]) && valueSplit[k].split(":")[1].indexOf("in") >= 0 && olULElems[j].style.marginLeft.indexOf("in") >= 0) {
                      var classStyle = parseFloat(valueSplit[k].split(":")[1].split("in")[0]);
                      var inlineStyle = parseFloat(olULElems[j].style.marginLeft.split("in")[0]);
                      olULElems[j].style.marginLeft = inlineStyle - classStyle + "in";
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    MsWordPaste2.prototype.filterStyles = function(elm, wordPasteStyleConfig) {
      var elmWithStyles = elm.querySelectorAll("*[style]");
      for (var i = 0; i < elmWithStyles.length; i++) {
        var elemStyleProperty = elmWithStyles[i].getAttribute("style").split(";");
        var styleValue = "";
        for (var j = 0; j < elemStyleProperty.length; j++) {
          if (wordPasteStyleConfig.indexOf(elemStyleProperty[j].split(":")[0].trim()) >= 0) {
            styleValue += elemStyleProperty[j] + ";";
          }
        }
        elmWithStyles[i].setAttribute("style", styleValue);
      }
    };
    MsWordPaste2.prototype.removeUnwantedStyle = function(values, wordPasteStyleConfig) {
      for (var i = 0; i < values.length; i++) {
        var styleValues = values[i].split(";");
        values[i] = "";
        for (var j = 0; j < styleValues.length; j++) {
          if (wordPasteStyleConfig.indexOf(styleValues[j].split(":")[0]) >= 0) {
            values[i] += styleValues[j] + ";";
          }
        }
      }
      return values;
    };
    MsWordPaste2.prototype.findStyleObject = function(styles) {
      var styleClassObject = {};
      for (var i = 0; i < styles.length; i++) {
        var tempStyle = styles[i];
        var classNameCollection = tempStyle.replace(/([\S ]+\s+){[\s\S]+?}/gi, "$1");
        var stylesCollection = tempStyle.replace(/[\S ]+\s+{([\s\S]+?)}/gi, "$1");
        classNameCollection = classNameCollection.replace(/^[\s]|[\s]$/gm, "");
        stylesCollection = stylesCollection.replace(/^[\s]|[\s]$/gm, "");
        classNameCollection = classNameCollection.replace(/\n|\r|\n\r/g, "");
        stylesCollection = stylesCollection.replace(/\n|\r|\n\r/g, "");
        for (var classNames = classNameCollection.split(", "), j = 0; j < classNames.length; j++) {
          styleClassObject[classNames[j]] = stylesCollection;
        }
      }
      return styleClassObject;
    };
    MsWordPaste2.prototype.removingComments = function(elm) {
      var innerElement = elm.innerHTML;
      innerElement = innerElement.replace(/<!--[\s\S]*?-->/g, "");
      elm.innerHTML = innerElement;
    };
    MsWordPaste2.prototype.cleanUp = function(node, listNodes) {
      var tempCleaner = [];
      var prevflagState;
      var allNodes = node.querySelectorAll("*");
      for (var index = 0; index < allNodes.length; index++) {
        if (this.ignorableNodes.indexOf(allNodes[index].nodeName) === -1 || allNodes[index].nodeType === 3 && allNodes[index].textContent.trim() === "") {
          tempCleaner.push(allNodes[index]);
          continue;
        } else if (allNodes[index].className && allNodes[index].className.toLowerCase().indexOf("msolistparagraph") !== -1 && !isNullOrUndefined(allNodes[index].getAttribute("style")) && allNodes[index].getAttribute("style").indexOf("mso-list:") >= 0) {
          if (allNodes[index].className.indexOf("MsoListParagraphCxSpFirst") >= 0 && listNodes.length > 0 && listNodes[listNodes.length - 1] !== null) {
            listNodes.push(null);
          }
          listNodes.push(allNodes[index]);
        }
        if (prevflagState && this.blockNode.indexOf(allNodes[index].nodeName.toLowerCase()) !== -1 && !(allNodes[index].className && allNodes[index].className.toLowerCase().indexOf("msolistparagraph") !== -1 && !isNullOrUndefined(allNodes[index].getAttribute("style")) && allNodes[index].getAttribute("style").indexOf("mso-list:") >= 0)) {
          listNodes.push(null);
        }
        if (this.blockNode.indexOf(allNodes[index].nodeName.toLowerCase()) !== -1) {
          if (allNodes[index].className && allNodes[index].className.toLowerCase().indexOf("msolistparagraph") !== -1 && !isNullOrUndefined(allNodes[index].getAttribute("style")) && allNodes[index].getAttribute("style").indexOf("mso-list:") >= 0) {
            prevflagState = true;
          } else {
            prevflagState = false;
          }
        }
      }
      if (listNodes.length && listNodes[listNodes.length - 1] !== null) {
        listNodes.push(null);
      }
      return listNodes;
    };
    MsWordPaste2.prototype.listConverter = function(listNodes) {
      var level;
      var data = [];
      var collection = [];
      var content = "";
      var stNode;
      var currentListStyle = "";
      for (var i = 0; i < listNodes.length; i++) {
        if (listNodes[i] === null) {
          data.push({ content: this.makeConversion(collection), node: listNodes[i - 1] });
          collection = [];
          continue;
        }
        if (listNodes[i].getAttribute("style") && listNodes[i].getAttribute("style").indexOf("mso-outline-level") !== -1) {
          listNodes[i].setAttribute("style", listNodes[i].getAttribute("style").replace("mso-outline-level", "mso-outline"));
        }
        content = listNodes[i].getAttribute("style");
        if (content && content.indexOf("level") !== -1) {
          level = parseInt(content.charAt(content.indexOf("level") + 5), null);
        } else {
          level = 1;
        }
        this.listContents = [];
        this.getListContent(listNodes[i]);
        var type = void 0;
        var listStyleType = void 0;
        var startAttr = void 0;
        var styleMarginLeft = void 0;
        if (!isNullOrUndefined(this.listContents[0])) {
          type = this.listContents[0].trim().length > 1 ? "ol" : "ul";
          listStyleType = this.getlistStyleType(this.listContents[0], type);
          if (type === "ol" && (i === 0 || listNodes[i - 1] === null)) {
            var startString = this.listContents[0].split(".")[0];
            var listTypes = ["A", "a", "I", "i", "α", "1", "1-"];
            if (listTypes.indexOf(startString) === -1) {
              if (listStyleType === "decimal") {
                if (!isNaN(parseInt(startString, 10))) {
                  startAttr = parseInt(startString, 10);
                }
              } else if (listStyleType === "upper-alpha") {
                startAttr = startString.split(".")[0].charCodeAt(0) - 64;
              } else if (listStyleType === "lower-alpha") {
                startAttr = startString.split(".")[0].charCodeAt(0) - 96;
              } else if (listStyleType === "upper-roman") {
                startAttr = this.upperRomanNumber.indexOf(this.listContents[0].split(".")[0]) + 1;
              } else if (listStyleType === "lower-roman") {
                startAttr = this.lowerRomanNumber.indexOf(this.listContents[0].split(".")[0]) + 1;
              } else if (listStyleType === "lower-greek") {
                startAttr = this.lowerGreekNumber.indexOf(this.listContents[0].split(".")[0]) + 1;
              }
            }
            if (listNodes[i].style.marginLeft !== "") {
              styleMarginLeft = listNodes[i].style.marginLeft;
            }
          }
          var tempNode = [];
          for (var j = 1; j < this.listContents.length; j++) {
            tempNode.push(this.listContents[j]);
          }
          var currentClassName = void 0;
          if (!isNullOrUndefined(listNodes[i].className)) {
            currentClassName = listNodes[i].className;
          }
          if (!isNullOrUndefined(listNodes[i].getAttribute("style"))) {
            listNodes[i].setAttribute("style", listNodes[i].getAttribute("style").replace("text-align:start;", ""));
            if (listNodes[i].style.textAlign !== "") {
              listNodes[i].setAttribute("style", "text-align:" + listNodes[i].style.textAlign);
              currentListStyle = listNodes[i].getAttribute("style");
            }
          }
          collection.push({
            listType: type,
            content: tempNode,
            nestedLevel: level,
            class: currentClassName,
            listStyle: currentListStyle,
            listStyleTypeName: listStyleType,
            start: startAttr,
            styleMarginLeft
          });
        }
      }
      stNode = listNodes.shift();
      while (stNode) {
        var elemColl = [];
        for (var temp1 = 0; temp1 < data.length; temp1++) {
          if (data[temp1].node === stNode) {
            for (var index = 0; index < data[temp1].content.childNodes.length; index++) {
              elemColl.push(data[temp1].content.childNodes[index]);
            }
            for (var index = 0; index < elemColl.length; index++) {
              stNode.parentElement.insertBefore(elemColl[index], stNode);
            }
            break;
          }
        }
        stNode.remove();
        stNode = listNodes.shift();
        if (!stNode) {
          stNode = listNodes.shift();
        }
      }
    };
    MsWordPaste2.prototype.getlistStyleType = function(listContent, type) {
      var currentListClass;
      if (type === "ol") {
        var charCode = listContent.split(".")[0].charCodeAt(0);
        switch (true) {
          case this.upperRomanNumber.indexOf(listContent.split(".")[0]) > -1:
            currentListClass = "upper-roman";
            break;
          case this.lowerRomanNumber.indexOf(listContent.split(".")[0]) > -1:
            currentListClass = "lower-roman";
            break;
          case this.lowerGreekNumber.indexOf(listContent.split(".")[0]) > -1:
            currentListClass = "lower-greek";
            break;
          case (charCode > 64 && charCode < 91):
            currentListClass = "upper-alpha";
            break;
          case (charCode > 96 && charCode < 123):
            currentListClass = "lower-alpha";
            break;
          default:
            currentListClass = "decimal";
            break;
        }
      } else {
        switch (listContent.split(".")[0]) {
          case "o":
            currentListClass = "circle";
            break;
          case "§":
            currentListClass = "square";
            break;
          default:
            currentListClass = "disc";
            break;
        }
      }
      return currentListClass;
    };
    MsWordPaste2.prototype.makeConversion = function(collection) {
      var root = createElement("div");
      var temp;
      var pLevel = 1;
      var prevList;
      var listCount = 0;
      var elem;
      for (var index = 0; index < collection.length; index++) {
        var listClass = ["MsoListParagraphCxSpFirst", "MsoListParagraphCxSpMiddle", "MsoListParagraphCxSpLast"];
        var isNormalList = false;
        for (var i = 0; i < listClass.length; i++) {
          if (listClass[i].indexOf(collection[index].class) >= 0) {
            isNormalList = true;
            break;
          }
        }
        if (!isNullOrUndefined(prevList) && index !== 0 && collection[index - 1].listType !== collection[index].listType && !isNormalList) {
          prevList = null;
        }
        var pElement = createElement("p");
        pElement.innerHTML = collection[index].content.join(" ");
        if (collection[index].nestedLevel === 1 && listCount === 0 && collection[index].content) {
          root.appendChild(temp = createElement(collection[index].listType, { className: collection[index].class }));
          prevList = createElement("li");
          prevList.appendChild(pElement);
          temp.appendChild(prevList);
          temp.setAttribute("level", collection[index].nestedLevel.toString());
          temp.style.marginLeft = collection[index].styleMarginLeft;
          temp.style.listStyleType = collection[index].listStyleTypeName;
        } else if (collection[index].nestedLevel === pLevel) {
          if (prevList.parentElement.tagName.toLowerCase() === collection[index].listType) {
            prevList.parentElement.appendChild(prevList = createElement("li"));
            prevList.appendChild(pElement);
          } else {
            temp = createElement(collection[index].listType);
            temp.style.listStyleType = collection[index].listStyleTypeName;
            prevList.parentElement.parentElement.appendChild(temp);
            prevList = createElement("li");
            prevList.appendChild(pElement);
            temp.appendChild(prevList);
            temp.setAttribute("level", collection[index].nestedLevel.toString());
          }
        } else if (collection[index].nestedLevel > pLevel) {
          if (!isNullOrUndefined(prevList)) {
            for (var j = 0; j < collection[index].nestedLevel - pLevel; j++) {
              prevList.appendChild(temp = createElement(collection[index].listType));
              prevList = createElement("li");
              if (j !== collection[index].nestedLevel - pLevel - 1 && collection[index].nestedLevel - pLevel > 1) {
                prevList.style.listStyleType = "none";
              }
              temp.appendChild(prevList);
            }
            prevList.appendChild(pElement);
            temp.setAttribute("level", collection[index].nestedLevel.toString());
            temp.style.listStyleType = collection[index].listStyleTypeName;
          } else {
            if (collection[index].nestedLevel > pLevel && isNormalList) {
              var initialNode = void 0;
              initialNode = createElement(collection[index].listType);
              prevList = createElement("li");
              initialNode.appendChild(prevList);
              initialNode.style.listStyleType = "none";
              for (var j = 0; j < collection[index].nestedLevel - 1; j++) {
                prevList.appendChild(temp = createElement(collection[index].listType));
                prevList = createElement("li");
                temp.appendChild(prevList);
                temp.style.listStyleType = "none";
              }
              prevList.appendChild(pElement);
              root.appendChild(initialNode);
              temp.setAttribute("level", collection[index].nestedLevel.toString());
              temp.style.listStyleType = collection[index].listStyleTypeName;
            } else {
              root.appendChild(temp = createElement(collection[index].listType));
              prevList = createElement("li");
              prevList.appendChild(pElement);
              temp.appendChild(prevList);
              temp.setAttribute("level", collection[index].nestedLevel.toString());
              temp.style.listStyleType = collection[index].listStyleTypeName;
            }
          }
        } else if (collection[index].nestedLevel === 1) {
          if (root.lastChild.tagName.toLowerCase() === collection[index].listType) {
            temp = root.lastChild;
          } else {
            root.appendChild(temp = createElement(collection[index].listType));
            temp.style.listStyleType = collection[index].listStyleTypeName;
          }
          prevList = createElement("li");
          prevList.appendChild(pElement);
          temp.appendChild(prevList);
          temp.setAttribute("level", collection[index].nestedLevel.toString());
        } else {
          elem = prevList;
          while (elem.parentElement) {
            elem = elem.parentElement;
            if (elem.attributes.getNamedItem("level")) {
              if (parseInt(elem.attributes.getNamedItem("level").textContent, null) === collection[index].nestedLevel) {
                prevList = createElement("li");
                prevList.appendChild(pElement);
                elem.appendChild(prevList);
                break;
              } else if (collection[index].nestedLevel > parseInt(elem.attributes.getNamedItem("level").textContent, null)) {
                elem.appendChild(temp = createElement(collection[index].listType));
                prevList = createElement("li");
                prevList.appendChild(pElement);
                temp.appendChild(prevList);
                temp.setAttribute("level", collection[index].nestedLevel.toString());
                temp.style.listStyleType = collection[index].listStyleTypeName;
                break;
              }
            }
            continue;
          }
        }
        prevList.setAttribute("class", collection[index].class);
        var currentStyle = prevList.getAttribute("style");
        prevList.setAttribute("style", !isNullOrUndefined(currentStyle) ? currentStyle : "");
        pLevel = collection[index].nestedLevel;
        listCount++;
        if (!isNullOrUndefined(collection[index].start)) {
          temp.setAttribute("start", collection[index].start.toString());
        }
      }
      return root;
    };
    MsWordPaste2.prototype.getListContent = function(elem) {
      var pushContent = "";
      var firstChild = elem.firstElementChild;
      if (firstChild.textContent.trim() === "" && !isNullOrUndefined(firstChild.firstElementChild) && firstChild.firstElementChild.nodeName === "IMG") {
        pushContent = elem.innerHTML.trim();
        this.listContents.push("");
        this.listContents.push(pushContent);
      } else {
        if (firstChild.childNodes.length > 0) {
          var listOrder = firstChild.querySelector('span[style="mso-list:Ignore"]');
          if (!isNullOrUndefined(listOrder)) {
            this.listContents.push(listOrder.textContent.trim());
            detach(listOrder);
            this.removingComments(elem);
            this.removeUnwantedElements(elem);
          }
        }
      }
      this.listContents.push(elem.innerHTML);
    };
    MsWordPaste2.prototype.removeEmptyAnchorTag = function(element) {
      var removableElement = element.querySelectorAll("a:not([href])");
      for (var j = removableElement.length - 1; j >= 0; j--) {
        var parentElem = removableElement[j].parentNode;
        while (removableElement[j].firstChild) {
          parentElem.insertBefore(removableElement[j].firstChild, removableElement[j]);
        }
        parentElem.removeChild(removableElement[j]);
      }
    };
    return MsWordPaste2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/insert-text.js
var InsertTextExec = (
  /** @class */
  function() {
    function InsertTextExec2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    InsertTextExec2.prototype.addEventListener = function() {
      this.parent.observer.on(INSERT_TEXT_TYPE, this.insertText, this);
    };
    InsertTextExec2.prototype.insertText = function(e) {
      var node = document.createTextNode(e.value);
      InsertHtml.Insert(this.parent.currentDocument, node, this.parent.editableElement);
      if (e.callBack) {
        e.callBack({
          requestType: e.subCommand,
          editorMode: "HTML",
          event: e.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    return InsertTextExec2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/toolbar-status.js
var statusCollection = getDefaultHtmlTbStatus();
var ToolbarStatus = (
  /** @class */
  function() {
    function ToolbarStatus2() {
    }
    ToolbarStatus2.get = function(docElement, targetNode, formatNode, fontSize2, fontName, documentNode) {
      var formatCollection = JSON.parse(JSON.stringify(statusCollection));
      var nodeCollection = JSON.parse(JSON.stringify(statusCollection));
      var nodeSelection = new NodeSelection();
      var range = nodeSelection.getRange(docElement);
      var nodes = documentNode ? [documentNode] : range.collapsed ? nodeSelection.getNodeCollection(range) : nodeSelection.getSelectionNodeCollectionBr(range);
      var nodesLength = nodes.length;
      var isNodeChanged = false;
      for (var index = 0; index < nodes.length; index++) {
        while (nodes[index].nodeType === 3 && range.startContainer.nodeType === 3 && nodes[index].parentNode && nodes[index].parentNode.lastElementChild && nodes[index].parentNode.lastElementChild.nodeName !== "BR" && this.getImmediateBlockNode(nodes[index].parentNode).textContent.replace(/\u200B/g, "").length === 0 && range.startContainer.textContent.replace(/\u200B/g, "").length === 0 && nodeSelection.get(docElement).toString().replace(/\u200B/g, "").length === 0) {
          nodes[index] = nodes[index].parentNode.lastElementChild.firstChild;
          isNodeChanged = true;
        }
        if (isNodeChanged && nodes[index]) {
          nodeSelection.setCursorPoint(docElement, nodes[index], nodes[index].textContent.length);
          isNodeChanged = false;
        }
        if (nodes[index].nodeName !== "BR" && nodes[index].nodeType !== 3 || nodesLength > 1 && nodes[index].nodeType === 3 && nodes[index].textContent.trim() === "") {
          nodes.splice(index, 1);
          index--;
        }
      }
      for (var index = 0; index < nodes.length; index++) {
        formatCollection = this.getFormatParent(docElement, formatCollection, nodes[index], targetNode, formatNode, fontSize2, fontName);
        if (index === 0 && formatCollection.bold || !formatCollection.bold) {
          nodeCollection.bold = formatCollection.bold;
        }
        if (index === 0 && formatCollection.insertcode || !formatCollection.insertcode) {
          nodeCollection.insertcode = formatCollection.insertcode;
        }
        if (index === 0 && formatCollection.italic || !formatCollection.italic) {
          nodeCollection.italic = formatCollection.italic;
        }
        if (index === 0 && formatCollection.underline || !formatCollection.underline) {
          nodeCollection.underline = formatCollection.underline;
        }
        if (index === 0 && formatCollection.strikethrough || !formatCollection.strikethrough) {
          nodeCollection.strikethrough = formatCollection.strikethrough;
        }
        if (index === 0 && formatCollection.superscript || !formatCollection.superscript) {
          nodeCollection.superscript = formatCollection.superscript;
        }
        if (index === 0 && formatCollection.subscript || !formatCollection.subscript) {
          nodeCollection.subscript = formatCollection.subscript;
        }
        if (index === 0 && formatCollection.fontcolor || !formatCollection.fontcolor) {
          nodeCollection.fontcolor = formatCollection.fontcolor;
        }
        if (index === 0 && formatCollection.fontname || !formatCollection.fontname) {
          nodeCollection.fontname = formatCollection.fontname;
        }
        if (index === 0 && formatCollection.fontsize || !formatCollection.fontsize) {
          nodeCollection.fontsize = formatCollection.fontsize;
        }
        if (index === 0 && formatCollection.backgroundcolor || !formatCollection.backgroundcolor) {
          nodeCollection.backgroundcolor = formatCollection.backgroundcolor;
        }
        if (index === 0 && formatCollection.orderedlist || !formatCollection.orderedlist) {
          nodeCollection.orderedlist = formatCollection.orderedlist;
        }
        if (index === 0 && formatCollection.unorderedlist || !formatCollection.unorderedlist) {
          nodeCollection.unorderedlist = formatCollection.unorderedlist;
        }
        if (index === 0 && formatCollection.alignments || !formatCollection.alignments) {
          nodeCollection.alignments = formatCollection.alignments;
        }
        if (index === 0 && formatCollection.formats || !formatCollection.formats) {
          nodeCollection.formats = formatCollection.formats;
        }
        if (index === 0 && formatCollection.createlink || !formatCollection.createlink) {
          nodeCollection.createlink = formatCollection.createlink;
        }
        if (index === 0 && formatCollection.numberFormatList || !formatCollection.numberFormatList) {
          nodeCollection.numberFormatList = formatCollection.numberFormatList;
        }
        if (index === 0 && formatCollection.bulletFormatList || !formatCollection.bulletFormatList) {
          nodeCollection.bulletFormatList = formatCollection.bulletFormatList;
        }
        formatCollection = JSON.parse(JSON.stringify(statusCollection));
      }
      return nodeCollection;
    };
    ToolbarStatus2.getImmediateBlockNode = function(node) {
      do {
        node = node.parentNode;
      } while (node && BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) < 0);
      return node;
    };
    ToolbarStatus2.getFormatParent = function(docElement, formatCollection, node, targetNode, formatNode, fontSize2, fontName) {
      if (targetNode.contains(node) || node.nodeType === 3 && targetNode.nodeType !== 3 && targetNode.contains(node.parentNode)) {
        do {
          formatCollection = this.isFormattedNode(docElement, formatCollection, node, formatNode, fontSize2, fontName);
          node = node.parentNode;
        } while (node && node !== targetNode);
      }
      return formatCollection;
    };
    ToolbarStatus2.isFormattedNode = function(docElement, formatCollection, node, formatNode, fontSize2, fontName) {
      if (!formatCollection.bold) {
        formatCollection.bold = IsFormatted.isBold(node);
      }
      if (!formatCollection.italic) {
        formatCollection.italic = IsFormatted.isItalic(node);
      }
      if (!formatCollection.underline) {
        formatCollection.underline = IsFormatted.isUnderline(node);
      }
      if (!formatCollection.strikethrough) {
        formatCollection.strikethrough = IsFormatted.isStrikethrough(node);
      }
      if (!formatCollection.superscript) {
        formatCollection.superscript = IsFormatted.isSuperscript(node);
      }
      if (!formatCollection.subscript) {
        formatCollection.subscript = IsFormatted.isSubscript(node);
      }
      if (!formatCollection.fontcolor) {
        formatCollection.fontcolor = this.isFontColor(docElement, node);
      }
      if (!formatCollection.fontname) {
        formatCollection.fontname = this.isFontName(docElement, node, fontName);
      }
      if (!formatCollection.fontsize) {
        formatCollection.fontsize = this.isFontSize(docElement, node, fontSize2);
      }
      if (!formatCollection.backgroundcolor) {
        formatCollection.backgroundcolor = this.isBackgroundColor(node);
      }
      if (!formatCollection.orderedlist) {
        formatCollection.orderedlist = this.isOrderedList(node);
      }
      if (!formatCollection.unorderedlist) {
        formatCollection.unorderedlist = this.isUnorderedList(node);
      }
      if (!formatCollection.alignments) {
        formatCollection.alignments = this.isAlignment(node);
      }
      if (!formatCollection.formats) {
        formatCollection.formats = this.isFormats(node, formatNode);
        if (formatCollection.formats === "pre") {
          formatCollection.insertcode = true;
        }
      }
      if (!formatCollection.createlink) {
        formatCollection.createlink = this.isLink(node);
      }
      if (!formatCollection.numberFormatList) {
        formatCollection.numberFormatList = this.isNumberFormatList(node);
      }
      if (!formatCollection.bulletFormatList) {
        formatCollection.bulletFormatList = this.isBulletFormatList(node);
      }
      return formatCollection;
    };
    ToolbarStatus2.isFontColor = function(docElement, node) {
      var color = node.style && node.style.color;
      if ((color === null || color === void 0 || color === "") && node.nodeType !== 3) {
        color = this.getComputedStyle(docElement, node, "color");
      }
      if (color !== null && color !== "" && color !== void 0) {
        return color;
      } else {
        return null;
      }
    };
    ToolbarStatus2.isLink = function(node) {
      if (node.nodeName.toLocaleLowerCase() === "a") {
        return true;
      } else {
        return false;
      }
    };
    ToolbarStatus2.isBackgroundColor = function(node) {
      var backColor = node.style && node.style.backgroundColor;
      if (backColor !== null && backColor !== "" && backColor !== void 0) {
        return backColor;
      } else {
        return null;
      }
    };
    ToolbarStatus2.isFontSize = function(docElement, node, fontSize2) {
      var size = node.style && node.style.fontSize;
      if ((size === null || size === void 0 || size === "") && node.nodeType !== 3 && node.parentElement.classList.contains("e-content")) {
        size = this.getComputedStyle(docElement, node, "font-size");
      }
      if (size !== null && size !== "" && size !== void 0 && (fontSize2 === null || fontSize2 === void 0 || fontSize2.indexOf(size) > -1)) {
        return size;
      } else {
        return null;
      }
    };
    ToolbarStatus2.isFontName = function(docElement, node, fontName) {
      var name = node.style && node.style.fontFamily;
      if ((name === null || name === void 0 || name === "") && node.nodeType !== 3) {
        name = this.getComputedStyle(docElement, node, "font-family");
      }
      var index = null;
      if (name !== null && name !== "" && name !== void 0 && (fontName === null || fontName === void 0 || fontName.filter(function(value, pos) {
        var pattern = new RegExp(name, "i");
        if (value.replace(/"/g, "").replace(/ /g, "").toLowerCase() === name.replace(/"/g, "").replace(/ /g, "").toLowerCase() || value.split(",")[0] && value.split(",")[0].search(pattern) > -1) {
          index = pos;
        }
      }) && index !== null)) {
        return index !== null ? fontName[index] : name.replace(/"/g, "");
      } else {
        return null;
      }
    };
    ToolbarStatus2.isOrderedList = function(node) {
      if (node.nodeName.toLocaleLowerCase() === "ol") {
        return true;
      } else {
        return false;
      }
    };
    ToolbarStatus2.isUnorderedList = function(node) {
      if (node.nodeName.toLocaleLowerCase() === "ul") {
        return true;
      } else {
        return false;
      }
    };
    ToolbarStatus2.isAlignment = function(node) {
      var align = node.style && node.style.textAlign;
      if (align === "left") {
        return "justifyleft";
      } else if (align === "center") {
        return "justifycenter";
      } else if (align === "right") {
        return "justifyright";
      } else if (align === "justify") {
        return "justifyfull";
      } else {
        return null;
      }
    };
    ToolbarStatus2.isFormats = function(node, formatNode) {
      if ((formatNode === void 0 || formatNode === null) && BLOCK_TAGS.indexOf(node.nodeName.toLocaleLowerCase()) > -1 || formatNode !== null && formatNode !== void 0 && formatNode.indexOf(node.nodeName.toLocaleLowerCase()) > -1) {
        return node.nodeName.toLocaleLowerCase();
      } else {
        return null;
      }
    };
    ToolbarStatus2.getComputedStyle = function(docElement, node, prop) {
      return docElement.defaultView.getComputedStyle(node, null).getPropertyValue(prop);
    };
    ToolbarStatus2.isNumberFormatList = function(node) {
      var list = node.style && node.style.listStyleType;
      if (list === "lower-alpha") {
        return "Lower Alpha";
      } else if (list === "number") {
        return "Number";
      } else if (list === "upper-alpha") {
        return "Upper Alpha";
      } else if (list === "lower-roman") {
        return "Lower Roman";
      } else if (list === "upper-roman") {
        return "Upper Roman";
      } else if (list === "lower-greek") {
        return "Lower Greek";
      } else if (list === "none") {
        return "None";
      } else if (this.isOrderedList(node)) {
        return true;
      } else {
        return null;
      }
    };
    ToolbarStatus2.isBulletFormatList = function(node) {
      var list = node.style && node.style.listStyleType;
      if (list === "circle") {
        return "Circle";
      } else if (list === "square") {
        return "Square";
      } else if (list === "none") {
        return "None";
      } else if (list === "disc") {
        return "Disc";
      } else if (this.isUnorderedList(node)) {
        return true;
      } else {
        return null;
      }
    };
    return ToolbarStatus2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/emoji-picker-action.js
var EmojiPickerAction = (
  /** @class */
  function() {
    function EmojiPickerAction2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    EmojiPickerAction2.prototype.addEventListener = function() {
      this.parent.observer.on(EMOJI_PICKER_ACTIONS, this.emojiInsert, this);
    };
    EmojiPickerAction2.prototype.emojiInsert = function(args) {
      var node = document.createTextNode(args.value);
      var selection = window.getSelection();
      var range = selection.getRangeAt(0);
      var cursorPos = range.startOffset;
      for (var i = cursorPos - 1; i >= cursorPos - 15; i--) {
        var prevChar_1 = selection.focusNode.textContent.substring(i - 1, i);
        var isPrevSpace_1 = /:$/.test(prevChar_1);
        if (isPrevSpace_1) {
          this.beforeApplyFormat(true);
          break;
        }
      }
      var colon = /:$/.test(selection.focusNode.textContent.charAt(cursorPos - 1));
      var prevChar = selection.focusNode.textContent.charAt(cursorPos - 2);
      var isPrevSpace = /\s/.test(prevChar);
      if (colon && (isPrevSpace || selection.focusOffset === 1)) {
        this.beforeApplyFormat(true);
      }
      InsertHtml.Insert(this.parent.currentDocument, node, this.parent.editableElement);
      if (args.callBack) {
        args.callBack({
          requestType: args.subCommand,
          editorMode: "HTML",
          event: args.event,
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    EmojiPickerAction2.prototype.beforeApplyFormat = function(isBlockFormat) {
      var range1 = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      var node = this.parent.nodeSelection.getNodeCollection(range1)[0];
      var blockNewLine = !(node.parentElement.innerHTML.replace(/&nbsp;|<br>/g, "").trim() === ":" || node.textContent.trim().indexOf("/") === 0);
      var startNode = node;
      if (blockNewLine && isBlockFormat) {
        while (startNode !== this.parent.editableElement) {
          startNode = startNode.parentElement;
        }
      }
      var startPoint = range1.startOffset;
      while (this.parent.nodeSelection.getRange(document).toString().indexOf(":") === -1) {
        this.parent.nodeSelection.setSelectionText(document, node, node, startPoint, range1.endOffset);
        startPoint--;
      }
      var range2 = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      var node2 = this.parent.nodeCutter.GetSpliceNode(range2, node);
      node2.parentNode.removeChild(node2);
    };
    return EmojiPickerAction2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/format-painter-actions.js
var FormatPainterActions = (
  /** @class */
  function() {
    function FormatPainterActions2(parent, options) {
      this.INVALID_TAGS = ["A", "AUDIO", "IMG", "VIDEO", "IFRAME"];
      this.parent = parent;
      this.settings = options;
      this.addEventListener();
      this.setDeniedFormats();
    }
    FormatPainterActions2.prototype.addEventListener = function() {
      this.parent.observer.on(FORMAT_PAINTER_ACTIONS, this.actionHandler, this);
      this.parent.observer.on(MODEL_CHANGED_PLUGIN, this.onPropertyChanged, this);
    };
    FormatPainterActions2.prototype.onPropertyChanged = function(prop) {
      if (prop && prop.module === "formatPainter") {
        if (!isNullOrUndefined(prop.newProp.formatPainterSettings.allowedFormats)) {
          this.settings.allowedFormats = prop.newProp.formatPainterSettings.allowedFormats;
        }
        if (!isNullOrUndefined(prop.newProp.formatPainterSettings.deniedFormats)) {
          this.settings.deniedFormats = prop.newProp.formatPainterSettings.deniedFormats;
          this.setDeniedFormats();
        }
      }
    };
    FormatPainterActions2.prototype.removeEventListener = function() {
      this.parent.observer.off(FORMAT_PAINTER_ACTIONS, this.actionHandler);
      this.parent.observer.off(MODEL_CHANGED_PLUGIN, this.onPropertyChanged);
    };
    FormatPainterActions2.prototype.destroy = function() {
      this.removeEventListener();
      this.INVALID_TAGS = null;
      this.copyCollection = null;
      this.deniedFormatsCollection = null;
      this.newElem = null;
      this.newElemLastChild = null;
      this.settings = null;
      this.parent = null;
    };
    FormatPainterActions2.prototype.actionHandler = function(args) {
      this.settings.allowedContext = ["Text", "List", "Table"];
      if (!isNullOrUndefined(args) && !isNullOrUndefined(args.item) && !isNullOrUndefined(args.item.formatPainterAction)) {
        switch (args.item.formatPainterAction) {
          case "format-copy":
            this.copyAction();
            break;
          case "format-paste":
            this.pasteAction();
            break;
          case "escape":
            this.escapeAction();
            break;
        }
        this.callBack(args);
      }
    };
    FormatPainterActions2.prototype.callBack = function(event2) {
      if (event2.callBack) {
        event2.callBack({
          requestType: "FormatPainter",
          action: event2.item.formatPainterAction,
          event: event2.event,
          editorMode: "HTML",
          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),
          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)
        });
      }
    };
    FormatPainterActions2.prototype.generateElement = function() {
      var copyCollection = this.copyCollection.slice();
      copyCollection.reverse();
      var length = copyCollection.length;
      var elemCollection = createElement("div", { className: "e-format-paste-wrapper" });
      var lastAppendChild;
      for (var i = 0; i < length; i++) {
        var _a = copyCollection[i], attrs = _a.attrs, className = _a.className, styles = _a.styles, tagName = _a.tagName;
        var elem = createElement(tagName);
        if (className !== "") {
          elem.className = className;
        }
        for (var i_1 = 0; i_1 < attrs.length; i_1++) {
          var property = attrs[i_1].name;
          var value = attrs[i_1].value;
          elem.setAttribute(property, value);
        }
        for (var i_2 = 0; i_2 < styles.length; i_2++) {
          var property = styles[i_2].property;
          var value = styles[i_2].value;
          var priority = styles[i_2].priority;
          elem.style.setProperty(property, value, priority);
        }
        if (elemCollection.childElementCount === 0) {
          elemCollection.append(elem);
          lastAppendChild = elem;
        } else {
          lastAppendChild.append(elem);
          lastAppendChild = elem;
        }
      }
      var elemChild = this.removeDeniedFormats(elemCollection);
      var currentElem = elemChild;
      while (currentElem) {
        if (currentElem.firstChild === null) {
          lastAppendChild = currentElem;
          currentElem = void 0;
        } else {
          currentElem = currentElem.firstChild;
        }
      }
      this.newElem = elemChild;
      this.newElemLastChild = lastAppendChild;
    };
    FormatPainterActions2.prototype.pasteAction = function() {
      if (isNullOrUndefined(this.copyCollection) || this.copyCollection.length === 0) {
        this.paintPlainTextFormat();
        return;
      }
      this.insertFormatNode(this.newElem, this.newElemLastChild);
    };
    FormatPainterActions2.prototype.removeDeniedFormats = function(parentElement) {
      if (!isNullOrUndefined(this.deniedFormatsCollection) && this.deniedFormatsCollection.length > 0) {
        var deniedPropArray = this.deniedFormatsCollection;
        var length_1 = deniedPropArray.length;
        for (var i = 0; i < length_1; i++) {
          var tag = deniedPropArray[i].tag;
          if (deniedPropArray[i].tag) {
            var elementsList = parentElement.querySelectorAll(tag);
            for (var j = 0; j < elementsList.length; j++) {
              if (deniedPropArray[i].classes.length > 0) {
                var classes = deniedPropArray[i].classes;
                var classLength = classes.length;
                for (var k = 0; k < classLength; k++) {
                  if (elementsList[j].classList.contains(classes[k])) {
                    removeClass([elementsList[j]], classes[k].trim());
                  }
                }
                if (elementsList[j].classList.length === 0) {
                  elementsList[j].removeAttribute("class");
                }
              }
              if (deniedPropArray[i].styles.length > 0) {
                var styles = deniedPropArray[i].styles;
                var styleLength = styles.length;
                for (var k = 0; k < styleLength; k++) {
                  elementsList[j].style.removeProperty(styles[k].trim());
                }
                if (elementsList[j].style.length === 0) {
                  elementsList[j].removeAttribute("style");
                }
              }
              if (deniedPropArray[i].attributes.length > 0) {
                var attributes2 = deniedPropArray[i].attributes;
                var attributeLength = attributes2.length;
                for (var k = 0; k < attributeLength; k++) {
                  elementsList[j].removeAttribute(attributes2[k].trim());
                }
              }
            }
          }
        }
      }
      return parentElement.firstElementChild;
    };
    FormatPainterActions2.prototype.copyAction = function() {
      var copyCollection = [];
      var range = this.parent.nodeSelection.getRange(document);
      var domSelection = this.parent.nodeSelection;
      var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range);
      if (nodes.length === 0 && domSelection.getSelectionNodeCollectionBr(range).length === 0) {
        return;
      } else {
        nodes = nodes.length === 0 ? domSelection.getSelectionNodeCollectionBr(range) : nodes;
      }
      var parentElem = nodes[0].parentElement;
      var currentContext = this.findCurrentContext(parentElem);
      var allowedRulesArray = this.settings.allowedFormats.indexOf(";") > -1 ? this.settings.allowedFormats.split(";") : [this.settings.allowedFormats];
      for (var i = 0; i < allowedRulesArray.length; i++) {
        allowedRulesArray[i] = allowedRulesArray[i].trim();
      }
      var _a = this.getRangeParentElem(currentContext, parentElem), rangeParentElem = _a[0], context = _a[1];
      if (currentContext === null) {
        currentContext = context;
      }
      if (!isNullOrUndefined(currentContext) && this.settings.allowedContext.indexOf(currentContext) > -1) {
        if (range.startContainer.nodeName === "#text") {
          parentElem = range.startContainer.parentElement;
        }
        var lastElement = parentElem;
        do {
          if (allowedRulesArray.indexOf(parentElem.nodeName.toLowerCase()) > -1) {
            var allAttributes = parentElem.attributes;
            var attribute = [];
            for (var i = 0; i < allAttributes.length; i++) {
              if (allAttributes[i].name !== "class" && allAttributes[i].name !== "style") {
                attribute.push(allAttributes[i]);
              }
            }
            var classes = parentElem.className;
            var allStyles = parentElem.style;
            var styleProp = [];
            for (var i = 0; i < allStyles.length; i++) {
              var property = allStyles[i];
              var value = allStyles.getPropertyValue(property);
              var priority = allStyles.getPropertyPriority(property);
              styleProp.push({ property, value, priority });
            }
            copyCollection.push({
              attrs: attribute,
              className: classes,
              styles: styleProp,
              tagName: parentElem.nodeName
            });
          }
          if (rangeParentElem === parentElem) {
            parentElem = void 0;
          } else if (!isNullOrUndefined(parentElem.parentElement)) {
            parentElem = parentElem.parentElement;
          }
          if (lastElement === parentElem) {
            break;
          }
        } while (!isNullOrUndefined(parentElem) || parentElem === this.parent.editableElement);
        this.copyCollection = copyCollection;
      }
      this.generateElement();
    };
    FormatPainterActions2.prototype.getRangeParentElem = function(currentContext, rangeParent) {
      var startContainer = rangeParent;
      var rangeParentELem;
      if (startContainer.nodeType === 3) {
        startContainer = startContainer.parentElement;
      }
      switch (currentContext) {
        case "Table":
          rangeParentELem = closest(startContainer, "td");
          if (isNullOrUndefined(rangeParentELem)) {
            rangeParentELem = closest(startContainer, "th");
          }
          break;
        case "List":
          rangeParentELem = closest(startContainer, "li");
          break;
        case "Text":
          rangeParentELem = closest(startContainer, "p");
          break;
      }
      if (isNullOrUndefined(rangeParentELem)) {
        var nearBlockParentName = this.getNearestBlockParentElement(rangeParent);
        if (!isNullOrUndefined(nearBlockParentName) && nearBlockParentName !== "UL" && nearBlockParentName !== "OL" && nearBlockParentName !== "LI") {
          rangeParentELem = closest(startContainer, nearBlockParentName);
          currentContext = "Text";
        }
      }
      if (currentContext === "List") {
        rangeParentELem = rangeParentELem.parentElement;
      }
      return [rangeParentELem, currentContext];
    };
    FormatPainterActions2.prototype.getNearestBlockParentElement = function(rangeParent) {
      var node = rangeParent;
      if (node.nodeType === 3) {
        node = node.parentNode;
      }
      while (node && node !== this.parent.editableElement) {
        if (!isNullOrUndefined(node) && this.isBlockElement(node)) {
          return node.nodeName;
        }
        node = node.parentNode;
      }
      return null;
    };
    FormatPainterActions2.prototype.isBlockElement = function(node) {
      var blockTags = [
        "P",
        "DIV",
        "UL",
        "OL",
        "LI",
        "H1",
        "H2",
        "H3",
        "H4",
        "H5",
        "H6",
        "ADDRESS",
        "ARTICLE",
        "ASIDE",
        "BLOCKQUOTE",
        "FIGCAPTION",
        "FIGURE",
        "FOOTER",
        "HEADER",
        "HR",
        "MAIN",
        "NAV",
        "SECTION",
        "SUMMARY",
        "PRE"
      ];
      return blockTags.indexOf(node.nodeName) > -1;
    };
    FormatPainterActions2.prototype.escapeAction = function() {
      this.copyCollection = [];
    };
    FormatPainterActions2.prototype.paintPlainTextFormat = function() {
      var range = this.parent.nodeSelection.getRange(this.parent.currentDocument);
      var domSelection = this.parent.nodeSelection;
      var nodes = range.collapsed ? domSelection.getSelectionNodeCollection(range) : domSelection.getSelectionNodeCollectionBr(range);
      var isInValid;
      if (nodes.length > 1) {
        for (var i = 0; i < nodes.length; i++) {
          isInValid = this.validateELementTag(nodes[i]);
        }
      } else {
        isInValid = this.validateELementTag(range.startContainer) && this.validateELementTag(range.endContainer);
      }
      if (!isInValid) {
        this.parent.execCommand("Clear", "ClearFormat", null, null);
      }
    };
    FormatPainterActions2.prototype.validateELementTag = function(node) {
      if (node.nodeType === 3) {
        node = node.parentElement;
      }
      return this.INVALID_TAGS.indexOf(node.tagName) > -1;
    };
    FormatPainterActions2.prototype.findCurrentContext = function(parentElem) {
      if (closest(parentElem, "p")) {
        return "Text";
      } else if (closest(parentElem, "li")) {
        return "List";
      } else if (closest(parentElem, "td") || closest(parentElem, "tr") || closest(parentElem, "th")) {
        return "Table";
      }
      return null;
    };
    FormatPainterActions2.prototype.insertFormatNode = function(elem, lastChild) {
      var clonedElem = elem.cloneNode(true);
      if (!this.isBlockElement(elem)) {
        var newBlockElem = createElement("P");
        newBlockElem.appendChild(elem);
        clonedElem = newBlockElem.cloneNode(true);
      }
      var endNode = this.parent.editableElement;
      var docElement = this.parent.currentDocument;
      var childElem = clonedElem.firstChild;
      var inlineElement;
      while (childElem) {
        if (this.isBlockElement(childElem)) {
          childElem = childElem.firstChild;
        } else {
          inlineElement = childElem.parentNode.removeChild(childElem);
          break;
        }
      }
      var formatValues = {
        element: inlineElement,
        lastChild
      };
      SelectionCommands.applyFormat(docElement, null, endNode, "P", "formatPainter", null, formatValues);
      var range = this.parent.nodeSelection.getRange(docElement);
      var isCollapsed = range.collapsed;
      var blockNodes = this.parent.domNode.blockNodes();
      var isFullNodeSelected = false;
      if (blockNodes.length === 1) {
        isFullNodeSelected = blockNodes[0].textContent.trim() === range.toString().trim();
      }
      if (this.isBlockElement(clonedElem) && isCollapsed || blockNodes.length > 1 || isFullNodeSelected) {
        this.insertBlockNode(clonedElem, range, docElement, blockNodes);
      }
    };
    FormatPainterActions2.prototype.insertBlockNode = function(element, range, docElement, nodes) {
      var domSelection = this.parent.nodeSelection;
      var saveSelection = domSelection.save(range, docElement);
      this.parent.domNode.setMarker(saveSelection);
      var listElement;
      var cloneListParentNode;
      var sameListType = false;
      if (element.nodeName === "UL" || element.nodeName === "OL") {
        cloneListParentNode = element.cloneNode(true);
        listElement = cloneListParentNode.firstChild;
      }
      var cloneElementNode = isNullOrUndefined(cloneListParentNode) ? element : element.firstChild;
      for (var index = 0; index < nodes.length; index++) {
        if (this.INVALID_TAGS.indexOf(nodes[index].nodeName) > -1 || nodes[index].querySelectorAll("a,img,audio,video,iframe").length > 0) {
          continue;
        }
        var cloneParentNode = cloneElementNode.cloneNode(false);
        while (nodes[index].firstChild) {
          if (nodes[index].textContent.trim().length !== 0) {
            cloneParentNode.appendChild(nodes[index].firstChild);
          } else {
            nodes[index].removeChild(nodes[index].firstChild);
          }
        }
        if (nodes[index].nodeName === "TD" || nodes[index].nodeName === "TH") {
          if (isNullOrUndefined(cloneListParentNode)) {
            nodes[index].appendChild(cloneParentNode);
            continue;
          } else if (index === 0 && !isNullOrUndefined(cloneListParentNode)) {
            nodes[index].appendChild(cloneListParentNode);
            cloneListParentNode.appendChild(cloneParentNode);
            continue;
          } else {
            nodes[index].appendChild(cloneParentNode);
            continue;
          }
        }
        if (!isNullOrUndefined(cloneListParentNode)) {
          sameListType = this.isSameListType(element, nodes[index]);
        }
        if (cloneParentNode.nodeName === "LI" && !sameListType) {
          this.insertNewList(range, nodes, index, cloneListParentNode, cloneParentNode);
        } else if (sameListType) {
          this.insertSameList(nodes, index, cloneListParentNode, cloneParentNode);
        } else {
          nodes[index].parentNode.replaceChild(cloneParentNode, nodes[index]);
        }
        if (cloneParentNode.nodeName !== "LI" && (cloneParentNode.parentElement.nodeName === "OL" || cloneParentNode.parentElement.nodeName === "UL")) {
          var parent_1 = cloneParentNode.parentElement;
          this.parent.nodeCutter.SplitNode(range, parent_1, true);
          if (!isNullOrUndefined(parent_1.previousElementSibling)) {
            parent_1.previousElementSibling.after(cloneParentNode);
            if (cloneParentNode.childNodes.length > 1) {
              for (var j = 0; j < cloneParentNode.childNodes.length; j++) {
                var currentChild = cloneParentNode.childNodes[j];
                if (currentChild.nodeName === "OL" || currentChild.nodeName === "UL") {
                  cloneParentNode.after(currentChild);
                }
              }
            }
          } else {
            parent_1.parentElement.prepend(cloneParentNode);
          }
        }
      }
      !isNullOrUndefined(listElement) ? detach(listElement) : false;
      this.cleanEmptyLists();
      var save = this.parent.domNode.saveMarker(saveSelection, null);
      save.restore();
    };
    FormatPainterActions2.prototype.insertNewList = function(range, nodes, index, cloneListParentNode, cloneParentNode) {
      if (index === 0) {
        var nodeName = nodes[index].nodeName;
        nodes[index] = nodes[index].parentNode.replaceChild(cloneListParentNode, nodes[index]);
        var parent_2 = nodeName === "LI" ? cloneListParentNode.parentElement : cloneListParentNode;
        this.parent.nodeCutter.SplitNode(range, parent_2, true);
        if (nodes[index].nodeName === "LI" && !isNullOrUndefined(parent_2)) {
          cloneListParentNode.append(cloneParentNode);
          if (!isNullOrUndefined(parent_2.parentNode)) {
            parent_2.parentNode.insertBefore(cloneListParentNode, parent_2);
          }
        } else {
          if (!isNullOrUndefined(parent_2)) {
            if (!isNullOrUndefined(parent_2.previousElementSibling) && parent_2.previousElementSibling.nodeName === cloneListParentNode.nodeName) {
              var currentParent = parent_2.previousElementSibling;
              currentParent.append(cloneParentNode);
              while (currentParent.firstChild) {
                cloneListParentNode.append(currentParent.firstChild);
              }
            } else if (!isNullOrUndefined(parent_2.nextElementSibling) && parent_2.nextElementSibling.nodeName === cloneListParentNode.nodeName) {
              var currentParent = parent_2.nextElementSibling;
              currentParent.prepend(cloneParentNode);
              while (currentParent.firstChild) {
                cloneListParentNode.append(currentParent.firstChild);
              }
            } else {
              cloneListParentNode.append(cloneParentNode);
            }
          } else {
            cloneListParentNode.append(cloneParentNode);
          }
        }
      } else {
        cloneListParentNode.append(cloneParentNode);
      }
      this.detachEmptyBlockNodes(nodes[index]);
    };
    FormatPainterActions2.prototype.insertSameList = function(nodes, index, cloneListParentNode, cloneParentNode) {
      if (index === 0) {
        if (!isNullOrUndefined(nodes[index].parentNode) && (nodes[index].parentNode.nodeName === "UL" || nodes[index].parentNode.nodeName === "OL")) {
          if (nodes.length === 1) {
            while (cloneParentNode.firstChild) {
              nodes[index].append(cloneParentNode.firstChild);
            }
            for (var i = 0; i < nodes[index].parentNode.childNodes.length; i++) {
              var currentChild = nodes[index].parentNode.childNodes[i];
              cloneListParentNode.append(currentChild.cloneNode(true));
            }
          } else {
            cloneListParentNode.append(cloneParentNode);
          }
          nodes[index].parentNode.parentNode.replaceChild(cloneListParentNode, nodes[index].parentNode);
        }
      } else {
        cloneListParentNode.append(cloneParentNode);
      }
      this.detachEmptyBlockNodes(nodes[index]);
    };
    FormatPainterActions2.prototype.isSameListType = function(element, node) {
      var isSameListType = false;
      var nearestListNode = closest(node, "ol, ul");
      if (!isNullOrUndefined(nearestListNode) && nearestListNode.querySelectorAll("li").length > 0) {
        if (nearestListNode.nodeName === element.nodeName) {
          isSameListType = true;
        } else {
          isSameListType = false;
        }
      }
      return isSameListType;
    };
    FormatPainterActions2.prototype.cleanEmptyLists = function() {
      var listElem = this.parent.editableElement.querySelectorAll("ol, ul");
      for (var i = 0; i < listElem.length; i++) {
        if (listElem[i].textContent.trim() === "") {
          detach(listElem[i]);
        }
      }
    };
    FormatPainterActions2.prototype.setDeniedFormats = function() {
      var deniedFormatsCollection = [];
      if (isNullOrUndefined(this.settings) || isNullOrUndefined(this.settings.deniedFormats)) {
        return;
      }
      var deniedFormats = this.settings.deniedFormats.indexOf(";") > -1 ? this.settings.deniedFormats.split(";") : [this.settings.deniedFormats];
      var length = deniedFormats.length;
      for (var i = 0; i < length; i++) {
        var formatString = deniedFormats[i];
        if (formatString !== "") {
          formatString.trim();
          var collection = this.makeDeniedFormatsCollection(formatString);
          if (!isNullOrUndefined(collection)) {
            deniedFormatsCollection.push(collection);
          }
        }
      }
      this.deniedFormatsCollection = deniedFormatsCollection;
    };
    FormatPainterActions2.prototype.detachEmptyBlockNodes = function(node) {
      if (!isNullOrUndefined(node) && node.textContent.trim() === "") {
        detach(node);
      }
    };
    FormatPainterActions2.prototype.makeDeniedFormatsCollection = function(value) {
      var openParenIndex = value.indexOf("(");
      var closeParenIndex = value.indexOf(")");
      var openBracketIndex = value.indexOf("[");
      var closeBracketIndex = value.indexOf("]");
      var openBraceIndex = value.indexOf("{");
      var closeBraceIndex = value.indexOf("}");
      var classes = [];
      var attributes2 = "";
      var styles = "";
      var tagName = "";
      var classList = [];
      var attributesList = [];
      var stylesList = [];
      if (openParenIndex > -1 && closeParenIndex > -1) {
        classes = value.substring(openParenIndex + 1, closeParenIndex).split(" ");
        classList = classes[0].split(")")[0].split(",");
      }
      if (openBracketIndex > -1 && closeBracketIndex > -1) {
        attributes2 = value.substring(openBracketIndex + 1, closeBracketIndex);
        attributesList = attributes2.split(",");
      }
      if (openBraceIndex > -1 && closeBraceIndex > -1) {
        styles = value.substring(openBraceIndex + 1, closeBraceIndex);
        stylesList = styles.split(",");
      }
      var openIndexArray = [openParenIndex, openBracketIndex, openBraceIndex];
      openIndexArray = openIndexArray.filter(function(index) {
        return index > -1;
      });
      var len = openIndexArray.length;
      var min;
      if (len === 1) {
        min = openIndexArray[0];
      } else if (len === 2) {
        min = Math.min(openIndexArray[0], openIndexArray[1]);
      } else if (len === 3) {
        min = Math.min(openIndexArray[0], openIndexArray[1], openIndexArray[2]);
      }
      tagName = value.substring(0, min);
      tagName = tagName.trim();
      return {
        tag: tagName,
        styles: stylesList,
        classes: classList,
        attributes: attributesList
      };
    };
    return FormatPainterActions2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/base/editor-manager.js
var EditorManager = (
  /** @class */
  function() {
    function EditorManager2(options) {
      this.currentDocument = options.document;
      this.editableElement = options.editableElement;
      this.nodeSelection = new NodeSelection();
      this.nodeCutter = new NodeCutter();
      this.domNode = new DOMNode(this.editableElement, this.currentDocument);
      this.observer = new Observer(this);
      this.listObj = new Lists(this);
      this.formatObj = new Formats(this);
      this.alignmentObj = new Alignments(this);
      this.indentsObj = new Indents(this);
      this.linkObj = new LinkCommand(this);
      this.imgObj = new ImageCommand(this);
      this.audioObj = new AudioCommand(this);
      this.videoObj = new VideoCommand(this);
      this.selectionObj = new SelectionBasedExec(this);
      this.inserthtmlObj = new InsertHtmlExec(this);
      this.insertTextObj = new InsertTextExec(this);
      this.clearObj = new ClearFormatExec(this);
      this.tableObj = new TableCommand(this);
      this.undoRedoManager = new UndoRedoManager(this, options.options);
      this.msWordPaste = new MsWordPaste(this);
      this.formatPainterEditor = new FormatPainterActions(this, options.formatPainterSettings);
      this.emojiPickerObj = new EmojiPickerAction(this);
      this.wireEvents();
    }
    EditorManager2.prototype.wireEvents = function() {
      this.observer.on(KEY_DOWN, this.editorKeyDown, this);
      this.observer.on(KEY_UP, this.editorKeyUp, this);
      this.observer.on(KEY_UP, this.editorKeyUp, this);
      this.observer.on(MODEL_CHANGED, this.onPropertyChanged, this);
      this.observer.on(MS_WORD_CLEANUP, this.onWordPaste, this);
      this.observer.on(ON_BEGIN, this.onBegin, this);
    };
    EditorManager2.prototype.onWordPaste = function(e) {
      this.observer.notify(MS_WORD_CLEANUP_PLUGIN, e);
    };
    EditorManager2.prototype.onPropertyChanged = function(props) {
      this.observer.notify(MODEL_CHANGED_PLUGIN, props);
    };
    EditorManager2.prototype.editorKeyDown = function(e) {
      this.observer.notify(KEY_DOWN_HANDLER, e);
    };
    EditorManager2.prototype.editorKeyUp = function(e) {
      this.observer.notify(KEY_UP_HANDLER, e);
    };
    EditorManager2.prototype.onBegin = function(e) {
      this.observer.notify(SPACE_ACTION, e);
    };
    EditorManager2.prototype.execCommand = function(command, value, event2, callBack, text, exeValue, selector, enterAction) {
      switch (command.toLowerCase()) {
        case "lists":
          this.observer.notify(LIST_TYPE, {
            subCommand: value,
            event: event2,
            callBack,
            selector,
            item: exeValue,
            enterAction
          });
          break;
        case "formats":
          this.observer.notify(FORMAT_TYPE, {
            subCommand: value,
            event: event2,
            callBack,
            selector,
            exeValue,
            enterAction
          });
          break;
        case "alignments":
          this.observer.notify(ALIGNMENT_TYPE, {
            subCommand: value,
            event: event2,
            callBack,
            selector,
            value: exeValue
          });
          break;
        case "indents":
          this.observer.notify(INDENT_TYPE, { subCommand: value, event: event2, callBack, selector });
          break;
        case "links":
          this.observer.notify(LINK, { command, value, item: exeValue, event: event2, callBack });
          break;
        case "files":
          this.observer.notify(IMAGE, {
            command,
            value: "Image",
            item: exeValue,
            event: event2,
            callBack,
            selector
          });
          break;
        case "images":
          this.observer.notify(IMAGE, {
            command,
            value,
            item: exeValue,
            event: event2,
            callBack,
            selector
          });
          break;
        case "audios":
          this.observer.notify(AUDIO, {
            command,
            value,
            item: exeValue,
            event: event2,
            callBack,
            selector
          });
          break;
        case "videos":
          this.observer.notify(VIDEO, {
            command,
            value,
            item: exeValue,
            event: event2,
            callBack,
            selector
          });
          break;
        case "table":
          switch (value.toString().toLocaleLowerCase()) {
            case "createtable":
              this.observer.notify(TABLE, { item: exeValue, event: event2, callBack, enterAction });
              break;
            case "insertrowbefore":
            case "insertrowafter":
              this.observer.notify(INSERT_ROW, { item: exeValue, event: event2, callBack });
              break;
            case "insertcolumnleft":
            case "insertcolumnright":
              this.observer.notify(INSERT_COLUMN, { item: exeValue, event: event2, callBack });
              break;
            case "deleterow":
              this.observer.notify(DELETEROW, { item: exeValue, event: event2, callBack });
              break;
            case "deletecolumn":
              this.observer.notify(DELETECOLUMN, { item: exeValue, event: event2, callBack });
              break;
            case "tableremove":
              this.observer.notify(REMOVETABLE, { item: exeValue, event: event2, callBack });
              break;
            case "tableheader":
              this.observer.notify(TABLEHEADER, { item: exeValue, event: event2, callBack });
              break;
            case "aligntop":
            case "alignmiddle":
            case "alignbottom":
              this.observer.notify(TABLE_VERTICAL_ALIGN, { item: exeValue, event: event2, callBack });
              break;
            case "merge":
              this.observer.notify(TABLE_MERGE, { item: exeValue, event: event2, callBack });
              break;
            case "horizontalsplit":
              this.observer.notify(TABLE_HORIZONTAL_SPLIT, { item: exeValue, event: event2, callBack });
              break;
            case "verticalsplit":
              this.observer.notify(TABLE_VERTICAL_SPLIT, { item: exeValue, event: event2, callBack });
              break;
          }
          break;
        case "font":
        case "style":
        case "effects":
        case "casing":
          this.observer.notify(SELECTION_TYPE, { subCommand: value, event: event2, callBack, value: text, selector, enterAction });
          break;
        case "inserthtml":
          this.observer.notify(INSERTHTML_TYPE, { subCommand: value, callBack, value: text, enterAction });
          break;
        case "inserttext":
          this.observer.notify(INSERT_TEXT_TYPE, { subCommand: value, callBack, value: text });
          break;
        case "clear":
          this.observer.notify(CLEAR_TYPE, { subCommand: value, event: event2, callBack, selector, enterAction });
          break;
        case "actions":
          this.observer.notify(ACTION, { subCommand: value, event: event2, callBack, selector });
          break;
        case "formatpainter":
          this.observer.notify(FORMAT_PAINTER_ACTIONS, { item: exeValue, subCommand: value, event: event2, callBack });
          break;
        case "emojipicker":
          this.observer.notify(EMOJI_PICKER_ACTIONS, {
            item: exeValue,
            subCommand: value,
            value: text,
            event: event2,
            callBack
          });
      }
    };
    return EditorManager2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/formatter/html-formatter.js
var __extends3 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var HTMLFormatter = (
  /** @class */
  function(_super) {
    __extends3(HTMLFormatter2, _super);
    function HTMLFormatter2(options) {
      var _this = _super.call(this) || this;
      _this.initialize();
      extend(_this, _this, options, true);
      if (_this.currentDocument && _this.element) {
        _this.updateFormatter(_this.element, _this.currentDocument, options.options, options.formatPainterSettings);
      }
      return _this;
    }
    HTMLFormatter2.prototype.initialize = function() {
      this.keyConfig = htmlKeyConfig;
    };
    HTMLFormatter2.prototype.updateFormatter = function(editElement, doc, options, formatPainterSettings) {
      if (editElement && doc) {
        this.editorManager = new EditorManager({
          document: doc,
          editableElement: editElement,
          options,
          formatPainterSettings
        });
      }
    };
    return HTMLFormatter2;
  }(Formatter)
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/html-toolbar-status.js
var HtmlToolbarStatus = (
  /** @class */
  function() {
    function HtmlToolbarStatus2(parent) {
      this.parent = parent;
      this.toolbarStatus = this.prevToolbarStatus = getDefaultHtmlTbStatus();
      this.addEventListener();
    }
    HtmlToolbarStatus2.prototype.addEventListener = function() {
      this.parent.on(toolbarRefresh, this.onRefreshHandler, this);
      this.parent.on(destroy, this.removeEventListener, this);
    };
    HtmlToolbarStatus2.prototype.removeEventListener = function() {
      this.parent.off(toolbarRefresh, this.onRefreshHandler);
      this.parent.off(destroy, this.removeEventListener);
    };
    HtmlToolbarStatus2.prototype.onRefreshHandler = function(args) {
      if (this.parent.readonly) {
        return;
      }
      var fontsize = [];
      var fontName = [];
      var formats = [];
      this.parent.fontSize.items.forEach(function(item) {
        fontsize.push(item.value);
      });
      this.parent.fontFamily.items.forEach(function(item) {
        fontName.push(item.value);
      });
      this.parent.format.types.forEach(function(item) {
        formats.push(item.value.toLocaleLowerCase());
      });
      this.toolbarStatus = ToolbarStatus.get(this.parent.contentModule.getDocument(), this.parent.contentModule.getEditPanel(), formats, fontsize, fontName, args.documentNode);
      var tbStatusString = JSON.stringify(this.toolbarStatus);
      this.parent.notify(toolbarUpdated, this.toolbarStatus);
      if (JSON.stringify(this.prevToolbarStatus) !== tbStatusString) {
        this.parent.notify(updateTbItemsStatus, { html: JSON.parse(tbStatusString), markdown: null });
        this.prevToolbarStatus = JSON.parse(tbStatusString);
      }
    };
    return HtmlToolbarStatus2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/content-renderer.js
var ContentRender = (
  /** @class */
  function() {
    function ContentRender2(parent, serviceLocator) {
      this.parent = parent;
      this.serviceLocator = serviceLocator;
    }
    ContentRender2.prototype.renderPanel = function() {
      var rteObj = this.parent;
      var div = this.parent.createElement("div", { className: "e-rte-content", id: this.parent.getID() + "rte-view" });
      var rteContent = getEditValue(rteObj.value, rteObj);
      this.editableElement = this.parent.createElement("div", {
        className: "e-content",
        id: this.parent.getID() + "_rte-edit-view",
        attrs: {
          "contenteditable": "true"
        },
        innerHTML: rteContent
      });
      div.appendChild(this.editableElement);
      this.setPanel(div);
      rteObj.element.appendChild(div);
    };
    ContentRender2.prototype.getPanel = function() {
      return this.contentPanel;
    };
    ContentRender2.prototype.getEditPanel = function() {
      return this.editableElement;
    };
    ContentRender2.prototype.getText = function() {
      var textString = this.getEditPanel().innerText;
      return textString === "\n" ? "" : textString;
    };
    ContentRender2.prototype.setPanel = function(panel2) {
      this.contentPanel = panel2;
    };
    ContentRender2.prototype.getDocument = function() {
      return this.getEditPanel().ownerDocument;
    };
    return ContentRender2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/iframe-content-renderer.js
var __extends4 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var IFRAMEHEADER = `
<!DOCTYPE html> 
    <html>
         <head>
            <meta charset='utf-8' /> 
            <style>
                @charset "UTF-8";
                body {
                    font-family: "Roboto", sans-serif;
                    font-size: 14px;
                }
                html, body{height: 100%;margin: 0;}
                body.e-cursor{cursor:default}
                span.e-selected-node	{background-color: #939393;color: white;}
                span.e-selected-node.e-highlight {background-color: #1d9dd8;}
                body{color:#333;word-wrap:break-word;padding: 8px;box-sizing: border-box;}
                .e-rte-image, .e-rte-audio, .e-rte-video  {border: 0;cursor: pointer;display:
                    block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}
                .e-rte-image.e-imginline, .e-rte-audio.e-audio-inline, .e-rte-video.e-video-inline {display: inline-block;float: none;max-width: calc(100% - (2 * 5px));padding: 1px;vertical-align: bottom;}
                .e-rte-image.e-imgcenter, .e-rte-video.e-video-center {cursor: pointer;display: block;float: none;margin: 5px auto;max-width: 100%;position: relative;}
                .e-rte-image.e-imgright, .e-rte-video.e-video-right { float: right; margin: 0 auto;margin-left: 5px;text-align: right;}
                .e-rte-image.e-imgleft, .e-rte-video.e-video-left {float: left;margin: 0 auto;margin-right: 5px;text-align: left;}
                .e-img-caption { display: inline-block; float: none; margin: 5px auto; max-width: 100%;position: relative;}
                .e-img-caption.e-caption-inline {display: inline-block;float: none;
                    margin: 5px auto;margin-left: 5px;margin-right: 5px;max-width: calc(100% - (2 * 5px));
                    position: relativetext-align: center;vertical-align: bottom;}
                .e-img-inner {box-sizing: border-box;display: block;font-size: 16px;font-weight: initial;
                    margin: auto;opacity: .9;text-align: center;width: 100%;}
                .e-img-wrap {display: inline-block;margin: auto;padding: 0;text-align: center;width: 100%;}
                .e-imgleft, .e-video-left {float: left;margin: 0 5px 0 0;text-align: left;}
                .e-imgright, .e-video-right {float: right;margin: 0 0 0 5px;text-align: right;}
                .e-imgcenter, .e-video-center {cursor: pointer;display: block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}
                .e-control img:not(.e-resize) {border: 2px solid transparent; z-index: 1000}
                .e-imginline , .e-audio-inline, .e-video-inline {display: inline-block;float: none;margin-left: 5px;margin-right: 5px;
                    max-width: calc(100% - (2 * 5px));vertical-align: bottom;}
                .e-imgbreak, .e-audio-break, .e-video-break {border: 0;cursor: pointer;
                    display: block;float: none;height: auto;margin: 5px auto;max-width: 100%;position: relative;}
                .e-rte-image.e-img-focus:not(.e-resize), .e-audio-focus:not(.e-resize), .e-video-focus:not(.e-resize) {border: solid 2px #4a90e2;}
                img.e-img-focus::selection, audio.e-audio-focus::selection, .e-video-focus::selection { background: transparent;color: transparent;}
                span.e-rte-imageboxmark {  width: 10px; height: 10px; position: absolute; display: block;
                    background: #4a90e2; border: 1px solid #fff; z-index: 1000;}
                .e-mob-rte.e-mob-span span.e-rte-imageboxmark { background: #4a90e2; border: 1px solid #fff; }
                .e-mob-rte span.e-rte-imageboxmark { background: #fff; border: 1px solid #4a90e2;
                    border-radius: 15px; height: 20px; width: 20px; }
                .e-mob-rte.e-mob-span span.e-rte-imageboxmark { background: #4a90e2; border: 1px solid #fff; }
                .e-rte-content .e-content img.e-resize, .e-rte-content .e-content video.e-resize { z-index: 1000; }
                .e-img-caption .e-img-inner { outline: 0; }
                .e-img-caption a:focus-visible { outline: none; }
                .e-img-caption .e-rte-image.e-imgright, .e-img-caption .e-rte-image.e-imgleft { float: none; margin: 0;}
                body{box-sizing: border-box;min-height: 100px;outline: 0 solid transparent;
                    overflow-x: auto;padding: 16px;position: relative;text-align: inherit;z-index: 2;}
                p{margin: 0 0 10px;margin-bottom: 10px;}
                li{margin-bottom: 10px;}
                h1{font-size: 2.17em;font-weight: 400;line-height: 1;margin: 10px 0;}
                h2{font-size: 1.74em;font-weight: 400;margin: 10px 0;}
                h3{font-size: 1.31em;font-weight: 400;margin: 10px 0;}
                h4{font-size: 16px;font-weight: 400;line-height: 1.5;margin: 0;}
                h5{font-size: 00.8em;font-weight: 400;margin: 0;}
                h6{font-size: 00.65em;font-weight: 400;margin: 0;}
                blockquote{margin: 10px 0;margin-left: 0;padding-left: 5px;border-left: solid 2px #5c5c5c;}
                pre{background-color: inherit;border: 0;border-radius: 0;color: #333;
                    font-size: inherit;line-height: inherit;margin: 0 0 10px;overflow: visible;padding: 0;
                    white-space: pre-wrap;word-break: inherit;word-wrap: break-word;}
                strong, b{font-weight: 700;}
                a{text-decoration: none;user-select: auto;}
                a:hover{text-decoration: underline;};
                p:last-child, pre:last-child, blockquote:last-child{margin-bottom: 0;}
                h3+h4, h4+h5, h5+h6{margin-top: 00.6em;}
                ul:last-child{margin-bottom: 0;}
                table { border-collapse: collapse; empty-cells: show;}
                table td,table th {border: 1px solid #BDBDBD; height: 20px; padding: 2px 5px; vertical-align: middle;}
                table.e-alternate-border tbody tr:nth-child(2n) {background-color: #F5F5F5;}
                table th {background-color: #E0E0E0;}
                table.e-dashed-border td,table.e-dashed-border th { border: 1px dashed #BDBDBD} 
                table .e-cell-select {border: 1px double #4a90e2;}
                span.e-table-box { cursor: nwse-resize; display: block; height: 10px; position: absolute; width: 10px; }
                span.e-table-box.e-rmob {height: 14px;width: 14px;}
                .e-row-resize, .e-column-resize { background-color: transparent; background-repeat: repeat;
                    bottom: 0;cursor: col-resize;height: 1px;overflow: visible;position: absolute;width: 1px; }
                .e-row-resize { cursor: row-resize; height: 1px;}
                .e-table-rhelper { cursor: col-resize; opacity: .87;position: absolute;}
                .e-table-rhelper.e-column-helper { width: 1px; }
                .e-table-rhelper.e-row-helper {height: 1px;}
                .e-reicon::before { border-bottom: 6px solid transparent; border-right: 6px solid;
                    border-top: 6px solid transparent; content: ''; display: block; height: 0;
                    position: absolute; right: 4px; top: 4px; width: 20px; }
                .e-reicon::after { border-bottom: 6px solid transparent; border-left: 6px solid;
                    border-top: 6px solid transparent; content: ''; display: block;
                    height: 0; left: 4px; position: absolute; top: 4px; width: 20px; z-index: 3; }
                .e-row-helper.e-reicon::after { top: 10px; transform: rotate(90deg); }
                .e-row-helper.e-reicon::before { left: 4px; top: -20px; transform: rotate(90deg); }
                span.e-table-box { background-color: #ffffff; border: 1px solid #BDBDBD; }
                span.e-table-box.e-rbox-select { background-color: #BDBDBD; border: 1px solid #BDBDBD; }
                .e-table-rhelper { background-color: #4a90e2;}
                .e-rtl { direction: rtl; }
                .e-rte-placeholder::before { content: attr(placeholder); opacity: 0.54; overflow: hidden; padding-top: 16px; position: absolute; text-align: start; top: 0; z-index: 1; }
            </style>
        </head>`;
var IframeContentRender = (
  /** @class */
  function(_super) {
    __extends4(IframeContentRender2, _super);
    function IframeContentRender2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    IframeContentRender2.prototype.renderPanel = function() {
      var rteObj = this.parent;
      var rteContent = getEditValue(rteObj.value, rteObj);
      var iFrameBodyContent = '<body spellcheck="false" autocorrect="off" contenteditable="true">' + rteContent + "</body></html>";
      var iFrameContent = IFRAMEHEADER + iFrameBodyContent;
      var iframe = this.parent.createElement("iframe", {
        id: this.parent.getID() + "_rte-view",
        className: "e-rte-content",
        styles: "display:block;",
        attrs: { "srcdoc": iFrameContent }
      });
      this.setPanel(iframe);
      rteObj.element.appendChild(iframe);
      iframe.contentDocument.body.id = this.parent.getID() + "_rte-edit-view";
      iframe.contentDocument.body.setAttribute("aria-owns", this.parent.getID());
      iframe.contentDocument.open();
      iFrameContent = this.setThemeColor(iFrameContent, { color: "#333" });
      iframe.contentDocument.write(iFrameContent);
      iframe.contentDocument.close();
      if (rteObj.enableRtl) {
        this.contentPanel.contentDocument.body.setAttribute("class", "e-rtl");
      }
    };
    IframeContentRender2.prototype.setThemeColor = function(content, styles) {
      var fontColor2 = getComputedStyle(this.parent.element, ".e-richtexteditor").getPropertyValue("color");
      return content.replace(styles.color, fontColor2);
    };
    IframeContentRender2.prototype.getEditPanel = function() {
      var editNode;
      if (!isNullOrUndefined(this.contentPanel.contentDocument)) {
        editNode = this.contentPanel.contentDocument.body;
      } else {
        editNode = this.parent.inputElement;
      }
      return editNode;
    };
    IframeContentRender2.prototype.getDocument = function() {
      return this.getEditPanel().ownerDocument;
    };
    return IframeContentRender2;
  }(ContentRender)
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/xhtml-validation.js
var XhtmlValidation = (
  /** @class */
  function() {
    function XhtmlValidation2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    XhtmlValidation2.prototype.addEventListener = function() {
      this.parent.on(xhtmlValidation, this.enableXhtmlValidation, this);
      this.parent.on(destroy, this.removeEventListener, this);
    };
    XhtmlValidation2.prototype.removeEventListener = function() {
      this.parent.off(xhtmlValidation, this.enableXhtmlValidation);
      this.parent.off(destroy, this.removeEventListener);
    };
    XhtmlValidation2.prototype.enableXhtmlValidation = function() {
      if (this.parent.enableXhtml) {
        if (isNullOrUndefined(this.parent.inputElement)) {
          this.currentElement = this.parent.element;
        } else {
          this.currentElement = this.parent.inputElement;
        }
        this.clean(this.currentElement);
        this.ImageTags();
        this.removeTags();
        this.RemoveUnsupported();
        this.currentElement.innerHTML = this.selfEncloseValidation(this.currentElement.innerHTML, this.currentElement.innerText === "\n" ? this.currentElement.innerText.length : this.currentElement.innerText.trim().length);
        this.parent.setProperties({ value: this.currentElement.innerHTML }, true);
      }
    };
    XhtmlValidation2.prototype.selfEncloseValidation = function(currentValue, valueLength) {
      if (valueLength === 0 && currentValue.indexOf("table") < 0 && currentValue.indexOf("img") < 0 && currentValue !== "<p><br></p>" && currentValue !== "<div><br></div>" && currentValue !== "<br>") {
        var arrayValue = currentValue.split("&nbsp;");
        arrayValue[arrayValue.length - 1] = "&#8203;" + arrayValue[arrayValue.length - 1];
        currentValue = arrayValue.join("");
      }
      currentValue = currentValue.replace(/<br>/g, "<br/>").replace(/<hr>/g, "<hr/>").replace(/ /g, " ");
      var valueTemp;
      var valueDupe = [];
      var valueOriginal = [];
      var imgRegexp = [
        /<img(.*?)>/gi,
        /<area(.*?)>/gi,
        /<base(.*?)>/gi,
        /<col (.*?)>/gi,
        /<embed(.*?)>/gi,
        /<input(.*?)>/gi,
        /<link(.*?)>/gi,
        /<meta(.*?)>/gi,
        /<param(.*?)>/gi,
        /<source(.*?)>/gi,
        /<track(.*?)>/gi,
        /<wbr(.*?)>/gi
      ];
      for (var j = 0; j < imgRegexp.length; j++) {
        valueTemp = imgRegexp[j].exec(currentValue);
        while (valueTemp !== null) {
          valueDupe.push(valueTemp[0].toString());
          valueTemp = imgRegexp[j].exec(currentValue);
        }
        valueOriginal = valueDupe.slice(0);
        for (var i = 0; i < valueDupe.length; i++) {
          if (valueDupe[i].indexOf("/") === -1 || valueDupe[i].lastIndexOf("/") !== valueDupe[i].length - 2) {
            valueDupe[i] = valueDupe[i].substr(0, valueDupe[i].length - 1) + " /" + valueDupe[i].substr(valueDupe[i].length - 1, valueDupe[i].length);
          }
        }
        for (var g = 0; g <= valueDupe.length - 1; g++) {
          currentValue = currentValue.replace(valueOriginal[g], valueDupe[g]);
        }
      }
      return currentValue;
    };
    XhtmlValidation2.prototype.clean = function(node) {
      for (var n = 0; n < node.childNodes.length; n++) {
        var child = node.childNodes[n];
        if (child.nodeType === 8 || child.nodeName === "V:IMAGE") {
          node.removeChild(child);
          n--;
        } else if (child.nodeType === 1) {
          this.clean(child);
        }
      }
      return this.currentElement.innerHTML;
    };
    XhtmlValidation2.prototype.ImageTags = function() {
      var imgNodes = this.currentElement.querySelectorAll("IMG");
      for (var i = imgNodes.length - 1; i >= 0; i--) {
        if (!imgNodes[i].hasAttribute("alt")) {
          var img = imgNodes[i];
          img.setAttribute("alt", "");
        }
      }
    };
    XhtmlValidation2.prototype.removeTags = function() {
      var removeAttribute = [["br", "ul"], ["br", "ol"], ["table", "span"], ["div", "span"], ["p", "span"]];
      for (var i = 0; i < removeAttribute.length; i++) {
        this.RemoveElementNode(removeAttribute[i][0], removeAttribute[i][1]);
      }
    };
    XhtmlValidation2.prototype.RemoveElementNode = function(rmvNode, parentNode) {
      var parentArray = this.currentElement.querySelectorAll(parentNode);
      for (var i = 0; i < parentArray.length; i++) {
        var rmvArray = parentArray[i].querySelectorAll(rmvNode);
        for (var j = rmvArray.length; j > 0; j--) {
          detach(rmvArray[j - 1]);
        }
      }
    };
    XhtmlValidation2.prototype.RemoveUnsupported = function() {
      var underlineEle = this.currentElement.querySelectorAll("u");
      for (var i = underlineEle.length - 1; i >= 0; i--) {
        var spanEle = this.parent.createElement("span");
        spanEle.style.textDecoration = "underline";
        spanEle.innerHTML = underlineEle[i].innerHTML;
        underlineEle[i].parentNode.insertBefore(spanEle, underlineEle[i]);
        detach(underlineEle[i]);
      }
      var strongEle = this.currentElement.querySelectorAll("strong");
      for (var i = strongEle.length - 1; i >= 0; i--) {
        var boldEle = this.parent.createElement("b");
        boldEle.innerHTML = strongEle[i].innerHTML;
        strongEle[i].parentNode.insertBefore(boldEle, strongEle[i]);
        detach(strongEle[i]);
      }
      var attrArray = [
        "language",
        "role",
        "target",
        "contenteditable",
        "cellspacing",
        "cellpadding",
        "border",
        "valign",
        "colspan"
      ];
      for (var i = 0; i <= attrArray.length; i++) {
        this.RemoveAttributeByName(attrArray[i]);
      }
    };
    XhtmlValidation2.prototype.RemoveAttributeByName = function(attrName) {
      if (this.currentElement.firstChild !== null) {
        if (this.currentElement.firstChild.nodeType !== 3) {
          for (var i = 0; i < this.currentElement.childNodes.length; i++) {
            var ele = this.currentElement.childNodes[i];
            if (ele.nodeType !== 3 && ele.nodeName !== "TABLE" && ele.nodeName !== "TBODY" && ele.nodeName !== "THEAD" && ele.nodeName !== "TH" && ele.nodeName !== "TR" && ele.nodeName !== "TD") {
              if (ele.hasAttribute(attrName)) {
                ele.removeAttribute(attrName);
              }
              if (ele.hasChildNodes()) {
                for (var j = 0; j < ele.childNodes.length; j++) {
                  var childEle = ele.childNodes[j];
                  if (childEle.nodeType !== 3 && childEle.nodeName !== "TABLE" && childEle.nodeName !== "TBODY" && childEle.nodeName !== "THEAD" && childEle.nodeName !== "TH" && childEle.nodeName !== "TR" && childEle.nodeName !== "TD" && childEle.hasAttribute(attrName) && !childEle.classList.contains("e-mention-chip")) {
                    childEle.removeAttribute(attrName);
                  }
                  if (childEle.hasChildNodes()) {
                    for (var k = 0; k < childEle.childNodes.length; k++) {
                      if (childEle.childNodes[k].nodeType !== 3 && childEle.childNodes[k].nodeName !== "TABLE" && childEle.childNodes[k].nodeName !== "TBODY" && childEle.childNodes[k].nodeName !== "THEAD" && childEle.childNodes[k].nodeName !== "TH" && childEle.childNodes[k].nodeName !== "TR" && childEle.childNodes[k].nodeName !== "TD" && childEle.childNodes[k].hasAttribute(attrName)) {
                        childEle.childNodes[k].removeAttribute(attrName);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    return XhtmlValidation2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/html-editor.js
var HtmlEditor = (
  /** @class */
  function() {
    function HtmlEditor2(parent, serviceLocator) {
      this.rangeCollection = [];
      this.isImageDelete = false;
      this.parent = parent;
      this.locator = serviceLocator;
      this.renderFactory = this.locator.getService("rendererFactory");
      this.xhtmlValidation = new XhtmlValidation(parent);
      this.addEventListener();
    }
    HtmlEditor2.prototype.destroy = function() {
      this.removeEventListener();
    };
    HtmlEditor2.prototype.sanitizeHelper = function(value) {
      value = sanitizeHelper(value, this.parent);
      return value;
    };
    HtmlEditor2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.nodeSelectionObj = new NodeSelection();
      this.colorPickerModule = new ColorPickerInput(this.parent, this.locator);
      this.parent.on(initialLoad, this.instantiateRenderer, this);
      this.parent.on(htmlToolbarClick, this.onToolbarClick, this);
      this.parent.on(keyDown, this.onKeyDown, this);
      this.parent.on(keyUp, this.onKeyUp, this);
      this.parent.on(renderColorPicker, this.renderColorPicker, this);
      this.parent.on(initialEnd, this.render, this);
      this.parent.on(modelChanged, this.onPropertyChanged, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(selectAll2, this.selectAll, this);
      this.parent.on(selectRange, this.selectRange, this);
      this.parent.on(getSelectedHtml, this.getSelectedHtml, this);
      this.parent.on(selectionSave, this.onSelectionSave, this);
      this.parent.on(selectionRestore, this.onSelectionRestore, this);
      this.parent.on(readOnlyMode, this.updateReadOnly, this);
      this.parent.on(paste, this.onPaste, this);
      this.parent.on(tableclass, this.isTableClassAdded, this);
    };
    HtmlEditor2.prototype.updateReadOnly = function() {
      if (this.parent.readonly) {
        attributes(this.parent.contentModule.getEditPanel(), { contenteditable: "false" });
        addClass([this.parent.element], CLS_RTE_READONLY);
      } else {
        attributes(this.parent.contentModule.getEditPanel(), { contenteditable: "true" });
        removeClass([this.parent.element], CLS_RTE_READONLY);
      }
    };
    HtmlEditor2.prototype.onSelectionSave = function() {
      var currentDocument = this.contentRenderer.getDocument();
      var range = this.nodeSelectionObj.getRange(currentDocument);
      this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);
    };
    HtmlEditor2.prototype.onSelectionRestore = function(e) {
      this.parent.isBlur = false;
      this.contentRenderer.getEditPanel().focus();
      if (isNullOrUndefined(e.items) || e.items) {
        this.saveSelection.restore();
      }
    };
    HtmlEditor2.prototype.isTableClassAdded = function() {
      var tableElement = this.parent.inputElement.querySelectorAll("table");
      for (var i = 0; i < tableElement.length; i++) {
        if (!tableElement[i].classList.contains("e-rte-table")) {
          tableElement[i].classList.add("e-rte-table");
        }
      }
    };
    HtmlEditor2.prototype.onKeyUp = function(e) {
      var args = e.args;
      var restrictKeys = [
        8,
        9,
        13,
        16,
        17,
        18,
        20,
        27,
        37,
        38,
        39,
        40,
        44,
        45,
        46,
        91,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123
      ];
      var range = this.parent.getRange();
      var regEx = new RegExp(String.fromCharCode(8203), "g");
      var pointer;
      var isRootParent = false;
      if (restrictKeys.indexOf(args.keyCode) < 0 && !args.shiftKey && !args.ctrlKey && !args.altKey) {
        pointer = range.startOffset;
        range.startContainer.nodeName === "#text" ? range.startContainer.parentElement !== this.parent.inputElement ? range.startContainer.parentElement.classList.add("currentStartMark") : isRootParent = true : range.startContainer.classList.add("currentStartMark");
        if (range.startContainer.textContent.charCodeAt(0) === 8203) {
          var previousLength_1 = range.startContainer.textContent.length;
          var previousRange = range.startOffset;
          range.startContainer.textContent = range.startContainer.textContent.replace(regEx, "");
          pointer = previousRange === 0 ? previousRange : previousRange - (previousLength_1 - range.startContainer.textContent.length);
          this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), range.startContainer, pointer);
        }
        var previousLength = this.parent.inputElement.innerHTML.length;
        var currentLength = this.parent.inputElement.innerHTML.replace(regEx, "").length;
        var focusNode = range.startContainer;
        if (previousLength > currentLength && !isRootParent) {
          var currentChild = this.parent.inputElement.firstChild;
          while (!isNullOrUndefined(currentChild) && currentChild.textContent.replace(regEx, "").trim().length > 0) {
            currentChild.innerHTML = currentChild.innerHTML.replace(regEx, "");
            currentChild = currentChild.nextElementSibling;
          }
          var currentChildNode = this.parent.inputElement.querySelector(".currentStartMark").childNodes;
          if (currentChildNode.length > 1) {
            for (var i = 0; i < currentChildNode.length; i++) {
              if (currentChildNode[i].nodeName === "#text" && currentChildNode[i].textContent.length === 0) {
                detach(currentChildNode[i]);
                i--;
              }
              if (focusNode.textContent.replace(regEx, "") === currentChildNode[i].textContent) {
                pointer = focusNode.textContent.length > 1 ? focusNode.textContent === currentChildNode[i].textContent ? pointer : pointer - (focusNode.textContent.length - focusNode.textContent.replace(regEx, "").length) : focusNode.textContent.length;
                focusNode = currentChildNode[i];
              }
            }
          } else if (currentChildNode.length === 1) {
            if (focusNode.textContent.replace(regEx, "") === currentChildNode[0].textContent) {
              focusNode = currentChildNode[0];
            }
          }
          this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), focusNode, pointer);
        }
        var currentElem = this.parent.inputElement.querySelector(".currentStartMark");
        if (!isNullOrUndefined(currentElem)) {
          currentElem.classList.remove("currentStartMark");
          if (currentElem.getAttribute("class").trim() === "") {
            currentElem.removeAttribute("class");
          }
        }
        if (!isNullOrUndefined(range.startContainer.previousSibling) && !isNullOrUndefined(range.startContainer.previousSibling.parentElement) && range.startContainer.parentElement === range.startContainer.previousSibling.parentElement && range.startContainer.previousSibling.textContent.charCodeAt(0) === 8203 && range.startContainer.previousSibling.textContent.length <= 1) {
          range.startContainer.previousSibling.textContent = range.startContainer.previousSibling.textContent.replace(regEx, "");
        }
        if (range.endContainer.textContent.charCodeAt(range.endOffset) === 8203) {
          pointer = range.startOffset;
          range.endContainer.textContent = range.endContainer.textContent.replace(regEx, "");
          this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), range.startContainer, pointer);
        }
      }
    };
    HtmlEditor2.prototype.onKeyDown = function(e) {
      var _this = this;
      var currentRange;
      var args = e.args;
      if (Browser.info.name === "chrome") {
        currentRange = this.parent.getRange();
        this.backSpaceCleanup(e, currentRange);
        this.deleteCleanup(e, currentRange);
      }
      if (args.keyCode === 9 && this.parent.enableTabKey) {
        if (!isNullOrUndefined(args.target) && isNullOrUndefined(closest(args.target, ".e-rte-toolbar"))) {
          var range = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument());
          var parentNode = this.nodeSelectionObj.getParentNodeCollection(range);
          if (!((parentNode[0].nodeName === "LI" || closest(parentNode[0], "li") || closest(parentNode[0], "table")) && range.startOffset === 0)) {
            args.preventDefault();
            if (!args.shiftKey) {
              InsertHtml.Insert(this.contentRenderer.getDocument(), "&nbsp;&nbsp;&nbsp;&nbsp;");
              this.rangeCollection.push(this.nodeSelectionObj.getRange(this.contentRenderer.getDocument()));
            } else if (this.rangeCollection.length > 0 && this.rangeCollection[this.rangeCollection.length - 1].startContainer.textContent.length === 4) {
              var textCont = this.rangeCollection[this.rangeCollection.length - 1].startContainer;
              this.nodeSelectionObj.setSelectionText(this.contentRenderer.getDocument(), textCont, textCont, 0, textCont.textContent.length);
              InsertHtml.Insert(this.contentRenderer.getDocument(), document.createTextNode(""));
              this.rangeCollection.pop();
            }
          }
        }
      }
      if (e.args.action === "space" || e.args.action === "enter" || e.args.keyCode === 13) {
        this.spaceLink(e.args);
        if (this.parent.editorMode === "HTML" && !this.parent.readonly) {
          var currentLength = this.parent.getText().trim().length;
          var selectionLength = this.parent.getSelection().length;
          var totalLength = currentLength - selectionLength + 1;
          if (!(this.parent.maxLength === -1 || totalLength <= this.parent.maxLength) && e.args.keyCode === 13) {
            e.args.preventDefault();
            return;
          } else {
            this.parent.notify(enterHandler, { args: e.args });
          }
        }
      }
      if (e.args.action === "space") {
        var currentRange_1 = this.parent.getRange();
        var editorValue = currentRange_1.startContainer.textContent.slice(0, currentRange_1.startOffset);
        var orderedList_1 = this.isOrderedList(editorValue);
        var unOrderedList = this.isUnOrderedList(editorValue);
        if (orderedList_1 && !unOrderedList || unOrderedList && !orderedList_1) {
          var eventArgs_1 = {
            callBack: null,
            event: e.args,
            name: "keydown-handler"
          };
          var actionBeginArgs = {
            cancel: false,
            item: { command: "Lists", subCommand: orderedList_1 ? "OL" : "UL" },
            name: "actionBegin",
            originalEvent: e.args,
            requestType: orderedList_1 ? "OL" : "UL"
          };
          this.parent.trigger(actionBegin, actionBeginArgs, function(actionBeginArgs2) {
            if (!actionBeginArgs2.cancel) {
              _this.parent.formatter.editorManager.observer.notify(ON_BEGIN, eventArgs_1);
              _this.parent.trigger(actionComplete, {
                editorMode: _this.parent.editorMode,
                elements: _this.parent.formatter.editorManager.domNode.blockNodes(),
                event: e.args,
                name: actionComplete,
                range: _this.parent.getRange(),
                requestType: orderedList_1 ? "OL" : "UL"
              });
            }
          });
        }
      }
      if (Browser.info.name === "chrome" && (!isNullOrUndefined(this.rangeElement) && !isNullOrUndefined(this.oldRangeElement) || !isNullOrUndefined(this.deleteRangeElement) && !isNullOrUndefined(this.deleteOldRangeElement)) && currentRange.startContainer.parentElement.tagName !== "TD" && currentRange.startContainer.parentElement.tagName !== "TH") {
        this.rangeElement = null;
        this.oldRangeElement = null;
        this.deleteRangeElement = null;
        this.deleteOldRangeElement = null;
        if (!this.isImageDelete) {
          args.preventDefault();
        }
        args.preventDefault();
      }
    };
    HtmlEditor2.prototype.isOrderedList = function(editorValue) {
      editorValue = editorValue.replace(/\u200B/g, "");
      var olListStartRegex = [/^[1]+[.]+$/, /^[i]+[.]+$/, /^[a]+[.]+$/];
      if (!isNullOrUndefined(editorValue)) {
        for (var i = 0; i < olListStartRegex.length; i++) {
          if (olListStartRegex[i].test(editorValue)) {
            return true;
          }
        }
      }
      return false;
    };
    HtmlEditor2.prototype.isUnOrderedList = function(editorValue) {
      editorValue = editorValue.replace(/\u200B/g, "");
      var ulListStartRegex = [/^[*]$/, /^[-]$/];
      if (!isNullOrUndefined(editorValue)) {
        for (var i = 0; i < ulListStartRegex.length; i++) {
          if (ulListStartRegex[i].test(editorValue)) {
            return true;
          }
        }
      }
      return false;
    };
    HtmlEditor2.prototype.backSpaceCleanup = function(e, currentRange) {
      var isLiElement = false;
      var isPreviousNotContentEditable = true;
      if (!isNullOrUndefined(currentRange.startContainer.previousSibling) && currentRange.startContainer.previousSibling.nodeName === "SPAN") {
        isPreviousNotContentEditable = currentRange.startContainer.previousSibling.contentEditable === "false" ? false : true;
      }
      if (e.args.code === "Backspace" && e.args.keyCode === 8 && currentRange.startOffset === 0 && currentRange.endOffset === 0 && this.parent.getSelection().length === 0 && currentRange.startContainer.textContent.length > 0 && currentRange.startContainer.parentElement.tagName !== "TD" && currentRange.startContainer.parentElement.tagName !== "TH" && isPreviousNotContentEditable) {
        var checkNode = currentRange.startContainer.nodeName === "#text" ? currentRange.startContainer.parentElement : currentRange.startContainer;
        if (!this.parent.formatter.editorManager.domNode.isBlockNode(checkNode) && !isNullOrUndefined(checkNode.previousSibling) && checkNode.previousSibling.nodeName === "BR") {
          return;
        }
        this.rangeElement = this.getRootBlockNode(currentRange.startContainer);
        if (this.rangeElement.tagName === "OL" || this.rangeElement.tagName === "UL") {
          var liElement = this.getRangeLiNode(currentRange.startContainer);
          if (liElement.previousElementSibling && liElement.previousElementSibling.childElementCount > 0) {
            this.oldRangeElement = liElement.previousElementSibling.lastElementChild.nodeName === "BR" ? liElement.previousElementSibling : liElement.previousElementSibling.lastElementChild;
            if (!isNullOrUndefined(liElement.lastElementChild) && liElement.lastElementChild.nodeName !== "BR") {
              this.rangeElement = liElement.lastElementChild;
              isLiElement = true;
            } else {
              this.rangeElement = liElement;
            }
          }
        } else if (this.rangeElement === this.parent.inputElement || this.rangeElement.tagName === "TABLE" || !isNullOrUndefined(this.rangeElement.previousElementSibling) && this.rangeElement.previousElementSibling.tagName === "TABLE") {
          return;
        } else {
          this.oldRangeElement = this.rangeElement.previousElementSibling;
        }
        if (isNullOrUndefined(this.oldRangeElement)) {
          return;
        } else {
          if (this.oldRangeElement.tagName === "OL" || this.oldRangeElement.tagName === "UL") {
            this.oldRangeElement = this.oldRangeElement.lastElementChild.lastElementChild ? this.oldRangeElement.lastElementChild.lastElementChild : this.oldRangeElement.lastElementChild;
          }
          var lastNode = this.oldRangeElement.lastChild;
          while (lastNode.nodeType !== 3 && lastNode.nodeName !== "#text" && lastNode.nodeName !== "BR") {
            lastNode = lastNode.lastChild;
          }
          this.parent.formatter.editorManager.nodeSelection.setCursorPoint(
            this.parent.contentModule.getDocument(),
            // eslint-disable-next-line
            lastNode,
            lastNode.textContent.length
          );
          if (this.oldRangeElement.querySelectorAll("BR").length === 1) {
            detach(this.oldRangeElement.querySelector("BR"));
          }
          if (!isNullOrUndefined(this.rangeElement) && this.oldRangeElement !== this.rangeElement) {
            while (this.rangeElement.firstChild) {
              this.oldRangeElement.appendChild(this.rangeElement.childNodes[0]);
            }
            !isLiElement ? detach(this.rangeElement) : detach(this.rangeElement.parentElement);
            this.oldRangeElement.normalize();
          }
        }
      }
    };
    HtmlEditor2.prototype.deleteCleanup = function(e, currentRange) {
      var isLiElement = false;
      var liElement;
      var rootElement;
      if (e.args.code === "Delete" && e.args.keyCode === 46 && this.parent.contentModule.getText().trim().length !== 0 && this.parent.getSelection().length === 0 && currentRange.startContainer.parentElement.tagName !== "TD" && currentRange.startContainer.parentElement.tagName !== "TH") {
        this.deleteRangeElement = rootElement = this.getRootBlockNode(currentRange.startContainer);
        if (this.deleteRangeElement.tagName === "OL" || this.deleteRangeElement.tagName === "UL") {
          liElement = this.getRangeLiNode(currentRange.startContainer);
          if (liElement.nextElementSibling && liElement.nextElementSibling.childElementCount > 0 && !liElement.nextElementSibling.querySelector("BR")) {
            if (!isNullOrUndefined(liElement.lastElementChild)) {
              this.deleteRangeElement = liElement.lastElementChild;
              isLiElement = true;
            } else {
              this.deleteRangeElement = liElement;
            }
          } else {
            this.deleteRangeElement = this.getRangeElement(liElement);
          }
        } else if (this.deleteRangeElement.nodeType === 3 || (this.deleteRangeElement.tagName === "TABLE" || !isNullOrUndefined(this.deleteRangeElement.nextElementSibling) && this.deleteRangeElement.nextElementSibling.tagName === "TABLE")) {
          return;
        }
        if (this.getCaretIndex(currentRange, this.deleteRangeElement) === this.deleteRangeElement.textContent.length) {
          if (!isNullOrUndefined(liElement)) {
            if (isLiElement || !isNullOrUndefined(liElement.nextElementSibling)) {
              this.deleteOldRangeElement = this.getRangeElement(liElement.nextElementSibling);
            } else {
              this.deleteOldRangeElement = rootElement.nextElementSibling;
            }
          } else {
            this.deleteOldRangeElement = this.deleteRangeElement.nextElementSibling;
          }
          if (isNullOrUndefined(this.deleteOldRangeElement)) {
            return;
          } else {
            if (currentRange.startOffset === 0 && currentRange.endOffset === 1 && this.deleteRangeElement.childNodes[0].nodeName === "IMG") {
              this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.parent.contentModule.getDocument(), this.deleteRangeElement, this.deleteRangeElement, 0, 1);
              this.isImageDelete = true;
            } else {
              this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), this.deleteRangeElement, this.deleteRangeElement.childNodes.length);
              this.isImageDelete = false;
            }
            if (this.deleteRangeElement.querySelector("BR")) {
              detach(this.deleteRangeElement.querySelector("BR"));
            }
            if (!isNullOrUndefined(this.deleteRangeElement) && (this.deleteOldRangeElement.tagName !== "OL" && this.deleteOldRangeElement.tagName !== "UL") && this.deleteOldRangeElement !== this.deleteRangeElement) {
              while (this.deleteOldRangeElement.firstChild) {
                this.deleteRangeElement.appendChild(this.deleteOldRangeElement.childNodes[0]);
              }
              if (!isLiElement) {
                detach(this.deleteOldRangeElement);
              } else {
                detach(this.deleteOldRangeElement.parentElement);
              }
              this.deleteRangeElement.normalize();
            } else {
              this.deleteRangeElement = null;
              this.deleteOldRangeElement = null;
            }
          }
        } else {
          this.deleteRangeElement = null;
        }
      }
    };
    HtmlEditor2.prototype.getCaretIndex = function(currentRange, element) {
      var position = 0;
      if (this.parent.contentModule.getDocument().getSelection().rangeCount !== 0) {
        var preCaretRange = currentRange.cloneRange();
        preCaretRange.selectNodeContents(element);
        preCaretRange.setEnd(currentRange.endContainer, currentRange.endOffset);
        position = preCaretRange.toString().length;
      }
      return position;
    };
    HtmlEditor2.prototype.getRangeElement = function(element) {
      var rangeElement = element.lastElementChild ? element.lastElementChild.tagName === "BR" ? element.lastElementChild.previousElementSibling ? element.lastElementChild.previousElementSibling : element : element.lastElementChild : element;
      return rangeElement;
    };
    HtmlEditor2.prototype.getRootBlockNode = function(rangeBlockNode) {
      for (; rangeBlockNode && this.parent && this.parent.inputElement !== rangeBlockNode; rangeBlockNode = rangeBlockNode) {
        if (rangeBlockNode.parentElement === this.parent.inputElement) {
          break;
        } else {
          rangeBlockNode = rangeBlockNode.parentElement;
        }
      }
      return rangeBlockNode;
    };
    HtmlEditor2.prototype.getRangeLiNode = function(rangeLiNode) {
      var node = rangeLiNode.parentElement;
      while (node !== this.parent.inputElement) {
        if (node.nodeType === 1 && node.tagName === "LI") {
          break;
        }
        node = node.parentElement;
      }
      return node;
    };
    HtmlEditor2.prototype.onPaste = function(e) {
      var regex = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
      if (e.text.match(regex)) {
        if (e.isWordPaste) {
          return;
        }
        e.args.preventDefault();
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        var saveSelection = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
        var httpRegex = new RegExp(/([^\S]|^)(((https?\:\/\/)))/gi);
        var wwwRegex = new RegExp(/([^\S]|^)(((www\.))(\S+))/gi);
        var enterSplitText = e.text.split("\n");
        var contentInnerElem = "";
        for (var i = 0; i < enterSplitText.length; i++) {
          if (enterSplitText[i].trim() === "") {
            contentInnerElem += getDefaultValue(this.parent);
          } else {
            var contentWithSpace = "";
            var spaceBetweenContent = true;
            var spaceSplit = enterSplitText[i].split(" ");
            for (var j = 0; j < spaceSplit.length; j++) {
              if (spaceSplit[j].trim() === "") {
                contentWithSpace += spaceBetweenContent ? "&nbsp;" : " ";
              } else {
                spaceBetweenContent = false;
                contentWithSpace += spaceSplit[j] + " ";
              }
            }
            if (i === 0) {
              contentInnerElem += "<span>" + contentWithSpace.trim() + "</span>";
            } else {
              contentInnerElem += "<p>" + contentWithSpace.trim() + "</p>";
            }
          }
        }
        var divElement = this.parent.createElement("div");
        divElement.setAttribute("class", "pasteContent");
        divElement.style.display = "inline";
        divElement.innerHTML = contentInnerElem.replace("&para", "&amp;para");
        var paraElem = divElement.querySelectorAll("span, p");
        for (var i = 0; i < paraElem.length; i++) {
          var splitTextContent = paraElem[i].innerHTML.split(" ");
          var resultSplitContent = "";
          for (var j = 0; j < splitTextContent.length; j++) {
            if (splitTextContent[j].match(httpRegex) || splitTextContent[j].match(wwwRegex)) {
              resultSplitContent += '<a class="e-rte-anchor" href="' + splitTextContent[j] + '" title="' + splitTextContent[j] + '"target="_blank">' + splitTextContent[j] + " </a>";
            } else {
              resultSplitContent += splitTextContent[j] + " ";
            }
          }
          paraElem[i].innerHTML = resultSplitContent.trim();
        }
        if (!isNullOrUndefined(this.parent.pasteCleanupModule)) {
          e.callBack(divElement.innerHTML);
        } else {
          this.parent.formatter.editorManager.execCommand("insertHTML", null, null, null, divElement);
        }
      }
    };
    HtmlEditor2.prototype.spaceLink = function(e) {
      var range = this.nodeSelectionObj.getRange(this.contentRenderer.getDocument());
      var selectNodeEle = this.nodeSelectionObj.getParentNodeCollection(range);
      var text = range.startContainer.textContent.substr(0, range.endOffset);
      var splitText = text.split(" ");
      var urlText = splitText[splitText.length - 1];
      var urlTextRange = range.startOffset - (text.length - splitText[splitText.length - 1].length);
      urlText = urlText.slice(0, urlTextRange);
      var regex = new RegExp(/([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi);
      if (selectNodeEle[0].nodeName !== "A" && urlText.match(regex)) {
        var selection = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());
        var url = urlText.indexOf("http") > -1 ? urlText : "http://" + urlText;
        var selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        var value = {
          url,
          selection,
          selectParent,
          text: urlText,
          title: "",
          target: "_blank"
        };
        this.parent.formatter.process(this.parent, {
          item: {
            "command": "Links",
            "subCommand": "CreateLink"
          }
        }, e, value);
      }
    };
    HtmlEditor2.prototype.onToolbarClick = function(args) {
      var _this = this;
      var save;
      var selectNodeEle;
      var selectParentEle;
      var item = args.item;
      var closestElement = closest(args.originalEvent.target, ".e-rte-quick-popup");
      if (item.command !== "FormatPainter") {
        if (closestElement && !closestElement.classList.contains("e-rte-inline-popup")) {
          if (!(item.subCommand === "SourceCode" || item.subCommand === "Preview" || item.subCommand === "FontColor" || item.subCommand === "BackgroundColor")) {
            if (isIDevice2() && item.command === "Images") {
              this.nodeSelectionObj.restore();
            }
            var range = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());
            save = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());
            selectNodeEle = this.nodeSelectionObj.getNodeCollection(range);
            selectParentEle = this.nodeSelectionObj.getParentNodeCollection(range);
          }
          if (item.command === "Images") {
            this.parent.notify(imageToolbarAction, {
              member: "image",
              args,
              selectNode: selectNodeEle,
              selection: save,
              selectParent: selectParentEle
            });
          }
          if (item.command === "Audios") {
            this.parent.notify(audioToolbarAction, {
              member: "audio",
              args,
              selectNode: selectNodeEle,
              selection: save,
              selectParent: selectParentEle
            });
          }
          if (item.command === "Videos") {
            this.parent.notify(videoToolbarAction, {
              member: "video",
              args,
              selectNode: selectNodeEle,
              selection: save,
              selectParent: selectParentEle
            });
          }
          if (item.command === "Links") {
            this.parent.notify(linkToolbarAction, {
              member: "link",
              args,
              selectNode: selectNodeEle,
              selection: save,
              selectParent: selectParentEle
            });
          }
          if (item.command === "Table") {
            this.parent.notify(tableToolbarAction, {
              member: "table",
              args,
              selectNode: selectNodeEle,
              selection: save,
              selectParent: selectParentEle
            });
          }
        } else {
          var linkDialog = document.getElementById(this.parent.getID() + "_rtelink");
          var imageDialog = document.getElementById(this.parent.getID() + "_image");
          if (!(item.subCommand === "SourceCode" || item.subCommand === "Preview" || item.subCommand === "FontColor" || item.subCommand === "BackgroundColor")) {
            var range = this.nodeSelectionObj.getRange(this.parent.contentModule.getDocument());
            if (isNullOrUndefined(linkDialog) && isNullOrUndefined(imageDialog)) {
              save = this.nodeSelectionObj.save(range, this.parent.contentModule.getDocument());
            }
            selectNodeEle = this.nodeSelectionObj.getNodeCollection(range);
            selectParentEle = this.nodeSelectionObj.getParentNodeCollection(range);
          }
          switch (item.subCommand) {
            case "Maximize":
              this.parent.notify(enableFullScreen, { args });
              break;
            case "Minimize":
              this.parent.notify(disableFullScreen, { args });
              break;
            case "CreateLink":
              this.parent.notify(insertLink, {
                member: "link",
                args,
                selectNode: selectNodeEle,
                selection: save,
                selectParent: selectParentEle
              });
              break;
            case "RemoveLink":
              this.parent.notify(unLink, {
                member: "link",
                args,
                selectNode: selectNodeEle,
                selection: save,
                selectParent: selectParentEle
              });
              break;
            case "Print":
              this.parent.print();
              break;
            case "Image":
              this.parent.notify(insertImage, {
                member: "image",
                args,
                selectNode: selectNodeEle,
                selection: save,
                selectParent: selectParentEle
              });
              break;
            case "Audio":
              this.parent.notify(insertAudio, {
                member: "audio",
                args,
                selectNode: selectNodeEle,
                selection: save,
                selectParent: selectParentEle
              });
              break;
            case "Video":
              this.parent.notify(insertVideo, {
                member: "video",
                args,
                selectNode: selectNodeEle,
                selection: save,
                selectParent: selectParentEle
              });
              break;
            case "CreateTable":
              this.parent.notify(createTable, {
                member: "table",
                args,
                selection: save
              });
              break;
            case "SourceCode":
              this.parent.notify(sourceCode, { member: "viewSource", args });
              break;
            case "Preview":
              this.parent.notify(updateSource, { member: "updateSource", args });
              break;
            case "FontColor":
            case "BackgroundColor":
              break;
            case "File":
              this.parent.notify(renderFileManager, {
                member: "fileManager",
                args,
                selectNode: selectNodeEle,
                selection: save,
                selectParent: selectParentEle
              });
              break;
            case "EmojiPicker":
              this.parent.notify(emojiPicker, { member: "emojiPicker", args });
              break;
            default:
              this.parent.formatter.process(this.parent, args, args.originalEvent, null);
              break;
          }
        }
      } else {
        if (args.originalEvent.detail === 1) {
          clearTimeout(this.clickTimeout);
          this.clickTimeout = setTimeout(function() {
            _this.parent.notify(formatPainterClick, {
              member: "formatPainter",
              args
            });
          }, 200);
        } else {
          clearTimeout(this.clickTimeout);
          this.parent.notify(formatPainterDoubleClick, {
            member: "formatPainter",
            args
          });
        }
      }
    };
    HtmlEditor2.prototype.renderColorPicker = function(args) {
      this.colorPickerModule.renderColorPickerInput(args);
    };
    HtmlEditor2.prototype.instantiateRenderer = function() {
      if (this.parent.iframeSettings.enable) {
        this.renderFactory.addRenderer(RenderType.Content, new IframeContentRender(this.parent, this.locator));
      } else {
        this.renderFactory.addRenderer(RenderType.Content, new ContentRender(this.parent, this.locator));
      }
    };
    HtmlEditor2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialEnd, this.render);
      this.parent.off(modelChanged, this.onPropertyChanged);
      this.parent.off(htmlToolbarClick, this.onToolbarClick);
      this.parent.off(renderColorPicker, this.renderColorPicker);
      this.parent.off(destroy, this.destroy);
      this.parent.off(keyDown, this.onKeyDown);
      this.parent.off(initialLoad, this.instantiateRenderer);
      this.parent.off(selectAll2, this.selectAll);
      this.parent.off(selectRange, this.selectRange);
      this.parent.off(getSelectedHtml, this.getSelectedHtml);
      this.parent.off(selectionSave, this.onSelectionSave);
      this.parent.off(selectionRestore, this.onSelectionRestore);
      this.parent.off(readOnlyMode, this.updateReadOnly);
      this.parent.off(paste, this.onPaste);
      this.parent.off(tableclass, this.isTableClassAdded);
    };
    HtmlEditor2.prototype.render = function() {
      this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
      var editElement = this.contentRenderer.getEditPanel();
      var option = { undoRedoSteps: this.parent.undoRedoSteps, undoRedoTimer: this.parent.undoRedoTimer };
      if (isNullOrUndefined(this.parent.formatter)) {
        var formatterClass = new HTMLFormatter({
          currentDocument: this.contentRenderer.getDocument(),
          element: editElement,
          options: option,
          formatPainterSettings: this.parent.formatPainterSettings
        });
        this.parent.setProperties({ formatter: formatterClass }, true);
      } else {
        this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);
      }
      if (this.parent.enableXhtml) {
        this.parent.notify(xhtmlValidation, {});
      }
      if (this.parent.toolbarSettings.enable) {
        this.toolbarUpdate = new HtmlToolbarStatus(this.parent);
      }
      if (this.parent.inlineMode.enable) {
        if (!isNullOrUndefined(this.parent.fontFamily.default)) {
          editElement.style.fontFamily = this.parent.fontFamily.default;
        }
        if (!isNullOrUndefined(this.parent.fontSize.default)) {
          editElement.style.fontSize = this.parent.fontSize.default;
        }
      }
      this.parent.notify(bindOnEnd, {});
    };
    HtmlEditor2.prototype.onPropertyChanged = function(e) {
      if (!isNullOrUndefined(e.newProp.formatter)) {
        var editElement = this.contentRenderer.getEditPanel();
        var option = {
          undoRedoSteps: this.parent.undoRedoSteps,
          undoRedoTimer: this.parent.undoRedoTimer
        };
        this.parent.formatter.updateFormatter(editElement, this.contentRenderer.getDocument(), option);
      }
    };
    HtmlEditor2.prototype.getModuleName = function() {
      return "htmlEditor";
    };
    HtmlEditor2.prototype.selectAll = function() {
      var nodes = getTextNodesUnder(this.parent.contentModule.getDocument(), this.parent.contentModule.getEditPanel());
      if (nodes.length > 0) {
        this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.parent.contentModule.getDocument(), nodes[0], nodes[nodes.length - 1], 0, nodes[nodes.length - 1].textContent.length);
      }
    };
    HtmlEditor2.prototype.selectRange = function(e) {
      this.parent.formatter.editorManager.nodeSelection.setRange(this.parent.contentModule.getDocument(), e.range);
    };
    HtmlEditor2.prototype.getSelectedHtml = function(e) {
      e.callBack(this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument()).toString());
    };
    return HtmlEditor2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/paste-clean-up.js
var PasteCleanup = (
  /** @class */
  function() {
    function PasteCleanup2(parent, serviceLocator) {
      this.inlineNode = [
        "a",
        "abbr",
        "acronym",
        "audio",
        "b",
        "bdi",
        "bdo",
        "big",
        "br",
        "button",
        "canvas",
        "cite",
        "code",
        "data",
        "datalist",
        "del",
        "dfn",
        "em",
        "embed",
        "font",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "label",
        "map",
        "mark",
        "meter",
        "noscript",
        "object",
        "output",
        "picture",
        "progress",
        "q",
        "ruby",
        "s",
        "samp",
        "script",
        "select",
        "slot",
        "small",
        "span",
        "strong",
        "sub",
        "sup",
        "svg",
        "template",
        "textarea",
        "time",
        "u",
        "tt",
        "var",
        "video",
        "wbr"
      ];
      this.blockNode = [
        "div",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "address",
        "blockquote",
        "button",
        "center",
        "dd",
        "dir",
        "dl",
        "dt",
        "fieldset",
        "frameset",
        "hr",
        "iframe",
        "isindex",
        "li",
        "map",
        "menu",
        "noframes",
        "noscript",
        "object",
        "ol",
        "pre",
        "td",
        "tr",
        "th",
        "tbody",
        "tfoot",
        "thead",
        "table",
        "ul",
        "header",
        "article",
        "nav",
        "footer",
        "section",
        "aside",
        "main",
        "figure",
        "figcaption"
      ];
      this.isNotFromHtml = false;
      this.containsHtml = false;
      this.parent = parent;
      this.locator = serviceLocator;
      this.renderFactory = this.locator.getService("rendererFactory");
      this.i10n = serviceLocator.getService("rteLocale");
      this.dialogRenderObj = serviceLocator.getService("dialogRenderObject");
      this.addEventListener();
    }
    PasteCleanup2.prototype.addEventListener = function() {
      this.nodeSelectionObj = new NodeSelection();
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(pasteClean, this.pasteClean, this);
      this.parent.on(bindCssClass, this.setCssClass, this);
      this.parent.on(destroy, this.destroy, this);
    };
    PasteCleanup2.prototype.destroy = function() {
      this.removeEventListener();
    };
    PasteCleanup2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(pasteClean, this.pasteClean);
      this.parent.off(bindCssClass, this.setCssClass);
      this.parent.off(destroy, this.destroy);
    };
    PasteCleanup2.prototype.pasteClean = function(e) {
      var _this = this;
      var args = {
        requestType: "Paste",
        editorMode: this.parent.editorMode,
        event: e
      };
      var value = null;
      var imageproperties;
      if (e.args && !isNullOrUndefined(e.args.clipboardData)) {
        value = e.args.clipboardData.getData("text/html");
      }
      this.parent.trigger(beforePasteCleanup, { value });
      if (e.args && value !== null && this.parent.editorMode === "HTML") {
        var file = void 0;
        if (value.length === 0) {
          var htmlRegex = new RegExp(/<\/[a-z][\s\S]*>/i);
          value = e.args.clipboardData.getData("text/plain");
          this.isNotFromHtml = value !== "" ? true : false;
          value = value.replace(/</g, "&lt;");
          value = value.replace(/>/g, "&gt;");
          this.containsHtml = htmlRegex.test(value);
          file = e && e.args.clipboardData && e.args.clipboardData.items.length > 0 ? e.args.clipboardData.items[0].getAsFile() === null ? !isNullOrUndefined(e.args.clipboardData.items[1]) ? e.args.clipboardData.items[1].getAsFile() : null : e.args.clipboardData.items[0].getAsFile() : null;
          this.parent.notify(paste, {
            file,
            args: e.args,
            text: value,
            callBack: function(b) {
              imageproperties = b;
              if (typeof imageproperties === "object") {
                _this.parent.formatter.editorManager.execCommand("Images", "Image", e.args, _this.imageFormatting.bind(_this, args), "pasteCleanup", imageproperties, "pasteCleanupModule");
              } else {
                value = imageproperties;
              }
            }
          });
          if (!htmlRegex.test(value)) {
            var divElement = this.parent.createElement("div");
            divElement.innerHTML = this.splitBreakLine(value);
            value = divElement.innerHTML;
          }
        } else if (value.length > 0) {
          this.parent.formatter.editorManager.observer.notify(MS_WORD_CLEANUP, {
            args: e.args,
            text: e.text,
            allowedStylePropertiesArray: this.parent.pasteCleanupSettings.allowedStyleProps,
            callBack: function(a) {
              value = a.trim();
            }
          });
        }
        this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
        var currentDocument = this.contentRenderer.getDocument();
        var range = this.nodeSelectionObj.getRange(currentDocument);
        this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);
        var tempDivElem = this.parent.createElement("div");
        tempDivElem.innerHTML = value;
        var isValueNotEmpty = tempDivElem.textContent !== "" || !isNullOrUndefined(tempDivElem.querySelector("img")) || !isNullOrUndefined(tempDivElem.querySelector("table"));
        if (this.parent.pasteCleanupSettings.prompt) {
          if (isValueNotEmpty) {
            e.args.preventDefault();
            this.pasteDialog(value, args);
          } else if (Browser.userAgent.indexOf("Firefox") !== -1 && isNullOrUndefined(file)) {
            this.fireFoxImageUpload();
          }
        } else if (!isValueNotEmpty && !this.parent.pasteCleanupSettings.plainText && Browser.userAgent.indexOf("Firefox") !== -1) {
          this.fireFoxImageUpload();
        } else if (this.parent.pasteCleanupSettings.plainText) {
          e.args.preventDefault();
          this.plainFormatting(value, args);
        } else if (this.parent.pasteCleanupSettings.keepFormat) {
          e.args.preventDefault();
          this.formatting(value, false, args);
        } else {
          e.args.preventDefault();
          this.formatting(value, true, args);
        }
      }
    };
    PasteCleanup2.prototype.fireFoxImageUpload = function() {
      var _this = this;
      setTimeout(function() {
        if (Browser.userAgent.indexOf("Firefox") !== -1) {
          var currentFocusNode = _this.nodeSelectionObj.getRange(_this.contentRenderer.getDocument()).startContainer;
          if (currentFocusNode.nodeName !== "#text") {
            currentFocusNode = currentFocusNode.childNodes[_this.nodeSelectionObj.getRange(_this.contentRenderer.getDocument()).startOffset];
          }
          if (currentFocusNode.previousSibling.nodeName === "IMG") {
            currentFocusNode.previousSibling.classList.add("pasteContent_Img");
            currentFocusNode.previousSibling.classList.add(CLS_RTE_IMAGE);
            if (_this.parent.insertImageSettings.display === "inline") {
              currentFocusNode.previousSibling.classList.add(CLS_IMGINLINE);
            } else {
              currentFocusNode.previousSibling.classList.add(CLS_IMGBREAK);
            }
            currentFocusNode.previousSibling.classList.add();
            _this.setImageProperties(currentFocusNode.previousSibling);
          }
        }
        _this.imgUploading(_this.parent.inputElement);
      }, 500);
    };
    PasteCleanup2.prototype.splitBreakLine = function(value) {
      var enterSplitText = value.split("\n");
      var contentInnerElem = "";
      for (var i = 0; i < enterSplitText.length; i++) {
        if (enterSplitText[i].trim() === "") {
          contentInnerElem += getDefaultValue(this.parent);
        } else {
          var contentWithSpace = this.makeSpace(enterSplitText[i]);
          contentInnerElem += "<p>" + contentWithSpace.trim() + "</p>";
        }
      }
      return contentInnerElem;
    };
    PasteCleanup2.prototype.makeSpace = function(enterSplitText) {
      var contentWithSpace = "";
      var spaceBetweenContent = true;
      var spaceSplit = enterSplitText.split(" ");
      for (var j = 0; j < spaceSplit.length; j++) {
        if (spaceSplit[j].trim() === "") {
          contentWithSpace += spaceBetweenContent ? "&nbsp;" : " ";
        } else {
          spaceBetweenContent = false;
          contentWithSpace += spaceSplit[j] + " ";
        }
      }
      return contentWithSpace;
    };
    PasteCleanup2.prototype.imgUploading = function(elm) {
      var allImgElm = elm.querySelectorAll(".pasteContent_Img");
      if (this.parent.insertImageSettings.saveUrl && allImgElm.length > 0) {
        var base64Src = [];
        var imgName = [];
        var uploadImg = [];
        for (var i = 0; i < allImgElm.length; i++) {
          if (allImgElm[i].getAttribute("src").split(",")[0].indexOf("base64") >= 0) {
            base64Src.push(allImgElm[i].getAttribute("src"));
            imgName.push(getUniqueID("rte_image"));
            uploadImg.push(allImgElm[i]);
          }
        }
        var fileList = [];
        for (var i = 0; i < base64Src.length; i++) {
          fileList.push(this.base64ToFile(base64Src[i], imgName[i]));
        }
        for (var i = 0; i < fileList.length; i++) {
          this.uploadMethod(fileList[i], uploadImg[i]);
        }
        if (isNullOrUndefined(this.parent.insertImageSettings.path) && this.parent.insertImageSettings.saveFormat === "Blob") {
          this.getBlob(allImgElm);
        }
      } else if (this.parent.insertImageSettings.saveFormat === "Blob") {
        this.getBlob(allImgElm);
      }
      var allImgElmId = elm.querySelectorAll(".pasteContent_Img");
      for (var i = 0; i < allImgElmId.length; i++) {
        allImgElmId[i].classList.remove("pasteContent_Img");
        if (allImgElmId[i].getAttribute("class").trim() === "") {
          allImgElm[i].removeAttribute("class");
        }
      }
    };
    PasteCleanup2.prototype.getBlob = function(allImgElm) {
      for (var i = 0; i < allImgElm.length; i++) {
        if (!isNullOrUndefined(allImgElm[i].getAttribute("src")) && allImgElm[i].getAttribute("src").split(",")[0].indexOf("base64") >= 0) {
          var blopUrl = URL.createObjectURL(convertToBlob(allImgElm[i].getAttribute("src")));
          allImgElm[i].setAttribute("src", blopUrl);
        }
      }
    };
    PasteCleanup2.prototype.toolbarEnableDisable = function(state) {
      if (!this.parent.inlineMode.enable) {
        this.parent.toolbarModule.baseToolbar.toolbarObj.disable(state);
      }
    };
    PasteCleanup2.prototype.uploadMethod = function(fileList, imgElem) {
      var _this = this;
      var uploadEle = document.createElement("div");
      document.body.appendChild(uploadEle);
      uploadEle.setAttribute("display", "none");
      imgElem.style.opacity = "0.5";
      var popupEle = this.parent.createElement("div");
      this.parent.element.appendChild(popupEle);
      var contentEle = this.parent.createElement("input", {
        id: this.parent.element.id + "_upload",
        attrs: { type: "File", name: "UploadFiles" }
      });
      var offsetY = this.parent.iframeSettings.enable ? -50 : -90;
      this.popupObj = new Popup(popupEle, {
        relateTo: imgElem,
        height: "85px",
        width: "300px",
        offsetY,
        content: contentEle,
        viewPortElement: this.parent.element,
        position: { X: "center", Y: "top" },
        enableRtl: this.parent.enableRtl,
        zIndex: 10001,
        // eslint-disable-next-line
        close: function(event2) {
          _this.parent.isBlur = false;
          _this.popupObj.destroy();
          detach(_this.popupObj.element);
        }
      });
      this.popupObj.element.style.display = "none";
      addClass([this.popupObj.element], [CLS_POPUP_OPEN, CLS_RTE_UPLOAD_POPUP]);
      if (!isNullOrUndefined(this.parent.cssClass)) {
        addClass([this.popupObj.element], this.parent.cssClass);
      }
      var timeOut = fileList.size > 1e6 ? 300 : 100;
      setTimeout(function() {
        _this.refreshPopup(imgElem, _this.popupObj);
      }, timeOut);
      var rawFile;
      var beforeUploadArgs;
      this.uploadObj = new Uploader({
        asyncSettings: {
          saveUrl: this.parent.insertImageSettings.saveUrl,
          removeUrl: this.parent.insertImageSettings.removeUrl
        },
        cssClass: CLS_RTE_DIALOG_UPLOAD,
        dropArea: this.parent.inputElement,
        allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),
        success: function(e) {
          setTimeout(function() {
            _this.popupClose(_this.popupObj, _this.uploadObj, imgElem, e);
          }, 900);
        },
        uploading: function(e) {
          if (!_this.parent.isServerRendered) {
            _this.parent.trigger(imageUploading, e, function(imageUploadingArgs) {
              if (imageUploadingArgs.cancel) {
                if (!isNullOrUndefined(imgElem)) {
                  detach(imgElem);
                }
                if (!isNullOrUndefined(_this.popupObj.element)) {
                  detach(_this.popupObj.element);
                }
              } else {
                _this.parent.inputElement.contentEditable = "false";
              }
            });
          }
        },
        beforeUpload: function(args) {
          if (_this.parent.isServerRendered) {
            beforeUploadArgs = JSON.parse(JSON.stringify(args));
            beforeUploadArgs.filesData = rawFile;
            args.cancel = true;
            _this.parent.trigger(imageUploading, beforeUploadArgs, function(beforeUploadArgs2) {
              if (beforeUploadArgs2.cancel) {
                return;
              }
              _this.toolbarEnableDisable(true);
              _this.uploadObj.currentRequestHeader = beforeUploadArgs2.currentRequest ? beforeUploadArgs2.currentRequest : _this.uploadObj.currentRequestHeader;
              _this.uploadObj.customFormDatas = beforeUploadArgs2.customFormData && beforeUploadArgs2.customFormData.length > 0 ? beforeUploadArgs2.customFormData : _this.uploadObj.customFormDatas;
              _this.uploadObj.uploadFiles(rawFile, null);
            });
          } else {
            _this.parent.trigger(beforeImageUpload, args);
            _this.toolbarEnableDisable(true);
          }
        },
        // eslint-disable-next-line
        failure: function(e) {
          setTimeout(function() {
            _this.uploadFailure(imgElem, _this.uploadObj, _this.popupObj, e);
          }, 900);
        },
        canceling: function() {
          _this.parent.inputElement.contentEditable = "true";
          if (imgElem.nextSibling.textContent === " ") {
            detach(imgElem.nextSibling);
          }
          detach(imgElem);
          _this.popupObj.close();
        },
        selected: function(e) {
          e.cancel = true;
          if (_this.parent.isServerRendered) {
            rawFile = e.filesData;
          }
        },
        removing: function() {
          _this.parent.inputElement.contentEditable = "true";
          if (imgElem.nextSibling.textContent === " ") {
            detach(imgElem.nextSibling);
          }
          detach(imgElem);
          _this.popupObj.close();
        }
      });
      this.uploadObj.appendTo(this.popupObj.element.childNodes[0]);
      var fileData = [{
        name: fileList.name,
        rawFile: fileList,
        size: fileList.size,
        type: fileList.type,
        validationMessages: { minSize: "", maxSize: "" },
        statusCode: "1"
      }];
      this.uploadObj.createFileList(fileData);
      rawFile = fileData;
      this.uploadObj.upload(fileData);
      this.popupObj.element.getElementsByClassName("e-file-select-wrap")[0].style.display = "none";
      detach(this.popupObj.element.querySelector(".e-rte-dialog-upload .e-file-select-wrap"));
    };
    PasteCleanup2.prototype.uploadFailure = function(imgElem, uploadObj, popupObj, e) {
      this.parent.inputElement.contentEditable = "true";
      detach(imgElem);
      if (popupObj) {
        popupObj.close();
      }
      this.parent.trigger(imageUploadFailed, e);
      uploadObj.destroy();
    };
    PasteCleanup2.prototype.popupClose = function(popupObj, uploadObj, imgElem, e) {
      var _this = this;
      this.parent.inputElement.contentEditable = "true";
      e.element = imgElem;
      this.parent.trigger(imageUploadSuccess, e, function(e2) {
        if (!isNullOrUndefined(_this.parent.insertImageSettings.path)) {
          var url = _this.parent.insertImageSettings.path + e2.file.name;
          imgElem.src = url;
          imgElem.setAttribute("alt", e2.file.name);
        }
      });
      popupObj.close();
      imgElem.style.opacity = "1";
      uploadObj.destroy();
      this.toolbarEnableDisable(false);
    };
    PasteCleanup2.prototype.refreshPopup = function(imageElement, popupObj) {
      var imgPosition = this.parent.iframeSettings.enable ? this.parent.element.offsetTop + imageElement.offsetTop : imageElement.offsetTop;
      var rtePosition = this.parent.element.offsetTop + this.parent.element.offsetHeight;
      if (imgPosition > rtePosition) {
        popupObj.relateTo = this.parent.inputElement;
        popupObj.offsetY = this.parent.iframeSettings.enable ? -30 : -65;
        popupObj.element.style.display = "block";
      } else {
        if (popupObj) {
          popupObj.refreshPosition(imageElement);
          popupObj.element.style.display = "block";
        }
      }
    };
    PasteCleanup2.prototype.base64ToFile = function(base64, filename) {
      var baseStr = base64.split(",");
      var typeStr = baseStr[0].match(/:(.*?);/)[1];
      var extension = typeStr.split("/")[1];
      var decodeStr = atob(baseStr[1]);
      var strLen = decodeStr.length;
      var decodeArr = new Uint8Array(strLen);
      while (strLen--) {
        decodeArr[strLen] = decodeStr.charCodeAt(strLen);
      }
      if (Browser.isIE || navigator.appVersion.indexOf("Edge") > -1) {
        var blob = new Blob([decodeArr], { type: extension });
        extend(blob, { name: filename + "." + (!isNullOrUndefined(extension) ? extension : "") });
        return blob;
      } else {
        return new File([decodeArr], filename + "." + (!isNullOrUndefined(extension) ? extension : ""), { type: extension });
      }
    };
    PasteCleanup2.prototype.imageFormatting = function(pasteArgs, imgElement) {
      imgElement.elements[0].classList.add("pasteContent_Img");
      var imageElement = this.parent.createElement("span");
      imageElement.appendChild(imgElement.elements[0]);
      var imageValue = imageElement.innerHTML;
      this.contentRenderer = this.renderFactory.getRenderer(RenderType.Content);
      var currentDocument = this.contentRenderer.getDocument();
      var range = this.nodeSelectionObj.getRange(currentDocument);
      this.saveSelection = this.nodeSelectionObj.save(range, currentDocument);
      if (this.parent.pasteCleanupSettings.prompt) {
        this.pasteDialog(imageValue, pasteArgs);
      } else if (this.parent.pasteCleanupSettings.plainText) {
        this.plainFormatting(imageValue, pasteArgs);
      } else if (this.parent.pasteCleanupSettings.keepFormat) {
        this.formatting(imageValue, false, pasteArgs);
      } else {
        this.formatting(imageValue, true, pasteArgs);
      }
    };
    PasteCleanup2.prototype.radioRender = function() {
      this.keepRadioButton = new RadioButton({
        label: this.i10n.getConstant("keepFormat"),
        name: "pasteOption",
        checked: true
      });
      this.keepRadioButton.isStringTemplate = true;
      var keepFormatElement = this.parent.element.querySelector("#keepFormating");
      this.keepRadioButton.appendTo(keepFormatElement);
      this.cleanRadioButton = new RadioButton({ label: this.i10n.getConstant("cleanFormat"), name: "pasteOption" });
      this.cleanRadioButton.isStringTemplate = true;
      var cleanFormatElement = this.parent.element.querySelector("#cleanFormat");
      this.cleanRadioButton.appendTo(cleanFormatElement);
      this.plainTextRadioButton = new RadioButton({ label: this.i10n.getConstant("plainText"), name: "pasteOption" });
      this.plainTextRadioButton.isStringTemplate = true;
      var plainTextElement = this.parent.element.querySelector("#plainTextFormat");
      this.plainTextRadioButton.appendTo(plainTextElement);
    };
    PasteCleanup2.prototype.selectFormatting = function(value, args, keepChecked, cleanChecked) {
      if (keepChecked) {
        this.formatting(value, false, args);
      } else if (cleanChecked) {
        this.formatting(value, true, args);
      } else {
        this.plainFormatting(value, args);
      }
    };
    PasteCleanup2.prototype.pasteDialog = function(value, args) {
      var _this = this;
      var isHeight = false;
      var preRTEHeight = this.parent.height;
      var dialogModel = {
        buttons: [
          {
            click: function() {
              if (!_this.dialogObj.isDestroyed) {
                var keepChecked = _this.parent.element.querySelector("#keepFormating").checked;
                var cleanChecked = _this.parent.element.querySelector("#cleanFormat").checked;
                _this.dialogObj.hide();
                _this.parent.height = isHeight ? preRTEHeight : _this.parent.height;
                isHeight = false;
                var argument = _this.dialogObj;
                _this.dialogRenderObj.close(argument);
                _this.dialogObj.destroy();
                _this.selectFormatting(value, args, keepChecked, cleanChecked);
              }
            },
            buttonModel: {
              isPrimary: true,
              cssClass: "e-flat " + CLS_RTE_PASTE_OK,
              content: this.i10n.getConstant("pasteDialogOk")
            }
          },
          {
            click: function() {
              if (!_this.dialogObj.isDestroyed) {
                _this.dialogObj.hide();
                _this.parent.height = isHeight ? preRTEHeight : _this.parent.height;
                isHeight = false;
                var args_1 = _this.dialogObj;
                _this.dialogRenderObj.close(args_1);
                _this.dialogObj.destroy();
              }
            },
            buttonModel: {
              cssClass: "e-flat " + CLS_RTE_PASTE_CANCEL,
              content: this.i10n.getConstant("pasteDialogCancel")
            }
          }
        ],
        header: this.i10n.getConstant("pasteFormat"),
        content: this.i10n.getConstant("pasteFormatContent") + '<br/><div><div style="padding-top:24px;"><input type="radio" class="' + CLS_RTE_PASTE_KEEP_FORMAT + '" id="keepFormating"/></div><div style="padding-top:20px;"><input type="radio" class="' + CLS_RTE_PASTE_REMOVE_FORMAT + '" id="cleanFormat"/></div><div style="padding-top:20px;"><input type="radio" class="' + CLS_RTE_PASTE_PLAIN_FORMAT + '" id="plainTextFormat"/></div></div>',
        target: this.parent.element,
        width: "300px",
        height: "265px",
        cssClass: CLS_RTE_DIALOG_MIN_HEIGHT,
        isModal: true,
        visible: false
      };
      this.dialogObj = this.dialogRenderObj.render(dialogModel);
      var rteDialogWrapper = this.parent.element.querySelector("#" + this.parent.getID() + "_pasteCleanupDialog");
      if (rteDialogWrapper !== null && rteDialogWrapper.innerHTML !== "") {
        this.destroyDialog(rteDialogWrapper);
      }
      if (rteDialogWrapper === null) {
        rteDialogWrapper = this.parent.createElement("div", {
          id: this.parent.getID() + "_pasteCleanupDialog"
        });
        this.parent.element.appendChild(rteDialogWrapper);
      }
      this.dialogObj.appendTo(rteDialogWrapper);
      this.radioRender();
      if (this.parent.element.offsetHeight < parseInt(this.dialogObj.height.split("px")[0], null)) {
        this.parent.setProperties({ height: parseInt(this.dialogObj.height.split("px")[0], null) + 40 });
        isHeight = true;
      }
      this.dialogObj.show();
      this.setCssClass({ cssClass: this.parent.cssClass });
    };
    PasteCleanup2.prototype.updateCss = function(currentObj, e) {
      if (currentObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass)) {
          currentObj.setProperties({ cssClass: (currentObj.cssClass + " " + e.cssClass).trim() });
        } else {
          currentObj.setProperties({ cssClass: (currentObj.cssClass.replace(e.oldCssClass, "").trim() + " " + e.cssClass).trim() });
        }
      }
    };
    PasteCleanup2.prototype.setCssClass = function(e) {
      if (this.popupObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass)) {
          addClass([this.popupObj.element], e.cssClass);
        } else {
          removeClass([this.popupObj.element], e.oldCssClass);
          addClass([this.popupObj.element], e.cssClass);
        }
      }
      this.updateCss(this.dialogObj, e);
      this.updateCss(this.uploadObj, e);
      this.updateCss(this.plainTextRadioButton, e);
      this.updateCss(this.cleanRadioButton, e);
      this.updateCss(this.keepRadioButton, e);
    };
    PasteCleanup2.prototype.destroyDialog = function(rteDialogWrapper) {
      var rteDialogContainer = this.parent.element.querySelector(".e-dlg-container");
      detach(rteDialogContainer);
      var rteDialogWrapperChildLength = rteDialogWrapper.children.length;
      for (var i = 0; i < rteDialogWrapperChildLength; i++) {
        detach(rteDialogWrapper.children[0]);
      }
    };
    PasteCleanup2.prototype.cleanAppleClass = function(elem) {
      var appleClassElem = elem.querySelectorAll("br.Apple-interchange-newline");
      for (var i = 0; i < appleClassElem.length; i++) {
        detach(appleClassElem[i]);
      }
      return elem;
    };
    PasteCleanup2.prototype.formatting = function(value, clean, args) {
      var _this = this;
      var clipBoardElem = this.parent.createElement("div", { className: "pasteContent", styles: "display:inline;" });
      if (this.isNotFromHtml && this.containsHtml) {
        value = this.splitBreakLine(value);
      }
      clipBoardElem.innerHTML = value;
      clipBoardElem = this.cleanAppleClass(clipBoardElem);
      if (this.parent.pasteCleanupSettings.deniedTags !== null) {
        clipBoardElem = this.deniedTags(clipBoardElem);
      }
      if (clean) {
        clipBoardElem = this.deniedAttributes(clipBoardElem, clean);
      } else if (this.parent.pasteCleanupSettings.deniedAttrs !== null) {
        clipBoardElem = this.deniedAttributes(clipBoardElem, clean);
      }
      if (this.parent.pasteCleanupSettings.allowedStyleProps !== null) {
        clipBoardElem = this.allowedStyle(clipBoardElem);
      }
      this.saveSelection.restore();
      clipBoardElem.innerHTML = this.sanitizeHelper(clipBoardElem.innerHTML);
      var allImg = clipBoardElem.querySelectorAll("img");
      for (var i = 0; i < allImg.length; i++) {
        allImg[i].classList.add("pasteContent_Img");
        this.setImageProperties(allImg[i]);
      }
      this.addTempClass(clipBoardElem);
      if (clipBoardElem.textContent !== "" || !isNullOrUndefined(clipBoardElem.querySelector("img")) || !isNullOrUndefined(clipBoardElem.querySelector("table"))) {
        var tempWrapperElem = this.parent.createElement("div");
        tempWrapperElem.innerHTML = value;
        var filesData = [];
        if (!isNullOrUndefined(tempWrapperElem.querySelector("img"))) {
          var imgElem = tempWrapperElem.querySelectorAll("img");
          var base64Src = [];
          var imgName = [];
          var uploadImg = [];
          for (var i = 0; i < imgElem.length; i++) {
            if (imgElem[i].getAttribute("src") && imgElem[i].getAttribute("src").split(",")[0].indexOf("base64") >= 0) {
              base64Src.push(imgElem[i].getAttribute("src"));
              imgName.push(getUniqueID("rte_image"));
              uploadImg.push(imgElem[i]);
            }
          }
          var fileList = [];
          var currentData = void 0;
          for (var i = 0; i < base64Src.length; i++) {
            fileList.push(this.base64ToFile(base64Src[i], imgName[i]));
            currentData = {
              name: fileList[i].name,
              rawFile: fileList[i],
              size: fileList[i].size,
              type: fileList[i].type,
              status: "",
              validationMessages: { minSize: "", maxSize: "" },
              statusCode: "1"
            };
            filesData.push(currentData);
          }
        }
        this.parent.trigger(afterPasteCleanup, { value: clipBoardElem.innerHTML, filesData }, function(updatedArgs) {
          value = updatedArgs.value;
        });
        clipBoardElem.innerHTML = value;
        this.parent.formatter.editorManager.execCommand("inserthtml", "pasteCleanup", args, function(returnArgs) {
          extend(args, { elements: returnArgs.elements, imageElements: returnArgs.imgElem }, true);
          _this.parent.formatter.onSuccess(_this.parent, args);
        }, clipBoardElem, null, null, this.parent.enterKey);
        this.removeTempClass();
        this.parent.notify(toolbarRefresh, {});
        this.imgUploading(this.parent.inputElement);
        if (this.parent.iframeSettings.enable) {
          this.parent.updateValue();
        }
      }
    };
    PasteCleanup2.prototype.setImageProperties = function(allImg) {
      if (this.parent.insertImageSettings.width !== "auto") {
        allImg.setAttribute("width", this.parent.insertImageSettings.width);
      }
      if (this.parent.insertImageSettings.minWidth !== "0" && this.parent.insertImageSettings.minWidth !== 0) {
        allImg.style.minWidth = this.parent.insertImageSettings.minWidth.toString();
      }
      if (this.parent.insertImageSettings.maxWidth !== null) {
        allImg.style.maxWidth = this.parent.getInsertImgMaxWidth().toString();
      }
      if (this.parent.insertImageSettings.height !== "auto") {
        allImg.setAttribute("height", this.parent.insertImageSettings.height);
      }
      if (this.parent.insertImageSettings.minHeight !== "0" && this.parent.insertImageSettings.minHeight !== 0) {
        allImg.style.minHeight = this.parent.insertImageSettings.minHeight.toString();
      }
      if (this.parent.insertImageSettings.maxHeight !== null) {
        allImg.style.maxHeight = this.parent.insertImageSettings.maxHeight.toString();
      }
    };
    PasteCleanup2.prototype.addTempClass = function(clipBoardElem) {
      var allChild = clipBoardElem.children;
      for (var i = 0; i < allChild.length; i++) {
        allChild[i].classList.add("pasteContent_RTE");
      }
    };
    PasteCleanup2.prototype.removeTempClass = function() {
      var classElm = this.parent.inputElement.querySelectorAll(".pasteContent_RTE");
      for (var i = 0; i < classElm.length; i++) {
        classElm[i].classList.remove("pasteContent_RTE");
        if (classElm[i].getAttribute("class") === "") {
          classElm[i].removeAttribute("class");
        }
      }
    };
    PasteCleanup2.prototype.sanitizeHelper = function(value) {
      value = sanitizeHelper(value, this.parent);
      return value;
    };
    PasteCleanup2.prototype.plainFormatting = function(value, args) {
      var _this = this;
      var clipBoardElem = this.parent.createElement("div", { className: "pasteContent", styles: "display:inline;" });
      clipBoardElem.innerHTML = value;
      this.detachInlineElements(clipBoardElem);
      this.getTextContent(clipBoardElem);
      if (clipBoardElem.textContent.trim() !== "") {
        if (!isNullOrUndefined(clipBoardElem.firstElementChild) && clipBoardElem.firstElementChild.tagName !== "BR") {
          var firstElm = clipBoardElem.firstElementChild;
          if (!isNullOrUndefined(clipBoardElem.firstElementChild)) {
            var spanElm = this.parent.createElement("span");
            for (var i = 0, j = 0; i < firstElm.childNodes.length; i++, j++) {
              if (firstElm.childNodes[i].nodeName === "#text") {
                spanElm.appendChild(firstElm.childNodes[i]);
                clipBoardElem.insertBefore(spanElm, clipBoardElem.firstElementChild);
                i--;
              } else if (firstElm.childNodes[i].nodeName !== "#text" && j === 0) {
                for (var k = 0; k < firstElm.childNodes[i].childNodes.length; k++) {
                  spanElm.appendChild(firstElm.childNodes[i].childNodes[k]);
                  clipBoardElem.insertBefore(spanElm, clipBoardElem.firstElementChild);
                  k--;
                }
                i--;
              } else {
                break;
              }
            }
            if (!firstElm.hasChildNodes()) {
              detach(firstElm);
            }
          }
        }
        this.removeEmptyElements(clipBoardElem);
        this.saveSelection.restore();
        clipBoardElem.innerHTML = this.sanitizeHelper(clipBoardElem.innerHTML);
        this.addTempClass(clipBoardElem);
        this.parent.trigger(afterPasteCleanup, { value: clipBoardElem.innerHTML, filesData: null }, function(updatedArgs) {
          value = updatedArgs.value;
        });
        clipBoardElem.innerHTML = value;
        this.parent.formatter.editorManager.execCommand("inserthtml", "pasteCleanup", args, function(returnArgs) {
          extend(args, { elements: returnArgs.elements, imageElements: returnArgs.imgElem }, true);
          _this.parent.formatter.onSuccess(_this.parent, args);
        }, clipBoardElem, null, null, this.parent.enterKey);
        this.removeTempClass();
      } else {
        this.saveSelection.restore();
        extend(args, { elements: [] }, true);
        this.parent.formatter.onSuccess(this.parent, args);
      }
    };
    PasteCleanup2.prototype.getTextContent = function(clipBoardElem) {
      for (var i = 0; i < this.blockNode.length; i++) {
        var inElem = clipBoardElem.querySelectorAll(this.blockNode[i]);
        for (var j = 0; j < inElem.length; j++) {
          var parElem = void 0;
          for (var k = 0, l = 0, preNode = void 0; k < inElem[j].childNodes.length; k++, l++) {
            if (inElem[j].childNodes[k].nodeName === "DIV" || inElem[j].childNodes[k].nodeName === "P" || inElem[j].childNodes[k].nodeName === "#text" && inElem[j].childNodes[k].nodeValue.replace(/\u00a0/g, "&nbsp;") !== "&nbsp;" && inElem[j].childNodes[k].textContent.trim() === "") {
              parElem = inElem[j].childNodes[k].parentElement;
              inElem[j].childNodes[k].parentElement.parentElement.insertBefore(inElem[j].childNodes[k], inElem[j].childNodes[k].parentElement);
              k--;
            } else {
              parElem = inElem[j].childNodes[k].parentElement;
              if (preNode === "text") {
                var previousElem = parElem.previousElementSibling;
                previousElem.appendChild(inElem[j].childNodes[k]);
              } else {
                var divElement = this.parent.createElement("div", { id: "newDiv" });
                divElement.appendChild(inElem[j].childNodes[k]);
                parElem.parentElement.insertBefore(divElement, parElem);
              }
              k--;
              preNode = "text";
            }
          }
          if (!isNullOrUndefined(parElem)) {
            detach(parElem);
          }
        }
      }
      var allElems = clipBoardElem.querySelectorAll("*");
      for (var i = 0; i < allElems.length; i++) {
        var allAtr = allElems[i].attributes;
        for (var j = 0; j < allAtr.length; j++) {
          allElems[i].removeAttribute(allAtr[j].name);
          j--;
        }
      }
    };
    PasteCleanup2.prototype.detachInlineElements = function(clipBoardElem) {
      for (var i = 0; i < this.inlineNode.length; i++) {
        var inElem = clipBoardElem.querySelectorAll(this.inlineNode[i]);
        for (var j = 0; j < inElem.length; j++) {
          var parElem = void 0;
          for (var k = 0; k < inElem[j].childNodes.length; k++) {
            parElem = inElem[j].childNodes[k].parentElement;
            inElem[j].childNodes[k].parentElement.parentElement.insertBefore(inElem[j].childNodes[k], inElem[j].childNodes[k].parentElement);
            k--;
          }
          if (!isNullOrUndefined(parElem)) {
            detach(parElem);
          }
        }
      }
    };
    PasteCleanup2.prototype.findDetachEmptyElem = function(element) {
      var removableElement;
      if (!isNullOrUndefined(element.parentElement)) {
        if (element.parentElement.textContent.trim() === "" && element.parentElement.getAttribute("class") !== "pasteContent") {
          removableElement = this.findDetachEmptyElem(element.parentElement);
        } else {
          removableElement = element;
        }
      } else {
        removableElement = null;
      }
      return removableElement;
    };
    PasteCleanup2.prototype.removeEmptyElements = function(element) {
      var emptyElements = element.querySelectorAll(":empty");
      for (var i = 0; i < emptyElements.length; i++) {
        if (emptyElements[i].tagName !== "BR") {
          var detachableElement = this.findDetachEmptyElem(emptyElements[i]);
          if (!isNullOrUndefined(detachableElement)) {
            detach(detachableElement);
          }
        }
      }
    };
    PasteCleanup2.prototype.tagGrouping = function(deniedTags) {
      var groupingTags = deniedTags.slice();
      var keys = Object.keys(pasteCleanupGroupingTags);
      var values = keys.map(function(key) {
        return pasteCleanupGroupingTags["" + key];
      });
      var addTags = [];
      for (var i = 0; i < groupingTags.length; i++) {
        if (groupingTags[i].split("[").length > 1) {
          groupingTags[i] = groupingTags[i].split("[")[0].trim();
        }
        if (keys.indexOf(groupingTags[i]) > -1) {
          for (var j = 0; j < values[keys.indexOf(groupingTags[i])].length; j++) {
            if (groupingTags.indexOf(values[keys.indexOf(groupingTags[i])][j]) < 0 && addTags.indexOf(values[keys.indexOf(groupingTags[i])][j]) < 0) {
              addTags.push(values[keys.indexOf(groupingTags[i])][j]);
            }
          }
        }
      }
      return deniedTags = deniedTags.concat(addTags);
    };
    PasteCleanup2.prototype.attributesfilter = function(deniedTags) {
      for (var i = 0; i < deniedTags.length; i++) {
        if (deniedTags[i].split("[").length > 1) {
          var userAttributes = deniedTags[i].split("[")[1].split("]")[0].split(",");
          var allowedAttributeArray = [];
          var deniedAttributeArray = [];
          for (var j = 0; j < userAttributes.length; j++) {
            userAttributes[j].indexOf("!") < 0 ? allowedAttributeArray.push(userAttributes[j].trim()) : deniedAttributeArray.push(userAttributes[j].split("!")[1].trim());
          }
          var allowedAttribute = allowedAttributeArray.length > 1 ? allowedAttributeArray.join("][") : allowedAttributeArray.join();
          var deniedAttribute = deniedAttributeArray.length > 1 ? deniedAttributeArray.join("][") : deniedAttributeArray.join();
          if (deniedAttribute.length > 0) {
            var select2 = allowedAttribute !== "" ? deniedTags[i].split("[")[0] + "[" + allowedAttribute + "]" : deniedTags[i].split("[")[0];
            deniedTags[i] = select2 + ":not([" + deniedAttribute + "])";
          } else {
            deniedTags[i] = deniedTags[i].split("[")[0] + "[" + allowedAttribute + "]";
          }
        }
      }
      return deniedTags;
    };
    PasteCleanup2.prototype.deniedTags = function(clipBoardElem) {
      var deniedTags = isNullOrUndefined(this.parent.pasteCleanupSettings.deniedTags) ? [] : this.parent.pasteCleanupSettings.deniedTags.slice();
      deniedTags = this.attributesfilter(deniedTags);
      deniedTags = this.tagGrouping(deniedTags);
      for (var i = 0; i < deniedTags.length; i++) {
        var removableElement = clipBoardElem.querySelectorAll(deniedTags[i]);
        for (var j = removableElement.length - 1; j >= 0; j--) {
          var parentElem = removableElement[j].parentNode;
          while (removableElement[j].firstChild) {
            parentElem.insertBefore(removableElement[j].firstChild, removableElement[j]);
          }
          parentElem.removeChild(removableElement[j]);
        }
      }
      return clipBoardElem;
    };
    PasteCleanup2.prototype.deniedAttributes = function(clipBoardElem, clean) {
      var deniedAttrs = isNullOrUndefined(this.parent.pasteCleanupSettings.deniedAttrs) ? [] : this.parent.pasteCleanupSettings.deniedAttrs.slice();
      if (clean) {
        deniedAttrs.push("style");
      }
      for (var i = 0; i < deniedAttrs.length; i++) {
        var removableAttrElement = clipBoardElem.querySelectorAll("[" + deniedAttrs[i] + "]");
        for (var j = 0; j < removableAttrElement.length; j++) {
          removableAttrElement[j].removeAttribute(deniedAttrs[i]);
        }
      }
      return clipBoardElem;
    };
    PasteCleanup2.prototype.allowedStyle = function(clipBoardElem) {
      var allowedStyleProps = isNullOrUndefined(this.parent.pasteCleanupSettings.allowedStyleProps) ? [] : this.parent.pasteCleanupSettings.allowedStyleProps.slice();
      allowedStyleProps.push("list-style-type", "list-style");
      var styleElement = clipBoardElem.querySelectorAll("[style]");
      for (var i = 0; i < styleElement.length; i++) {
        var allowedStyleValue = "";
        var allowedStyleValueArray = [];
        var styleValue = styleElement[i].getAttribute("style").split(";");
        for (var k = 0; k < styleValue.length; k++) {
          if (allowedStyleProps.indexOf(styleValue[k].split(":")[0].trim()) >= 0) {
            allowedStyleValueArray.push(styleValue[k]);
          }
        }
        styleElement[i].removeAttribute("style");
        allowedStyleValue = allowedStyleValueArray.join(";").trim() === "" ? allowedStyleValueArray.join(";") : allowedStyleValueArray.join(";") + ";";
        if (allowedStyleValue) {
          styleElement[i].setAttribute("style", allowedStyleValue);
        }
      }
      return clipBoardElem;
    };
    PasteCleanup2.prototype.getModuleName = function() {
      return "pasteCleanup";
    };
    return PasteCleanup2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/resize.js
var Resize2 = (
  /** @class */
  function() {
    function Resize3(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    Resize3.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(initialEnd, this.renderResizable, this);
      this.parent.on(destroy, this.destroy, this);
    };
    Resize3.prototype.renderResizable = function() {
      var enableRtlClass = this.parent.enableRtl ? CLS_RTE_RES_WEST : CLS_RTE_RES_EAST;
      this.resizer = this.parent.createElement("div", {
        id: this.parent.getID() + "-resizable",
        className: "e-icons " + CLS_RTE_RES_HANDLE + " " + enableRtlClass
      });
      this.parent.element.classList.add(CLS_RTE_RES_CNT);
      this.parent.element.appendChild(this.resizer);
      this.touchStartEvent = Browser.info.name === "msie" ? "pointerdown" : "touchstart";
      EventHandler.add(this.resizer, "mousedown", this.resizeStart, this);
      EventHandler.add(this.resizer, this.touchStartEvent, this.resizeStart, this);
    };
    Resize3.prototype.resizeStart = function(e) {
      var _this = this;
      if (e.cancelable) {
        e.preventDefault();
      }
      this.wireResizeEvents();
      this.parent.notify(resizeInitialized, {});
      var args = { event: e, requestType: "editor" };
      this.parent.trigger(resizeStart, args, function(resizeStartArgs) {
        if (resizeStartArgs.cancel) {
          _this.unwireResizeEvents();
        }
      });
    };
    Resize3.prototype.performResize = function(e) {
      var _this = this;
      var args = { event: e, requestType: "editor" };
      this.parent.trigger(onResize, args, function(resizingArgs) {
        if (resizingArgs.cancel) {
          _this.unwireResizeEvents();
        }
      });
      var boundRect = this.parent.element.getBoundingClientRect();
      if (this.isMouseEvent(e)) {
        this.parent.element.style.height = e.clientY - boundRect.top + "px";
        this.parent.element.style.width = !this.parent.enableRtl ? e.clientX - boundRect.left + "px" : boundRect.right - e.clientX + "px";
        var toolBarEle = this.parent.toolbarModule.getToolbarElement();
        if (toolBarEle !== null) {
          if (toolBarEle.classList.contains(CLS_TB_FLOAT) && this.parent.toolbarSettings.enableFloating && this.parent.getToolbar() && !this.parent.inlineMode.enable) {
            var contentPanel = this.parent.contentModule.getPanel();
            var contentPanelWidth = contentPanel.getBoundingClientRect().width;
            toolBarEle.style.width = contentPanelWidth + "px";
          }
        }
      } else {
        var eventType = Browser.info.name !== "msie" ? e.touches[0] : e;
        this.parent.element.style.height = eventType.clientY - boundRect.top + "px";
        this.parent.element.style.width = !this.parent.enableRtl ? eventType.clientX - boundRect.left + "px" : boundRect.right - eventType.clientX + "px";
      }
      if (!this.parent.toolbarSettings.enable) {
        this.parent.setContentHeight("", false);
      }
      this.parent.refreshUI();
    };
    Resize3.prototype.stopResize = function(e) {
      this.parent.refreshUI();
      this.unwireResizeEvents();
      var args = { event: e, requestType: "editor" };
      this.parent.trigger(resizeStop, args);
    };
    Resize3.prototype.getEventType = function(e) {
      return e.indexOf("mouse") > -1 ? "mouse" : "touch";
    };
    Resize3.prototype.isMouseEvent = function(e) {
      var isMouse = false;
      if (this.getEventType(e.type) === "mouse" || !isNullOrUndefined(e.pointerType) && this.getEventType(e.pointerType) === "mouse") {
        isMouse = true;
      }
      return isMouse;
    };
    Resize3.prototype.wireResizeEvents = function() {
      EventHandler.add(document, "mousemove", this.performResize, this);
      EventHandler.add(document, "mouseup", this.stopResize, this);
      this.touchMoveEvent = Browser.info.name === "msie" ? "pointermove" : "touchmove";
      this.touchEndEvent = Browser.info.name === "msie" ? "pointerup" : "touchend";
      EventHandler.add(document, this.touchMoveEvent, this.performResize, this);
      EventHandler.add(document, this.touchEndEvent, this.stopResize, this);
    };
    Resize3.prototype.unwireResizeEvents = function() {
      EventHandler.remove(document, "mousemove", this.performResize);
      EventHandler.remove(document, "mouseup", this.stopResize);
      EventHandler.remove(document, this.touchMoveEvent, this.performResize);
      EventHandler.remove(document, this.touchEndEvent, this.stopResize);
    };
    Resize3.prototype.destroy = function() {
      this.removeEventListener();
    };
    Resize3.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(initialEnd, this.renderResizable);
      this.parent.element.classList.remove(CLS_RTE_RES_CNT);
      EventHandler.remove(this.resizer, "mousedown", this.resizeStart);
      EventHandler.remove(this.resizer, this.touchStartEvent, this.resizeStart);
      if (this.resizer) {
        detach(this.resizer);
      }
      this.parent.off(destroy, this.destroy);
    };
    Resize3.prototype.getModuleName = function() {
      return "resize";
    };
    return Resize3;
  }()
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/ajax-settings.js
var __extends5 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AjaxSettings = (
  /** @class */
  function(_super) {
    __extends5(AjaxSettings2, _super);
    function AjaxSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate2([
      Property(null)
    ], AjaxSettings2.prototype, "downloadUrl", void 0);
    __decorate2([
      Property(null)
    ], AjaxSettings2.prototype, "getImageUrl", void 0);
    __decorate2([
      Property(null)
    ], AjaxSettings2.prototype, "uploadUrl", void 0);
    __decorate2([
      Property(null)
    ], AjaxSettings2.prototype, "url", void 0);
    return AjaxSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/toolbar-settings.js
var __extends6 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var toolbarItems = [
  "NewFolder",
  "Upload",
  "Cut",
  "Copy",
  "Paste",
  "Delete",
  "Download",
  "Rename",
  "SortBy",
  "Refresh",
  "Selection",
  "View",
  "Details"
];
var ToolbarSettings = (
  /** @class */
  function(_super) {
    __extends6(ToolbarSettings3, _super);
    function ToolbarSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate3([
      Property(toolbarItems)
    ], ToolbarSettings3.prototype, "items", void 0);
    __decorate3([
      Property(true)
    ], ToolbarSettings3.prototype, "visible", void 0);
    return ToolbarSettings3;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/search-settings.js
var __extends7 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SearchSettings = (
  /** @class */
  function(_super) {
    __extends7(SearchSettings2, _super);
    function SearchSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate4([
      Property(true)
    ], SearchSettings2.prototype, "allowSearchOnTyping", void 0);
    __decorate4([
      Property("contains")
    ], SearchSettings2.prototype, "filterType", void 0);
    __decorate4([
      Property(true)
    ], SearchSettings2.prototype, "ignoreCase", void 0);
    __decorate4([
      Property(null)
    ], SearchSettings2.prototype, "placeholder", void 0);
    return SearchSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/details-view-settings.js
var __extends8 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var columnArray = [
  {
    field: "name",
    headerText: "Name",
    minWidth: 120,
    isPrimaryKey: true,
    template: initializeCSPTemplate(function(data) {
      return '<span class="e-fe-text">' + data.name + "</span>";
    }),
    customAttributes: { class: "e-fe-grid-name" }
  },
  {
    field: "_fm_modified",
    headerText: "DateModified",
    type: "dateTime",
    format: "MMMM dd, yyyy HH:mm",
    minWidth: 120,
    width: "190"
  },
  {
    field: "size",
    headerText: "Size",
    minWidth: 90,
    width: "110",
    template: initializeCSPTemplate(function(data) {
      return '<span class="e-fe-size">' + data.size + "</span>";
    }),
    format: "n2"
  }
];
var DetailsViewSettings = (
  /** @class */
  function(_super) {
    __extends8(DetailsViewSettings2, _super);
    function DetailsViewSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate5([
      Property(true)
    ], DetailsViewSettings2.prototype, "columnResizing", void 0);
    __decorate5([
      Property(columnArray)
    ], DetailsViewSettings2.prototype, "columns", void 0);
    return DetailsViewSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/contextMenu-settings.js
var __extends9 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var fileItems = ["Open", "|", "Cut", "Copy", "|", "Delete", "Download", "Rename", "|", "Details"];
var folderItems = ["Open", "|", "Cut", "Copy", "Paste", "|", "Delete", "Rename", "Download", "|", "Details"];
var layoutItems = [
  "SortBy",
  "View",
  "Refresh",
  "|",
  "Paste",
  "|",
  "NewFolder",
  "Upload",
  "|",
  "Details",
  "|",
  "SelectAll"
];
var ContextMenuSettings = (
  /** @class */
  function(_super) {
    __extends9(ContextMenuSettings2, _super);
    function ContextMenuSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([
      Property(fileItems)
    ], ContextMenuSettings2.prototype, "file", void 0);
    __decorate6([
      Property(folderItems)
    ], ContextMenuSettings2.prototype, "folder", void 0);
    __decorate6([
      Property(layoutItems)
    ], ContextMenuSettings2.prototype, "layout", void 0);
    __decorate6([
      Property(true)
    ], ContextMenuSettings2.prototype, "visible", void 0);
    return ContextMenuSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/navigation-pane-settings.js
var __extends10 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var NavigationPaneSettings = (
  /** @class */
  function(_super) {
    __extends10(NavigationPaneSettings2, _super);
    function NavigationPaneSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate7([
      Property("650px")
    ], NavigationPaneSettings2.prototype, "maxWidth", void 0);
    __decorate7([
      Property("240px")
    ], NavigationPaneSettings2.prototype, "minWidth", void 0);
    __decorate7([
      Property(true)
    ], NavigationPaneSettings2.prototype, "visible", void 0);
    __decorate7([
      Property("None")
    ], NavigationPaneSettings2.prototype, "sortOrder", void 0);
    return NavigationPaneSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/upload-settings.js
var __extends11 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var UploadSettings = (
  /** @class */
  function(_super) {
    __extends11(UploadSettings2, _super);
    function UploadSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Property("")
    ], UploadSettings2.prototype, "allowedExtensions", void 0);
    __decorate8([
      Property(true)
    ], UploadSettings2.prototype, "autoUpload", void 0);
    __decorate8([
      Property(false)
    ], UploadSettings2.prototype, "autoClose", void 0);
    __decorate8([
      Property(false)
    ], UploadSettings2.prototype, "directoryUpload", void 0);
    __decorate8([
      Property(0)
    ], UploadSettings2.prototype, "minFileSize", void 0);
    __decorate8([
      Property(3e7)
    ], UploadSettings2.prototype, "maxFileSize", void 0);
    return UploadSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/column.js
var __extends12 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Column = (
  /** @class */
  function(_super) {
    __extends12(Column2, _super);
    function Column2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate9([
      Property("")
    ], Column2.prototype, "field", void 0);
    __decorate9([
      Property("")
    ], Column2.prototype, "headerText", void 0);
    __decorate9([
      Property("")
    ], Column2.prototype, "width", void 0);
    __decorate9([
      Property("")
    ], Column2.prototype, "minWidth", void 0);
    __decorate9([
      Property("")
    ], Column2.prototype, "maxWidth", void 0);
    __decorate9([
      Property("Left")
    ], Column2.prototype, "textAlign", void 0);
    __decorate9([
      Property(null)
    ], Column2.prototype, "headerTextAlign", void 0);
    __decorate9([
      Property(null)
    ], Column2.prototype, "type", void 0);
    __decorate9([
      Property(null)
    ], Column2.prototype, "format", void 0);
    __decorate9([
      Property(null)
    ], Column2.prototype, "template", void 0);
    __decorate9([
      Property(null)
    ], Column2.prototype, "headerTemplate", void 0);
    __decorate9([
      Property(true)
    ], Column2.prototype, "allowSorting", void 0);
    __decorate9([
      Property(true)
    ], Column2.prototype, "allowResizing", void 0);
    __decorate9([
      Property(null)
    ], Column2.prototype, "customAttributes", void 0);
    __decorate9([
      Property("")
    ], Column2.prototype, "hideAtMedia", void 0);
    __decorate9([
      Property(null)
    ], Column2.prototype, "customFormat", void 0);
    __decorate9([
      Property(false)
    ], Column2.prototype, "isPrimaryKey", void 0);
    return Column2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/base/classes.js
var TOOLBAR_ID = "_toolbar";
var LAYOUT_ID = "_layout";
var NAVIGATION_ID = "_navigation";
var TREE_ID = "_tree";
var GRID_ID = "_grid";
var LARGEICON_ID = "_largeicons";
var DIALOG_ID = "_dialog";
var IMG_DIALOG_ID = "_img_dialog";
var EXTN_DIALOG_ID = "_extn_dialog";
var UPLOAD_DIALOG_ID = "_upload_dialog";
var CONTEXT_MENU_ID = "_contextmenu";
var CONTENT_ID = "_content";
var BREADCRUMBBAR_ID = "_breadcrumbbar";
var UPLOAD_ID = "_upload";
var SEARCH_ID = "_search";
var ROOT = "e-filemanager";
var CONTROL = "e-control";
var CHECK_SELECT = "e-fe-cb-select";
var ROOT_POPUP = "e-fe-popup";
var MOBILE = "e-fe-mobile";
var MOB_POPUP = "e-fe-popup e-fe-mobile";
var MULTI_SELECT = "e-fe-m-select";
var FILTER = "e-fe-m-filter";
var LAYOUT = "e-layout";
var NAVIGATION = "e-navigation";
var LAYOUT_CONTENT = "e-layout-content";
var LARGE_ICONS = "e-large-icons";
var TB_ITEM = "e-toolbar-item";
var LIST_ITEM = "e-list-item";
var LIST_TEXT = "e-list-text";
var LIST_PARENT = "e-list-parent";
var TB_OPTION_TICK = "e-icons e-fe-tick";
var TB_OPTION_DOT = "e-icons e-fe-dot";
var BLUR = "e-blur";
var ACTIVE = "e-active";
var HOVER = "e-hover";
var FOCUS = "e-focus";
var FOCUSED = "e-focused";
var CHECK = "e-check";
var FRAME = "e-frame";
var CB_WRAP = "e-checkbox-wrapper";
var ROW = "e-row";
var EMPTY = "e-empty";
var EMPTY_CONTENT = "e-empty-content";
var EMPTY_INNER_CONTENT = "e-empty-inner-content";
var CLONE = "e-fe-clone";
var DROP_FOLDER = "e-fe-drop-folder";
var DROP_FILE = "e-fe-drop-file";
var FOLDER = "e-fe-folder";
var ICON_IMAGE = "e-fe-image";
var ICON_MUSIC = "e-fe-music";
var ICON_VIDEO = "e-fe-video";
var LARGE_ICON = "e-large-icon";
var LARGE_EMPTY_FOLDER = "e-empty-icon e-fe-folder";
var GRID_HEADER = "e-gridheader";
var TREE_VIEW = "e-treeview";
var MENU_ITEM = "e-menu-item";
var MENU_ICON = "e-menu-icon";
var SUBMENU_ICON = "e-caret";
var GRID_VIEW = "e-content";
var GRID_CONTENT = "e-gridcontent";
var ICON_VIEW = "e-list-parent";
var ICON_OPEN = "e-icons e-fe-open";
var ICON_UPLOAD = "e-icons e-fe-upload";
var ICON_CUT = "e-icons e-fe-cut";
var ICON_COPY = "e-icons e-fe-copy";
var ICON_PASTE = "e-icons e-fe-paste";
var ICON_DELETE = "e-icons e-fe-delete";
var ICON_RENAME = "e-icons e-fe-rename";
var ICON_NEWFOLDER = "e-icons e-fe-newfolder";
var ICON_DETAILS = "e-icons e-fe-details";
var ICON_SHORTBY = "e-icons e-fe-sort";
var ICON_REFRESH = "e-icons e-fe-refresh";
var ICON_SELECTALL = "e-icons e-fe-select";
var ICON_DOWNLOAD = "e-icons e-fe-download";
var ICON_GRID = "e-icons e-fe-grid";
var ICON_LARGE = "e-icons e-fe-large";
var ICON_BREADCRUMB = "e-icons e-fe-breadcrumb";
var ICON_CLEAR = "e-icons e-fe-clear";
var ICONS = "e-icons";
var ERROR_CONTENT = "e-fe-errorcontent";
var BREADCRUMBS = "e-address";
var RTL = "e-rtl";
var DISPLAY_NONE = "e-display-none";
var FULLROW = "e-fullrow";
var SPLIT_BAR = "e-split-bar";
var HEADER_CHECK = "e-headercheck";
var OVERLAY = "e-fe-overlay";
var VALUE = "e-fe-value";

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/base/constant.js
var isFile = "isFile";
var modelChanged2 = "model-changed";
var initialEnd2 = "initial-end";
var finalizeEnd = "finalize-end";
var createEnd = "create-end";
var filterEnd = "filter-end";
var pathDrag = "path-drag";
var deleteInit = "delete-init";
var deleteEnd = "delete-end";
var refreshEnd = "refresh-end";
var resizeEnd = "resize-end";
var splitterResize = "splitter-resize";
var pathChanged = "path-changed";
var destroy2 = "destroy";
var beforeRequest = "before-request";
var skipUpload = "skip-upload";
var afterRequest = "after-request";
var layoutRefresh = "layout-refresh";
var actionFailure = "actionFailure";
var search = "search";
var openInit = "open-init";
var openEnd = "open-end";
var selectionChanged = "selection-changed";
var selectAllInit = "select-all-init";
var clearAllInit = "clear-all-init";
var clearPathInit = "clear-path-init";
var layoutChange = "layout-change";
var sortByChange = "sort-by-change";
var nodeExpand = "node-expand";
var detailsInit = "details-init";
var menuItemData = "menu-item-data";
var renameInit = "rename-init";
var renameEndParent = "rename-end-parent";
var renameEnd = "rename-end";
var showPaste = "show-paste";
var hidePaste = "hide-paste";
var selectedData = "selected-data";
var cutCopyInit = "cut-copy-init";
var pasteInit = "paste-init";
var pasteEnd = "paste-end";
var cutEnd = "cut-end";
var hideLayout = "hide-layout";
var updateTreeSelection = "update-tree-selection";
var sortColumn = "sort-column";
var pathColumn = "path-column";
var searchTextChange = "search-change";
var downloadInit = "download-init";
var dropInit = "drop-init";
var dragEnd = "drag-end";
var dropPath = "drop-path";
var dragging = "dragging";
var updateSelectionData = "update-selection-data";
var methodCall = "method-call";
var permissionRead = "read";
var permissionEdit = "write";
var permissionEditContents = "writeContents";
var permissionUpload = "upload";
var permissionDownload = "download";

// node_modules/@syncfusion/ej2-layouts/src/splitter/splitter.js
var __extends13 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT2 = "e-splitter";
var HORIZONTAL_PANE = "e-splitter-horizontal";
var VERTICAL_PANE = "e-splitter-vertical";
var PANE = "e-pane";
var SPLIT_H_PANE = "e-pane-horizontal";
var SPLIT_V_PANE = "e-pane-vertical";
var SPLIT_BAR2 = "e-split-bar";
var SPLIT_H_BAR = "e-split-bar-horizontal";
var SPLIT_V_BAR = "e-split-bar-vertical";
var STATIC_PANE = "e-static-pane";
var SCROLL_PANE = "e-scrollable";
var RESIZE_BAR = "e-resize-handler";
var RESIZABLE_BAR = "e-resizable-split-bar";
var SPLIT_BAR_HOVER = "e-split-bar-hover";
var SPLIT_BAR_ACTIVE = "e-split-bar-active";
var HIDE_HANDLER = "e-hide-handler";
var SPLIT_TOUCH = "e-splitter-touch";
var DISABLED = "e-disabled";
var RTL2 = "e-rtl";
var E_ICONS = "e-icons";
var COLLAPSIBLE = "e-collapsible";
var NAVIGATE_ARROW = "e-navigate-arrow";
var ARROW_RIGHT = "e-arrow-right";
var ARROW_LEFT = "e-arrow-left";
var ARROW_UP = "e-arrow-up";
var ARROW_DOWN = "e-arrow-down";
var HIDE_ICON = "e-icon-hidden";
var EXPAND_PANE = "e-expanded";
var COLLAPSE_PANE = "e-collapsed";
var PANE_HIDDEN = "e-pane-hidden";
var RESIZABLE_PANE = "e-resizable";
var LAST_BAR = "e-last-bar";
var BAR_SIZE_DEFAULT = 1;
var PaneProperties = (
  /** @class */
  function(_super) {
    __extends13(PaneProperties2, _super);
    function PaneProperties2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate10([
      Property()
    ], PaneProperties2.prototype, "size", void 0);
    __decorate10([
      Property(false)
    ], PaneProperties2.prototype, "collapsible", void 0);
    __decorate10([
      Property(false)
    ], PaneProperties2.prototype, "collapsed", void 0);
    __decorate10([
      Property(true)
    ], PaneProperties2.prototype, "resizable", void 0);
    __decorate10([
      Property(null)
    ], PaneProperties2.prototype, "min", void 0);
    __decorate10([
      Property(null)
    ], PaneProperties2.prototype, "max", void 0);
    __decorate10([
      Property()
    ], PaneProperties2.prototype, "content", void 0);
    __decorate10([
      Property("")
    ], PaneProperties2.prototype, "cssClass", void 0);
    return PaneProperties2;
  }(ChildProperty)
);
var Splitter = (
  /** @class */
  function(_super) {
    __extends13(Splitter2, _super);
    function Splitter2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.needsID = true;
      return _this;
    }
    Splitter2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (!this.element.classList.contains(ROOT2)) {
        return;
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "height":
            this.setSplitterSize(this.element, newProp.height, "height");
            break;
          case "width":
            this.setSplitterSize(this.element, newProp.width, "width");
            break;
          case "cssClass":
            this.setCssClass(this.element, newProp.cssClass);
            break;
          case "enabled":
            this.isEnabled(this.enabled);
            break;
          case "enableReversePanes":
            this.setReversePane();
            break;
          case "separatorSize":
            this.setSeparatorSize(newProp.separatorSize);
            break;
          case "orientation":
            this.changeOrientation(newProp.orientation);
            break;
          case "paneSettings": {
            if (!(newProp.paneSettings instanceof Array && oldProp.paneSettings instanceof Array)) {
              var paneCounts = Object.keys(newProp.paneSettings);
              var isPaneContentChanged = paneCounts.some(function(count2) {
                return !isNullOrUndefined(newProp.paneSettings[count2].content);
              });
              if (this.isReact && isPaneContentChanged) {
                var cPaneCount = 0;
                for (var k = 0; k < this.paneSettings.length; k++) {
                  if (typeof this.paneSettings[k].content === "function") {
                    cPaneCount = cPaneCount + 1;
                  }
                }
                var hasAllContent = cPaneCount === this.paneSettings.length;
                if (hasAllContent) {
                  this.clearTemplate();
                }
              }
              for (var i = 0; i < paneCounts.length; i++) {
                var index = parseInt(Object.keys(newProp.paneSettings)[i], 10);
                var changedPropsCount = Object.keys(newProp.paneSettings[index]).length;
                for (var j = 0; j < changedPropsCount; j++) {
                  var property = Object.keys(newProp.paneSettings[index])[j];
                  switch (property) {
                    case "content": {
                      var newValue = Object(newProp.paneSettings[index])["" + property];
                      if (!isNullOrUndefined(newValue)) {
                        this.allPanes[index].innerHTML = "";
                        this.setTemplate(newValue, this.allPanes[index]);
                      }
                      break;
                    }
                    case "resizable": {
                      var newVal = Object(newProp.paneSettings[index])["" + property];
                      this.resizableModel(index, newVal);
                      break;
                    }
                    case "collapsible":
                      this.collapsibleModelUpdate(index);
                      break;
                    case "collapsed":
                      newProp.paneSettings[index].collapsed ? this.isCollapsed(index) : this.collapsedOnchange(index);
                      break;
                    case "cssClass":
                      this.setCssClass(this.allPanes[index], newProp.paneSettings[index].cssClass);
                      break;
                    case "size": {
                      var newValSize = Object(newProp.paneSettings[index])["" + property];
                      if (newValSize !== "" && !isNullOrUndefined(newValSize)) {
                        this.updatePaneSize(newValSize, index);
                      }
                      break;
                    }
                  }
                }
              }
            } else {
              this.destroyPaneSettings();
              this.allBars = [];
              this.allPanes = [];
              this.createSplitPane(this.element);
              this.addSeparator(this.element);
              this.getPanesDimensions();
              this.setRTL(this.enableRtl);
              this.isCollapsed();
            }
            break;
          }
          case "enableRtl":
            this.setRTL(newProp.enableRtl);
            break;
        }
      }
    };
    Splitter2.prototype.updatePaneSize = function(newValSize, index) {
      this.allPanes[index].style.flexBasis = newValSize;
      var flexPaneIndexes = [];
      var staticPaneWidth;
      var flexCount = 0;
      for (var i = 0; i < this.allPanes.length; i++) {
        if (!this.paneSettings[i].size && !(this.allPanes[i].innerText === "")) {
          flexPaneIndexes[flexCount] = i;
          flexCount++;
        } else if (this.paneSettings[i].size) {
          staticPaneWidth = this.orientation === "Horizontal" ? this.allPanes[index].offsetWidth : this.allPanes[index].offsetHeight;
        }
      }
      staticPaneWidth = this.orientation === "Horizontal" ? this.allBars[0].offsetWidth * this.allBars.length + staticPaneWidth : this.allBars[0].offsetHeight * this.allBars.length + staticPaneWidth;
      var flexPaneWidth = (this.orientation === "Horizontal" ? this.element.offsetWidth : this.element.offsetHeight) - staticPaneWidth - this.border * 2;
      var avgDiffWidth = flexPaneWidth / flexPaneIndexes.length;
      for (var j = 0; j < flexPaneIndexes.length; j++) {
        this.allPanes[flexPaneIndexes[j]].style.flexBasis = avgDiffWidth + "px";
      }
      this.allPanes[index].classList.add(STATIC_PANE);
    };
    Splitter2.prototype.initializeValues = function() {
      this.allPanes = [];
      this.paneOrder = [];
      this.separatorOrder = [];
      this.allBars = [];
      this.previousCoordinates = {};
      this.currentCoordinates = {};
      this.updatePrePaneInPercentage = false;
      this.updateNextPaneInPercentage = false;
      this.panesDimensions = [];
      this.border = 0;
      this.validDataAttributes = [
        "data-size",
        "data-min",
        "data-max",
        "data-collapsible",
        "data-resizable",
        "data-content",
        "data-collapsed"
      ];
      this.validElementAttributes = ["data-orientation", "data-width", "data-height"];
      this.iconsDelay = 300;
      this.templateElement = [];
      this.collapseFlag = false;
      this.expandFlag = true;
    };
    Splitter2.prototype.preRender = function() {
      this.initializeValues();
      this.onReportWindowSize = this.reportWindowSize.bind(this);
      this.onMouseMoveHandler = this.onMouseMove.bind(this);
      this.onMouseUpHandler = this.onMouseUp.bind(this);
      this.onTouchMoveHandler = this.onMouseMove.bind(this);
      this.onTouchEndHandler = this.onMouseUp.bind(this);
      this.wrapper = this.element.cloneNode(true);
      this.wrapperParent = this.element.parentElement;
      removeClass([this.wrapper], ["e-control", "e-lib", ROOT2]);
      var orientation = this.orientation === "Horizontal" ? HORIZONTAL_PANE : VERTICAL_PANE;
      addClass([this.element], orientation);
      var name = Browser.info.name;
      var css = name === "msie" ? "e-ie" : "";
      this.setCssClass(this.element, css);
      if (Browser.isDevice) {
        addClass([this.element], SPLIT_TOUCH);
      }
    };
    Splitter2.prototype.getPersistData = function() {
      return this.addOnPersist(["paneSettings"]);
    };
    Splitter2.prototype.getModuleName = function() {
      return "splitter";
    };
    Splitter2.prototype.render = function() {
      this.checkDataAttributes();
      this.setCssClass(this.element, this.cssClass);
      this.isEnabled(this.enabled);
      this.setDimension(this.getHeight(this.element), this.getWidth(this.element));
      this.createSplitPane(this.element);
      this.addSeparator(this.element);
      this.getPanesDimensions();
      this.setPaneSettings();
      this.setRTL(this.enableRtl);
      if (this.enableReversePanes) {
        this.setReversePane();
      }
      this.collapseFlag = true;
      this.isCollapsed();
      this.collapseFlag = false;
      EventHandler.add(document, "touchstart click", this.onDocumentClick, this);
      this.renderComplete();
      this.element.ownerDocument.defaultView.addEventListener("resize", this.onReportWindowSize, true);
      EventHandler.add(this.element, "keydown", this.onMove, this);
    };
    Splitter2.prototype.onDocumentClick = function(e) {
      if (!e.target.classList.contains(SPLIT_BAR2) && !isNullOrUndefined(this.currentSeparator)) {
        this.currentSeparator.classList.remove(SPLIT_BAR_HOVER);
        this.currentSeparator.classList.remove(SPLIT_BAR_ACTIVE);
      }
    };
    Splitter2.prototype.checkPaneSize = function(e) {
      var prePaneSize = this.orientation === "Horizontal" ? this.previousPane.offsetWidth : this.previousPane.offsetHeight;
      var nextPaneSize = this.orientation === "Horizontal" ? this.nextPane.offsetWidth : this.nextPane.offsetHeight;
      var splitBarSize = isNullOrUndefined(this.separatorSize) ? BAR_SIZE_DEFAULT : this.separatorSize;
      if (this.previousPane.style.flexBasis.indexOf("%") > 0 || this.previousPane.style.flexBasis.indexOf("p") > 0 || this.nextPane.style.flexBasis.indexOf("%") > 0) {
        var previousFlexBasis = this.updatePaneFlexBasis(this.previousPane);
        var nextFlexBasis = this.updatePaneFlexBasis(this.nextPane);
        this.totalPercent = previousFlexBasis + nextFlexBasis;
        this.totalWidth = this.convertPercentageToPixel(this.totalPercent + "%");
        if (e.type === "keydown" && !isNullOrUndefined(e.keyCode)) {
          if ((e.keyCode === 39 || e.keyCode === 40) && nextPaneSize > 0 && this.getMinInPixel(this.paneSettings[this.nextPaneIndex].min) < this.convertPercentageToPixel(nextFlexBasis - 1 + "%")) {
            this.previousPane.style.flexBasis = previousFlexBasis + 1 + "%";
            this.nextPane.style.flexBasis = nextFlexBasis - 1 + "%";
          } else if ((e.keyCode === 37 || e.keyCode === 38) && prePaneSize > 0 && this.getMinInPixel(this.paneSettings[this.prevPaneIndex].min) < this.convertPercentageToPixel(previousFlexBasis - 1 + "%")) {
            this.previousPane.style.flexBasis = previousFlexBasis - 1 + "%";
            this.nextPane.style.flexBasis = nextFlexBasis + 1 + "%";
          }
        }
      } else {
        this.totalWidth = this.orientation === "Horizontal" ? this.previousPane.offsetWidth + this.nextPane.offsetWidth : this.previousPane.offsetHeight + this.nextPane.offsetHeight;
        if (e.type === "keydown" && !isNullOrUndefined(e.keyCode)) {
          if ((e.keyCode === 39 || e.keyCode === 40) && nextPaneSize > 0 && this.getMinInPixel(this.paneSettings[this.nextPaneIndex].min) < nextPaneSize + splitBarSize) {
            this.addStaticPaneClass();
            this.previousPane.style.flexBasis = prePaneSize + splitBarSize + "px";
            this.nextPane.style.flexBasis = nextPaneSize < splitBarSize ? "0px" : nextPaneSize - splitBarSize + "px";
          } else if ((e.keyCode === 37 || e.keyCode === 38) && prePaneSize > 0 && this.getMinInPixel(this.paneSettings[this.prevPaneIndex].min) < prePaneSize - splitBarSize) {
            this.addStaticPaneClass();
            this.previousPane.style.flexBasis = prePaneSize < splitBarSize ? "0px" : prePaneSize - splitBarSize + "px";
            this.nextPane.style.flexBasis = nextPaneSize + splitBarSize + "px";
          }
        }
      }
    };
    Splitter2.prototype.onMove = function(event2) {
      if (this.allPanes.length > 1) {
        var index = this.getSeparatorIndex(this.currentSeparator);
        var isPrevpaneCollapsed = this.previousPane.classList.contains(COLLAPSE_PANE);
        var isPrevpaneExpanded = this.previousPane.classList.contains(EXPAND_PANE);
        var isNextpaneCollapsed = this.nextPane.classList.contains(COLLAPSE_PANE);
        if ((this.orientation !== "Horizontal" && event2.keyCode === 38 || this.orientation === "Horizontal" && event2.keyCode === 39 || this.orientation === "Horizontal" && event2.keyCode === 37 || this.orientation !== "Horizontal" && event2.keyCode === 40) && (!isPrevpaneExpanded && !isNextpaneCollapsed && !isPrevpaneCollapsed || isPrevpaneExpanded && !isNextpaneCollapsed) && document.activeElement.classList.contains(SPLIT_BAR2) && (this.paneSettings[index].resizable && this.paneSettings[index + 1].resizable)) {
          event2.preventDefault();
          this.checkPaneSize(event2);
          this.triggerResizing(event2);
        } else if (event2.keyCode === 13 && this.paneSettings[index].collapsible && document.activeElement.classList.contains(SPLIT_BAR2) && this.currentSeparator.classList.contains(SPLIT_BAR_ACTIVE)) {
          if (!this.previousPane.classList.contains(COLLAPSE_PANE)) {
            this.collapse(index);
            addClass([this.currentSeparator], SPLIT_BAR_ACTIVE);
          } else {
            this.expand(index);
            addClass([this.currentSeparator], SPLIT_BAR_ACTIVE);
          }
        }
      }
    };
    Splitter2.prototype.getMinInPixel = function(minValue) {
      if (isNullOrUndefined(minValue)) {
        return 0;
      }
      var paneMinRange = this.convertPixelToNumber(minValue.toString());
      if (minValue.indexOf("%") > 0) {
        paneMinRange = this.convertPercentageToPixel(minValue);
      }
      var min = this.convertPixelToNumber(paneMinRange.toString());
      return min;
    };
    Splitter2.prototype.sanitizeHelper = function(value) {
      if (this.enableHtmlSanitizer) {
        var item = SanitizeHtmlHelper.beforeSanitize();
        var beforeEvent = {
          cancel: false,
          helper: null
        };
        extend(item, item, beforeEvent);
        this.trigger("beforeSanitizeHtml", item);
        if (item.cancel && !isNullOrUndefined(item.helper)) {
          value = item.helper(value);
        } else if (!item.cancel) {
          value = SanitizeHtmlHelper.serializeValue(item, value);
        }
      }
      return value;
    };
    Splitter2.prototype.checkDataAttributes = function() {
      var api;
      var value;
      for (var dataIndex = 0; dataIndex < this.validElementAttributes.length; dataIndex++) {
        value = this.element.getAttribute(this.validElementAttributes[dataIndex]);
        if (!isNullOrUndefined(value)) {
          api = this.removeDataPrefix(this.validElementAttributes[dataIndex]);
          this[api] = value;
        }
      }
      for (var paneIndex = 0; paneIndex < this.element.children.length; paneIndex++) {
        for (var dataAttr = 0; dataAttr < this.validDataAttributes.length; dataAttr++) {
          value = this.element.children[paneIndex].getAttribute(this.validDataAttributes[dataAttr]);
          if (!isNullOrUndefined(value)) {
            api = this.removeDataPrefix(this.validDataAttributes[dataAttr]);
            value = api === "collapsible" || api === "resizable" ? value === "true" : value;
            if (isNullOrUndefined(this.paneSettings[paneIndex])) {
              this.paneSettings[paneIndex] = {
                size: "",
                min: null,
                max: null,
                content: "",
                resizable: true,
                collapsible: false,
                collapsed: false
              };
            }
            var paneAPI = this.paneSettings[paneIndex][api];
            if (api === "resizable" || api === "collapsible" || api === "collapsed") {
              this.paneSettings[paneIndex][api] = value;
            }
            if (isNullOrUndefined(paneAPI) || paneAPI === "") {
              this.paneSettings[paneIndex][api] = value;
            }
          }
        }
      }
    };
    Splitter2.prototype.destroyPaneSettings = function() {
      [].slice.call(this.element.children).forEach(function(el) {
        detach(el);
      });
      this.restoreElem();
    };
    Splitter2.prototype.setPaneSettings = function() {
      var childCount = this.allPanes.length;
      var paneCollection = [];
      var paneValue = {
        size: "",
        min: null,
        max: null,
        content: "",
        resizable: true,
        collapsed: false,
        collapsible: false,
        cssClass: ""
      };
      for (var i = 0; i < childCount; i++) {
        if (isNullOrUndefined(this.paneSettings[i])) {
          paneCollection[i] = paneValue;
        } else {
          paneCollection[i] = this.paneSettings[i];
        }
      }
      this.setProperties({ "paneSettings": paneCollection }, true);
    };
    Splitter2.prototype.checkArrow = function(paneIndex, targetArrow) {
      return this.allBars[paneIndex].querySelector("." + NAVIGATE_ARROW + "." + targetArrow);
    };
    Splitter2.prototype.removeDataPrefix = function(attribute) {
      return attribute.slice(attribute.lastIndexOf("-") + 1);
    };
    Splitter2.prototype.setRTL = function(rtl) {
      rtl ? addClass([this.element], RTL2) : removeClass([this.element], RTL2);
    };
    Splitter2.prototype.setReversePane = function() {
      this.allPanes = this.allPanes.reverse();
      this.allBars = this.allBars.reverse();
      addClass([this.allBars[this.allBars.length - 1]], LAST_BAR);
      removeClass([this.allBars[0]], LAST_BAR);
      this.setProperties({ "paneSettings": this.paneSettings.reverse() }, true);
      if (this.enableReversePanes) {
        this.element.setAttribute("dir", "rtl");
      } else {
        this.element.removeAttribute("dir");
      }
    };
    Splitter2.prototype.setSplitterSize = function(element, size, property) {
      var style = property === "width" ? { "width": formatUnit(size) } : { "height": formatUnit(size) };
      setStyleAttribute(element, style);
    };
    Splitter2.prototype.getPanesDimensions = function() {
      for (var index = 0; index < this.allPanes.length; index++) {
        this.orientation === "Horizontal" ? this.panesDimensions.push(this.allPanes[index].getBoundingClientRect().width) : this.panesDimensions.push(this.allPanes[index].getBoundingClientRect().height);
      }
    };
    Splitter2.prototype.setCssClass = function(element, className) {
      if (className) {
        addClass([element], className.split(className.indexOf(",") > -1 ? "," : " "));
      }
    };
    Splitter2.prototype.hideResizer = function(target) {
      addClass([select("." + RESIZE_BAR, target)], HIDE_HANDLER);
    };
    Splitter2.prototype.showResizer = function(target) {
      if (!isNullOrUndefined(this.previousPane) && this.previousPane.classList.contains(RESIZABLE_PANE) && !isNullOrUndefined(this.nextPane) && this.nextPane.classList.contains(RESIZABLE_PANE)) {
        removeClass([select("." + RESIZE_BAR, target)], HIDE_HANDLER);
      }
    };
    Splitter2.prototype.resizableModel = function(index, newVal) {
      var paneIndex = index === this.allBars.length ? index - 1 : index;
      var i = index;
      EventHandler.remove(this.allBars[paneIndex], "mousedown", this.onMouseDown);
      if (newVal) {
        EventHandler.add(this.allBars[paneIndex], "mousedown", this.onMouseDown, this);
        if (this.isResizable()) {
          this.showResizer(this.allBars[paneIndex]);
          removeClass([select("." + RESIZE_BAR, this.allBars[paneIndex])], HIDE_HANDLER);
          this.allBars[paneIndex].classList.add(RESIZABLE_BAR);
          index === this.allBars.length ? this.allPanes[index].classList.add(RESIZABLE_PANE) : this.allPanes[paneIndex].classList.add(RESIZABLE_PANE);
          this.updateResizablePanes(i);
        }
      } else {
        this.updateResizablePanes(i);
        this.hideResizer(this.allBars[paneIndex]);
        this.allBars[paneIndex].classList.remove(RESIZABLE_BAR);
        index === this.allBars.length ? this.allPanes[index].classList.remove(RESIZABLE_PANE) : this.allPanes[paneIndex].classList.remove(RESIZABLE_PANE);
      }
    };
    Splitter2.prototype.collapsibleModelUpdate = function(index) {
      var paneIndex = index === this.allBars.length ? index - 1 : index;
      var arrow2 = this.orientation === "Horizontal" ? this.checkArrow(paneIndex, ARROW_LEFT) : this.checkArrow(paneIndex, ARROW_UP);
      var arrow1 = this.orientation === "Horizontal" ? this.checkArrow(paneIndex, ARROW_RIGHT) : this.checkArrow(paneIndex, ARROW_DOWN);
      this.paneCollapsible(this.allPanes[index], index);
      this.updateCollapseIcons(paneIndex, arrow1, arrow2);
    };
    Splitter2.prototype.collapseArrow = function(barIndex, arrow) {
      return selectAll("." + arrow, this.allBars[barIndex])[0];
    };
    Splitter2.prototype.updateIsCollapsed = function(index, collapseArrow, lastBarArrow) {
      if (!isNullOrUndefined(index)) {
        var targetEle = void 0;
        var lastBarIndex = index === this.allBars.length;
        var barIndex = lastBarIndex ? index - 1 : index;
        if (!lastBarIndex && this.allPanes[index + 1].classList.contains(COLLAPSE_PANE) && index !== 0) {
          targetEle = this.collapseArrow(barIndex - 1, lastBarArrow);
        } else {
          targetEle = lastBarIndex ? this.collapseArrow(barIndex, lastBarArrow) : this.collapseArrow(barIndex, collapseArrow);
        }
        targetEle.click();
      }
    };
    Splitter2.prototype.isCollapsed = function(index) {
      var _this = this;
      if (!isNullOrUndefined(index) && this.paneSettings[index].collapsed && isNullOrUndefined(this.allPanes[index].classList.contains(COLLAPSE_PANE))) {
        return;
      }
      this.expandFlag = false;
      if (!isNullOrUndefined(index)) {
        this.collapseFlag = true;
        var targetEle = void 0;
        var lastBarIndex = index === this.allBars.length;
        var barIndex = lastBarIndex ? index - 1 : index;
        if (!lastBarIndex && this.allPanes[index + 1].classList.contains(COLLAPSE_PANE) && index !== 0) {
          targetEle = this.collapseArrow(barIndex - 1, this.targetArrows().lastBarArrow);
        } else {
          targetEle = lastBarIndex ? this.collapseArrow(barIndex, this.targetArrows().lastBarArrow) : this.collapseArrow(barIndex, this.targetArrows().collapseArrow);
        }
        var event_1 = { target: targetEle };
        var eventArgs = this.beforeAction(event_1);
        this.trigger("beforeCollapse", eventArgs, function(beforeCollapseArgs) {
          if (!beforeCollapseArgs.cancel) {
            var collapsedindex = [];
            collapsedindex[0] = index;
            var j = 1;
            for (var i = 0; i < _this.allPanes.length; i++) {
              if (_this.allPanes[i].classList.contains(COLLAPSE_PANE)) {
                collapsedindex[j] = i;
                j++;
              }
            }
            collapsedindex = collapsedindex.sort();
            _this.updateIsCollapsed(index, _this.targetArrows().collapseArrow, _this.targetArrows().lastBarArrow);
            for (var i = 0; i < collapsedindex.length; i++) {
              if (!_this.allPanes[collapsedindex[i]].classList.contains(COLLAPSE_PANE)) {
                _this.updateIsCollapsed(collapsedindex[i], _this.targetArrows().collapseArrow, _this.targetArrows().lastBarArrow);
              }
            }
            for (var i = collapsedindex.length; i > 0; i--) {
              if (!_this.allPanes[collapsedindex[i - 1]].classList.contains(COLLAPSE_PANE)) {
                var targetArrow = _this.targetArrows();
                _this.updateIsCollapsed(collapsedindex[i - 1], targetArrow.collapseArrow, targetArrow.lastBarArrow);
              }
            }
            var collapseEventArgs = _this.afterAction(event_1);
            _this.trigger("collapsed", collapseEventArgs);
            _this.collapseFlag = false;
          }
        });
      } else {
        for (var m = 0; m < this.allPanes.length; m++) {
          if (!isNullOrUndefined(this.paneSettings[m]) && this.paneSettings[m].collapsed) {
            this.updateIsCollapsed(m, this.targetArrows().collapseArrow, this.targetArrows().lastBarArrow);
          }
        }
        for (var m = this.allPanes.length - 1; m >= 0; m--) {
          if (!isNullOrUndefined(this.paneSettings[m]) && this.paneSettings[m].collapsed && !this.allPanes[m].classList.contains(COLLAPSE_PANE)) {
            var collapseArrow = this.orientation === "Horizontal" ? ARROW_RIGHT : ARROW_DOWN;
            if (m !== 0) {
              var targetEle = this.collapseArrow(m - 1, collapseArrow);
              targetEle.click();
            }
            if (!this.nextPane.classList.contains(COLLAPSE_PANE)) {
              var targetEle = this.collapseArrow(m - 1, collapseArrow);
              targetEle.click();
            }
          }
        }
      }
      this.expandFlag = true;
    };
    Splitter2.prototype.targetArrows = function() {
      this.splitterProperty();
      return {
        collapseArrow: this.orientation === "Horizontal" ? ARROW_LEFT : ARROW_UP,
        lastBarArrow: this.orientation === "Vertical" ? ARROW_DOWN : ARROW_RIGHT
      };
    };
    Splitter2.prototype.collapsedOnchange = function(index) {
      if (!isNullOrUndefined(this.paneSettings[index]) && !isNullOrUndefined(this.paneSettings[index].collapsed) && this.allPanes[index].classList.contains(COLLAPSE_PANE)) {
        this.updateIsCollapsed(index, this.targetArrows().lastBarArrow, this.targetArrows().collapseArrow);
      }
    };
    Splitter2.prototype.isEnabled = function(enabled) {
      enabled ? removeClass([this.element], DISABLED) : addClass([this.element], DISABLED);
    };
    Splitter2.prototype.setSeparatorSize = function(size) {
      var sizeValue = isNullOrUndefined(size) ? "auto" : size + "px";
      var separator = this.orientation === "Horizontal" ? SPLIT_H_BAR : SPLIT_V_BAR;
      for (var index = 0; index < this.allBars.length; index++) {
        var splitBar = selectAll("." + separator, this.element)[index];
        var resizeBar = selectAll("." + RESIZE_BAR, splitBar)[0];
        if (this.orientation === "Horizontal") {
          splitBar.style.width = sizeValue;
          if (!isNullOrUndefined(resizeBar)) {
            resizeBar.style.width = sizeValue;
          }
        } else {
          splitBar.style.height = sizeValue;
          if (!isNullOrUndefined(resizeBar)) {
            resizeBar.style.height = sizeValue;
          }
        }
      }
    };
    Splitter2.prototype.changeOrientation = function(orientation) {
      var isVertical = orientation === "Vertical";
      this.element.classList.remove(isVertical ? HORIZONTAL_PANE : VERTICAL_PANE);
      this.element.classList.add(isVertical ? VERTICAL_PANE : HORIZONTAL_PANE);
      for (var index = 0; index < this.allPanes.length; index++) {
        this.allPanes[index].classList.remove(isVertical ? SPLIT_H_PANE : SPLIT_V_PANE);
        this.allPanes[index].classList.add(isVertical ? SPLIT_V_PANE : SPLIT_H_PANE);
      }
      for (var index = 0; index < this.allBars.length; index++) {
        detach(this.allBars[index]);
      }
      this.allBars = [];
      this.addSeparator(this.element);
    };
    Splitter2.prototype.checkSplitPane = function(currentBar, elementIndex) {
      var paneEle = this.collectPanes(currentBar.parentElement.children)[elementIndex];
      return paneEle;
    };
    Splitter2.prototype.collectPanes = function(childNodes) {
      var elements = [];
      for (var i = 0; i < childNodes.length; i++) {
        if (childNodes[i].classList.contains(PANE)) {
          elements.push(childNodes[i]);
        }
      }
      return elements;
    };
    Splitter2.prototype.getPrevPane = function(order) {
      return this.enableReversePanes ? this.getOrderPane(order + 1) : this.getOrderPane(order - 1);
    };
    Splitter2.prototype.getNextPane = function(order) {
      return this.enableReversePanes ? this.getOrderPane(order - 1) : this.getOrderPane(order + 1);
    };
    Splitter2.prototype.getOrderPane = function(order) {
      var pane;
      for (var i = 0; i < this.element.children.length; i++) {
        if (parseInt(this.element.children[i].style.order, 10) === order) {
          pane = this.element.children[i];
        }
      }
      return pane;
    };
    Splitter2.prototype.getOrderIndex = function(order, type) {
      var index;
      var panes;
      if (type === "pane") {
        panes = this.allPanes;
      } else {
        panes = this.allBars;
      }
      for (var i = 0; i < panes.length; i++) {
        if (parseInt(panes[i].style.order, 10) === order) {
          index = i;
        }
      }
      return index;
    };
    Splitter2.prototype.updateSeparatorSize = function(resizeHanlder) {
      var sizeValue = isNullOrUndefined(this.separatorSize) ? "1px" : this.separatorSize + "px";
      this.orientation === "Horizontal" ? resizeHanlder.style.width = sizeValue : resizeHanlder.style.height = sizeValue;
    };
    Splitter2.prototype.addResizeHandler = function(currentBar) {
      var resizeHanlder = this.createElement("div");
      addClass([resizeHanlder], [RESIZE_BAR, E_ICONS]);
      this.updateSeparatorSize(resizeHanlder);
      currentBar.appendChild(resizeHanlder);
    };
    Splitter2.prototype.getHeight = function(target) {
      var height = this.height;
      height = target.style.height !== "" && this.height === "100%" ? target.style.height : this.height;
      return height;
    };
    Splitter2.prototype.getWidth = function(target) {
      var width = this.width;
      width = target.style.width !== "" && this.width === "100%" ? target.style.width : this.width;
      return width;
    };
    Splitter2.prototype.setDimension = function(height, width) {
      setStyleAttribute(this.element, { "height": height, "width": width });
    };
    Splitter2.prototype.updateCollapseIcons = function(index, arrow1, arrow2) {
      if (!isNullOrUndefined(this.paneSettings[index])) {
        if (!isNullOrUndefined(this.paneSettings[index].collapsible)) {
          this.paneSettings[index].collapsible ? removeClass([arrow2], [HIDE_ICON]) : addClass([arrow2], [HIDE_ICON]);
          if (!isNullOrUndefined(this.paneSettings[index + 1])) {
            this.paneSettings[index + 1].collapsible ? removeClass([arrow1], [HIDE_ICON]) : addClass([arrow1], [HIDE_ICON]);
          }
          if (!isNullOrUndefined(this.paneSettings[index + 1])) {
            if (this.paneSettings[index + 1].collapsible) {
              this.paneSettings[index + 1].collapsible ? removeClass([arrow1], [HIDE_ICON]) : addClass([arrow1], [HIDE_ICON]);
            }
          }
        }
      }
    };
    Splitter2.prototype.updateIconClass = function() {
      if (this.orientation === "Horizontal") {
        this.leftArrow = ARROW_LEFT;
        this.rightArrow = ARROW_RIGHT;
      } else {
        this.leftArrow = ARROW_UP;
        this.rightArrow = ARROW_DOWN;
      }
    };
    Splitter2.prototype.createSeparator = function(i) {
      var separator = this.createElement("div");
      this.allBars.push(separator);
      var arrow1 = this.createElement("button");
      var arrow2 = this.createElement("button");
      arrow1.setAttribute("tabindex", "-1");
      arrow2.setAttribute("tabindex", "-1");
      arrow1.setAttribute("aria-label", "Toggle navigation");
      arrow2.setAttribute("aria-label", "Toggle navigation");
      arrow1.setAttribute("type", "button");
      arrow2.setAttribute("type", "button");
      var size = isNullOrUndefined(this.separatorSize) ? "1px" : this.separatorSize + "px";
      var proxy = this;
      if (this.orientation === "Horizontal") {
        this.updateIconClass();
        addClass([arrow2], [NAVIGATE_ARROW, ARROW_LEFT, HIDE_ICON]);
        addClass([arrow1], [NAVIGATE_ARROW, ARROW_RIGHT, HIDE_ICON]);
        addClass([separator], [SPLIT_BAR2, SPLIT_H_BAR]);
        separator.style.width = size;
      } else {
        addClass([arrow1], [NAVIGATE_ARROW, ARROW_DOWN, HIDE_ICON]);
        addClass([arrow2], [NAVIGATE_ARROW, ARROW_UP, HIDE_ICON]);
        addClass([separator], [SPLIT_BAR2, SPLIT_V_BAR]);
        this.updateIconClass();
        separator.style.height = size;
      }
      this.addMouseActions(separator);
      separator.appendChild(arrow2);
      this.addResizeHandler(separator);
      separator.appendChild(arrow1);
      this.updateCollapseIcons(i, arrow1, arrow2);
      separator.setAttribute("tabindex", "0");
      if (this.enableReversePanes) {
        separator.setAttribute("dir", "ltr");
      } else {
        separator.removeAttribute("dir");
      }
      separator.addEventListener("focus", function() {
        separator.classList.add(SPLIT_BAR_ACTIVE);
        proxy.currentSeparator = separator;
        proxy.getPaneDetails();
      });
      separator.addEventListener("blur", function() {
        separator.classList.remove(SPLIT_BAR_ACTIVE);
      });
      return separator;
    };
    Splitter2.prototype.updateResizablePanes = function(index) {
      this.getPaneDetails();
      this.isResizable() ? this.allPanes[index].classList.add(RESIZABLE_PANE) : this.allPanes[index].classList.remove(RESIZABLE_PANE);
    };
    Splitter2.prototype.addSeparator = function(target) {
      var childCount = this.allPanes.length;
      var clonedEle = target.children;
      var separator;
      for (var i = 0; i < childCount; i++) {
        if (i < childCount - 1) {
          separator = this.createSeparator(i);
          setStyleAttribute(separator, { "order": i * 2 + 1 });
          this.separatorOrder.push(i * 2 + 1);
          clonedEle[i].parentNode.appendChild(separator);
          this.currentSeparator = separator;
          separator.setAttribute("role", "separator");
          separator.setAttribute("aria-orientation", this.orientation.toLowerCase());
          this.wireClickEvents();
          if (!isNullOrUndefined(separator)) {
            if (this.isResizable()) {
              EventHandler.add(separator, "mousedown", this.onMouseDown, this);
              var eventName = Browser.info.name === "msie" ? "pointerdown" : "touchstart";
              EventHandler.add(separator, eventName, this.onMouseDown, this);
              separator.classList.add(RESIZABLE_BAR);
              this.updateResizablePanes(i);
            } else {
              addClass([select("." + RESIZE_BAR, separator)], HIDE_HANDLER);
            }
          }
        } else {
          if (separator) {
            addClass([separator], LAST_BAR);
          }
          if (childCount > 1) {
            this.updateResizablePanes(i);
          }
        }
      }
      if (Browser.info.name === "msie") {
        var allBar = this.element.querySelectorAll(".e-splitter .e-resize-handler");
        for (var i = 0; i < allBar.length; i++) {
          var sepSize = isNullOrUndefined(this.separatorSize) ? 1 : this.separatorSize;
          allBar[i].style.paddingLeft = sepSize / 2 + "px";
          allBar[i].style.paddingRight = sepSize / 2 + "px";
        }
      }
    };
    Splitter2.prototype.isResizable = function() {
      var resizable = false;
      if (!isNullOrUndefined(this.paneSettings[this.getPreviousPaneIndex()]) && this.paneSettings[this.getPreviousPaneIndex()].resizable && !isNullOrUndefined(this.paneSettings[this.getNextPaneIndex()]) && this.paneSettings[this.getNextPaneIndex()].resizable || isNullOrUndefined(this.paneSettings[this.getNextPaneIndex()])) {
        resizable = true;
      }
      return resizable;
    };
    Splitter2.prototype.addMouseActions = function(separator) {
      var _this = this;
      var sTout;
      var hoverTimeOut;
      separator.addEventListener("mouseenter", function() {
        sTout = setTimeout(function() {
          addClass([separator], [SPLIT_BAR_HOVER]);
        }, _this.iconsDelay);
      });
      separator.addEventListener("mouseleave", function() {
        clearTimeout(sTout);
        removeClass([separator], [SPLIT_BAR_HOVER]);
      });
      separator.addEventListener("mouseout", function() {
        clearTimeout(hoverTimeOut);
      });
      separator.addEventListener("mouseover", function() {
        hoverTimeOut = setTimeout(function() {
          addClass([separator], [SPLIT_BAR_HOVER]);
        });
      });
    };
    Splitter2.prototype.getEventType = function(e) {
      return e.indexOf("mouse") > -1 ? "mouse" : "touch";
    };
    Splitter2.prototype.updateCurrentSeparator = function(target) {
      this.currentSeparator = this.isSeparator(target) ? target.parentElement : target;
    };
    Splitter2.prototype.isSeparator = function(target) {
      return target.classList.contains(SPLIT_BAR2) ? false : true;
    };
    Splitter2.prototype.isMouseEvent = function(e) {
      var isMouse = false;
      if (this.getEventType(e.type) === "mouse" || !isNullOrUndefined(e.pointerType) && this.getEventType(e.pointerType) === "mouse") {
        isMouse = true;
      }
      return isMouse;
    };
    Splitter2.prototype.updateCursorPosition = function(e, type) {
      if (this.isMouseEvent(e)) {
        this.changeCoordinates({ x: e.pageX, y: e.pageY }, type);
      } else {
        var eventType = Browser.info.name !== "msie" ? e.touches[0] : e;
        this.changeCoordinates({ x: eventType.pageX, y: eventType.pageY }, type);
      }
    };
    Splitter2.prototype.changeCoordinates = function(coordinates, type) {
      if (type === "previous") {
        this.previousCoordinates = coordinates;
      } else {
        this.currentCoordinates = coordinates;
      }
    };
    Splitter2.prototype.reportWindowSize = function() {
      var _this = this;
      var paneCount = this.allPanes.length;
      if (!document.body.contains(this.element)) {
        document.defaultView.removeEventListener("resize", this.onReportWindowSize);
        return;
      }
      for (var i = 0; i < paneCount; i++) {
        if (isNullOrUndefined(this.paneSettings[i].size)) {
          this.allPanes[i].classList.remove(STATIC_PANE);
        }
        if (paneCount - 1 === i) {
          var staticPaneCount = this.element.querySelectorAll("." + STATIC_PANE).length;
          if (staticPaneCount === paneCount) {
            removeClass([this.allPanes[i]], STATIC_PANE);
          }
        }
      }
      if (paneCount > 0) {
        setTimeout(function() {
          _this.updateSplitterSize(true);
        }, 200);
      }
    };
    Splitter2.prototype.updateSplitterSize = function(iswindowResize) {
      var totalWidth = 0;
      var flexPaneIndexes = [];
      var flexCount = 0;
      var children = this.element.children;
      for (var i = 0, len = children.length; i < len; i++) {
        totalWidth += this.orientation === "Horizontal" ? children[i].offsetWidth : children[i].offsetHeight;
      }
      for (var j = 0, len = this.allBars.length; j < len; j++) {
        totalWidth += this.orientation === "Horizontal" ? parseInt(getComputedStyle(this.allBars[j]).marginLeft, 10) + // eslint-disable-next-line max-len
        parseInt(getComputedStyle(this.allBars[j]).marginLeft, 10) : parseInt(getComputedStyle(this.allBars[j]).marginTop, 10) + parseInt(getComputedStyle(this.allBars[j]).marginBottom, 10);
      }
      var diff = this.orientation === "Horizontal" ? this.element.offsetWidth - (this.border * 2 + totalWidth) : this.element.offsetHeight - (this.border * 2 + totalWidth);
      for (var i = 0, len = this.allPanes.length; i < len; i++) {
        if (this.allPanes[i].innerText === "" ? !this.paneSettings[i].size || !(this.allPanes[i].innerText === "") : !this.paneSettings[i].size && !(this.allPanes[i].innerText === "")) {
          flexPaneIndexes[flexCount] = i;
          flexCount++;
        }
      }
      var avgDiffWidth = diff / flexPaneIndexes.length;
      for (var j = 0, len = flexPaneIndexes.length; j < len; j++) {
        if (this.allPanes[flexPaneIndexes[j]].style.flexBasis !== "") {
          this.allPanes[flexPaneIndexes[j]].style.flexBasis = this.orientation === "Horizontal" ? this.allPanes[flexPaneIndexes[j]].offsetWidth + avgDiffWidth + "px" : this.allPanes[flexPaneIndexes[j]].offsetHeight + avgDiffWidth + "px";
        }
      }
      if (this.allPanes.length === 2 && iswindowResize) {
        var paneCount = this.allPanes.length;
        var minValue = void 0;
        var paneMinRange = void 0;
        var paneIndex = 0;
        var updatePane = void 0;
        var flexPane = void 0;
        for (var i = 0; i < paneCount; i++) {
          if (!isNullOrUndefined(this.paneSettings[i].min)) {
            paneMinRange = this.convertPixelToNumber(this.paneSettings[i].min.toString());
            if (this.paneSettings[i].min.indexOf("%") > 0) {
              paneMinRange = this.convertPercentageToPixel(this.paneSettings[i].min);
            }
            minValue = this.convertPixelToNumber(paneMinRange.toString());
            if ((this.orientation === "Horizontal" ? this.allPanes[i].offsetWidth : this.allPanes[i].offsetHeight) < minValue) {
              if (i === paneIndex) {
                updatePane = this.allPanes[i];
                flexPane = this.allPanes[i + 1];
              } else {
                updatePane = this.allPanes[i];
                flexPane = this.allPanes[i - 1];
              }
              var sizeDiff = minValue - (this.orientation === "Horizontal" ? this.allPanes[i].offsetWidth : this.allPanes[i].offsetHeight);
              var isPercent = updatePane.style.flexBasis.indexOf("%") > -1;
              var updatePaneOffset = this.orientation === "Horizontal" ? updatePane.offsetWidth : updatePane.offsetHeight;
              updatePane.style.flexBasis = isPercent ? this.convertPixelToPercentage(updatePaneOffset + sizeDiff) + "%" : updatePaneOffset + sizeDiff + "px";
              var flexPaneOffset = this.orientation === "Horizontal" ? flexPane.offsetWidth : flexPane.offsetHeight;
              if (flexPane.style.flexBasis !== "") {
                flexPane.style.flexBasis = flexPane.style.flexBasis.indexOf("%") > -1 ? this.convertPixelToPercentage(flexPaneOffset - sizeDiff) + "%" : flexPaneOffset - sizeDiff + "px";
              }
            }
          }
        }
      }
    };
    Splitter2.prototype.wireResizeEvents = function() {
      document.addEventListener("mousemove", this.onMouseMoveHandler, true);
      document.addEventListener("mouseup", this.onMouseUpHandler, true);
      var touchMoveEvent = Browser.info.name === "msie" ? "pointermove" : "touchmove";
      var touchEndEvent = Browser.info.name === "msie" ? "pointerup" : "touchend";
      document.addEventListener(touchMoveEvent, this.onTouchMoveHandler, true);
      document.addEventListener(touchEndEvent, this.onTouchEndHandler, true);
    };
    Splitter2.prototype.unwireResizeEvents = function() {
      this.element.ownerDocument.defaultView.removeEventListener("resize", this.onReportWindowSize);
      var touchMoveEvent = Browser.info.name === "msie" ? "pointermove" : "touchmove";
      var touchEndEvent = Browser.info.name === "msie" ? "pointerup" : "touchend";
      document.removeEventListener("mousemove", this.onMouseMoveHandler, true);
      document.removeEventListener("mouseup", this.onMouseUpHandler, true);
      document.removeEventListener(touchMoveEvent, this.onTouchMoveHandler, true);
      document.removeEventListener(touchEndEvent, this.onTouchEndHandler, true);
    };
    Splitter2.prototype.wireClickEvents = function() {
      EventHandler.add(this.currentSeparator, "touchstart click", this.clickHandler, this);
    };
    Splitter2.prototype.clickHandler = function(e) {
      if (!e.target.classList.contains(NAVIGATE_ARROW)) {
        var hoverBars = selectAll("." + ROOT2 + " > ." + SPLIT_BAR2 + "." + SPLIT_BAR_HOVER);
        if (hoverBars.length > 0) {
          removeClass(hoverBars, SPLIT_BAR_HOVER);
        }
        e.target.classList.add(SPLIT_BAR_HOVER);
      }
      this.splitterDetails(e);
      var icon = e.target;
      if (icon.classList.contains(ARROW_LEFT) || icon.classList.contains(ARROW_RIGHT) || icon.classList.contains(ARROW_DOWN) || icon.classList.contains(ARROW_UP)) {
        if (!this.nextPane.classList.contains(PANE_HIDDEN) && !this.previousPane.classList.contains(PANE_HIDDEN)) {
          this.collapseAction(e);
        } else {
          this.expandAction(e);
        }
        this.updateSplitterSize();
      }
    };
    Splitter2.prototype.expandAction = function(e) {
      var _this = this;
      var eventArgs = this.beforeAction(e);
      if (this.expandFlag) {
        this.trigger("beforeExpand", eventArgs, function(beforeExpandArgs) {
          if (!beforeExpandArgs.cancel) {
            _this.expandPane(e);
          }
          var expandEventArgs = _this.afterAction(e);
          _this.trigger("expanded", expandEventArgs);
        });
      } else {
        this.expandPane(e);
      }
    };
    Splitter2.prototype.getIcon = function(e) {
      var targetClass = e.target.className.split(" ").filter(function(className) {
        return className !== NAVIGATE_ARROW && className !== HIDE_ICON;
      });
      return targetClass[0];
    };
    Splitter2.prototype.expandPane = function(e) {
      this.removeStaticPanes();
      var collapseCount = this.element.querySelectorAll("." + COLLAPSE_PANE).length;
      var flexStatus = !this.previousPane.classList.contains(COLLAPSE_PANE) && this.previousPane.classList.contains(STATIC_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.classList.contains(EXPAND_PANE) && this.nextPane.nextElementSibling.classList.contains(PANE) && !this.nextPane.nextElementSibling.classList.contains(STATIC_PANE) && !(collapseCount === this.allPanes.length - 2);
      var collapseClass = [COLLAPSE_PANE, PANE_HIDDEN];
      var icon = this.getIcon(e);
      var isLeftOrUp = icon === ARROW_LEFT || icon === ARROW_UP;
      var collapsePane = isLeftOrUp ? this.nextPane : this.previousPane;
      var expandPane = isLeftOrUp ? this.previousPane : this.nextPane;
      var expandPaneIndex = isLeftOrUp ? this.nextPaneIndex : this.prevPaneIndex;
      removeClass([collapsePane], collapseClass);
      collapsePane.setAttribute("aria-hidden", "false");
      var cCount = this.element.querySelectorAll("." + COLLAPSE_PANE).length;
      if (cCount > 0) {
        if (!expandPane.classList.contains(COLLAPSE_PANE)) {
          addClass([expandPane], EXPAND_PANE);
          expandPane.setAttribute("aria-expanded", "true");
        }
      } else if (cCount === 0) {
        for (var i = 0; i < this.allPanes.length; i++) {
          if (!this.allPanes[i].classList.contains(COLLAPSE_PANE)) {
            removeClass([this.allPanes[i]], EXPAND_PANE);
            this.allPanes[i].setAttribute("aria-expanded", "false");
          }
        }
      }
      if (this.expandFlag) {
        this.updatePaneSettings(expandPaneIndex, false);
      }
      this.updateIconsOnExpand(e, icon);
      this.updateFlexGrow();
      if (flexStatus) {
        this.previousPane.classList.remove(EXPAND_PANE);
        this.previousPane.setAttribute("aria-expanded", "false");
        this.previousPane.style.flexGrow = "";
      }
    };
    Splitter2.prototype.updateFlexGrow = function() {
      var collapseCount = 0;
      for (var j = 0; j < this.element.children.length; j++) {
        if (this.element.children[j].classList.contains(COLLAPSE_PANE)) {
          collapseCount = collapseCount + 1;
        }
      }
      var visiblePane = collapseCount === this.allPanes.length - 2;
      var panes = this.allPanes;
      for (var i = 0; i < panes.length; i++) {
        panes[i].style.flexGrow = "";
        if (visiblePane && this.allPanes[i].classList.contains(COLLAPSE_PANE) && this.paneSettings[i].size && i !== this.allPanes.length - 1) {
          panes[i].style.flexGrow = "";
        }
        if (panes[i].classList.contains(EXPAND_PANE)) {
          panes[i].style.flexGrow = "1";
        } else if (panes[i].classList.contains(COLLAPSE_PANE)) {
          panes[i].style.flexGrow = "0";
        }
      }
    };
    Splitter2.prototype.hideTargetBarIcon = function(targetBar, targetArrow) {
      addClass([select("." + targetArrow, targetBar)], HIDE_ICON);
    };
    Splitter2.prototype.showTargetBarIcon = function(targetBar, targetArrow) {
      removeClass([select("." + targetArrow, targetBar)], HIDE_ICON);
    };
    Splitter2.prototype.updateIconsOnCollapse = function(e, targetIcon) {
      this.splitterProperty();
      var removeIcon = this.arrow;
      var otherBar = this.currentBarIndex === this.allBars.length - 1 ? this.prevBar : this.nextBar;
      var otherBarIndex = this.currentBarIndex === this.allBars.length - 1 ? this.currentBarIndex - 1 : this.currentBarIndex + 1;
      if (!e.target.classList.contains(HIDE_ICON)) {
        if (this.splitInstance.prevPaneCollapsed || this.splitInstance.nextPaneCollapsed) {
          if (this.paneSettings[this.prevPaneIndex].collapsible && this.paneSettings[this.nextPaneIndex].collapsible) {
            this.resizableModel(this.currentBarIndex, false);
            this.hideTargetBarIcon(this.currentSeparator, targetIcon);
            if (!isNullOrUndefined(otherBar)) {
              var otherPrevPaneIndex = otherBarIndex;
              var otherNextPaneIndex = otherBarIndex + 1;
              var collapsecount = this.getCollapseCount(otherPrevPaneIndex, otherNextPaneIndex);
              if (this.paneSettings[otherPrevPaneIndex].collapsible && this.paneSettings[otherNextPaneIndex].collapsible) {
                if (collapsecount === 1) {
                  this.hideTargetBarIcon(otherBar, removeIcon);
                  this.resizableModel(otherBarIndex, false);
                } else if (collapsecount === 2) {
                  this.hideBarIcons(otherBar);
                  this.resizableModel(otherBarIndex, false);
                }
                if (!this.paneSettings[otherPrevPaneIndex].collapsible || !this.paneSettings[otherNextPaneIndex].collapsible) {
                  this.hideTargetBarIcon(otherBar, targetIcon);
                }
              }
            }
          } else {
            this.showTargetBarIcon(this.currentSeparator, removeIcon);
            this.hideTargetBarIcon(this.currentSeparator, targetIcon);
            this.resizableModel(this.currentBarIndex, false);
          }
        }
      } else {
        this.resizableModel(this.currentBarIndex, false);
        if (!isNullOrUndefined(otherBar)) {
          this.resizableModel(otherBarIndex, false);
        }
        if (!this.paneSettings[this.prevPaneIndex].collapsible || !this.paneSettings[this.nextPaneIndex].collapsible) {
          if (!isNullOrUndefined(otherBar)) {
            this.hideTargetBarIcon(otherBar, targetIcon);
          }
          this.hideTargetBarIcon(this.currentSeparator, removeIcon);
        } else {
          if (!isNullOrUndefined(otherBar)) {
            this.hideTargetBarIcon(otherBar, removeIcon);
          }
          this.showTargetBarIcon(this.currentSeparator, removeIcon);
        }
      }
    };
    Splitter2.prototype.collapseAction = function(e) {
      var _this = this;
      var eventArgs = this.beforeAction(e);
      if (this.collapseFlag) {
        this.collapsePane(e);
      } else {
        this.trigger("beforeCollapse", eventArgs, function(beforeCollapseArgs) {
          if (!beforeCollapseArgs.cancel) {
            _this.collapsePane(e);
            var collapseEventArgs = _this.afterAction(e);
            _this.trigger("collapsed", collapseEventArgs);
          }
        });
      }
    };
    Splitter2.prototype.collapsePane = function(e) {
      this.removeStaticPanes();
      var collapseCount = this.element.querySelectorAll("." + COLLAPSE_PANE).length;
      var flexStatus = this.previousPane.classList.contains(STATIC_PANE) && !this.previousPane.classList.contains(COLLAPSE_PANE) && !this.nextPane.classList.contains(COLLAPSE_PANE) && this.nextPane.nextElementSibling.classList.contains(PANE) && !this.nextPane.nextElementSibling.classList.contains(STATIC_PANE) && !this.nextPane.nextElementSibling.classList.contains(COLLAPSE_PANE) && !(collapseCount === this.allPanes.length - 2) || this.nextPane.classList.contains(COLLAPSE_PANE) && !this.previousPane.classList.contains(STATIC_PANE) && this.nextPane.classList.contains(STATIC_PANE);
      var collapseClass = [COLLAPSE_PANE, PANE_HIDDEN];
      var icon = this.getIcon(e);
      var isLeftOrUp = icon === ARROW_LEFT || icon === ARROW_UP;
      var collapsePane = isLeftOrUp ? this.previousPane : this.nextPane;
      var expandPane = isLeftOrUp ? this.nextPane : this.previousPane;
      var collapsePaneIndex = isLeftOrUp ? this.prevPaneIndex : this.nextPaneIndex;
      removeClass([collapsePane], EXPAND_PANE);
      collapsePane.setAttribute("aria-expanded", "false");
      addClass([collapsePane], collapseClass);
      collapsePane.setAttribute("aria-hidden", "true");
      var isFlexPane = collapsePane.style.flexBasis === "";
      if (isFlexPane) {
        addClass([expandPane], EXPAND_PANE);
        expandPane.setAttribute("aria-expanded", "true");
      } else {
        var isFlexPaneHidden = true;
        for (var i = 0; i < this.allPanes.length; i++) {
          if (!this.allPanes[i].classList.contains(COLLAPSE_PANE)) {
            if (this.allPanes[i].style.flexBasis === "" && !this.allPanes[i].classList.contains(COLLAPSE_PANE) && !this.allPanes[i].classList.contains(EXPAND_PANE)) {
              addClass([this.allPanes[i]], EXPAND_PANE);
              this.allPanes[i].setAttribute("aria-expanded", "true");
              isFlexPaneHidden = false;
              break;
            }
          }
        }
        if (isFlexPaneHidden) {
          addClass([expandPane], EXPAND_PANE);
          expandPane.setAttribute("aria-expanded", "true");
        }
      }
      if (!this.collapseFlag) {
        this.updatePaneSettings(collapsePaneIndex, true);
      }
      this.updateIconsOnCollapse(e, icon);
      this.updateFlexGrow();
      if (flexStatus) {
        this.nextPane.classList.remove(EXPAND_PANE);
        this.nextPane.style.flexGrow = "";
      }
    };
    Splitter2.prototype.removeStaticPanes = function() {
      for (var i = 0; i < this.allPanes.length; i++) {
        if (isNullOrUndefined(this.paneSettings[i].size)) {
          this.allPanes[i].classList.remove(STATIC_PANE);
        }
      }
    };
    Splitter2.prototype.beforeAction = function(e) {
      var eventArgs = {
        element: this.element,
        event: e,
        pane: [this.previousPane, this.nextPane],
        index: [this.prevPaneIndex, this.nextPaneIndex],
        separator: this.currentSeparator,
        cancel: false
      };
      return eventArgs;
    };
    Splitter2.prototype.updatePaneSettings = function(index, collapsed) {
      var paneValues = this.paneSettings;
      paneValues[index].collapsed = collapsed;
      this.setProperties({ "paneSettings": paneValues }, true);
    };
    Splitter2.prototype.splitterProperty = function() {
      this.splitInstance = {
        currentBarIndex: this.currentBarIndex,
        nextPaneCollapsible: this.nextPane.classList.contains(COLLAPSIBLE),
        prevPaneCollapsible: this.previousPane.classList.contains(COLLAPSIBLE),
        prevPaneExpanded: this.previousPane.classList.contains(EXPAND_PANE),
        nextPaneExpanded: this.nextPane.classList.contains(EXPAND_PANE),
        nextPaneCollapsed: this.nextPane.classList.contains(COLLAPSE_PANE),
        prevPaneCollapsed: this.previousPane.classList.contains(COLLAPSE_PANE),
        nextPaneIndex: this.getNextPaneIndex(),
        prevPaneIndex: this.getPreviousPaneIndex(),
        nextPaneNextEle: this.nextPane.nextElementSibling,
        prevPanePreEle: this.previousPane.previousElementSibling
      };
    };
    Splitter2.prototype.showCurrentBarIcons = function() {
      removeClass([select("." + this.arrow, this.currentSeparator)], HIDE_ICON);
    };
    Splitter2.prototype.hideBarIcons = function(bar) {
      addClass([select("." + this.arrow, bar)], HIDE_ICON);
    };
    Splitter2.prototype.getCollapseCount = function(prevPaneIndex, nextPaneIndex) {
      var collapsecount = 0;
      if (this.allPanes[prevPaneIndex].classList.contains(COLLAPSE_PANE)) {
        collapsecount = collapsecount + 1;
      }
      if (this.allPanes[nextPaneIndex].classList.contains(COLLAPSE_PANE)) {
        collapsecount = collapsecount + 1;
      }
      return collapsecount;
    };
    Splitter2.prototype.checkResizableProp = function(prevPaneIndex, nextPaneIndex) {
      if (this.paneSettings[prevPaneIndex].resizable && this.paneSettings[nextPaneIndex].resizable) {
        return true;
      } else {
        return false;
      }
    };
    Splitter2.prototype.updateIconsOnExpand = function(e, targetIcon) {
      this.splitterProperty();
      var showIcon = this.arrow;
      var otherBar = this.currentBarIndex === this.allBars.length - 1 ? this.prevBar : this.nextBar;
      var otherBarIndex = this.currentBarIndex === this.allBars.length - 1 ? this.currentBarIndex - 1 : this.currentBarIndex + 1;
      if (!e.target.classList.contains(HIDE_ICON)) {
        if (!this.splitInstance.prevPaneCollapsed && !this.splitInstance.nextPaneCollapsed) {
          if (this.paneSettings[this.prevPaneIndex].collapsible && this.paneSettings[this.nextPaneIndex].collapsible) {
            this.showCurrentBarIcons();
            if (this.checkResizableProp(this.prevPaneIndex, this.nextPaneIndex)) {
              this.resizableModel(this.currentBarIndex, true);
            } else {
              this.resizableModel(this.currentBarIndex, false);
            }
            if (!isNullOrUndefined(otherBar)) {
              var otherPrevPaneIndex = otherBarIndex;
              var otherNextPaneIndex = otherBarIndex + 1;
              var collapsecount = this.getCollapseCount(otherPrevPaneIndex, otherNextPaneIndex);
              if (this.paneSettings[otherPrevPaneIndex].collapsible && this.paneSettings[otherNextPaneIndex].collapsible) {
                if (collapsecount === 0) {
                  this.showTargetBarIcon(otherBar, targetIcon);
                  this.showTargetBarIcon(otherBar, showIcon);
                  if (this.checkResizableProp(otherPrevPaneIndex, otherNextPaneIndex)) {
                    this.resizableModel(otherBarIndex, true);
                  }
                } else if (collapsecount === 1) {
                  this.hideBarIcons(otherBar);
                  if (this.allPanes[otherPrevPaneIndex].classList.contains(EXPAND_PANE) || this.allPanes[otherNextPaneIndex].classList.contains(EXPAND_PANE)) {
                    this.showTargetBarIcon(otherBar, showIcon);
                  } else {
                    this.showTargetBarIcon(otherBar, targetIcon);
                  }
                  this.resizableModel(otherBarIndex, false);
                }
              }
            }
          } else {
            this.hideTargetBarIcon(this.currentSeparator, targetIcon);
            this.showTargetBarIcon(this.currentSeparator, showIcon);
            if (!this.splitInstance.prevPaneCollapsed && !this.splitInstance.nextPaneCollapsed) {
              if (this.checkResizableProp(this.prevPaneIndex, this.nextPaneIndex)) {
                this.resizableModel(this.currentBarIndex, true);
              }
            } else {
              this.resizableModel(this.currentBarIndex, false);
            }
          }
        }
      } else {
        if (!this.paneSettings[this.prevPaneIndex].collapsible && !this.paneSettings[this.nextPaneIndex].collapsible) {
          if (this.checkResizableProp(this.prevPaneIndex, this.nextPaneIndex)) {
            this.resizableModel(this.currentBarIndex, true);
          }
        }
      }
    };
    Splitter2.prototype.afterAction = function(e) {
      var eventArgs = {
        element: this.element,
        event: e,
        pane: [this.previousPane, this.nextPane],
        index: [this.prevPaneIndex, this.nextPaneIndex],
        separator: this.currentSeparator
      };
      return eventArgs;
    };
    Splitter2.prototype.currentIndex = function(e) {
      this.currentBarIndex = this.getOrderIndex(parseInt(e.target.parentElement.style.order, 10), "splitbar");
    };
    Splitter2.prototype.getSeparatorIndex = function(target) {
      var array = [].slice.call(this.allBars);
      array = this.enableReversePanes ? array.reverse() : array;
      return array.indexOf(target);
    };
    Splitter2.prototype.getPrevBar = function(currentBar) {
      var prevbar = this.allBars[currentBar - 1];
      return prevbar;
    };
    Splitter2.prototype.getNextBar = function(currentBar) {
      var prevbar = this.allBars[currentBar + 1];
      return prevbar;
    };
    Splitter2.prototype.updateBars = function(index) {
      this.prevBar = this.getPrevBar(index);
      this.nextBar = this.getNextBar(index);
    };
    Splitter2.prototype.splitterDetails = function(e) {
      if (this.orientation === "Horizontal") {
        this.arrow = e.target.classList.contains(ARROW_LEFT) ? ARROW_RIGHT : ARROW_LEFT;
      } else {
        this.arrow = e.target.classList.contains(ARROW_UP) ? ARROW_DOWN : ARROW_UP;
      }
      this.updateCurrentSeparator(e.target);
      this.currentIndex(e);
      this.updateBars(this.currentBarIndex);
      this.getPaneDetails();
    };
    Splitter2.prototype.triggerResizing = function(e) {
      var eventArgs = {
        element: this.element,
        event: e,
        pane: [this.previousPane, this.nextPane],
        index: [this.prevPaneIndex, this.nextPaneIndex],
        paneSize: [this.prePaneDimenson, this.nextPaneDimension],
        separator: this.currentSeparator
      };
      this.trigger("resizing", eventArgs);
    };
    Splitter2.prototype.onMouseDown = function(e) {
      var _this = this;
      e.preventDefault();
      var target = e.target;
      if (target.classList.contains(NAVIGATE_ARROW)) {
        return;
      }
      this.updateCurrentSeparator(target);
      addClass([this.currentSeparator], SPLIT_BAR_ACTIVE);
      this.updateCursorPosition(e, "previous");
      this.getPaneDetails();
      var eventArgs = {
        element: this.element,
        event: e,
        pane: [this.previousPane, this.nextPane],
        index: [this.getPreviousPaneIndex(), this.getNextPaneIndex()],
        separator: this.currentSeparator,
        cancel: false
      };
      for (var i = 0; i < this.element.querySelectorAll("iframe").length; i++) {
        this.element.querySelectorAll("iframe")[i].style.pointerEvents = "none";
      }
      this.trigger("resizeStart", eventArgs, function(resizeStartArgs) {
        if (!resizeStartArgs.cancel) {
          _this.wireResizeEvents();
          _this.checkPaneSize(e);
        }
      });
    };
    Splitter2.prototype.updatePaneFlexBasis = function(pane) {
      var previous;
      if (pane.style.flexBasis.indexOf("%") > 0) {
        previous = this.removePercentageUnit(pane.style.flexBasis);
      } else {
        if (pane.style.flexBasis !== "") {
          previous = this.convertPixelToPercentage(this.convertPixelToNumber(pane.style.flexBasis));
        } else {
          var offset = this.orientation === "Horizontal" ? pane.offsetWidth : pane.offsetHeight;
          previous = this.convertPixelToPercentage(offset);
        }
      }
      return previous;
    };
    Splitter2.prototype.removePercentageUnit = function(value) {
      return parseFloat(value.slice(0, value.indexOf("%")));
    };
    Splitter2.prototype.convertPercentageToPixel = function(value, targetElement) {
      var percentage = value.toString();
      var convertedValue;
      if (percentage.indexOf("%") > -1) {
        convertedValue = parseFloat(percentage.slice(0, percentage.indexOf("%")));
        var offsetValue = void 0;
        if (!isNullOrUndefined(targetElement)) {
          offsetValue = this.panesDimensions[this.allPanes.indexOf(targetElement)];
        } else {
          offsetValue = this.orientation === "Horizontal" ? this.element.offsetWidth : this.element.offsetHeight;
        }
        convertedValue = Math.ceil(offsetValue * (convertedValue / 100));
      } else {
        convertedValue = parseInt(percentage, 10);
      }
      return convertedValue;
    };
    Splitter2.prototype.convertPixelToPercentage = function(value) {
      var offsetValue = this.orientation === "Horizontal" ? this.element.offsetWidth : this.element.offsetHeight;
      return value / offsetValue * 100;
    };
    Splitter2.prototype.convertPixelToNumber = function(value) {
      value = value.toString();
      if (value.indexOf("p") > -1) {
        return parseFloat(value.slice(0, value.indexOf("p")));
      } else {
        return parseFloat(value);
      }
    };
    Splitter2.prototype.calcDragPosition = function(rectValue, offsetValue) {
      var separatorPosition = this.orientation === "Horizontal" ? this.currentCoordinates.x - rectValue : this.currentCoordinates.y - rectValue;
      var separator;
      separator = separatorPosition / offsetValue;
      separator = separator > 1 ? 1 : separator < 0 ? 0 : separator;
      return separator * offsetValue;
    };
    Splitter2.prototype.getSeparatorPosition = function(e) {
      this.updateCursorPosition(e, "current");
      var rectBound = this.orientation === "Horizontal" ? this.element.getBoundingClientRect().left + window.scrollX : this.element.getBoundingClientRect().top + window.scrollY;
      var offSet = this.orientation === "Horizontal" ? this.element.offsetWidth : this.element.offsetHeight;
      return this.calcDragPosition(rectBound, offSet);
    };
    Splitter2.prototype.getMinMax = function(paneIndex, target, selection) {
      var defaultVal = selection === "min" ? 0 : null;
      var paneValue = null;
      if (selection === "min") {
        if (!isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(this.paneSettings[paneIndex].min)) {
          paneValue = this.paneSettings[paneIndex].min;
        }
      } else {
        if (!isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(this.paneSettings[paneIndex].max)) {
          paneValue = this.paneSettings[paneIndex].max;
        }
      }
      if (this.paneSettings.length > 0 && !isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(paneValue)) {
        if (paneValue.indexOf("%") > 0) {
          paneValue = this.convertPercentageToPixel(paneValue).toString();
        }
        return this.convertPixelToNumber(paneValue);
      } else {
        return defaultVal;
      }
    };
    Splitter2.prototype.getPreviousPaneIndex = function() {
      var separatorIndex = this.enableReversePanes ? parseInt(this.currentSeparator.style.order, 10) + 1 : parseInt(this.currentSeparator.style.order, 10) - 1;
      return this.getOrderIndex(separatorIndex, "pane");
    };
    Splitter2.prototype.getNextPaneIndex = function() {
      var separatorIndex = this.enableReversePanes ? parseInt(this.currentSeparator.style.order, 10) - 1 : parseInt(this.currentSeparator.style.order, 10) + 1;
      return this.getOrderIndex(separatorIndex, "pane");
    };
    Splitter2.prototype.getPaneDetails = function() {
      var prevPane = null;
      var nextPane = null;
      this.order = parseInt(this.currentSeparator.style.order, 10);
      if (this.allPanes.length > 1) {
        prevPane = this.getPrevPane(this.order);
        nextPane = this.getNextPane(this.order);
      }
      if (prevPane && nextPane) {
        this.previousPane = prevPane;
        this.nextPane = nextPane;
        this.prevPaneIndex = this.getPreviousPaneIndex();
        this.nextPaneIndex = this.getNextPaneIndex();
      } else {
        return;
      }
    };
    Splitter2.prototype.getPaneHeight = function(pane) {
      return this.orientation === "Horizontal" ? pane.offsetWidth.toString() : pane.offsetHeight.toString();
    };
    Splitter2.prototype.isValidSize = function(paneIndex) {
      var isValid = false;
      if (!isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(this.paneSettings[paneIndex].size) && this.paneSettings[paneIndex].size.indexOf("%") > -1) {
        isValid = true;
      }
      return isValid;
    };
    Splitter2.prototype.getPaneDimensions = function() {
      this.previousPaneHeightWidth = this.previousPane.style.flexBasis === "" ? this.getPaneHeight(this.previousPane) : this.previousPane.style.flexBasis;
      this.nextPaneHeightWidth = this.nextPane.style.flexBasis === "" ? this.getPaneHeight(this.nextPane) : this.nextPane.style.flexBasis;
      if (this.isValidSize(this.prevPaneIndex)) {
        this.previousPaneHeightWidth = this.convertPercentageToPixel(this.previousPaneHeightWidth).toString();
        this.updatePrePaneInPercentage = true;
      }
      if (this.isValidSize(this.nextPaneIndex)) {
        this.nextPaneHeightWidth = this.convertPercentageToPixel(this.nextPaneHeightWidth).toString();
        this.updateNextPaneInPercentage = true;
      }
      this.prePaneDimenson = this.convertPixelToNumber(this.previousPaneHeightWidth.toString());
      this.nextPaneDimension = this.convertPixelToNumber(this.nextPaneHeightWidth.toString());
    };
    Splitter2.prototype.checkCoordinates = function(pageX, pageY) {
      var coordinatesChanged = true;
      if (pageX === this.previousCoordinates.x && pageY === this.previousCoordinates.y) {
        coordinatesChanged = false;
      }
      return coordinatesChanged;
    };
    Splitter2.prototype.isCursorMoved = function(e) {
      var cursorMoved = true;
      if (this.getEventType(e.type) === "mouse" || !isNullOrUndefined(e.pointerType) && this.getEventType(e.pointerType) === "mouse") {
        cursorMoved = this.checkCoordinates(e.pageX, e.pageY);
      } else {
        cursorMoved = Browser.info.name !== "msie" ? this.checkCoordinates(e.touches[0].pageX, e.touches[0].pageY) : this.checkCoordinates(e.pageX, e.pageY);
      }
      return cursorMoved;
    };
    Splitter2.prototype.getBorder = function() {
      this.border = 0;
      var border = this.orientation === "Horizontal" ? (this.element.offsetWidth - this.element.clientWidth) / 2 : (this.element.offsetHeight - this.element.clientHeight) / 2;
      this.border = Browser.info.name !== "chrome" ? this.border : border;
    };
    Splitter2.prototype.onMouseMove = function(e) {
      if (!this.isCursorMoved(e)) {
        return;
      }
      this.getPaneDetails();
      this.getPaneDimensions();
      this.triggerResizing(e);
      var left = this.validateDraggedPosition(this.getSeparatorPosition(e), this.prePaneDimenson, this.nextPaneDimension);
      var separatorNewPosition;
      this.getBorder();
      if (this.orientation === "Horizontal") {
        separatorNewPosition = this.element.getBoundingClientRect().left + left - this.currentSeparator.getBoundingClientRect().left + this.border;
      } else {
        separatorNewPosition = this.element.getBoundingClientRect().top + left - this.currentSeparator.getBoundingClientRect().top + this.border;
      }
      this.nextPaneHeightWidth = typeof this.nextPaneHeightWidth === "string" && this.nextPaneHeightWidth.indexOf("p") > -1 ? this.convertPixelToNumber(this.nextPaneHeightWidth) : parseInt(this.nextPaneHeightWidth, 10);
      this.previousPaneHeightWidth = typeof this.previousPaneHeightWidth === "string" && this.previousPaneHeightWidth.indexOf("p") > -1 ? this.convertPixelToNumber(this.previousPaneHeightWidth) : parseInt(this.previousPaneHeightWidth, 10);
      this.prevPaneCurrentWidth = separatorNewPosition + this.previousPaneHeightWidth;
      this.nextPaneCurrentWidth = this.nextPaneHeightWidth - separatorNewPosition;
      this.validateMinMaxValues();
      if (this.nextPaneCurrentWidth < 0) {
        this.nextPaneCurrentWidth = 0;
      }
      if (this.prevPaneCurrentWidth < 0) {
        this.prevPaneCurrentWidth = 0;
      }
      if (this.nextPaneCurrentWidth + this.prevPaneCurrentWidth > this.totalWidth) {
        if (this.nextPaneCurrentWidth < this.prevPaneCurrentWidth) {
          this.prevPaneCurrentWidth = this.prevPaneCurrentWidth - (this.nextPaneCurrentWidth + this.prevPaneCurrentWidth - this.totalWidth);
        } else {
          this.nextPaneCurrentWidth = this.nextPaneCurrentWidth - (this.nextPaneCurrentWidth + this.prevPaneCurrentWidth - this.totalWidth);
        }
      }
      if (this.nextPaneCurrentWidth + this.prevPaneCurrentWidth < this.totalWidth) {
        var difference = this.totalWidth - (this.nextPaneCurrentWidth + this.prevPaneCurrentWidth);
        this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + difference;
      }
      this.calculateCurrentDimensions();
      this.addStaticPaneClass();
      var flexPaneCount = 0;
      for (var i = 0; i < this.paneSettings.length; i++) {
        if (this.paneSettings[i].size === "") {
          flexPaneCount = flexPaneCount + 1;
        } else if (this.allPanes[i].style.flexBasis !== "") {
          this.paneSettings[i].size = this.allPanes[i].style.flexBasis;
        }
      }
      var allFlexiblePanes = flexPaneCount === this.allPanes.length;
      if (this.previousPane.style.flexBasis === "" && this.nextPane.style.flexBasis === "" && !allFlexiblePanes) {
        var middlePaneIndex = this.allPanes.length % this.allBars.length;
        if (this.prevPaneIndex === middlePaneIndex) {
          this.nextPane.style.flexBasis = this.nextPaneCurrentWidth;
          addClass([this.nextPane], STATIC_PANE);
        } else if (this.nextPaneIndex === middlePaneIndex) {
          this.previousPane.style.flexBasis = this.prevPaneCurrentWidth;
          addClass([this.previousPane], STATIC_PANE);
        } else {
          this.nextPane.style.flexBasis = this.nextPaneCurrentWidth;
          addClass([this.nextPane], STATIC_PANE);
        }
      } else if (allFlexiblePanes) {
        this.previousPane.style.flexBasis = this.prevPaneCurrentWidth;
        addClass([this.previousPane], STATIC_PANE);
        this.nextPane.style.flexBasis = this.nextPaneCurrentWidth;
        addClass([this.nextPane], STATIC_PANE);
      } else {
        if (this.previousPane.style.flexBasis !== "" && this.previousPane.classList.contains(STATIC_PANE)) {
          this.previousPane.style.flexBasis = this.prevPaneCurrentWidth;
        }
        if (this.nextPane.style.flexBasis !== "" && this.nextPane.classList.contains(STATIC_PANE)) {
          this.nextPane.style.flexBasis = this.nextPaneCurrentWidth;
        }
      }
      var isStaticPanes = this.previousPane.style.flexBasis !== "" && this.nextPane.style.flexBasis !== "";
      if (!(this.allPanes.length > 2) && isStaticPanes) {
        this.updateSplitterSize();
      }
    };
    Splitter2.prototype.validateMinRange = function(paneIndex, paneCurrentWidth, pane) {
      var paneMinRange = null;
      var paneMinDimensions;
      var difference = 0;
      var validatedVal;
      if (!isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(this.paneSettings[paneIndex].min)) {
        paneMinRange = this.paneSettings[paneIndex].min.toString();
      }
      if (!isNullOrUndefined(paneMinRange)) {
        if (paneMinRange.indexOf("%") > 0) {
          paneMinRange = this.convertPercentageToPixel(paneMinRange).toString();
        }
        paneMinDimensions = this.convertPixelToNumber(paneMinRange);
        if (paneCurrentWidth < paneMinDimensions) {
          difference = paneCurrentWidth - paneMinDimensions <= 0 ? 0 : paneCurrentWidth - paneMinDimensions;
          this.totalWidth = this.totalWidth - difference;
          this.totalPercent = this.convertPixelToPercentage(this.totalWidth);
          validatedVal = paneMinDimensions;
        }
      }
      return isNullOrUndefined(validatedVal) ? paneCurrentWidth : validatedVal;
    };
    Splitter2.prototype.validateMaxRange = function(paneIndex, paneCurrentWidth, pane) {
      var paneMaxRange = null;
      var paneMaxDimensions;
      var validatedVal;
      if (!isNullOrUndefined(this.paneSettings[paneIndex]) && !isNullOrUndefined(this.paneSettings[paneIndex].max)) {
        paneMaxRange = this.paneSettings[paneIndex].max.toString();
      }
      if (!isNullOrUndefined(paneMaxRange)) {
        if (paneMaxRange.indexOf("%") > 0) {
          paneMaxRange = this.convertPercentageToPixel(paneMaxRange).toString();
        }
        paneMaxDimensions = this.convertPixelToNumber(paneMaxRange);
        if (paneCurrentWidth > paneMaxDimensions) {
          this.totalWidth = this.totalWidth - (paneCurrentWidth - paneMaxDimensions);
          this.totalPercent = this.convertPixelToPercentage(this.totalWidth);
          validatedVal = paneMaxDimensions;
        }
      }
      return isNullOrUndefined(validatedVal) ? paneCurrentWidth : validatedVal;
    };
    Splitter2.prototype.validateMinMaxValues = function() {
      this.prevPaneCurrentWidth = this.validateMinRange(this.prevPaneIndex, this.prevPaneCurrentWidth, this.previousPane);
      this.nextPaneCurrentWidth = this.validateMinRange(this.nextPaneIndex, this.nextPaneCurrentWidth, this.nextPane);
      this.prevPaneCurrentWidth = this.validateMaxRange(this.prevPaneIndex, this.prevPaneCurrentWidth, this.previousPane);
      this.nextPaneCurrentWidth = this.validateMaxRange(this.nextPaneIndex, this.nextPaneCurrentWidth, this.nextPane);
    };
    Splitter2.prototype.equatePaneWidths = function() {
      var difference;
      if (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth > this.totalPercent) {
        difference = this.prevPaneCurrentWidth + this.nextPaneCurrentWidth - this.totalPercent;
        this.prevPaneCurrentWidth = this.prevPaneCurrentWidth - difference / 2 + "%";
        this.nextPaneCurrentWidth = this.nextPaneCurrentWidth - difference / 2 + "%";
      }
      if (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth < this.totalPercent) {
        difference = this.totalPercent - (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth);
        this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + difference / 2 + "%";
        this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + difference / 2 + "%";
      }
    };
    Splitter2.prototype.calculateCurrentDimensions = function() {
      if (this.updatePrePaneInPercentage || this.updateNextPaneInPercentage) {
        this.prevPaneCurrentWidth = Math.round(Number(Math.round(this.convertPixelToPercentage(this.prevPaneCurrentWidth) * 10) / 10));
        this.nextPaneCurrentWidth = Math.round(Number(Math.round(this.convertPixelToPercentage(this.nextPaneCurrentWidth) * 10) / 10));
        if (this.prevPaneCurrentWidth === 0) {
          this.nextPaneCurrentWidth = this.totalPercent;
        }
        if (this.nextPaneCurrentWidth === 0) {
          this.prevPaneCurrentWidth = this.totalPercent;
        }
        if (this.prevPaneCurrentWidth + this.nextPaneCurrentWidth !== this.totalPercent) {
          this.equatePaneWidths();
        } else {
          this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + "%";
          this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + "%";
        }
        this.prevPaneCurrentWidth = this.updatePrePaneInPercentage ? this.prevPaneCurrentWidth : this.convertPercentageToPixel(this.prevPaneCurrentWidth) + "px";
        this.nextPaneCurrentWidth = this.updateNextPaneInPercentage ? this.nextPaneCurrentWidth : this.convertPercentageToPixel(this.nextPaneCurrentWidth) + "px";
        this.updatePrePaneInPercentage = false;
        this.updateNextPaneInPercentage = false;
      } else {
        this.prevPaneCurrentWidth = this.prevPaneCurrentWidth + "px";
        this.nextPaneCurrentWidth = this.nextPaneCurrentWidth + "px";
      }
    };
    Splitter2.prototype.addStaticPaneClass = function() {
      if (!this.previousPane.classList.contains(STATIC_PANE) && !(this.previousPane.style.flexBasis === "") && !this.previousPane.classList.contains(EXPAND_PANE)) {
        this.previousPane.classList.add(STATIC_PANE);
      }
      if (!this.nextPane.classList.contains(STATIC_PANE) && !(this.nextPane.style.flexBasis === "") && !this.nextPane.classList.contains(EXPAND_PANE)) {
        this.nextPane.classList.add(STATIC_PANE);
      }
    };
    Splitter2.prototype.validateDraggedPosition = function(draggedPos, prevPaneHeightWidth, nextPaneHeightWidth) {
      var separatorTopLeft = this.orientation === "Horizontal" ? this.currentSeparator.offsetLeft : this.currentSeparator.offsetTop;
      var prePaneRange = separatorTopLeft - prevPaneHeightWidth;
      var nextPaneRange = nextPaneHeightWidth + separatorTopLeft;
      var pane1MinSize = this.getMinMax(this.prevPaneIndex, this.previousPane, "min");
      var pane2MinSize = this.getMinMax(this.nextPaneIndex, this.nextPane, "min");
      var pane1MaxSize = this.getMinMax(this.prevPaneIndex, this.previousPane, "max");
      var pane2MaxSize = this.getMinMax(this.nextPaneIndex, this.nextPane, "max");
      var validatedSize = draggedPos;
      if (draggedPos > nextPaneRange - pane2MinSize) {
        validatedSize = nextPaneRange - pane2MinSize;
      } else if (draggedPos < prePaneRange + pane1MinSize) {
        validatedSize = prePaneRange + pane1MinSize;
      }
      if (!isNullOrUndefined(pane1MaxSize)) {
        if (draggedPos > prePaneRange + pane1MaxSize) {
          validatedSize = prePaneRange + pane1MaxSize;
        }
      } else if (!isNullOrUndefined(pane2MaxSize)) {
        if (draggedPos < nextPaneRange - pane2MaxSize) {
          validatedSize = nextPaneRange - pane2MaxSize;
        }
      }
      return validatedSize;
    };
    Splitter2.prototype.onMouseUp = function(e) {
      removeClass([this.currentSeparator], SPLIT_BAR_ACTIVE);
      this.unwireResizeEvents();
      var eventArgs = {
        event: e,
        element: this.element,
        pane: [this.previousPane, this.nextPane],
        index: [this.prevPaneIndex, this.nextPaneIndex],
        separator: this.currentSeparator,
        paneSize: [this.prePaneDimenson, this.nextPaneDimension]
      };
      for (var i = 0; i < this.element.querySelectorAll("iframe").length; i++) {
        this.element.querySelectorAll("iframe")[i].style.pointerEvents = "auto";
      }
      this.trigger("resizeStop", eventArgs);
      if (this.enablePersistence) {
        var paneValues = this.paneSettings;
        paneValues[this.getPreviousPaneIndex()].size = this.allPanes[this.getPreviousPaneIndex()].style.flexBasis;
        paneValues[this.getNextPaneIndex()].size = this.allPanes[this.getNextPaneIndex()].style.flexBasis;
        this.setProperties({ "paneSettings": paneValues }, true);
      }
    };
    Splitter2.prototype.panesDimension = function(index, child) {
      var childCount = child.length;
      var size;
      parseInt(this.getHeight(this.element), 10);
      if (!isNullOrUndefined(this.paneSettings[index])) {
        if (!isNullOrUndefined(this.paneSettings[index].size)) {
          size = this.paneSettings[index].size;
          if (index < childCount) {
            setStyleAttribute(child[index], { "flex-basis": size, "order": index * 2 });
            if (index < childCount - 1 && this.paneSettings[index].size !== "") {
              addClass([child[index]], STATIC_PANE);
            } else if (!this.sizeFlag) {
              child[index].style.flexBasis = null;
            }
            if (index === childCount - 1 && this.sizeFlag && this.paneSettings[index].size !== "") {
              addClass([child[index]], STATIC_PANE);
            }
          }
        } else {
          this.sizeFlag = true;
          setStyleAttribute(child[index], { "order": index * 2 });
        }
      } else {
        setStyleAttribute(child[index], { "order": index * 2 });
      }
      this.paneOrder.push(index * 2);
    };
    Splitter2.prototype.setTemplate = function(template, toElement) {
      toElement.innerHTML = "";
      template = typeof template === "string" ? this.sanitizeHelper(template) : template;
      this.templateCompile(toElement, template);
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Splitter2.prototype.templateCompile = function(ele, cnt) {
      var blazorContain = Object.keys(window);
      var tempEle = this.createElement("div");
      this.compileElement(tempEle, cnt, "content");
      if (tempEle.childNodes.length !== 0) {
        [].slice.call(tempEle.childNodes).forEach(function(childEle) {
          ele.appendChild(childEle);
        });
      }
    };
    Splitter2.prototype.compileElement = function(ele, val, prop) {
      var blazorContain = Object.keys(window);
      if (typeof val === "string") {
        if (val[0] === "." || val[0] === "#") {
          var eleVal = document.querySelector(val);
          if (!isNullOrUndefined(eleVal)) {
            this.templateElement.push(eleVal);
            if (eleVal.style.display === "none") {
              eleVal.style.removeProperty("display");
            }
            if (eleVal.getAttribute("style") === "") {
              eleVal.removeAttribute("style");
            }
            ele.appendChild(eleVal);
            return;
          } else {
            val = val.trim();
          }
        } else {
          val = val.trim();
        }
      }
      var templateFn;
      if (!isNullOrUndefined(val.outerHTML)) {
        templateFn = compile(val.outerHTML);
      } else {
        templateFn = compile(val);
      }
      var templateFUN;
      if (!isNullOrUndefined(templateFn)) {
        templateFUN = templateFn({}, this, prop, this.element.id + "content" + this.allPanes.length.toString(), true);
      }
      if (!isNullOrUndefined(templateFn) && templateFUN && templateFUN.length > 0) {
        [].slice.call(templateFUN).forEach(function(el) {
          ele.appendChild(el);
        });
      }
    };
    Splitter2.prototype.paneCollapsible = function(pane, index) {
      this.paneSettings[index].collapsible ? addClass([pane], COLLAPSIBLE) : removeClass([pane], COLLAPSIBLE);
    };
    Splitter2.prototype.createSplitPane = function(target) {
      var childCount = target.children.length;
      for (var i = 0; i < this.paneSettings.length; i++) {
        if (childCount < this.paneSettings.length) {
          var childElement = this.createElement("div");
          this.element.appendChild(childElement);
          childCount = childCount + 1;
        }
      }
      childCount = target.children.length;
      var child = [].slice.call(target.children);
      this.sizeFlag = false;
      if (childCount > 0) {
        for (var i = 0; i < childCount; i++) {
          if (child[i].nodeName === "DIV" || child[i].nodeName === "SPAN") {
            this.allPanes.push(child[i]);
            if (this.orientation === "Horizontal") {
              addClass([child[i]], [PANE, SPLIT_H_PANE, SCROLL_PANE]);
              this.panesDimension(i, child);
            } else {
              addClass([child[i]], [PANE, SPLIT_V_PANE, SCROLL_PANE]);
              this.panesDimension(i, child);
            }
            if (!isNullOrUndefined(this.paneSettings[i]) && !isNullOrUndefined(this.paneSettings[i].content)) {
              this.setTemplate(this.paneSettings[i].content, child[i]);
            }
            if (!isNullOrUndefined(this.paneSettings[i]) && this.paneSettings[i].cssClass) {
              this.setCssClass(child[i], this.paneSettings[i].cssClass);
            }
            if (!isNullOrUndefined(this.paneSettings[i])) {
              this.paneCollapsible(child[i], i);
            }
          }
        }
      }
    };
    Splitter2.prototype.expand = function(index) {
      this.collapsedOnchange(index);
      this.updatePaneSettings(index, false);
    };
    Splitter2.prototype.collapse = function(index) {
      this.isCollapsed(index);
      this.updatePaneSettings(index, true);
    };
    Splitter2.prototype.destroy = function() {
      if (!this.isDestroyed) {
        _super.prototype.destroy.call(this);
        EventHandler.remove(document, "touchstart click", this.onDocumentClick);
        this.element.ownerDocument.defaultView.removeEventListener("resize", this.onReportWindowSize, true);
        while (this.element.attributes.length > 0) {
          this.element.removeAttribute(this.element.attributes[0].name);
        }
        this.element.innerHTML = this.wrapper.innerHTML;
        for (var i = 0; i < this.wrapper.attributes.length; i++) {
          this.element.setAttribute(this.wrapper.attributes[i].name, this.wrapper.attributes[i].value);
        }
        if (this.refreshing) {
          addClass([this.element], ["e-control", "e-lib", ROOT2]);
          this.allBars = [];
          this.allPanes = [];
        }
        this.restoreElem();
        if (this.isReact) {
          this.clearTemplate();
        }
      }
    };
    Splitter2.prototype.restoreElem = function() {
      if (this.templateElement.length > 0) {
        for (var i = 0; i < this.templateElement.length; i++) {
          this.templateElement[i].style.display = "none";
          document.body.appendChild(this.templateElement[i]);
        }
      }
    };
    Splitter2.prototype.addPaneClass = function(pane) {
      this.orientation === "Horizontal" ? addClass([pane], [PANE, SPLIT_H_PANE, SCROLL_PANE]) : addClass([pane], [PANE, SPLIT_V_PANE, SCROLL_PANE]);
      return pane;
    };
    Splitter2.prototype.removePaneOrders = function(paneClass) {
      var childNodes = this.element.childNodes;
      var panes = [];
      for (var i = 0; childNodes.length < 0; i++) {
        if (childNodes[i].classList.contains(paneClass)) {
          panes.push(childNodes[i]);
        }
      }
      for (var i = 0; i < panes.length; i++) {
        panes[i].style.removeProperty("order");
      }
    };
    Splitter2.prototype.setPaneOrder = function() {
      for (var i = 0; i < this.allPanes.length; i++) {
        this.panesDimension(i, this.allPanes);
      }
    };
    Splitter2.prototype.removeSeparator = function() {
      for (var i = 0; i < this.allBars.length; i++) {
        detach(this.allBars[i]);
      }
      this.allBars = [];
    };
    Splitter2.prototype.updatePanes = function() {
      this.setPaneOrder();
      this.removeSeparator();
      this.addSeparator(this.element);
    };
    Splitter2.prototype.addPane = function(paneProperties, index) {
      var newPane = this.createElement("div");
      newPane = this.addPaneClass(newPane);
      index = index > this.allPanes.length + 1 ? this.allPanes.length : index;
      var paneDetails = {
        size: isNullOrUndefined(paneProperties.size) ? "" : paneProperties.size,
        min: isNullOrUndefined(paneProperties.min) ? null : paneProperties.min,
        max: isNullOrUndefined(paneProperties.max) ? null : paneProperties.max,
        content: isNullOrUndefined(paneProperties.content) ? "" : paneProperties.content,
        resizable: isNullOrUndefined(paneProperties.resizable) ? true : paneProperties.resizable,
        collapsible: isNullOrUndefined(paneProperties.collapsible) ? false : paneProperties.collapsible,
        collapsed: isNullOrUndefined(paneProperties.collapsed) ? false : paneProperties.collapsed,
        cssClass: isNullOrUndefined(paneProperties.cssClass) ? "" : paneProperties.cssClass
      };
      this.paneSettings.splice(index, 0, paneDetails);
      this.setProperties({ "paneSettings": this.paneSettings }, true);
      if (this.orientation === "Horizontal") {
        this.element.insertBefore(newPane, this.element.querySelectorAll("." + SPLIT_H_PANE)[index]);
        this.removePaneOrders(SPLIT_H_PANE);
      } else {
        this.element.insertBefore(newPane, this.element.querySelectorAll("." + SPLIT_V_PANE)[index]);
        this.removePaneOrders(SPLIT_V_PANE);
      }
      this.allPanes.splice(index, 0, newPane);
      this.updatePanes();
      this.setTemplate(this.paneSettings[index].content, newPane);
      this.setCssClass(this.allPanes[index], paneProperties.cssClass);
      this.allPanes[this.allPanes.length - 1].classList.remove(STATIC_PANE);
    };
    Splitter2.prototype.removePane = function(index) {
      index = index > this.allPanes.length + 1 ? this.allPanes.length : index;
      var elementClass = this.orientation === "Horizontal" ? SPLIT_H_PANE : SPLIT_V_PANE;
      if (isNullOrUndefined(this.element.querySelectorAll("." + elementClass)[index])) {
        return;
      }
      detach(this.element.querySelectorAll("." + elementClass)[index]);
      this.allPanes.splice(index, 1);
      this.removePaneOrders(elementClass);
      this.updatePanes();
      this.paneSettings.splice(index, 1);
      this.setProperties({ "paneSettings": this.paneSettings }, true);
      if (this.allPanes.length > 0) {
        this.allPanes[this.allPanes.length - 1].classList.remove(STATIC_PANE);
      }
    };
    __decorate10([
      Property("100%")
    ], Splitter2.prototype, "height", void 0);
    __decorate10([
      Property(false)
    ], Splitter2.prototype, "enableReversePanes", void 0);
    __decorate10([
      Property("100%")
    ], Splitter2.prototype, "width", void 0);
    __decorate10([
      Property(false)
    ], Splitter2.prototype, "enablePersistence", void 0);
    __decorate10([
      Collection([], PaneProperties)
    ], Splitter2.prototype, "paneSettings", void 0);
    __decorate10([
      Property("Horizontal")
    ], Splitter2.prototype, "orientation", void 0);
    __decorate10([
      Property("")
    ], Splitter2.prototype, "cssClass", void 0);
    __decorate10([
      Property(true)
    ], Splitter2.prototype, "enabled", void 0);
    __decorate10([
      Property(true)
    ], Splitter2.prototype, "enableHtmlSanitizer", void 0);
    __decorate10([
      Property(null)
    ], Splitter2.prototype, "separatorSize", void 0);
    __decorate10([
      Event()
    ], Splitter2.prototype, "beforeSanitizeHtml", void 0);
    __decorate10([
      Event()
    ], Splitter2.prototype, "created", void 0);
    __decorate10([
      Event()
    ], Splitter2.prototype, "resizeStart", void 0);
    __decorate10([
      Event()
    ], Splitter2.prototype, "resizing", void 0);
    __decorate10([
      Event()
    ], Splitter2.prototype, "resizeStop", void 0);
    __decorate10([
      Event()
    ], Splitter2.prototype, "beforeCollapse", void 0);
    __decorate10([
      Event()
    ], Splitter2.prototype, "beforeExpand", void 0);
    __decorate10([
      Event()
    ], Splitter2.prototype, "collapsed", void 0);
    __decorate10([
      Event()
    ], Splitter2.prototype, "expanded", void 0);
    Splitter2 = __decorate10([
      NotifyPropertyChanges
    ], Splitter2);
    return Splitter2;
  }(Component)
);

// node_modules/@syncfusion/ej2-layouts/src/dashboard-layout/dashboard-layout.js
var __extends14 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate11 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var preventSelect = "e-prevent";
var dragging2 = "e-dragging";
var dragRestrict = "e-drag-restrict";
var drag = "e-drag";
var resize = "e-resize";
var resizeicon = "e-dl-icon";
var responsive = "e-responsive";
var east = "e-east";
var west = "e-west";
var north = "e-north";
var south = "e-south";
var single = "e-single";
var double = "e-double";
var northEast = "e-north-east";
var southEast = "e-south-east";
var northWest = "e-north-west";
var southWest = "e-south-west";
var panel = "e-panel";
var panelContent = "e-panel-content";
var panelContainer = "e-panel-container";
var disable = "e-disabled";
var header = "e-panel-header";
var panelTransition = "e-panel-transition";
var Panel = (
  /** @class */
  function(_super) {
    __extends14(Panel2, _super);
    function Panel2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate11([
      Property("")
    ], Panel2.prototype, "id", void 0);
    __decorate11([
      Property("")
    ], Panel2.prototype, "cssClass", void 0);
    __decorate11([
      Property("")
    ], Panel2.prototype, "header", void 0);
    __decorate11([
      Property("")
    ], Panel2.prototype, "content", void 0);
    __decorate11([
      Property(true)
    ], Panel2.prototype, "enabled", void 0);
    __decorate11([
      Property(0)
    ], Panel2.prototype, "row", void 0);
    __decorate11([
      Property(0)
    ], Panel2.prototype, "col", void 0);
    __decorate11([
      Property(1)
    ], Panel2.prototype, "sizeX", void 0);
    __decorate11([
      Property(1)
    ], Panel2.prototype, "sizeY", void 0);
    __decorate11([
      Property(1)
    ], Panel2.prototype, "minSizeY", void 0);
    __decorate11([
      Property(1)
    ], Panel2.prototype, "minSizeX", void 0);
    __decorate11([
      Property(null)
    ], Panel2.prototype, "maxSizeY", void 0);
    __decorate11([
      Property(null)
    ], Panel2.prototype, "maxSizeX", void 0);
    __decorate11([
      Property(1e3)
    ], Panel2.prototype, "zIndex", void 0);
    return Panel2;
  }(ChildProperty)
);
var DashboardLayout = (
  /** @class */
  function(_super) {
    __extends14(DashboardLayout2, _super);
    function DashboardLayout2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.rows = 1;
      _this.panelID = 0;
      _this.movePanelCalled = false;
      _this.resizeCalled = false;
      _this.mOffX = 0;
      _this.mOffY = 0;
      _this.maxTop = 9999;
      _this.maxRows = 100;
      _this.mouseX = 0;
      _this.mouseY = 0;
      _this.minTop = 0;
      _this.minLeft = 0;
      _this.isInlineRendering = false;
      _this.removeAllCalled = false;
      _this.isPanelRemoved = false;
      _this.panelsSizeY = 0;
      _this.resizeHeight = false;
      _this.eventVar = false;
      setValue("mergePersistData", _this.mergePersistPanelData, _this);
      return _this;
    }
    DashboardLayout2.prototype.preRender = function() {
      this.panelCollection = [];
      this.sortedArray = [];
      this.gridPanelCollection = [];
      this.overlapElement = [];
      this.overlapElementClone = [];
      this.overlapSubElementClone = [];
      this.collisionChecker = {};
      this.dragCollection = [];
      this.elementRef = { top: "", left: "", height: "", width: "" };
      this.dimensions = [];
      this.allItems = [];
      this.oldRowCol = {};
      this.availableClasses = [];
      this.setOldRowCol();
      this.calculateCellSize();
      this.contentTemplateChild = [].slice.call(this.element.children);
    };
    DashboardLayout2.prototype.setOldRowCol = function() {
      for (var i = 0; i < this.panels.length; i++) {
        if (!this.panels[i].id) {
          this.panelPropertyChange(this.panels[i], { id: "layout_" + this.panelID.toString() });
          this.panelID = this.panelID + 1;
        }
        this.oldRowCol[this.panels[i].id] = { row: this.panels[i].row, col: this.panels[i].col };
      }
    };
    DashboardLayout2.prototype.createPanelElement = function(cssClass, idValue) {
      var ele = this.createElement("div");
      if (cssClass && cssClass.length > 0) {
        addClass([ele], cssClass);
      }
      if (idValue) {
        ele.setAttribute("id", idValue);
      }
      return ele;
    };
    DashboardLayout2.prototype.render = function() {
      this.initialize();
      this.isRenderComplete = true;
      if (this.showGridLines && !this.checkMediaQuery()) {
        this.initGridLines();
      }
      this.updateDragArea();
      this.renderComplete();
      this.renderReactTemplates();
    };
    DashboardLayout2.prototype.initGridLines = function() {
      this.table = document.createElement("table");
      var tbody = document.createElement("tbody");
      this.table.classList.add("e-dashboard-gridline-table");
      for (var i = 0; i < this.maxRow(); i++) {
        var tr = document.createElement("tr");
        for (var j = 0; j < this.columns; j++) {
          var td = document.createElement("td");
          td.classList.add("e-dashboard-gridline");
          this.setAttributes({ value: { row: i.toString(), col: j.toString(), sizeX: "1", sizeY: "1" } }, td);
          this.setPanelPosition(td, i, j);
          this.setHeightAndWidth(td, { row: i, col: j, sizeX: 1, sizeY: 1 });
          tr.appendChild(td);
        }
        tbody.appendChild(tr);
      }
      this.table.appendChild(tbody);
      this.element.appendChild(this.table);
      this.renderReactTemplates();
    };
    DashboardLayout2.prototype.initialize = function() {
      this.updateRowHeight();
      if (this.element.childElementCount > 0 && this.element.querySelectorAll(".e-panel").length > 0) {
        var panelElements = [];
        this.setProperties({ panels: [] }, true);
        this.isInlineRendering = true;
        for (var i = 0; i < this.element.querySelectorAll(".e-panel").length; i++) {
          panelElements.push(this.element.querySelectorAll(".e-panel")[i]);
        }
        for (var i = 0; i < panelElements.length; i++) {
          var panelElement = panelElements[i];
          if (this.enableRtl) {
            addClass([panelElement], "e-rtl");
          }
          this.getInlinePanels(panelElement);
          this.maxCol();
          this.maxRow();
        }
        for (var i = 0; i < this.panels.length; i++) {
          var panelElement = this.element.querySelector("#" + this.panels[i].id);
          this.setMinMaxValues(this.panels[i]);
          if (this.maxColumnValue < this.panels[i].col || this.maxColumnValue < this.panels[i].col + this.panels[i].sizeX) {
            var colValue = this.maxColumnValue - this.panels[i].sizeX;
            this.panelPropertyChange(this.panels[i], { col: colValue < 0 ? 0 : colValue });
          }
          this.setXYAttributes(panelElement, this.panels[i]);
          var panel_1 = this.renderPanels(panelElement, this.panels[i], this.panels[i].id, false);
          this.panelCollection.push(panel_1);
          this.setHeightAndWidth(panelElement, this.panels[i]);
          this.tempObject = this;
          if (this.mediaQuery && !window.matchMedia("(" + this.mediaQuery + ")").matches) {
            this.setPanelPosition(panelElement, this.panels[i].row, this.panels[i].col);
            this.mainElement = panelElement;
            this.updatePanelLayout(panelElement, this.panels[i]);
            this.mainElement = null;
          }
          this.setClasses([panelElement]);
        }
        this.updateOldRowColumn();
        if (this.checkMediaQuery()) {
          this.checkMediaQuerySizing();
        }
      } else {
        this.renderDashBoardCells(this.panels);
      }
      if (this.allowDragging && (this.mediaQuery ? !window.matchMedia("(" + this.mediaQuery + ")").matches : true)) {
        this.enableDraggingContent(this.panelCollection);
      }
      this.sortedPanel();
      this.bindEvents();
      this.updatePanels();
      this.updateCloneArrayObject();
      this.checkColumnValue = this.maxColumnValue;
      if (!this.checkMediaQuery()) {
        this.panelResponsiveUpdate();
      }
      this.setEnableRtl();
    };
    DashboardLayout2.prototype.checkMediaQuery = function() {
      return this.mediaQuery && window.matchMedia("(" + this.mediaQuery + ")").matches;
    };
    DashboardLayout2.prototype.calculateCellSize = function() {
      this.cellSize = [];
      if (this.checkMediaQuery()) {
        this.cellSize[1] = this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio;
      } else {
        this.cellSize[0] = this.element.parentElement && this.element.parentElement.offsetWidth;
        this.cellSize[0] = this.element.parentElement && (this.element.parentElement.offsetWidth - (this.maxCol() - 1) * this.cellSpacing[0]) / this.maxCol();
        this.cellSize[1] = this.cellSize[0] / this.cellAspectRatio;
      }
    };
    DashboardLayout2.prototype.maxRow = function(recheck) {
      var maxRow = 1;
      if (this.rows > 1 && isNullOrUndefined(recheck)) {
        maxRow = this.rows;
        return maxRow;
      }
      for (var i = 0; i < this.panels.length; i++) {
        if (this.panels[i].sizeY + this.panels[i].row > maxRow) {
          maxRow = this.panels[i].sizeY + this.panels[i].row;
        }
      }
      if (this.panels.length === 0) {
        maxRow = this.columns;
      }
      return maxRow;
    };
    DashboardLayout2.prototype.maxCol = function() {
      var maxCol = 1;
      maxCol = this.columns;
      this.maxColumnValue = maxCol;
      return maxCol;
    };
    DashboardLayout2.prototype.updateOldRowColumn = function() {
      for (var i = 0; i < this.panels.length; i++) {
        var id = this.panels[i].id;
        if (document.getElementById(id)) {
          var row = parseInt(document.getElementById(id).getAttribute("data-row"), 10);
          var col = parseInt(document.getElementById(id).getAttribute("data-col"), 10);
          this.oldRowCol[this.panels[i].id] = { row, col };
        } else {
          continue;
        }
      }
    };
    DashboardLayout2.prototype.createSubElement = function(cssClass, idValue, className) {
      var element = this.createElement("div");
      if (className) {
        addClass([element], [className]);
      }
      if (cssClass && cssClass.length > 0) {
        addClass([element], cssClass);
      }
      if (idValue) {
        element.setAttribute("id", idValue);
      }
      return element;
    };
    DashboardLayout2.prototype.templateParser = function(template) {
      if (template) {
        try {
          if (typeof template !== "function" && document.querySelectorAll(template).length) {
            return compile(document.querySelector(template).innerHTML.trim());
          } else {
            return compile(template);
          }
        } catch (error) {
          var sanitizedValue = SanitizeHtmlHelper.sanitize(template);
          return compile(this.enableHtmlSanitizer && typeof template === "string" ? sanitizedValue : template);
        }
      }
      return void 0;
    };
    DashboardLayout2.prototype.renderTemplate = function(content, appendElement, type, isStringTemplate, prop) {
      var templateFn = this.templateParser(content);
      var templateElements = [];
      if ((content[0] === "." || content[0] === "#") && document.querySelector(content).tagName !== "SCRIPT") {
        var eleVal = document.querySelector(content);
        if (!isNullOrUndefined(eleVal)) {
          if (eleVal.style.display === "none") {
            eleVal.style.removeProperty("display");
          }
          if (eleVal.getAttribute("style") === "") {
            eleVal.removeAttribute("style");
          }
          appendElement.appendChild(eleVal);
          return;
        } else {
          content = content.trim();
        }
      } else {
        var compilerFn = templateFn({}, this, prop, type, isStringTemplate, null, appendElement);
        if (compilerFn) {
          for (var _i = 0, compilerFn_1 = compilerFn; _i < compilerFn_1.length; _i++) {
            var item = compilerFn_1[_i];
            templateElements.push(item);
          }
          append([].slice.call(templateElements), appendElement);
        }
      }
    };
    DashboardLayout2.prototype.renderPanels = function(cellElement, panelModel, panelId, isStringTemplate) {
      addClass([cellElement], [panel, panelTransition]);
      var cssClass = panelModel.cssClass ? panelModel.cssClass.split(" ") : null;
      this.panelContent = cellElement.querySelector(".e-panel-container") ? cellElement.querySelector(".e-panel-container") : this.createSubElement(cssClass, cellElement.id + "_content", panelContainer);
      cellElement.appendChild(this.panelContent);
      if (!panelModel.enabled) {
        this.disablePanel(cellElement);
      }
      if (panelModel.header) {
        var headerTemplateElement = cellElement.querySelector(".e-panel-header") ? cellElement.querySelector(".e-panel-header") : this.createSubElement([], cellElement.id + "template", "");
        addClass([headerTemplateElement], [header]);
        if (!cellElement.querySelector(".e-panel-header")) {
          var id = this.element.id + "HeaderTemplate" + panelId;
          this.renderTemplate(panelModel.header, headerTemplateElement, id, isStringTemplate, "header");
          this.panelContent.appendChild(headerTemplateElement);
          this.renderReactTemplates();
        }
      }
      if (panelModel.content) {
        var cssClass_1 = panelModel.cssClass ? panelModel.cssClass.split(" ") : null;
        this.panelBody = cellElement.querySelector(".e-panel-content") ? cellElement.querySelector(".e-panel-content") : this.createSubElement(cssClass_1, cellElement.id + "_body", panelContent);
        var headerHeight = this.panelContent.querySelector(".e-panel-header") ? window.getComputedStyle(this.panelContent.querySelector(".e-panel-header")).height : "0px";
        var contentHeightValue = "calc( 100% - " + headerHeight + ")";
        setStyleAttribute(this.panelBody, { height: contentHeightValue });
        if (!cellElement.querySelector(".e-panel-content")) {
          var id = this.element.id + "ContentTemplate" + panelId;
          this.renderTemplate(panelModel.content, this.panelBody, id, isStringTemplate, "content");
          this.panelContent.appendChild(this.panelBody);
          this.renderReactTemplates();
        }
      }
      return cellElement;
    };
    DashboardLayout2.prototype.disablePanel = function(panelElement) {
      addClass([panelElement], [disable]);
    };
    DashboardLayout2.prototype.getInlinePanels = function(panelElement) {
      var model = {
        sizeX: panelElement.hasAttribute("data-sizex") ? parseInt(panelElement.getAttribute("data-sizex"), 10) : 1,
        sizeY: panelElement.hasAttribute("data-sizey") ? parseInt(panelElement.getAttribute("data-sizey"), 10) : 1,
        minSizeX: panelElement.hasAttribute("data-minsizex") ? parseInt(panelElement.getAttribute("data-minsizex"), 10) : 1,
        minSizeY: panelElement.hasAttribute("data-minsizey") ? parseInt(panelElement.getAttribute("data-minsizey"), 10) : 1,
        maxSizeX: panelElement.hasAttribute("data-maxsizex") ? parseInt(panelElement.getAttribute("data-maxsizex"), 10) : null,
        maxSizeY: panelElement.hasAttribute("data-maxsizey") ? parseInt(panelElement.getAttribute("data-maxsizey"), 10) : null,
        row: panelElement.hasAttribute("data-row") ? parseInt(panelElement.getAttribute("data-row"), 10) : 0,
        col: panelElement.hasAttribute("data-col") ? parseInt(panelElement.getAttribute("data-col"), 10) : 0,
        id: panelElement.getAttribute("id"),
        zIndex: panelElement.hasAttribute("data-zindex") ? parseInt(panelElement.getAttribute("data-zIndex"), 10) : 1e3,
        header: panelElement.querySelector(".e-panel-header") && ".e-panel-header",
        content: panelElement.querySelector(".e-panel-content") && ".e-panel-content"
      };
      if (!model.id) {
        model.id = "layout_" + this.panelID.toString();
        panelElement.setAttribute("id", model.id);
        this.panelID = this.panelID + 1;
      }
      if (isUndefined(model.enabled)) {
        model.enabled = true;
      }
      panelElement.style.zIndex = "" + model.zIndex;
      var panelProp = new Panel(this, "panels", model, true);
      this.panels.push(panelProp);
      this.oldRowCol[model.id] = { row: model.row, col: model.col };
    };
    DashboardLayout2.prototype.resizeEvents = function() {
      if (this.allowResizing) {
        var panelElements = this.element.querySelectorAll(".e-panel .e-panel-container .e-resize");
        for (var i = 0; i < panelElements.length; i++) {
          var eventName = Browser.info.name === "msie" ? "mousedown pointerdown" : "mousedown";
          EventHandler.add(panelElements[i], eventName, this.downResizeHandler, this);
          if (Browser.info.name !== "msie") {
            EventHandler.add(panelElements[i], "touchstart", this.touchDownResizeHandler, this);
          }
        }
      }
    };
    DashboardLayout2.prototype.bindEvents = function() {
      this.refreshListener = this.refresh.bind(this);
      EventHandler.add(window, "resize", this.refreshListener);
      this.resizeEvents();
    };
    DashboardLayout2.prototype.downResizeHandler = function(e) {
      var el = closest(e.currentTarget, ".e-panel");
      for (var i = 0; this.panels.length > i; i++) {
        if (this.panels[i].enabled && this.panels[i].id === el.id) {
          this.downHandler(e);
          this.lastMouseX = e.pageX;
          this.lastMouseY = e.pageY;
          var moveEventName = Browser.info.name === "msie" ? "mousemove pointermove" : "mousemove";
          var upEventName = Browser.info.name === "msie" ? "mouseup pointerup" : "mouseup";
          if (!this.isMouseMoveBound) {
            EventHandler.add(document, moveEventName, this.moveResizeHandler, this);
            this.isMouseMoveBound = true;
          }
          if (!this.isMouseUpBound) {
            EventHandler.add(document, upEventName, this.upResizeHandler, this);
            this.isMouseUpBound = true;
          }
        }
      }
    };
    DashboardLayout2.prototype.downHandler = function(e) {
      this.resizeCalled = false;
      this.panelsInitialModel = this.cloneModels(this.panels);
      var el = closest(e.currentTarget, ".e-panel");
      var args = { event: e, element: el, isInteracted: true };
      this.trigger("resizeStart", args);
      this.downTarget = e.currentTarget;
      this.shadowEle = document.createElement("div");
      this.shadowEle.classList.add("e-holder");
      addClass([this.element], [preventSelect]);
      this.element.appendChild(this.shadowEle);
      this.renderReactTemplates();
      this.elementX = parseFloat(el.style.left);
      this.elementY = parseFloat(el.style.top);
      this.elementWidth = el.offsetWidth;
      this.elementHeight = el.offsetHeight;
      this.originalWidth = this.getCellInstance(el.id).sizeX;
      this.originalHeight = this.getCellInstance(el.id).sizeY;
      this.previousRow = this.getCellInstance(el.id).row;
    };
    DashboardLayout2.prototype.touchDownResizeHandler = function(e) {
      this.downHandler(e);
      this.lastMouseX = e.changedTouches[0].pageX;
      this.lastMouseY = e.changedTouches[0].pageY;
      if (!this.isMouseMoveBound) {
        EventHandler.add(document, "touchmove", this.touchMoveResizeHandler, this);
        this.isMouseMoveBound = true;
      }
      if (!this.isMouseUpBound) {
        EventHandler.add(document, "touchend", this.upResizeHandler, this);
        this.isMouseUpBound = true;
      }
    };
    DashboardLayout2.prototype.getCellSize = function() {
      return [this.cellSize[0], this.cellSize[1]];
    };
    DashboardLayout2.prototype.updateMaxTopLeft = function(e) {
      this.moveTarget = this.downTarget;
      var el = closest(this.moveTarget, ".e-panel");
      var args = { event: e, element: el, isInteracted: true };
      this.trigger("resize", args);
    };
    DashboardLayout2.prototype.updateResizeElement = function(el) {
      this.maxLeft = this.element.offsetWidth - 1;
      this.maxTop = this.cellSize[1] * this.maxRows - 1;
      removeClass([el], "e-panel-transition");
      addClass([el], [dragging2]);
      var handleArray = [east, west, north, south, southEast, northEast, northWest, southWest];
      for (var i = 0; i < this.moveTarget.classList.length; i++) {
        if (handleArray.indexOf(this.moveTarget.classList[i]) !== -1) {
          this.handleClass = this.moveTarget.classList[i];
        }
      }
    };
    DashboardLayout2.prototype.moveResizeHandler = function(e) {
      this.updateMaxTopLeft(e);
      var el = closest(this.moveTarget, ".e-panel");
      if (this.lastMouseX === e.pageX || this.lastMouseY === e.pageY) {
        return;
      }
      this.updateResizeElement(el);
      var panelModel = this.getCellInstance(el.getAttribute("id"));
      this.mouseX = e.pageX;
      this.mouseY = e.pageY;
      var diffY = this.mouseY - this.lastMouseY + this.mOffY;
      var diffX = this.mouseX - this.lastMouseX + this.mOffX;
      this.mOffX = this.mOffY = 0;
      this.lastMouseY = this.mouseY;
      this.lastMouseX = this.mouseX;
      this.resizingPanel(el, panelModel, diffX, diffY);
    };
    DashboardLayout2.prototype.touchMoveResizeHandler = function(e) {
      this.updateMaxTopLeft(e);
      var el = closest(this.moveTarget, ".e-panel");
      if (this.lastMouseX === e.changedTouches[0].pageX || this.lastMouseY === e.changedTouches[0].pageY) {
        return;
      }
      this.updateResizeElement(el);
      var panelModel = this.getCellInstance(el.getAttribute("id"));
      this.mouseX = e.changedTouches[0].pageX;
      this.mouseY = e.changedTouches[0].pageY;
      var diffX = this.mouseX - this.lastMouseX + this.mOffX;
      var diffY = this.mouseY - this.lastMouseY + this.mOffY;
      this.mOffX = this.mOffY = 0;
      this.lastMouseX = this.mouseX;
      this.lastMouseY = this.mouseY;
      this.resizingPanel(el, panelModel, diffX, diffY);
    };
    DashboardLayout2.prototype.resizingPanel = function(el, panelModel, currentX, currentY) {
      var oldSizeX = this.getCellInstance(el.id).sizeX;
      var oldSizeY = this.getCellInstance(el.id).sizeY;
      var dY = currentY;
      var dX = currentX;
      if (this.handleClass.indexOf("north") >= 0) {
        if (this.elementHeight - dY < this.getMinHeight(panelModel)) {
          currentY = this.elementHeight - this.getMinHeight(panelModel);
          this.mOffY = dY - currentY;
        } else if (panelModel.maxSizeY && this.elementHeight - dY > this.getMaxHeight(panelModel)) {
          currentY = this.elementHeight - this.getMaxHeight(panelModel);
          this.mOffY = dY - currentY;
        } else if (this.elementY + dY < this.minTop) {
          currentY = this.minTop - this.elementY;
          this.mOffY = dY - currentY;
        }
        this.elementY += currentY;
        this.elementHeight -= currentY;
      }
      if (this.handleClass.indexOf("south") >= 0) {
        if (this.elementHeight + dY < this.getMinHeight(panelModel)) {
          currentY = this.getMinHeight(panelModel) - this.elementHeight;
          this.mOffY = dY - currentY;
        } else if (panelModel.maxSizeY && this.elementHeight + dY > this.getMaxHeight(panelModel)) {
          currentY = this.getMaxHeight(panelModel) - this.elementHeight;
          this.mOffY = dY - currentY;
        }
        this.elementHeight += currentY;
      }
      if (this.handleClass.indexOf("west") >= 0) {
        if (this.elementWidth - dX < this.getMinWidth(panelModel)) {
          currentX = this.elementWidth - this.getMinWidth(panelModel);
          this.mOffX = dX - currentX;
        } else if (panelModel.maxSizeX && this.elementWidth - dX > this.getMaxWidth(panelModel)) {
          currentX = this.elementWidth - this.getMaxWidth(panelModel);
          this.mOffX = dX - currentX;
        } else if (this.elementX + dX < this.minLeft) {
          currentX = this.minLeft - this.elementX;
          this.mOffX = dX - currentX;
        }
        this.elementX += currentX;
        this.elementWidth -= currentX;
      }
      if (this.handleClass.indexOf("east") >= 0) {
        if (this.elementWidth + dX < this.getMinWidth(panelModel)) {
          currentX = this.getMinWidth(panelModel) - this.elementWidth;
          this.mOffX = dX - currentX;
        } else if (panelModel.maxSizeX && this.elementWidth + dX > this.getMaxWidth(panelModel)) {
          currentX = this.getMaxWidth(panelModel) - this.elementWidth;
          this.mOffX = dX - currentX;
        }
        var initialWidth = this.elementWidth;
        this.elementWidth += currentX;
        var newSizeX = this.pixelsToColumns(this.elementWidth - panelModel.sizeX * this.cellSpacing[1], true);
        if (this.columns < panelModel.col + newSizeX) {
          this.elementWidth = initialWidth;
        }
      }
      el.style.top = this.elementY + "px";
      el.style.left = this.elementX + "px";
      el.style.width = this.elementWidth + "px";
      el.style.height = this.elementHeight + "px";
      var item = this.getResizeRowColumn(panelModel);
      if (item.col + item.sizeX > this.columns) {
        this.panelPropertyChange(item, { sizeX: item.sizeX - 1 });
      }
      this.shadowEle.style.top = item.row * this.getCellSize()[1] + item.row * this.cellSpacing[1] + "px";
      if (this.handleClass.indexOf("west") >= 0) {
        this.shadowEle.style.left = item.col * this.getCellSize()[0] + (item.col - 1) * this.cellSpacing[0] + "px";
      } else {
        this.shadowEle.style.left = item.col * this.getCellSize()[0] + item.col * this.cellSpacing[0] + "px";
      }
      this.shadowEle.style.height = item.sizeY * (this.getCellSize()[1] + this.cellSpacing[1]) + "px";
      this.shadowEle.style.width = item.sizeX * (this.getCellSize()[0] + this.cellSpacing[0]) + "px";
      if (oldSizeX !== item.sizeX || oldSizeY !== item.sizeY) {
        oldSizeX = item.sizeX;
        oldSizeY = item.sizeY;
        var model = this.getCellInstance(el.id);
        var value = {
          attributes: {
            row: model.row.toString(),
            col: model.col.toString(),
            sizeX: model.sizeX.toString(),
            sizeY: model.sizeY.toString()
          }
        };
        this.setAttributes(value, el);
        this.mainElement = el;
        this.checkCollision = [];
        this.updatePanelLayout(el, this.getCellInstance(el.id));
        this.updateOldRowColumn();
        this.sortedPanel();
      }
    };
    DashboardLayout2.prototype.upResizeHandler = function(e) {
      if (isNullOrUndefined(this.downTarget)) {
        return;
      }
      this.upTarget = this.downTarget;
      var el = closest(this.upTarget, ".e-panel");
      var args = { event: e, element: el, isInteracted: true };
      if (el) {
        addClass([el], "e-panel-transition");
        var moveEventName = Browser.info.name === "msie" ? "mousemove pointermove" : "mousemove";
        var upEventName = Browser.info.name === "msie" ? "mouseup pointerup" : "mouseup";
        EventHandler.remove(document, moveEventName, this.moveResizeHandler);
        EventHandler.remove(document, upEventName, this.upResizeHandler);
        if (Browser.info.name !== "msie") {
          EventHandler.remove(document, "touchmove", this.touchMoveResizeHandler);
          EventHandler.remove(document, "touchend", this.upResizeHandler);
        }
        this.isMouseUpBound = false;
        this.isMouseMoveBound = false;
        if (this.shadowEle) {
          detach(this.shadowEle);
        }
        this.shadowEle = null;
        var panelModel = this.getCellInstance(el.getAttribute("id"));
        this.setPanelPosition(el, panelModel.row, panelModel.col);
        this.setHeightAndWidth(el, panelModel);
      }
      removeClass([el], [dragging2]);
      this.trigger("resizeStop", args);
      this.resizeCalled = false;
      this.lastMouseX = this.lastMouseY = void 0;
      this.mOffX = this.mOffY = 0;
      this.mainElement = null;
      if (this.allowFloating) {
        this.moveItemsUpwards();
      }
      this.updatePanels();
      this.updateCloneArrayObject();
      this.checkForChanges(true);
    };
    DashboardLayout2.prototype.getResizeRowColumn = function(item) {
      var isChanged = false;
      var col = item.col;
      if (["e-west", "e-south-west"].indexOf(this.handleClass) !== -1) {
        col = this.pixelsToColumns(this.elementX, false);
      }
      var row = item.row;
      if (["e-north"].indexOf(this.handleClass) !== -1) {
        row = this.pixelsToRows(this.elementY, false);
        if (this.previousRow !== row) {
          this.previousRow = row;
          isChanged = true;
        }
      }
      var sizeX = item.sizeX;
      if (["e-north", "e-south"].indexOf(this.handleClass) === -1) {
        sizeX = this.pixelsToColumns(this.elementWidth - sizeX * this.cellSpacing[1], true);
      }
      var sizeY = item.sizeY;
      if (["e-east", "e-west"].indexOf(this.handleClass) === -1) {
        if (this.handleClass === "e-north" ? isChanged : true) {
          sizeY = this.pixelsToRows(this.elementHeight - sizeY * this.cellSpacing[0], true);
        }
      }
      if (item.col + sizeX > this.columns) {
        item.sizeX = sizeX - 1;
      }
      var canOccupy = row > -1 && col > -1 && sizeX + col <= this.maxCol() && sizeY + row <= this.maxRow();
      if (canOccupy && this.collisions(row, col, sizeX, sizeY, this.getPanelBase(item.id)).length === 0 || this.allowPushing !== false) {
        this.panelPropertyChange(item, { row, col, sizeX, sizeY });
      }
      return item;
    };
    DashboardLayout2.prototype.pixelsToColumns = function(pixels, isCeil) {
      if (isCeil) {
        return Math.ceil(pixels / this.cellSize[0]);
      } else {
        return Math.floor(pixels / (this.cellSize[0] + this.cellSpacing[0]));
      }
    };
    DashboardLayout2.prototype.pixelsToRows = function(pixels, isCeil) {
      if (isCeil) {
        return Math.round(pixels / this.cellSize[1]);
      } else {
        return Math.round(pixels / (this.cellSize[1] + this.cellSpacing[0]));
      }
    };
    DashboardLayout2.prototype.getMinWidth = function(item) {
      return item.minSizeX * this.getCellSize()[0] + (item.minSizeX - 1) * this.cellSpacing[0];
    };
    DashboardLayout2.prototype.getMaxWidth = function(item) {
      return item.maxSizeX * this.getCellSize()[0];
    };
    DashboardLayout2.prototype.getMinHeight = function(item) {
      return item.minSizeY * this.getCellSize()[1] + (item.minSizeY - 1) * this.cellSpacing[1];
    };
    DashboardLayout2.prototype.getMaxHeight = function(item) {
      return item.maxSizeY * this.getCellSize()[1];
    };
    DashboardLayout2.prototype.sortedPanel = function() {
      this.sortedArray = [];
      for (var i = 0, l = this.panelCollection.length; i < l; ++i) {
        this.sortItem(this.panelCollection[i]);
      }
    };
    DashboardLayout2.prototype.moveItemsUpwards = function() {
      if (this.allowFloating === false) {
        return;
      }
      for (var rowIndex = 0, l = this.sortedArray.length; rowIndex < l; ++rowIndex) {
        var columns = this.sortedArray[rowIndex];
        if (!columns) {
          continue;
        }
        for (var colIndex = 0, len = columns.length; colIndex < len; ++colIndex) {
          var item = columns[colIndex];
          if (item) {
            this.moveItemUpwards(item);
          }
        }
      }
      this.updateGridLines();
    };
    DashboardLayout2.prototype.moveItemUpwards = function(item) {
      if (this.allowFloating === false || item === this.mainElement) {
        return;
      }
      var colIndex = this.getCellInstance(item.id).col;
      var sizeY = parseInt(item.getAttribute("data-sizeY"), 10);
      var sizeX = parseInt(item.getAttribute("data-sizeX"), 10);
      var availableRow = null;
      var availableColumn = null;
      var rowIndex = parseInt(item.getAttribute("data-row"), 10) - 1;
      while (rowIndex > -1) {
        var items = this.collisions(rowIndex, colIndex, sizeX, sizeY, item);
        if (items.length !== 0) {
          break;
        }
        availableRow = rowIndex;
        availableColumn = colIndex;
        --rowIndex;
      }
      if (availableRow !== null) {
        this.sortItem(item, availableRow, availableColumn);
      }
    };
    DashboardLayout2.prototype.sortItem = function(item, rowValue, columnValue) {
      this.overlapElement = [];
      var column = parseInt(item.getAttribute("data-col"), 10);
      var row = parseInt(item.getAttribute("data-row"), 10);
      if (!this.sortedArray[row]) {
        this.sortedArray[row] = [];
      }
      this.sortedArray[row][column] = item;
      if (item !== void 0 && rowValue !== void 0 && columnValue !== void 0) {
        if (this.oldRowCol[item.id] !== void 0 && this.oldRowCol[item.id].row !== null && typeof this.oldRowCol[item.id].col !== "undefined") {
          {
            var oldRow = this.sortedArray[this.oldRowCol[item.id].row];
            if (this.oldRowCol[item.id] && oldRow[this.oldRowCol[item.id].col] === item) {
              delete oldRow[this.oldRowCol[item.id].col];
              this.updateOldRowColumn();
              this.sortedPanel();
            }
          }
        }
        this.oldRowCol[item.id].row = rowValue;
        this.oldRowCol[item.id].row = columnValue;
        if (!this.sortedArray[row]) {
          this.sortedArray[row] = [];
        }
        this.sortedArray[row][column] = item;
        if (this.allItems.indexOf(item) === -1) {
          this.allItems.push(item);
        }
        this.panelPropertyChange(this.getCellInstance(item.id), { row: rowValue, col: columnValue });
        var panelModel = this.getCellInstance(item.id);
        this.setAttributes({ value: { col: panelModel.col.toString(), row: panelModel.row.toString() } }, item);
        this.updateLayout(item, this.getCellInstance(item.id));
      }
    };
    DashboardLayout2.prototype.updateLayout = function(element, panelModel) {
      this.setPanelPosition(element, panelModel.row, panelModel.col);
      this.setHeightAndWidth(element, panelModel);
      this.updateRowHeight();
      this.sortedPanel();
    };
    DashboardLayout2.prototype.refresh = function() {
      this.panelsSizeY = 0;
      this.updateDragArea();
      if (this.checkMediaQuery()) {
        this.checkMediaQuerySizing();
      } else {
        if (this.element.classList.contains(responsive)) {
          removeClass([this.element], [responsive]);
          var internalPanels = this.element.querySelectorAll((this.element.id ? "#" + this.element.id + " > " : "") + ".e-panel");
          for (var i = 0; i < internalPanels.length; i++) {
            var ele = internalPanels[i];
            var cellInstance = this.getCellInstance(ele.id);
            var row = parseInt(ele.getAttribute("data-row"), 10);
            var col = parseInt(ele.getAttribute("data-col"), 10);
            this.panelPropertyChange(cellInstance, { row, col });
            this.setHeightAndWidth(ele, this.getCellInstance(ele.id));
            this.setPanelPosition(ele, row, col);
            this.updateRowHeight();
          }
        }
        this.panelResponsiveUpdate();
        this.updateGridLines();
      }
      this.removeResizeClasses(this.panelCollection);
      this.setClasses(this.panelCollection);
      this.resizeEvents();
      this.checkDragging(this.dragCollection);
    };
    DashboardLayout2.prototype.updateGridLines = function() {
      if (this.element.querySelector(".e-dashboard-gridline-table")) {
        if (this.table) {
          detach(this.table);
        }
        this.initGridLines();
      }
    };
    DashboardLayout2.prototype.checkDragging = function(dragCollection) {
      if (this.checkMediaQuery() || !this.allowDragging) {
        for (var i = 0; i < dragCollection.length; i++) {
          dragCollection[i].destroy();
        }
      } else {
        for (var i = 0; i < dragCollection.length; i++) {
          dragCollection[i].destroy();
        }
        this.enableDraggingContent(this.panelCollection);
      }
    };
    DashboardLayout2.prototype.sortPanels = function() {
      var model = [];
      var _loop_1 = function(row2) {
        var _loop_2 = function(col2) {
          this_1.panels.filter(function(panel2) {
            if (panel2.row === row2 && panel2.col === col2) {
              model.push(panel2);
            }
          });
        };
        for (var col = 0; col < this_1.columns; col++) {
          _loop_2(col);
        }
      };
      var this_1 = this;
      for (var row = 0; row <= this.rows; row++) {
        _loop_1(row);
      }
      return model;
    };
    DashboardLayout2.prototype.checkMediaQuerySizing = function() {
      addClass([this.element], [responsive]);
      var updatedPanel;
      if (this.isPanelRemoved && this.panels) {
        updatedPanel = this.panels;
      } else {
        updatedPanel = this.sortPanels();
      }
      this.updatedRows = updatedPanel.length;
      for (var i = 0; i < updatedPanel.length; i++) {
        var panelElement = document.getElementById(updatedPanel[i].id);
        var updatedHeight = void 0;
        if (panelElement) {
          setStyleAttribute(panelElement, { "width": "100%" });
          panelElement.style.height = " " + (this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio) * updatedPanel[i].sizeY + "px";
          if (updatedPanel[i].sizeY > 1) {
            updatedHeight = (this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio) * updatedPanel[i].sizeY + // eslint-disable-next-line radix
            parseInt((Math.round(updatedPanel[i].sizeY / 2) * this.cellSpacing[1]).toString(), 0);
            panelElement.style.height = "" + updatedHeight + "px";
          }
          this.resizeHeight = true;
          this.panelPropertyChange(updatedPanel[i], { row: i, col: 0 });
          this.setPanelPosition(panelElement, updatedPanel[i].row, updatedPanel[i].col);
          this.panelsSizeY = this.panelsSizeY + updatedPanel[i].sizeY;
          this.setClasses(this.panelCollection);
          this.checkDragging(this.dragCollection);
          this.removeResizeClasses(this.panelCollection);
        }
      }
      this.updateRowHeight();
    };
    DashboardLayout2.prototype.panelResponsiveUpdate = function() {
      this.element.classList.add("e-responsive");
      this.calculateCellSize();
      for (var i = 0; i < this.element.querySelectorAll(".e-panel").length; i++) {
        var ele = this.element.querySelectorAll(".e-panel")[i];
        var panelModel = this.getCellInstance(ele.id);
        this.setHeightAndWidth(ele, panelModel);
      }
      for (var i = 0; i < this.panels.length; i++) {
        this.setPanelPosition(document.getElementById(this.panels[i].id), this.panels[i].row, this.panels[i].col);
      }
      this.updateRowHeight();
    };
    DashboardLayout2.prototype.updateRowHeight = function() {
      this.getRowColumn();
      this.setHeightWidth();
    };
    DashboardLayout2.prototype.setHeightWidth = function() {
      var heightValue;
      var widthValue;
      if (this.checkMediaQuery()) {
        var entirePanelsY = 0;
        for (var i = 0; i < this.panels.length; i++) {
          if (this.panels[i].sizeY) {
            entirePanelsY += this.panels[i].sizeY;
          }
        }
        heightValue = entirePanelsY * (this.element.parentElement && this.element.parentElement.offsetWidth / this.cellAspectRatio) + (entirePanelsY - 1) * this.cellSpacing[1] + "px";
      } else {
        heightValue = this.maxRow() * (this.cellSize[0] / this.cellAspectRatio) + (this.maxRow() - 1) * this.cellSpacing[1] + "px";
      }
      setStyleAttribute(this.element, { "height": heightValue });
      widthValue = window.getComputedStyle(this.element).width;
      setStyleAttribute(this.element, { "width": widthValue });
    };
    DashboardLayout2.prototype.setHeightAndWidth = function(panelElement, panelModel) {
      setStyleAttribute(panelElement, { "height": formatUnit(this.setXYDimensions(panelModel)[0]) });
      setStyleAttribute(panelElement, { "width": formatUnit(this.setXYDimensions(panelModel)[1]) });
    };
    DashboardLayout2.prototype.renderCell = function(panel2, isStringTemplate, index) {
      var cellElement;
      this.dimensions = this.setXYDimensions(panel2);
      if (isUndefined(panel2.enabled)) {
        panel2.enabled = true;
      }
      if (this.contentTemplateChild.length > 0 && !isNullOrUndefined(index)) {
        cellElement = this.contentTemplateChild[index];
        if (panel2.cssClass) {
          addClass([cellElement], [panel2.cssClass]);
        }
        if (panel2.id) {
          cellElement.setAttribute("id", panel2.id);
        }
      } else {
        cellElement = this.createPanelElement(panel2.cssClass ? panel2.cssClass.split(" ") : null, panel2.id);
      }
      cellElement.style.zIndex = "" + panel2.zIndex;
      this.element.appendChild(cellElement);
      this.renderReactTemplates();
      var dashBoardCell = this.renderPanels(cellElement, panel2, panel2.id, isStringTemplate);
      this.panelCollection.push(dashBoardCell);
      this.setXYAttributes(cellElement, panel2);
      this.setHeightAndWidth(cellElement, panel2);
      return cellElement;
    };
    DashboardLayout2.prototype.setPanelPosition = function(cellElement, row, col) {
      if (!cellElement) {
        return;
      }
      if (this.checkMediaQuery()) {
        this.calculateCellSize();
      }
      var heightValue = this.getCellSize()[1];
      var widthValue = this.getCellSize()[0];
      var left = col === 0 ? 0 : col * (widthValue + this.cellSpacing[0]);
      var top2 = row === 0 ? 0 : row * (heightValue + this.cellSpacing[1]);
      if (this.checkMediaQuery()) {
        top2 = row === 0 ? 0 : this.panelsSizeY * (heightValue + this.cellSpacing[1]);
      }
      setStyleAttribute(cellElement, { "left": left + "px", "top": top2 + "px" });
    };
    DashboardLayout2.prototype.getRowColumn = function() {
      this.rows = null;
      if (this.element.querySelectorAll(".e-panel").length > 0 && !this.updatedRows) {
        var panelElements = this.element.querySelectorAll(".e-panel");
        for (var i = 0; i < panelElements.length; i++) {
          var panelElement = panelElements[i];
          var rowValue = parseInt(panelElement.getAttribute("data-row"), 10);
          var xValue = parseInt(panelElement.getAttribute("data-sizeY"), 10);
          this.rows = Math.max(this.rows, rowValue + xValue);
        }
      } else {
        if (this.updatedRows) {
          this.rows = this.updatedRows;
          this.updatedRows = null;
        }
        for (var i = 0; i < this.panels.length; i++) {
          this.rows = Math.max(this.rows, this.panels[i].row);
        }
      }
    };
    DashboardLayout2.prototype.setMinMaxValues = function(panel2) {
      if (!panel2.sizeX || panel2.sizeX < panel2.minSizeX) {
        this.panelPropertyChange(panel2, { sizeX: panel2.minSizeX });
      } else if (panel2.maxSizeX && panel2.sizeX > panel2.maxSizeX) {
        this.panelPropertyChange(panel2, { sizeX: panel2.maxSizeX });
      } else if (panel2.sizeX > this.columns) {
        this.panelPropertyChange(panel2, { sizeX: this.columns });
      } else {
        this.panelPropertyChange(panel2, { sizeX: panel2.sizeX });
      }
      if (!panel2.sizeY || panel2.sizeY < panel2.minSizeY) {
        this.panelPropertyChange(panel2, { sizeY: panel2.minSizeY });
      } else if (panel2.maxSizeY && panel2.sizeY > panel2.maxSizeY) {
        this.panelPropertyChange(panel2, { sizeY: panel2.maxSizeY });
      } else {
        this.panelPropertyChange(panel2, { sizeY: panel2.sizeY });
      }
    };
    DashboardLayout2.prototype.checkMinMaxValues = function(panel2) {
      if (panel2.col + panel2.sizeX > this.columns) {
        this.panelPropertyChange(panel2, { sizeX: panel2.sizeX + (this.columns - (panel2.col + panel2.sizeX)) });
      }
    };
    DashboardLayout2.prototype.panelPropertyChange = function(panel2, value) {
      panel2.setProperties(value, true);
    };
    DashboardLayout2.prototype.renderDashBoardCells = function(cells) {
      if (this.element.querySelectorAll(".e-panel").length > 0 || this.panels.length > 0) {
        for (var j = 0; j < cells.length; j++) {
          this.gridPanelCollection.push(cells[j]);
          this.setMinMaxValues(cells[j]);
          if (this.maxColumnValue < cells[j].col || this.maxColumnValue < cells[j].col + cells[j].sizeX) {
            this.panelPropertyChange(cells[j], { col: this.maxColumnValue - cells[j].sizeX });
          }
          var cell = this.renderCell(cells[j], false, j);
          if (this.enableRtl) {
            addClass([cell], "e-rtl");
          }
          this.element.appendChild(cell);
          this.renderReactTemplates();
          if (this.checkMediaQuery() && j === cells.length - 1) {
            this.checkMediaQuerySizing();
          } else {
            this.setPanelPosition(cell, cells[j].row, cells[j].col);
            this.mainElement = cell;
            this.updatePanelLayout(cell, cells[j]);
            this.mainElement = null;
          }
        }
      }
      this.setClasses(this.panelCollection);
    };
    DashboardLayout2.prototype.collisions = function(row, col, sizeX, sizeY, ignore) {
      var items = [];
      if (!sizeX || !sizeY) {
        sizeX = sizeY = 1;
      }
      if (ignore && !(ignore instanceof Array)) {
        ignore = [ignore];
      }
      var item;
      for (var h = 0; h < sizeY; ++h) {
        for (var w = 0; w < sizeX; ++w) {
          item = this.getPanel(row + h, col + w, ignore);
          if (item && (!ignore || ignore.indexOf(document.getElementById(item.id)) === -1) && items.indexOf(document.getElementById(item.id)) === -1) {
            items.push(document.getElementById(item.id));
          }
        }
      }
      return items;
    };
    DashboardLayout2.prototype.rightWardsSpaceChecking = function(rowElements, col, ele) {
      var _this = this;
      var columns = [];
      var spacedColumns = [];
      rowElements.forEach(function(element) {
        var columnValue = parseInt(element.getAttribute("data-col"), 10);
        var sizeXValue = parseInt(element.getAttribute("data-sizeX"), 10);
        if (col < _this.columns && columnValue >= col) {
          if (sizeXValue > 1) {
            for (var i2 = columnValue; i2 < columnValue + sizeXValue; i2++) {
              columns.push(i2);
            }
          } else {
            columns.push(columnValue);
          }
        }
      });
      if (columns.length > 0) {
        for (var i = col + 1; i <= this.columns - 1; i++) {
          if (columns.indexOf(i) === -1 && i !== col) {
            if (spacedColumns.indexOf(i) === -1) {
              spacedColumns.push(i);
            }
          }
        }
      }
      var occupiedValues = this.getOccupiedColumns(ele);
      occupiedValues.forEach(function(colValue) {
        if (colValue > col && spacedColumns.indexOf(colValue) !== -1) {
          spacedColumns.splice(spacedColumns.indexOf(colValue), 1);
        }
      });
      var eleOccupiedValues = this.getOccupiedColumns(this.checkingElement);
      eleOccupiedValues.forEach(function(col2) {
        if (col2 > parseInt(ele.getAttribute("data-col"), 10) && occupiedValues.indexOf(col2) === -1 && spacedColumns.indexOf(col2) === -1) {
          spacedColumns.push(col2);
        }
      });
      spacedColumns = spacedColumns.sort(function(next, previous) {
        return next - previous;
      });
      return spacedColumns;
    };
    DashboardLayout2.prototype.getOccupiedColumns = function(element) {
      var occupiedItems = [];
      var sizeX = parseInt(element.getAttribute("data-sizeX"), 10);
      var col = parseInt(element.getAttribute("data-col"), 10);
      for (var i = col; i < col + sizeX && i <= this.columns; i++) {
        occupiedItems.push(i);
      }
      return occupiedItems;
    };
    DashboardLayout2.prototype.leftWardsSpaceChecking = function(rowElements, col, ele) {
      var _this = this;
      var spacedColumns = [];
      var columns = [];
      rowElements.forEach(function(element) {
        var colValue = parseInt(element.getAttribute("data-col"), 10);
        var xValue = parseInt(element.getAttribute("data-sizeX"), 10);
        if (col <= _this.columns && colValue <= col) {
          if (xValue > 1) {
            for (var i = colValue; i < colValue + xValue; i++) {
              columns.push(i);
            }
          } else {
            columns.push(colValue);
          }
        }
      });
      if (columns.length > 0) {
        for (var j = 0; j <= col; j++) {
          if (columns.indexOf(j) === -1 && j !== col) {
            if (spacedColumns.indexOf(j) === -1) {
              spacedColumns.push(j);
            }
          }
        }
      }
      var occupiedValues = this.getOccupiedColumns(ele);
      occupiedValues.forEach(function(colValue) {
        if (colValue < col && spacedColumns.indexOf(colValue) !== -1) {
          spacedColumns.splice(spacedColumns.indexOf(colValue), 1);
        }
      });
      var eleOccupiedValues = this.getOccupiedColumns(this.checkingElement);
      eleOccupiedValues.forEach(function(col2) {
        if (col2 < parseInt(ele.getAttribute("data-col"), 10) && occupiedValues.indexOf(col2) === -1 && spacedColumns.indexOf(col2) === -1) {
          spacedColumns.push(col2);
        }
      });
      spacedColumns = spacedColumns.sort(function(next, prev) {
        return next - prev;
      });
      spacedColumns = spacedColumns.reverse();
      return spacedColumns;
    };
    DashboardLayout2.prototype.adjustmentAvailable = function(row, col, sizeY, sizeX, ele) {
      this.leftAdjustable = void 0;
      this.rightAdjustable = void 0;
      var isAdjustable = false;
      var rightSpacing;
      var rowElement = [];
      this.topAdjustable = void 0;
      var eleSizeX = parseInt(ele.getAttribute("data-sizeX"), 10);
      var eleCol = parseInt(ele.getAttribute("data-col"), 10);
      rowElement = this.getRowElements(this.collisions(row, 0, this.columns, sizeY, []));
      if (rowElement.indexOf(ele) === -1) {
        rowElement.push(ele);
      }
      var leftSpacing = this.leftWardsSpaceChecking(rowElement, col, ele);
      if (leftSpacing.length > 0) {
        this.leftAdjustable = this.isLeftAdjustable(leftSpacing, ele, row, col, sizeX, sizeY);
        if (this.spacedColumnValue !== eleCol - this.getCellInstance(this.checkingElement.id).sizeX) {
          this.leftAdjustable = false;
        }
        if (this.leftAdjustable) {
          this.rightAdjustable = false;
        } else {
          this.leftAdjustable = false;
          rightSpacing = this.rightWardsSpaceChecking(rowElement, col, ele);
          this.rightAdjustable = rightSpacing.length > 0 ? this.isRightAdjustable(rightSpacing, ele, row, col, sizeX, sizeY) : false;
          if (this.spacedColumnValue !== eleSizeX + eleCol) {
            this.rightAdjustable = false;
          }
          if (!this.rightAdjustable) {
            this.rightAdjustable = false;
          }
        }
      } else {
        rightSpacing = this.rightWardsSpaceChecking(rowElement, col, ele);
        this.rightAdjustable = rightSpacing.length > 0 ? this.isRightAdjustable(rightSpacing, ele, row, col, sizeX, sizeY) : false;
        if (this.spacedColumnValue !== eleSizeX + eleCol) {
          this.rightAdjustable = false;
        }
        if (this.rightAdjustable) {
          this.leftAdjustable = false;
        }
      }
      if (!this.rightAdjustable && !this.leftAdjustable && row > 0) {
        var endRow = this.getCellInstance(ele.id).row;
        var topCheck = false;
        if (this.startRow !== endRow) {
          topCheck = true;
        }
        for (var rowValue = row; rowValue >= 0; rowValue--) {
          var element = this.getCellInstance(ele.id).sizeY > 1 && topCheck ? this.checkingElement : ele;
          if (rowValue !== endRow && rowValue === endRow - sizeY && this.collisions(rowValue, col, sizeX, sizeY, element).length === 0) {
            topCheck = false;
            this.topAdjustable = true;
            this.spacedRowValue = isNullOrUndefined(this.spacedRowValue) ? rowValue : this.spacedRowValue;
            this.spacedColumnValue = col;
          }
        }
      }
      if (this.rightAdjustable || this.leftAdjustable || this.topAdjustable) {
        isAdjustable = true;
        if (isNullOrUndefined(this.spacedRowValue)) {
          this.spacedRowValue = row;
        }
      }
      return isAdjustable;
    };
    DashboardLayout2.prototype.isXSpacingAvailable = function(spacing, sizeX) {
      var isSpaceAvailable = false;
      var subSpacingColumns = [];
      for (var i = 0; i < spacing.length; i++) {
        if (spacing[i + 1] - spacing[i] === 1 || spacing[i + 1] - spacing[i] === -1) {
          subSpacingColumns.push(spacing[i]);
          if (sizeX === 2) {
            subSpacingColumns.push(spacing[i + 1]);
          }
          if (i === spacing.length - 2) {
            subSpacingColumns.push(spacing[i + 1]);
            if (subSpacingColumns.length > sizeX) {
              subSpacingColumns.splice(-1);
            }
          }
          if (subSpacingColumns.length === sizeX) {
            isSpaceAvailable = true;
            this.spacedColumnValue = subSpacingColumns.sort(function(next, previous) {
              return next - previous;
            })[0];
            if (this.spacedColumnValue < 0) {
              this.spacedColumnValue = 1;
            }
            return isSpaceAvailable;
          }
        } else {
          subSpacingColumns = [];
          continue;
        }
      }
      return isSpaceAvailable;
    };
    DashboardLayout2.prototype.getRowElements = function(base) {
      var rowElements = [];
      for (var i = 0; i < base.length; i++) {
        rowElements.push(base[i]);
      }
      return rowElements;
    };
    DashboardLayout2.prototype.isLeftAdjustable = function(spaces, ele, row, col, sizeX, sizeY) {
      var isLeftAdjudtable;
      if (sizeX === 1 && sizeY === 1 && spaces.length > 0) {
        this.spacedColumnValue = spaces[0];
        isLeftAdjudtable = true;
      } else if (sizeX > 1 && sizeY === 1) {
        isLeftAdjudtable = this.isXSpacingAvailable(spaces, sizeX);
      } else if (sizeY > 1) {
        if (sizeX === 1) {
          var xAdjust = void 0;
          if (spaces.length >= 1) {
            xAdjust = true;
          }
          if (xAdjust) {
            for (var i = 0; i < spaces.length; i++) {
              var collisionValue = this.collisions(row, spaces[i], sizeX, sizeY, this.checkingElement);
              if (collisionValue.length === 0) {
                this.spacedColumnValue = spaces[i];
                isLeftAdjudtable = true;
                return isLeftAdjudtable;
              } else {
                isLeftAdjudtable = false;
              }
            }
          }
        } else {
          isLeftAdjudtable = this.replacable(spaces, sizeX, row, sizeY, ele);
        }
      }
      return isLeftAdjudtable;
    };
    DashboardLayout2.prototype.isRightAdjustable = function(spacing, ele, row, col, sizeX, sizeY) {
      var isRightAdjudtable;
      if (sizeX === 1 && sizeY === 1 && spacing.length > 0) {
        this.spacedColumnValue = spacing[0];
        isRightAdjudtable = true;
      } else if (sizeX > 1 && sizeY === 1) {
        isRightAdjudtable = this.isXSpacingAvailable(spacing, sizeX);
      } else if (sizeY > 1) {
        if (sizeX === 1) {
          var xAdjust = void 0;
          if (spacing.length >= 1) {
            xAdjust = true;
          }
          if (xAdjust) {
            for (var i = 0; i < spacing.length; i++) {
              var collisionValue = this.collisions(row, spacing[i], sizeX, sizeY, this.checkingElement);
              for (var collision = 0; collision < collisionValue.length; collision++) {
                if (parseInt(ele.getAttribute("data-col"), 10) !== spacing[i]) {
                  collisionValue.splice(collisionValue.indexOf(collisionValue[collision]), 1);
                }
              }
              if (collisionValue.length === 0) {
                isRightAdjudtable = true;
                this.spacedColumnValue = spacing[i];
                return isRightAdjudtable;
              } else {
                isRightAdjudtable = false;
              }
            }
          }
        } else {
          isRightAdjudtable = this.replacable(spacing, sizeX, row, sizeY, ele);
        }
      }
      return isRightAdjudtable;
    };
    DashboardLayout2.prototype.replacable = function(spacing, sizeX, row, sizeY, ele) {
      var isRightAdjudtable;
      var updatedCollision = [];
      for (var j = 0; j < spacing.length; j++) {
        var xAdjust = this.isXSpacingAvailable(spacing, sizeX);
        if (xAdjust) {
          var exclusions = [];
          exclusions.push(this.checkingElement);
          exclusions.push(ele);
          if (updatedCollision.length === 0) {
            isRightAdjudtable = true;
            this.spacedColumnValue = this.spacedColumnValue;
            return isRightAdjudtable;
          } else {
            isRightAdjudtable = false;
          }
        }
      }
      return isRightAdjudtable;
    };
    DashboardLayout2.prototype.sortCollisionItems = function(collisionItems) {
      var updatedCollision = [];
      var rowElements;
      var _loop_3 = function(row2) {
        rowElements = [];
        collisionItems.forEach(function(element) {
          if (element && element.getAttribute("data-row") === row2.toString()) {
            rowElements.push(element);
          }
        });
        var _loop_4 = function(column2) {
          rowElements.forEach(function(item) {
            if (item && item.getAttribute("data-col") === column2.toString()) {
              updatedCollision.push(item);
            }
          });
        };
        for (var column = this_2.columns - 1; column >= 0; column--) {
          _loop_4(column);
        }
      };
      var this_2 = this;
      for (var row = this.rows - 1; row >= 0; row--) {
        _loop_3(row);
      }
      return updatedCollision;
    };
    DashboardLayout2.prototype.updatedModels = function(collisionItems, panelModel, ele) {
      var _this = this;
      var removeableElement = [];
      if (!this.mainElement) {
        this.sortedPanel();
      }
      collisionItems.forEach(function(element) {
        _this.checkingElement = element;
        var model = _this.getCellInstance(element.id);
        var adjust = !_this.adjustmentAvailable(model.row, model.col, model.sizeY, model.sizeX, ele);
        if (model.sizeX > 1 && adjust) {
          for (var rowValue = model.row; rowValue < panelModel.row + panelModel.sizeY; rowValue++) {
            var collisions = _this.collisions(rowValue, model.col, model.sizeX, model.sizeY, element);
            collisions.forEach(function(item) {
              if (collisionItems.indexOf(item) >= 0 && removeableElement.indexOf(item) === -1) {
                removeableElement.push(item);
              }
            });
          }
        }
      });
      removeableElement.forEach(function(item) {
        if (removeableElement.indexOf(item) >= 0) {
          collisionItems.splice(collisionItems.indexOf(item), 1);
        }
      });
      return collisionItems;
    };
    DashboardLayout2.prototype.resetLayout = function(model) {
      var collisions = this.collisions(model.row, model.col, model.sizeX, model.sizeY, this.mainElement);
      if (!this.mainElement || this.addPanelCalled || this.resizeCalled || this.movePanelCalled) {
        return collisions;
      }
      if (this.mainElement && this.oldRowCol !== this.cloneObject) {
        for (var i = 0; i < this.panels.length; i++) {
          var element = document.getElementById(this.panels[i].id);
          if (element === this.mainElement) {
            continue;
          }
          var rowValue = this.cloneObject[element.id].row;
          var colValue = this.cloneObject[element.id].col;
          this.setPanelPosition(element, rowValue, colValue);
          this.panelPropertyChange(this.getCellInstance(element.id), { row: rowValue, col: colValue });
          this.setAttributes({ value: { col: colValue.toString(), row: rowValue.toString() } }, element);
          this.updateOldRowColumn();
        }
      }
      this.sortedArray = this.cloneArray;
      collisions = this.collisions(model.row, model.col, model.sizeX, model.sizeY, this.mainElement);
      this.sortedPanel();
      this.updateOldRowColumn();
      if (this.checkCollision && this.checkCollision.length > 0 && collisions.indexOf(this.checkCollision[0]) === -1 && this.cloneObject[this.checkCollision[0].id].row === model.row) {
        collisions.push(this.checkCollision[0]);
      }
      return collisions;
    };
    DashboardLayout2.prototype.swapAvailability = function(collisions, element) {
      var available = true;
      var eleModel = this.getCellInstance(element.id);
      for (var count2 = 0; count2 < collisions.length; count2++) {
        var collideModel = this.getCellInstance(collisions[count2].id);
        for (var i = 1; i < eleModel.sizeY; i++) {
          var excludeEle = [];
          excludeEle.push(element);
          excludeEle.push(collisions[count2]);
          var collision = this.collisions(eleModel.row + i, collideModel.col, collideModel.sizeX, collideModel.sizeY, excludeEle);
          if (collision.length > 0) {
            available = false;
            return false;
          } else {
            continue;
          }
        }
      }
      return available;
    };
    DashboardLayout2.prototype.checkForSwapping = function(collisions, element) {
      if (!this.mainElement || collisions.length === 0) {
        return false;
      }
      var direction;
      var eleSwapRow = parseInt(collisions[0].getAttribute("data-row"), 10);
      if (this.startRow < eleSwapRow) {
        direction = 1;
      } else if (this.startRow > eleSwapRow) {
        direction = 0;
      }
      if (!this.swapAvailability(collisions, element)) {
        return false;
      }
      var isSwappable = false;
      for (var count1 = 0; count1 < collisions.length; count1++) {
        if (collisions.length >= 1 && this.cloneObject[this.mainElement.id] && this.cloneObject[this.mainElement.id].row === this.oldRowCol[this.mainElement.id].row) {
          return false;
        }
      }
      var updatedRow = direction === 0 ? this.getCellInstance(this.mainElement.id).row + this.getCellInstance(this.mainElement.id).sizeY : this.startRow;
      for (var count2 = 0; count2 < collisions.length; count2++) {
        var collideInstance = this.getCellInstance(collisions[count2].id);
        var elementinstance = this.getCellInstance(element.id);
        var ignore = [];
        if (collideInstance.sizeY === 1 && ignore.indexOf(collisions[count2]) === -1) {
          ignore.push(collisions[count2]);
        } else if (collideInstance.sizeY > 1 && ignore.indexOf(collisions[count2]) === -1) {
          if (direction === 1 && elementinstance.row === this.cloneObject[collideInstance.id].row + collideInstance.sizeY - 1) {
            ignore.push(collisions[count2]);
          } else if (direction === 0 && elementinstance.row === this.cloneObject[collideInstance.id].row) {
            ignore.push(collisions[count2]);
          } else {
            return false;
          }
        }
        if (collideInstance.sizeY <= elementinstance.sizeY && ignore.indexOf(collisions[count2]) === -1) {
          ignore.push(collisions[count2]);
        }
        ignore.push(this.mainElement);
        var swapCollision = this.collisions(updatedRow, collideInstance.col, collideInstance.sizeX, collideInstance.sizeY, ignore);
        if (swapCollision.length > 0) {
          isSwappable = false;
          return isSwappable;
        } else {
          if (count2 === collisions.length - 1) {
            isSwappable = true;
          }
          continue;
        }
      }
      return isSwappable;
    };
    DashboardLayout2.prototype.swapItems = function(collisions, element, panelModel) {
      var _this = this;
      var direction;
      var swappedElements = [];
      swappedElements.push(element);
      var eleSwapRow = parseInt(collisions[0].getAttribute("data-row"), 10);
      if (this.startRow < eleSwapRow) {
        direction = 1;
      } else if (this.startRow > eleSwapRow) {
        direction = 0;
      }
      var collisionItemsRow = direction === 0 ? eleSwapRow + panelModel.sizeY : this.startRow;
      if (!this.movePanelCalled) {
        var collisionInstance = this.getCellInstance(collisions[0].id);
        this.panelPropertyChange(panelModel, { row: direction === 0 ? eleSwapRow : collisionItemsRow + collisionInstance.sizeY });
      }
      for (var count2 = 0; count2 < collisions.length; count2++) {
        swappedElements.push(collisions[count2]);
        this.setPanelPosition(collisions[count2], collisionItemsRow, this.getCellInstance(collisions[count2].id).col);
        this.panelPropertyChange(this.getCellInstance(collisions[count2].id), { row: collisionItemsRow });
        collisions[count2].setAttribute("data-row", collisionItemsRow.toString());
      }
      element.setAttribute("data-row", panelModel.row.toString());
      this.setPanelPosition(this.shadowEle, panelModel.row, panelModel.col);
      for (var i = 0; i < this.panels.length; i++) {
        this.oldRowCol[this.panels[i].id] = { row: this.panels[i].row, col: this.panels[i].col };
      }
      this.startRow = panelModel.row;
      this.updateOldRowColumn();
      swappedElements.forEach(function(item) {
        _this.cloneObject[item.id] = _this.oldRowCol[item.id];
        var itemModel = _this.getCellInstance(item.id);
        for (var i2 = 0; i2 < _this.sortedArray.length; i2++) {
          if (!_this.sortedArray[i2]) {
            continue;
          }
          for (var j = 0; j < _this.sortedArray[i2].length; j++) {
            if (_this.sortedArray[i2][j] === item) {
              _this.sortedArray[i2][j] = void 0;
            }
          }
        }
        if (!_this.sortedArray[itemModel.row]) {
          _this.sortedArray[itemModel.row] = [];
        }
        _this.sortedArray[itemModel.row][itemModel.col] = item;
        _this.cloneArray = _this.sortedArray;
      });
    };
    DashboardLayout2.prototype.updatePanelLayout = function(element, panelModel) {
      this.collisionChecker = {};
      var initialModel = [];
      var checkForAdjustment;
      var collisionModels = [];
      var swappingAvailable;
      if (this.mainElement && this.isRenderComplete) {
        initialModel = this.resetLayout(panelModel);
      } else {
        initialModel = this.collisions(panelModel.row, panelModel.col, panelModel.sizeX, panelModel.sizeY, element);
      }
      if (initialModel.length > 0) {
        initialModel = this.sortCollisionItems(initialModel);
        initialModel = this.updatedModels(initialModel, panelModel, element);
        swappingAvailable = !isNullOrUndefined(this.startRow) ? this.checkForSwapping(initialModel, element) : false;
        if (swappingAvailable) {
          this.swapItems(initialModel, element, panelModel);
        } else {
          for (var i = 0; i < initialModel.length; i++) {
            var model = this.getCellInstance(initialModel[i].id);
            this.checkingElement = initialModel[i];
            this.spacedRowValue = null;
            this.spacedColumnValue = null;
            checkForAdjustment = this.adjustmentAvailable(model.row, model.col, model.sizeY, model.sizeX, element);
            if (checkForAdjustment && !isNullOrUndefined(this.spacedColumnValue)) {
              this.setPanelPosition(initialModel[i], this.spacedRowValue, this.spacedColumnValue);
              this.oldRowCol[initialModel[i].id] = { row: this.spacedRowValue, col: this.spacedColumnValue };
              var value = {
                attributes: {
                  row: this.spacedRowValue.toString(),
                  col: this.spacedColumnValue.toString()
                }
              };
              this.setAttributes(value, initialModel[i]);
              this.panelPropertyChange(model, { col: this.spacedColumnValue, row: this.spacedRowValue });
              if (this.topAdjustable && this.allowFloating) {
                this.updatePanels();
                this.updateCloneArrayObject();
              }
              this.spacedRowValue = null;
              if (i < initialModel.length) {
                continue;
              }
            } else {
              collisionModels.push(initialModel[i]);
            }
          }
        }
      }
      if (collisionModels.length > 0) {
        var proxy_1 = this;
        collisionModels.forEach(function(item1) {
          if (proxy_1.overlapElement.indexOf(item1) === -1) {
            proxy_1.overlapElement.push(item1);
          }
        });
        if (this.overlapElement && this.overlapElement.indexOf(element) !== -1) {
          this.overlapElement.splice(this.overlapElement.indexOf(element), 1);
        }
        if (collisionModels.length > 0) {
          this.updateRowColumn(panelModel.row, this.overlapElement, element);
          this.checkForCompletePushing();
        }
      }
      if (!this.isSubValue) {
        this.sortedPanel();
      }
      this.updateRowHeight();
      this.updateGridLines();
    };
    DashboardLayout2.prototype.checkForCompletePushing = function() {
      for (var i = 0; i < this.panels.length; i++) {
        if (this.collisionChecker[this.panels[i].id] && this.collisionChecker[this.panels[i].id] !== null) {
          this.overlapElement = [this.collisionChecker[this.panels[i].id].ele];
          var key = this.panels[i].id;
          this.updateRowColumn(this.collisionChecker["" + key].row, this.overlapElement, this.collisionChecker["" + key].srcEle);
        }
      }
    };
    DashboardLayout2.prototype.updateCollisionChecked = function(item) {
      for (var count2 = 0; count2 < Object.keys(this.collisionChecker).length; count2++) {
        this.collisionChecker[item.id] = null;
      }
    };
    DashboardLayout2.prototype.updateRowColumn = function(row, ele, srcEle) {
      if (!srcEle) {
        return;
      }
      var eleSizeY = parseInt(srcEle.getAttribute("data-sizeY"), 10);
      var eleRow = parseInt(srcEle.getAttribute("data-row"), 10);
      this.overlapElementClone = this.overlapElement && !this.shouldRestrict ? this.overlapElement : this.overlapElement;
      for (var i = 0; i < this.overlapElementClone.length; i++) {
        if (this.overlapElementClone.length === 0) {
          return;
        }
        for (var i_1 = 0; i_1 < this.overlapElementClone.length; i_1++) {
          this.collisionChecker[this.overlapElementClone[i_1].id] = {
            ele: this.overlapElementClone[i_1],
            row,
            srcEle
          };
        }
        var updatedRow = eleRow + eleSizeY;
        var collisionY = parseInt(this.overlapElementClone[i].getAttribute("data-sizeY"), 10);
        var collisionCol = parseInt(this.overlapElementClone[i].getAttribute("data-col"), 10);
        var collisionX = parseInt(this.overlapElementClone[i].getAttribute("data-sizeX"), 10);
        var colValue = void 0;
        var collisionModels = void 0;
        if (this.overlapSubElementClone.indexOf(srcEle) === -1) {
          this.overlapSubElementClone.push(srcEle);
        }
        if (this.overlapSubElementClone.indexOf(this.overlapElementClone[i]) === -1) {
          this.overlapSubElementClone.push(this.overlapElementClone[i]);
        }
        if (collisionY > 1 || collisionX > 1) {
          var overlapElementModel = this.getCellInstance(this.overlapElementClone[i].id);
          colValue = overlapElementModel.col;
          var ele_1 = document.getElementById(overlapElementModel.id);
          for (var k = overlapElementModel.row; k < eleRow + eleSizeY; k++) {
            this.isSubValue = true;
            this.panelPropertyChange(overlapElementModel, { row: overlapElementModel.row + 1 });
            ele_1.setAttribute("data-row", overlapElementModel.row.toString());
            this.setPanelPosition(ele_1, overlapElementModel.row, colValue);
            this.updateCollisionChecked(ele_1);
            this.oldRowCol[ele_1.id] = { row: overlapElementModel.row, col: colValue };
            var panelModel = this.getCellInstance(ele_1.id);
            this.panelPropertyChange(panelModel, { col: colValue, row: overlapElementModel.row });
            var eleRow_1 = parseInt(ele_1.getAttribute("data-row"), 10);
            var eleCol = parseInt(ele_1.getAttribute("data-col"), 10);
            var sizeX = parseInt(ele_1.getAttribute("data-sizeX"), 10);
            var sizeY = parseInt(ele_1.getAttribute("data-sizeY"), 10);
            var excludeElements = [];
            excludeElements.push(ele_1);
            excludeElements.push(srcEle);
            collisionModels = this.collisions(eleRow_1, eleCol, sizeX, sizeY, excludeElements);
            if (this.mainElement && collisionModels.indexOf(this.mainElement) !== -1) {
              collisionModels.splice(collisionModels.indexOf(this.mainElement), 1);
            }
            this.collisionPanel(collisionModels, eleCol, eleRow_1, ele_1);
          }
          this.isSubValue = false;
        } else {
          if (this.addPanelCalled) {
            this.addPanelCalled = false;
          }
          this.overlapElementClone[i].setAttribute("data-row", updatedRow.toString());
          var excludeEle = [];
          excludeEle.push(this.overlapElementClone[i]);
          excludeEle.push(srcEle);
          collisionModels = this.collisions(updatedRow, collisionCol, collisionX, collisionY, excludeEle);
          if (this.mainElement && collisionModels.indexOf(this.mainElement) !== -1) {
            collisionModels.splice(collisionModels.indexOf(this.mainElement), 1);
          }
          colValue = parseInt(this.overlapElementClone[i].getAttribute("data-col"), 10);
          this.setPanelPosition(this.overlapElementClone[i], updatedRow, colValue);
          this.updateCollisionChecked(this.overlapElementClone[i]);
          this.oldRowCol[this.overlapElementClone[i].id] = { row: updatedRow, col: colValue };
          var panelModel = this.getCellInstance(this.overlapElementClone[i].id);
          this.panelPropertyChange(panelModel, { col: colValue, row: updatedRow });
          this.collisionPanel(collisionModels, colValue, updatedRow, this.overlapElementClone[i]);
        }
      }
    };
    DashboardLayout2.prototype.collisionPanel = function(collisionModels, colValue, updatedRow, clone) {
      var panelModel = this.getCellInstance(clone.id);
      this.panelPropertyChange(panelModel, { row: updatedRow, col: colValue });
      if (collisionModels.length > 0) {
        var proxy_2 = this;
        this.overlapElement = [];
        this.shouldRestrict = true;
        collisionModels.forEach(function(item1) {
          proxy_2.overlapElement.push(item1);
        });
        var overlapElementRow1 = parseInt(clone.getAttribute("data-row"), 10);
        for (var m = 0; m < this.overlapElement.length; m++) {
          this.updateRowColumn(overlapElementRow1, this.overlapElement, clone);
        }
        this.shouldRestrict = false;
      } else {
        if (!this.addPanelCalled) {
          this.sortedPanel();
        }
        if (this.overlapSubElementClone.length > 0) {
          var _loop_5 = function(p2) {
            var rowVal = parseInt(this_3.overlapSubElementClone[p2].getAttribute("data-row"), 10);
            var colValue_1 = parseInt(this_3.overlapSubElementClone[p2].getAttribute("data-col"), 10);
            var sizeX = parseInt(this_3.overlapSubElementClone[p2].getAttribute("data-sizeX"), 10);
            var sizeY = parseInt(this_3.overlapSubElementClone[p2].getAttribute("data-sizeY"), 10);
            var collisionModels1 = this_3.collisions(rowVal, colValue_1, sizeX, sizeY, this_3.overlapSubElementClone);
            if (this_3.mainElement && collisionModels1.indexOf(this_3.mainElement) !== -1) {
              collisionModels1.splice(collisionModels1.indexOf(this_3.mainElement), 1);
            }
            var proxy = this_3;
            collisionModels1.forEach(function(item1) {
              proxy.overlapElement.push(item1);
            });
            if (collisionModels1.length > 0) {
              this_3.updateRowColumn(rowVal, this_3.overlapElement, this_3.overlapSubElementClone[p2]);
            }
          };
          var this_3 = this;
          for (var p = 0; p < this.overlapSubElementClone.length; p++) {
            _loop_5(p);
          }
        }
        this.overlapSubElementClone = [];
      }
    };
    DashboardLayout2.prototype.removeResizeClasses = function(panelElements) {
      for (var i = 0; i < panelElements.length; i++) {
        var element = panelElements[i];
        var resizerElements = element.querySelectorAll(".e-resize");
        for (var i_2 = 0; i_2 < resizerElements.length; i_2++) {
          detach(resizerElements[i_2]);
        }
      }
    };
    DashboardLayout2.prototype.ensureDrag = function() {
      this.checkDragging(this.dragCollection);
      var dragPanels = this.element.querySelectorAll("." + drag);
      removeClass(dragPanels, [drag]);
      this.setClasses(this.panelCollection);
    };
    DashboardLayout2.prototype.setClasses = function(panelCollection) {
      for (var i = 0; i < panelCollection.length; i++) {
        var element = panelCollection[i];
        var containerEle = panelCollection[i].querySelector(".e-panel-container");
        if (this.allowDragging) {
          if (this.draggableHandle && element.querySelectorAll(this.draggableHandle)[0]) {
            addClass([element.querySelectorAll(this.draggableHandle)[0]], [drag]);
          } else {
            addClass([element], [drag]);
          }
        }
        if (this.allowResizing && this.mediaQuery ? !this.checkMediaQuery() : false) {
          this.setResizingClass(element, containerEle);
        }
      }
    };
    DashboardLayout2.prototype.setResizingClass = function(ele, container) {
      this.availableClasses = this.resizableHandles;
      if (!ele.querySelector(".e-resize")) {
        for (var j = 0; j < this.availableClasses.length; j++) {
          var spanEle = this.createElement("span");
          var addClassValue = void 0;
          container.appendChild(spanEle);
          if (this.availableClasses[j] === "e-east" || this.availableClasses[j] === "e-west" || this.availableClasses[j] === "e-north" || this.availableClasses[j] === "e-south") {
            addClassValue = single;
          } else {
            addClassValue = double;
          }
          addClass([spanEle], [addClassValue, this.availableClasses[j], resize, resizeicon]);
        }
      }
    };
    DashboardLayout2.prototype.setXYAttributes = function(element, panelModel) {
      var value = {
        value: {
          sizeX: panelModel.sizeX.toString(),
          sizeY: panelModel.sizeY.toString(),
          minSizeX: panelModel.minSizeX.toString(),
          minSizeY: panelModel.minSizeY.toString(),
          maxSizeX: !isNullOrUndefined(panelModel.maxSizeX) ? panelModel.maxSizeX.toString() : void 0,
          maxSizeY: !isNullOrUndefined(panelModel.maxSizeY) ? panelModel.maxSizeY.toString() : void 0,
          row: panelModel.row.toString(),
          col: panelModel.col.toString()
        }
      };
      this.setAttributes(value, element);
    };
    DashboardLayout2.prototype.setXYDimensions = function(panelModel) {
      var cellHeight = this.getCellSize()[1];
      var cellWidth = this.getCellSize()[0];
      var widthValue;
      var heigthValue;
      if (panelModel && typeof cellWidth === "number" && typeof panelModel.sizeX === "number" && panelModel.sizeX > 1) {
        widthValue = panelModel.sizeX * cellWidth + (panelModel.sizeX - 1) * this.cellSpacing[0];
      } else {
        widthValue = cellWidth;
      }
      if (panelModel && typeof cellHeight === "number" && panelModel.sizeY > 1 && typeof panelModel.sizeY === "number") {
        heigthValue = panelModel.sizeY * cellHeight + (panelModel.sizeY - 1) * this.cellSpacing[1];
      } else {
        heigthValue = formatUnit(cellHeight);
      }
      return [heigthValue, widthValue];
    };
    DashboardLayout2.prototype.getRowColumnDragValues = function(args) {
      var value = [];
      var elementTop = parseFloat(args.element.style.top);
      var elementLeft = parseFloat(args.element.style.left);
      var row = Math.round(elementTop / (this.getCellSize()[1] + this.cellSpacing[1]));
      var col = Math.round(elementLeft / (this.getCellSize()[0] + +this.cellSpacing[0]));
      value = [row, col];
      return value;
    };
    DashboardLayout2.prototype.checkForChanges = function(isInteracted, added, removed) {
      var changedPanels = [];
      if (this.removeAllCalled) {
        changedPanels = [];
      } else {
        for (var i = 0; i < this.panels.length; i++) {
          if ((!isNullOrUndefined(added) ? this.panels[i].id !== added[0].id : true) && (!isNullOrUndefined(removed) ? this.panels[i].id !== removed[0].id : true) && (this.panels[i].row !== this.panelsInitialModel[i].row || this.panels[i].col !== this.panelsInitialModel[i].col)) {
            changedPanels.push(this.panels[i]);
          }
        }
      }
      if (changedPanels.length > 0 || this.removeAllCalled) {
        var changedArgs = {
          changedPanels,
          isInteracted,
          addedPanels: !isNullOrUndefined(added) ? added : [],
          removedPanels: !isNullOrUndefined(removed) ? removed : []
        };
        this.trigger("change", changedArgs);
      }
    };
    DashboardLayout2.prototype.enableDraggingContent = function(collections) {
      var _this = this;
      var _loop_6 = function(i2) {
        var abortArray = [".e-resize", "." + dragRestrict];
        var cellElement = collections[i2];
        {
          this_4.dragobj = new Draggable(cellElement, {
            preventDefault: false,
            clone: false,
            dragArea: this_4.element,
            isDragScroll: true,
            handle: this_4.draggableHandle ? this_4.draggableHandle : ".e-panel",
            abort: abortArray,
            dragStart: this_4.onDraggingStart.bind(this_4),
            dragStop: function(args) {
              _this.trigger("dragStop", args);
              if (isNullOrUndefined(args.cancel)) {
                args.cancel = false;
              }
              if (!args.cancel) {
                var model = _this.getCellInstance(_this.mainElement.id);
                if (_this.allowPushing && _this.collisions(model.row, model.col, model.sizeX, model.sizeY, _this.mainElement).length > 0) {
                  _this.setHolderPosition(args);
                  _this.setPanelPosition(_this.mainElement, model.row, model.col);
                  _this.updatePanelLayout(_this.mainElement, model);
                } else {
                  _this.setPanelPosition(_this.mainElement, model.row, model.col);
                }
                _this.mainElement = null;
                var item = _this.getPanelBase(args);
                if (_this.shadowEle) {
                  detach(_this.shadowEle);
                }
                removeClass([_this.element], [preventSelect]);
                removeClass([args.element], [dragging2]);
                _this.shadowEle = null;
                args.element.classList.remove("e-dragging");
                var row = _this.getRowColumnDragValues(args)[0];
                var col = _this.getRowColumnDragValues(args)[1];
                var panelModel = _this.getCellInstance(args.element.id);
                if (_this.allowPushing && _this.collisions(row, col, panelModel.sizeX, panelModel.sizeY, document.getElementById(item.id)).length === 0) {
                  _this.panelPropertyChange(_this.getCellInstance(args.element.id), { row, col });
                  _this.oldRowCol[args.element.id].row = row;
                  _this.oldRowCol[args.element.id].col = col;
                  _this.setAttributes({ value: { col: col.toString(), row: row.toString() } }, args.element);
                  _this.sortedPanel();
                } else {
                  _this.panelPropertyChange(_this.getCellInstance(args.element.id), {
                    row: _this.oldRowCol[args.element.id].row,
                    col: _this.oldRowCol[args.element.id].col
                  });
                  args.element.setAttribute("data-col", _this.getCellInstance(args.element.id).col.toString());
                  args.element.setAttribute("data-row", _this.getCellInstance(args.element.id).row.toString());
                  _this.sortedPanel();
                }
                var panelInstance = _this.getCellInstance(args.element.id);
                _this.setPanelPosition(args.element, panelInstance.row, panelInstance.col);
                _this.updatePanels();
                _this.updateCloneArrayObject();
                _this.checkForChanges(true);
                _this.dragStopEventArgs = { event: args.event, element: args.element };
                _this.resizeEvents();
                _this.rows = _this.maxRow(true);
                _this.setHeightWidth();
                _this.updateDragArea();
              } else {
                var currentPanel = _this.getCellInstance(_this.mainElement.id);
                for (i2 = 0; i2 < _this.panels.length; i2++) {
                  if (_this.panels[i2].id === currentPanel.id) {
                    args.element.setAttribute("data-col", _this.panelsInitialModel[i2].col.toString());
                    args.element.setAttribute("data-row", _this.panelsInitialModel[i2].row.toString());
                    currentPanel.col = _this.panelsInitialModel[i2].col;
                    currentPanel.row = _this.panelsInitialModel[i2].row;
                    _this.setPanelPosition(_this.mainElement, _this.panelsInitialModel[i2].row, _this.panelsInitialModel[i2].col);
                    _this.updatePanelLayout(_this.mainElement, currentPanel);
                  }
                }
                if (_this.shadowEle) {
                  detach(_this.shadowEle);
                }
              }
            },
            drag: function(args) {
              _this.draggedEventArgs = {
                event: args.event,
                element: args.element,
                target: closest(args.target, ".e-panel")
              };
              _this.trigger("drag", _this.draggedEventArgs);
              _this.onDragStart(args);
            }
          });
          if (this_4.dragCollection.indexOf(this_4.dragobj) === -1) {
            this_4.dragCollection.push(this_4.dragobj);
          }
        }
        out_i_1 = i2;
      };
      var this_4 = this, out_i_1;
      for (var i = 0; i < collections.length; i++) {
        _loop_6(i);
        i = out_i_1;
      }
    };
    DashboardLayout2.prototype.updatePanels = function() {
      this.moveItemsUpwards();
      this.updateOldRowColumn();
      this.sortedPanel();
    };
    DashboardLayout2.prototype.updateDragArea = function() {
      this.dragCollection.forEach(function(dragobj) {
        dragobj.setDragArea();
      });
    };
    DashboardLayout2.prototype.updateRowsHeight = function(row, sizeY, addRows) {
      if (row + sizeY >= this.rows) {
        this.rows = this.rows + addRows;
        this.setHeightWidth();
      }
    };
    DashboardLayout2.prototype.onDraggingStart = function(args) {
      var dragArgs = args;
      this.trigger("dragStart", dragArgs, function(dragArgs2) {
        if (isNullOrUndefined(args.cancel)) {
          args.cancel = false;
        }
      });
      this.eventVar = args.cancel;
      if (!args.cancel) {
        this.panelsInitialModel = this.cloneModels(this.panels);
        this.mainElement = args.element;
        this.cloneObject = JSON.parse(JSON.stringify(this.cloneObject));
        var eleRowValue = this.startRow = parseInt(args.element.getAttribute("data-row"), 10);
        this.startCol = parseInt(args.element.getAttribute("data-col"), 10);
        var eleSizeY = parseInt(args.element.getAttribute("data-sizeY"), 10);
        this.updateRowsHeight(eleRowValue, eleSizeY, eleSizeY);
        this.updateDragArea();
        this.shadowEle = document.createElement("div");
        this.shadowEle.classList.add("e-holder");
        this.shadowEle.classList.add("e-holder-transition");
        setStyleAttribute(this.shadowEle, { "position": "absolute" });
        addClass([this.element], [preventSelect]);
        addClass([args.element], [dragging2]);
        this.element.appendChild(this.shadowEle);
        this.renderReactTemplates();
        this.shadowEle = document.querySelector(".e-holder");
        this.shadowEle.style.height = this.getCellInstance(args.element.id).sizeY * this.cellSize[1] + "px";
        this.shadowEle.style.width = this.getCellInstance(args.element.id).sizeX * this.cellSize[0] + "px";
        var panelInstance = this.getCellInstance(args.element.id);
        this.setPanelPosition(this.shadowEle, panelInstance.row, panelInstance.col);
      } else {
        removeClass([this.element], [preventSelect]);
        removeClass([args.element], [dragging2]);
      }
    };
    DashboardLayout2.prototype.cloneModels = function(source, target) {
      if (target === void 0) {
        target = [];
      }
      for (var i = 0; i < source.length; i++) {
        if (!target[i]) {
          target[i] = {};
        }
        for (var k in source[i]) {
          target[i]["" + k] = source[i]["" + k];
        }
      }
      return target;
    };
    DashboardLayout2.prototype.onDragStart = function(args) {
      var endCol;
      var endRow;
      var dragCol;
      if (!this.eventVar) {
        var col = dragCol = this.getRowColumnDragValues(args)[1];
        var row = this.getRowColumnDragValues(args)[0];
        if (col < 0 || row < 0) {
          return;
        }
        this.panelPropertyChange(this.getCellInstance(args.element.id), { row, col });
        var panelModel = this.getCellInstance(args.element.id);
        this.updateRowsHeight(panelModel.row, panelModel.sizeY, 1);
        this.updateDragArea();
        if (this.allowPushing) {
          this.setAttributes({ value: { col: col.toString(), row: row.toString() } }, args.element);
          this.panelPropertyChange(this.getCellInstance(args.element.id), { row, col });
          endCol = this.oldRowCol[args.element.id].col;
          endRow = this.oldRowCol[args.element.id].row;
          this.oldRowCol[args.element.id] = { row, col };
          this.updateOldRowColumn();
          if (this.startCol !== endCol || this.startRow !== endRow) {
            this.setHolderPosition(args);
            if (this.startCol !== endCol) {
              this.startRow = endRow;
            }
            if (this.startRow !== endRow) {
              this.startCol = endCol;
            }
            if (this.allowPushing) {
              this.mainElement = args.element;
              var model = panelModel;
              this.checkCollision = this.collisions(model.row, model.col, model.sizeX, model.sizeY, args.element);
              if (panelModel.col >= this.checkColumnValue) {
                this.checkCollision = [];
              }
              this.updatePanelLayout(args.element, panelModel);
              this.moveItemsUpwards();
            }
          }
        }
        if (this.allowPushing !== false) {
          this.panelPropertyChange(this.getCellInstance(args.element.id), { row, col });
        }
        if (this.oldRowCol[args.element.id].row !== row || this.oldRowCol[args.element.id].col !== col) {
          this.panelPropertyChange(this.getCellInstance(args.element.id), { row, col });
          this.setAttributes({ value: { col: col.toString(), row: row.toString() } }, args.element);
        }
        if (this.startCol !== dragCol) {
          this.startCol = endCol;
          this.moveItemsUpwards();
        }
        if (!this.allowPushing) {
          this.setHolderPosition(args);
        }
        this.removeResizeClasses(this.panelCollection);
        this.setClasses(this.panelCollection);
        if (this.allowPushing === false) {
          return;
        }
      } else {
        this.dragobj.intDestroy(args.event);
        removeClass([this.element], [preventSelect]);
        removeClass([args.element], [dragging2]);
      }
    };
    DashboardLayout2.prototype.getPanelBase = function(args) {
      var item;
      for (var i = 0; i < this.panelCollection.length; i++) {
        if (this.panelCollection[i].id === (args.element && args.element.id || args)) {
          item = this.panelCollection[i];
        }
      }
      return item;
    };
    DashboardLayout2.prototype.getPanel = function(row, column, excludeItems) {
      if (excludeItems && !(excludeItems instanceof Array)) {
        excludeItems = [excludeItems];
      }
      var sizeY = 1;
      while (row > -1) {
        var sizeX = 1;
        var col = column;
        while (col > -1) {
          var items = this.sortedArray[row];
          if (items) {
            var item = items[col];
            if (item && (!excludeItems || excludeItems.indexOf(item) === -1) && parseInt(item.getAttribute("data-sizeX"), 10) >= sizeX && parseInt(item.getAttribute("data-sizeY"), 10) >= sizeY) {
              return item;
            }
          }
          ++sizeX;
          --col;
        }
        --row;
        ++sizeY;
      }
      return null;
    };
    DashboardLayout2.prototype.setHolderPosition = function(args) {
      var sizeY = parseInt(args.element.getAttribute("data-sizeY"), 10);
      var col = parseInt(args.element.getAttribute("data-col"), 10);
      var row = parseInt(args.element.getAttribute("data-row"), 10);
      var sizeX = parseInt(args.element.getAttribute("data-sizeX"), 10);
      var widthValue = this.getCellSize()[0];
      var heightValue = this.getCellSize()[1];
      var top2 = row === 0 ? 0 : row * (heightValue + this.cellSpacing[1]);
      var left = col === 0 ? 0 : col * (widthValue + this.cellSpacing[0]);
      var cellSizeOne = this.getCellSize()[1];
      var cellSizeZero = this.getCellSize()[0];
      this.elementRef.top = this.shadowEle.style.top = top2 + "px";
      this.elementRef.left = this.shadowEle.style.left = left + "px";
      this.elementRef.height = this.shadowEle.style.height = sizeY * cellSizeOne + (sizeY - 1) * this.cellSpacing[1] + "px";
      this.elementRef.width = this.shadowEle.style.width = sizeX * cellSizeZero + (sizeX - 1) * this.cellSpacing[0] + "px";
    };
    DashboardLayout2.prototype.getCellInstance = function(idValue) {
      var currentCellInstance;
      for (var i = 0; i < this.panels.length; i++) {
        if (this.panels[i].id === idValue) {
          currentCellInstance = this.panels[i];
        }
      }
      return currentCellInstance;
    };
    DashboardLayout2.prototype.addPanel = function(panel2) {
      this.panelsSizeY = 0;
      this.maxCol();
      if (!panel2.minSizeX) {
        panel2.minSizeX = 1;
      }
      if (!panel2.minSizeY) {
        panel2.minSizeY = 1;
      }
      if (!panel2.id) {
        panel2.id = "layout_" + this.panelID.toString();
        this.panelID = this.panelID + 1;
      }
      var panelProp = new Panel(this, "panels", panel2, true);
      this.panels.push(panelProp);
      this.panelsInitialModel = this.cloneModels(this.panels);
      this.setMinMaxValues(panelProp);
      if (this.maxColumnValue < panelProp.col || this.maxColumnValue < panelProp.col + panelProp.sizeX) {
        this.panelPropertyChange(panelProp, { col: this.maxColumnValue - panelProp.sizeX });
      }
      var cell = this.renderCell(panelProp, true, null);
      this.oldRowCol[panelProp.id] = { row: panelProp.row, col: panelProp.col };
      this.cloneObject[panelProp.id] = { row: panelProp.row, col: panelProp.col };
      this.updateOldRowColumn();
      this.element.insertAdjacentElement("afterbegin", cell);
      this.addPanelCalled = true;
      if (this.checkMediaQuery()) {
        this.checkMediaQuerySizing();
        this.removeResizeClasses(this.panelCollection);
      } else {
        this.mainElement = cell;
        if (!this.checkCollision) {
          this.checkCollision = [];
        }
        this.setPanelPosition(cell, panelProp.row, panelProp.col);
        this.updatePanelLayout(cell, panelProp);
      }
      this.addPanelCalled = false;
      if (this.allowDragging && this.mediaQuery ? !this.checkMediaQuery() : false) {
        this.enableDraggingContent([document.getElementById(panelProp.id)]);
      }
      this.setClasses([cell]);
      if (this.allowFloating) {
        this.mainElement = null;
        this.moveItemsUpwards();
      }
      this.updateOldRowColumn();
      this.sortedPanel();
      this.updateCloneArrayObject();
      if (this.allowResizing) {
        for (var i = 0; i < cell.querySelectorAll(".e-resize").length; i++) {
          var eventName = Browser.info.name === "msie" ? "mousedown pointerdown" : "mousedown";
          EventHandler.add(cell.querySelectorAll(".e-resize")[i], eventName, this.downResizeHandler, this);
          if (Browser.info.name !== "msie") {
            EventHandler.add(cell.querySelectorAll(".e-resize")[i], "touchstart", this.touchDownResizeHandler, this);
          }
        }
      }
      this.checkForChanges(false, [panelProp]);
    };
    DashboardLayout2.prototype.updatePanel = function(panel2) {
      this.panelsSizeY = 0;
      if (!panel2.id) {
        return;
      }
      var panelInstance = this.getCellInstance(panel2.id);
      if (!panelInstance) {
        return;
      }
      this.maxCol();
      panel2.col = panel2.col < 1 ? 0 : panel2.col > this.columns ? this.columns - 1 : panel2.col;
      if (isNullOrUndefined(panel2.col)) {
        panel2.col = panelInstance.col;
      }
      this.panelPropertyChange(panelInstance, panel2);
      this.setMinMaxValues(panelInstance);
      var cell = document.getElementById(panel2.id);
      this.mainElement = cell;
      var cssClass = panelInstance.cssClass ? panelInstance.cssClass.split(" ") : null;
      this.panelContent = cell.querySelector(".e-panel-container") ? cell.querySelector(".e-panel-container") : this.createSubElement(cssClass, cell.id + "_content", panelContainer);
      cell.appendChild(this.panelContent);
      if (panelInstance.header) {
        var headerTemplateElement = cell.querySelector(".e-panel-header") ? cell.querySelector(".e-panel-header") : this.createSubElement([], cell.id + "template", "");
        addClass([headerTemplateElement], [header]);
        headerTemplateElement.innerHTML = "";
        var id = this.element.id + "HeaderTemplate" + panelInstance.id;
        this.renderTemplate(panelInstance.header, headerTemplateElement, id, true, "header");
        this.panelContent.appendChild(headerTemplateElement);
        this.renderReactTemplates();
      } else {
        if (cell.querySelector(".e-panel-header")) {
          detach(cell.querySelector(".e-panel-header"));
        }
      }
      if (panelInstance.content) {
        var cssClass_2 = panelInstance.cssClass ? panelInstance.cssClass.split(" ") : null;
        this.panelBody = cell.querySelector(".e-panel-content") ? cell.querySelector(".e-panel-content") : this.createSubElement(cssClass_2, cell.id + "_body", panelContent);
        this.panelBody.innerHTML = "";
        var headerHeight = this.panelContent.querySelector(".e-panel-header") ? window.getComputedStyle(this.panelContent.querySelector(".e-panel-header")).height : "0px";
        var contentHeightValue = "calc( 100% - " + headerHeight + ")";
        setStyleAttribute(this.panelBody, { height: contentHeightValue });
        var id = this.element.id + "ContentTemplate" + panelInstance.id;
        this.renderTemplate(panelInstance.content, this.panelBody, id, true, "content");
        this.panelContent.appendChild(this.panelBody);
        this.renderReactTemplates();
      } else {
        if (cell.querySelector(".e-panel-content")) {
          detach(cell.querySelector(".e-panel-content"));
        }
      }
      this.setXYAttributes(cell, panelInstance);
      this.setHeightAndWidth(cell, panelInstance);
      this.setPanelPosition(cell, panelInstance.row, panelInstance.col);
      this.updatePanelLayout(cell, panelInstance);
      if (this.checkMediaQuery()) {
        this.checkMediaQuerySizing();
      }
      this.mainElement = null;
      this.updatePanels();
      this.updateCloneArrayObject();
    };
    DashboardLayout2.prototype.updateCloneArrayObject = function() {
      this.cloneArray = this.sortedArray;
      this.cloneObject = JSON.parse(JSON.stringify(this.oldRowCol));
    };
    DashboardLayout2.prototype.serialize = function() {
      var cloneModel = this.cloneModels(this.panels);
      var customObject = [];
      for (var i = 0; i < cloneModel.length; i++) {
        customObject.push({
          id: cloneModel[i].id,
          row: cloneModel[i].row,
          col: cloneModel[i].col,
          sizeX: cloneModel[i].sizeX,
          sizeY: cloneModel[i].sizeY,
          minSizeX: cloneModel[i].minSizeX,
          minSizeY: cloneModel[i].minSizeY,
          maxSizeX: cloneModel[i].maxSizeX,
          maxSizeY: cloneModel[i].maxSizeY
        });
      }
      return customObject;
    };
    DashboardLayout2.prototype.removeAll = function() {
      this.removeAllCalled = true;
      for (var i = 0; i < this.panelCollection.length; i++) {
        detach(this.panelCollection[i]);
        this.clearTemplate();
      }
      this.removeAllPanel();
      this.rows = 0;
      this.gridPanelCollection = [];
      this.setHeightWidth();
      this.sortedPanel();
      this.sortedArray = [];
      this.overlapElementClone = [];
      this.overlapElement = [];
      this.overlapSubElementClone = [];
      this.panelCollection = [];
      this.oldRowCol = {};
      this.cloneObject = {};
      var clonedPanels = this.cloneModels(this.panels);
      this.setProperties({ panels: [] }, true);
      this.updatePanels();
      this.updateCloneArrayObject();
      this.checkForChanges(false, null, clonedPanels);
      this.removeAllCalled = false;
    };
    DashboardLayout2.prototype.removePanel = function(id) {
      var _this = this;
      this.panelsSizeY = 0;
      this.panelsInitialModel = this.cloneModels(this.panels);
      var removedPanel;
      for (var i = 0; i < this.panelCollection.length; i++) {
        if (this.panelCollection[i].id === id) {
          detach(this.panelCollection[i]);
          this.panelCollection.splice(i, 1);
        }
        if (this.panels[i].id === id) {
          removedPanel = this.panels[i];
          this.panels.splice(i, 1);
          this.panelsInitialModel.splice(i, 1);
          this.updateOldRowColumn();
          this.sortedPanel();
        }
      }
      this.updatePanels();
      if (this.checkMediaQuery()) {
        this.isPanelRemoved = true;
        this.checkMediaQuerySizing();
        this.isPanelRemoved = false;
      }
      this.gridPanelCollection.forEach(function(item) {
        if (item.id === id) {
          _this.gridPanelCollection.splice(_this.gridPanelCollection.indexOf(item), 1);
        }
      });
      this.updateCloneArrayObject();
      this.checkForChanges(false, null, [removedPanel]);
    };
    DashboardLayout2.prototype.movePanel = function(id, row, col) {
      this.movePanelCalled = true;
      this.panelsInitialModel = this.cloneModels(this.panels);
      var panelInstance = this.getCellInstance(id);
      if (isNaN(row) || row === null || (isNaN(col) || col === null) || !panelInstance) {
        return;
      }
      if (col < 0) {
        col = 0;
      } else if (col > this.columns) {
        col = this.columns - panelInstance.sizeX;
      }
      this.panelPropertyChange(panelInstance, { row, col });
      var ele = document.getElementById(id);
      this.mainElement = ele;
      this.startRow = parseInt(ele.getAttribute("data-row"), 10);
      this.startCol = parseInt(ele.getAttribute("data-col"), 10);
      this.setAttributes({ value: { col: col.toString(), row: row.toString() } }, ele);
      this.updateOldRowColumn();
      this.setPanelPosition(ele, row, col);
      this.updatePanelLayout(ele, panelInstance);
      this.updateRowHeight();
      this.updatePanels();
      this.updateCloneArrayObject();
      this.mainElement = null;
      if (this.allowFloating) {
        this.moveItemsUpwards();
      }
      this.movePanelCalled = false;
      this.checkForChanges(false);
    };
    DashboardLayout2.prototype.setAttributes = function(value, ele) {
      for (var i = 0; i < Object.keys(value).length; i++) {
        if (Object.keys(value)) {
          if (value[Object.keys(value)[i]].col) {
            ele.setAttribute("data-col", value[Object.keys(value)[i]].col.toString());
          }
          if (value[Object.keys(value)[i]].row) {
            ele.setAttribute("data-row", value[Object.keys(value)[i]].row.toString());
          }
          if (value[Object.keys(value)[i]].sizeX) {
            ele.setAttribute("data-sizeX", value[Object.keys(value)[i]].sizeX.toString());
          }
          if (value[Object.keys(value)[i]].sizeY) {
            ele.setAttribute("data-sizeY", value[Object.keys(value)[i]].sizeY.toString());
          }
          if (value[Object.keys(value)[i]].minSizeX) {
            ele.setAttribute("data-minSizeX", value[Object.keys(value)[i]].minSizeX.toString());
          }
          if (value[Object.keys(value)[i]].minSizeY) {
            ele.setAttribute("data-minSizeY", value[Object.keys(value)[i]].minSizeY.toString());
          }
          if (value[Object.keys(value)[i]].maxSizeX) {
            ele.setAttribute("data-maxSizeY", value[Object.keys(value)[i]].maxSizeX.toString());
          }
          if (value[Object.keys(value)[i]].maxSizeY) {
            ele.setAttribute("data-maxSizeY", value[Object.keys(value)[i]].maxSizeY.toString());
          }
        }
      }
    };
    DashboardLayout2.prototype.resizePanel = function(id, sizeX, sizeY) {
      this.panelsInitialModel = this.cloneModels(this.panels);
      var panelInstance = this.getCellInstance(id);
      this.resizeCalled = true;
      var ele = document.getElementById(id);
      var args = { event: null, element: ele, isInteracted: false };
      this.trigger("resizeStart", args);
      this.panelPropertyChange(panelInstance, { sizeX, sizeY });
      this.setMinMaxValues(panelInstance);
      this.checkMinMaxValues(panelInstance);
      this.mainElement = ele;
      this.setAttributes({ value: { sizeX: panelInstance.sizeX.toString(), sizeY: panelInstance.sizeY.toString() } }, ele);
      this.setHeightAndWidth(ele, panelInstance);
      this.updatePanelLayout(ele, panelInstance);
      this.updatePanels();
      this.updateRowHeight();
      this.resizeCalled = false;
      this.trigger("resizeStop", args);
      this.checkForChanges(false);
    };
    DashboardLayout2.prototype.destroy = function() {
      EventHandler.remove(window, "resize", this.refreshListener);
      removeClass([this.element], ["e-dashboardlayout", "e-lib", "e-responsive", "e-control"]);
      this.element.removeAttribute("style");
      for (var i = 0; i < this.dragCollection.length; i++) {
        this.dragCollection[i].destroy();
      }
      this.removeAllPanel();
      _super.prototype.destroy.call(this);
      this.clearTemplate();
      this.renderReactTemplates();
    };
    DashboardLayout2.prototype.removeAllPanel = function() {
      while (this.element.firstElementChild) {
        detach(this.element.firstElementChild);
        this.clearTemplate();
      }
    };
    DashboardLayout2.prototype.setEnableRtl = function() {
      if (this.enableRtl === true) {
        addClass([this.element], "e-rtl");
      } else {
        removeClass([this.element], "e-rtl");
      }
    };
    DashboardLayout2.prototype.updateCellSizeAndSpacing = function() {
      this.panelResponsiveUpdate();
      this.setHeightWidth();
      this.getRowColumn();
      for (var i = 0; i < this.element.querySelectorAll(".e-panel").length; i++) {
        var ele = this.element.querySelectorAll(".e-panel")[i];
        var panelModel = this.getCellInstance(ele.id);
        this.setHeightAndWidth(ele, panelModel);
        this.setPanelPosition(ele, panelModel.row, panelModel.col);
      }
    };
    DashboardLayout2.prototype.updatePanelsDynamically = function(panels) {
      this.removeAll();
      this.setProperties({ panels }, true);
      this.setOldRowCol();
      if (this.table) {
        this.table.remove();
      }
      this.initialize();
      if (this.checkMediaQuery()) {
        this.refresh();
      }
      if (this.showGridLines) {
        this.initGridLines();
      }
    };
    DashboardLayout2.prototype.checkForIDValues = function(panels) {
      var _this = this;
      if (!isNullOrUndefined(panels) && panels.length > 0) {
        this.panelID = 0;
        panels.forEach(function(panel2) {
          if (!panel2.id) {
            _this.panelPropertyChange(panel2, { id: "layout_" + _this.panelID.toString() });
            _this.panelID = _this.panelID + 1;
          }
        });
      } else {
        this.restrictDynamicUpdate = true;
      }
    };
    DashboardLayout2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      if (newProp.panels && newProp.panels.length > 0 && newProp.panels[0] instanceof Panel) {
        this.checkForIDValues(newProp.panels);
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "enableRtl":
            this.setProperties({ enableRtl: newProp.enableRtl }, true);
            this.setEnableRtl();
            break;
          case "mediaQuery":
            this.setProperties({ mediaQuery: newProp.mediaQuery }, true);
            if (this.checkMediaQuery()) {
              this.checkMediaQuerySizing();
            }
            break;
          case "allowDragging":
            this.setProperties({ allowDragging: newProp.allowDragging }, true);
            this.ensureDrag();
            break;
          case "allowResizing":
            this.setProperties({ allowResizing: newProp.allowResizing }, true);
            if (this.allowResizing) {
              this.setClasses(this.panelCollection);
              this.resizeEvents();
            } else {
              var panelElements = this.element.querySelectorAll(".e-panel .e-panel-container .e-resize");
              for (var i = 0; i < panelElements.length; i++) {
                var eventName = Browser.info.name === "msie" ? "mousedown pointerdown" : "mousedown";
                var element = panelElements[i];
                EventHandler.remove(element, eventName, this.downResizeHandler);
                if (Browser.info.name !== "msie") {
                  EventHandler.remove(element, "touchstart", this.touchDownResizeHandler);
                }
              }
              this.removeResizeClasses(this.panelCollection);
            }
            break;
          case "cellSpacing":
            this.setProperties({ cellSpacing: newProp.cellSpacing }, true);
            this.updateCellSizeAndSpacing();
            this.updateGridLines();
            break;
          case "draggableHandle":
            this.setProperties({ draggableHandle: newProp.draggableHandle }, true);
            this.ensureDrag();
            break;
          case "allowFloating":
            this.setProperties({ allowFloating: newProp.allowFloating }, true);
            this.moveItemsUpwards();
            break;
          case "showGridLines":
            if (this.showGridLines) {
              this.setProperties({ showGridLines: newProp.showGridLines }, true);
              this.initGridLines();
            } else {
              if (this.table) {
                detach(this.table);
              }
            }
            break;
          case "allowPushing":
            this.setProperties({ allowPushing: newProp.allowPushing }, true);
            break;
          case "panels":
            if (!newProp.columns && !this.restrictDynamicUpdate && (newProp.panels[0] && newProp.panels.length > 0)) {
              this.isRenderComplete = false;
              this.updatePanelsDynamically(newProp.panels);
              this.isRenderComplete = true;
            } else if (!(newProp.panels[0] && newProp.panels.length)) {
              this.isRenderComplete = false;
              this.updatePanelsDynamically(this.panels);
              this.isRenderComplete = true;
            } else {
              this.restrictDynamicUpdate = false;
            }
            break;
          case "columns":
            this.isRenderComplete = false;
            if (newProp.panels) {
              this.updatePanelsDynamically(newProp.panels);
            }
            this.setProperties({ columns: newProp.columns }, true);
            this.panelCollection = [];
            this.maxColumnValue = this.columns;
            this.calculateCellSize();
            this.panels.forEach(function(panel2) {
              _this.setMinMaxValues(panel2);
              if (_this.maxColumnValue < panel2.col || _this.maxColumnValue < panel2.col + panel2.sizeX) {
                var colValue = _this.maxColumnValue - panel2.sizeX;
                _this.panelPropertyChange(panel2, { col: colValue < 0 ? 0 : colValue });
                _this.setXYAttributes(document.getElementById(panel2.id), panel2);
              }
              _this.setHeightAndWidth(document.getElementById(panel2.id), panel2);
              _this.panelCollection.push(document.getElementById(panel2.id));
              _this.setPanelPosition(document.getElementById(panel2.id), panel2.row, panel2.col);
              _this.mainElement = document.getElementById(panel2.id);
              _this.updatePanelLayout(document.getElementById(panel2.id), panel2);
              _this.mainElement = null;
            });
            this.updatePanels();
            this.updateCloneArrayObject();
            this.isRenderComplete = true;
            this.updateGridLines();
            break;
        }
      }
    };
    DashboardLayout2.prototype.getPersistData = function() {
      var keyEntity = ["panels"];
      return this.addOnPersist(keyEntity);
    };
    DashboardLayout2.prototype.mergePersistPanelData = function(persistedData) {
      var data = window.localStorage.getItem(this.getModuleName() + this.element.id);
      if (!(isNullOrUndefined(data) || data === "") || !isNullOrUndefined(persistedData)) {
        var dataObj = !isNullOrUndefined(persistedData) ? persistedData : JSON.parse(data);
        var keys = Object.keys(dataObj);
        this.isProtectedOnChange = true;
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
          var key = keys_1[_i];
          if (typeof getValue(key, this) === "object" && !isNullOrUndefined(getValue(key, this))) {
            if (Array.isArray(getValue(key, this)) && key === "panels") {
              this.mergePanels(dataObj[key], this[key]);
            }
          }
        }
        this.isProtectedOnChange = false;
      }
    };
    DashboardLayout2.prototype.mergePanels = function(sortedPanels, panels) {
      var storedColumns = sortedPanels;
      var _loop_7 = function(i2) {
        this_5.checkForIDValues(panels);
        var localPanel = panels.filter(function(pan) {
          return pan.id === storedColumns[i2].id;
        })[0];
        if (!isNullOrUndefined(localPanel)) {
          storedColumns[i2] = extend(localPanel, storedColumns[i2], {}, true);
        }
      };
      var this_5 = this;
      for (var i = 0; i < storedColumns.length; i++) {
        _loop_7(i);
      }
    };
    DashboardLayout2.prototype.getModuleName = function() {
      return "DashboardLayout";
    };
    __decorate11([
      Property(true)
    ], DashboardLayout2.prototype, "allowDragging", void 0);
    __decorate11([
      Property(false)
    ], DashboardLayout2.prototype, "allowResizing", void 0);
    __decorate11([
      Property(true)
    ], DashboardLayout2.prototype, "allowPushing", void 0);
    __decorate11([
      Property(true)
    ], DashboardLayout2.prototype, "enableHtmlSanitizer", void 0);
    __decorate11([
      Property(true)
    ], DashboardLayout2.prototype, "allowFloating", void 0);
    __decorate11([
      Property(1)
    ], DashboardLayout2.prototype, "cellAspectRatio", void 0);
    __decorate11([
      Property([5, 5])
    ], DashboardLayout2.prototype, "cellSpacing", void 0);
    __decorate11([
      Property(1)
    ], DashboardLayout2.prototype, "columns", void 0);
    __decorate11([
      Property(false)
    ], DashboardLayout2.prototype, "showGridLines", void 0);
    __decorate11([
      Property(null)
    ], DashboardLayout2.prototype, "draggableHandle", void 0);
    __decorate11([
      Property("en-US")
    ], DashboardLayout2.prototype, "locale", void 0);
    __decorate11([
      Property("max-width: 600px")
    ], DashboardLayout2.prototype, "mediaQuery", void 0);
    __decorate11([
      Collection([], Panel)
    ], DashboardLayout2.prototype, "panels", void 0);
    __decorate11([
      Property(["e-south-east"])
    ], DashboardLayout2.prototype, "resizableHandles", void 0);
    __decorate11([
      Event()
    ], DashboardLayout2.prototype, "change", void 0);
    __decorate11([
      Event()
    ], DashboardLayout2.prototype, "dragStart", void 0);
    __decorate11([
      Event()
    ], DashboardLayout2.prototype, "drag", void 0);
    __decorate11([
      Event()
    ], DashboardLayout2.prototype, "dragStop", void 0);
    __decorate11([
      Event()
    ], DashboardLayout2.prototype, "resizeStart", void 0);
    __decorate11([
      Event()
    ], DashboardLayout2.prototype, "resize", void 0);
    __decorate11([
      Event()
    ], DashboardLayout2.prototype, "resizeStop", void 0);
    __decorate11([
      Event()
    ], DashboardLayout2.prototype, "created", void 0);
    __decorate11([
      Event()
    ], DashboardLayout2.prototype, "destroyed", void 0);
    DashboardLayout2 = __decorate11([
      NotifyPropertyChanges
    ], DashboardLayout2);
    return DashboardLayout2;
  }(Component)
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/common/utility.js
function updatePath(node, data, instance) {
  var text = getValue("name", data);
  var id = node.getAttribute("data-id");
  var newText = isNullOrUndefined(id) ? text : id;
  instance.setProperties({ path: getPath(node, newText, instance.hasId) }, true);
  instance.pathId = getPathId(node);
  instance.pathNames = getPathNames(node, text);
}
function getPath(element, text, hasId) {
  var matched = getParents(element, text, false, hasId);
  var path = hasId ? "" : "/";
  var len = matched.length - (hasId ? 1 : 2);
  for (var i = len; i >= 0; i--) {
    path += matched[i] + "/";
  }
  return path;
}
function getPathId(node) {
  var matched = getParents(node, node.getAttribute("data-uid"), true);
  var ids = [];
  for (var i = matched.length - 1; i >= 0; i--) {
    ids.push(matched[i]);
  }
  return ids;
}
function getPathNames(element, text) {
  var matched = getParents(element, text, false);
  var names = [];
  for (var i = matched.length - 1; i >= 0; i--) {
    names.push(matched[i]);
  }
  return names;
}
function getParents(element, text, isId, hasId) {
  var matched = [text];
  var el = element.parentNode;
  while (!isNullOrUndefined(el)) {
    if (matches(el, "." + LIST_ITEM)) {
      var parentText = isId ? el.getAttribute("data-uid") : hasId ? el.getAttribute("data-id") : select("." + LIST_TEXT, el).textContent;
      matched.push(parentText);
    }
    el = el.parentNode;
    if (el.classList.contains(TREE_VIEW)) {
      break;
    }
  }
  return matched;
}
function generatePath(parent) {
  var key = parent.hasId ? "id" : "name";
  var newPath = parent.hasId ? "" : "/";
  var i = parent.hasId ? 0 : 1;
  for (i; i < parent.pathId.length; i++) {
    var data = getValue(parent.pathId[i], parent.feParent);
    newPath += getValue(key, data) + "/";
  }
  parent.setProperties({ path: newPath }, true);
}
function removeActive(parent) {
  if (parent.isCut) {
    removeBlur(parent);
    parent.selectedNodes = [];
    parent.actionRecords = [];
    parent.enablePaste = false;
    parent.notify(hidePaste, {});
  }
}
function activeElement(action, parent) {
  parent.isSearchCut = false;
  parent.actionRecords = [];
  parent.activeElements = [];
  parent.notify(cutCopyInit, {});
  if (parent.activeElements.length === 0) {
    return false;
  }
  removeBlur(parent);
  var blurEle = parent.activeElements;
  if (parent.activeModule !== "navigationpane") {
    parent.targetPath = parent.path;
  } else {
    parent.targetPath = getParentPath(parent.path);
  }
  var i = 0;
  if (blurEle) {
    getModule(parent, blurEle[0]);
    if (action === "cut") {
      while (i < blurEle.length) {
        addBlur(blurEle[i]);
        i++;
      }
    }
  }
  i = 0;
  parent.selectedNodes = [];
  parent.enablePaste = true;
  parent.notify(showPaste, {});
  while (i < parent.activeRecords.length) {
    parent.actionRecords.push(parent.activeRecords[i]);
    parent.selectedNodes.push(getValue("name", parent.activeRecords[i]));
    i++;
  }
  if ((parent.breadcrumbbarModule.searchObj.element.value !== "" || parent.isFiltered) && parent.activeModule !== "navigationpane") {
    parent.selectedNodes = [];
    parent.isSearchCut = true;
    var i_1 = 0;
    while (i_1 < parent.selectedItems.length) {
      parent.selectedNodes.push(parent.selectedItems[i_1]);
      i_1++;
    }
  }
  return true;
}
function addBlur(nodes) {
  nodes.classList.add(BLUR);
}
function removeBlur(parent, hover) {
  var blurEle = !hover ? parent.element.querySelectorAll("." + BLUR) : parent.element.querySelectorAll("." + HOVER);
  var i = 0;
  while (i < blurEle.length) {
    blurEle[i].classList.remove(!hover ? BLUR : HOVER);
    i++;
  }
}
function getModule(parent, element) {
  if (element) {
    if (element.classList.contains(ROW)) {
      parent.activeModule = "detailsview";
    } else if (closest(element, "." + LARGE_ICON)) {
      parent.activeModule = "largeiconsview";
    } else {
      parent.activeModule = "navigationpane";
    }
  }
}
function searchWordHandler(parent, value, isLayoutChange) {
  var searchWord;
  if (value.length === 0 && !parent.isFiltered) {
    parent.notify(pathColumn, { args: parent });
  }
  if (parent.searchSettings.filterType === "startsWith") {
    searchWord = value + "*";
  } else if (parent.searchSettings.filterType === "endsWith") {
    searchWord = "*" + value;
  } else {
    searchWord = "*" + value + "*";
  }
  parent.searchWord = searchWord;
  parent.itemData = [getPathObject(parent)];
  if (value.length > 0) {
    var caseSensitive = parent.searchSettings.ignoreCase;
    var hiddenItems = parent.showHiddenItems;
    Search(parent, isLayoutChange ? layoutChange : search, parent.path, searchWord, hiddenItems, !caseSensitive);
  } else {
    if (!parent.isFiltered) {
      if (parent.isSortByClicked) {
        parent.notify(layoutChange, { files: parent.oldView === "Details" ? parent.detailsviewModule.gridObj.dataSource : parent.largeiconsviewModule.allItems });
        parent.isSortByClicked = false;
      } else {
        read(parent, isLayoutChange ? layoutChange : search, parent.path);
      }
    } else {
      filter(parent, layoutChange);
    }
  }
}
function updateLayout(parent, view) {
  parent.oldView = parent.view;
  parent.setProperties({ view }, true);
  if (parent.breadcrumbbarModule.searchObj.element.value !== "" || parent.isFiltered) {
    parent.layoutSelectedItems = parent.selectedItems;
  }
  var searchWord = "";
  if (parent.breadcrumbbarModule.searchObj.element.value) {
    searchWord = parent.breadcrumbbarModule.searchObj.element.value;
  }
  parent.isLayoutChange = true;
  searchWordHandler(parent, searchWord, true);
}
function getTargetModule(parent, element) {
  var tartgetModule = "";
  if (element) {
    if (closest(element, "." + ROOT + "." + CONTROL + " ." + GRID_CONTENT)) {
      tartgetModule = "detailsview";
    } else if (closest(element, "." + LARGE_ICONS)) {
      tartgetModule = "largeiconsview";
    } else if (element.classList.contains("e-fullrow") || element.classList.contains("e-icon-expandable")) {
      tartgetModule = "navigationpane";
    } else if (closest(element, ".e-address-list-item")) {
      tartgetModule = "breadcrumbbar";
    } else {
      tartgetModule = "";
    }
  }
  parent.targetModule = tartgetModule;
}
function refresh(parent) {
  parent.itemData = [getPathObject(parent)];
  if (!hasReadAccess(parent.itemData[0])) {
    createDeniedDialog(parent, parent.itemData[0], permissionRead);
  } else {
    read(parent, refreshEnd, parent.path);
  }
}
function openAction(parent) {
  read(parent, openEnd, parent.path);
}
function getPathObject(parent) {
  return getValue(parent.pathId[parent.pathId.length - 1], parent.feParent);
}
function copyFiles(parent) {
  if (!activeElement("copy", parent)) {
    return;
  } else {
    parent.fileAction = "copy";
  }
}
function cutFiles(parent) {
  if (!activeElement("cut", parent)) {
    return;
  } else {
    parent.isCut = true;
    parent.fileAction = "move";
  }
}
function fileType(file) {
  var isFile2 = getValue("isFile", file);
  if (!isFile2) {
    return FOLDER;
  }
  var imageFormat = ["bmp", "dib", "jpg", "jpeg", "jpe", "jfif", "gif", "tif", "tiff", "png", "ico"];
  var audioFormat = ["mp3", "wav", "aac", "ogg", "wma", "aif", "fla", "m4a"];
  var videoFormat = ["webm", "mkv", "flv", "vob", "ogv", "ogg", "avi", "wmv", "mp4", "3gp"];
  var knownFormat = [
    "css",
    "exe",
    "html",
    "js",
    "msi",
    "pdf",
    "pptx",
    "ppt",
    "rar",
    "zip",
    "txt",
    "docx",
    "doc",
    "xlsx",
    "xls",
    "xml",
    "rtf",
    "php"
  ];
  var filetype = getValue("type", file);
  filetype = filetype.toLowerCase();
  if (filetype.indexOf(".") !== -1) {
    filetype = filetype.split(".").join("");
  }
  var iconType;
  if (imageFormat.indexOf(filetype) !== -1) {
    iconType = ICON_IMAGE;
  } else if (audioFormat.indexOf(filetype) !== -1) {
    iconType = ICON_MUSIC;
  } else if (videoFormat.indexOf(filetype) !== -1) {
    iconType = ICON_VIDEO;
  } else if (knownFormat.indexOf(filetype) !== -1) {
    iconType = "e-fe-" + filetype;
  } else {
    iconType = "e-fe-unknown e-fe-" + filetype;
  }
  return iconType;
}
function getImageUrl(parent, item) {
  var baseUrl = parent.ajaxSettings.getImageUrl ? parent.ajaxSettings.getImageUrl : parent.ajaxSettings.url;
  var pathUrl = baseUrl.indexOf("?") !== -1 ? "&path=" : "?path=";
  var imgUrl;
  var fileName = encodeURIComponent(getValue("name", item));
  var fPath = getValue("filterPath", item);
  if (parent.hasId) {
    var imgId = getValue("id", item);
    imgUrl = baseUrl + pathUrl + parent.path + "&id=" + imgId;
  } else if (!isNullOrUndefined(fPath)) {
    imgUrl = baseUrl + pathUrl + encodeURIComponent(fPath.replace(/\\/g, "/")) + fileName;
  } else {
    imgUrl = baseUrl + pathUrl + parent.path + fileName;
  }
  imgUrl = imgUrl + "&time=" + (/* @__PURE__ */ new Date()).getTime().toString();
  var eventArgs = {
    fileDetails: [item],
    imageUrl: imgUrl
  };
  parent.trigger("beforeImageLoad", eventArgs);
  return eventArgs.imageUrl;
}
function getFullPath(parent, data, path) {
  var filePath = getValue(parent.hasId ? "id" : "name", data) + "/";
  var fPath = getValue(parent.hasId ? "filterId" : "filterPath", data);
  if (!isNullOrUndefined(fPath)) {
    return fPath.replace(/\\/g, "/") + filePath;
  } else {
    return path + filePath;
  }
}
function getName(parent, data) {
  var name = getValue("name", data);
  var fPath = getValue("filterPath", data);
  if ((parent.breadcrumbbarModule.searchObj.element.value !== "" || parent.isFiltered) && !isNullOrUndefined(fPath)) {
    fPath = fPath.replace(/\\/g, "/");
    name = fPath.replace(parent.path, "") + name;
  }
  return name;
}
function getSortedData(parent, items) {
  if (items.length === 0) {
    return items;
  }
  var query;
  if (parent.sortOrder !== "None") {
    query = new Query().sortBy(parent.sortBy, parent.sortOrder.toLowerCase(), true).group("isFile");
  } else {
    query = new Query().group("isFile");
  }
  var lists = new DataManager(items).executeLocal(query);
  return getValue("records", lists);
}
function getObject(parent, key, value) {
  var currFiles = getValue(parent.pathId[parent.pathId.length - 1], parent.feFiles);
  var query = new Query().where(key, "equal", value);
  var lists = new DataManager(currFiles).executeLocal(query);
  return lists[0];
}
function createEmptyElement(parent, element, args) {
  var top2;
  var layoutElement = select("#" + parent.element.id + LAYOUT_ID, parent.element);
  var addressBarHeight = select("#" + parent.element.id + BREADCRUMBBAR_ID, layoutElement).offsetHeight;
  top2 = layoutElement.offsetHeight - addressBarHeight;
  if (parent.view === "Details") {
    top2 = top2 - select("." + GRID_HEADER, layoutElement).offsetHeight;
  }
  if (isNullOrUndefined(element.querySelector("." + EMPTY))) {
    var emptyDiv = createElement("div", { className: EMPTY });
    var emptyFolder = createElement("div", { className: LARGE_EMPTY_FOLDER });
    var emptyEle = createElement("div", { className: EMPTY_CONTENT });
    var dragFile = createElement("div", { className: EMPTY_INNER_CONTENT });
    if (parent.view === "Details") {
      element.querySelector("." + GRID_VIEW).appendChild(emptyDiv);
    } else {
      element.appendChild(emptyDiv);
    }
    emptyDiv.appendChild(emptyFolder);
    emptyDiv.appendChild(emptyEle);
    emptyDiv.appendChild(dragFile);
  }
  if (element.querySelector("." + EMPTY)) {
    if (!isNullOrUndefined(args.error)) {
      element.querySelector("." + EMPTY_CONTENT).innerHTML = getLocaleText(parent, "Access-Denied");
      element.querySelector("." + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, "Access-Details");
    } else if (parent.isFiltered) {
      element.querySelector("." + EMPTY_CONTENT).innerHTML = getLocaleText(parent, "Filter-Empty");
      element.querySelector("." + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, "Filter-Key");
    } else if (parent.breadcrumbbarModule.searchObj.element.value !== "") {
      element.querySelector("." + EMPTY_CONTENT).innerHTML = getLocaleText(parent, "Search-Empty");
      element.querySelector("." + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, "Search-Key");
    } else {
      element.querySelector("." + EMPTY_CONTENT).innerHTML = getLocaleText(parent, "Folder-Empty");
      element.querySelector("." + EMPTY_INNER_CONTENT).innerHTML = getLocaleText(parent, "File-Upload");
    }
  }
  var eDiv = select("." + EMPTY, element);
  top2 = (top2 - eDiv.offsetHeight) / 2;
  eDiv.style.marginTop = top2 + "px";
}
function getDirectories(files) {
  return new DataManager(files).executeLocal(new Query().where(isFile, "equal", false, false));
}
function setNodeId(result, rootId) {
  var dirs = getDirectories(result.files);
  for (var i = 0, len = dirs.length; i < len; i++) {
    setValue("_fm_id", rootId + "_" + i, dirs[i]);
  }
}
function setDateObject(args, localeString, dateFormat) {
  for (var i = 0; i < args.length; i++) {
    var createdDate = new Date(getValue("dateCreated", args[i]));
    var modifiedDate = new Date(getValue("dateModified", args[i]));
    if (isNullOrUndefined(dateFormat)) {
      dateFormat = "MM/dd/yyyy";
    }
    setValue("_fm_created", localeString.formatDate(createdDate, { format: dateFormat }), args[i]);
    setValue("_fm_modified", localeString.formatDate(modifiedDate, { format: dateFormat }), args[i]);
  }
}
function getLocaleText(parent, text) {
  var locale = parent.localeObj.getConstant(text);
  return locale === "" ? text : locale;
}
function getCssClass(parent, css) {
  var cssClass = parent.cssClass;
  cssClass = isNullOrUndefined(cssClass) || cssClass === "" ? css : cssClass + " " + css;
  return cssClass;
}
function sortbyClickHandler(parent, args) {
  var tick;
  parent.isSortByClicked = true;
  if (args.item.id.indexOf("ascending") !== -1 || args.item.id.indexOf("descending") !== -1 || args.item.id.indexOf("none") !== -1) {
    tick = true;
  } else {
    tick = false;
  }
  if (!tick) {
    parent.sortBy = getSortField(args.item.id, parent);
  } else {
    parent.sortOrder = getSortField(args.item.id);
  }
  parent.itemData = [getPathObject(parent)];
  if (parent.view === "Details") {
    if (parent.isMobile) {
      updateLayout(parent, "Details");
    } else {
      parent.notify(sortColumn, { module: "detailsview" });
      parent.isSortByClicked = false;
    }
  }
  if (parent.view === "LargeIcons") {
    updateLayout(parent, "LargeIcons");
  }
  parent.notify(sortByChange, {});
}
function getSortField(id, parent) {
  var text = id.substring(id.lastIndexOf("_") + 1);
  var field = text;
  var column;
  if (parent) {
    column = parent.detailsViewSettings.columns;
  }
  switch (text) {
    case "date":
      for (var i = 0, len = column.length; i < len; i++) {
        if (column[i].field === "dateModified" || column[i].field === "dateCreated") {
          field = column[i].field;
          break;
        } else {
          field = "_fm_modified";
        }
      }
      break;
    case "ascending":
      field = "Ascending";
      break;
    case "descending":
      field = "Descending";
      break;
    case "none":
      field = "None";
      break;
  }
  return field;
}
function setNextPath(parent, path) {
  var currfolders = path.split("/");
  var folders = parent.originalPath.split("/");
  var root = getValue(parent.pathId[0], parent.feParent);
  var key = isNullOrUndefined(getValue("id", root)) ? "name" : "id";
  for (var i = currfolders.length - 1, len = folders.length - 1; i < len; i++) {
    var eventName = folders[i + 1] === "" ? finalizeEnd : initialEnd2;
    var newPath = folders[i] === "" ? "/" : parent.path + folders[i] + "/";
    var data = getObject(parent, key, folders[i]);
    var id = getValue("_fm_id", data);
    parent.setProperties({ path: newPath }, true);
    parent.pathId.push(id);
    parent.itemData = [data];
    parent.pathNames.push(getValue("name", data));
    read(parent, eventName, parent.path);
    break;
  }
}
function openSearchFolder(parent, data) {
  parent.notify(clearPathInit, { selectedNode: parent.pathId[parent.pathId.length - 1] });
  parent.originalPath = getFullPath(parent, data, parent.path);
  read(parent, parent.path !== parent.originalPath ? initialEnd2 : finalizeEnd, parent.path);
}
function pasteHandler(parent) {
  parent.isDragDrop = false;
  if (parent.selectedNodes.length !== 0 && parent.enablePaste) {
    var path = parent.folderPath === "" ? parent.path : parent.folderPath;
    var subFolder = validateSubFolder(parent, parent.actionRecords, path, parent.path);
    if (!subFolder) {
      if (parent.fileAction === "move" && parent.targetPath !== path || parent.fileAction === "copy") {
        parent.notify(pasteInit, {});
        paste2(parent, parent.targetPath, parent.selectedNodes, path, parent.fileAction, [], parent.actionRecords);
      } else {
        parent.enablePaste = false;
        parent.notify(hidePaste, {});
        removeBlur(parent);
        var result = {
          files: null,
          error: {
            code: "402",
            message: getLocaleText(parent, "Same-Folder-Error"),
            fileExists: null
          }
        };
        createDialog(parent, "Error", result);
      }
    }
  }
}
function validateSubFolder(parent, data, dropPath2, dragPath) {
  var subFolder = false;
  for (var i = 0; i < data.length; i++) {
    if (!getValue("isFile", data[i])) {
      var tempTarget = getFullPath(parent, data[i], dragPath);
      if (dropPath2.indexOf(tempTarget) === 0) {
        var result = {
          files: null,
          error: {
            code: "402",
            message: getLocaleText(parent, "Sub-Folder-Error"),
            fileExists: null
          }
        };
        createDialog(parent, "Error", result);
        subFolder = true;
        break;
      }
    } else {
      var srcData = parent.dragNodes[i];
      var len = 0;
      if (srcData) {
        len = srcData.lastIndexOf("/");
      }
      var path = "";
      if (len > 0) {
        path = dragPath + srcData.substring(0, len + 1);
      }
      if (path === dropPath2) {
        var result = {
          files: null,
          error: {
            code: "402",
            message: getLocaleText(parent, "Same-Folder-Error"),
            fileExists: null
          }
        };
        createDialog(parent, "Error", result);
        subFolder = true;
        break;
      }
    }
  }
  return subFolder;
}
function dropHandler(parent) {
  parent.isDragDrop = true;
  if (parent.dragData.length !== 0) {
    parent.dragPath = parent.dragPath.replace(/\\/g, "/");
    parent.dropPath = parent.dropPath.replace(/\\/g, "/");
    var subFolder = validateSubFolder(parent, parent.dragData, parent.dropPath, parent.dragPath);
    if (!subFolder && parent.dragPath !== parent.dropPath) {
      parent.itemData = [parent.dropData];
      paste2(parent, parent.dragPath, parent.dragNodes, parent.dropPath, "move", [], parent.dragData);
      parent.notify(pasteInit, {});
    }
  }
}
function getParentPath(oldPath) {
  var path = oldPath.split("/");
  var newPath = path[0] + "/";
  for (var i = 1; i < path.length - 2; i++) {
    newPath += path[i] + "/";
  }
  return newPath;
}
function getDirectoryPath(parent, args) {
  var filePath = getValue(parent.hasId ? "id" : "name", args.cwd) + "/";
  var fPath = getValue(parent.hasId ? "filterId" : "filterPath", args.cwd);
  if (!isNullOrUndefined(fPath)) {
    if (fPath === "") {
      return parent.hasId ? filePath : "/";
    }
    return fPath.replace(/\\/g, "/") + filePath;
  } else {
    return parent.path + filePath;
  }
}
function doPasteUpdate(parent, operation, result) {
  if (operation === "move") {
    if (!parent.isDragDrop) {
      parent.enablePaste = false;
      parent.notify(hidePaste, {});
      parent.notify(cutEnd, result);
    } else {
      parent.notify(dragEnd, result);
    }
  }
  if (parent.duplicateItems.length === 0) {
    parent.pasteNodes = [];
  }
  var flag = false;
  for (var count2 = 0; count2 < result.files.length && !flag; count2++) {
    parent.pasteNodes.push(result.files[count2][parent.hasId ? "id" : "name"]);
    if (parent.isDragDrop) {
      parent.droppedObjects.push(result.files[count2]);
    }
  }
  parent.duplicateItems = [];
  parent.duplicateRecords = [];
  if (parent.isDragDrop && !parent.isPasteError) {
    parent.isDropEnd = true;
  } else {
    parent.isDropEnd = false;
  }
  if (!parent.isDragDrop || parent.path === parent.dragPath || parent.path === parent.dropPath || parent.isSearchDrag) {
    parent.isPathDrag = false;
    read(parent, pasteEnd, parent.path);
  } else {
    readDropPath(parent);
  }
  parent.trigger("success", { action: operation, result });
}
function readDropPath(parent) {
  var pathId = getValue("_fm_id", parent.dropData);
  parent.expandedId = pathId;
  parent.itemData = [parent.dropData];
  if (parent.isPathDrag) {
    parent.notify(pathDrag, parent.itemData);
  } else {
    if (parent.navigationpaneModule) {
      var node = select('[data-uid="' + pathId + '"]', parent.navigationpaneModule.treeObj.element);
      if (!node) {
        var liElement = document.querySelector('[data-id = "' + getValue("id", parent.dropData) + '"]');
        pathId = liElement.getAttribute("data-uid");
        node = select('[data-uid="' + pathId + '"]', parent.navigationpaneModule.treeObj.element);
      }
      updatePath(node, parent.dropData, parent);
    }
    read(parent, dropPath, parent.dropPath);
  }
}
function getDuplicateData(parent, name) {
  var data = null;
  var records = parent.isDragDrop ? parent.dragData : parent.actionRecords;
  for (var i = 0; i < records.length; i++) {
    if (getValue("name", records[i]) === name) {
      data = records[i];
      break;
    }
  }
  return data;
}
function createVirtualDragElement(parent) {
  parent.isSearchDrag = false;
  if (parent.breadcrumbbarModule.searchObj.element.value !== "") {
    parent.isSearchDrag = true;
  }
  if (parent.activeModule !== "navigationpane") {
    parent.dragNodes = [];
    var i = 0;
    while (i < parent.selectedItems.length) {
      parent.dragNodes.push(parent.selectedItems[i]);
      i++;
    }
    if (parent.selectedItems.length === 0 && parent.dragData && parent.dragData.length === 1) {
      parent.dragNodes.push(getItemName(parent, parent.dragData[0]));
    }
  }
  var cloneIcon = parent.createElement("div", {
    className: "e-fe-icon " + fileType(parent.dragData[0])
  });
  var cloneName = parent.createElement("div", {
    className: "e-fe-name",
    innerHTML: parent.dragData[0].name
  });
  var virtualEle = parent.createElement("div", {
    className: "e-fe-content"
  });
  virtualEle.appendChild(cloneIcon);
  virtualEle.appendChild(cloneName);
  var ele = parent.createElement("div", {
    className: CLONE
  });
  ele.appendChild(virtualEle);
  if (parent.dragNodes.length > 1) {
    var badge = parent.createElement("span", {
      className: "e-fe-count",
      innerHTML: parent.dragNodes.length.toString(10)
    });
    ele.appendChild(badge);
  }
  parent.virtualDragElement = ele;
  parent.element.appendChild(parent.virtualDragElement);
}
function dragStopHandler(parent, args) {
  var dragArgs = args;
  dragArgs.cancel = false;
  if (parent.treeExpandTimer != null) {
    window.clearTimeout(parent.treeExpandTimer);
    parent.treeExpandTimer = null;
  }
  removeDropTarget(parent);
  parent.element.classList.remove("e-fe-drop", "e-no-drop");
  removeBlur(parent);
  parent.uploadObj.dropArea = select("#" + parent.element.id + CONTENT_ID, parent.element);
  var virtualEle = select("." + CLONE, parent.element);
  if (virtualEle) {
    detach(virtualEle);
  }
  getTargetModule(parent, args.target);
  parent.notify(dropInit, args);
  removeBlur(parent, "hover");
  dragArgs.fileDetails = parent.dragData;
  parent.trigger("fileDragStop", dragArgs, function(dragArgs2) {
    if (!dragArgs2.cancel && !isNullOrUndefined(parent.targetModule) && parent.targetModule !== "" && parent.dragCount > 2) {
      dropHandler(parent);
    }
    parent.dragCount = 0;
  });
}
function dragStartHandler(parent, args, dragObj) {
  var dragArgs = args;
  dragArgs.cancel = false;
  dragArgs.fileDetails = parent.dragData;
  parent.dragCount = 0;
  parent.droppedObjects = [];
  if (!parent.allowDragAndDrop || parent.activeModule === "navigationpane" && closest(args.element, "li").getAttribute("data-uid") === parent.pathId[0]) {
    dragArgs.cancel = true;
  }
  if (parent.activeModule === "navigationpane" && parent.pathId.indexOf(closest(args.element, "li").getAttribute("data-uid")) !== -1) {
    parent.isPathDrag = true;
  } else {
    parent.isPathDrag = false;
  }
  removeBlur(parent);
  if (dragArgs.cancel) {
    dragObj.intDestroy(args.event);
    dragCancel(parent);
  } else if (!dragArgs.cancel) {
    var i = 0;
    while (i < parent.activeElements.length) {
      addBlur(parent.activeElements[i]);
      i++;
    }
    parent.trigger("fileDragStart", dragArgs, function(dragArgs2) {
      if (dragArgs2.cancel) {
        dragObj.intDestroy(args.event);
        dragCancel(parent);
      } else {
        parent.uploadObj.dropArea = null;
      }
    });
  }
}
function dragCancel(parent) {
  removeBlur(parent);
  var virtualEle = select("." + CLONE, parent.element);
  if (virtualEle) {
    detach(virtualEle);
  }
}
function removeDropTarget(parent) {
  removeItemClass(parent, DROP_FOLDER);
  removeItemClass(parent, DROP_FILE);
}
function removeItemClass(parent, value) {
  var ele = parent.element.querySelectorAll("." + value);
  for (var i = 0; i < ele.length; i++) {
    ele[i].classList.remove(value);
  }
}
function draggingHandler(parent, args) {
  var dragArgs = args;
  dragArgs.fileDetails = parent.dragData;
  var canDrop = false;
  getTargetModule(parent, args.target);
  removeDropTarget(parent);
  if (parent.treeExpandTimer != null) {
    window.clearTimeout(parent.treeExpandTimer);
    parent.treeExpandTimer = null;
  }
  removeBlur(parent, "hover");
  var node = null;
  if (parent.targetModule === "navigationpane") {
    node = closest(args.target, "li");
    node.classList.add(HOVER, DROP_FOLDER);
    canDrop = true;
    parent.treeExpandTimer = window.setTimeout(function() {
      parent.notify(dragging, args);
    }, 800);
  } else if (parent.targetModule === "detailsview") {
    node = closest(args.target, "tr");
    if (node && node.querySelector("." + FOLDER) && !node.classList.contains(BLUR)) {
      node.classList.add(DROP_FOLDER);
    } else if (node && !node.querySelector("." + FOLDER) && !node.classList.contains(BLUR)) {
      node.classList.add(DROP_FILE);
    }
    canDrop = true;
  } else if (parent.targetModule === "largeiconsview") {
    node = closest(args.target, "li");
    if (node && node.querySelector("." + FOLDER) && !node.classList.contains(BLUR)) {
      node.classList.add(HOVER, DROP_FOLDER);
    }
    canDrop = true;
  } else if (parent.targetModule === "breadcrumbbar") {
    canDrop = true;
  }
  parent.element.classList.remove("e-fe-drop", "e-no-drop");
  parent.element.classList.add(canDrop ? "e-fe-drop" : "e-no-drop");
  parent.dragCount = parent.dragCount + 1;
  parent.trigger("fileDragging", dragArgs);
}
function objectToString(data) {
  var str = "";
  var keys = Object.keys(data);
  for (var i = 0; i < keys.length; i++) {
    if (keys[i] !== "message") {
      str += (i === 0 ? "" : ", ") + keys[i] + ": " + getValue(keys[i], data);
    }
  }
  return str;
}
function getItemName(parent, data) {
  if (parent.hasId) {
    return getValue("id", data);
  }
  return getName(parent, data);
}
function updateRenamingData(parent, data) {
  parent.itemData = [data];
  parent.currentItemText = getValue("name", data);
  parent.isFile = getValue("isFile", data);
  parent.filterPath = getValue("filterPath", data);
}
function doRename(parent) {
  if (!hasEditAccess(parent.itemData[0])) {
    createDeniedDialog(parent, parent.itemData[0], permissionEdit);
  } else {
    createDialog(parent, "Rename");
  }
}
function doDownload(parent) {
  var items = parent.itemData;
  for (var i = 0; i < items.length; i++) {
    if (!hasDownloadAccess(items[i])) {
      createDeniedDialog(parent, items[i], permissionDownload);
      return;
    }
  }
  if (parent.selectedItems.length > 0) {
    Download(parent, parent.path, parent.selectedItems);
  }
}
function doDeleteFiles(parent, data, newIds) {
  for (var i = 0; i < data.length; i++) {
    if (!hasEditAccess(data[i])) {
      createDeniedDialog(parent, data[i], permissionEdit);
      return;
    }
  }
  parent.itemData = data;
  Delete(parent, newIds, parent.path, "delete");
}
function doDownloadFiles(parent, data, newIds) {
  for (var i = 0; i < data.length; i++) {
    if (!hasDownloadAccess(data[i])) {
      createDeniedDialog(parent, data[i], permissionDownload);
      return;
    }
  }
  parent.itemData = data;
  if (newIds.length > 0) {
    Download(parent, parent.path, newIds);
  }
}
function createDeniedDialog(parent, data, action) {
  var message = getValue("message", getValue("permission", data));
  if (message === "") {
    message = getLocaleText(parent, "Access-Message").replace("{0}", getValue("name", data)).replace("{1}", action);
  }
  var response = {
    error: {
      code: "401",
      fileExists: null,
      message
    }
  };
  createDialog(parent, "Error", response);
}
function getAccessClass(data) {
  return !hasReadAccess(data) ? "e-fe-locked e-fe-hidden" : "e-fe-locked";
}
function hasReadAccess(data) {
  var permission = getValue("permission", data);
  return permission && !getValue("read", permission) ? false : true;
}
function hasEditAccess(data) {
  var permission = getValue("permission", data);
  return permission ? getValue("read", permission) && getValue("write", permission) : true;
}
function hasContentAccess(data) {
  var permission = getValue("permission", data);
  return permission ? getValue("read", permission) && getValue("writeContents", permission) : true;
}
function hasUploadAccess(data) {
  var permission = getValue("permission", data);
  return permission ? getValue("read", permission) && getValue("upload", permission) : true;
}
function hasDownloadAccess(data) {
  var permission = getValue("permission", data);
  return permission ? getValue("read", permission) && getValue("download", permission) : true;
}
function createNewFolder(parent) {
  var details = parent.itemData[0];
  if (!hasContentAccess(details)) {
    createDeniedDialog(parent, details, permissionEditContents);
  } else {
    createDialog(parent, "NewFolder");
  }
}
function uploadItem(parent) {
  var details = parent.itemData[0];
  if (!hasUploadAccess(details)) {
    createDeniedDialog(parent, details, permissionUpload);
  } else {
    var eleId = "#" + parent.element.id + UPLOAD_ID;
    var uploadEle = document.querySelector(eleId);
    uploadEle.click();
  }
}

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/common/operations.js
function read(parent, event2, path) {
  var itemData = parent.itemData;
  for (var i = 0; i < itemData.length; i++) {
    if (isNullOrUndefined(getValue("hasChild", itemData[i]))) {
      setValue("hasChild", false, itemData[i]);
    }
  }
  var data = { action: "read", path, showHiddenItems: parent.showHiddenItems, data: itemData };
  createAjax(parent, data, readSuccess, event2);
}
function createFolder(parent, itemName) {
  var data = { action: "create", path: parent.path, name: itemName, data: parent.itemData };
  createAjax(parent, data, createSuccess, itemName);
}
function filter(parent, event2) {
  var data = { action: "filter", path: parent.path, showHiddenItems: parent.showHiddenItems, data: [getPathObject(parent)] };
  var filterData;
  var filterDataVal = parent.filterData ? extend(filterData, data, parent.filterData) : data;
  createAjax(parent, filterDataVal, filterSuccess, event2, getValue("action", filterDataVal));
}
function rename(parent, path, itemNewName) {
  var name;
  var newName;
  if (parent.breadcrumbbarModule.searchObj.element.value === "" && !parent.isFiltered) {
    name = parent.currentItemText;
    newName = itemNewName;
  } else {
    var fPath = parent.filterPath;
    if (parent.hasId) {
      name = parent.currentItemText;
      newName = itemNewName;
    } else {
      fPath = fPath.replace(/\\/g, "/");
      name = fPath.replace(path, "") + parent.currentItemText;
      newName = fPath.replace(path, "") + itemNewName;
    }
  }
  var data = {
    action: "rename",
    path,
    name,
    newName,
    data: parent.itemData
  };
  createAjax(parent, data, renameSuccess, path);
}
function paste2(parent, path, names, targetPath, pasteOperation, renameItems, actionRecords) {
  var data = {
    action: pasteOperation,
    path,
    targetData: parent.itemData[0],
    targetPath,
    names,
    renameFiles: renameItems,
    data: actionRecords
  };
  parent.destinationPath = targetPath;
  createAjax(parent, data, pasteSuccess, path, pasteOperation, targetPath);
}
function Delete(parent, items, path, operation) {
  var data = { action: operation, path, names: items, data: parent.itemData };
  createAjax(parent, data, deleteSuccess, path);
}
function GetDetails(parent, names, path, operation) {
  var data = { action: operation, path, names, data: parent.itemData };
  createAjax(parent, data, detailsSuccess, path, operation);
}
function getDateFormat(parent) {
  var columns = parent.detailsViewSettings.columns;
  var dateFormat;
  for (var i = 0; i < columns.length; i++) {
    if (columns[i].field === "_fm_modified") {
      if (!isNullOrUndefined(columns[i].format)) {
        dateFormat = columns[i].format.toString();
      }
      break;
    }
  }
  return dateFormat;
}
function createAjax(parent, data, fn, event2, operation, targetPath) {
  var ajaxSettings = {
    url: parent.ajaxSettings.url,
    type: "POST",
    mode: true,
    dataType: "json",
    contentType: "application/json",
    data: JSON.stringify(data),
    onSuccess: null,
    onFailure: null,
    beforeSend: null
  };
  var eventArgs = { action: getValue("action", data), ajaxSettings, cancel: false };
  parent.trigger("beforeSend", eventArgs, function(beforeSendArgs) {
    if (!beforeSendArgs.cancel) {
      parent.notify(beforeRequest, {});
      var ajax = new Ajax({
        url: getValue("url", beforeSendArgs.ajaxSettings),
        type: getValue("type", beforeSendArgs.ajaxSettings),
        mode: getValue("mode", beforeSendArgs.ajaxSettings),
        dataType: getValue("dataType", beforeSendArgs.ajaxSettings),
        contentType: getValue("contentType", beforeSendArgs.ajaxSettings),
        data: getValue("data", beforeSendArgs.ajaxSettings),
        beforeSend: getValue("beforeSend", beforeSendArgs.ajaxSettings),
        onSuccess: function(result) {
          if (isNullOrUndefined(result)) {
            var result_1 = {
              error: {
                fileExists: null,
                message: getLocaleText(parent, "Server-Error") + " " + parent.ajaxSettings.url,
                code: "406"
              },
              files: null
            };
            triggerAjaxFailure(parent, beforeSendArgs, fn, result_1, event2, operation, targetPath);
            return;
          }
          if (typeof result === "string") {
            result = JSON.parse(result);
          }
          parent.notify(afterRequest, { action: "success" });
          var id = parent.expandedId ? parent.expandedId : parent.pathId[parent.pathId.length - 1];
          if (!isNullOrUndefined(result.cwd) && getValue("action", data) === "read") {
            result.cwd.name = parent.pathId.length === 1 ? parent.rootAliasName || result.cwd.name : result.cwd.name;
            setValue("_fm_id", id, result.cwd);
            setValue(id, result.cwd, parent.feParent);
            if (!isNullOrUndefined(result.files) || result.error.code === "401") {
              if ((event2 === "finalize-end" || event2 === "initial-end") && parent.pathNames.length === 0) {
                var root = getValue(parent.pathId[0], parent.feParent);
                parent.pathNames[0] = getValue("name", root);
                parent.hasId = !isNullOrUndefined(getValue("id", root));
              }
              if (event2 === "finalize-end") {
                generatePath(parent);
              }
            }
          }
          var intl = new Internationalization(parent.locale);
          if (!isNullOrUndefined(result.files)) {
            setDateObject(result.files, intl, getDateFormat(parent));
            for (var i = 0, len = result.files.length; i < len; i++) {
              var item = result.files[i];
              setValue("_fm_iconClass", fileType(item), item);
            }
            if (getValue("action", data) === "read") {
              setNodeId(result, id);
              setValue(id, result.files, parent.feFiles);
            }
          }
          if (!isNullOrUndefined(result.details) && !isNullOrUndefined(parent.rootAliasName)) {
            var rootName = parent.rootAliasName || getValue("name", result.details);
            var location_1 = getValue("location", result.details).replace(new RegExp("/", "g"), "\\");
            if (getValue("path", data) === "/" || parent.hasId && getValue("path", data).match(/[/]/g).length === 1) {
              if (getValue("names", data).length === 0) {
                setValue("name", rootName, result.details);
                location_1 = rootName;
              } else {
                location_1 = location_1.replace(location_1.substring(0, location_1.indexOf("\\")), rootName);
              }
            } else {
              location_1 = location_1.replace(location_1.substring(0, location_1.indexOf("\\")), rootName);
            }
            setValue("location", location_1, result.details);
          }
          fn(parent, result, event2, operation, targetPath);
          if (!isNullOrUndefined(result.files) && (event2 === "path-changed" || event2 === "finalize-end" || event2 === "open-end")) {
            parent.notify(searchTextChange, result);
          }
          if (typeof getValue("onSuccess", beforeSendArgs.ajaxSettings) === "function") {
            getValue("onSuccess", beforeSendArgs.ajaxSettings)();
          }
        },
        onFailure: function() {
          var result = {
            files: null,
            error: {
              code: "404",
              message: getLocaleText(parent, "Network-Error") + " " + parent.ajaxSettings.url,
              fileExists: null
            }
          };
          triggerAjaxFailure(parent, beforeSendArgs, fn, result, event2, operation, targetPath);
        }
      });
      ajax.send();
    }
  });
}
function triggerAjaxFailure(parent, beforeSendArgs, fn, result, event2, operation, targetPath) {
  parent.notify(afterRequest, { action: "failure" });
  fn(parent, result, event2, operation, targetPath);
  if (typeof getValue("onFailure", beforeSendArgs.ajaxSettings) === "function") {
    getValue("onFailure", beforeSendArgs.ajaxSettings)();
  }
}
function readSuccess(parent, result, event2) {
  if (!isNullOrUndefined(result.files)) {
    parent.notify(event2, result);
    parent.notify(selectionChanged, {});
    var args = { action: "read", result };
    parent.trigger("success", args);
  } else {
    if (result.error.code === "401") {
      result.files = [];
      parent.notify(event2, result);
      parent.notify(selectionChanged, {});
    }
    onFailure(parent, result, "read");
    parent.setProperties({ path: parent.oldPath }, true);
    parent.pathNames.pop();
  }
  if (parent.isDragDrop && parent.isDropEnd) {
    if (parent.droppedObjects.length !== 0) {
      var args = { fileDetails: parent.droppedObjects };
      parent.trigger("fileDropped", args);
    }
    parent.isDropEnd = parent.isDragDrop = false;
  }
}
function filterSuccess(parent, result, event2, action) {
  if (!isNullOrUndefined(result.files)) {
    parent.notify(event2, result);
    var args = { action, result };
    parent.trigger("success", args);
  } else {
    onFailure(parent, result, action);
  }
}
function createSuccess(parent, result, itemName) {
  if (!isNullOrUndefined(result.files)) {
    if (parent.dialogObj && parent.dialogObj.visible) {
      parent.dialogObj.hide();
    }
    parent.createdItem = result.files[0];
    parent.breadcrumbbarModule.searchObj.value = "";
    var args = { action: "create", result };
    parent.trigger("success", args);
    parent.itemData = [getPathObject(parent)];
    read(parent, createEnd, parent.path);
  } else {
    if (result.error.code === "400") {
      if (parent.dialogObj && parent.dialogObj.visible) {
        var ele = select("#newname", parent.dialogObj.element);
        var error = getLocaleText(parent, "Validation-NewFolder-Exists").replace("{0}", '"' + ele.value + '"');
        ele.parentElement.nextElementSibling.innerHTML = error;
      } else {
        var result_2 = {
          files: null,
          error: {
            code: "400",
            message: getLocaleText(parent, "Validation-NewFolder-Exists").replace("{0}", '"' + itemName + '"'),
            fileExists: null
          }
        };
        createDialog(parent, "Error", result_2);
      }
      var args = { action: "create", error: result.error };
      parent.trigger("failure", args);
    } else {
      if (parent.dialogObj && parent.dialogObj.visible) {
        parent.dialogObj.hide();
      }
      onFailure(parent, result, "create");
    }
  }
}
function renameSuccess(parent, result, path) {
  if (!isNullOrUndefined(result.files)) {
    if (!isNullOrUndefined(parent.dialogObj)) {
      parent.dialogObj.hide();
    }
    var args = { action: "rename", result };
    parent.trigger("success", args);
    parent.renamedItem = result.files[0];
    if (getValue("filterPath", parent.renamedItem) === getValue("filterPath", parent.itemData[0]) && parent.pathNames.length > 1) {
      parent.pathNames[parent.pathNames.length - 1] = parent.renameText;
    }
    if (parent.activeModule === "navigationpane") {
      parent.pathId.pop();
      parent.itemData = [getValue(parent.pathId[parent.pathId.length - 1], parent.feParent)];
      read(parent, renameEndParent, getValue("filterPath", parent.renamedItem).replace(/\\/g, "/"));
      parent.itemData[0] = parent.renamedItem;
      read(parent, pathChanged, parent.path === "/" ? parent.path : getValue("filterPath", parent.renamedItem).replace(/\\/g, "/") + parent.renamedItem.name + "/");
    } else {
      parent.itemData = [getPathObject(parent)];
      if (parent.breadcrumbbarModule.searchObj.value !== "") {
        Search(parent, renameEnd, parent.path, parent.searchWord, parent.showHiddenItems, !parent.searchSettings.ignoreCase);
      } else {
        if (parent.isFiltered) {
          filter(parent, renameEnd);
        } else {
          read(parent, renameEnd, parent.path);
        }
      }
    }
  } else {
    if (result.error.code === "400" && parent.dialogObj && parent.dialogObj.visible) {
      var ele = select("#rename", parent.dialogObj.element);
      var error = getLocaleText(parent, "Validation-Rename-Exists").replace("{0}", '"' + parent.currentItemText + '"');
      error = error.replace("{1}", '"' + ele.value + '"');
      ele.parentElement.nextElementSibling.innerHTML = error;
      var args = { action: "rename", error: result.error };
      parent.trigger("failure", args);
    } else {
      if (!isNullOrUndefined(parent.dialogObj)) {
        parent.dialogObj.hide();
      }
      onFailure(parent, result, "rename");
    }
  }
}
function pasteSuccess(parent, result, path, operation) {
  if (result.error && result.error.fileExists) {
    parent.fileLength = 0;
    if (!isNullOrUndefined(result.files)) {
      parent.isPasteError = true;
      doPasteUpdate(parent, operation, result);
    }
    createExtDialog(parent, "DuplicateItems", result.error.fileExists);
    if (result.error.code === "404") {
      createDialog(parent, "Error", result);
    }
  } else if (!result.error && !isNullOrUndefined(result.files)) {
    parent.isPasteError = false;
    doPasteUpdate(parent, operation, result);
  } else if (result.error && !isNullOrUndefined(result.files)) {
    parent.isPasteError = true;
    doPasteUpdate(parent, operation, result);
    createDialog(parent, "Error", result);
  } else {
    onFailure(parent, result, operation);
  }
}
function deleteSuccess(parent, result, path) {
  if (!isNullOrUndefined(result.files)) {
    parent.setProperties({ path }, true);
    parent.itemData = [getPathObject(parent)];
    read(parent, deleteEnd, parent.path);
    if (result.error) {
      onFailure(parent, result, "delete");
    } else {
      var args = { action: "delete", result };
      parent.trigger("success", args);
    }
  } else {
    onFailure(parent, result, "delete");
  }
}
function detailsSuccess(parent, result, path, operation) {
  if (!isNullOrUndefined(result.details)) {
    createDialog(parent, operation, null, result.details);
    var args = { action: "details", result };
    parent.trigger("success", args);
  } else {
    onFailure(parent, result, "details");
  }
}
function onFailure(parent, result, action) {
  createDialog(parent, "Error", result);
  var args = { action, error: result.error };
  parent.trigger("failure", args);
}
function Search(parent, event2, path, searchString, showHiddenItems, caseSensitive) {
  var data = {
    action: "search",
    path,
    searchString,
    showHiddenItems,
    caseSensitive,
    data: parent.itemData
  };
  createAjax(parent, data, searchSuccess, event2);
}
function searchSuccess(parent, result, event2) {
  if (!isNullOrUndefined(result.files)) {
    parent.notify(event2, result);
    var args = { action: "search", result };
    parent.trigger("success", args);
  } else {
    onFailure(parent, result, "search");
  }
}
function Download(parent, path, items) {
  var downloadUrl = parent.ajaxSettings.downloadUrl ? parent.ajaxSettings.downloadUrl : parent.ajaxSettings.url;
  var data = { "action": "download", "path": path, "names": items, "data": parent.itemData };
  var eventArgs = { data, cancel: false };
  parent.trigger("beforeDownload", eventArgs, function(downloadArgs) {
    if (!downloadArgs.cancel) {
      var form = createElement("form", {
        id: parent.element.id + "_downloadForm",
        attrs: { action: downloadUrl, method: "post", name: "downloadForm", "download": "" }
      });
      var input = createElement("input", {
        id: parent.element.id + "_hiddenForm",
        attrs: { name: "downloadInput", value: JSON.stringify(downloadArgs.data), type: "hidden" }
      });
      form.appendChild(input);
      parent.element.appendChild(form);
      document.forms.namedItem("downloadForm").submit();
      parent.element.removeChild(form);
    }
  });
}

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/pop-up/dialog.js
function createDialog(parent, text, e, details, replaceItems) {
  var options = getOptions(parent, text, e, details, replaceItems);
  if (isNullOrUndefined(parent.dialogObj)) {
    parent.dialogObj = new Dialog({
      beforeOpen: keydownAction.bind(this, parent, options.dialogName),
      beforeClose: function(args) {
        triggerPopupBeforeClose(parent, parent.dialogObj, args, options.dialogName);
      },
      header: options.header,
      content: options.content,
      buttons: options.buttons,
      animationSettings: { effect: "None" },
      showCloseIcon: true,
      closeOnEscape: true,
      visible: true,
      allowDragging: true,
      isModal: true,
      target: parent.popupTarget ? parent.popupTarget : "#" + parent.element.id,
      cssClass: getCssClass(parent, parent.isMobile ? MOB_POPUP : ROOT_POPUP),
      width: "350px",
      open: options.open,
      close: options.close,
      enableRtl: parent.enableRtl,
      enableHtmlSanitizer: parent.enableHtmlSanitizer,
      locale: parent.locale
    });
    parent.dialogObj.isStringTemplate = true;
    parent.dialogObj.appendTo("#" + parent.element.id + DIALOG_ID);
  } else {
    changeOptions(parent, options);
  }
}
function createExtDialog(parent, text, replaceItems, newPath) {
  var extOptions = getExtOptions(parent, text, replaceItems, newPath);
  parent.isApplySame = false;
  if (isNullOrUndefined(parent.extDialogObj)) {
    parent.extDialogObj = new Dialog({
      beforeOpen: beforeExtOpen.bind(this, parent, extOptions.dialogName),
      beforeClose: function(args) {
        triggerPopupBeforeClose(parent, parent.extDialogObj, args, extOptions.dialogName);
      },
      content: extOptions.content,
      header: extOptions.header,
      closeOnEscape: true,
      allowDragging: true,
      animationSettings: { effect: "None" },
      target: parent.popupTarget ? parent.popupTarget : "#" + parent.element.id,
      cssClass: getCssClass(parent, parent.isMobile ? MOB_POPUP : ROOT_POPUP),
      enableRtl: parent.enableRtl,
      showCloseIcon: true,
      isModal: true,
      width: 350,
      buttons: extOptions.buttons,
      open: extOptions.open,
      close: extOptions.close,
      enableHtmlSanitizer: parent.enableHtmlSanitizer,
      locale: parent.locale
    });
    parent.extDialogObj.isStringTemplate = true;
    parent.extDialogObj.appendTo("#" + parent.element.id + EXTN_DIALOG_ID);
  } else {
    parent.extDialogObj.header = extOptions.header;
    parent.extDialogObj.close = extOptions.close;
    parent.extDialogObj.open = extOptions.open;
    parent.extDialogObj.close = extOptions.close;
    parent.extDialogObj.content = extOptions.content;
    parent.extDialogObj.buttons = extOptions.buttons;
    parent.extDialogObj.enableRtl = parent.enableRtl;
    parent.extDialogObj.locale = parent.locale;
    parent.extDialogObj.beforeOpen = beforeExtOpen.bind(this, parent, extOptions.dialogName);
    parent.extDialogObj.beforeClose = function(args) {
      triggerPopupBeforeClose(parent, parent.extDialogObj, args, extOptions.dialogName);
    };
    parent.extDialogObj.dataBind();
    parent.extDialogObj.show();
  }
}
function triggerPopupBeforeOpen(parent, dlgModule, args, dialogName) {
  var eventArgs = {
    cancel: args.cancel,
    popupName: dialogName,
    popupModule: dlgModule
  };
  parent.trigger("beforePopupOpen", eventArgs, function(eventargs) {
    args.cancel = eventargs.cancel;
  });
}
function triggerPopupBeforeClose(parent, dlgModule, args, dialogName) {
  var eventArgs = {
    cancel: args.cancel,
    popupModule: dlgModule,
    popupName: dialogName
  };
  parent.trigger("beforePopupClose", eventArgs, function(eventargs) {
    args.cancel = eventargs.cancel;
    if (!args.cancel && args.isInteracted && (dialogName === "Rename" || dialogName === "Create Folder")) {
      parent.trigger(actionFailure, {});
    }
  });
}
function triggerPopupOpen(parent, dlgModule, dialogName) {
  var args = { popupModule: dlgModule, element: dlgModule.element, popupName: dialogName };
  parent.trigger("popupOpen", args);
}
function triggerPopupClose(parent, dlgModule, dialogName) {
  var args = { popupModule: dlgModule, element: dlgModule.element, popupName: dialogName };
  parent.trigger("popupClose", args);
}
function getExtOptions(parent, text, replaceItems, newPath) {
  var options = {
    header: "",
    content: "",
    buttons: [],
    dialogName: ""
  };
  var duplicateContent;
  var item;
  var index;
  options.open = function() {
    triggerPopupOpen(parent, parent.extDialogObj, options.dialogName);
  };
  options.close = function() {
    triggerPopupClose(parent, parent.extDialogObj, options.dialogName);
  };
  switch (text) {
    case "Extension":
      options.header = getLocaleText(parent, "Header-Rename-Confirmation");
      options.content = "<div>" + getLocaleText(parent, "Content-Rename-Confirmation") + "</div>";
      options.buttons = [
        {
          buttonModel: { isPrimary: true, content: getLocaleText(parent, "Button-Yes") },
          click: function() {
            parent.extDialogObj.hide();
            rename(parent, newPath, parent.renameText);
          }
        },
        {
          buttonModel: { content: getLocaleText(parent, "Button-No") },
          click: function() {
            parent.extDialogObj.hide();
            parent.dialogObj.hide();
          }
        }
      ];
      options.dialogName = "Extension Change";
      break;
    case "DuplicateItems":
      options.dialogName = "Duplicate Items";
      parent.replaceItems = replaceItems;
      item = parent.replaceItems[parent.fileLength];
      index = item.lastIndexOf("/");
      item = index === -1 ? item : item.substring(index);
      options.header = getLocaleText(parent, "Header-Duplicate");
      duplicateContent = "<div>" + getLocaleText(parent, "Content-Duplicate") + "</div>";
      options.content = duplicateContent.replace("{0}", item);
      options.close = function() {
        if (!parent.isDropEnd && parent.duplicateItems.length === 0) {
          var args = { fileDetails: parent.droppedObjects };
          parent.trigger("fileDropped", args);
          parent.isDropEnd = parent.isDragDrop = false;
        }
        triggerPopupClose(parent, parent.extDialogObj, options.dialogName);
      };
      options.buttons = [
        {
          buttonModel: { isPrimary: true, content: getLocaleText(parent, "Button-Yes") },
          click: function() {
            parent.duplicateItems.push(parent.replaceItems[parent.fileLength]);
            parent.duplicateRecords.push(getDuplicateData(parent, parent.replaceItems[parent.fileLength]));
            parent.fileLength++;
            if (replaceItems[parent.fileLength]) {
              var item_1 = parent.replaceItems[parent.fileLength];
              var indexval = item_1.lastIndexOf("/");
              item_1 = indexval === -1 ? item_1 : item_1.substring(indexval);
              parent.extDialogObj.content = duplicateContent.replace("{0}", item_1);
              parent.extDialogObj.show();
            } else {
              parent.extDialogObj.hide();
              var targetPath = parent.isDragDrop ? parent.dragPath : parent.targetPath;
              var path = parent.isDragDrop ? parent.dropPath : parent.folderPath === "" ? parent.path : parent.folderPath;
              var action = parent.isDragDrop ? "move" : parent.fileAction;
              paste2(parent, targetPath, parent.duplicateItems, path, action, parent.duplicateItems, parent.duplicateRecords);
            }
          }
        },
        {
          buttonModel: { content: getLocaleText(parent, "Button-No") },
          click: function() {
            parent.fileLength++;
            if (replaceItems[parent.fileLength]) {
              var item_2 = parent.replaceItems[parent.fileLength];
              var ind = item_2.lastIndexOf("/");
              item_2 = ind === -1 ? item_2 : item_2.substring(ind);
              parent.extDialogObj.content = duplicateContent.replace("{0}", item_2);
              parent.extDialogObj.show();
            } else {
              parent.extDialogObj.hide();
              if (parent.duplicateItems.length !== 0) {
                var action = parent.isDragDrop ? "move" : parent.fileAction;
                var targetPath = parent.isDragDrop ? parent.dragPath : parent.targetPath;
                var path = parent.isDragDrop ? parent.dropPath : parent.folderPath === "" ? parent.path : parent.folderPath;
                paste2(parent, targetPath, parent.duplicateItems, path, action, parent.duplicateItems, parent.duplicateRecords);
              }
            }
          }
        }
      ];
      break;
    case "UploadRetry":
      options.dialogName = "Retry Upload";
      options.header = getLocaleText(parent, "Header-Retry");
      options.content = parent.retryFiles[0].name + '<div class="e-fe-retrycontent">' + getLocaleText(parent, "Content-Retry") + "</div>";
      options.open = onRetryOpen.bind(this, parent);
      options.close = function() {
        parent.isRetryOpened = false;
        retryDlgClose(parent);
        triggerPopupClose(parent, parent.extDialogObj, options.dialogName);
      };
      options.buttons = [
        {
          buttonModel: { isPrimary: true, content: getLocaleText(parent, "Button-Keep-Both") },
          click: function() {
            retryDlgUpdate(parent, true);
          }
        },
        {
          buttonModel: { isPrimary: true, content: getLocaleText(parent, "Button-Replace") },
          click: function() {
            retryDlgUpdate(parent, false);
          }
        },
        {
          buttonModel: { isPrimary: true, content: getLocaleText(parent, "Button-Skip") },
          click: function() {
            var count2 = 0;
            if (parent.isApplySame) {
              count2 = parent.retryFiles.length;
              parent.retryFiles = [];
              retryDlgClose(parent);
            } else {
              count2 = 1;
              parent.retryFiles.splice(0, 1);
              if (parent.retryFiles.length !== 0) {
                createExtDialog(parent, "UploadRetry");
              } else {
                retryDlgClose(parent);
              }
            }
            parent.notify(skipUpload, { count: count2 });
          }
        }
      ];
      break;
  }
  return options;
}
function retryDlgUpdate(parent, isKeepBoth) {
  if (parent.isApplySame) {
    if (isKeepBoth) {
      onKeepBothAll(parent);
    } else {
      onReplaceAll(parent);
    }
    retryDlgClose(parent);
  } else {
    parent.retryArgs.push({
      action: isKeepBoth ? "keepboth" : "replace",
      file: parent.retryFiles[0]
    });
    parent.uploadObj.retry(parent.retryFiles[0]);
    parent.retryFiles.splice(0, 1);
    if (parent.retryFiles.length !== 0) {
      createExtDialog(parent, "UploadRetry");
    } else {
      retryDlgClose(parent);
    }
  }
}
function retryDlgClose(parent) {
  var flag = true;
  if (parent.isRetryOpened) {
    parent.isRetryOpened = false;
  } else {
    flag = false;
  }
  var ele = select(".e-dlg-checkbox", parent.extDialogObj.element);
  if (ele) {
    remove(ele);
  }
  if (flag) {
    parent.extDialogObj.hide();
  } else {
    parent.retryFiles = [];
  }
}
function onRetryOpen(parent, args) {
  parent.isRetryOpened = true;
  var dialogEle = getValue("element", args);
  var container = select(".e-dlg-content", dialogEle);
  var checkContainer = parent.createElement("div", {
    className: "e-dlg-checkbox"
  });
  var checkbox = parent.createElement("input", {
    id: parent.element.id + "_applyall"
  });
  checkContainer.appendChild(checkbox);
  container.appendChild(checkContainer);
  var checkBoxObj = new CheckBox({
    label: getLocaleText(parent, "ApplyAll-Label"),
    change: function(args2) {
      parent.isApplySame = args2.checked;
    }
  });
  checkBoxObj.appendTo("#" + parent.element.id + "_applyall");
  triggerPopupOpen(parent, parent.extDialogObj, "Retry Upload");
}
function onKeepBothAll(parent) {
  while (parent.retryFiles.length !== 0) {
    parent.retryArgs.push({ action: "keepboth", file: parent.retryFiles[0] });
    parent.uploadObj.retry(parent.retryFiles[0]);
    parent.retryFiles.splice(0, 1);
  }
}
function onReplaceAll(parent) {
  while (parent.retryFiles.length !== 0) {
    parent.retryArgs.push({ action: "replace", file: parent.retryFiles[0] });
    parent.uploadObj.retry(parent.retryFiles[0]);
    parent.retryFiles.splice(0, 1);
  }
}
function focusInput(parent) {
  var ele = select("#newname", parent.dialogObj.element);
  ele.focus();
  ele.value = "";
  var len = ele.value.length;
  ele.setSelectionRange(0, len);
}
function onFolderDialogOpen(parent) {
  var ele = select("#newname", parent.dialogObj.element);
  if (!ele.parentElement.classList.contains("e-control-wrapper")) {
    createInput(ele, getLocaleText(parent, "Content-NewFolder"));
  }
  ele.parentElement.nextElementSibling.innerHTML = "";
  ele.oninput = function() {
    onValidate(parent, ele);
  };
  ele.onkeyup = function(e) {
    var code = getKeyCode(e);
    if (code === 13) {
      onSubmit(parent);
    }
  };
  focusInput(parent);
  triggerPopupOpen(parent, parent.dialogObj, "Create Folder");
}
function onRenameDialogOpen(parent) {
  var inputEle = select("#rename", parent.dialogObj.element);
  if (!inputEle.parentElement.classList.contains("e-control-wrapper")) {
    createInput(inputEle, getLocaleText(parent, "Content-Rename"));
  }
  inputEle.parentElement.nextElementSibling.innerHTML = "";
  inputEle.oninput = function() {
    onValidate(parent, inputEle);
  };
  inputEle.onkeyup = function(e) {
    var code = getKeyCode(e);
    if (code === 13) {
      onReSubmit(parent);
    }
  };
  onFocusRenameInput(parent, inputEle);
  triggerPopupOpen(parent, parent.dialogObj, "Rename");
}
function onFocusRenameInput(parent, inputEle) {
  inputEle.focus();
  var txt = "";
  if (parent.isFile && !parent.showFileExtension) {
    var index = parent.currentItemText.lastIndexOf(".");
    txt = index === -1 ? parent.currentItemText : parent.currentItemText.substring(0, index);
  } else {
    txt = parent.currentItemText;
  }
  inputEle.value = txt;
  if (parent.isFile && parent.showFileExtension && inputEle.value.indexOf(".") !== -1) {
    inputEle.setSelectionRange(0, inputEle.value.lastIndexOf("."));
  } else {
    inputEle.setSelectionRange(0, inputEle.value.length);
  }
}
function createInput(ele, placeholder) {
  Input.createInput({
    element: ele,
    properties: {
      placeholder
    }
  });
}
function getOptions(parent, text, e, details, replaceItems) {
  var options = {
    header: "",
    content: "",
    buttons: [],
    dialogName: ""
  };
  var permission;
  var formattedString;
  var intl;
  var strArr;
  var fileType2;
  var location;
  options.open = function() {
    triggerPopupOpen(parent, parent.dialogObj, options.dialogName);
  };
  options.close = function() {
    triggerPopupClose(parent, parent.dialogObj, options.dialogName);
  };
  text = details && details.multipleFiles === true ? "MultipleFileDetails" : text;
  switch (text) {
    case "NewFolder":
      options.dialogName = "Create Folder";
      options.header = getLocaleText(parent, "Header-NewFolder");
      options.content = '<input type="text" value="New folder" id="newname"><div class="e-fe-error"></div>';
      options.buttons = [
        {
          buttonModel: { isPrimary: true, content: getLocaleText(parent, "Button-Create") },
          click: function(e2) {
            if (e2.type === "keydown") {
              return;
            }
            onSubmit(parent);
          }
        }
      ];
      options.open = onFolderDialogOpen.bind(this, parent);
      break;
    case "Delete":
      options.dialogName = "Delete";
      if (parent.selectedItems.length > 1) {
        options.content = ("<div>" + getLocaleText(parent, "Content-Multiple-Delete") + "</div>").replace("{0}", parent.selectedItems.length.toString());
        options.header = getLocaleText(parent, "Header-Multiple-Delete");
      } else {
        options.content = "<div>" + getLocaleText(parent, parent.isFile ? "Content-Delete" : "Content-Folder-Delete") + "</div>";
        options.header = getLocaleText(parent, parent.isFile ? "Header-Delete" : "Header-Folder-Delete");
      }
      options.buttons = [
        {
          buttonModel: { isPrimary: true, content: getLocaleText(parent, "Button-Yes") },
          click: function(e2) {
            onDeleteSubmit(parent);
          }
        },
        {
          buttonModel: { content: getLocaleText(parent, "Button-No") },
          click: function() {
            parent.dialogObj.hide();
          }
        }
      ];
      break;
    case "Rename":
      options.dialogName = "Rename";
      options.header = getLocaleText(parent, "Header-Rename");
      options.content = '<input type="text" class="e-input" id="rename"><div class="e-fe-error"></div>';
      options.buttons = [
        {
          buttonModel: { isPrimary: true, content: getLocaleText(parent, "Button-Save") },
          click: function(e2) {
            if (e2.type === "keydown") {
              return;
            }
            onReSubmit(parent);
          }
        }
      ];
      options.open = onRenameDialogOpen.bind(this, parent);
      break;
    case "details":
      options.dialogName = "File Details";
      intl = new Internationalization(parent.locale);
      formattedString = intl.formatDate(new Date(details.modified), { format: "MMMM dd, yyyy HH:mm:ss" });
      permission = "";
      if (!isNullOrUndefined(details.permission)) {
        permission = "<tr><td>" + getLocaleText(parent, "Permission") + '</td><td class="' + VALUE + '" >' + objectToString(details.permission) + "</td></tr>";
      }
      options.header = details.name;
      options.content = "<table><tr><td>" + getLocaleText(parent, "Type") + '</td><td class="' + VALUE + '" title="' + (details.isFile ? "File" : "Folder") + '">' + (details.isFile ? "File" : "Folder") + "</td></tr><tr><td>" + getLocaleText(parent, "Size") + '</td><td><span class="' + VALUE + '" title ="' + details.size + '">' + details.size + "</span></td></tr><tr><td>" + getLocaleText(parent, "Location") + '</td><td class="' + VALUE + '" title="' + details.location + '">' + details.location + "</td></tr><tr><td>" + getLocaleText(parent, "Modified") + '</td><td class="' + VALUE + '" >' + formattedString + "</td></tr>" + permission + "</table>";
      options.buttons = [
        {
          buttonModel: { isPrimary: true, content: getLocaleText(parent, "Button-Ok") },
          click: function(e2) {
            parent.dialogObj.hide();
          }
        }
      ];
      break;
    case "MultipleFileDetails":
      var index_1;
      options.dialogName = "File Details";
      strArr = parent.itemData.map(function(val) {
        index_1 = val.name.indexOf(".") + 1;
        return index_1 === 0 && !val.isFile ? "Folder" : index_1 !== 0 ? val.name.substr(index_1).replace(" ", "") : "undetermined";
      });
      if (strArr[0] == void 0) {
        strArr = details.name.split(",").map(function(val) {
          index_1 = val.indexOf(".") + 1;
          return index_1 === 0 ? "Folder" : val.substr(index_1).replace(" ", "");
        });
      }
      fileType2 = strArr.every(function(val, i, arr) {
        return val === arr[0];
      }) ? strArr[0] === "Folder" ? "Folder" : strArr[0].toLocaleUpperCase() + " Type" : "Multiple Types";
      location = details.location;
      options.header = details.name;
      options.content = "<table><tr><td>" + getLocaleText(parent, "Type") + ':</td><td class="' + VALUE + '">' + fileType2 + "</td></tr><tr><td>" + getLocaleText(parent, "Size") + ":</td><td>" + details.size + '<span class="' + VALUE + '" title ="' + details.size + '"></span></td></tr><tr><td>' + getLocaleText(parent, "Location") + ':</td><td class="' + VALUE + '" title="' + location + '">' + location + "</td></tr></table>";
      options.buttons = [
        {
          buttonModel: { isPrimary: true, content: getLocaleText(parent, "Button-Ok") },
          click: function(e2) {
            if (e2.type === "keydown") {
              return;
            }
            parent.dialogObj.hide();
          }
        }
      ];
      break;
    case "Error":
      parent.notify(actionFailure, {});
      options.dialogName = "Error";
      if (e.error.code === "401") {
        options.header = '<span class="e-fe-icon e-fe-access-error"></span><div class="e-fe-access-header">' + getLocaleText(parent, "Access-Denied") + "</div>";
      } else {
        options.header = getLocaleText(parent, "Error");
      }
      options.content = '<div class="' + ERROR_CONTENT + '">' + e.error.message + "</div>";
      options.buttons = [
        {
          buttonModel: { isPrimary: true, content: getLocaleText(parent, "Button-Ok") },
          click: function(e2) {
            parent.dialogObj.hide();
          }
        }
      ];
      break;
  }
  return options;
}
function keydownAction(parent, dialogName, args) {
  var btnElement = selectAll(".e-btn", parent.dialogObj.element);
  preventKeydown(btnElement);
  triggerPopupBeforeOpen(parent, parent.dialogObj, args, dialogName);
}
function beforeExtOpen(parent, dlgName, args) {
  var btnElement = selectAll(".e-btn", parent.extDialogObj.element);
  preventKeydown(btnElement);
  triggerPopupBeforeOpen(parent, parent.extDialogObj, args, dlgName);
}
function preventKeydown(btnElement) {
  var _loop_1 = function(btnCount2) {
    btnElement[btnCount2].onkeydown = function(e) {
      if (e.keyCode === 13) {
        e.preventDefault();
      }
    };
    btnElement[btnCount2].onkeyup = function(e) {
      if (e.keyCode === 13) {
        btnElement[btnCount2].click();
      }
    };
  };
  for (var btnCount = 0; btnCount < btnElement.length; btnCount++) {
    _loop_1(btnCount);
  }
}
function changeOptions(parent, options) {
  parent.dialogObj.header = options.header;
  parent.dialogObj.content = options.content;
  parent.dialogObj.buttons = options.buttons;
  parent.dialogObj.enableRtl = parent.enableRtl;
  parent.dialogObj.open = options.open;
  parent.dialogObj.close = options.close;
  parent.dialogObj.beforeOpen = keydownAction.bind(this, parent, options.dialogName);
  parent.dialogObj.beforeClose = function(args) {
    triggerPopupBeforeClose(parent, parent.dialogObj, args, options.dialogName);
  };
  parent.dialogObj.dataBind();
  parent.dialogObj.show();
}
function onSubmit(parent) {
  var ele = select("#newname", parent.dialogObj.element);
  onSubmitValidate(parent, ele);
  if (ele.parentElement.nextElementSibling.innerHTML !== "") {
    return;
  }
  createFolder(parent, ele.value);
}
function onReSubmit(parent) {
  var ele = select("#rename", parent.dialogObj.element);
  onSubmitValidate(parent, ele);
  if (ele.parentElement.nextElementSibling.innerHTML !== "") {
    return;
  }
  var text = ele.value;
  var oIndex = parent.currentItemText.lastIndexOf(".");
  if (parent.isFile && !parent.showFileExtension) {
    var extn = oIndex === -1 ? "" : parent.currentItemText.substr(oIndex);
    text += extn;
  }
  parent.renameText = text;
  if (parent.currentItemText === text) {
    parent.dialogObj.hide();
    return;
  }
  var newPath = parent.activeModule === "navigationpane" ? getValue("filterPath", parent.itemData[0]).replace(/\\/g, "/") : parent.path;
  parent.renamedId = getValue("id", parent.itemData[0]);
  parent.renamedId = getValue("id", parent.itemData[0]);
  parent.renamedId = getValue("id", parent.itemData[0]);
  if (parent.isFile) {
    var oldExtension = oIndex === -1 ? "" : parent.currentItemText.substr(oIndex);
    var nIndex = text.lastIndexOf(".");
    var newExtension = nIndex === -1 ? "" : text.substr(nIndex);
    if (parent.showFileExtension && oldExtension !== newExtension) {
      createExtDialog(parent, "Extension", null, newPath);
    } else {
      rename(parent, newPath, text);
    }
  } else {
    rename(parent, newPath, text);
  }
}
function onDeleteSubmit(parent) {
  parent.dialogObj.hide();
  parent.notify(deleteInit, {});
}
function onValidate(parent, ele) {
  if (/[/\\|*?"<>:]/.test(ele.value)) {
    addInvalid(parent, ele);
  } else if (ele.value === "") {
    ele.parentElement.nextElementSibling.innerHTML = getLocaleText(parent, "Validation-Empty");
  } else {
    ele.parentElement.nextElementSibling.innerHTML = "";
  }
}
function onSubmitValidate(parent, ele) {
  onValidate(parent, ele);
  var len = ele.value.length - 1;
  if (ele.value !== "" && (ele.value.lastIndexOf(".") === len || ele.value.lastIndexOf(" ") === len) && (parent.showFileExtension || (ele.value.lastIndexOf(".") === -1 || ele.value.substring(ele.value.indexOf(".") + 1).length === 0))) {
    addInvalid(parent, ele);
  }
}
function addInvalid(parent, ele) {
  var error = getLocaleText(parent, "Validation-Invalid").replace("{0}", '"' + ele.value + '"');
  if (parent.enableHtmlSanitizer) {
    ele.parentElement.nextElementSibling.textContent = error;
  } else {
    ele.parentElement.nextElementSibling.innerHTML = error;
  }
}
function getKeyCode(e) {
  var code;
  if (e.keyCode) {
    code = e.keyCode;
  } else if (e.which) {
    code = e.which;
  } else {
    code = e.charCode;
  }
  return code;
}
function createImageDialog(parent, header2, imageUrl) {
  var content = createElement("div", { className: "e-image-wrap" });
  var image = createElement("img", { className: "e-image", attrs: { src: imageUrl, alt: header2 } });
  content.appendChild(image);
  if (isNullOrUndefined(parent.viewerObj)) {
    parent.viewerObj = new Dialog({
      header: header2,
      content,
      animationSettings: { effect: "None" },
      showCloseIcon: true,
      closeOnEscape: true,
      visible: true,
      isModal: true,
      width: "350px",
      height: "350px",
      target: parent.popupTarget ? parent.popupTarget : "#" + parent.element.id,
      cssClass: getCssClass(parent, parent.isMobile ? MOB_POPUP : ROOT_POPUP),
      locale: parent.locale,
      enableResize: true,
      allowDragging: true,
      enableHtmlSanitizer: parent.enableHtmlSanitizer,
      position: { X: "center", Y: "center" },
      enableRtl: parent.enableRtl,
      open: openImage.bind(this, parent),
      close: function() {
        triggerPopupClose(parent, parent.viewerObj, "Image Preview");
      },
      beforeOpen: function(args) {
        triggerPopupBeforeOpen(parent, parent.viewerObj, args, "Image Preview");
      },
      beforeClose: function(args) {
        triggerPopupBeforeClose(parent, parent.viewerObj, args, "Image Preview");
      },
      resizing: updateImage.bind(this, parent),
      resizeStop: updateImage.bind(this, parent)
    });
    parent.viewerObj.isStringTemplate = true;
    parent.viewerObj.appendTo("#" + parent.element.id + IMG_DIALOG_ID);
  } else {
    parent.viewerObj.refresh();
    parent.viewerObj.header = header2;
    parent.viewerObj.content = content;
    parent.viewerObj.enableRtl = parent.enableRtl;
    parent.viewerObj.dataBind();
    parent.viewerObj.show();
  }
}
function openImage(parent) {
  setTimeout(function() {
    if (parent.viewerObj) {
      parent.viewerObj.element.focus();
    }
  });
  updateImage(parent);
  triggerPopupOpen(parent, parent.viewerObj, "Image Preview");
}
function updateImage(parent) {
  var content = select(".e-dlg-content", parent.viewerObj.element);
  var imgWrap = select(".e-image-wrap", parent.viewerObj.element);
  var cssObj = window.getComputedStyle(content, null);
  var paddingWidth = cssObj ? 2 * parseFloat(cssObj.paddingRight) : 36;
  var paddingHeight = cssObj ? 2 * parseFloat(cssObj.paddingBottom) : 20;
  imgWrap.style.width = content.offsetWidth - paddingWidth + "px";
  imgWrap.style.height = content.offsetHeight - paddingHeight + "px";
}

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/layout/large-icons-view.js
var LargeIconsView = (
  /** @class */
  function() {
    function LargeIconsView2(parent) {
      this.isInteraction = true;
      this.uploadOperation = false;
      this.count = 0;
      this.isRendered = true;
      this.tapCount = 0;
      this.isSelectAllCalled = false;
      this.isPasteOperation = false;
      this.isInteracted = true;
      this.parent = parent;
      this.element = select("#" + this.parent.element.id + LARGEICON_ID, this.parent.element);
      addClass([this.element], LARGE_ICONS);
      this.addEventListener();
      this.keyConfigs = {
        end: "end",
        home: "home",
        tab: "tab",
        moveDown: "downarrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        moveUp: "uparrow",
        ctrlEnd: "ctrl+end",
        ctrlHome: "ctrl+home",
        ctrlDown: "ctrl+downarrow",
        ctrlLeft: "ctrl+leftarrow",
        ctrlRight: "ctrl+rightarrow",
        ctrlUp: "ctrl+uparrow",
        shiftEnd: "shift+end",
        shiftHome: "shift+home",
        shiftDown: "shift+downarrow",
        shiftLeft: "shift+leftarrow",
        shiftRight: "shift+rightarrow",
        shiftUp: "shift+uparrow",
        csEnd: "ctrl+shift+end",
        csHome: "ctrl+shift+home",
        csDown: "ctrl+shift+downarrow",
        csLeft: "ctrl+shift+leftarrow",
        csRight: "ctrl+shift+rightarrow",
        csUp: "ctrl+shift+uparrow",
        space: "space",
        ctrlSpace: "ctrl+space",
        shiftSpace: "shift+space",
        csSpace: "ctrl+shift+space",
        ctrlA: "ctrl+a",
        enter: "enter",
        altEnter: "alt+enter",
        esc: "escape",
        del: "delete",
        ctrlX: this.parent.isMac ? "cmd+x" : "ctrl+x",
        ctrlC: this.parent.isMac ? "cmd+c" : "ctrl+c",
        ctrlV: this.parent.isMac ? "cmd+v" : "ctrl+v",
        f2: "f2",
        shiftdel: "shift+delete",
        back: "backspace",
        ctrlD: "ctrl+d"
      };
    }
    LargeIconsView2.prototype.render = function(args) {
      this.parent.visitedItem = null;
      this.startItem = null;
      showSpinner(this.parent.element);
      if (this.parent.view === "LargeIcons") {
        this.resetMultiSelect();
        this.element.setAttribute("tabindex", "0");
        if (this.listObj) {
          this.unWireEvents();
          this.removeEventListener();
        }
        this.parent.notify(hideLayout, {});
        var iconsView = select("#" + this.parent.element.id + LARGEICON_ID, this.parent.element);
        var ul = select("ul", iconsView);
        if (ul) {
          remove(ul);
        }
        this.listObj = {
          ariaAttributes: {
            itemRole: "option",
            listRole: "listbox",
            itemText: "",
            groupItemRole: "group",
            wrapperRole: ""
          },
          showIcon: true,
          fields: { text: "name", iconCss: "_fm_icon", imageUrl: "_fm_imageUrl", htmlAttributes: "_fm_htmlAttr" },
          sortOrder: this.parent.sortOrder,
          itemCreated: this.onItemCreated.bind(this),
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer
        };
        this.items = [];
        this.items = this.renderList(args);
        this.items = this.allItems = getSortedData(this.parent, this.items);
        iconsView.classList.remove(DISPLAY_NONE);
        if (this.parent.enableVirtualization && this.allItems.length > 0) {
          if (!this.element.style.height) {
            this.adjustHeight();
          }
          this.parent.virtualizationModule.setUIVirtualization();
        }
        this.listElements = ListBase.createListFromJson(createElement, this.items, this.listObj);
        this.itemList = Array.prototype.slice.call(selectAll("." + LIST_ITEM, this.listElements));
        this.element.appendChild(this.listElements);
        this.preventImgDrag();
        this.createDragObj();
        if (this.itemList.length === 0) {
          var emptyList = this.element.querySelector("." + LIST_PARENT);
          this.element.removeChild(emptyList);
          createEmptyElement(this.parent, this.element, args);
        } else if (this.itemList.length !== 0 && this.element.querySelector("." + EMPTY)) {
          this.element.removeChild(this.element.querySelector("." + EMPTY));
        }
        if (this.isPasteOperation === true) {
          this.selectItems(this.parent.pasteNodes);
          this.isPasteOperation = false;
        }
        if (this.uploadOperation === true) {
          this.selectItems(this.parent.uploadItem);
          this.parent.setProperties({ selectedItems: [] }, true);
          this.count++;
          if (this.count === this.parent.uploadItem.length) {
            this.uploadOperation = false;
            this.parent.uploadItem = [];
          }
        }
        var activeEle = this.element.querySelectorAll("." + ACTIVE);
        if (activeEle.length !== 0) {
          this.parent.activeModule = "largeiconsview";
        }
        for (var i = 0; i < activeEle.length; i++) {
          activeEle[i].setAttribute("aria-selected", "true");
        }
        this.adjustHeight();
        this.element.style.maxHeight = "100%";
        this.getItemCount();
        this.addEventListener();
        this.wireEvents();
        if (this.parent.enableVirtualization && this.allItems.length > 0) {
          this.parent.virtualizationModule.setUlElementHeight();
          this.parent.virtualizationModule.wireScrollEvent(false);
        }
        this.isRendered = true;
        hideSpinner(this.parent.element);
        if (this.parent.selectedItems.length) {
          this.checkItem();
        }
      }
    };
    LargeIconsView2.prototype.preventImgDrag = function() {
      var i = 0;
      while (i < this.itemList.length) {
        if (this.itemList[i].querySelector("img")) {
          this.itemList[i].ondragstart = function() {
            return false;
          };
        }
        i++;
      }
    };
    LargeIconsView2.prototype.createDragObj = function() {
      var _this = this;
      if (!this.parent.isMobile && this.listObj) {
        if (this.parent.allowDragAndDrop) {
          if (this.dragObj) {
            this.dragObj.destroy();
          }
          this.dragObj = new Draggable(this.listElements, {
            enableTailMode: true,
            distance: 5,
            enableAutoScroll: true,
            dragTarget: "." + LARGE_ICON,
            helper: this.dragHelper.bind(this),
            cursorAt: this.parent.dragCursorPosition,
            dragArea: this.parent.element,
            dragStop: dragStopHandler.bind(this, this.parent),
            drag: draggingHandler.bind(this, this.parent),
            clone: true,
            dragStart: function(args) {
              dragStartHandler(_this.parent, args, _this.dragObj);
            }
          });
        } else if (this.dragObj && !this.parent.allowDragAndDrop) {
          this.dragObj.destroy();
        }
      }
    };
    LargeIconsView2.prototype.dragHelper = function(args) {
      var dragTarget = args.sender.target;
      var dragLi = closest(dragTarget, ".e-list-item");
      if (!dragLi) {
        return null;
      }
      if (dragLi && !dragLi.classList.contains("e-active")) {
        this.setFocus(dragLi);
      }
      var activeEle = this.element.querySelectorAll("." + ACTIVE);
      this.parent.activeElements = [];
      this.parent.dragData = [];
      for (var i = 0; i < activeEle.length; i++) {
        this.parent.dragData.push(this.getItemObject(activeEle[i]));
        this.parent.activeElements.push(activeEle[i]);
      }
      getModule(this.parent, dragLi);
      this.parent.dragPath = this.parent.path;
      createVirtualDragElement(this.parent);
      return this.parent.virtualDragElement;
    };
    LargeIconsView2.prototype.onDropInit = function(args) {
      if (this.parent.targetModule === this.getModuleName()) {
        var dropLi = closest(args.target, ".e-list-item");
        var cwdData = getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);
        if (dropLi) {
          var info = this.getItemObject(dropLi);
          this.parent.dropPath = info.isFile ? this.parent.path : getFullPath(this.parent, info, this.parent.path);
          this.parent.dropData = info.isFile ? cwdData : info;
        } else {
          this.parent.dropPath = this.parent.path;
          this.parent.dropData = cwdData;
        }
      }
    };
    LargeIconsView2.prototype.getModuleName = function() {
      return "largeiconsview";
    };
    LargeIconsView2.prototype.adjustHeight = function() {
      var pane = select("#" + this.parent.element.id + CONTENT_ID, this.parent.element);
      var bar = select("#" + this.parent.element.id + BREADCRUMBBAR_ID, this.parent.element);
      this.element.style.height = pane.offsetHeight - bar.offsetHeight + "px";
    };
    LargeIconsView2.prototype.onItemCreated = function(args) {
      args.item.removeAttribute("aria-level");
      if (!this.parent.showFileExtension && getValue("isFile", args.curData)) {
        var textEle = args.item.querySelector("." + LIST_TEXT);
        var txt = getValue("name", args.curData);
        var type = getValue("type", args.curData);
        textEle.innerHTML = txt.substr(0, txt.length - type.length);
      }
      this.renderCheckbox(args);
      var eventArgs = {
        element: args.item,
        fileDetails: args.curData,
        module: "LargeIconsView"
      };
      this.parent.trigger("fileLoad", eventArgs);
    };
    LargeIconsView2.prototype.renderCheckbox = function(args) {
      if (!this.parent.showItemCheckBoxes) {
        return;
      }
      var checkElement = createCheckBox(createElement, false, {
        checked: false,
        cssClass: "e-small"
      });
      checkElement.setAttribute("role", "checkbox");
      checkElement.setAttribute("aria-checked", "false");
      args.item.firstElementChild.insertBefore(checkElement, args.item.firstElementChild.childNodes[0]);
    };
    LargeIconsView2.prototype.onLayoutChange = function(args) {
      if (this.parent.view === "LargeIcons") {
        this.destroy();
        if (this.parent.enableVirtualization) {
          this.parent.setProperties({ selectedItems: [] }, true);
        }
        this.render(args);
        if (getValue("name", args) === "layout-change" && this.parent.fileAction === "move" && this.parent.isCut && this.parent.selectedNodes && this.parent.selectedNodes.length !== 0) {
          var indexes = this.getIndexes(this.parent.selectedNodes);
          var length_1 = 0;
          while (length_1 < indexes.length) {
            addBlur(this.itemList[indexes[length_1]]);
            length_1++;
          }
        }
        var activeEle = this.element.querySelectorAll("." + ACTIVE);
        if (activeEle.length !== 0) {
          this.element.focus();
        }
        this.checkItem();
        this.parent.isLayoutChange = false;
      } else {
        this.element.setAttribute("tabindex", "-1");
      }
    };
    LargeIconsView2.prototype.checkItem = function() {
      var checkEle = this.element.querySelectorAll("." + ACTIVE);
      if (checkEle) {
        var checkLength = 0;
        while (checkLength < checkEle.length) {
          this.checkState(checkEle[checkLength], true);
          checkLength++;
        }
      }
    };
    LargeIconsView2.prototype.renderList = function(args) {
      var i = 0;
      var items = JSON.parse(JSON.stringify(args.files));
      while (i < items.length) {
        var icon = fileType(items[i]);
        var name_1 = getValue("name", items[i]);
        var selected = getItemName(this.parent, items[i]);
        var className = this.parent.selectedItems && this.parent.selectedItems.indexOf(selected) !== -1 ? LARGE_ICON + " e-active" : LARGE_ICON;
        if (!hasEditAccess(items[i])) {
          className += " " + getAccessClass(items[i]);
        }
        if (icon === ICON_IMAGE && this.parent.showThumbnail && hasReadAccess(items[i])) {
          var imgUrl = getImageUrl(this.parent, items[i]);
          setValue("_fm_imageUrl", imgUrl, items[i]);
          setValue("_fm_imageAttr", { alt: name_1 }, items[i]);
        } else {
          setValue("_fm_icon", icon, items[i]);
        }
        setValue("_fm_htmlAttr", { class: className, title: name_1 }, items[i]);
        i++;
      }
      return items;
    };
    LargeIconsView2.prototype.onFinalizeEnd = function(args) {
      this.render(args);
    };
    LargeIconsView2.prototype.onCreateEnd = function(args) {
      if (this.parent.view !== "LargeIcons") {
        return;
      }
      this.onLayoutChange(args);
      this.clearSelect();
      this.selectItems([getValue(this.parent.hasId ? "id" : "name", this.parent.createdItem)]);
      this.parent.createdItem = null;
      this.parent.largeiconsviewModule.element.focus();
    };
    LargeIconsView2.prototype.onSelectedData = function() {
      if (this.parent.activeModule === "largeiconsview") {
        this.updateSelectedData();
      }
    };
    LargeIconsView2.prototype.onDeleteInit = function() {
      if (this.parent.activeModule === "largeiconsview") {
        Delete(this.parent, this.parent.selectedItems, this.parent.path, "delete");
      }
    };
    LargeIconsView2.prototype.onDeleteEnd = function(args) {
      if (this.parent.view !== "LargeIcons") {
        return;
      }
      this.onLayoutChange(args);
      this.parent.setProperties({ selectedItems: [] }, true);
      this.clearSelect();
    };
    LargeIconsView2.prototype.onRefreshEnd = function(args) {
      if (this.parent.view !== "LargeIcons") {
        return;
      }
      this.onLayoutChange(args);
    };
    LargeIconsView2.prototype.onRenameInit = function() {
      if (this.parent.activeModule === "largeiconsview" && this.parent.selectedItems.length === 1) {
        this.updateRenameData();
      }
    };
    LargeIconsView2.prototype.onPathChanged = function(args) {
      this.parent.isCut = false;
      if (this.parent.breadcrumbbarModule.searchObj.element.value === "") {
        this.parent.searchedItems = [];
      }
      if (this.parent.view === "LargeIcons") {
        removeBlur(this.parent);
        this.parent.setProperties({ selectedItems: [] }, true);
        this.onLayoutChange(args);
        if (this.parent.renamedItem) {
          this.clearSelect();
          this.addSelection(this.parent.renamedItem);
          this.parent.renamedItem = null;
        }
      }
    };
    LargeIconsView2.prototype.onOpenInit = function(args) {
      if (this.parent.activeModule === "largeiconsview") {
        this.doOpenAction(args.target);
      }
    };
    LargeIconsView2.prototype.onHideLayout = function() {
      if (this.parent.view !== "LargeIcons" && this.element) {
        this.element.classList.add(DISPLAY_NONE);
      }
    };
    LargeIconsView2.prototype.onSelectAllInit = function() {
      if (this.parent.view === "LargeIcons") {
        this.startItem = this.getFirstItem();
        var lastItem = this.getLastItem();
        var eveArgs = { ctrlKey: true, shiftKey: true };
        this.doSelection(lastItem, eveArgs);
        this.isInteraction = true;
        this.isInteracted = true;
      }
    };
    LargeIconsView2.prototype.onClearAllInit = function() {
      if (this.parent.view === "LargeIcons") {
        this.clearSelection();
        this.isInteraction = true;
        this.isInteracted = true;
      }
    };
    LargeIconsView2.prototype.onBeforeRequest = function() {
      this.isRendered = false;
    };
    LargeIconsView2.prototype.onAfterRequest = function() {
      this.isRendered = true;
    };
    LargeIconsView2.prototype.onSearch = function(args) {
      if (this.parent.view === "LargeIcons") {
        this.parent.setProperties({ selectedItems: [] }, true);
        this.parent.notify(selectionChanged, {});
        this.parent.searchedItems = args.files;
        this.onLayoutChange(args);
      }
    };
    LargeIconsView2.prototype.onLayoutRefresh = function() {
      if (this.parent.view !== "LargeIcons") {
        return;
      }
      this.adjustHeight();
    };
    LargeIconsView2.prototype.onUpdateSelectionData = function() {
      if (this.parent.view !== "LargeIcons") {
        return;
      }
      this.updateSelectedData();
    };
    LargeIconsView2.prototype.onPathColumn = function() {
      if (this.parent.view === "LargeIcons" && !isNullOrUndefined(this.listObj) && this.parent.breadcrumbbarModule.searchObj.element.value === "" && !this.parent.isFiltered && this.parent.sortBy === "filterPath") {
        this.parent.sortBy = "name";
        this.parent.notify(sortByChange, {});
      }
    };
    LargeIconsView2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(pathColumn, this.onPathColumn);
      this.parent.off(finalizeEnd, this.onFinalizeEnd);
      this.parent.off(createEnd, this.onCreateEnd);
      this.parent.off(selectedData, this.onSelectedData);
      this.parent.off(deleteInit, this.onDeleteInit);
      this.parent.off(deleteEnd, this.onDeleteEnd);
      this.parent.off(refreshEnd, this.onRefreshEnd);
      this.parent.off(pathChanged, this.onPathChanged);
      this.parent.off(layoutChange, this.onLayoutChange);
      this.parent.off(search, this.onSearch);
      this.parent.off(openInit, this.onOpenInit);
      this.parent.off(openEnd, this.onPathChanged);
      this.parent.off(modelChanged2, this.onPropertyChanged);
      this.parent.off(methodCall, this.onMethodCall);
      this.parent.off(actionFailure, this.onActionFailure);
      this.parent.off(renameInit, this.onRenameInit);
      this.parent.off(renameEnd, this.onPathChanged);
      this.parent.off(hideLayout, this.onHideLayout);
      this.parent.off(selectAllInit, this.onSelectAllInit);
      this.parent.off(clearAllInit, this.onClearAllInit);
      this.parent.off(menuItemData, this.onMenuItemData);
      this.parent.off(beforeRequest, this.onBeforeRequest);
      this.parent.off(afterRequest, this.onAfterRequest);
      this.parent.off(splitterResize, this.splitterResizeHandler);
      this.parent.off(resizeEnd, this.resizeHandler);
      this.parent.off(pasteInit, this.onpasteInit);
      this.parent.off(pasteEnd, this.onpasteEnd);
      this.parent.off(cutCopyInit, this.oncutCopyInit);
      this.parent.off(dropInit, this.onDropInit);
      this.parent.off(detailsInit, this.onDetailsInit);
      this.parent.off(layoutRefresh, this.onLayoutRefresh);
      this.parent.off(dropPath, this.onDropPath);
      this.parent.off(updateSelectionData, this.onUpdateSelectionData);
      this.parent.off(filterEnd, this.onPathChanged);
    };
    LargeIconsView2.prototype.addEventListener = function() {
      this.parent.on(pathColumn, this.onPathColumn, this);
      this.parent.on(finalizeEnd, this.onFinalizeEnd, this);
      this.parent.on(createEnd, this.onCreateEnd, this);
      this.parent.on(refreshEnd, this.onRefreshEnd, this);
      this.parent.on(selectedData, this.onSelectedData, this);
      this.parent.on(pathChanged, this.onPathChanged, this);
      this.parent.on(deleteInit, this.onDeleteInit, this);
      this.parent.on(pasteInit, this.onpasteInit, this);
      this.parent.on(deleteEnd, this.onDeleteEnd, this);
      this.parent.on(layoutChange, this.onLayoutChange, this);
      this.parent.on(search, this.onSearch, this);
      this.parent.on(openInit, this.onOpenInit, this);
      this.parent.on(renameInit, this.onRenameInit, this);
      this.parent.on(renameEnd, this.onPathChanged, this);
      this.parent.on(openEnd, this.onPathChanged, this);
      this.parent.on(modelChanged2, this.onPropertyChanged, this);
      this.parent.on(methodCall, this.onMethodCall, this);
      this.parent.on(actionFailure, this.onActionFailure, this);
      this.parent.on(hideLayout, this.onHideLayout, this);
      this.parent.on(selectAllInit, this.onSelectAllInit, this);
      this.parent.on(clearAllInit, this.onClearAllInit, this);
      this.parent.on(menuItemData, this.onMenuItemData, this);
      this.parent.on(beforeRequest, this.onBeforeRequest, this);
      this.parent.on(afterRequest, this.onAfterRequest, this);
      this.parent.on(dropInit, this.onDropInit, this);
      this.parent.on(detailsInit, this.onDetailsInit, this);
      this.parent.on(splitterResize, this.splitterResizeHandler, this);
      this.parent.on(resizeEnd, this.resizeHandler, this);
      this.parent.on(pasteEnd, this.onpasteEnd, this);
      this.parent.on(cutCopyInit, this.oncutCopyInit, this);
      this.parent.on(layoutRefresh, this.onLayoutRefresh, this);
      this.parent.on(dropPath, this.onDropPath, this);
      this.parent.on(updateSelectionData, this.onUpdateSelectionData, this);
      this.parent.on(filterEnd, this.onPathChanged, this);
    };
    LargeIconsView2.prototype.onActionFailure = function() {
      this.isInteraction = true;
      this.isInteracted = true;
    };
    LargeIconsView2.prototype.onMenuItemData = function(args) {
      if (this.parent.activeModule === this.getModuleName()) {
        var ele = closest(args.target, "li");
        this.parent.itemData = [this.getItemObject(ele)];
      }
    };
    LargeIconsView2.prototype.onDetailsInit = function() {
      if (this.parent.activeModule === this.getModuleName()) {
        if (this.parent.selectedItems.length !== 0) {
          this.updateSelectedData();
        } else {
          this.parent.itemData = [getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];
        }
      }
    };
    LargeIconsView2.prototype.onpasteInit = function() {
      if (this.parent.activeModule === this.getModuleName()) {
        this.parent.itemData = this.parent.folderPath === "" ? [getPathObject(this.parent)] : [this.getItemObject(select(".e-active", this.element))];
      }
    };
    LargeIconsView2.prototype.oncutCopyInit = function() {
      if (this.parent.activeModule === this.getModuleName()) {
        var activeEle = this.element.querySelectorAll("." + ACTIVE);
        this.parent.activeRecords = [];
        this.parent.activeElements = [];
        for (var i = 0; i < activeEle.length; i++) {
          this.parent.activeElements.push(activeEle[i]);
          this.parent.activeRecords.push(this.getItemObject(activeEle[i]));
        }
      }
    };
    LargeIconsView2.prototype.onpasteEnd = function(args) {
      if (this.parent.view === "LargeIcons") {
        this.isPasteOperation = true;
        if (this.parent.path === this.parent.destinationPath || this.parent.path === getDirectoryPath(this.parent, args)) {
          this.onPathChanged(args);
        }
      }
    };
    LargeIconsView2.prototype.onDropPath = function(args) {
      if (this.parent.view === "LargeIcons") {
        this.isPasteOperation = true;
        this.onPathChanged(args);
      }
    };
    LargeIconsView2.prototype.onPropertyChanged = function(e) {
      var currentSelected;
      if (e.module !== this.getModuleName() && e.module !== "common") {
        return;
      }
      for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "allowDragAndDrop":
            this.createDragObj();
            break;
          case "height":
            this.adjustHeight();
            break;
          case "selectedItems":
            this.isInteraction = false;
            this.isInteracted = false;
            currentSelected = isNullOrUndefined(this.parent.selectedItems) ? [] : this.parent.selectedItems.slice(0);
            currentSelected = this.parent.allowMultiSelection ? currentSelected : currentSelected.slice(currentSelected.length - 1);
            this.parent.setProperties({ selectedItems: [] }, true);
            this.onClearAllInit();
            if (currentSelected.length) {
              this.selectItems(currentSelected);
            }
            this.parent.setProperties({ selectedItems: this.parent.selectedItems }, true);
            this.isInteraction = true;
            this.isInteracted = true;
            break;
          case "showThumbnail":
            refresh(this.parent);
            break;
          case "showFileExtension":
            read(this.parent, pathChanged, this.parent.path);
            break;
          case "showHiddenItems":
            read(this.parent, pathChanged, this.parent.path);
            break;
          case "allowMultiSelection":
            if (this.parent.view !== "LargeIcons") {
              break;
            }
            refresh(this.parent);
            break;
          case "view":
            updateLayout(this.parent, "LargeIcons");
            break;
        }
      }
    };
    LargeIconsView2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.removeEventListener();
      if (this.listObj) {
        this.unWireEvents();
      }
    };
    LargeIconsView2.prototype.wireEvents = function() {
      this.wireClickEvent(true);
      this.keyboardModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keyup"
      });
      this.keyboardDownModule = new KeyboardEvents(this.element, {
        keyAction: this.keydownActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      EventHandler.add(this.element, "mouseover", this.onMouseOver, this);
    };
    LargeIconsView2.prototype.unWireEvents = function() {
      this.wireClickEvent(false);
      EventHandler.remove(this.element, "mouseover", this.onMouseOver);
      this.keyboardModule.destroy();
      this.keyboardDownModule.destroy();
    };
    LargeIconsView2.prototype.onMouseOver = function(e) {
      var targetEle = closest(e.target, ".e-list-item");
      removeBlur(this.parent, "hover");
      if (targetEle !== null) {
        targetEle.classList.add(HOVER);
      }
    };
    LargeIconsView2.prototype.wireClickEvent = function(toBind) {
      if (toBind) {
        var proxy_1 = this;
        this.clickObj = new Touch(this.element, {
          tap: function(eve) {
            eve.originalEvent.preventDefault();
            if (proxy_1.parent.isDevice) {
              proxy_1.tapCount = eve.tapCount;
              proxy_1.tapEvent = eve;
              setTimeout(function() {
                if (proxy_1.tapCount > 0) {
                  proxy_1.doTapAction(proxy_1.tapEvent);
                }
                proxy_1.tapCount = 0;
              }, 350);
            } else {
              if (eve.tapCount === 2 && eve.originalEvent.which !== 3) {
                proxy_1.dblClickHandler(eve);
              } else {
                proxy_1.clickHandler(eve);
              }
            }
          },
          tapHold: function(e) {
            if (proxy_1.parent.isDevice) {
              proxy_1.multiSelect = proxy_1.parent.allowMultiSelection ? true : false;
              if (proxy_1.parent.allowMultiSelection) {
                addClass([proxy_1.parent.element], MULTI_SELECT);
              }
              proxy_1.clickHandler(e);
            }
          }
        });
      } else {
        if (this.clickObj) {
          this.clickObj.destroy();
        }
      }
    };
    LargeIconsView2.prototype.doTapAction = function(eve) {
      var target = eve.originalEvent.target;
      var item = closest(target, "." + LIST_ITEM);
      if (this.multiSelect || target.classList.contains(LIST_PARENT) || isNullOrUndefined(item)) {
        this.clickHandler(eve);
      } else {
        this.parent.isFile = false;
        this.updateType(item);
        if (!this.parent.isFile) {
          this.dblClickHandler(eve);
        } else if (eve.tapCount === 2) {
          this.clickHandler(eve);
          this.dblClickHandler(eve);
        } else {
          this.clickHandler(eve);
        }
      }
    };
    LargeIconsView2.prototype.clickHandler = function(e) {
      var target = e.originalEvent.target;
      removeBlur(this.parent, "hover");
      this.doSelection(target, e.originalEvent);
      this.parent.activeModule = "largeiconsview";
    };
    LargeIconsView2.prototype.doSelection = function(target, e) {
      var item = closest(target, "." + LIST_ITEM);
      var cList = target.classList;
      this.parent.isFile = false;
      var action = "select";
      if (e.which === 3 && !isNullOrUndefined(item) && item.classList.contains(ACTIVE)) {
        this.updateType(item);
        return;
      } else if (!isNullOrUndefined(item)) {
        if (this.parent.allowMultiSelection && item.classList.contains(ACTIVE) && (e.ctrlKey || target.classList.contains(CHECK))) {
          action = "unselect";
        }
        if (e.ctrlKey && e.shiftKey) {
          this.isSelectAllCalled = true;
        }
        var fileSelectionArgs = this.triggerSelection(action, item);
        if (fileSelectionArgs.cancel !== true) {
          if ((!this.parent.allowMultiSelection || !this.multiSelect && (e && !e.ctrlKey)) && !cList.contains(FRAME)) {
            this.updateType(item);
            this.clearSelect();
          }
          if (this.parent.allowMultiSelection && e.shiftKey) {
            if (!(e && e.ctrlKey)) {
              this.clearSelect();
            }
            if (!this.startItem) {
              this.startItem = item;
            }
            var startIndex = this.itemList.indexOf(this.startItem);
            var endIndex = this.itemList.indexOf(item);
            if (startIndex > endIndex) {
              for (var i = startIndex; i >= endIndex; i--) {
                this.addActive(this.itemList[i]);
              }
            } else {
              for (var i = startIndex; i <= endIndex; i++) {
                this.addActive(this.itemList[i]);
              }
            }
            this.addFocus(this.itemList[endIndex]);
          } else {
            this.startItem = item;
            if (this.parent.allowMultiSelection && item.classList.contains(ACTIVE)) {
              this.removeActive(item);
            } else {
              this.addActive(item);
            }
            this.addFocus(item);
          }
          if (this.parent.selectedItems.length === 0) {
            this.resetMultiSelect();
          }
          this.parent.notify(selectionChanged, {});
          this.triggerSelect(action, item);
        }
      } else {
        if (this.parent.selectedItems.length === this.itemList.length) {
          this.isSelectAllCalled = true;
        }
        this.clearSelection();
      }
      if (!isNullOrUndefined(item)) {
        this.isSelectAllCalled = false;
        this.updateType(item);
      }
    };
    LargeIconsView2.prototype.dblClickHandler = function(e) {
      this.parent.activeModule = "largeiconsview";
      var target = e.originalEvent.target;
      this.doOpenAction(target);
    };
    LargeIconsView2.prototype.clearSelection = function() {
      this.clearSelect();
      this.resetMultiSelect();
      this.parent.notify(selectionChanged, {});
    };
    LargeIconsView2.prototype.resetMultiSelect = function() {
      this.multiSelect = false;
      removeClass([this.parent.element], MULTI_SELECT);
    };
    LargeIconsView2.prototype.doOpenAction = function(target) {
      var _this = this;
      if (isNullOrUndefined(target)) {
        return;
      }
      var item = closest(target, "." + LIST_ITEM);
      this.parent.isFile = false;
      if (!isNullOrUndefined(item)) {
        this.updateType(item);
        var details_1 = this.getItemObject(item);
        if (!hasReadAccess(details_1)) {
          createDeniedDialog(this.parent, details_1, permissionRead);
          return;
        }
        var eventArgs = { cancel: false, fileDetails: details_1, module: "LargeIconsView" };
        this.parent.trigger("fileOpen", eventArgs, function(fileOpenArgs) {
          if (!fileOpenArgs.cancel) {
            var text = getValue("name", details_1);
            if (!_this.parent.isFile) {
              var val = _this.parent.breadcrumbbarModule.searchObj.element.value;
              if (val === "" && !_this.parent.isFiltered) {
                var id = getValue("id", details_1);
                _this.parent.oldPath = _this.parent.path;
                var newPath = _this.parent.path + (isNullOrUndefined(id) ? text : id) + "/";
                _this.parent.setProperties({ path: newPath }, true);
                _this.parent.pathNames.push(text);
                _this.parent.pathId.push(getValue("_fm_id", details_1));
                _this.parent.itemData = [details_1];
                openAction(_this.parent);
              } else {
                openSearchFolder(_this.parent, details_1);
              }
              _this.parent.isFiltered = false;
              _this.parent.setProperties({ selectedItems: [] }, true);
            } else {
              var icon = fileType(details_1);
              if (icon === ICON_IMAGE) {
                var imgUrl = getImageUrl(_this.parent, details_1);
                createImageDialog(_this.parent, text, imgUrl);
              }
            }
          }
        });
      }
    };
    LargeIconsView2.prototype.updateType = function(item) {
      var folder = select("." + FOLDER, item);
      this.parent.isFile = isNullOrUndefined(folder) ? true : false;
    };
    LargeIconsView2.prototype.keydownActionHandler = function(e) {
      if (!this.isRendered) {
        return;
      }
      switch (e.action) {
        case "end":
        case "home":
        case "moveDown":
        case "moveLeft":
        case "moveRight":
        case "moveUp":
        case "ctrlEnd":
        case "shiftEnd":
        case "csEnd":
        case "ctrlHome":
        case "shiftHome":
        case "csHome":
        case "ctrlDown":
        case "shiftDown":
        case "csDown":
        case "ctrlLeft":
        case "shiftLeft":
        case "csLeft":
        case "ctrlRight":
        case "shiftRight":
        case "csRight":
        case "space":
        case "ctrlSpace":
        case "shiftSpace":
        case "csSpace":
        case "ctrlA":
        case "enter":
        case "altEnter":
        case "esc":
        case "del":
        case "shiftdel":
        case "ctrlC":
        case "ctrlV":
        case "ctrlX":
        case "f2":
        case "ctrlD":
          e.preventDefault();
          break;
        default:
          break;
      }
    };
    LargeIconsView2.prototype.keyActionHandler = function(e) {
      var _this = this;
      if (!this.isRendered) {
        return;
      }
      var fItem = this.getFocusedItem();
      var firstItem = this.getFirstItem();
      var lastItem = this.getLastItem();
      switch (e.action) {
        case "end":
          if (this.parent.enableVirtualization) {
            this.clearSelect();
            this.element.firstElementChild.scrollTo(0, this.element.firstElementChild.scrollHeight);
            setTimeout(function() {
              _this.navigateItem(_this.itemList[_this.itemList.length - 1]);
            }, 10);
          } else {
            this.navigateItem(lastItem);
          }
          break;
        case "home":
          if (this.parent.enableVirtualization) {
            this.clearSelect();
            this.element.firstElementChild.scrollTop = 0;
            setTimeout(function() {
              _this.navigateItem(_this.itemList[0]);
            }, 10);
          } else {
            this.navigateItem(firstItem);
          }
          break;
        case "tab":
          if (!isNullOrUndefined(fItem)) {
            this.addFocus(fItem);
          } else if (!isNullOrUndefined(firstItem)) {
            this.addFocus(firstItem);
          }
          break;
        case "moveDown":
          this.navigateDown(fItem, true);
          break;
        case "moveLeft":
          this.navigateRight(fItem, false);
          break;
        case "moveRight":
          this.navigateRight(fItem, true);
          break;
        case "moveUp":
          this.navigateDown(fItem, false);
          break;
        case "ctrlEnd":
        case "shiftEnd":
        case "csEnd":
          this.csEndKey(lastItem, e);
          break;
        case "ctrlHome":
        case "shiftHome":
        case "csHome":
          this.csHomeKey(firstItem, e);
          break;
        case "ctrlDown":
        case "shiftDown":
        case "csDown":
          this.csDownKey(fItem, e);
          break;
        case "ctrlLeft":
        case "shiftLeft":
        case "csLeft":
          this.csLeftKey(fItem, e);
          break;
        case "ctrlRight":
        case "shiftRight":
        case "csRight":
          this.csRightKey(fItem, e);
          break;
        case "ctrlUp":
        case "shiftUp":
        case "csUp":
          this.csUpKey(fItem, e);
          break;
        case "space":
          this.spaceKey(fItem);
          break;
        case "ctrlSpace":
        case "shiftSpace":
        case "csSpace":
          if (!isNullOrUndefined(fItem)) {
            this.doSelection(fItem, e);
          }
          break;
        case "ctrlA":
          this.ctrlAKey(firstItem, lastItem);
          break;
        case "enter":
          this.doOpenAction(this.parent.visitedItem ? this.parent.visitedItem : this.getVisitedItem());
          break;
        case "altEnter":
          this.parent.notify(detailsInit, {});
          GetDetails(this.parent, this.parent.selectedItems, this.parent.path, "details");
          break;
        case "esc":
          removeActive(this.parent);
          break;
        case "del":
        case "shiftdel":
          this.performDelete();
          break;
        case "ctrlC":
          copyFiles(this.parent);
          break;
        case "ctrlV":
          this.parent.folderPath = "";
          pasteHandler(this.parent);
          break;
        case "ctrlX":
          cutFiles(this.parent);
          break;
        case "f2":
          this.performRename();
          break;
        case "ctrlD":
          this.doDownload();
          break;
      }
    };
    LargeIconsView2.prototype.doDownload = function() {
      this.updateSelectedData();
      doDownload(this.parent);
    };
    LargeIconsView2.prototype.performDelete = function() {
      if (this.parent.selectedItems && this.parent.selectedItems.length > 0) {
        this.updateSelectedData();
        var data = this.parent.itemData;
        for (var i = 0; i < data.length; i++) {
          if (!hasEditAccess(data[i])) {
            createDeniedDialog(this.parent, data[i], permissionEdit);
            return;
          }
        }
        createDialog(this.parent, "Delete");
      }
    };
    LargeIconsView2.prototype.performRename = function() {
      if (this.parent.selectedItems.length === 1) {
        this.updateRenameData();
        doRename(this.parent);
      }
    };
    LargeIconsView2.prototype.updateRenameData = function() {
      var item = select("." + LIST_ITEM + "." + ACTIVE, this.element);
      var data = this.getItemObject(item);
      updateRenamingData(this.parent, data);
    };
    LargeIconsView2.prototype.getVisitedItem = function() {
      var item = this.parent.selectedItems[this.parent.selectedItems.length - 1];
      var indexes = this.getIndexes([item], this.parent.hasId);
      return this.itemList[indexes[0]];
    };
    LargeIconsView2.prototype.getFocusedItem = function() {
      return select("." + LIST_ITEM + "." + FOCUS, this.element);
    };
    LargeIconsView2.prototype.getActiveItem = function() {
      return select("." + LIST_ITEM + "." + ACTIVE, this.element);
    };
    LargeIconsView2.prototype.getFirstItem = function() {
      return this.itemList[0];
    };
    LargeIconsView2.prototype.getLastItem = function() {
      return this.itemList[this.itemList.length - 1];
    };
    LargeIconsView2.prototype.navigateItem = function(item) {
      this.setFocus(item);
    };
    LargeIconsView2.prototype.navigateDown = function(fItem, isTowards) {
      var nItem = this.getNextItem(fItem, isTowards, this.perRow);
      this.setFocus(nItem);
    };
    LargeIconsView2.prototype.navigateRight = function(fItem, isTowards) {
      var nItem = this.getNextItem(fItem, isTowards);
      this.setFocus(nItem);
    };
    LargeIconsView2.prototype.getNextItem = function(li, isTowards, perRow) {
      if (isNullOrUndefined(li)) {
        return this.getFocusedItem() || this.getActiveItem() || this.getFirstItem();
      }
      var index = this.itemList.indexOf(li);
      var nextItem;
      do {
        if (isTowards) {
          index = perRow ? index + perRow : index + 1;
        } else {
          index = perRow ? index - perRow : index - 1;
        }
        nextItem = this.itemList[index];
        if (this.parent.enableVirtualization && isNullOrUndefined(nextItem)) {
          var marginValue = parseInt(window.getComputedStyle(this.itemList[0]).getPropertyValue("margin-top"), 10) + parseInt(window.getComputedStyle(this.itemList[0]).getPropertyValue("margin-bottom"), 10);
          var scrollHeight = this.itemList[0].getBoundingClientRect().height + marginValue;
          this.element.firstElementChild.scrollTo(this.element.firstElementChild.scrollTop, this.element.firstElementChild.scrollTop + scrollHeight);
        }
        if (isNullOrUndefined(nextItem)) {
          return li;
        }
      } while (!isVisible(nextItem));
      return nextItem;
    };
    LargeIconsView2.prototype.setFocus = function(nextItem) {
      if (!isNullOrUndefined(nextItem)) {
        var fileSelectionArgs = this.triggerSelection("select", nextItem);
        if (fileSelectionArgs.cancel !== true) {
          this.startItem = nextItem;
          this.clearSelect();
          this.addActive(nextItem);
          this.addFocus(nextItem);
          this.parent.notify(selectionChanged, {});
          this.triggerSelect("select", nextItem);
        }
      }
    };
    LargeIconsView2.prototype.spaceKey = function(fItem) {
      if (!isNullOrUndefined(fItem) && !fItem.classList.contains(ACTIVE)) {
        var fileSelectionArgs = this.triggerSelection("select", fItem);
        if (fileSelectionArgs.cancel !== true) {
          this.addActive(fItem);
          this.parent.notify(selectionChanged, {});
          this.triggerSelect("select", fItem);
        }
      }
    };
    LargeIconsView2.prototype.ctrlAKey = function(firstItem, lastItem) {
      if (this.parent.allowMultiSelection && !isNullOrUndefined(firstItem)) {
        this.startItem = firstItem;
        var eveArgs = { ctrlKey: true, shiftKey: true };
        var liParent = this.element.querySelector("." + LIST_PARENT);
        var liScrPos = liParent.scrollTop;
        var getCurFocusedItem = this.getFocusedItem();
        this.doSelection(lastItem, eveArgs);
        liParent.scrollTop = liScrPos;
        if (!isNullOrUndefined(getCurFocusedItem)) {
          this.addFocus(getCurFocusedItem);
        }
      }
    };
    LargeIconsView2.prototype.csEndKey = function(lastItem, e) {
      if (!this.parent.allowMultiSelection) {
        this.navigateItem(lastItem);
      } else if (!isNullOrUndefined(lastItem)) {
        if (e.action === "ctrlEnd") {
          this.addFocus(lastItem);
        } else {
          this.doSelection(lastItem, e);
        }
      }
    };
    LargeIconsView2.prototype.csHomeKey = function(firstItem, e) {
      if (!this.parent.allowMultiSelection) {
        this.navigateItem(firstItem);
      } else if (!isNullOrUndefined(firstItem)) {
        if (e.action === "ctrlHome") {
          this.addFocus(firstItem);
        } else {
          this.doSelection(firstItem, e);
        }
      }
    };
    LargeIconsView2.prototype.csDownKey = function(fItem, e) {
      if (!this.parent.allowMultiSelection) {
        this.navigateDown(fItem, true);
      } else {
        var dItem = this.getNextItem(fItem, true, this.perRow);
        if (!isNullOrUndefined(dItem)) {
          if (e.action === "ctrlDown") {
            this.addFocus(dItem);
          } else {
            this.doSelection(dItem, e);
          }
        }
      }
    };
    LargeIconsView2.prototype.csLeftKey = function(fItem, e) {
      if (!this.parent.allowMultiSelection) {
        this.navigateRight(fItem, false);
      } else {
        var lItem = this.getNextItem(fItem, false);
        if (!isNullOrUndefined(lItem)) {
          if (e.action === "ctrlLeft") {
            this.addFocus(lItem);
          } else {
            this.doSelection(lItem, e);
          }
        }
      }
    };
    LargeIconsView2.prototype.csRightKey = function(fItem, e) {
      if (!this.parent.allowMultiSelection) {
        this.navigateRight(fItem, true);
      } else {
        var rItem = this.getNextItem(fItem, true);
        if (!isNullOrUndefined(rItem)) {
          if (e.action === "ctrlRight") {
            this.addFocus(rItem);
          } else {
            this.doSelection(rItem, e);
          }
        }
      }
    };
    LargeIconsView2.prototype.csUpKey = function(fItem, e) {
      if (!this.parent.allowMultiSelection) {
        this.navigateDown(fItem, false);
      } else {
        var uItem = this.getNextItem(fItem, false, this.perRow);
        if (!isNullOrUndefined(uItem)) {
          if (e.action === "ctrlUp") {
            this.addFocus(uItem);
          } else {
            this.doSelection(uItem, e);
          }
        }
      }
    };
    LargeIconsView2.prototype.addActive = function(nextItem) {
      if (!isNullOrUndefined(nextItem)) {
        if (!nextItem.classList.contains(ACTIVE)) {
          this.parent.selectedItems.push(this.getDataName(nextItem));
          this.parent.setProperties({ selectedItems: this.parent.selectedItems }, true);
          addClass([nextItem], [ACTIVE]);
          nextItem.setAttribute("aria-selected", "true");
          this.checkState(nextItem, true);
        }
        this.parent.visitedItem = nextItem;
      }
    };
    LargeIconsView2.prototype.removeActive = function(preItem) {
      if (!isNullOrUndefined(preItem)) {
        removeClass([preItem], [ACTIVE]);
        if (this.parent.allowMultiSelection) {
          preItem.setAttribute("aria-selected", "false");
        } else {
          preItem.removeAttribute("aria-selected");
        }
        this.checkState(preItem, false);
        var index = this.parent.selectedItems.indexOf(this.getDataName(preItem));
        if (index > -1) {
          this.parent.selectedItems.splice(index, 1);
          this.parent.setProperties({ selectedItems: this.parent.selectedItems }, true);
        }
        this.parent.visitedItem = null;
      }
    };
    LargeIconsView2.prototype.getDataName = function(item) {
      var data = this.getItemObject(item);
      return getItemName(this.parent, data);
    };
    LargeIconsView2.prototype.addFocus = function(item) {
      this.element.setAttribute("tabindex", "-1");
      var fItem = this.getFocusedItem();
      if (fItem) {
        fItem.removeAttribute("tabindex");
        removeClass([fItem], [FOCUS]);
      }
      addClass([item], [FOCUS]);
      item.setAttribute("tabindex", "0");
      item.focus();
    };
    LargeIconsView2.prototype.checkState = function(item, toCheck) {
      if (!this.parent.showItemCheckBoxes) {
        return;
      }
      var checkEle = select("." + FRAME, item);
      if (isNullOrUndefined(checkEle)) {
        return;
      }
      if (toCheck) {
        if (!checkEle.classList.contains(CHECK)) {
          addClass([checkEle], CHECK);
          closest(checkEle, "." + CB_WRAP).setAttribute("aria-checked", "true");
        }
      } else {
        if (checkEle.classList.contains(CHECK)) {
          removeClass([checkEle], CHECK);
          closest(checkEle, "." + CB_WRAP).setAttribute("aria-checked", "false");
        }
      }
    };
    LargeIconsView2.prototype.clearSelect = function() {
      var eles = Array.prototype.slice.call(selectAll("." + ACTIVE, this.listElements));
      var fileSelectionArgs;
      if (eles.length !== 0) {
        fileSelectionArgs = this.triggerSelection("unselect", eles[0]);
        if (fileSelectionArgs.cancel !== true) {
          for (var i = 0, len = eles.length; i < len; i++) {
            this.removeActive(eles[i]);
          }
        }
        this.triggerSelect("unselect", eles[0]);
      }
    };
    LargeIconsView2.prototype.resizeHandler = function() {
      this.getItemCount();
      if (!isNullOrUndefined(this.listObj)) {
        this.adjustHeight();
      }
    };
    LargeIconsView2.prototype.splitterResizeHandler = function() {
      this.getItemCount();
    };
    LargeIconsView2.prototype.getItemCount = function() {
      var perRow = 1;
      if (this.itemList) {
        for (var i = 0, len = this.itemList.length - 1; i < len; i++) {
          if (this.itemList[i].getBoundingClientRect().top === this.itemList[i + 1].getBoundingClientRect().top) {
            perRow++;
          } else {
            break;
          }
        }
      }
      this.perRow = perRow;
    };
    LargeIconsView2.prototype.triggerSelection = function(action, item) {
      var data = [];
      if (this.isSelectAllCalled) {
        for (var i = 0, len = this.itemList.length; i < len; i++) {
          data[i] = this.getItemObject(this.itemList[i]);
        }
      } else {
        data[0] = this.getItemObject(item);
      }
      var eventArgs = {
        action,
        fileDetails: data.length > 1 ? data : data[0],
        isInteracted: this.isInteraction,
        cancel: false,
        target: this.isSelectAllCalled ? null : item
      };
      this.parent.trigger("fileSelection", eventArgs);
      this.isInteraction = true;
      return eventArgs;
    };
    LargeIconsView2.prototype.triggerSelect = function(action, item) {
      var data = [];
      if (this.isSelectAllCalled) {
        for (var i = 0, len = this.itemList.length; i < len; i++) {
          data[i] = this.getItemObject(this.itemList[i]);
        }
        this.isSelectAllCalled = false;
      } else {
        data[0] = this.getItemObject(item);
      }
      this.parent.visitedData = data.length > 1 ? data[data.length - 1] : data[0];
      var eventArgs = { action, fileDetails: data.length > 1 ? data : data[0], isInteracted: this.isInteracted };
      this.parent.trigger("fileSelect", eventArgs);
      this.isInteracted = true;
    };
    LargeIconsView2.prototype.selectItems = function(items) {
      var indexes = this.getIndexes(items, this.parent.hasId);
      for (var j = 0, len = indexes.length; j < len; j++) {
        var eveArgs = { ctrlKey: true, shiftKey: false };
        this.doSelection(this.itemList[indexes[j]], eveArgs);
      }
    };
    LargeIconsView2.prototype.getIndexes = function(items, byId) {
      var indexes = [];
      var filter2 = byId ? "id" : "name";
      for (var i = 0, len = this.items.length; i < len; i++) {
        if (items.indexOf(getValue(filter2, this.items[i])) !== -1) {
          indexes.push(i);
        }
      }
      return indexes;
    };
    LargeIconsView2.prototype.getItemObject = function(item) {
      var index = this.itemList.indexOf(item);
      return this.items[index];
    };
    LargeIconsView2.prototype.addSelection = function(data) {
      var resultData = [];
      if (this.parent.hasId) {
        resultData = new DataManager(this.items).executeLocal(new Query().where("id", "equal", this.parent.renamedId, false));
      } else {
        var newData = new DataManager(this.items).executeLocal(new Query().where("name", "equal", getValue("name", data), false));
        if (newData.length > 0) {
          resultData = new DataManager(newData).executeLocal(new Query().where("filterPath", "equal", this.parent.filterPath, false));
        }
      }
      if (resultData.length > 0) {
        var index = this.items.indexOf(resultData[0]);
        var eveArgs = { ctrlKey: true, shiftKey: false };
        this.doSelection(this.itemList[index], eveArgs);
      }
    };
    LargeIconsView2.prototype.updateSelectedData = function() {
      var data = [];
      var items = selectAll("." + LIST_ITEM + "." + ACTIVE, this.element);
      for (var i = 0; i < items.length; i++) {
        data[i] = this.getItemObject(items[i]);
      }
      this.parent.itemData = data;
    };
    LargeIconsView2.prototype.onMethodCall = function(args) {
      if (this.parent.view !== "LargeIcons") {
        return;
      }
      var action = getValue("action", args);
      switch (action) {
        case "deleteFiles":
          this.deleteFiles(getValue("ids", args));
          break;
        case "downloadFiles":
          this.downloadFiles(getValue("ids", args));
          break;
        case "openFile":
          this.openFile(getValue("id", args));
          break;
        case "renameFile":
          this.isInteraction = false;
          this.isInteracted = false;
          this.renameFile(getValue("id", args), getValue("newName", args));
          break;
        case "createFolder":
          this.isInteraction = false;
          this.isInteracted = false;
          break;
        case "clearSelection":
          this.isInteraction = false;
          this.isInteracted = false;
          this.onClearAllInit();
          break;
        case "selectAll":
          this.isInteraction = false;
          this.isInteracted = false;
          this.onSelectAllInit();
          break;
      }
    };
    LargeIconsView2.prototype.getItemsIndex = function(items) {
      var indexes = [];
      var isFilter = this.parent.breadcrumbbarModule.searchObj.element.value !== "" || this.parent.isFiltered ? true : false;
      var filterName = this.parent.hasId ? "id" : "name";
      if (this.parent.hasId || !isFilter) {
        for (var i = 0, len = this.items.length; i < len; i++) {
          if (items.indexOf(getValue(filterName, this.items[i])) !== -1) {
            indexes.push(i);
          }
        }
      } else {
        for (var i = 0, len = this.items.length; i < len; i++) {
          var name_2 = getValue("filterPath", this.items[i]) + getValue("name", this.items[i]);
          if (items.indexOf(name_2) !== -1 || items.indexOf(getValue(filterName, this.items[i])) !== -1) {
            indexes.push(i);
          }
        }
      }
      return indexes;
    };
    LargeIconsView2.prototype.deleteFiles = function(ids) {
      this.parent.activeModule = "largeiconsview";
      if (isNullOrUndefined(ids)) {
        this.performDelete();
        return;
      }
      var indexes = this.getItemsIndex(ids);
      if (indexes.length === 0) {
        return;
      }
      var data = [];
      var newIds = [];
      for (var i = 0; i < indexes.length; i++) {
        data[i] = this.items[indexes[i]];
        newIds[i] = getItemName(this.parent, data[i]);
      }
      doDeleteFiles(this.parent, data, newIds);
    };
    LargeIconsView2.prototype.downloadFiles = function(ids) {
      if (isNullOrUndefined(ids)) {
        this.doDownload();
        return;
      }
      var index = this.getItemsIndex(ids);
      if (index.length === 0) {
        return;
      }
      var data = [];
      var newIds = [];
      for (var i = 0; i < index.length; i++) {
        data[i] = this.items[index[i]];
        newIds[i] = getItemName(this.parent, data[i]);
      }
      doDownloadFiles(this.parent, data, newIds);
    };
    LargeIconsView2.prototype.openFile = function(id) {
      if (isNullOrUndefined(id)) {
        return;
      }
      var indexes = this.getItemsIndex([id]);
      if (indexes.length > 0) {
        this.doOpenAction(this.itemList[indexes[0]]);
      }
    };
    LargeIconsView2.prototype.renameFile = function(id, name) {
      this.parent.activeModule = "largeiconsview";
      if (isNullOrUndefined(id)) {
        this.performRename();
        return;
      }
      var indexes = this.getItemsIndex([id]);
      if (indexes.length > 0) {
        updateRenamingData(this.parent, this.items[indexes[0]]);
        if (isNullOrUndefined(name)) {
          doRename(this.parent);
        } else {
          if (!hasEditAccess(this.parent.itemData[0])) {
            createDeniedDialog(this.parent, this.parent.itemData[0], permissionEdit);
          } else {
            rename(this.parent, this.parent.path, name);
          }
        }
      }
    };
    return LargeIconsView2;
  }()
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/actions/breadcrumb-bar.js
var BreadCrumbBar = (
  /** @class */
  function() {
    function BreadCrumbBar2(parent) {
      this.addressPath = "";
      this.addressBarLink = "";
      this.searchTimer = null;
      this.searchWrapWidth = null;
      this.parent = parent;
      this.keyConfigs = {
        enter: "enter"
      };
      this.render();
    }
    BreadCrumbBar2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName() && e.module !== "common") {
        return;
      }
      for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var value = e.newProp.searchSettings;
        switch (prop) {
          case "searchSettings":
            if (!isNullOrUndefined(value.allowSearchOnTyping)) {
              this.searchEventBind(value.allowSearchOnTyping);
            }
            if (this.parent.breadcrumbbarModule.searchObj.value && this.parent.breadcrumbbarModule.searchObj.value !== "" && !(!isNullOrUndefined(value.allowSearchOnTyping) && isNullOrUndefined(value.filterType) && isNullOrUndefined(value.ignoreCase))) {
              searchWordHandler(this.parent, this.parent.breadcrumbbarModule.searchObj.value, false);
            }
            break;
        }
      }
    };
    BreadCrumbBar2.prototype.render = function() {
      this.addEventListener();
    };
    BreadCrumbBar2.prototype.onPathChange = function() {
      var pathNames = this.parent.pathNames;
      var paths = this.parent.path.split("/");
      var addressbarUL = this.parent.createElement("ul", { className: "e-addressbar-ul" });
      var addressbarLI = null;
      var pathNamesLen = pathNames.length;
      if (pathNames.length > 0) {
        var id = "";
        for (var i = 0; i < pathNamesLen; i++) {
          var addressATag = null;
          addressbarLI = this.parent.createElement("li", { className: "e-address-list-item" });
          for (var j = 0; j <= i; j++) {
            id = id + paths[j] + "/";
          }
          addressbarLI.setAttribute("data-utext", id);
          if (i !== 0) {
            var icon = createElement("span", { className: ICONS });
            addressbarLI.appendChild(icon);
          }
          if (pathNamesLen - i !== 1) {
            addressATag = createElement("a", { className: LIST_TEXT });
            addressbarLI.setAttribute("tabindex", "0");
          } else {
            addressATag = createElement("span", { className: LIST_TEXT });
          }
          id = "";
          addressATag.innerText = pathNames[i];
          addressbarLI.appendChild(addressATag);
          addressbarUL.appendChild(addressbarLI);
        }
        var ulElement = this.parent.breadCrumbBarNavigation.querySelector(".e-addressbar-ul");
        if (!isNullOrUndefined(ulElement)) {
          if (!isNullOrUndefined(this.subMenuObj)) {
            this.subMenuObj.destroy();
          }
          remove(ulElement);
        }
        var searchWrap = this.parent.breadCrumbBarNavigation.querySelector(".e-search-wrap");
        if (!searchWrap) {
          this.parent.breadCrumbBarNavigation.insertBefore(addressbarUL, searchWrap);
        } else {
          this.parent.breadCrumbBarNavigation.appendChild(addressbarUL);
        }
        this.updateBreadCrumbBar(addressbarUL);
      }
    };
    BreadCrumbBar2.prototype.updateBreadCrumbBar = function(addresBarUL) {
      var liElements = addresBarUL.querySelectorAll("li");
      var ulElement = this.parent.breadCrumbBarNavigation.querySelector(".e-addressbar-ul");
      var style = window.getComputedStyle(ulElement, null);
      var pRight = parseFloat(style.getPropertyValue("padding-right"));
      var pLeft = parseFloat(style.getPropertyValue("padding-left"));
      var breadCrumbBarWidth = ulElement.offsetWidth - pRight - pLeft;
      var addressbarUL = this.parent.createElement("ul", { className: "e-addressbar-ul" });
      var liElementsWidth = 0;
      var liElementsWidths = [];
      for (var i = 0; i < liElements.length; i++) {
        var width = liElements[i].clientWidth;
        liElementsWidths.push(width);
        liElementsWidth = liElementsWidth + width;
      }
      if (!isNullOrUndefined(ulElement)) {
        remove(ulElement);
      }
      var searchContainer = this.parent.createElement("div");
      searchContainer.setAttribute("class", "e-search-wrap");
      var id = this.parent.element.id + SEARCH_ID;
      var searchInput = createElement("input", {
        id,
        attrs: { autocomplete: "off", "aria-label": getLocaleText(this.parent, "Search") }
      });
      searchContainer.appendChild(searchInput);
      var searchEle = this.parent.breadCrumbBarNavigation.querySelector(".e-search-wrap .e-input");
      if (isNullOrUndefined(searchEle)) {
        this.parent.breadCrumbBarNavigation.appendChild(searchContainer);
        var span = createElement("span", { className: "e-icons e-fe-search" });
        EventHandler.add(span, "click", this.onShowInput, this);
        searchInput.parentElement.insertBefore(span, searchInput);
        this.searchObj = new TextBox({
          value: "",
          showClearButton: true,
          placeholder: getLocaleText(this.parent, "Search"),
          focus: this.onFocus.bind(this),
          blur: this.onBlur.bind(this)
        });
        this.searchObj.appendTo("#" + this.parent.element.id + SEARCH_ID);
        this.searchEventBind(this.parent.searchSettings.allowSearchOnTyping);
        var search2 = this.searchObj.element.nextElementSibling;
        EventHandler.add(search2, "mousedown", this.searchChangeHandler.bind(this), this);
        EventHandler.add(this.searchObj.element, "keyup", this.onKeyUp.bind(this), this);
      }
      var searchWrap = this.parent.breadCrumbBarNavigation.querySelector(".e-search-wrap");
      breadCrumbBarWidth = breadCrumbBarWidth - (this.searchWrapWidth ? this.searchWrapWidth : searchWrap.offsetWidth);
      if (liElementsWidth > breadCrumbBarWidth) {
        var i = liElements.length;
        while (i--) {
          var diff = breadCrumbBarWidth - liElementsWidths[i];
          if (diff > 40) {
            addressbarUL.insertBefore(liElements[i], addressbarUL.querySelector("li"));
            breadCrumbBarWidth = diff;
          } else {
            var items = [];
            for (var j = 0; j <= i; j++) {
              var liElement = liElements[j];
              items.push({
                text: liElement.innerText,
                utext: liElement.getAttribute("data-utext")
              });
            }
            var subMenuLi = this.parent.createElement("li", { className: "e-breadcrumb-menu" });
            var attributes2 = { className: "e-breadcrumb-submenu" };
            var subMenuSpan = this.parent.createElement("button", attributes2);
            subMenuLi.appendChild(subMenuSpan);
            addressbarUL.insertBefore(subMenuLi, addressbarUL.querySelector("li"));
            this.subMenuObj = new DropDownButton({
              items,
              cssClass: "e-caret-hide e-submenu",
              iconCss: ICON_BREADCRUMB,
              iconPosition: "Top",
              enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
              beforeItemRender: this.addSubMenuAttributes.bind(this),
              select: this.subMenuSelectOperations.bind(this)
            });
            this.subMenuObj.isStringTemplate = true;
            this.subMenuObj.appendTo(subMenuSpan);
            break;
          }
        }
        this.parent.breadCrumbBarNavigation.insertBefore(addressbarUL, searchWrap);
      } else {
        this.parent.breadCrumbBarNavigation.insertBefore(addresBarUL, searchWrap);
      }
    };
    BreadCrumbBar2.prototype.onFocus = function() {
      var wrap = closest(this.searchObj.element, ".e-search-wrap");
      wrap.classList.add("e-focus");
    };
    BreadCrumbBar2.prototype.onKeyUp = function() {
      this.parent.notify(pathColumn, { args: this.parent });
    };
    BreadCrumbBar2.prototype.onBlur = function() {
      var wrap = closest(this.searchObj.element, ".e-search-wrap");
      wrap.classList.remove("e-focus");
    };
    BreadCrumbBar2.prototype.subMenuSelectOperations = function(event2) {
      var args = { target: event2.element };
      this.addressPathClickHandler(args);
    };
    BreadCrumbBar2.prototype.addSubMenuAttributes = function(args) {
      args.element.setAttribute("data-utext", getValue("utext", args.item));
      var anchor = this.parent.createElement("a", { className: "e-list-text" });
      args.element.appendChild(anchor);
    };
    BreadCrumbBar2.prototype.searchEventBind = function(allow) {
      if (allow) {
        this.searchObj.input = this.searchChangeHandler.bind(this);
        this.searchObj.change = null;
      } else {
        this.searchObj.change = this.searchChangeHandler.bind(this);
        this.searchObj.input = null;
      }
    };
    BreadCrumbBar2.prototype.searchChangeHandler = function(args) {
      var _this = this;
      if (!isNullOrUndefined(args.value)) {
        this.parent.isFiltered = false;
        if (this.parent.searchSettings.allowSearchOnTyping) {
          window.clearTimeout(this.searchTimer);
          this.searchTimer = window.setTimeout(function() {
            searchWordHandler(_this.parent, args.value, false);
          }, 300);
        } else {
          searchWordHandler(this.parent, args.value, false);
        }
      }
    };
    BreadCrumbBar2.prototype.addressPathClickHandler = function(e) {
      var li = e.target;
      if (li.nodeName === "LI" || li.nodeName === "A") {
        var node = li.nodeName === "LI" ? li.children[0] : li;
        if (!isNullOrUndefined(node)) {
          this.parent.isFiltered = false;
          var currentPath = this.updatePath(node);
          this.parent.itemData = [getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];
          this.triggerFileOpen(this.parent.itemData[0]);
          read(this.parent, pathChanged, currentPath);
          var treeNodeId = this.parent.pathId[this.parent.pathId.length - 1];
          this.parent.notify(updateTreeSelection, { module: "treeview", selectedNode: treeNodeId });
        }
      }
    };
    BreadCrumbBar2.prototype.triggerFileOpen = function(data) {
      var eventArgs = { cancel: false, fileDetails: data, module: "BreadCrumbBar" };
      delete eventArgs.cancel;
      this.parent.trigger("fileOpen", eventArgs);
    };
    BreadCrumbBar2.prototype.onShowInput = function() {
      if (this.parent.isMobile) {
        if (this.parent.element.classList.contains(FILTER)) {
          removeClass([this.parent.element], FILTER);
          this.searchWrapWidth = null;
        } else {
          var searchWrap = this.parent.breadCrumbBarNavigation.querySelector(".e-search-wrap");
          this.searchWrapWidth = searchWrap.offsetWidth;
          addClass([this.parent.element], FILTER);
          this.searchObj.element.focus();
        }
      }
    };
    BreadCrumbBar2.prototype.updatePath = function(list) {
      var li = closest(list, "li");
      var liElementId = li.getAttribute("data-utext");
      this.addressBarLink = liElementId;
      var link = this.addressBarLink.split("/");
      var ids = this.parent.pathId;
      var names = this.parent.pathNames;
      this.parent.pathId = [];
      this.parent.pathNames = [];
      var newpath = "";
      for (var i = 0, len = link.length - 1; i < len; i++) {
        this.parent.pathId.push(ids[i]);
        this.parent.pathNames.push(names[i]);
        newpath += link[i] + "/";
      }
      this.parent.setProperties({ path: newpath }, true);
      return newpath;
    };
    BreadCrumbBar2.prototype.onUpdatePath = function() {
      this.onPathChange();
      this.removeSearchValue();
    };
    BreadCrumbBar2.prototype.onCreateEnd = function() {
      this.onPathChange();
    };
    BreadCrumbBar2.prototype.onRenameEnd = function() {
      this.onPathChange();
    };
    BreadCrumbBar2.prototype.onDeleteEnd = function() {
      this.onUpdatePath();
    };
    BreadCrumbBar2.prototype.removeSearchValue = function() {
      this.parent.isFiltered = false;
      if (this.searchObj && (this.searchObj.value !== "" || this.searchObj.element.value !== "")) {
        this.searchObj.value = "";
        this.searchObj.element.value = "";
        this.searchObj.dataBind();
      }
    };
    BreadCrumbBar2.prototype.onResize = function() {
      this.onPathChange();
    };
    BreadCrumbBar2.prototype.onPasteEnd = function() {
      this.onPathChange();
    };
    BreadCrumbBar2.prototype.addEventListener = function() {
      this.keyboardModule = new KeyboardEvents(this.parent.breadCrumbBarNavigation, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      this.parent.on(modelChanged2, this.onPropertyChanged, this);
      EventHandler.add(this.parent.breadCrumbBarNavigation, "click", this.addressPathClickHandler, this);
      this.parent.on(destroy2, this.destroy, this);
      this.parent.on(pathChanged, this.onUpdatePath, this);
      this.parent.on(finalizeEnd, this.onUpdatePath, this);
      this.parent.on(refreshEnd, this.onUpdatePath, this);
      this.parent.on(openEnd, this.onUpdatePath, this);
      this.parent.on(createEnd, this.onCreateEnd, this);
      this.parent.on(renameEnd, this.onRenameEnd, this);
      this.parent.on(deleteEnd, this.onDeleteEnd, this);
      this.parent.on(splitterResize, this.onResize, this);
      this.parent.on(pasteEnd, this.onPasteEnd, this);
      this.parent.on(resizeEnd, this.onResize, this);
      this.parent.on(searchTextChange, this.onSearchTextChange, this);
      this.parent.on(dropInit, this.onDropInit, this);
      this.parent.on(layoutRefresh, this.onResize, this);
      this.parent.on(dropPath, this.onPathChange, this);
    };
    BreadCrumbBar2.prototype.keyActionHandler = function(e) {
      switch (e.action) {
        case "enter":
          this.addressPathClickHandler(e);
          break;
      }
    };
    BreadCrumbBar2.prototype.removeEventListener = function() {
      this.keyboardModule.destroy();
      this.parent.off(pathChanged, this.onUpdatePath);
      this.parent.off(finalizeEnd, this.onUpdatePath);
      this.parent.off(refreshEnd, this.onUpdatePath);
      this.parent.off(openEnd, this.onUpdatePath);
      this.parent.off(pasteEnd, this.onPasteEnd);
      this.parent.off(createEnd, this.onCreateEnd);
      this.parent.off(renameEnd, this.onRenameEnd);
      this.parent.off(deleteEnd, this.onDeleteEnd);
      this.parent.off(splitterResize, this.onResize);
      this.parent.off(resizeEnd, this.onResize);
      this.parent.off(searchTextChange, this.onSearchTextChange);
      this.parent.off(dropInit, this.onDropInit);
      this.parent.off(layoutRefresh, this.onResize);
      this.parent.off(dropPath, this.onPathChange);
    };
    BreadCrumbBar2.prototype.onDropInit = function(args) {
      if (this.parent.targetModule === this.getModuleName()) {
        var liEle = args.target.closest("li");
        this.parent.dropPath = this.updatePath(liEle.children[0]);
        this.parent.dropData = getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);
        this.triggerFileOpen(this.parent.dropData);
        var treeNodeId = this.parent.pathId[this.parent.pathId.length - 1];
        this.parent.notify(updateTreeSelection, { module: "treeview", selectedNode: treeNodeId });
      }
    };
    BreadCrumbBar2.prototype.getModuleName = function() {
      return "breadcrumbbar";
    };
    BreadCrumbBar2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.removeEventListener();
      if (!isNullOrUndefined(this.subMenuObj)) {
        this.subMenuObj.destroy();
      }
      if (!isNullOrUndefined(this.searchObj)) {
        this.searchObj.destroy();
      }
    };
    BreadCrumbBar2.prototype.onSearchTextChange = function(args) {
      this.searchObj.element.placeholder = this.parent.searchSettings.placeholder != null ? this.parent.searchSettings.placeholder : getLocaleText(this.parent, "Search") + " " + getLocaleText(this.parent, args.cwd.name.toString());
    };
    return BreadCrumbBar2;
  }()
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/pop-up/context-menu.js
var ContextMenu3 = (
  /** @class */
  function() {
    function ContextMenu4(parent) {
      this.currentItems = [];
      this.currentElement = null;
      this.disabledItems = [];
      this.parent = parent;
      this.render();
    }
    ContextMenu4.prototype.render = function() {
      this.keyConfigs = {
        downarrow: "downarrow",
        uparrow: "uparrown"
      };
      this.contextMenu = new ContextMenu({
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        target: "#" + this.parent.element.id,
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        beforeItemRender: this.onBeforeItemRender.bind(this),
        select: this.onSelect.bind(this),
        beforeOpen: this.onBeforeOpen.bind(this),
        beforeClose: this.onBeforeClose.bind(this),
        cssClass: getCssClass(this.parent, ROOT_POPUP)
      });
      this.contextMenu.isStringTemplate = true;
      this.contextMenu.appendTo("#" + this.parent.element.id + CONTEXT_MENU_ID);
      this.addEventListener();
    };
    ContextMenu4.prototype.onBeforeItemRender = function(args) {
      if (args.item.id === this.getMenuId("largeiconsview")) {
        var iconSpan = createElement("span");
        var element = args.element;
        element.insertBefore(iconSpan, this.parent.view === "LargeIcons" ? element.childNodes[1] : element.childNodes[0]);
        iconSpan.setAttribute("class", ICON_LARGE + " " + MENU_ICON);
      }
      if (args.item.id === this.getMenuId("detailsview")) {
        var iconSpan = createElement("span");
        var element = args.element;
        element.insertBefore(iconSpan, this.parent.view === "Details" ? element.childNodes[1] : element.childNodes[0]);
        iconSpan.setAttribute("class", ICON_GRID + " " + MENU_ICON);
      }
    };
    ContextMenu4.prototype.onBeforeClose = function() {
      this.menuTarget = null;
    };
    ContextMenu4.prototype.onBeforeOpen = function(args) {
      var _this = this;
      this.disabledItems = [];
      var selected = false;
      var uid;
      var data;
      var treeFolder = false;
      var target = args.event.target;
      this.menuTarget = this.targetNodeElement = target;
      this.currentElement = args.element;
      if (target.classList.contains("e-spinner-pane")) {
        target = this.parent.navigationpaneModule.activeNode.getElementsByClassName(FULLROW)[0];
        this.menuTarget = this.targetNodeElement = target;
      }
      this.targetElement = this.parent.view === "Details" ? closest(target, "tr.e-row") : target;
      if (this.parent.enableVirtualization && (target.classList.contains("e-virtual-bottom") || target.classList.contains("e-virtualtable"))) {
        target = target.parentElement.closest("div");
      }
      var view = this.getTargetView(target);
      this.updateActiveModule();
      if (target.classList.contains(TREE_VIEW) || closest(target, "th") || closest(target, "#" + this.parent.element.id + BREADCRUMBBAR_ID) || closest(target, "#" + this.parent.element.id + TOOLBAR_ID)) {
        args.cancel = true;
      } else if (!(this.parent.view === "LargeIcons") && this.targetElement && this.targetElement.classList.contains("e-emptyrow")) {
        this.setLayoutItem(target);
      } else if (closest(target, "." + EMPTY)) {
        this.setLayoutItem(target);
      } else if (!target.classList.contains(MENU_ITEM) && !target.classList.contains(MENU_ICON) && !target.classList.contains(SUBMENU_ICON)) {
        if (this.parent.view === "LargeIcons" && !isNullOrUndefined(closest(target, "li")) && !closest(target, "#" + this.parent.element.id + TREE_ID)) {
          var eveArgs = { ctrlKey: true, shiftKey: true };
          if (!closest(target, "li").classList.contains("e-active")) {
            this.parent.largeiconsviewModule.doSelection(target, eveArgs);
          }
          data = this.parent.visitedData;
          selected = true;
        } else if (!isNullOrUndefined(closest(target, "tr.e-row"))) {
          uid = this.targetElement.getAttribute("data-uid");
          data = this.parent.detailsviewModule.gridObj.getRowObjectFromUID(uid).data;
          if (isNullOrUndefined(this.targetElement.getAttribute("aria-selected"))) {
            this.parent.detailsviewModule.gridObj.selectRows([parseInt(this.targetElement.getAttribute("data-rowindex"), 10)]);
          }
          selected = true;
        } else if (closest(target, "#" + this.parent.element.id + TREE_ID)) {
          uid = closest(target, "li").getAttribute("data-uid");
          treeFolder = true;
        }
        if (selected) {
          if (getValue("isFile", data) === true) {
            this.setFileItem();
          } else {
            this.setFolderItem(false);
          }
        } else if (treeFolder) {
          this.setFolderItem(true);
          if (uid === this.parent.pathId[0]) {
            this.disabledItems.push("Delete", "Rename", "Cut", "Copy");
          }
        } else if (view === "TreeView" || view === "GridView" || view === "LargeIcon") {
          this.setLayoutItem(target);
        } else {
          args.cancel = true;
        }
      }
      var pasteEle = select("#" + this.getMenuId("Paste"), this.contextMenu.element);
      if (!args.cancel && !this.parent.enablePaste && pasteEle && !pasteEle.classList.contains("e-disabled")) {
        this.disabledItems.push("Paste");
      }
      if (args.cancel) {
        this.menuTarget = this.currentElement = null;
        return;
      }
      this.contextMenu.dataBind();
      var isSubMenu = false;
      if (target.classList.contains(MENU_ITEM) || target.classList.contains(MENU_ICON) || target.classList.contains(SUBMENU_ICON)) {
        isSubMenu = true;
      }
      this.menuItemData = isSubMenu ? this.menuItemData : this.getMenuItemData();
      var eventArgs = {
        fileDetails: [this.menuItemData],
        element: args.element,
        target,
        items: isSubMenu ? args.items : this.contextMenu.items,
        menuModule: this.contextMenu,
        cancel: false,
        menuType: this.menuType,
        isSubMenu
      };
      this.currentItems = eventArgs.items;
      this.parent.trigger("menuOpen", eventArgs, function(menuOpenArgs) {
        if (!isSubMenu) {
          _this.contextMenu.dataBind();
          _this.contextMenu.items = menuOpenArgs.items;
          _this.contextMenu.dataBind();
        }
        _this.enableItems(_this.disabledItems, false, true);
        args.cancel = menuOpenArgs.cancel;
        if (menuOpenArgs.cancel) {
          _this.menuTarget = _this.targetNodeElement = _this.currentElement = null;
        }
      });
    };
    ContextMenu4.prototype.updateActiveModule = function() {
      this.parent.activeModule = closest(this.menuTarget, "#" + this.parent.element.id + TREE_ID) ? "navigationpane" : closest(this.menuTarget, "#" + this.parent.element.id + GRID_ID) ? "detailsview" : closest(this.menuTarget, "#" + this.parent.element.id + LARGEICON_ID) ? "largeiconsview" : this.parent.activeModule;
    };
    ContextMenu4.prototype.getTargetView = function(target) {
      return target.classList.contains(TREE_VIEW) ? "TreeView" : target.classList.contains(GRID_VIEW) ? "GridView" : target.classList.contains(ICON_VIEW) ? "LargeIcon" : target.classList.contains(LARGE_ICONS) ? "LargeIcon" : "";
    };
    ContextMenu4.prototype.getItemIndex = function(item) {
      var itemId = this.getMenuId(item);
      for (var i = 0; i < this.currentItems.length; i++) {
        if (this.currentItems[i].id === itemId || this.currentItems[i].id === item) {
          return i;
        }
      }
      return -1;
    };
    ContextMenu4.prototype.disableItem = function(items) {
      if (items.length !== 0) {
        this.disabledItems = this.disabledItems.concat(items);
      }
    };
    ContextMenu4.prototype.enableItems = function(items, enable, isUniqueId) {
      for (var i = 0; i < items.length; i++) {
        if (this.checkValidItem(items[i]) === 1) {
          this.contextMenu.enableItems([this.getMenuId(items[i])], enable, isUniqueId);
        } else if (this.checkValidItem(items[i]) === 2) {
          this.contextMenu.enableItems([items[i]], enable, isUniqueId);
        }
      }
    };
    ContextMenu4.prototype.setFolderItem = function(isTree) {
      this.menuType = "folder";
      this.contextMenu.items = this.getItemData(this.parent.contextMenuSettings.folder.map(function(item) {
        return item.trim();
      }));
      this.contextMenu.dataBind();
      if (isTree) {
        var selectedTreeNode = select('[data-uid="' + this.parent.navigationpaneModule.treeObj.selectedNodes[0] + '"]', this.parent.navigationpaneModule.treeObj.element);
        if (this.parent.pathNames[this.parent.pathNames.length - 1] === selectedTreeNode.querySelector(".e-list-text").innerHTML && this.parent.activeModule === "navigationpane") {
          this.disabledItems.push("Open");
        }
      } else if (this.parent.selectedItems.length !== 1 && this.parent.activeModule !== "navigationpane") {
        this.disabledItems.push("Rename", "Paste");
      }
    };
    ContextMenu4.prototype.setFileItem = function() {
      this.menuType = "file";
      this.contextMenu.items = this.getItemData(this.parent.contextMenuSettings.file.map(function(item) {
        return item.trim();
      }));
      this.contextMenu.dataBind();
      if (this.parent.selectedItems.length !== 1) {
        this.disabledItems.push("Rename");
      }
    };
    ContextMenu4.prototype.setLayoutItem = function(target) {
      this.menuType = "layout";
      this.contextMenu.items = this.getItemData(this.parent.contextMenuSettings.layout.map(function(item) {
        return item.trim();
      }));
      this.contextMenu.dataBind();
      if (!this.parent.allowMultiSelection || (this.parent.view === "LargeIcons" && closest(target, "#" + this.parent.element.id + LARGEICON_ID).getElementsByClassName(EMPTY).length !== 0 || this.parent.view === "Details" && closest(target, "#" + this.parent.element.id + GRID_ID).getElementsByClassName(EMPTY).length !== 0)) {
        this.disabledItems.push("SelectAll");
      }
      if (this.parent.selectedNodes.length === 0) {
        this.disabledItems.push("Paste");
      }
      this.contextMenu.dataBind();
    };
    ContextMenu4.prototype.checkValidItem = function(nameEle) {
      if (!isNullOrUndefined(select("#" + this.getMenuId(nameEle), this.currentElement))) {
        return 1;
      } else if (!isNullOrUndefined(select("#" + nameEle, this.currentElement))) {
        return 2;
      } else {
        return -1;
      }
    };
    ContextMenu4.prototype.getMenuItemData = function() {
      if (this.menuType === "layout") {
        return getPathObject(this.parent);
      } else {
        var args = { target: this.menuTarget };
        this.parent.notify(menuItemData, args);
        return this.parent.itemData[0];
      }
    };
    ContextMenu4.prototype.onSelect = function(args) {
      var _this = this;
      if (isNullOrUndefined(args.item) || !args.item.id) {
        return;
      }
      var itemText = args.item.id.substr((this.parent.element.id + "_cm_").length);
      var details;
      if (itemText === "refresh" || itemText === "newfolder" || itemText === "upload") {
        details = [getPathObject(this.parent)];
        this.parent.itemData = details;
      } else {
        this.parent.notify(selectedData, {});
        if (this.parent.activeModule === "navigationpane" && itemText === "open") {
          details = [this.menuItemData];
        } else {
          details = this.parent.itemData;
        }
      }
      var eventArgs = {
        cancel: false,
        element: args.element,
        fileDetails: details,
        item: args.item
      };
      this.parent.trigger("menuClick", eventArgs, function(menuClickArgs) {
        var sItems;
        if (!menuClickArgs.cancel) {
          switch (itemText) {
            case "cut":
              cutFiles(_this.parent);
              break;
            case "copy":
              copyFiles(_this.parent);
              break;
            case "paste":
              if (_this.menuType === "folder") {
                if (_this.parent.activeModule === "largeiconsview" || _this.parent.activeModule === "detailsview") {
                  _this.parent.folderPath = getFullPath(_this.parent, _this.menuItemData, _this.parent.path);
                } else {
                  _this.parent.folderPath = "";
                }
              } else {
                _this.parent.folderPath = "";
              }
              pasteHandler(_this.parent);
              break;
            case "delete":
              for (var j = 0; j < details.length; j++) {
                if (!hasEditAccess(details[j])) {
                  createDeniedDialog(_this.parent, details[j], permissionEdit);
                  return;
                }
              }
              createDialog(_this.parent, "Delete");
              break;
            case "download":
              for (var i = 0; i < details.length; i++) {
                if (!hasDownloadAccess(details[i])) {
                  createDeniedDialog(_this.parent, details[i], permissionDownload);
                  return;
                }
              }
              if (_this.parent.activeModule === "navigationpane") {
                _this.parent.notify(downloadInit, {});
              } else if (_this.parent.selectedItems.length > 0) {
                Download(_this.parent, _this.parent.path, _this.parent.selectedItems);
              }
              break;
            case "rename":
              if (!hasEditAccess(details[0])) {
                createDeniedDialog(_this.parent, details[0], permissionEdit);
              } else {
                _this.parent.notify(renameInit, {});
                createDialog(_this.parent, "Rename");
              }
              break;
            case "selectall":
              _this.parent.notify(selectAllInit, {});
              break;
            case "refresh":
              refresh(_this.parent);
              break;
            case "open":
              if (_this.parent.visitedItem && _this.parent.activeModule !== "navigationpane") {
                _this.parent.notify(openInit, { target: _this.parent.visitedItem });
              } else if (_this.parent.activeModule === "navigationpane") {
                if (_this.parent.visitedItem) {
                  _this.parent.notify(openInit, { target: _this.parent.visitedItem });
                }
                _this.parent.navigationpaneModule.openFileOnContextMenuClick(closest(_this.targetNodeElement, "li"));
              }
              break;
            case "details":
              _this.parent.notify(detailsInit, {});
              sItems = _this.parent.selectedItems;
              if (_this.parent.activeModule === "navigationpane") {
                sItems = [];
              }
              GetDetails(_this.parent, sItems, _this.parent.path, "details");
              break;
            case "newfolder":
              createNewFolder(_this.parent);
              break;
            case "upload":
              uploadItem(_this.parent);
              break;
            case "name":
            case "size":
            case "date":
            case "ascending":
            case "descending":
              sortbyClickHandler(_this.parent, args);
              break;
            case "none":
              sortbyClickHandler(_this.parent, args);
              break;
            case "largeiconsview":
              updateLayout(_this.parent, "LargeIcons");
              break;
            case "detailsview":
              updateLayout(_this.parent, "Details");
              break;
          }
        }
      });
    };
    ContextMenu4.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName() && e.module !== "common") {
        return;
      }
      for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            this.contextMenu.cssClass = getCssClass(this.parent, ROOT_POPUP);
            break;
        }
      }
    };
    ContextMenu4.prototype.addEventListener = function() {
      this.parent.on(destroy2, this.destroy, this);
      this.parent.on(modelChanged2, this.onPropertyChanged, this);
      this.keyboardModule = new KeyboardEvents(this.contextMenu.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    ContextMenu4.prototype.removeEventListener = function() {
      this.parent.off(destroy2, this.destroy);
      this.parent.off(modelChanged2, this.onPropertyChanged);
      this.keyboardModule.destroy();
    };
    ContextMenu4.prototype.keyActionHandler = function(e) {
      switch (e.action) {
        case "uparrow":
        case "downarrow":
          e.preventDefault();
      }
    };
    ContextMenu4.prototype.getModuleName = function() {
      return "contextmenu";
    };
    ContextMenu4.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.removeEventListener();
      this.contextMenu.destroy();
    };
    ContextMenu4.prototype.getItemData = function(data) {
      var items = [];
      for (var i = 0; i < data.length; i++) {
        var item = void 0;
        var itemId = this.getMenuId(data[i]);
        var itemText = getLocaleText(this.parent, data[i]);
        switch (data[i]) {
          case "|":
            item = { separator: true };
            break;
          case "Open":
            item = { id: itemId, text: itemText, iconCss: ICON_OPEN };
            break;
          case "Upload":
            item = { id: itemId, text: itemText, iconCss: ICON_UPLOAD };
            break;
          case "Cut":
            item = { id: itemId, text: itemText, iconCss: ICON_CUT };
            break;
          case "Copy":
            item = { id: itemId, text: itemText, iconCss: ICON_COPY };
            break;
          case "Paste":
            item = { id: itemId, text: itemText, iconCss: ICON_PASTE };
            break;
          case "Delete":
            item = { id: itemId, text: itemText, iconCss: ICON_DELETE };
            break;
          case "Rename":
            item = { id: itemId, text: itemText, iconCss: ICON_RENAME };
            break;
          case "NewFolder":
            item = { id: itemId, text: itemText, iconCss: ICON_NEWFOLDER };
            break;
          case "Details":
            item = { id: itemId, text: itemText, iconCss: ICON_DETAILS };
            break;
          case "SortBy":
            item = {
              id: itemId,
              text: itemText,
              iconCss: ICON_SHORTBY,
              items: [
                {
                  id: this.getMenuId("Name"),
                  text: getLocaleText(this.parent, "Name"),
                  iconCss: this.parent.sortBy === "name" ? TB_OPTION_DOT : null
                },
                {
                  id: this.getMenuId("Size"),
                  text: getLocaleText(this.parent, "Size"),
                  iconCss: this.parent.sortBy === "size" ? TB_OPTION_DOT : null
                },
                {
                  id: this.getMenuId("Date"),
                  text: getLocaleText(this.parent, "DateModified"),
                  iconCss: this.parent.sortBy === "_fm_modified" ? TB_OPTION_DOT : null
                },
                { separator: true },
                {
                  id: this.getMenuId("Ascending"),
                  text: getLocaleText(this.parent, "Ascending"),
                  iconCss: this.parent.sortOrder === "Ascending" ? TB_OPTION_TICK : null
                },
                {
                  id: this.getMenuId("Descending"),
                  text: getLocaleText(this.parent, "Descending"),
                  iconCss: this.parent.sortOrder === "Descending" ? TB_OPTION_TICK : null
                },
                {
                  id: this.getMenuId("None"),
                  text: getLocaleText(this.parent, "None"),
                  iconCss: this.parent.sortOrder === "None" ? TB_OPTION_TICK : null
                }
              ]
            };
            break;
          case "View":
            item = {
              id: itemId,
              text: itemText,
              iconCss: this.parent.view === "Details" ? ICON_GRID : ICON_LARGE,
              items: [
                {
                  id: this.getMenuId("largeiconsview"),
                  text: getLocaleText(this.parent, "View-LargeIcons"),
                  iconCss: this.parent.view === "Details" ? null : TB_OPTION_TICK
                },
                {
                  id: this.getMenuId("detailsview"),
                  text: getLocaleText(this.parent, "View-Details"),
                  iconCss: this.parent.view === "Details" ? TB_OPTION_TICK : null
                }
              ]
            };
            break;
          case "Refresh":
            item = { id: itemId, text: itemText, iconCss: ICON_REFRESH };
            break;
          case "SelectAll":
            item = { id: itemId, text: itemText, iconCss: ICON_SELECTALL };
            break;
          case "Download":
            item = { id: itemId, text: itemText, iconCss: ICON_DOWNLOAD };
            break;
          default:
            item = { id: itemId, text: itemText };
            break;
        }
        items.push(item);
      }
      return items;
    };
    ContextMenu4.prototype.getMenuId = function(id) {
      return this.parent.element.id + "_cm_" + id.toLowerCase();
    };
    return ContextMenu4;
  }()
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/models/default-locale.js
var defaultLocale2 = {
  "NewFolder": "New folder",
  "Upload": "Upload",
  "Delete": "Delete",
  "Rename": "Rename",
  "Download": "Download",
  "Cut": "Cut",
  "Copy": "Copy",
  "Paste": "Paste",
  "SortBy": "Sort by",
  "Refresh": "Refresh",
  "Item-Selection": "item selected",
  "Items-Selection": "items selected",
  "View": "View",
  "Details": "Details",
  "SelectAll": "Select all",
  "Open": "Open",
  "Tooltip-NewFolder": "New folder",
  "Tooltip-Upload": "Upload",
  "Tooltip-Delete": "Delete",
  "Tooltip-Rename": "Rename",
  "Tooltip-Download": "Download",
  "Tooltip-Cut": "Cut",
  "Tooltip-Copy": "Copy",
  "Tooltip-Paste": "Paste",
  "Tooltip-SortBy": "Sort by",
  "Tooltip-Refresh": "Refresh",
  "Tooltip-Selection": "Clear selection",
  "Tooltip-View": "View",
  "Tooltip-Details": "Details",
  "Tooltip-SelectAll": "Select all",
  "Name": "Name",
  "Size": "Size",
  "DateModified": "Modified",
  "DateCreated": "Date created",
  "Path": "Path",
  "Modified": "Modified",
  "Created": "Created",
  "Location": "Location",
  "Type": "Type",
  "Permission": "Permission",
  "Ascending": "Ascending",
  "Descending": "Descending",
  "None": "None",
  "View-LargeIcons": "Large icons",
  "View-Details": "Details",
  "Search": "Search",
  "Button-Ok": "OK",
  "Button-Cancel": "Cancel",
  "Button-Yes": "Yes",
  "Button-No": "No",
  "Button-Create": "Create",
  "Button-Save": "Save",
  "Header-NewFolder": "Folder",
  "Content-NewFolder": "Enter your folder name",
  "Header-Rename": "Rename",
  "Content-Rename": "Enter your new name",
  "Header-Rename-Confirmation": "Rename Confirmation",
  "Content-Rename-Confirmation": "If you change a file name extension, the file might become unstable. Are you sure you want to change it?",
  "Header-Delete": "Delete File",
  "Content-Delete": "Are you sure you want to delete this file?",
  "Header-Folder-Delete": "Delete Folder",
  "Content-Folder-Delete": "Are you sure you want to delete this folder?",
  "Header-Multiple-Delete": "Delete Multiple Items",
  "Content-Multiple-Delete": "Are you sure you want to delete these {0} items?",
  "Header-Duplicate": "File/Folder exists",
  "Content-Duplicate": "{0} already exists. Do you want to rename and paste?",
  "Header-Upload": "Upload Files",
  "Error": "Error",
  "Validation-Empty": "The file or folder name cannot be empty.",
  "Validation-Invalid": 'The file or folder name {0} contains invalid characters. Please use a different name. Valid file or folder names cannot end with a dot or space, and cannot contain any of the following characters: \\/:*?"<>|',
  "Validation-NewFolder-Exists": "A file or folder with the name {0} already exists.",
  "Validation-Rename-Exists": "Cannot rename {0} to {1}: destination already exists.",
  "Folder-Empty": "This folder is empty",
  "File-Upload": "Drag files here to upload",
  "Search-Empty": "No results found",
  "Search-Key": "Try with different keywords",
  "Filter-Empty": "No results found",
  "Filter-Key": "Try with different filter",
  "Sub-Folder-Error": "The destination folder is the subfolder of the source folder.",
  "Same-Folder-Error": "The destination folder is the same as the source folder.",
  "Access-Denied": "Access Denied",
  "Access-Details": 'You don"t have permission to access this folder.',
  "Header-Retry": "File Already Exists",
  "Content-Retry": "A file with this name already exists in this folder. What would you like to do?",
  "Button-Keep-Both": "Keep both",
  "Button-Replace": "Replace",
  "Button-Skip": "Skip",
  "ApplyAll-Label": "Do this for all current items",
  "KB": "KB",
  "Access-Message": "{0} is not accessible. You need permission to perform the {1} action.",
  "Network-Error": "NetworkError: Failed to send on XMLHTTPRequest: Failed to load",
  "Server-Error": "ServerError: Invalid response from"
};

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/base/file-manager.js
var __extends15 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate12 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FileManager = (
  /** @class */
  function(_super) {
    __extends15(FileManager3, _super);
    function FileManager3(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.filterData = null;
      _this.selectedNodes = [];
      _this.duplicateItems = [];
      _this.duplicateRecords = [];
      _this.previousPath = [];
      _this.nextPath = [];
      _this.isLayoutChange = false;
      _this.layoutSelectedItems = [];
      _this.renamedId = null;
      _this.uploadItem = [];
      _this.deleteRecords = [];
      _this.isFile = false;
      _this.isCut = false;
      _this.isSearchCut = false;
      _this.isSearchDrag = false;
      _this.isPasteError = false;
      _this.folderPath = "";
      _this.isSameAction = false;
      _this.isFiltered = false;
      _this.isSortByClicked = false;
      _this.enablePaste = false;
      _this.persistData = false;
      _this.retryArgs = [];
      _this.isOpened = false;
      _this.isRetryOpened = false;
      _this.isPathDrag = false;
      _this.searchedItems = [];
      _this.retryFiles = [];
      _this.isApplySame = false;
      _this.dragData = [];
      _this.dragNodes = [];
      _this.dragPath = "";
      _this.dropPath = "";
      _this.isDragDrop = false;
      _this.treeExpandTimer = null;
      _this.dragCursorPosition = { left: 44, top: 18 };
      _this.isDropEnd = false;
      _this.dragCount = 0;
      _this.droppedObjects = [];
      _this.uploadingCount = 0;
      _this.uploadedCount = 0;
      _this.isMac = false;
      FileManager_1.Inject(BreadCrumbBar, LargeIconsView, ContextMenu3);
      return _this;
    }
    FileManager_1 = FileManager3;
    FileManager3.prototype.getModuleName = function() {
      return "filemanager";
    };
    FileManager3.prototype.preRender = function() {
      if (isNullOrUndefined(this.element.id) || this.element.id === "") {
        this.element.setAttribute("id", getUniqueID("filemanager"));
      }
      this.ensurePath();
      this.feParent = [];
      this.feFiles = [];
      setStyleAttribute(this.element, { "width": formatUnit(this.width), "height": formatUnit(this.height) });
      this.isDevice = Browser.isDevice;
      this.isMobile = this.checkMobile();
      if (this.isMobile) {
        this.setProperties({ navigationPaneSettings: { visible: false } }, true);
      }
      var ele = closest(this.element, ".e-bigger");
      this.isBigger = ele ? true : false;
      this.activeModule = this.view === "LargeIcons" ? "largeiconsview" : "detailsview";
      createSpinner({ target: this.element }, createElement);
      this.addWrapper();
      this.keyConfigs = {
        altN: "alt+n",
        f5: "f5",
        ctrlShift1: "ctrl+shift+1",
        ctrlShift2: "ctrl+shift+2",
        ctrlU: "ctrl+u"
      };
      this.localeObj = new L10n(this.getModuleName(), defaultLocale2, this.locale);
    };
    FileManager3.prototype.getPersistData = function() {
      var keyEntity = ["view", "path", "selectedItems"];
      return this.addOnPersist(keyEntity);
    };
    FileManager3.prototype.requiredModules = function() {
      var modules = [];
      modules.push({
        member: "breadcrumbbar",
        args: [this]
      });
      modules.push({
        member: "largeiconsview",
        args: [this]
      });
      if (this.toolbarSettings.visible) {
        modules.push({
          member: "toolbar",
          args: [this]
        });
      }
      if (this.navigationPaneSettings.visible) {
        modules.push({
          member: "navigationpane",
          args: [this]
        });
      }
      if (this.view) {
        modules.push({
          member: "detailsview",
          args: [this]
        });
      }
      if (this.contextMenuSettings.visible && !this.isDevice) {
        modules.push({
          member: "contextmenu",
          args: [this]
        });
      }
      if (this.enableVirtualization) {
        modules.push({
          member: "virtualization",
          args: [this]
        });
      }
      return modules;
    };
    FileManager3.prototype.render = function() {
      this.initialize();
      var slItems = isNullOrUndefined(this.selectedItems) ? [] : this.allowMultiSelection ? this.selectedItems : this.selectedItems.slice(this.selectedItems.length - 1);
      this.setProperties({ selectedItems: slItems }, true);
      this.fileView = this.view;
      this.isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
      this.setRtl(this.enableRtl);
      this.addEventListeners();
      read(this, this.path !== this.originalPath ? initialEnd2 : finalizeEnd, this.path);
      this.adjustHeight();
      if (isNullOrUndefined(this.navigationpaneModule)) {
        this.splitterObj.collapse(this.enableRtl ? 1 : 0);
        var bar = select("." + SPLIT_BAR, this.element);
        bar.classList.add(DISPLAY_NONE);
      }
      this.wireEvents();
      this.renderComplete();
    };
    FileManager3.prototype.ensurePath = function() {
      var currentPath = this.path;
      if (isNullOrUndefined(currentPath)) {
        currentPath = "/";
      }
      if (currentPath.lastIndexOf("/") !== currentPath.length - 1) {
        currentPath = currentPath + "/";
      }
      this.originalPath = currentPath;
      var paths = currentPath.split("/");
      this.setProperties({ path: paths[0] + "/" }, true);
      this.pathNames = [];
      this.pathId = ["fe_tree"];
      this.itemData = [];
    };
    FileManager3.prototype.initialize = function() {
      if (this.isMobile) {
        addClass([this.element], MOBILE);
      }
      if (this.allowMultiSelection) {
        addClass([this.element], CHECK_SELECT);
      }
      this.addCssClass(null, this.cssClass);
      this.renderFileUpload();
    };
    FileManager3.prototype.addWrapper = function() {
      var headerWrap = this.createElement("div", { id: this.element.id + TOOLBAR_ID });
      this.element.appendChild(headerWrap);
      var layoutWrap = this.createElement("div", {
        id: this.element.id + LAYOUT_ID,
        className: LAYOUT
      });
      this.element.appendChild(layoutWrap);
      var navigationWrap = this.createElement("div", {
        id: this.element.id + NAVIGATION_ID,
        className: NAVIGATION
      });
      var treeWrap = this.createElement("div", {
        id: this.element.id + TREE_ID
      });
      navigationWrap.appendChild(treeWrap);
      var contentWrap = this.createElement("div", {
        id: this.element.id + CONTENT_ID,
        className: LAYOUT_CONTENT
      });
      this.breadCrumbBarNavigation = this.createElement("div", {
        id: this.element.id + BREADCRUMBBAR_ID,
        className: BREADCRUMBS
      });
      contentWrap.appendChild(this.breadCrumbBarNavigation);
      var gridWrap = this.createElement("div", {
        id: this.element.id + GRID_ID
      });
      contentWrap.appendChild(gridWrap);
      var largeiconWrap = this.createElement("div", {
        id: this.element.id + LARGEICON_ID,
        className: LARGE_ICONS,
        attrs: { "role": "group" }
      });
      contentWrap.appendChild(largeiconWrap);
      var overlay = this.createElement("span", { className: OVERLAY });
      contentWrap.appendChild(overlay);
      var paneSettings;
      if (!this.enableRtl) {
        layoutWrap.appendChild(navigationWrap);
        layoutWrap.appendChild(contentWrap);
        paneSettings = [
          {
            size: "25%",
            min: this.navigationPaneSettings.minWidth.toString(),
            max: this.navigationPaneSettings.maxWidth.toString()
          },
          { size: "75%", min: "270px" }
        ];
      } else {
        layoutWrap.appendChild(contentWrap);
        layoutWrap.appendChild(navigationWrap);
        paneSettings = [
          { size: "75%", min: "270px" },
          {
            size: "25%",
            min: this.navigationPaneSettings.minWidth.toString(),
            max: this.navigationPaneSettings.maxWidth.toString()
          }
        ];
      }
      this.splitterObj = new Splitter({
        paneSettings,
        width: "100%",
        enableRtl: false,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        resizing: this.splitterResize.bind(this)
      });
      this.splitterObj.isStringTemplate = true;
      this.splitterObj.appendTo(layoutWrap);
      var dialogWrap = this.createElement("div", { id: this.element.id + DIALOG_ID });
      this.element.appendChild(dialogWrap);
      var menuWrap = this.createElement("ul", { id: this.element.id + CONTEXT_MENU_ID });
      this.element.appendChild(menuWrap);
      var dialogImgWrap = this.createElement("div", { id: this.element.id + IMG_DIALOG_ID });
      this.element.appendChild(dialogImgWrap);
      var extnDialogWrap = this.createElement("div", { id: this.element.id + EXTN_DIALOG_ID });
      this.element.appendChild(extnDialogWrap);
      var uploadDialogWrap = this.createElement("div", { id: this.element.id + UPLOAD_DIALOG_ID });
      this.element.appendChild(uploadDialogWrap);
    };
    FileManager3.prototype.adjustHeight = function() {
      var toolbar = select("#" + this.element.id + TOOLBAR_ID, this.element);
      var toolBarHeight = toolbar ? toolbar.offsetHeight : 0;
      if (this.splitterObj) {
        this.splitterObj.height = (this.element.clientHeight - toolBarHeight).toString();
        this.splitterObj.dataBind();
      }
    };
    FileManager3.prototype.splitterResize = function() {
      this.notify(splitterResize, {});
    };
    FileManager3.prototype.splitterAdjust = function() {
      var bar = select("." + SPLIT_BAR, this.element);
      if (this.navigationPaneSettings.visible) {
        this.splitterObj.expand(this.enableRtl ? 1 : 0);
        bar.classList.remove(DISPLAY_NONE);
      } else {
        this.splitterObj.collapse(this.enableRtl ? 1 : 0);
        bar.classList.add(DISPLAY_NONE);
      }
    };
    FileManager3.prototype.addCssClass = function(oldOne, newOne) {
      if (!isNullOrUndefined(oldOne) && oldOne !== "") {
        removeClass([this.element], oldOne.split(" "));
      }
      if (!isNullOrUndefined(newOne) && newOne !== "") {
        addClass([this.element], newOne.split(" "));
      }
    };
    FileManager3.prototype.showSpinner = function() {
      showSpinner(this.element);
    };
    FileManager3.prototype.hideSpinner = function() {
      hideSpinner(this.element);
    };
    FileManager3.prototype.onContextMenu = function(e) {
      e.preventDefault();
    };
    FileManager3.prototype.checkMobile = function() {
      return /iphone|ipod|android|blackberry|opera|mini|windows\sce|palm|smartphone|iemobile/i.test(Browser.userAgent.toLowerCase()) && /mobile/i.test(Browser.userAgent.toLowerCase());
    };
    FileManager3.prototype.renderFileUpload = function() {
      var id = this.element.id + UPLOAD_ID;
      var uploadEle = this.createElement("input", { id, attrs: { name: "uploadFiles", type: "file" } });
      this.element.appendChild(uploadEle);
      this.uploadDialogObj = new Dialog({
        header: getLocaleText(this, "Header-Upload"),
        content: uploadEle,
        animationSettings: { effect: "None" },
        showCloseIcon: true,
        closeOnEscape: true,
        visible: false,
        isModal: true,
        width: "350px",
        target: this.popupTarget ? this.popupTarget : "#" + this.element.id,
        cssClass: getCssClass(this, this.isMobile ? MOB_POPUP : ROOT_POPUP),
        locale: this.locale,
        allowDragging: true,
        position: { X: "center", Y: "center" },
        enableRtl: this.enableRtl,
        enableHtmlSanitizer: this.enableHtmlSanitizer,
        open: this.onOpen.bind(this),
        close: this.onClose.bind(this),
        beforeOpen: this.onBeforeOpen.bind(this),
        beforeClose: this.onBeforeClose.bind(this)
      });
      this.uploadDialogObj.appendTo("#" + this.element.id + UPLOAD_DIALOG_ID);
      this.renderUploadBox();
    };
    FileManager3.prototype.renderUploadBox = function() {
      var uploadUrl = this.ajaxSettings.uploadUrl ? this.ajaxSettings.uploadUrl : this.ajaxSettings.url;
      this.uploadObj = new Uploader({
        dropArea: select("#" + this.element.id + CONTENT_ID, this.element),
        asyncSettings: {
          saveUrl: uploadUrl,
          removeUrl: uploadUrl
        },
        locale: this.locale,
        enableRtl: this.enableRtl,
        uploading: this.onUploading.bind(this),
        removing: this.onRemoving.bind(this),
        canceling: this.onCancel.bind(this),
        clearing: this.onClearing.bind(this),
        selected: this.onSelected.bind(this),
        success: this.onUploadSuccess.bind(this),
        failure: this.onUploadFailure.bind(this),
        autoUpload: this.uploadSettings.autoUpload,
        minFileSize: this.uploadSettings.minFileSize,
        maxFileSize: this.uploadSettings.maxFileSize,
        allowedExtensions: this.uploadSettings.allowedExtensions,
        directoryUpload: this.uploadSettings.directoryUpload,
        fileListRendering: this.onFileListRender.bind(this)
      });
      this.uploadObj.appendTo("#" + this.element.id + UPLOAD_ID);
    };
    FileManager3.prototype.onFileListRender = function(args) {
      this.trigger("uploadListCreate", args);
    };
    FileManager3.prototype.updateUploader = function() {
      this.uploadObj.autoUpload = this.uploadSettings.autoUpload;
      this.uploadObj.minFileSize = this.uploadSettings.minFileSize;
      this.uploadObj.maxFileSize = this.uploadSettings.maxFileSize;
      this.uploadObj.allowedExtensions = this.uploadSettings.allowedExtensions;
      this.uploadObj.directoryUpload = this.uploadSettings.directoryUpload;
      this.uploadObj.dataBind();
    };
    FileManager3.prototype.onBeforeOpen = function(args) {
      var eventArgs = {
        cancel: args.cancel,
        popupName: "Upload",
        popupModule: this.uploadDialogObj
      };
      this.trigger("beforePopupOpen", eventArgs, function(eventargs) {
        args.cancel = eventargs.cancel;
      });
    };
    FileManager3.prototype.onBeforeClose = function(args) {
      var eventArgs = {
        cancel: args.cancel,
        popupName: "Upload",
        popupModule: this.uploadDialogObj
      };
      this.trigger("beforePopupClose", eventArgs, function(eventargs) {
        args.cancel = eventargs.cancel;
      });
    };
    FileManager3.prototype.onOpen = function() {
      this.isOpened = true;
      this.uploadDialogObj.element.focus();
      var args = {
        popupModule: this.uploadDialogObj,
        popupName: "Upload",
        element: this.uploadDialogObj.element
      };
      this.trigger("popupOpen", args);
    };
    FileManager3.prototype.onClose = function() {
      this.isOpened = false;
      this.uploadObj.clearAll();
      var args = {
        popupModule: this.uploadDialogObj,
        popupName: "Upload",
        element: this.uploadDialogObj.element
      };
      this.trigger("popupClose", args);
    };
    FileManager3.prototype.onUploading = function(args) {
      var action = "save";
      if (this.retryArgs.length !== 0) {
        for (var i = 0; i < this.retryArgs.length; i++) {
          if (args.fileData.name === this.retryArgs[i].file.name) {
            action = this.retryArgs[i].action;
            this.retryArgs.splice(i, 1);
            i = this.retryArgs.length;
          }
        }
      }
      var data = JSON.stringify(getValue(this.pathId[this.pathId.length - 1], this.feParent));
      args.customFormData = [{ "path": this.path }, { "action": action }, { "data": data }, { "filename": args.fileData.name }];
      var uploadUrl = this.ajaxSettings.uploadUrl ? this.ajaxSettings.uploadUrl : this.ajaxSettings.url;
      var ajaxSettings = {
        url: uploadUrl,
        type: "POST",
        mode: true,
        dataType: null,
        contentType: null,
        data: JSON.stringify(args.customFormData),
        onSuccess: null,
        onFailure: null,
        beforeSend: null
      };
      this.uploadEventArgs = { action: "Upload", ajaxSettings, cancel: false };
      this.trigger("beforeSend", this.uploadEventArgs, function(uploadEventArgs) {
        args.customFormData = JSON.parse(getValue("data", uploadEventArgs.ajaxSettings));
        args.cancel = uploadEventArgs.cancel;
        var eventArgs = {
          cancel: false,
          httpRequest: args.currentRequest
        };
        if (typeof getValue("beforeSend", uploadEventArgs.ajaxSettings) === "function") {
          getValue("beforeSend", uploadEventArgs.ajaxSettings)(eventArgs);
          if (getValue("cancel", eventArgs)) {
            args.cancel = getValue("cancel", eventArgs);
          }
        }
      });
    };
    FileManager3.prototype.onRemoving = function() {
      this.onFileUploadSuccess({ count: 1 });
      if (this.uploadObj.getFilesData().length === 1) {
        this.uploadDialogObj.hide();
      }
    };
    FileManager3.prototype.onCancel = function(args) {
      var data = JSON.stringify(getValue(this.pathId[this.pathId.length - 1], this.feParent));
      args.customFormData = [{ "path": this.path }, { "action": "remove" }, { "data": data }];
    };
    FileManager3.prototype.onClearing = function() {
      if (this.isOpened) {
        this.uploadDialogObj.hide();
      }
    };
    FileManager3.prototype.onSelected = function(args) {
      if (args.filesData.length === 0) {
        return;
      }
      this.uploadingCount = args.filesData.length;
      this.uploadedCount = 0;
      var details = getPathObject(this);
      if (!hasUploadAccess(details)) {
        args.cancel = true;
        createDeniedDialog(this, details, permissionUpload);
        return;
      }
      this.uploadDialogObj.show();
    };
    FileManager3.prototype.onFileUploadSuccess = function(args) {
      this.uploadedCount = this.uploadedCount + args.count;
      if (this.uploadSettings.autoClose && this.uploadingCount === this.uploadedCount) {
        this.uploadDialogObj.hide();
      }
    };
    FileManager3.prototype.onUploadSuccess = function(files) {
      var args = { action: "Upload", result: files };
      this.trigger("success", args);
      this.itemData = [getValue(this.pathId[this.pathId.length - 1], this.feParent)];
      read(this, pathChanged, this.path);
      this.onFileUploadSuccess({ count: 1 });
      if (typeof getValue("onSuccess", this.uploadEventArgs.ajaxSettings) === "function") {
        getValue("onSuccess", this.uploadEventArgs.ajaxSettings)();
      }
    };
    FileManager3.prototype.onUploadFailure = function(files) {
      var response = getValue("response", files);
      var statusText = getValue("statusText", response);
      if (statusText !== "") {
        setValue("statusText", statusText, files);
      }
      var args = { action: "Upload", error: files };
      this.trigger("failure", args);
      if (getValue("statusCode", response) === 400) {
        this.retryFiles.push(getValue("file", files));
        if (!this.isRetryOpened) {
          createExtDialog(this, "UploadRetry");
        }
      }
      if (typeof getValue("onFailure", this.uploadEventArgs.ajaxSettings) === "function") {
        getValue("onFailure", this.uploadEventArgs.ajaxSettings)();
      }
    };
    FileManager3.prototype.onInitialEnd = function() {
      setNextPath(this, this.path);
    };
    FileManager3.prototype.addEventListeners = function() {
      this.on(beforeRequest, this.showSpinner, this);
      this.on(afterRequest, this.hideSpinner, this);
      this.on(initialEnd2, this.onInitialEnd, this);
      this.on(detailsInit, this.onDetailsInit, this);
      this.on(skipUpload, this.onFileUploadSuccess, this);
      EventHandler.add(this.element, "contextmenu", this.onContextMenu, this);
    };
    FileManager3.prototype.removeEventListeners = function() {
      if (this.isDestroyed) {
        return;
      }
      this.off(beforeRequest, this.showSpinner);
      this.off(afterRequest, this.hideSpinner);
      this.off(initialEnd2, this.onInitialEnd);
      this.off(detailsInit, this.onDetailsInit);
      this.off(skipUpload, this.onFileUploadSuccess);
      EventHandler.remove(this.element, "contextmenu", this.onContextMenu);
    };
    FileManager3.prototype.onDetailsInit = function() {
      if (isNullOrUndefined(this.activeModule)) {
        this.itemData = [getValue(this.pathId[this.pathId.length - 1], this.feParent)];
      }
    };
    FileManager3.prototype.resizeHandler = function() {
      this.adjustHeight();
      this.notify(resizeEnd, {});
    };
    FileManager3.prototype.keyActionHandler = function(e) {
      var uploadEle;
      switch (e.action) {
        case "altN":
          e.preventDefault();
          this.itemData = [getPathObject(this)];
          if (!hasContentAccess(this.itemData[0])) {
            createDeniedDialog(this, this.itemData[0], permissionEditContents);
          } else {
            createDialog(this, "NewFolder");
          }
          break;
        case "f5":
          e.preventDefault();
          refresh(this);
          break;
        case "ctrlShift1":
          e.preventDefault();
          this.fileView = "Details";
          this.setProperties({ view: "Details" }, true);
          showSpinner(this.element);
          updateLayout(this, "Details");
          break;
        case "ctrlShift2":
          e.preventDefault();
          this.fileView = "LargeIcons";
          this.setProperties({ view: "LargeIcons" }, true);
          showSpinner(this.element);
          updateLayout(this, "LargeIcons");
          break;
        case "ctrlU":
          e.preventDefault();
          if (this.toolbarSettings.items.indexOf("Upload") != -1) {
            uploadEle = select("#" + this.element.id + UPLOAD_ID, this.element);
            uploadEle.click();
          }
          break;
      }
    };
    FileManager3.prototype.wireEvents = function() {
      EventHandler.add(window, "resize", this.resizeHandler, this);
      this.keyboardModule = new KeyboardEvents(this.element, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    FileManager3.prototype.unWireEvents = function() {
      EventHandler.remove(window, "resize", this.resizeHandler);
      this.keyboardModule.destroy();
    };
    FileManager3.prototype.setPath = function() {
      this.setProperties({ selectedItems: [] }, true);
      this.ensurePath();
      this.notify(clearPathInit, { selectedNode: this.pathId[0] });
      read(this, this.path !== this.originalPath ? initialEnd2 : finalizeEnd, this.path);
    };
    FileManager3.prototype.onPropertyChanged = function(newProp, oldProp) {
      var height;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "ajaxSettings":
            this.ajaxSettingSetModel(newProp);
            break;
          case "allowDragAndDrop":
            this.allowDragAndDrop = newProp.allowDragAndDrop;
            this.notify(modelChanged2, { module: "common", newProp, oldProp });
            break;
          case "allowMultiSelection":
            if (this.allowMultiSelection) {
              addClass([this.element], CHECK_SELECT);
            } else {
              if (this.selectedItems.length > 1) {
                this.setProperties({ selectedItems: this.selectedItems.slice(this.selectedItems.length - 1) }, true);
              }
              removeClass([this.element], CHECK_SELECT);
            }
            this.notify(modelChanged2, { module: "common", newProp, oldProp });
            break;
          case "cssClass":
            this.addCssClass(oldProp.cssClass, newProp.cssClass);
            this.notify(modelChanged2, { module: "common", newProp, oldProp });
            break;
          case "detailsViewSettings":
            this.notify(modelChanged2, { module: "detailsview", newProp, oldProp });
            break;
          case "enableRtl":
            this.enableRtl = newProp.enableRtl;
            this.refresh();
            break;
          case "rootAliasName":
            this.rootAliasName = newProp.rootAliasName;
            this.refresh();
            break;
          case "height":
            height = !isNullOrUndefined(newProp.height) ? formatUnit(newProp.height) : newProp.height;
            setStyleAttribute(this.element, { "height": height });
            this.adjustHeight();
            this.notify(modelChanged2, { module: "common", newProp, oldProp });
            break;
          case "locale":
            if (!isNullOrUndefined(newProp.enableRtl)) {
              this.setProperties({ enableRtl: newProp.enableRtl }, true);
            }
            this.localeSetModelOption(newProp);
            break;
          case "navigationPaneSettings":
            this.splitterAdjust();
            this.notify(modelChanged2, { module: "navigationpane", newProp, oldProp });
            break;
          case "path":
            this.setPath();
            break;
          case "searchSettings":
            if (!isNullOrUndefined(newProp.searchSettings.allowSearchOnTyping)) {
              this.setProperties({ searchSettings: { allowSearchOnTyping: newProp.searchSettings.allowSearchOnTyping } }, true);
            }
            if (isNullOrUndefined(newProp.searchSettings.ignoreCase)) {
              this.setProperties({ searchSettings: { ignoreCase: newProp.searchSettings.ignoreCase } }, true);
            }
            if (isNullOrUndefined(newProp.searchSettings.filterType)) {
              this.setProperties({ searchSettings: { filterType: newProp.searchSettings.filterType } }, true);
            }
            this.notify(modelChanged2, { module: "breadcrumbbar", newProp, oldProp });
            break;
          case "selectedItems":
            if (this.view === "Details") {
              this.notify(modelChanged2, { module: "detailsview", newProp, oldProp });
            } else if (this.view === "LargeIcons") {
              this.notify(modelChanged2, { module: "largeiconsview", newProp, oldProp });
            }
            break;
          case "showFileExtension":
            this.notify(modelChanged2, { module: "common", newProp, oldProp });
            break;
          case "showHiddenItems":
            this.notify(modelChanged2, { module: "common", newProp, oldProp });
            break;
          case "showThumbnail":
            this.notify(modelChanged2, { module: "largeiconsview", newProp, oldProp });
            break;
          case "toolbarSettings":
            this.adjustHeight();
            this.notify(modelChanged2, { module: "toolbar", newProp, oldProp });
            break;
          case "uploadSettings":
            this.updateUploader();
            break;
          case "view":
            if (newProp.view === "Details") {
              this.notify(modelChanged2, { module: "detailsview", newProp, oldProp });
            } else if (newProp.view === "LargeIcons") {
              this.notify(modelChanged2, { module: "largeiconsview", newProp, oldProp });
            }
            break;
          case "width":
            setStyleAttribute(this.element, { "width": !isNullOrUndefined(newProp.width) ? formatUnit(newProp.width) : newProp.width });
            this.notify(modelChanged2, { module: "common", newProp, oldProp });
            break;
          case "sortOrder":
            refresh(this);
            this.notify(sortByChange, {});
            break;
          case "sortBy":
            refresh(this);
            this.notify(sortByChange, {});
            if (this.view === "Details") {
              this.notify(sortColumn, {});
            }
            break;
          case "popupTarget":
            if (this.uploadDialogObj) {
              this.uploadDialogObj.target = newProp.popupTarget;
            }
            if (this.dialogObj) {
              this.dialogObj.target = newProp.popupTarget;
            }
            if (this.extDialogObj) {
              this.extDialogObj.target = newProp.popupTarget;
            }
            if (this.viewerObj) {
              this.viewerObj.target = newProp.popupTarget;
            }
            break;
        }
      }
    };
    FileManager3.prototype.ajaxSettingSetModel = function(newProp) {
      if (!isNullOrUndefined(newProp.ajaxSettings.url)) {
        this.setProperties({ ajaxSettings: { url: newProp.ajaxSettings.url } }, true);
      }
      if (!isNullOrUndefined(newProp.ajaxSettings.uploadUrl)) {
        this.setProperties({ ajaxSettings: { uploadUrl: newProp.ajaxSettings.uploadUrl } }, true);
      }
      if (!isNullOrUndefined(newProp.ajaxSettings.downloadUrl)) {
        this.setProperties({ ajaxSettings: { downloadUrl: newProp.ajaxSettings.downloadUrl } }, true);
      }
      if (!isNullOrUndefined(newProp.ajaxSettings.getImageUrl)) {
        this.setProperties({ ajaxSettings: { getImageUrl: newProp.ajaxSettings.getImageUrl } }, true);
      }
      this.setProperties({ path: "/" }, true);
      this.setProperties({ selectedItems: [] }, true);
      _super.prototype.refresh.call(this);
    };
    FileManager3.prototype.localeSetModelOption = function(newProp) {
      this.uploadObj.locale = newProp.locale;
      _super.prototype.refresh.call(this);
    };
    FileManager3.prototype.destroy = function() {
      if (this.isDestroyed) {
        return;
      }
      if (!this.refreshing) {
        this.notify(destroy2, {});
      }
      this.uploadObj.destroy();
      this.uploadObj = null;
      this.uploadDialogObj.destroy();
      this.uploadDialogObj = null;
      this.splitterObj.destroy();
      this.splitterObj = null;
      if (this.dialogObj) {
        this.dialogObj.destroy();
        this.dialogObj = null;
      }
      if (this.viewerObj) {
        this.viewerObj.destroy();
        this.viewerObj = null;
      }
      if (this.extDialogObj) {
        this.extDialogObj.destroy();
        this.extDialogObj = null;
      }
      this.element.removeAttribute("style");
      this.element.removeAttribute("tabindex");
      this.removeEventListeners();
      this.unWireEvents();
      this.addCssClass(this.cssClass, null);
      removeClass([this.element], [RTL, MOBILE, CHECK_SELECT]);
      this.element.innerHTML = "";
      _super.prototype.destroy.call(this);
    };
    FileManager3.prototype.createFolder = function(name) {
      this.notify(methodCall, { action: "createFolder" });
      var details = [getPathObject(this)];
      this.itemData = details;
      if (name) {
        if (/[/\\|*?"<>:]/.test(name)) {
          var result = {
            files: null,
            error: {
              code: "402",
              message: getLocaleText(this, "Validation-Invalid").replace("{0}", '"' + name + '"'),
              fileExists: null
            }
          };
          createDialog(this, "Error", result);
        } else {
          if (!hasContentAccess(details[0])) {
            createDeniedDialog(this, details[0], permissionEditContents);
          } else {
            createFolder(this, name);
          }
        }
      } else {
        createNewFolder(this);
      }
    };
    FileManager3.prototype.deleteFiles = function(ids) {
      this.notify(methodCall, { action: "deleteFiles", ids });
    };
    FileManager3.prototype.disableToolbarItems = function(items) {
      if (!isNullOrUndefined(items)) {
        this.toolbarModule.enableItems(items, false);
      }
    };
    FileManager3.prototype.downloadFiles = function(ids) {
      this.notify(methodCall, { action: "downloadFiles", ids });
    };
    FileManager3.prototype.enableToolbarItems = function(items) {
      if (!isNullOrUndefined(items)) {
        this.toolbarModule.enableItems(items, true);
      }
    };
    FileManager3.prototype.disableMenuItems = function(items) {
      if (!isNullOrUndefined(items) && !isNullOrUndefined(this.contextmenuModule.contextMenu)) {
        this.contextmenuModule.disableItem(items);
      }
    };
    FileManager3.prototype.getMenuItemIndex = function(item) {
      if (this.contextmenuModule) {
        return this.contextmenuModule.getItemIndex(item);
      } else {
        return -1;
      }
    };
    FileManager3.prototype.getToolbarItemIndex = function(item) {
      if (this.toolbarModule) {
        return this.toolbarModule.getItemIndex(item);
      } else {
        return -1;
      }
    };
    FileManager3.prototype.filterFiles = function(filterData) {
      this.filterData = filterData ? filterData : null;
      this.setProperties({ selectedItems: [] }, true);
      this.notify(selectionChanged, {});
      this.isFiltered = true;
      if (this.breadcrumbbarModule.searchObj.element.value !== "") {
        this.breadcrumbbarModule.searchObj.element.value = "";
      }
      filter(this, filterEnd);
    };
    FileManager3.prototype.getSelectedFiles = function() {
      this.notify(updateSelectionData, {});
      return this.itemData;
    };
    FileManager3.prototype.openFile = function(id) {
      this.notify(methodCall, { action: "openFile", id });
    };
    FileManager3.prototype.refreshFiles = function() {
      refresh(this);
    };
    FileManager3.prototype.refreshLayout = function() {
      this.adjustHeight();
      this.notify(layoutRefresh, {});
    };
    FileManager3.prototype.selectAll = function() {
      this.notify(methodCall, { action: "selectAll" });
    };
    FileManager3.prototype.clearSelection = function() {
      this.notify(methodCall, { action: "clearSelection" });
    };
    FileManager3.prototype.renameFile = function(id, name) {
      this.notify(methodCall, { action: "renameFile", id, newName: name });
    };
    FileManager3.prototype.uploadFiles = function() {
      var details = [getPathObject(this)];
      this.itemData = details;
      uploadItem(this);
    };
    FileManager3.prototype.setRtl = function(rtl) {
      if (rtl) {
        this.addCssClass(null, RTL);
      } else {
        this.addCssClass(RTL, null);
      }
      if (this.uploadObj) {
        this.uploadDialogObj.enableRtl = rtl;
        this.uploadObj.enableRtl = rtl;
      }
    };
    var FileManager_1;
    __decorate12([
      Complex({}, AjaxSettings)
    ], FileManager3.prototype, "ajaxSettings", void 0);
    __decorate12([
      Property(false)
    ], FileManager3.prototype, "allowDragAndDrop", void 0);
    __decorate12([
      Property(true)
    ], FileManager3.prototype, "allowMultiSelection", void 0);
    __decorate12([
      Property(true)
    ], FileManager3.prototype, "showItemCheckBoxes", void 0);
    __decorate12([
      Complex({}, ContextMenuSettings)
    ], FileManager3.prototype, "contextMenuSettings", void 0);
    __decorate12([
      Property("")
    ], FileManager3.prototype, "cssClass", void 0);
    __decorate12([
      Complex({}, DetailsViewSettings)
    ], FileManager3.prototype, "detailsViewSettings", void 0);
    __decorate12([
      Property(true)
    ], FileManager3.prototype, "enableHtmlSanitizer", void 0);
    __decorate12([
      Property(false)
    ], FileManager3.prototype, "enablePersistence", void 0);
    __decorate12([
      Property(false)
    ], FileManager3.prototype, "enableVirtualization", void 0);
    __decorate12([
      Property("400px")
    ], FileManager3.prototype, "height", void 0);
    __decorate12([
      Property("LargeIcons")
    ], FileManager3.prototype, "view", void 0);
    __decorate12([
      Complex({}, NavigationPaneSettings)
    ], FileManager3.prototype, "navigationPaneSettings", void 0);
    __decorate12([
      Property("/")
    ], FileManager3.prototype, "path", void 0);
    __decorate12([
      Property(null)
    ], FileManager3.prototype, "popupTarget", void 0);
    __decorate12([
      Complex({}, SearchSettings)
    ], FileManager3.prototype, "searchSettings", void 0);
    __decorate12([
      Property()
    ], FileManager3.prototype, "selectedItems", void 0);
    __decorate12([
      Property(true)
    ], FileManager3.prototype, "showFileExtension", void 0);
    __decorate12([
      Property(null)
    ], FileManager3.prototype, "rootAliasName", void 0);
    __decorate12([
      Property(false)
    ], FileManager3.prototype, "showHiddenItems", void 0);
    __decorate12([
      Property(true)
    ], FileManager3.prototype, "showThumbnail", void 0);
    __decorate12([
      Property("Ascending")
    ], FileManager3.prototype, "sortOrder", void 0);
    __decorate12([
      Property("name")
    ], FileManager3.prototype, "sortBy", void 0);
    __decorate12([
      Complex({}, ToolbarSettings)
    ], FileManager3.prototype, "toolbarSettings", void 0);
    __decorate12([
      Complex({}, UploadSettings)
    ], FileManager3.prototype, "uploadSettings", void 0);
    __decorate12([
      Property("100%")
    ], FileManager3.prototype, "width", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "fileLoad", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "fileOpen", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "beforeDownload", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "beforeImageLoad", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "beforePopupClose", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "beforePopupOpen", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "beforeSend", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "created", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "destroyed", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "fileDragStart", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "fileDragging", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "fileDragStop", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "fileDropped", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "fileSelection", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "fileSelect", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "menuClick", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "menuOpen", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "failure", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "popupClose", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "popupOpen", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "success", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "toolbarClick", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "toolbarCreate", void 0);
    __decorate12([
      Event()
    ], FileManager3.prototype, "uploadListCreate", void 0);
    FileManager3 = FileManager_1 = __decorate12([
      NotifyPropertyChanges
    ], FileManager3);
    return FileManager3;
  }(Component)
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/actions/toolbar.js
var Toolbar3 = (
  /** @class */
  function() {
    function Toolbar4(parent) {
      this.default = ["Delete", "Rename", "Download", "Cut", "Copy", "Paste"];
      this.single = ["Delete", "Rename", "Download", "Cut", "Copy"];
      this.multiple = ["Delete", "Download", "Cut", "Copy", "Refresh"];
      this.selection = ["NewFolder", "Upload", "SortBy", "Refresh"];
      this.parent = parent;
      this.render();
      this.addEventListener();
    }
    Toolbar4.prototype.render = function() {
      var _this = this;
      this.items = this.toolbarItemData(this.getItems(this.parent.toolbarSettings.items.map(function(item) {
        return item.trim();
      })));
      var eventArgs = { items: this.items };
      this.parent.trigger("toolbarCreate", eventArgs, function(toolbarCreateArgs) {
        _this.items = toolbarCreateArgs.items;
        _this.toolbarObj = new Toolbar({
          items: _this.items,
          created: _this.toolbarCreateHandler.bind(_this),
          overflowMode: "Popup",
          clicked: _this.onClicked.bind(_this),
          enableHtmlSanitizer: _this.parent.enableHtmlSanitizer,
          enableRtl: _this.parent.enableRtl
        });
        _this.toolbarObj.isStringTemplate = true;
        _this.toolbarObj.appendTo("#" + _this.parent.element.id + TOOLBAR_ID);
      });
    };
    Toolbar4.prototype.getItemIndex = function(item) {
      var itemId = this.getId(item);
      for (var i = 0; i < this.items.length; i++) {
        if (this.items[i].id === itemId) {
          return i;
        }
      }
      return -1;
    };
    Toolbar4.prototype.getItems = function(items) {
      var currItems = items.slice();
      if (this.parent.isDevice && this.parent.allowMultiSelection) {
        currItems.push("SelectAll");
      }
      return currItems;
    };
    Toolbar4.prototype.onClicked = function(args) {
      var _this = this;
      if (isNullOrUndefined(args.item) || !args.item.id) {
        return;
      }
      var tool = args.item.id.substr((this.parent.element.id + "_tb_").length);
      var details;
      if (tool === "refresh" || tool === "newfolder" || tool === "upload") {
        details = [getPathObject(this.parent)];
        this.parent.itemData = details;
      } else {
        this.parent.notify(selectedData, {});
        details = this.parent.itemData;
      }
      var eventArgs = { cancel: false, fileDetails: details, item: args.item };
      this.parent.trigger("toolbarClick", eventArgs, function(toolbarClickArgs) {
        var sItems;
        var target;
        if (!toolbarClickArgs.cancel) {
          switch (tool) {
            case "sortby":
              target = closest(args.originalEvent.target, "." + TB_ITEM);
              if (target && target.classList.contains("e-toolbar-popup")) {
                args.cancel = true;
              }
              break;
            case "newfolder":
              createNewFolder(_this.parent);
              break;
            case "cut":
              cutFiles(_this.parent);
              break;
            case "copy":
              copyFiles(_this.parent);
              break;
            case "delete":
              for (var i = 0; i < details.length; i++) {
                if (!hasEditAccess(details[i])) {
                  createDeniedDialog(_this.parent, details[i], permissionEdit);
                  return;
                }
              }
              createDialog(_this.parent, "Delete");
              break;
            case "details":
              _this.parent.notify(detailsInit, {});
              sItems = _this.parent.selectedItems;
              if (_this.parent.activeModule === "navigationpane") {
                sItems = [];
              }
              GetDetails(_this.parent, sItems, _this.parent.path, "details");
              break;
            case "paste":
              _this.parent.folderPath = "";
              pasteHandler(_this.parent);
              break;
            case "refresh":
              refresh(_this.parent);
              break;
            case "download":
              doDownload(_this.parent);
              break;
            case "rename":
              if (!hasEditAccess(details[0])) {
                createDeniedDialog(_this.parent, details[0], permissionEdit);
              } else {
                _this.parent.notify(renameInit, {});
                createDialog(_this.parent, "Rename");
              }
              break;
            case "upload":
              uploadItem(_this.parent);
              break;
            case "selectall":
              _this.parent.notify(selectAllInit, {});
              break;
            case "selection":
              _this.parent.notify(clearAllInit, {});
              break;
          }
        }
      });
    };
    Toolbar4.prototype.toolbarCreateHandler = function() {
      if (!isNullOrUndefined(select("#" + this.getId("SortBy"), this.parent.element))) {
        var items = [
          {
            id: this.getPupupId("name"),
            text: getLocaleText(this.parent, "Name"),
            iconCss: this.parent.sortBy === "name" ? TB_OPTION_DOT : ""
          },
          {
            id: this.getPupupId("size"),
            text: getLocaleText(this.parent, "Size"),
            iconCss: this.parent.sortBy === "size" ? TB_OPTION_DOT : ""
          },
          {
            id: this.getPupupId("date"),
            text: getLocaleText(this.parent, "DateModified"),
            iconCss: this.parent.sortBy === "_fm_modified" ? TB_OPTION_DOT : ""
          },
          { separator: true },
          {
            id: this.getPupupId("ascending"),
            text: getLocaleText(this.parent, "Ascending"),
            iconCss: this.parent.sortOrder === "Ascending" ? TB_OPTION_TICK : ""
          },
          {
            id: this.getPupupId("descending"),
            text: getLocaleText(this.parent, "Descending"),
            iconCss: this.parent.sortOrder === "Descending" ? TB_OPTION_TICK : ""
          },
          {
            id: this.getPupupId("none"),
            text: getLocaleText(this.parent, "None"),
            iconCss: this.parent.sortOrder === "None" ? TB_OPTION_TICK : ""
          }
        ];
        this.buttonObj = new DropDownButton({
          items,
          cssClass: getCssClass(this.parent, ROOT_POPUP),
          select: sortbyClickHandler.bind(this, this.parent),
          enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
          enableRtl: this.parent.enableRtl,
          iconCss: ICON_SHORTBY
        });
        this.buttonObj.isStringTemplate = true;
        this.buttonObj.appendTo("#" + this.getId("SortBy"));
      }
      if (!isNullOrUndefined(select("#" + this.getId("View"), this.parent.element))) {
        var gridSpan = '<span class="' + ICON_GRID + " " + MENU_ICON + '"></span>';
        var largeIconSpan = '<span class="' + ICON_LARGE + " " + MENU_ICON + '"></span>';
        var layoutItems2 = [
          {
            id: this.getPupupId("large"),
            text: largeIconSpan + getLocaleText(this.parent, "View-LargeIcons"),
            iconCss: this.parent.view === "Details" ? "" : TB_OPTION_TICK
          },
          {
            id: this.getPupupId("details"),
            text: gridSpan + getLocaleText(this.parent, "View-Details"),
            iconCss: this.parent.view === "Details" ? TB_OPTION_TICK : ""
          }
        ];
        this.layoutBtnObj = new DropDownButton({
          iconCss: this.parent.view === "Details" ? ICON_GRID : ICON_LARGE,
          cssClass: getCssClass(this.parent, "e-caret-hide " + ROOT_POPUP),
          items: layoutItems2,
          select: this.layoutChange.bind(this),
          enableRtl: this.parent.enableRtl,
          content: '<span class="e-tbar-btn-text">' + getLocaleText(this.parent, "View") + "</span>"
        });
        this.layoutBtnObj.isStringTemplate = true;
        this.layoutBtnObj.appendTo("#" + this.getId("View"));
      }
      this.hideItems(this.default, true);
      this.hideStatus();
      var btnElement = selectAll(".e-btn", this.toolbarObj.element);
      var _loop_1 = function(btnCount2) {
        btnElement[btnCount2].onkeydown = function(e) {
          if (e.keyCode === 13 && !e.target.classList.contains("e-fe-popup")) {
            e.preventDefault();
          }
        };
        btnElement[btnCount2].onkeyup = function(e) {
          if (e.keyCode === 13 && !e.target.classList.contains("e-fe-popup")) {
            btnElement[btnCount2].click();
          }
        };
      };
      for (var btnCount = 0; btnCount < btnElement.length; btnCount++) {
        _loop_1(btnCount);
      }
      this.parent.refreshLayout();
    };
    Toolbar4.prototype.updateSortByButton = function() {
      if (this.buttonObj) {
        var items = this.buttonObj.items;
        for (var itemCount = 0; itemCount < items.length; itemCount++) {
          if (items[itemCount].id === this.getPupupId("name")) {
            items[itemCount].iconCss = this.parent.sortBy === "name" ? TB_OPTION_DOT : "";
          } else if (items[itemCount].id === this.getPupupId("size")) {
            items[itemCount].iconCss = this.parent.sortBy === "size" ? TB_OPTION_DOT : "";
          } else if (items[itemCount].id === this.getPupupId("date")) {
            if (this.parent.sortBy === "dateModified" || this.parent.sortBy === "dateCreated") {
              items[itemCount].iconCss = this.parent.sortBy === this.parent.sortBy ? TB_OPTION_DOT : "";
            } else {
              items[itemCount].iconCss = this.parent.sortBy === "_fm_modified" ? TB_OPTION_DOT : "";
            }
          } else if (items[itemCount].id === this.getPupupId("ascending")) {
            items[itemCount].iconCss = this.parent.sortOrder === "Ascending" ? TB_OPTION_TICK : "";
          } else if (items[itemCount].id === this.getPupupId("descending")) {
            items[itemCount].iconCss = this.parent.sortOrder === "Descending" ? TB_OPTION_TICK : "";
          } else if (items[itemCount].id === this.getPupupId("none")) {
            items[itemCount].iconCss = this.parent.sortOrder === "None" ? TB_OPTION_TICK : "";
          }
        }
      }
    };
    Toolbar4.prototype.getPupupId = function(id) {
      return this.parent.element.id + "_ddl_" + id.toLowerCase();
    };
    Toolbar4.prototype.layoutChange = function(args) {
      if (this.parent.view === "Details") {
        if (args.item.id === this.getPupupId("large")) {
          updateLayout(this.parent, "LargeIcons");
        }
      } else {
        if (args.item.id === this.getPupupId("details")) {
          updateLayout(this.parent, "Details");
        }
      }
    };
    Toolbar4.prototype.toolbarItemData = function(data) {
      var items = [];
      var mode = "Both";
      if (this.parent.isMobile) {
        mode = "Overflow";
      }
      for (var i = 0; i < data.length; i++) {
        var item = void 0;
        var itemId = this.getId(data[i]);
        var itemText = getLocaleText(this.parent, data[i]);
        var itemTooltip = getLocaleText(this.parent, "Tooltip-" + data[i]);
        var spanElement = '<span class="e-tbar-btn-text e-tbar-ddb-text">' + itemText + "</span>";
        switch (data[i]) {
          case "|":
            item = { type: "Separator" };
            break;
          case "Upload":
            item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_UPLOAD, showTextOn: mode };
            break;
          case "SortBy":
            item = {
              id: itemId,
              tooltipText: itemTooltip,
              template: '<button id="' + itemId + '" class="e-tbar-btn e-tbtn-txt" tabindex="-1">' + spanElement + "</button>"
            };
            break;
          case "Refresh":
            item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_REFRESH, showTextOn: mode };
            break;
          case "Selection":
            item = {
              id: itemId,
              text: itemText,
              tooltipText: itemTooltip,
              suffixIcon: ICON_CLEAR,
              overflow: "Show",
              align: "Right"
            };
            break;
          case "View":
            item = {
              id: itemId,
              tooltipText: itemTooltip,
              prefixIcon: this.parent.view === "Details" ? ICON_GRID : ICON_LARGE,
              overflow: "Show",
              align: "Right",
              text: itemText,
              showTextOn: "Overflow",
              template: '<button id="' + itemId + '" class="e-tbar-btn e-tbtn-txt" tabindex="-1" aria-label=' + getLocaleText(this.parent, "View") + "></button>"
            };
            break;
          case "Details":
            item = {
              id: itemId,
              tooltipText: itemTooltip,
              prefixIcon: ICON_DETAILS,
              overflow: "Show",
              align: "Right",
              text: itemText,
              showTextOn: "Overflow"
            };
            break;
          case "NewFolder":
            item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_NEWFOLDER, showTextOn: mode };
            break;
          case "Cut":
            item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_CUT, showTextOn: mode };
            break;
          case "Copy":
            item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_COPY, showTextOn: mode };
            break;
          case "Paste":
            item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_PASTE, showTextOn: mode };
            break;
          case "Delete":
            item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_DELETE, showTextOn: mode };
            break;
          case "Rename":
            item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_RENAME, showTextOn: mode };
            break;
          case "Download":
            item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_DOWNLOAD, showTextOn: mode };
            break;
          case "SelectAll":
            item = { id: itemId, text: itemText, tooltipText: itemTooltip, prefixIcon: ICON_SELECTALL, showTextOn: mode };
            break;
          default:
            item = { id: itemId, text: itemText, tooltipText: itemTooltip };
            break;
        }
        items.push(item);
      }
      return items;
    };
    Toolbar4.prototype.getId = function(id) {
      return this.parent.element.id + "_tb_" + id.toLowerCase();
    };
    Toolbar4.prototype.addEventListener = function() {
      this.parent.on(modelChanged2, this.onPropertyChanged, this);
      this.parent.on(selectionChanged, this.onSelectionChanged, this);
      this.parent.on(layoutChange, this.onLayoutChange, this);
      this.parent.on(showPaste, this.showPaste, this);
      this.parent.on(hidePaste, this.hidePaste, this);
      this.parent.on(destroy2, this.destroy, this);
      this.parent.on(sortByChange, this.updateSortByButton, this);
    };
    Toolbar4.prototype.reRenderToolbar = function(e) {
      var _this = this;
      if (e.newProp.toolbarSettings.items !== void 0) {
        this.items = this.toolbarItemData(this.getItems(e.newProp.toolbarSettings.items.map(function(item) {
          return item.trim();
        })));
        var eventArgs = { items: this.items };
        this.parent.trigger("toolbarCreate", eventArgs, function(toolbarCreateArgs) {
          if (_this.buttonObj) {
            _this.buttonObj.destroy();
          }
          if (_this.layoutBtnObj) {
            _this.layoutBtnObj.destroy();
          }
          _this.items = toolbarCreateArgs.items;
          _this.toolbarObj.items = _this.items;
          _this.toolbarObj.dataBind();
          _this.toolbarCreateHandler();
        });
      }
    };
    Toolbar4.prototype.onSelectionChanged = function() {
      this.hideStatus();
      this.hideItems(this.single, true);
      this.hideItems(this.selection, false);
      if (this.parent.selectedItems.length === 1) {
        this.hideItems(this.single, false);
        this.hideItems(this.selection, true);
      } else if (this.parent.selectedItems.length > 1) {
        this.hideItems(this.multiple, false);
        this.hideItems(this.selection, true);
      }
      var ele = select("#" + this.getId("Selection"), this.toolbarObj.element);
      if (this.parent.selectedItems.length > 0 && ele && !this.parent.enableVirtualization) {
        var txt = void 0;
        if (this.parent.selectedItems.length === 1) {
          txt = this.parent.selectedItems.length + " " + getLocaleText(this.parent, "Item-Selection");
        } else {
          txt = this.parent.selectedItems.length + " " + getLocaleText(this.parent, "Items-Selection");
        }
        select(".e-tbar-btn-text", ele).textContent = txt;
        this.toolbarObj.hideItem(ele.parentElement, false);
      }
    };
    Toolbar4.prototype.hideItems = function(tools2, toHide) {
      for (var i = 0; i < tools2.length; i++) {
        var ele = select("#" + this.getId(tools2[i]), this.parent.element);
        if (ele) {
          this.toolbarObj.hideItem(ele.parentElement, toHide);
        }
      }
    };
    Toolbar4.prototype.hideStatus = function() {
      var ele = select("#" + this.getId("Selection"), this.toolbarObj.element);
      if (ele) {
        this.toolbarObj.hideItem(ele.parentElement, true);
      }
    };
    Toolbar4.prototype.showPaste = function() {
      this.hideItems(["Paste"], false);
    };
    Toolbar4.prototype.hidePaste = function() {
      this.hideItems(["Paste"], true);
    };
    Toolbar4.prototype.onLayoutChange = function() {
      if (this.layoutBtnObj) {
        this.layoutBtnObj.iconCss = this.parent.view === "Details" ? ICON_GRID : ICON_LARGE;
        var items = this.layoutBtnObj.items;
        for (var itemCount = 0; itemCount < items.length; itemCount++) {
          if (items[itemCount].id === this.getPupupId("large")) {
            items[itemCount].iconCss = this.parent.view === "LargeIcons" ? TB_OPTION_TICK : "";
          } else if (items[itemCount].id === this.getPupupId("details")) {
            items[itemCount].iconCss = this.parent.view === "Details" ? TB_OPTION_TICK : "";
          }
        }
      }
    };
    Toolbar4.prototype.removeEventListener = function() {
      this.parent.off(modelChanged2, this.onPropertyChanged);
      this.parent.off(selectionChanged, this.onSelectionChanged);
      this.parent.off(layoutChange, this.onLayoutChange);
      this.parent.off(showPaste, this.showPaste);
      this.parent.off(hidePaste, this.hidePaste);
      this.parent.off(destroy2, this.destroy);
      this.parent.off(sortByChange, this.updateSortByButton);
    };
    Toolbar4.prototype.getModuleName = function() {
      return "toolbar";
    };
    Toolbar4.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName() && e.module !== "common") {
        return;
      }
      for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            if (this.buttonObj) {
              this.buttonObj.cssClass = getCssClass(this.parent, ROOT_POPUP);
            }
            if (this.layoutBtnObj) {
              this.layoutBtnObj.cssClass = getCssClass(this.parent, "e-caret-hide " + ROOT_POPUP);
            }
            break;
          case "height":
          case "width":
            this.toolbarObj.refreshOverflow();
            break;
          case "toolbarSettings":
            this.reRenderToolbar(e);
            break;
        }
      }
    };
    Toolbar4.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.removeEventListener();
      if (this.buttonObj) {
        this.buttonObj.destroy();
      }
      if (this.layoutBtnObj) {
        this.layoutBtnObj.destroy();
      }
      this.toolbarObj.destroy();
      this.parent.refreshLayout();
    };
    Toolbar4.prototype.enableItems = function(items, isEnable) {
      for (var i = 0; i < items.length; i++) {
        var ele = select("#" + this.getId(items[i]), this.parent.element);
        if (ele) {
          this.toolbarObj.enableItems(ele.parentElement, isEnable);
        }
      }
    };
    return Toolbar4;
  }()
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/actions/virtualization.js
var Virtualization = (
  /** @class */
  function() {
    function Virtualization2(instance) {
      this.filemanagerInstance = instance;
      this.largeIconInstance = instance.largeiconsviewModule;
    }
    Virtualization2.prototype.setUIVirtualization = function() {
      var currentViewItems = this.largeIconInstance.items;
      var firstItem = currentViewItems.slice(0, 1);
      var listElements = ListBase.createListFromJson(createElement, firstItem, this.largeIconInstance.listObj);
      this.itemList = Array.prototype.slice.call(selectAll("." + LIST_ITEM, listElements));
      this.largeIconInstance.element.appendChild(listElements);
      this.itemCount = this.getItemCount(Object.keys(this.largeIconInstance.allItems).length);
      this.largeIconInstance.element.firstChild.remove();
      this.largeIconInstance.items = currentViewItems.slice(0, this.itemCount);
    };
    Virtualization2.prototype.setUlElementHeight = function() {
      this.lastRowCount = (this.largeIconInstance.allItems.length - this.itemCount) % this.rowItemCount ? (this.largeIconInstance.allItems.length - this.itemCount) % this.rowItemCount : this.rowItemCount;
      this.topElement = this.filemanagerInstance.createElement("div");
      this.topElement.classList.add("e-virtual-top");
      this.largeIconInstance.element.firstElementChild.insertBefore(this.topElement, this.largeIconInstance.element.firstElementChild.firstChild);
      this.bottomElement = this.filemanagerInstance.createElement("div");
      this.bottomElement.classList.add("e-virtual-bottom");
      this.largeIconInstance.element.firstElementChild.insertBefore(this.bottomElement, null);
      var marginValue = parseInt(window.getComputedStyle(this.largeIconInstance.itemList[0]).getPropertyValue("margin-top"), 10) + parseInt(window.getComputedStyle(this.largeIconInstance.itemList[0]).getPropertyValue("margin-bottom"), 10);
      this.listItemHeight = this.largeIconInstance.itemList[0].getBoundingClientRect().height + marginValue;
      this.totalHeight = Object.keys(this.largeIconInstance.allItems).length / this.rowItemCount * this.listItemHeight;
      this.topElement.style.height = "0px";
      this.bottomElement.style.height = this.totalHeight + "px";
      this.topElementHeight = 0;
      this.bottomElementHeight = this.totalHeight;
      this.listDiff = 0;
      this.renderedCount = this.itemCount;
    };
    Virtualization2.prototype.getItemCount = function(dataSourceLength) {
      var widthMargin = parseInt(window.getComputedStyle(this.itemList[0]).getPropertyValue("margin-right"), 10) + parseInt(window.getComputedStyle(this.itemList[0]).getPropertyValue("margin-left"), 10);
      this.rowItemCount = Math.floor(parseFloat(formatUnit(this.largeIconInstance.element.firstElementChild.clientWidth)) / (this.itemList[0].offsetWidth + widthMargin));
      var itemCount = this.rowItemCount * Math.round(parseFloat(formatUnit(this.largeIconInstance.element.clientHeight)) / this.itemList[0].offsetHeight);
      if (itemCount > dataSourceLength) {
        itemCount = dataSourceLength;
      }
      return itemCount;
    };
    Virtualization2.prototype.wireScrollEvent = function(destroy3) {
      if (!destroy3) {
        EventHandler.add(this.largeIconInstance.element.firstElementChild, "scroll", this.onVirtualUiScroll, this);
      } else {
        EventHandler.remove(this.largeIconInstance.element.firstElementChild, "scroll", this.onVirtualUiScroll);
      }
    };
    Virtualization2.prototype.onVirtualUiScroll = function() {
      var _a;
      var startingHeight = 0;
      this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;
      var scroll2 = this.getscrollerHeight(startingHeight);
      this.topElementHeight = this.listItemHeight * Math.floor(scroll2 / this.listItemHeight);
      this.bottomElementHeight = this.totalHeight - this.topElementHeight;
      _a = scroll2 <= this.totalHeight ? [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0], this.topElementHeight = _a[0], this.bottomElementHeight = _a[1];
      if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {
        this.topElement.style.height = this.topElementHeight + "px";
        this.bottomElement.style.height = this.bottomElementHeight + "px";
        if (scroll2 > this.scrollPosition) {
          var listDiff = Math.round(this.topElementHeight / this.listItemHeight - this.listDiff);
          this.onNormalScroll(listDiff, true);
        } else {
          var listDiff = Math.round(this.listDiff - this.topElementHeight / this.listItemHeight);
          this.onNormalScroll(listDiff, false);
        }
      }
      this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);
      this.scrollPosition = scroll2;
      this.largeIconInstance.itemList = Array.prototype.slice.call(selectAll("." + LIST_ITEM, this.largeIconInstance.element));
      this.largeIconInstance.items = this.largeIconInstance.allItems.slice(this.renderedCount - this.itemCount, this.renderedCount);
    };
    Virtualization2.prototype.getscrollerHeight = function(startingHeight) {
      return this.largeIconInstance.element.firstElementChild.scrollTop - startingHeight <= 0 ? 0 : this.largeIconInstance.element.firstElementChild.scrollTop - startingHeight;
    };
    Virtualization2.prototype.onNormalScroll = function(listDiff, isScrollingDown) {
      for (var i = 0; i < listDiff; i++) {
        this.updateUI(isScrollingDown);
      }
    };
    Virtualization2.prototype.updateUI = function(isScrollingDown) {
      var _this = this;
      if (isScrollingDown) {
        this.items = this.largeIconInstance.allItems.slice(this.renderedCount, this.renderedCount + this.rowItemCount);
        if (this.items.length > 0) {
          var listElements = ListBase.createListFromJson(createElement, this.items, this.largeIconInstance.listObj);
          this.itemList = Array.prototype.slice.call(selectAll("." + LIST_ITEM, listElements));
          this.itemList.forEach(function(liEle) {
            _this.largeIconInstance.element.firstElementChild.insertBefore(liEle, _this.bottomElement);
          });
          this.renderedCount = this.largeIconInstance.allItems.length >= this.renderedCount + this.rowItemCount ? this.renderedCount + this.rowItemCount : this.renderedCount + this.lastRowCount;
          for (var i = 0; i < this.rowItemCount; i++) {
            detach(this.topElement.nextElementSibling);
          }
        }
      } else {
        var lastItemIndex = void 0;
        var isAllRendered = void 0;
        if (this.renderedCount === this.largeIconInstance.allItems.length) {
          lastItemIndex = this.renderedCount - (this.itemCount - this.rowItemCount + this.lastRowCount);
          this.renderedCount = this.renderedCount - this.lastRowCount < this.itemCount ? this.itemCount : this.renderedCount - this.lastRowCount;
          isAllRendered = true;
        } else {
          lastItemIndex = this.renderedCount - this.itemCount;
          this.renderedCount = this.renderedCount - this.rowItemCount < this.itemCount ? this.itemCount : this.renderedCount - this.rowItemCount;
        }
        var startItemIndex = lastItemIndex - this.rowItemCount > 0 ? lastItemIndex - this.rowItemCount : 0;
        this.items = this.largeIconInstance.allItems.slice(startItemIndex, lastItemIndex);
        if (this.items.length > 0) {
          var listElements = ListBase.createListFromJson(createElement, this.items, this.largeIconInstance.listObj);
          this.itemList = Array.prototype.slice.call(selectAll("." + LIST_ITEM, listElements));
          for (var len = this.itemList.length; len > 0; len--) {
            this.largeIconInstance.element.firstElementChild.insertBefore(this.itemList[len - 1], this.topElement.nextElementSibling);
          }
          for (var i = 0; i < (isAllRendered ? this.lastRowCount : this.rowItemCount); i++) {
            detach(this.bottomElement.previousElementSibling);
          }
        }
      }
    };
    Virtualization2.prototype.getModuleName = function() {
      return "virtualization";
    };
    Virtualization2.prototype.destroy = function() {
      if (this.filemanagerInstance.isDestroyed) {
        return;
      }
      if (!isNullOrUndefined(this.largeIconInstance.element.firstElementChild)) {
        this.wireScrollEvent(true);
      }
    };
    return Virtualization2;
  }()
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/layout/navigation-pane.js
var NavigationPane = (
  /** @class */
  function() {
    function NavigationPane2(parent) {
      this.removeNodes = [];
      this.moveNames = [];
      this.expandTree = false;
      this.isDrag = false;
      this.isPathDragged = false;
      this.isRenameParent = false;
      this.isRightClick = false;
      this.isSameNodeClicked = false;
      this.isNodeExpandCalled = false;
      this.renameParent = null;
      this.previousSelected = null;
      this.isNodeClickCalled = false;
      this.restrictSelecting = false;
      this.parent = parent;
      this.addEventListener();
      this.keyConfigs = {
        altEnter: "alt+enter",
        esc: "escape",
        del: "delete",
        ctrlX: this.parent.isMac ? "cmd+x" : "ctrl+x",
        ctrlC: this.parent.isMac ? "cmd+c" : "ctrl+c",
        ctrlV: this.parent.isMac ? "cmd+v" : "ctrl+v",
        ctrlShiftN: "ctrl+shift+n",
        shiftF10: "shift+F10",
        f2: "f2"
      };
    }
    NavigationPane2.prototype.onInit = function() {
      if (!isNullOrUndefined(this.treeObj)) {
        return;
      }
      var rootData = getValue(this.parent.pathId[0], this.parent.feParent);
      setValue("_fm_icon", "e-fe-folder", rootData);
      var attr = {};
      var id = getValue("id", rootData);
      if (!isNullOrUndefined(id)) {
        setValue("data-id", id, attr);
      }
      if (!hasEditAccess(rootData)) {
        setValue("class", getAccessClass(rootData), attr);
      }
      if (!isNullOrUndefined(attr)) {
        setValue("_fm_htmlAttr", attr, rootData);
      }
      this.treeObj = new TreeView({
        fields: {
          dataSource: [rootData],
          id: "_fm_id",
          parentID: "_fm_pId",
          expanded: "_fm_expanded",
          selected: "_fm_selected",
          text: "name",
          hasChildren: "hasChild",
          iconCss: "_fm_icon",
          htmlAttributes: "_fm_htmlAttr",
          tooltip: "name"
        },
        enableHtmlSanitizer: this.parent.enableHtmlSanitizer,
        sortOrder: this.parent.navigationPaneSettings.sortOrder,
        nodeSelecting: this.onNodeSelecting.bind(this),
        nodeSelected: this.onNodeSelected.bind(this),
        nodeExpanding: this.onNodeExpand.bind(this),
        nodeClicked: this.onNodeClicked.bind(this),
        allowEditing: true,
        nodeEditing: this.onNodeEditing.bind(this),
        drawNode: this.onDrowNode.bind(this),
        enableRtl: this.parent.enableRtl,
        dataBound: this.addDragDrop.bind(this)
      });
      this.treeObj.isStringTemplate = true;
      this.treeObj.appendTo("#" + this.parent.element.id + TREE_ID);
      this.wireEvents();
    };
    NavigationPane2.prototype.addDragDrop = function() {
      var _this = this;
      if (!this.parent.isMobile && this.treeObj) {
        if (this.parent.allowDragAndDrop) {
          if (this.dragObj) {
            this.dragObj.destroy();
          }
          this.dragObj = new Draggable(this.treeObj.element, {
            cursorAt: this.parent.dragCursorPosition,
            dragTarget: "." + FULLROW,
            distance: 5,
            dragArea: this.parent.element,
            drag: draggingHandler.bind(this, this.parent),
            dragStart: function(args) {
              dragStartHandler(_this.parent, args, _this.dragObj);
            },
            dragStop: dragStopHandler.bind(this, this.parent),
            enableTailMode: true,
            enableAutoScroll: true,
            helper: this.dragHelper.bind(this)
          });
        } else if (!this.parent.allowDragAndDrop && this.dragObj) {
          this.dragObj.destroy();
        }
      }
    };
    NavigationPane2.prototype.dragHelper = function(args) {
      var dragTarget = args.sender.target;
      if (!dragTarget.classList.contains(FULLROW)) {
        return null;
      }
      var dragLi = closest(dragTarget, "li");
      this.parent.dragPath = "";
      this.parent.dragData = [];
      this.parent.activeElements = [];
      this.parent.activeElements = [dragLi];
      this.parent.dragNodes = [];
      getModule(this.parent, dragLi);
      this.parent.dragData = this.getTreeData(dragLi);
      this.parent.dragPath = this.getDragPath(dragLi, this.parent.dragData[0].name);
      this.parent.dragNodes.push(this.parent.dragData[0].name);
      createVirtualDragElement(this.parent);
      return this.parent.virtualDragElement;
    };
    NavigationPane2.prototype.getDragPath = function(dragLi, text) {
      var path = this.getDropPath(dragLi, text);
      return getParentPath(path);
    };
    NavigationPane2.prototype.getDropPath = function(node, text) {
      var id = node.getAttribute("data-id");
      var newText = this.parent.hasId ? id : text;
      return getPath(node, newText, this.parent.hasId);
    };
    NavigationPane2.prototype.onDrowNode = function(args) {
      var eventArgs = {
        element: args.node,
        fileDetails: args.nodeData,
        module: "NavigationPane"
      };
      this.parent.trigger("fileLoad", eventArgs);
    };
    NavigationPane2.prototype.addChild = function(files, target, prevent) {
      var directories = getDirectories(files);
      if (directories.length > 0) {
        var length_1 = 0;
        var folders = directories;
        while (length_1 < directories.length) {
          folders[length_1]._fm_icon = "e-fe-folder";
          var attr = {};
          var id = getValue("id", folders[length_1]);
          if (!isNullOrUndefined(id)) {
            setValue("data-id", id, attr);
          }
          if (!hasEditAccess(folders[length_1])) {
            setValue("class", getAccessClass(folders[length_1]), attr);
          }
          if (!isNullOrUndefined(attr)) {
            setValue("_fm_htmlAttr", attr, folders[length_1]);
          }
          length_1++;
        }
        this.treeObj.addNodes(directories, target, null, prevent);
      }
    };
    NavigationPane2.prototype.onNodeSelecting = function(args) {
      if (!args.isInteracted && !this.isRightClick && !this.isSameNodeClicked && !this.isPathDragged && !this.isRenameParent || this.restrictSelecting) {
        this.restrictSelecting = false;
        this.isNodeClickCalled = false;
        return;
      }
      if (!this.renameParent) {
        this.parent.activeModule = "navigationpane";
        var nodeData = this.getTreeData(getValue("id", args.nodeData));
        if (args.node.getAttribute("data-uid") !== this.parent.pathId[this.parent.pathId.length - 1] && !this.isRightClick && !this.isNodeClickCalled || this.isSameNodeClicked) {
          this.isNodeClickCalled = false;
          if (!this.isSameNodeClicked) {
            this.isSameNodeClicked = true;
            var selecEventArgs = { action: args.action, fileDetails: nodeData[0], isInteracted: args.isInteracted };
            this.parent.trigger("fileSelect", selecEventArgs);
          }
          if (!this.isRightClick) {
            var eventArgs = { cancel: false, fileDetails: nodeData[0], module: "NavigationPane" };
            this.parent.trigger("fileOpen", eventArgs);
            args.cancel = eventArgs.cancel;
          }
          if (args.cancel) {
            this.restrictSelecting = this.isNodeClickCalled ? this.previousSelected[0] !== args.node.getAttribute("data-uid") : false;
            this.isNodeClickCalled = true;
            this.isSameNodeClicked = false;
            this.previousSelected = this.treeObj.selectedNodes;
            this.treeObj.selectedNodes = [args.node.getAttribute("data-uid")];
          }
        } else if (this.previousSelected[0] !== args.node.getAttribute("data-uid")) {
          var selecEventArgs = { action: args.action, fileDetails: nodeData[0], isInteracted: this.isNodeClickCalled };
          this.parent.trigger("fileSelect", selecEventArgs);
        }
      }
    };
    NavigationPane2.prototype.openFileOnContextMenuClick = function(node) {
      var data = this.treeObj.getTreeData(node);
      this.parent.selectedItems = [];
      this.parent.itemData = data;
      this.activeNode = node;
      this.parent.activeModule = "navigationpane";
      var eventArgs = { cancel: false, fileDetails: data[0], module: "NavigationPane" };
      this.parent.trigger("fileOpen", eventArgs);
      this.isNodeClickCalled = true;
      if (!eventArgs.cancel) {
        updatePath(node, this.parent.itemData[0], this.parent);
        read(this.parent, this.isPathDragged ? pasteEnd : pathChanged, this.parent.path);
        this.parent.visitedItem = node;
        this.isPathDragged = this.isRenameParent = this.isRightClick = false;
        this.treeObj.selectedNodes = [node.getAttribute("data-uid")];
      }
    };
    NavigationPane2.prototype.onNodeSelected = function(args) {
      if (this.parent.breadcrumbbarModule && this.parent.breadcrumbbarModule.searchObj && !this.renameParent) {
        this.parent.breadcrumbbarModule.searchObj.element.value = "";
        this.parent.isFiltered = false;
        this.isNodeClickCalled = false;
      }
      this.parent.searchedItems = [];
      if (!args.isInteracted && !this.isRightClick && !this.isSameNodeClicked && !this.isPathDragged && !this.isRenameParent) {
        this.parent.pathId = getPathId(args.node);
        return;
      }
      this.activeNode = args.node;
      this.parent.activeModule = "navigationpane";
      var nodeData = this.getTreeData(getValue("id", args.nodeData));
      this.parent.selectedItems = [];
      this.parent.itemData = nodeData;
      var previousPath = this.parent.path;
      var sNode = select('[data-uid="' + this.treeObj.selectedNodes[0] + '"]', this.treeObj.element);
      if (!this.isRightClick && this.isSameNodeClicked && sNode.querySelector(".e-list-text").innerHTML !== this.parent.pathNames[this.parent.pathNames.length - 1]) {
        updatePath(args.node, this.parent.itemData[0], this.parent);
      } else {
        this.parent.pathId = getPathId(args.node);
        this.parent.visitedItem = args.node;
      }
      this.expandNodeTarget = null;
      if (args.node.querySelector("." + ICONS) && args.node.querySelector("." + LIST_ITEM) === null) {
        this.expandNodeTarget = "add";
      }
      if (previousPath !== this.parent.path) {
        if (!this.isRightClick && this.isSameNodeClicked) {
          read(this.parent, this.isPathDragged ? pasteEnd : pathChanged, this.parent.path);
          this.isNodeClickCalled = true;
        }
        this.parent.visitedItem = args.node;
      }
      this.isPathDragged = this.isRenameParent = this.isRightClick = this.isSameNodeClicked = false;
    };
    NavigationPane2.prototype.onPathDrag = function(args) {
      this.isPathDragged = true;
      this.selectResultNode(args[0]);
    };
    NavigationPane2.prototype.onNodeExpand = function(args) {
      if (!args.isInteracted && !this.isDrag) {
        return;
      }
      if (args.node.querySelector("." + LIST_ITEM) === null) {
        var text = getValue("text", args.nodeData);
        var id = args.node.getAttribute("data-id");
        var isId = isNullOrUndefined(id) ? false : true;
        var newText = isNullOrUndefined(id) ? text : id;
        var path = getPath(args.node, newText, isId);
        this.expandNodeTarget = args.node.getAttribute("data-uid");
        this.parent.expandedId = this.expandNodeTarget;
        this.parent.itemData = this.getTreeData(getValue("id", args.nodeData));
        read(this.parent, nodeExpand, path);
        this.isNodeExpandCalled = true;
      }
    };
    NavigationPane2.prototype.onNodeExpanded = function(args) {
      this.addChild(args.files, this.expandNodeTarget, false);
      this.parent.expandedId = null;
      this.isNodeExpandCalled = false;
    };
    NavigationPane2.prototype.onNodeClicked = function(args) {
      this.parent.activeModule = "navigationpane";
      this.previousSelected = this.treeObj.selectedNodes;
      this.activeNode = args.node;
      if (args.event.which === 3 && args.node.getAttribute("data-uid") !== this.treeObj.selectedNodes[0]) {
        this.isRightClick = true;
        this.isNodeClickCalled = true;
        this.treeObj.selectedNodes = [args.node.getAttribute("data-uid")];
      } else if (args.node.getAttribute("data-uid") === this.treeObj.selectedNodes[0] && this.parent.selectedItems.length !== 0) {
        this.parent.setProperties({ selectedItems: [] }, true);
        var layout = this.parent.view === "LargeIcons" ? "largeiconsview" : "detailsview";
        this.parent.notify(modelChanged2, { module: layout, newProp: { selectedItems: [] } });
      } else if (args.node.getAttribute("data-uid") === this.treeObj.selectedNodes[0] && !this.isNodeClickCalled && !this.isNodeExpandCalled) {
        if (args.event.which === 3) {
          this.isRightClick = true;
        }
        this.isSameNodeClicked = true;
        this.isNodeClickCalled = true;
        this.treeObj.selectedNodes = [args.node.getAttribute("data-uid")];
      }
    };
    NavigationPane2.prototype.onNodeEditing = function(args) {
      if (!isNullOrUndefined(args.innerHtml)) {
        args.cancel = true;
      }
    };
    NavigationPane2.prototype.onPathChanged = function(args) {
      this.parent.isCut = false;
      var currFiles = getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feFiles);
      if (this.expandNodeTarget === "add") {
        var sNode = select('[data-uid="' + this.treeObj.selectedNodes[0] + '"]', this.treeObj.element);
        var ul = !isNullOrUndefined(sNode) ? select("." + LIST_PARENT, sNode) : null;
        if (isNullOrUndefined(ul)) {
          this.addChild(args.files, this.treeObj.selectedNodes[0], !this.expandTree);
        }
        this.expandNodeTarget = "";
      }
      this.expandTree = false;
      if (isNullOrUndefined(currFiles)) {
        setValue(this.parent.pathId[this.parent.pathId.length - 1], args.files, this.parent.feFiles);
      }
      if (this.parent.uploadObj.directoryUpload && !this.parent.hasId) {
        this.updateTree(args);
      }
    };
    NavigationPane2.prototype.updateTree = function(args) {
      if (this.treeObj) {
        var id = this.treeObj.selectedNodes[0];
        this.updateTreeNode(args, id);
      }
    };
    NavigationPane2.prototype.updateTreeNode = function(args, id) {
      var toExpand = this.treeObj.expandedNodes.indexOf(id) === -1 ? false : true;
      this.removeChildNodes(id);
      this.addChild(args.files, id, !toExpand);
    };
    NavigationPane2.prototype.removeChildNodes = function(id) {
      var sNode = select('[data-uid="' + id + '"]', this.treeObj.element);
      var parent = select("." + LIST_PARENT, sNode);
      var childs = parent ? Array.prototype.slice.call(parent.children) : null;
      if (childs) {
        this.treeObj.removeNodes(childs);
      }
    };
    NavigationPane2.prototype.onOpenEnd = function(args) {
      var sleId = this.parent.pathId[this.parent.pathId.length - 1];
      this.treeObj.expandAll(this.treeObj.selectedNodes);
      this.treeObj.selectedNodes = [sleId];
      this.expandNodeTarget = "add";
      this.onPathChanged(args);
    };
    NavigationPane2.prototype.onOpenInit = function(args) {
      if (this.parent.activeModule === "navigationpane") {
        if (args.target.querySelector("." + ICONS)) {
          this.treeObj.expandAll(this.treeObj.selectedNodes);
        }
      }
    };
    NavigationPane2.prototype.onInitialEnd = function(args) {
      this.onInit();
      this.addChild(args.files, getValue("_fm_id", args.cwd), false);
    };
    NavigationPane2.prototype.onFinalizeEnd = function(args) {
      this.onInit();
      var id = getValue("_fm_id", args.cwd);
      this.removeChildNodes(id);
      this.addChild(args.files, id, false);
      this.treeObj.selectedNodes = [this.parent.pathId[this.parent.pathId.length - 1]];
    };
    NavigationPane2.prototype.onCreateEnd = function(args) {
      this.updateTree(args);
    };
    NavigationPane2.prototype.onSelectedData = function() {
      if (this.parent.activeModule === "navigationpane") {
        this.updateItemData();
      }
    };
    NavigationPane2.prototype.onDeleteInit = function() {
      if (this.parent.activeModule === "navigationpane") {
        this.updateActionData();
        var name_1 = getValue("name", this.parent.itemData[0]);
        Delete(this.parent, [name_1], this.parent.path, "delete");
      }
    };
    NavigationPane2.prototype.onDeleteEnd = function(args) {
      if (this.parent.activeModule === "navigationpane") {
        var selectedNode = this.treeObj.selectedNodes[0];
        var selcetedEle = select('[data-uid="' + selectedNode + '"]', this.treeObj.element);
        var selectedNodeEle = closest(selcetedEle, "." + LIST_PARENT).parentElement;
        this.treeObj.selectedNodes = [selectedNodeEle.getAttribute("data-uid")];
        this.treeObj.dataBind();
      }
      this.updateTree(args);
    };
    NavigationPane2.prototype.onRefreshEnd = function(args) {
      this.updateTree(args);
    };
    NavigationPane2.prototype.onRenameInit = function() {
      if (this.parent.activeModule === "navigationpane") {
        this.updateRenameData();
      }
    };
    NavigationPane2.prototype.onRenameEndParent = function(args) {
      var id = this.renameParent ? this.renameParent : this.parent.pathId[this.parent.pathId.length - 1];
      this.expandTree = this.treeObj.expandedNodes.indexOf(this.treeObj.selectedNodes[0]) !== -1;
      this.updateTreeNode(args, id);
      this.parent.expandedId = null;
      if (this.renameParent) {
        this.renameParent = null;
      } else {
        var resultData = [];
        if (this.parent.hasId) {
          resultData = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where("id", "equal", this.parent.renamedId, false));
        } else {
          var nData = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where(this.treeObj.fields.text, "equal", this.parent.renameText, false));
          if (nData.length > 0) {
            resultData = new DataManager(nData).executeLocal(new Query().where("_fm_pId", "equal", id, false));
          }
        }
        if (resultData.length > 0) {
          var id_1 = getValue(this.treeObj.fields.id, resultData[0]);
          this.treeObj.selectedNodes = [id_1];
          this.treeObj.dataBind();
        }
      }
    };
    NavigationPane2.prototype.onRenameEnd = function(args) {
      if (this.parent.breadcrumbbarModule.searchObj.element.value === "" && !this.parent.isFiltered) {
        this.updateTree(args);
      } else {
        var data = this.treeObj.getTreeData();
        var resultData = [];
        if (this.parent.hasId) {
          resultData = new DataManager(data).executeLocal(new Query().where("id", "equal", this.parent.renamedId, false));
        } else {
          var nData = new DataManager(data).executeLocal(new Query().where(this.treeObj.fields.text, "equal", this.parent.currentItemText, false));
          if (nData.length > 0) {
            resultData = new DataManager(nData).executeLocal(new Query().where("filterPath", "equal", this.parent.filterPath, false));
          }
        }
        if (resultData.length > 0) {
          this.renameParent = getValue(this.treeObj.fields.parentID, resultData[0]);
          this.parent.expandedId = this.renameParent;
          this.parent.itemData = this.getTreeData(this.renameParent);
          read(this.parent, renameEndParent, this.parent.filterPath.replace(/\\/g, "/"));
        }
      }
    };
    NavigationPane2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName() && e.module !== "common") {
        return;
      }
      for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "allowDragAndDrop":
            this.addDragDrop();
            break;
          case "navigationPaneSettings":
            read(this.parent, finalizeEnd, "/");
            if (e.oldProp.navigationPaneSettings.sortOrder !== e.newProp.navigationPaneSettings.sortOrder) {
              this.treeObj.sortOrder = e.newProp.navigationPaneSettings.sortOrder;
            }
            break;
        }
      }
    };
    NavigationPane2.prototype.onDownLoadInit = function() {
      this.doDownload();
    };
    NavigationPane2.prototype.onSelectionChanged = function(e) {
      this.treeObj.selectedNodes = [e.selectedNode];
    };
    NavigationPane2.prototype.onClearPathInit = function(e) {
      this.removeChildNodes(e.selectedNode);
    };
    NavigationPane2.prototype.onDragEnd = function(args) {
      var moveNames = [];
      if (this.parent.isPasteError || this.parent.isSearchDrag) {
        moveNames = this.getMoveNames(args.files, this.parent.isSearchDrag, this.parent.dragPath);
      } else {
        moveNames = this.moveNames;
      }
      this.treeObj.removeNodes(moveNames);
    };
    NavigationPane2.prototype.getMoveNames = function(files, flag, path) {
      var moveNames = [];
      for (var i = 0; i < files.length; i++) {
        if (!files[i].isFile) {
          if (!this.parent.hasId) {
            var name_2 = files[i].previousName;
            if (flag) {
              path = path + files[i].previousName;
              var index = path.lastIndexOf("/");
              name_2 = path.substring(index + 1);
              path = path.substring(0, index + 1);
            }
            var resultData = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where(this.treeObj.fields.text, "equal", name_2, false));
            for (var j = 0; j < resultData.length; j++) {
              var fPath = getValue("filterPath", resultData[j]);
              fPath = fPath.replace(/\\/g, "/");
              if (fPath === path) {
                moveNames.push(getValue(this.treeObj.fields.id, resultData[j]));
                break;
              }
            }
          }
        }
      }
      return moveNames;
    };
    NavigationPane2.prototype.onCutEnd = function(args) {
      var moveNames = [];
      if (this.parent.isPasteError || this.parent.isSearchCut) {
        this.moveNames = this.getMoveNames(args.files, this.parent.isSearchCut, this.parent.targetPath);
      } else {
        moveNames = this.moveNames;
      }
      this.treeObj.removeNodes(moveNames);
    };
    NavigationPane2.prototype.selectResultNode = function(resultObj) {
      if (!this.parent.hasId) {
        var path = getValue("filterPath", resultObj);
        var itemname = getValue("name", resultObj);
        var data = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where(this.treeObj.fields.text, "equal", itemname, false));
        if (data.length > 0) {
          var resultData = new DataManager(data).executeLocal(new Query().where("filterPath", "equal", path, false));
          if (resultData.length > 0) {
            var id = getValue(this.treeObj.fields.id, resultData[0]);
            this.treeObj.selectedNodes = [id];
            this.treeObj.dataBind();
          }
        }
      } else {
        var selectedNode = this.treeObj.getTreeData().filter(function(obj) {
          return obj.name === resultObj.name;
        })[0];
        this.treeObj.selectedNodes = [getValue("_fm_id", selectedNode)];
        this.treeObj.dataBind();
      }
    };
    NavigationPane2.prototype.onDropPath = function(args) {
      this.onpasteEnd(args);
      this.selectResultNode(this.parent.dropData);
      this.parent.isDropEnd = !this.parent.isPasteError;
    };
    NavigationPane2.prototype.onpasteEnd = function(args) {
      var resultData = [];
      if (this.parent.hasId) {
        resultData = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where("id", "equal", getValue("id", args.cwd), false));
      } else {
        var nData = new DataManager(this.treeObj.getTreeData()).executeLocal(new Query().where(this.treeObj.fields.text, "equal", getValue("name", args.cwd), false));
        if (nData.length > 0) {
          resultData = new DataManager(nData).executeLocal(new Query().where("filterPath", "equal", getValue("filterPath", args.cwd), false));
        }
      }
      if (resultData.length > 0) {
        var id = getValue(this.treeObj.fields.id, resultData[0]);
        var toExpand = this.treeObj.expandedNodes.indexOf(id) === -1;
        this.removeChildNodes(id);
        this.addChild(args.files, id, toExpand);
      }
      this.parent.expandedId = null;
      this.onPathChanged(args);
      if (this.parent.isDragDrop) {
        this.checkDropPath(args);
      }
    };
    NavigationPane2.prototype.checkDropPath = function(args) {
      if (this.parent.hasId) {
        this.parent.isDropEnd = !this.parent.isPasteError;
        readDropPath(this.parent);
        return;
      }
      if (this.parent.dropPath.indexOf(getDirectoryPath(this.parent, args)) === -1) {
        this.parent.isDropEnd = false;
        readDropPath(this.parent);
      } else {
        this.parent.isDropEnd = !this.parent.isPasteError;
      }
    };
    NavigationPane2.prototype.onpasteInit = function() {
      if (this.parent.activeModule === this.getModuleName()) {
        this.updateItemData();
      }
      this.moveNames = [];
      var obj = this.parent.isDragDrop ? this.parent.dragData : this.parent.actionRecords;
      for (var i = 0; i < obj.length; i++) {
        if (getValue("isFile", obj[i]) === false) {
          this.moveNames.push(getValue("_fm_id", obj[i]));
        }
      }
    };
    NavigationPane2.prototype.oncutCopyInit = function() {
      if (this.parent.activeModule === this.getModuleName()) {
        this.parent.activeRecords = this.getTreeData(this.treeObj.selectedNodes[0]);
        this.parent.activeElements = [this.activeNode];
      }
    };
    NavigationPane2.prototype.addEventListener = function() {
      this.parent.on(modelChanged2, this.onPropertyChanged, this);
      this.parent.on(downloadInit, this.onDownLoadInit, this);
      this.parent.on(initialEnd2, this.onInitialEnd, this);
      this.parent.on(finalizeEnd, this.onFinalizeEnd, this);
      this.parent.on(pathChanged, this.onPathChanged, this);
      this.parent.on(pasteEnd, this.onpasteEnd, this);
      this.parent.on(cutEnd, this.onCutEnd, this);
      this.parent.on(pasteInit, this.onpasteInit, this);
      this.parent.on(nodeExpand, this.onNodeExpanded, this);
      this.parent.on(createEnd, this.onCreateEnd, this);
      this.parent.on(selectedData, this.onSelectedData, this);
      this.parent.on(deleteInit, this.onDeleteInit, this);
      this.parent.on(deleteEnd, this.onDeleteEnd, this);
      this.parent.on(refreshEnd, this.onRefreshEnd, this);
      this.parent.on(updateTreeSelection, this.onSelectionChanged, this);
      this.parent.on(openInit, this.onOpenInit, this);
      this.parent.on(openEnd, this.onOpenEnd, this);
      this.parent.on(destroy2, this.destroy, this);
      this.parent.on(renameInit, this.onRenameInit, this);
      this.parent.on(renameEnd, this.onRenameEnd, this);
      this.parent.on(renameEndParent, this.onRenameEndParent, this);
      this.parent.on(clearPathInit, this.onClearPathInit, this);
      this.parent.on(cutCopyInit, this.oncutCopyInit, this);
      this.parent.on(dropInit, this.onDropInit, this);
      this.parent.on(menuItemData, this.onMenuItemData, this);
      this.parent.on(dragEnd, this.onDragEnd, this);
      this.parent.on(dragging, this.onDragging, this);
      this.parent.on(dropPath, this.onDropPath, this);
      this.parent.on(detailsInit, this.onDetailsInit, this);
      this.parent.on(pathDrag, this.onPathDrag, this);
    };
    NavigationPane2.prototype.removeEventListener = function() {
      this.parent.off(initialEnd2, this.onInitialEnd);
      this.parent.off(downloadInit, this.onDownLoadInit);
      this.parent.off(finalizeEnd, this.onFinalizeEnd);
      this.parent.off(selectedData, this.onSelectedData);
      this.parent.off(modelChanged2, this.onPropertyChanged);
      this.parent.off(pathChanged, this.onPathChanged);
      this.parent.off(pasteEnd, this.onpasteEnd);
      this.parent.off(cutEnd, this.onCutEnd);
      this.parent.off(pasteInit, this.onpasteInit);
      this.parent.off(updateTreeSelection, this.onSelectionChanged);
      this.parent.off(nodeExpand, this.onNodeExpanded);
      this.parent.off(createEnd, this.onCreateEnd);
      this.parent.off(refreshEnd, this.onRefreshEnd);
      this.parent.off(openInit, this.onOpenInit);
      this.parent.off(openEnd, this.onOpenEnd);
      this.parent.off(destroy2, this.destroy);
      this.parent.off(renameInit, this.onRenameInit);
      this.parent.off(renameEnd, this.onRenameEnd);
      this.parent.off(renameEndParent, this.onRenameEndParent);
      this.parent.off(clearPathInit, this.onClearPathInit);
      this.parent.off(deleteInit, this.onDeleteInit);
      this.parent.off(deleteEnd, this.onDeleteEnd);
      this.parent.off(cutCopyInit, this.oncutCopyInit);
      this.parent.off(dropInit, this.onDropInit);
      this.parent.off(dragEnd, this.onDragEnd);
      this.parent.off(dragging, this.onDragging);
      this.parent.off(dropPath, this.onDropPath);
      this.parent.off(detailsInit, this.onDetailsInit);
      this.parent.off(menuItemData, this.onMenuItemData);
      this.parent.off(pathDrag, this.onPathDrag);
    };
    NavigationPane2.prototype.onDetailsInit = function() {
      if (this.parent.activeModule === this.getModuleName()) {
        var dataobj = this.getTreeData(this.treeObj.selectedNodes[0]);
        this.parent.itemData = dataobj;
      }
    };
    NavigationPane2.prototype.onMenuItemData = function(args) {
      if (this.parent.activeModule === this.getModuleName()) {
        var liEle = closest(args.target, "li");
        this.parent.itemData = this.getTreeData(liEle.getAttribute("data-uid"));
      }
    };
    NavigationPane2.prototype.onDragging = function(args) {
      var ele = closest(args.target, "li");
      if (ele.classList.contains("e-node-collapsed")) {
        this.isDrag = true;
        var level = parseInt(ele.getAttribute("aria-level"), 10);
        this.treeObj.expandAll([ele.getAttribute("data-uid")], level + 1);
        this.isDrag = false;
      }
    };
    NavigationPane2.prototype.onDropInit = function(args) {
      if (this.parent.targetModule === this.getModuleName()) {
        var dropLi = closest(args.target, "li");
        this.parent.dropData = this.getTreeData(dropLi)[0];
        this.parent.dropPath = this.getDropPath(dropLi, getValue("name", this.parent.dropData));
      }
    };
    NavigationPane2.prototype.getModuleName = function() {
      return "navigationpane";
    };
    NavigationPane2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.removeEventListener();
      if (this.treeObj) {
        this.unWireEvents();
        this.treeObj.destroy();
      }
    };
    NavigationPane2.prototype.wireEvents = function() {
      this.keyboardModule = new KeyboardEvents(this.treeObj.element, {
        keyAction: this.keyDown.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
    };
    NavigationPane2.prototype.unWireEvents = function() {
      this.keyboardModule.destroy();
    };
    NavigationPane2.prototype.keyDown = function(e) {
      var action = e.action;
      switch (action) {
        case "altEnter":
          this.parent.notify(detailsInit, {});
          GetDetails(this.parent, [], this.parent.path, "details");
          break;
        case "esc":
          removeActive(this.parent);
          break;
        case "del":
          if (this.parent.pathId[0] !== this.activeNode.getAttribute("data-uid")) {
            this.updateItemData();
            if (!hasEditAccess(this.parent.itemData[0])) {
              createDeniedDialog(this.parent, this.parent.itemData[0], permissionEdit);
            } else {
              this.removeNodes = [];
              createDialog(this.parent, "Delete");
            }
          }
          break;
        case "ctrlC":
          copyFiles(this.parent);
          break;
        case "ctrlV":
          this.parent.folderPath = "";
          pasteHandler(this.parent);
          break;
        case "ctrlX":
          cutFiles(this.parent);
          break;
        case "shiftF10":
          this.updateItemData();
          if (!hasDownloadAccess(this.parent.itemData[0])) {
            createDeniedDialog(this.parent, this.parent.itemData[0], permissionDownload);
            return;
          }
          if (this.parent.selectedItems.length !== 0) {
            this.doDownload();
          }
          break;
        case "f2":
          if (this.parent.selectedItems.length === 0) {
            var data = this.getTreeData(this.treeObj.selectedNodes[0])[0];
            if (!hasEditAccess(data)) {
              createDeniedDialog(this.parent, data, permissionEdit);
            } else {
              this.updateRenameData();
              createDialog(this.parent, "Rename");
            }
          }
          break;
      }
    };
    NavigationPane2.prototype.getTreeData = function(args) {
      var data = this.treeObj.getTreeData(args);
      for (var i = 0; i < data.length; i++) {
        if (isNullOrUndefined(getValue("hasChild", data[i]))) {
          setValue("hasChild", false, data[i]);
        }
      }
      return data;
    };
    NavigationPane2.prototype.updateRenameData = function() {
      this.updateItemData();
      this.parent.currentItemText = getValue("name", this.parent.itemData[0]);
    };
    NavigationPane2.prototype.updateItemData = function() {
      var data = this.getTreeData(this.treeObj.selectedNodes[0])[0];
      this.parent.itemData = [data];
      this.parent.isFile = false;
    };
    NavigationPane2.prototype.updateActionData = function() {
      this.updateItemData();
      var newPath = getParentPath(this.parent.path);
      this.parent.setProperties({ path: newPath }, true);
      this.parent.pathId.pop();
      this.parent.pathNames.pop();
    };
    NavigationPane2.prototype.doDownload = function() {
      var newPath = getParentPath(this.parent.path);
      var itemId = this.treeObj.selectedNodes[0];
      var name = itemId === this.parent.pathId[0] ? "" : getValue("name", this.parent.itemData[0]);
      Download(this.parent, newPath, [name]);
    };
    return NavigationPane2;
  }()
);

// node_modules/@syncfusion/ej2-filemanager/src/file-manager/layout/details-view.js
var DetailsView = (
  /** @class */
  function() {
    function DetailsView2(parent) {
      this.isInteracted = true;
      this.interaction = true;
      this.isPasteOperation = false;
      this.isColumnRefresh = false;
      this.dragObj = null;
      this.startIndex = null;
      this.firstItemIndex = null;
      this.isSelectionUpdate = false;
      this.currentSelectedItem = [];
      this.count = 0;
      this.isRendered = true;
      this.isLoaded = false;
      this.isNameWidth = false;
      this.pasteOperation = false;
      this.uploadOperation = false;
      this.actionDivert = false;
      Grid.Inject(Resize, ContextMenu2, Sort, VirtualScroll);
      this.parent = parent;
      this.element = select("#" + this.parent.element.id + GRID_ID, this.parent.element);
      this.addEventListener();
      this.keyConfigs = {
        altEnter: "alt+enter",
        esc: "escape",
        tab: "tab",
        moveDown: "downarrow",
        ctrlEnd: "ctrl+end",
        ctrlHome: "ctrl+home",
        ctrlDown: "ctrl+downarrow",
        ctrlLeft: "ctrl+leftarrow",
        ctrlRight: "ctrl+rightarrow",
        shiftEnd: "shift+end",
        shiftHome: "shift+home",
        shiftDown: "shift+downarrow",
        shiftUp: "shift+uparrow",
        ctrlUp: "ctrl+uparrow",
        csEnd: "ctrl+shift+end",
        csHome: "ctrl+shift+home",
        csDown: "ctrl+shift+downarrow",
        csUp: "ctrl+shift+uparrow",
        space: "space",
        ctrlSpace: "ctrl+space",
        shiftSpace: "shift+space",
        csSpace: "ctrl+shift+space",
        end: "end",
        home: "home",
        moveUp: "uparrow",
        del: "delete",
        ctrlX: this.parent.isMac ? "cmd+x" : "ctrl+x",
        ctrlC: this.parent.isMac ? "cmd+c" : "ctrl+c",
        ctrlV: this.parent.isMac ? "cmd+v" : "ctrl+v",
        ctrlShiftN: "ctrl+shift+n",
        shiftdel: "shift+delete",
        ctrlD: "ctrl+d",
        f2: "f2",
        ctrlA: "ctrl+a",
        enter: "enter"
      };
    }
    DetailsView2.prototype.render = function(args) {
      showSpinner(this.parent.element);
      if (this.parent.view === "Details") {
        removeClass([this.parent.element], MULTI_SELECT);
        var items = getSortedData(this.parent, args.files);
        this.checkNameWidth();
        var columns = this.getColumns();
        var sortSettings = void 0;
        if (this.parent.isMobile) {
          sortSettings = [];
        } else {
          if (this.parent.sortOrder !== "None") {
            sortSettings = [{ direction: this.parent.sortOrder, field: this.parent.sortBy }];
          }
        }
        this.gridObj = new Grid({
          dataSource: items,
          allowSorting: true,
          rowSelecting: this.onSelection.bind(this, "select"),
          rowDeselecting: this.onSelection.bind(this, "unselect"),
          rowSelected: this.onSelected.bind(this),
          rowDeselected: this.onDeSelection.bind(this),
          allowResizing: this.parent.detailsViewSettings.columnResizing,
          selectionSettings: {
            type: this.parent.allowMultiSelection ? "Multiple" : "Single",
            checkboxMode: "ResetOnRowClick",
            persistSelection: this.parent.enableVirtualization ? true : false
          },
          enableRtl: this.parent.enableRtl,
          pageSettings: { pageSize: 20 },
          enableVirtualization: this.parent.enableVirtualization,
          enablePersistence: this.parent.enablePersistence,
          enableVirtualMaskRow: true,
          sortSettings: { allowUnsort: false, columns: sortSettings },
          columns,
          recordDoubleClick: this.DblClickEvents.bind(this),
          beforeDataBound: this.onBeforeDataBound.bind(this),
          dataBound: this.onDataBound.bind(this),
          rowDataBound: this.onRowDataBound.bind(this),
          actionBegin: this.onActionBegin.bind(this),
          headerCellInfo: this.onHeaderCellInfo.bind(this),
          width: "100%",
          height: this.parent.enableVirtualization ? this.getGridHeight() : "auto",
          beforeCopy: function(args2) {
            args2.cancel = true;
          },
          // eslint-disable-next-line
          load: function(args2) {
            this.focusModule.destroy();
          },
          locale: this.parent.locale
        });
        if (this.parent.isReact) {
          this.gridObj.isReact = true;
          this.gridObj.portals = [];
          this.gridObj.on("reactTemplateRender", this.reactTemplateRender, this);
        }
        this.gridObj.isStringTemplate = true;
        this.gridObj.appendTo("#" + this.parent.element.id + GRID_ID);
        this.wireEvents();
        this.adjustHeight();
        this.emptyArgs = args;
      }
    };
    DetailsView2.prototype.reactTemplateRender = function(args) {
      this.parent["portals"] = args;
      this.parent.notify("renderReactTemplate", this.parent["portals"]);
      this.parent["renderReactTemplates"]();
    };
    DetailsView2.prototype.getGridHeight = function() {
      var pane = select("#" + this.parent.element.id + CONTENT_ID, this.parent.element);
      var bar = select("#" + this.parent.element.id + BREADCRUMBBAR_ID, this.parent.element);
      var headerMaxHeight = 36;
      return pane.offsetHeight - bar.offsetHeight - headerMaxHeight;
    };
    DetailsView2.prototype.checkNameWidth = function() {
      var initialColumn = this.parent.detailsViewSettings.columns;
      this.isNameWidth = false;
      for (var i = 0; i < initialColumn.length; i++) {
        if (initialColumn[i].field === "name") {
          this.isNameWidth = !isNullOrUndefined(initialColumn[i].width);
          return;
        }
      }
    };
    DetailsView2.prototype.adjustWidth = function(columns, fieldName) {
      if (this.isNameWidth && fieldName === "name") {
        return;
      }
      for (var i = 0; i < columns.length; i++) {
        if (columns[i].field === fieldName) {
          var nameWidth = void 0;
          if (this.parent.breadcrumbbarModule.searchObj.element.value === "" && !this.parent.isFiltered) {
            nameWidth = this.element.clientWidth <= 500 ? "120px" : "auto";
          } else {
            nameWidth = this.element.clientWidth <= 680 ? fieldName === "name" ? "120px" : "180px" : "auto";
          }
          columns[i].width = nameWidth;
        }
      }
    };
    DetailsView2.prototype.getColumns = function() {
      var columns;
      if (this.parent.isMobile) {
        columns = [
          {
            field: "name",
            headerText: getLocaleText(this.parent, "Name"),
            width: "auto",
            minWidth: 120,
            headerTextAlign: "Left",
            template: initializeCSPTemplate(function(data) {
              return '<div class="e-fe-text">' + data.name + '</div><div class="e-fe-date">' + data._fm_modified + `</div>' +
                        '<span class="e-fe-size">` + data.size + "</span>";
            })
          }
        ];
      } else {
        columns = extend([], this.parent.detailsViewSettings.columns, null, true);
        this.adjustWidth(columns, "name");
        for (var i = 0, len = columns.length; i < len; i++) {
          columns[i].headerText = getLocaleText(this.parent, columns[i].headerText);
        }
      }
      var iWidth = this.parent.isMobile || this.parent.isBigger ? "54" : "46";
      var icon = {
        field: "type",
        width: iWidth,
        minWidth: iWidth,
        template: initializeCSPTemplate(function(data) {
          return '<span class="e-fe-icon ' + data._fm_iconClass + '"></span>';
        }),
        allowResizing: false,
        allowSorting: true,
        customAttributes: { class: "e-fe-grid-icon" },
        headerTemplate: initializeCSPTemplate(function() {
          return '<span class="e-fe-icon e-fe-folder"></span>';
        })
      };
      columns.unshift(icon);
      if (this.parent.showItemCheckBoxes) {
        var cWidth = this.parent.isBigger ? "36" : "26";
        var cBox = {
          type: "checkbox",
          width: cWidth,
          minWidth: cWidth,
          customAttributes: { class: "e-fe-checkbox" },
          allowResizing: false,
          allowSorting: false
        };
        if (this.parent.isMobile) {
          columns.push(cBox);
        } else {
          columns.unshift(cBox);
        }
      }
      for (var i = 0, len = columns.length; i < len; i++) {
        columns[i].disableHtmlEncode = !this.parent.enableHtmlSanitizer;
      }
      return columns;
    };
    DetailsView2.prototype.adjustHeight = function() {
      if (!this.gridObj) {
        return;
      }
      var pane = select("#" + this.parent.element.id + CONTENT_ID, this.parent.element);
      var bar = select("#" + this.parent.element.id + BREADCRUMBBAR_ID, this.parent.element);
      var gridHeader = select("." + GRID_HEADER, this.parent.element);
      var height = pane.offsetHeight - bar.offsetHeight - gridHeader.offsetHeight;
      this.gridObj.height = height;
      this.gridObj.dataBind();
    };
    DetailsView2.prototype.renderCheckBox = function() {
      this.gridObj.columns = this.getColumns();
      this.isColumnRefresh = true;
      this.gridObj.refreshColumns();
    };
    DetailsView2.prototype.onRowDataBound = function(args) {
      var td = select(".e-fe-grid-name", args.row);
      if (!td) {
        var columns = this.parent.detailsViewSettings.columns;
        for (var i = 0; i < columns.length; i++) {
          if (columns[i].field === "name") {
            td = args.row.children[this.parent.allowMultiSelection ? i + 2 : i + 1];
            break;
          }
        }
      }
      if (td) {
        td.setAttribute("title", getValue("name", args.data));
      }
      if (this.parent.isLayoutChange && this.parent.isCut && this.parent.fileAction === "move" && this.parent.selectedNodes && this.parent.selectedNodes.length !== 0) {
        if (this.parent.selectedNodes.indexOf(getValue("name", args.data)) !== -1) {
          addBlur(args.row);
        }
      }
      if (!this.parent.showFileExtension && getValue("isFile", args.data)) {
        var textEle = args.row.querySelector(".e-fe-text");
        if (textEle) {
          var name_1 = getValue("name", args.data);
          var type = getValue("type", args.data);
          textEle.innerHTML = name_1.substr(0, name_1.length - type.length);
        }
      }
      if (getValue("size", args.data) !== void 0 && args.row.querySelector(".e-fe-size")) {
        var sizeEle = args.row.querySelector(".e-fe-size");
        var modifiedSize = void 0;
        if (!getValue("isFile", args.data)) {
          modifiedSize = "";
        } else {
          var sizeValue = getValue("size", args.data);
          var intl = new Internationalization(this.parent.locale);
          var sizeFormat = void 0;
          var columns = this.parent.detailsViewSettings.columns;
          for (var i = 0; i < columns.length; i++) {
            if (columns[i].field === "size") {
              sizeFormat = !isNullOrUndefined(columns[i].format) ? columns[i].format.toString() : "n";
              break;
            }
          }
          var value = intl.formatNumber(sizeValue / 1024, { format: sizeFormat });
          modifiedSize = value + " " + getLocaleText(this.parent, "KB");
        }
        sizeEle.innerHTML = modifiedSize;
      }
      if (this.parent.isMobile) {
        if (getValue("_fm_modified", args.data) !== void 0 && args.row.querySelector(".e-fe-date")) {
          var dateEle = args.row.querySelector(".e-fe-date");
          var intl = new Internationalization(this.parent.locale);
          var columns = this.parent.detailsViewSettings.columns;
          var format = void 0;
          for (var i = 0; i < columns.length; i++) {
            if (columns[i].field === "dateModified") {
              format = columns[i].format;
              break;
            }
          }
          var formattedString = intl.formatDate(new Date(getValue("_fm_modified", args.data)), format);
          dateEle.innerHTML = formattedString;
        }
      }
      var checkWrap = args.row.querySelector("." + CB_WRAP);
      if (checkWrap) {
        checkWrap.classList.add("e-small");
      }
      if (!hasEditAccess(args.data)) {
        args.row.className += " " + getAccessClass(args.data);
      }
      var eventArgs = {
        element: args.row,
        fileDetails: args.data,
        module: "DetailsView"
      };
      this.parent.trigger("fileLoad", eventArgs);
    };
    DetailsView2.prototype.onActionBegin = function(args) {
      if (args.requestType === "sorting") {
        this.parent.setProperties({ sortOrder: args.direction }, true);
        this.parent.setProperties({ sortBy: args.columnName }, true);
        if (this.parent.selectedItems.length !== 0) {
          this.sortItem = true;
          var rows = this.gridObj.getSelectedRowIndexes();
          var len = rows.length;
          this.sortSelectedNodes = [];
          while (len > 0) {
            var data = this.gridObj.getRowsObject()[rows[len - 1]].data;
            this.sortSelectedNodes.push(getValue(this.parent.hasId ? "id" : "name", data));
            len--;
          }
        }
        this.parent.notify(sortByChange, {});
      }
    };
    DetailsView2.prototype.onHeaderCellInfo = function(args) {
      var checkWrap = args.node.querySelector("." + CB_WRAP);
      if (checkWrap) {
        checkWrap.classList.add("e-small");
      }
    };
    DetailsView2.prototype.onBeforeDataBound = function(args) {
      showSpinner(this.parent.element);
      var items = getSortedData(this.parent, this.parent.enableVirtualization ? args.result : this.gridObj.dataSource);
      args.result = items;
    };
    DetailsView2.prototype.onDataBound = function() {
      this.createDragObj();
      if (this.parent.selectedItems.length !== 0 && !this.parent.enableVirtualization || this.parent.selectedItems.length !== 0 && this.parent.enableVirtualization && this.element.querySelector(".e-content").scrollTop == 0) {
        this.selectRecords(this.parent.selectedItems);
      }
      if (this.isPasteOperation === true) {
        if (!this.isColumnRefresh) {
          this.selectRecords(this.parent.pasteNodes);
          this.isPasteOperation = false;
        } else {
          this.isColumnRefresh = false;
        }
      }
      if (this.parent.createdItem) {
        this.selectRecords([getValue(this.parent.hasId ? "id" : "name", this.parent.createdItem)]);
        this.parent.createdItem = null;
      }
      if (this.parent.layoutSelectedItems.length) {
        this.selectRecords(this.parent.layoutSelectedItems);
      }
      if (this.parent.renamedItem) {
        this.addSelection(this.parent.renamedItem);
        this.parent.renamedItem = null;
      }
      if (this.sortItem === true) {
        this.selectRecords(this.sortSelectedNodes);
        this.sortItem = false;
      }
      if (this.isSelectionUpdate) {
        if (!this.isColumnRefresh) {
          this.selectRecords(this.currentSelectedItem);
          this.isSelectionUpdate = false;
        } else {
          this.isColumnRefresh = false;
        }
      }
      if (this.uploadOperation === true) {
        this.count++;
        this.selectRecords(this.parent.uploadItem);
        if (this.count === this.parent.uploadItem.length) {
          this.uploadOperation = false;
          this.parent.uploadItem = [];
        }
      }
      if (this.gridObj.currentViewData.length * this.gridObj.getRowHeight() < this.gridObj.height) {
        var hdTable = this.gridObj.getHeaderContent();
        hdTable.style.paddingRight = "";
        hdTable.style.paddingLeft = "";
        var hdContent = select(".e-headercontent", hdTable);
        hdContent.style.borderRightWidth = "0";
        var cnTable = this.gridObj.getContent().querySelector(".e-content");
        cnTable.style.overflowY = "";
        cnTable.classList.add("e-scrollShow");
      } else {
        var hdTable = this.gridObj.getHeaderContent();
        if (!this.parent.enableRtl) {
          hdTable.style.paddingRight = "16px";
        } else {
          hdTable.style.paddingLeft = "16px";
        }
        var cnTable = this.gridObj.getContent().querySelector(".e-content");
        cnTable.classList.remove("e-scrollShow");
      }
      this.isRendered = true;
      this.parent.isLayoutChange = false;
      hideSpinner(this.parent.element);
      this.checkEmptyDiv(this.emptyArgs);
      this.isInteracted = this.isLoaded ? true : this.isInteracted;
      this.isLoaded = false;
    };
    DetailsView2.prototype.selectRecords = function(nodes) {
      var gridRecords = this.gridObj.getCurrentViewRecords();
      var sRecords = [];
      for (var i = 0, len = gridRecords.length; i < len; i++) {
        var node = this.parent.hasId ? getValue("id", gridRecords[i]) : getName(this.parent, gridRecords[i]);
        if (nodes.indexOf(node) !== -1) {
          sRecords.push(i);
        } else if (!this.parent.showFileExtension && node.includes(".")) {
          var Str2 = node.split(".").slice(0, -1).join(".");
          if (nodes.indexOf(Str2) !== -1) {
            sRecords.push(i);
          }
        }
      }
      if (sRecords.length !== 0) {
        this.gridObj.selectRows(sRecords);
        this.addFocus(this.gridObj.selectedRowIndex);
      }
    };
    DetailsView2.prototype.addSelection = function(data) {
      var items = this.gridObj.getCurrentViewRecords();
      var rData = [];
      if (this.parent.hasId) {
        rData = new DataManager(items).executeLocal(new Query().where("id", "equal", this.parent.renamedId, false));
      } else {
        var nData = new DataManager(items).executeLocal(new Query().where("name", "equal", getValue("name", data), false));
        if (nData.length > 0) {
          rData = new DataManager(nData).executeLocal(new Query().where("filterPath", "equal", this.parent.filterPath, false));
        }
      }
      if (rData.length > 0) {
        var index = items.indexOf(rData[0]);
        this.gridObj.selectRows([index]);
      }
    };
    DetailsView2.prototype.onSortColumn = function() {
      if (this.parent.sortOrder !== "None") {
        this.gridObj.sortModule.sortColumn(this.parent.sortBy, this.parent.sortOrder);
      } else {
        this.gridObj.dataSource = getSortedData(this.parent, this.gridObj.dataSource);
      }
      if (this.element.querySelector(".e-content").scrollTop !== 0) {
        this.gridObj.freezeRefresh();
      }
    };
    DetailsView2.prototype.onPropertyChanged = function(e) {
      if (e.module !== this.getModuleName() && e.module !== "common") {
        return;
      }
      for (var _i = 0, _a = Object.keys(e.newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "allowDragAndDrop":
            this.createDragObj();
            break;
          case "height":
            this.adjustHeight();
            break;
          case "detailsViewSettings":
            if (!isNullOrUndefined(this.gridObj)) {
              this.checkNameWidth();
              var columns = this.getColumns();
              this.gridObj.columns = columns;
              this.gridObj.allowResizing = this.parent.detailsViewSettings.columnResizing;
              this.gridObj.dataBind();
              this.gridObj.refreshColumns();
            }
            break;
          case "selectedItems":
            this.interaction = false;
            if (this.parent.selectedItems.length !== 0) {
              if (!this.parent.allowMultiSelection) {
                var slItems = this.parent.selectedItems.slice(this.parent.selectedItems.length - 1);
                this.parent.setProperties({ selectedItems: slItems }, true);
              }
              this.selectRecords(this.parent.selectedItems);
              this.parent.setProperties({ selectedItems: this.parent.selectedItems }, true);
            } else if (!isNullOrUndefined(this.gridObj)) {
              this.gridObj.clearSelection();
              this.interaction = true;
            }
            break;
          case "showFileExtension":
            read(this.parent, pathChanged, this.parent.path);
            break;
          case "showHiddenItems":
            read(this.parent, pathChanged, this.parent.path);
            break;
          case "allowMultiSelection":
            if (!isNullOrUndefined(this.gridObj)) {
              this.currentSelectedItem = this.parent.selectedItems;
              this.gridObj.selectionSettings.type = e.newProp.allowMultiSelection ? "Multiple" : "Single";
              this.isSelectionUpdate = true;
              this.renderCheckBox();
            }
            break;
          case "view":
            updateLayout(this.parent, "Details");
            break;
          case "width":
            this.onDetailsResize();
        }
      }
    };
    DetailsView2.prototype.onPathChanged = function(args) {
      this.parent.isCut = false;
      if (this.parent.breadcrumbbarModule.searchObj.element.value.trim() === "" && this.gridObj) {
        this.parent.searchedItems = [];
        if (!this.parent.isFiltered) {
          this.removePathColumn(false);
        } else {
          this.updatePathColumn();
        }
      }
      removeBlur(this.parent);
      if (this.parent.view === "Details") {
        this.isInteracted = false;
        showSpinner(this.parent.element);
        this.parent.setProperties({ selectedItems: [] }, true);
        this.gridObj.dataSource = getSortedData(this.parent, args.files);
        this.gridObj.freezeRefresh();
        if (this.parent.isReact) {
          this.gridObj.on("reactTemplateRender", this.reactTemplateRender, this);
        }
      }
      this.emptyArgs = args;
    };
    DetailsView2.prototype.updatePathColumn = function() {
      var len = this.gridObj.columns.length;
      var columnData = JSON.parse(JSON.stringify(this.gridObj.columns));
      if (columnData[len - 1].field && columnData[len - 1].field !== "filterPath" && !this.parent.isMobile) {
        var pathColumn2 = {
          field: "filterPath",
          headerText: getLocaleText(this.parent, "Path"),
          minWidth: 180,
          width: "auto"
        };
        this.gridObj.columns.push(pathColumn2);
        this.adjustWidth(this.gridObj.columns, "filterPath");
        this.adjustWidth(this.gridObj.columns, "name");
        this.isColumnRefresh = true;
        this.gridObj.refreshColumns();
      }
    };
    DetailsView2.prototype.checkEmptyDiv = function(args) {
      var items = getSortedData(this.parent, args.files);
      if (items.length === 0 && !isNullOrUndefined(this.element.querySelector("." + GRID_VIEW))) {
        createEmptyElement(this.parent, this.element, args);
      } else if (items.length !== 0 && this.element.querySelector("." + EMPTY)) {
        if (this.element.querySelector("." + GRID_VIEW).querySelector("." + EMPTY)) {
          var emptyDiv = this.element.querySelector("." + GRID_VIEW).querySelector("." + EMPTY);
          this.element.querySelector("." + GRID_VIEW).removeChild(emptyDiv);
        } else {
          this.element.removeChild(this.element.querySelector("." + EMPTY));
        }
      }
    };
    DetailsView2.prototype.onOpenInit = function() {
      if (this.parent.activeModule === "detailsview") {
        var data = this.gridObj.getSelectedRecords()[0];
        this.openContent(data);
      }
    };
    DetailsView2.prototype.DblClickEvents = function(args) {
      this.gridObj.selectRows([args.rowIndex]);
      var data;
      if (args.rowData) {
        data = JSON.parse(JSON.stringify(args.rowData));
        this.openContent(data);
      }
    };
    DetailsView2.prototype.openContent = function(data) {
      var _this = this;
      if (!hasReadAccess(data)) {
        createDeniedDialog(this.parent, data, permissionRead);
        return;
      }
      var eventArgs = { cancel: false, fileDetails: data, module: "DetailsView" };
      this.parent.trigger("fileOpen", eventArgs, function(fileOpenArgs) {
        if (!fileOpenArgs.cancel) {
          var name_2 = getValue("name", data);
          if (getValue("isFile", data)) {
            var icon = fileType(data);
            if (icon === ICON_IMAGE) {
              var imgUrl = getImageUrl(_this.parent, data);
              createImageDialog(_this.parent, name_2, imgUrl);
            }
          } else {
            var val = _this.parent.breadcrumbbarModule.searchObj.element.value;
            if (val === "" && !_this.parent.isFiltered) {
              var id = getValue("id", data);
              _this.parent.oldPath = _this.parent.path;
              var newPath = _this.parent.path + (isNullOrUndefined(id) ? name_2 : id) + "/";
              _this.parent.setProperties({ path: newPath }, true);
              _this.parent.pathNames.push(name_2);
              _this.parent.pathId.push(getValue("_fm_id", data));
              _this.parent.itemData = [data];
              openAction(_this.parent);
            } else {
              openSearchFolder(_this.parent, data);
            }
            _this.parent.isFiltered = false;
          }
          _this.element.focus();
          if (_this.parent.enableVirtualization) {
            _this.parent.element.querySelector("#" + _this.parent.element.id + IMG_DIALOG_ID).focus();
          }
        }
      });
    };
    DetailsView2.prototype.onLayoutChange = function(args) {
      if (this.parent.view === "Details") {
        if (this.parent.enableVirtualization) {
          this.parent.setProperties({ selectedItems: [] }, true);
        }
        if (!this.gridObj) {
          this.render(args);
        } else {
          this.isLoaded = true;
        }
        if (this.parent.isFiltered) {
          this.updatePathColumn();
          this.parent.setProperties({ selectedItems: [] }, true);
        }
        this.gridObj.dataSource = getSortedData(this.parent, args.files);
        this.parent.notify(hideLayout, {});
        this.gridObj.element.classList.remove(DISPLAY_NONE);
        this.isInteracted = false;
        this.gridObj.clearSelection();
        if (this.parent.breadcrumbbarModule.searchObj.element.value.trim() !== "") {
          this.onSearchFiles(args);
        }
        this.adjustHeight();
        if (this.gridObj.sortSettings.columns.length > 0 && this.gridObj.sortSettings.columns[0].field !== this.parent.sortBy) {
          if (this.parent.sortOrder !== "None") {
            this.gridObj.sortColumn(this.parent.sortBy, this.parent.sortOrder);
          }
        }
      }
    };
    DetailsView2.prototype.onSearchFiles = function(args) {
      if (this.parent.view === "Details") {
        this.parent.setProperties({ selectedItems: [] }, true);
        this.parent.notify(selectionChanged, {});
        if (!this.parent.isLayoutChange) {
          this.parent.layoutSelectedItems = [];
        }
        this.updatePathColumn();
        this.parent.searchedItems = args.files;
        this.onPathChanged(args);
      }
    };
    DetailsView2.prototype.removePathColumn = function(isRefresh) {
      var len = this.gridObj.columns.length;
      var columnData = JSON.parse(JSON.stringify(this.gridObj.columns));
      if (columnData[len - 1].field && columnData[len - 1].field === "filterPath") {
        if (this.gridObj.sortSettings.columns[0].field === "filterPath") {
          if (this.parent.sortOrder !== "None") {
            this.gridObj.sortColumn("name", this.parent.sortOrder);
          } else {
            this.gridObj.dataSource = getSortedData(this.parent, this.gridObj.dataSource);
          }
          this.parent.notify(sortByChange, {});
        }
        this.gridObj.columns.pop();
        if (!isRefresh) {
          this.isColumnRefresh = true;
          this.gridObj.refreshColumns();
        }
      }
    };
    DetailsView2.prototype.onFinalizeEnd = function(args) {
      if (this.parent.view !== "Details") {
        return;
      }
      if (!this.gridObj) {
        this.render(args);
      } else {
        this.onPathChanged(args);
      }
    };
    DetailsView2.prototype.onCreateEnd = function(args) {
      if (this.parent.view !== "Details") {
        return;
      }
      this.onPathChanged(args);
    };
    DetailsView2.prototype.onRenameInit = function() {
      if (this.parent.activeModule === "detailsview" && this.parent.selectedItems.length === 1) {
        this.updateRenameData();
      }
    };
    DetailsView2.prototype.onSelectedData = function() {
      if (this.parent.activeModule === "detailsview") {
        this.parent.itemData = this.gridObj.getSelectedRecords();
      }
    };
    DetailsView2.prototype.onDeleteInit = function() {
      if (this.parent.activeModule === "detailsview") {
        Delete(this.parent, this.parent.selectedItems, this.parent.path, "delete");
      }
    };
    DetailsView2.prototype.onDeleteEnd = function(args) {
      if (this.parent.view !== "Details") {
        return;
      }
      this.onPathChanged(args);
      this.parent.setProperties({ selectedItems: [] }, true);
    };
    DetailsView2.prototype.onRefreshEnd = function(args) {
      if (this.parent.view !== "Details") {
        return;
      }
      this.isInteracted = false;
      this.removePathColumn(false);
      this.gridObj.dataSource = getSortedData(this.parent, args.files);
      this.emptyArgs = args;
    };
    DetailsView2.prototype.onHideLayout = function() {
      if (this.parent.view !== "Details" && this.gridObj) {
        this.gridObj.element.classList.add(DISPLAY_NONE);
      }
    };
    DetailsView2.prototype.onSelectAllInit = function() {
      if (this.parent.view === "Details") {
        this.isInteracted = false;
        if (this.parent.allowMultiSelection) {
          this.gridObj.selectionModule.selectRowsByRange(0, this.gridObj.getRows().length);
        } else {
          this.gridObj.selectRow(this.gridObj.getRows().length - 1);
        }
        this.isInteracted = true;
        this.interaction = true;
      }
    };
    DetailsView2.prototype.onClearAllInit = function() {
      if (this.parent.view === "Details") {
        this.removeSelection();
        this.interaction = true;
      }
    };
    DetailsView2.prototype.onSelectionChanged = function() {
      removeClass([this.element], HEADER_CHECK);
      if (this.parent.selectedItems.length > 0) {
        addClass([this.element], HEADER_CHECK);
      }
    };
    DetailsView2.prototype.onLayoutRefresh = function() {
      if (this.parent.view !== "Details") {
        return;
      }
      this.adjustHeight();
    };
    DetailsView2.prototype.onBeforeRequest = function() {
      this.isRendered = false;
    };
    DetailsView2.prototype.onAfterRequest = function() {
      this.isRendered = true;
    };
    DetailsView2.prototype.onUpdateSelectionData = function() {
      if (this.parent.view !== "Details") {
        return;
      }
      this.parent.itemData = this.gridObj.getSelectedRecords();
    };
    DetailsView2.prototype.addEventListener = function() {
      this.parent.on(finalizeEnd, this.onFinalizeEnd, this);
      this.parent.on(destroy2, this.destroy, this);
      this.parent.on(layoutChange, this.onLayoutChange, this);
      this.parent.on(pathChanged, this.onPathChanged, this);
      this.parent.on(createEnd, this.onCreateEnd, this);
      this.parent.on(dropInit, this.onDropInit, this);
      this.parent.on(detailsInit, this.onDetailsInit, this);
      this.parent.on(refreshEnd, this.onRefreshEnd, this);
      this.parent.on(search, this.onSearchFiles, this);
      this.parent.on(methodCall, this.onMethodCall, this);
      this.parent.on(actionFailure, this.onActionFailure, this);
      this.parent.on(modelChanged2, this.onPropertyChanged, this);
      this.parent.on(deleteInit, this.onDeleteInit, this);
      this.parent.on(deleteEnd, this.onDeleteEnd, this);
      this.parent.on(selectedData, this.onSelectedData, this);
      this.parent.on(renameInit, this.onRenameInit, this);
      this.parent.on(renameEnd, this.onPathChanged, this);
      this.parent.on(openInit, this.onOpenInit, this);
      this.parent.on(sortColumn, this.onSortColumn, this);
      this.parent.on(openEnd, this.onPathChanged, this);
      this.parent.on(filterEnd, this.onPathChanged, this);
      this.parent.on(pasteInit, this.onPasteInit, this);
      this.parent.on(hideLayout, this.onHideLayout, this);
      this.parent.on(selectAllInit, this.onSelectAllInit, this);
      this.parent.on(clearAllInit, this.onClearAllInit, this);
      this.parent.on(pathColumn, this.onPathColumn, this);
      this.parent.on(selectionChanged, this.onSelectionChanged, this);
      this.parent.on(beforeRequest, this.onBeforeRequest, this);
      this.parent.on(afterRequest, this.onAfterRequest, this);
      this.parent.on(pasteEnd, this.onpasteEnd, this);
      this.parent.on(cutCopyInit, this.oncutCopyInit, this);
      this.parent.on(menuItemData, this.onMenuItemData, this);
      this.parent.on(resizeEnd, this.onDetailsResizeHandler, this);
      this.parent.on(splitterResize, this.onDetailsResize, this);
      this.parent.on(layoutRefresh, this.onLayoutRefresh, this);
      this.parent.on(dropPath, this.onDropPath, this);
      this.parent.on(updateSelectionData, this.onUpdateSelectionData, this);
    };
    DetailsView2.prototype.removeEventListener = function() {
      this.parent.off(finalizeEnd, this.onFinalizeEnd);
      this.parent.off(destroy2, this.destroy);
      this.parent.off(layoutChange, this.onLayoutChange);
      this.parent.off(pathChanged, this.onPathChanged);
      this.parent.off(pasteInit, this.onPasteInit);
      this.parent.off(createEnd, this.onCreateEnd);
      this.parent.off(refreshEnd, this.onRefreshEnd);
      this.parent.off(search, this.onSearchFiles);
      this.parent.off(methodCall, this.onMethodCall);
      this.parent.off(actionFailure, this.onActionFailure);
      this.parent.off(modelChanged2, this.onPropertyChanged);
      this.parent.off(renameInit, this.onRenameInit);
      this.parent.off(renameEnd, this.onPathChanged);
      this.parent.off(filterEnd, this.onPathChanged);
      this.parent.off(openInit, this.onOpenInit);
      this.parent.off(sortColumn, this.onSortColumn);
      this.parent.off(openEnd, this.onPathChanged);
      this.parent.off(hideLayout, this.onHideLayout);
      this.parent.off(selectAllInit, this.onSelectAllInit);
      this.parent.off(clearAllInit, this.onClearAllInit);
      this.parent.off(deleteInit, this.onDeleteInit);
      this.parent.off(deleteEnd, this.onDeleteEnd);
      this.parent.off(pathColumn, this.onPathColumn);
      this.parent.off(selectionChanged, this.onSelectionChanged);
      this.parent.off(beforeRequest, this.onBeforeRequest);
      this.parent.off(afterRequest, this.onAfterRequest);
      this.parent.off(pasteEnd, this.onpasteEnd);
      this.parent.off(cutCopyInit, this.oncutCopyInit);
      this.parent.off(dropInit, this.onDropInit);
      this.parent.off(selectedData, this.onSelectedData);
      this.parent.off(detailsInit, this.onDetailsInit);
      this.parent.off(menuItemData, this.onMenuItemData);
      this.parent.off(resizeEnd, this.onDetailsResizeHandler);
      this.parent.off(splitterResize, this.onDetailsResize);
      this.parent.off(layoutRefresh, this.onLayoutRefresh);
      this.parent.off(dropPath, this.onDropPath);
      this.parent.off(updateSelectionData, this.onUpdateSelectionData);
    };
    DetailsView2.prototype.onActionFailure = function() {
      this.interaction = true;
    };
    DetailsView2.prototype.onMenuItemData = function(args) {
      if (this.parent.activeModule === this.getModuleName()) {
        this.parent.itemData = [this.gridObj.getRowInfo(args.target).rowData];
      }
    };
    DetailsView2.prototype.onPasteInit = function() {
      if (this.parent.activeModule === this.getModuleName()) {
        this.parent.itemData = this.parent.folderPath !== "" ? this.gridObj.getSelectedRecords() : [getPathObject(this.parent)];
      }
    };
    DetailsView2.prototype.onDetailsInit = function() {
      if (this.parent.activeModule === this.getModuleName()) {
        if (this.parent.selectedItems.length !== 0) {
          this.parent.itemData = this.gridObj.getSelectedRecords();
        } else {
          this.parent.itemData = [getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent)];
        }
      }
    };
    DetailsView2.prototype.dragHelper = function(args) {
      var dragTarget = args.sender.target;
      var dragLi = dragTarget.closest("tr.e-row");
      if (!dragLi) {
        return null;
      }
      var name;
      if (dragLi.getElementsByClassName("e-fe-text")[0]) {
        name = dragLi.getElementsByClassName("e-fe-text")[0].innerText;
      } else if (dragLi.getElementsByClassName("e-rowcell e-templatecell")[0].nextElementSibling) {
        name = dragLi.getElementsByClassName("e-rowcell e-templatecell")[0].nextElementSibling.innerText;
      }
      if (dragLi && !dragLi.querySelector(".e-active")) {
        this.selectRecords([name]);
      }
      getModule(this.parent, dragLi);
      this.parent.activeElements = [];
      this.parent.dragData = [];
      this.parent.dragData = this.gridObj.getSelectedRecords();
      var dragRow;
      if (this.parent.dragData.length === 0 && dragLi) {
        dragRow = this.gridObj.getRowInfo(dragLi);
      }
      if (dragRow) {
        this.parent.dragData.push(dragRow.rowData);
      }
      this.parent.dragPath = this.parent.path;
      this.parent.activeElements = this.gridObj.getSelectedRows();
      createVirtualDragElement(this.parent);
      return this.parent.virtualDragElement;
    };
    DetailsView2.prototype.onDetailsResize = function() {
      if (this.parent.view === "Details" && !this.parent.isMobile && !isNullOrUndefined(this.gridObj)) {
        var gridHeader = this.gridObj.getHeaderContent().querySelector(".e-headercontent");
        var gridHeaderColGroup = gridHeader.firstChild.childNodes[0];
        var gridContentColGroup = this.gridObj.getContent().querySelector(".e-content .e-table").children[0];
        var gridHeaderColNames = this.gridObj.getColumns();
        for (var i = 0; i < gridHeaderColNames.length; i++) {
          if (!this.isNameWidth && gridHeaderColNames[i].field === "name" || gridHeaderColNames[i].field === "filterPath") {
            if (this.parent.breadcrumbbarModule.searchObj.element.value === "" && !this.parent.isFiltered) {
              if (this.element.clientWidth <= 500) {
                gridHeaderColGroup.children[i].setAttribute("style", "width: 120px");
                gridContentColGroup.children[i].setAttribute("style", "width: 120px");
              } else if (this.element.clientWidth > 500) {
                gridHeaderColGroup.children[i].setAttribute("style", "width: auto");
                gridContentColGroup.children[i].setAttribute("style", "width: auto");
              }
            } else {
              if (this.element.clientWidth <= 680) {
                if (gridHeaderColNames[i].field === "name") {
                  gridHeaderColGroup.children[i].setAttribute("style", "width: 120px");
                  gridContentColGroup.children[i].setAttribute("style", "width: 120px");
                } else {
                  gridHeaderColGroup.children[i].setAttribute("style", "width: 180px");
                  gridContentColGroup.children[i].setAttribute("style", "width: 180px");
                }
              } else if (this.element.clientWidth > 680) {
                gridHeaderColGroup.children[i].setAttribute("style", "width: auto");
                gridContentColGroup.children[i].setAttribute("style", "width: auto");
              }
            }
          }
        }
      }
    };
    DetailsView2.prototype.onDetailsResizeHandler = function() {
      this.onDetailsResize();
      if (this.parent.view === "Details" && !this.parent.isMobile && !isNullOrUndefined(this.gridObj)) {
        this.adjustHeight();
      }
    };
    DetailsView2.prototype.createDragObj = function() {
      var _this = this;
      if (!this.parent.isMobile && this.gridObj) {
        if (this.parent.allowDragAndDrop) {
          if (this.dragObj) {
            this.dragObj.destroy();
          }
          this.dragObj = new Draggable(this.gridObj.element, {
            cursorAt: this.parent.dragCursorPosition,
            distance: 5,
            enableTailMode: true,
            dragArea: this.parent.element,
            dragTarget: "." + ROW,
            drag: draggingHandler.bind(this, this.parent),
            dragStart: function(args) {
              dragStartHandler(_this.parent, args, _this.dragObj);
            },
            dragStop: dragStopHandler.bind(this, this.parent),
            enableAutoScroll: true,
            helper: this.dragHelper.bind(this)
          });
        } else if (!this.parent.allowDragAndDrop && this.dragObj) {
          this.dragObj.destroy();
        }
      }
    };
    DetailsView2.prototype.onDropInit = function(args) {
      if (this.parent.targetModule === this.getModuleName()) {
        var cwdData = getValue(this.parent.pathId[this.parent.pathId.length - 1], this.parent.feParent);
        if (!args.target.closest("tr")) {
          this.parent.dropPath = this.parent.path;
          this.parent.dropData = cwdData;
        } else {
          var info = null;
          info = this.gridObj.getRowInfo(args.target).rowData;
          this.parent.dropPath = info.isFile ? this.parent.path : getFullPath(this.parent, info, this.parent.path);
          this.parent.dropData = info.isFile ? cwdData : info;
        }
      }
    };
    DetailsView2.prototype.oncutCopyInit = function() {
      if (this.parent.activeModule === this.getModuleName()) {
        this.parent.activeRecords = this.gridObj.getSelectedRecords();
        this.parent.activeElements = this.gridObj.getSelectedRows();
      }
    };
    DetailsView2.prototype.onpasteEnd = function(args) {
      if (this.parent.view === "Details") {
        this.isPasteOperation = true;
        if (this.parent.path === this.parent.destinationPath || this.parent.path === getDirectoryPath(this.parent, args)) {
          this.onPathChanged(args);
        }
      }
    };
    DetailsView2.prototype.onDropPath = function(args) {
      if (this.parent.view === "Details") {
        this.isPasteOperation = true;
        this.onPathChanged(args);
      }
    };
    DetailsView2.prototype.getModuleName = function() {
      return "detailsview";
    };
    DetailsView2.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.removeEventListener();
      if (this.gridObj) {
        if (this.parent.isReact) {
          this.gridObj.off("reactTemplateRender", this.reactTemplateRender);
        }
        this.unWireEvents();
        this.gridObj.destroy();
      }
    };
    DetailsView2.prototype.updateType = function(item) {
      var folder = select("." + FOLDER, item);
      this.parent.isFile = isNullOrUndefined(folder) ? true : false;
    };
    DetailsView2.prototype.onSelection = function(action, args) {
      var eventArgs = {
        action,
        fileDetails: args.data,
        isInteracted: this.interaction,
        cancel: false,
        target: args.target
      };
      this.parent.trigger("fileSelection", eventArgs);
      args.cancel = eventArgs.cancel;
    };
    DetailsView2.prototype.onSelected = function(args) {
      this.parent.activeModule = "detailsview";
      if (!this.parent.isLayoutChange || this.parent.isFiltered) {
        this.selectedRecords();
      }
      this.parent.notify(selectionChanged, {});
      if (this.gridObj.getSelectedRowIndexes().length === 1) {
        this.firstItemIndex = this.gridObj.selectedRowIndex;
      }
      this.gridObj.element.setAttribute("tabindex", "-1");
      this.triggerSelect("select", args);
      var item = this.gridObj.getRowByIndex(this.gridObj.selectedRowIndex);
      this.updateType(item);
      if (!isNullOrUndefined(item) && !isNullOrUndefined(item.querySelector(".e-checkselect"))) {
        if (this.gridObj.getSelectedRowIndexes().length !== 1) {
          var lastItemIndex = this.gridObj.getSelectedRowIndexes()[this.gridObj.getSelectedRowIndexes().length - 2];
          var lastItem = this.gridObj.getRowByIndex(lastItemIndex);
          lastItem.querySelector(".e-checkselect").setAttribute("tabindex", "-1");
        }
        item.querySelector(".e-rowcell.e-fe-checkbox").removeAttribute("tabindex");
      }
      if (!isNullOrUndefined(this.gridObj) && !isNullOrUndefined(this.gridObj.element.querySelector(".e-checkselectall"))) {
        this.gridObj.element.querySelector(".e-checkselectall").setAttribute("tabindex", "-1");
      }
      var rows = this.gridObj.getSelectedRowIndexes();
      if (!this.parent.allowMultiSelection) {
        for (var i = 0; i < rows.length; i++) {
          if (rows[i] === this.gridObj.selectedRowIndex) {
            this.gridObj.getRowByIndex(rows[i]).setAttribute("tabindex", "0");
          } else {
            this.gridObj.getRowByIndex(rows[i]).removeAttribute("tabindex");
          }
        }
      }
      var len = rows.length;
      if (this.parent.enableVirtualization) {
        this.parent.currentItemText = getValue("name", args.data);
      } else if (len > 0) {
        var data = this.gridObj.getRowsObject()[rows[len - 1]].data;
        this.parent.currentItemText = getValue("name", data);
      }
      var indexes = getValue("rowIndexes", args);
      var multiSelect = getValue("enableSelectMultiTouch", this.gridObj.selectionModule);
      if (this.parent.isDevice && isNullOrUndefined(indexes) && args.target && !multiSelect && !args.target.closest(".e-headercell")) {
        this.parent.isFile = getValue("isFile", args.data);
        if (!this.parent.isFile) {
          this.openContent(args.data);
        }
      }
      this.parent.visitedItem = args.row;
      if (!this.parent.enableVirtualization || !args.isHeaderCheckboxClicked) {
        if (this.parent.allowMultiSelection && !isNullOrUndefined(item) && !isNullOrUndefined(item.querySelector(".e-checkselect"))) {
          var checkItem = item.querySelector(".e-checkselect");
          checkItem.focus();
        }
        this.addFocus(this.gridObj.selectedRowIndex);
      }
      if (!this.parent.isLayoutChange) {
        this.isInteracted = true;
      }
    };
    DetailsView2.prototype.onPathColumn = function() {
      if (this.parent.view === "Details" && !isNullOrUndefined(this.gridObj)) {
        if (this.parent.breadcrumbbarModule.searchObj.element.value === "" && !this.parent.isFiltered) {
          this.removePathColumn(false);
        }
      }
    };
    DetailsView2.prototype.selectedRecords = function() {
      this.parent.setProperties({ selectedItems: [] }, true);
      var selectedRecords = this.gridSelectNodes();
      var selectSize = 0;
      while (selectSize < selectedRecords.length) {
        var record = selectedRecords[selectSize];
        var name_3 = getItemName(this.parent, record);
        this.parent.selectedItems.push(name_3);
        selectSize++;
      }
      this.parent.setProperties({ selectedItems: this.parent.selectedItems }, true);
    };
    DetailsView2.prototype.onDeSelection = function(args) {
      if (!this.parent.allowMultiSelection && isNullOrUndefined(args.data)) {
        this.gridObj.getRowByIndex(args.rowIndex).removeAttribute("tabindex");
      } else if (this.gridObj.getSelectedRowIndexes().length > 1) {
        var lastItemIndex = this.gridObj.getSelectedRowIndexes()[this.gridObj.getSelectedRowIndexes().length - 2];
        this.gridObj.getRowByIndex(lastItemIndex).querySelector(".e-checkselect").removeAttribute("tabindex");
      }
      if (this.gridObj.selectedRowIndex === -1) {
        this.gridObj.element.setAttribute("tabindex", "0");
      }
      if (!this.isInteracted) {
        this.isInteracted = true;
        return;
      }
      this.selectedRecords();
      if (this.parent.selectedItems.length === 0) {
        setValue("enableSelectMultiTouch", false, this.gridObj.selectionModule);
        removeClass([this.parent.element], MULTI_SELECT);
      }
      this.parent.notify(selectionChanged, {});
      this.triggerSelect("unselect", args);
      this.parent.visitedItem = null;
    };
    DetailsView2.prototype.triggerSelect = function(action, args) {
      var eventArgs = { action, fileDetails: args.data, isInteracted: this.interaction };
      this.parent.trigger("fileSelect", eventArgs);
      this.interaction = true;
    };
    DetailsView2.prototype.wireEvents = function() {
      this.wireClickEvent(true);
      this.keyboardModule = new KeyboardEvents(this.gridObj.element, {
        keyAction: this.keyupHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keyup"
      });
      this.keyboardDownModule = new KeyboardEvents(this.element, {
        keyAction: this.keydownHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      EventHandler.add(this.gridObj.element, "blur", this.removeFocus, this);
    };
    DetailsView2.prototype.unWireEvents = function() {
      this.wireClickEvent(false);
      this.keyboardModule.destroy();
      this.keyboardDownModule.destroy();
      EventHandler.remove(this.gridObj.element, "blur", this.removeFocus);
    };
    DetailsView2.prototype.wireClickEvent = function(toBind) {
      if (toBind) {
        var proxy_1 = this;
        var ele = this.gridObj.getContent();
        this.clickObj = new Touch(ele, {
          tap: function(eve) {
            if (eve.tapCount === 1 && eve.originalEvent.target.classList.contains("e-content")) {
              proxy_1.onClearAllInit();
            }
          },
          tapHold: function(e) {
            if (proxy_1.parent.isDevice) {
              e.originalEvent.preventDefault();
              if (proxy_1.parent.allowMultiSelection) {
                setValue("enableSelectMultiTouch", proxy_1.parent.allowMultiSelection, proxy_1.gridObj.selectionModule);
                addClass([proxy_1.parent.element], MULTI_SELECT);
              }
              var target = e.originalEvent.target;
              if (target) {
                var row = closest(target, "." + ROW);
                var index = proxy_1.gridObj.getRows().indexOf(row);
                proxy_1.gridObj.selectRow(index);
              }
            }
          }
        });
      } else {
        if (this.clickObj) {
          this.clickObj.destroy();
        }
      }
    };
    DetailsView2.prototype.removeSelection = function() {
      removeClass([this.parent.element], MULTI_SELECT);
      this.gridObj.clearSelection();
      this.parent.setProperties({ selectedItems: [] }, true);
      this.parent.notify(selectionChanged, {});
      if (this.gridObj.selectedRowIndex === -1) {
        this.startIndex = null;
      }
      this.isInteracted = true;
    };
    DetailsView2.prototype.removeFocus = function() {
      this.addFocus(null);
    };
    DetailsView2.prototype.getFocusedItemIndex = function() {
      return !isNullOrUndefined(this.getFocusedItem()) ? parseInt(this.getFocusedItem().getAttribute("data-rowindex"), 10) : null;
    };
    DetailsView2.prototype.keydownHandler = function(e) {
      if (!this.isRendered) {
        return;
      }
      switch (e.action) {
        case "end":
        case "home":
        case "space":
        case "ctrlSpace":
        case "shiftSpace":
        case "csSpace":
        case "ctrlA":
        case "enter":
        case "altEnter":
        case "ctrlEnd":
        case "shiftEnd":
        case "csEnd":
        case "ctrlHome":
        case "shiftHome":
        case "csHome":
        case "ctrlDown":
        case "shiftDown":
        case "csDown":
        case "ctrlLeft":
        case "shiftLeft":
        case "csLeft":
        case "esc":
        case "del":
        case "shiftdel":
        case "ctrlC":
        case "ctrlV":
        case "ctrlX":
        case "f2":
        case "moveDown":
        case "moveUp":
        case "ctrlD":
          e.preventDefault();
          break;
        default:
          break;
      }
    };
    DetailsView2.prototype.keyupHandler = function(e) {
      if (!this.isRendered) {
        return;
      }
      e.preventDefault();
      var action = e.action;
      var gridItems = getSortedData(this.parent, this.gridObj.dataSource);
      var gridLength = gridItems.length;
      var focItem = this.getFocusedItem();
      var focIndex = this.getFocusedItemIndex();
      var selIndex = this.gridObj.selectedRowIndex;
      var selRowIndeces = this.gridObj.getSelectedRowIndexes();
      var rowData;
      var firstItem;
      var lastItem;
      switch (action) {
        case "altEnter":
          this.parent.notify(detailsInit, {});
          GetDetails(this.parent, this.parent.selectedItems, this.parent.path, "details");
          break;
        case "esc":
          removeActive(this.parent);
          break;
        case "del":
        case "shiftdel":
          this.performDelete();
          break;
        case "enter":
          if (this.gridObj.selectedRowIndex === -1) {
            break;
          }
          rowData = this.gridObj.getRowsObject()[this.gridObj.selectedRowIndex].data;
          if (rowData) {
            var data = JSON.parse(JSON.stringify(rowData));
            this.openContent(data);
          }
          break;
        case "ctrlC":
          copyFiles(this.parent);
          break;
        case "ctrlV":
          this.parent.folderPath = "";
          pasteHandler(this.parent);
          break;
        case "ctrlX":
          cutFiles(this.parent);
          break;
        case "ctrlD":
          this.doDownload();
          break;
        case "f2":
          this.performRename();
          break;
        case "ctrlA":
          if (!isNullOrUndefined(gridItems[0]) && this.parent.allowMultiSelection) {
            var cnTable = this.gridObj.getContent().querySelector(".e-content");
            var crtSrlPos = cnTable.scrollTop;
            var crtFocusIndex = this.gridObj.selectedRowIndex;
            this.gridObj.selectionModule.selectRowsByRange(0, gridItems.length - 1);
            cnTable.scrollTop = crtSrlPos;
            if (crtFocusIndex !== -1) {
              this.addFocus(crtFocusIndex);
            }
          }
          break;
        case "ctrlHome":
        case "tab":
          if (!isNullOrUndefined(gridItems[0])) {
            if (!this.parent.allowMultiSelection && e.action === "ctrlHome") {
              this.gridObj.selectRow(0);
            } else if (this.gridObj.selectedRowIndex !== -1 && e.action === "tab") {
              return;
            } else if (!this.actionDivert) {
              this.addHeaderFocus();
              this.actionDivert = true;
            } else {
              this.addFocus(0);
              this.actionDivert = false;
            }
          }
          break;
        case "ctrlEnd":
          if (!isNullOrUndefined(gridItems[0])) {
            if (!this.parent.allowMultiSelection) {
              this.gridObj.selectRow(gridLength - 1);
            } else {
              this.addFocus(gridLength - 1);
            }
          }
          break;
        case "shiftHome":
        case "shiftEnd":
        case "csHome":
        case "csEnd":
          if (!this.parent.allowMultiSelection) {
            this.gridObj.selectRow(e.action === "shiftHome" || e.action === "csHome" ? 0 : gridItems.length - 1);
          } else {
            if (!isNullOrUndefined(gridItems[0])) {
              if (!isNullOrUndefined(selIndex) && selIndex !== -1) {
                this.checkRowsKey(gridItems, selIndex, null, e);
              } else {
                if (e.action === "csHome" || e.action === "shiftHome") {
                  this.gridObj.selectRow(0);
                } else {
                  this.gridObj.selectionModule.selectRowsByRange(0, gridItems.length - 1);
                }
              }
            }
          }
          break;
        case "space":
        case "csSpace":
        case "shiftSpace":
        case "ctrlSpace":
          this.spaceSelection(selRowIndeces, focIndex, selIndex, e);
          break;
        case "csUp":
        case "csDown":
        case "shiftUp":
        case "shiftDown":
          this.shiftMoveMethod(gridItems, selIndex, focIndex, selRowIndeces, e);
          break;
        case "ctrlUp":
        case "ctrlDown":
          if (!this.parent.allowMultiSelection) {
            this.moveFunction(gridItems, e, selIndex);
          } else {
            this.ctrlMoveFunction(gridItems, e, selIndex);
          }
          break;
        case "home":
          firstItem = [getValue(this.parent.hasId ? "id" : "name", gridItems[0])];
          this.parent.setProperties({ selectedItems: firstItem }, true);
          this.selectRecords(firstItem);
          break;
        case "moveUp":
        case "moveDown":
          this.moveFunction(gridItems, e, selIndex);
          break;
        case "end":
          lastItem = [getValue(this.parent.hasId ? "id" : "name", gridItems[gridLength - 1])];
          this.parent.setProperties({ selectedItems: lastItem }, true);
          this.selectRecords(lastItem);
          break;
      }
    };
    DetailsView2.prototype.gridSelectNodes = function() {
      return this.gridObj.getSelectedRecords();
    };
    DetailsView2.prototype.doDownload = function() {
      if (this.parent.selectedItems.length !== 0) {
        this.parent.itemData = this.gridObj.getSelectedRecords();
        var items = this.parent.itemData;
        for (var i = 0; i < items.length; i++) {
          if (!hasDownloadAccess(items[i])) {
            createDeniedDialog(this.parent, items[i], permissionDownload);
            return;
          }
        }
        Download(this.parent, this.parent.path, this.parent.selectedItems);
      }
    };
    DetailsView2.prototype.performDelete = function() {
      if (this.parent.selectedItems && this.parent.selectedItems.length > 0) {
        this.parent.itemData = this.gridObj.getSelectedRecords();
        var items = this.parent.itemData;
        for (var i = 0; i < items.length; i++) {
          if (!hasEditAccess(items[i])) {
            createDeniedDialog(this.parent, items[i], permissionEdit);
            return;
          }
        }
        createDialog(this.parent, "Delete");
      }
    };
    DetailsView2.prototype.performRename = function() {
      if (this.parent.selectedItems.length === 1) {
        this.updateRenameData();
        doRename(this.parent);
      }
    };
    DetailsView2.prototype.updateRenameData = function() {
      var data = this.gridSelectNodes()[0];
      updateRenamingData(this.parent, data);
    };
    DetailsView2.prototype.shiftMoveMethod = function(gridItems, selIndex, focIndex, selRowIndeces, e) {
      if (!this.parent.allowMultiSelection) {
        this.moveFunction(gridItems, e, selIndex);
      } else {
        if (selIndex === -1 && (e.action === "csUp" || e.action === "csDown")) {
          this.ctrlMoveFunction(gridItems, e, selIndex);
        } else if (selIndex !== -1 && focIndex !== selIndex && !((e.action === "csUp" || e.action === "csDown") && this.isSelected(selRowIndeces, focIndex))) {
          this.shiftSelectFocusItem(selIndex, focIndex, selRowIndeces, e);
        } else {
          this.shiftSelectedItem(selIndex, selRowIndeces, gridItems, e);
        }
      }
    };
    DetailsView2.prototype.moveFunction = function(selectedItems, e, rowIndex) {
      if (!isNullOrUndefined(this.getFocusedItem()) && this.parent.allowMultiSelection) {
        if (e.action === "moveDown") {
          this.gridObj.selectRow(this.getFocusedItemIndex() + 1);
        } else {
          this.gridObj.selectRow(this.getFocusedItemIndex() - 1);
        }
      } else if (!isNullOrUndefined(rowIndex) && rowIndex !== -1) {
        if (e.action === "moveDown" || e.action === "ctrlDown" || e.action === "shiftDown" || e.action === "csDown") {
          this.gridObj.selectRow(rowIndex + (rowIndex !== selectedItems.length - 1 ? 1 : 0));
        } else {
          this.gridObj.selectRow(rowIndex - (rowIndex !== 0 ? 1 : 0));
        }
      } else {
        if (!isNullOrUndefined(selectedItems[0])) {
          this.gridObj.selectRow(0);
        }
      }
    };
    DetailsView2.prototype.spaceSelection = function(selRowIndeces, focIndex, selIndex, e) {
      if (!this.isSelected(selRowIndeces, focIndex) && selIndex !== -1 && (e.action === "shiftSpace" || e.action === "csSpace")) {
        if (focIndex < selIndex) {
          this.gridObj.selectionModule.selectRowsByRange(focIndex, selIndex);
        } else {
          this.gridObj.selectionModule.selectRowsByRange(selIndex, focIndex);
        }
      } else if (!isNullOrUndefined(this.getFocusedItem()) && focIndex !== selIndex) {
        selRowIndeces.push(this.getFocusedItemIndex());
        this.gridObj.selectRows(selRowIndeces);
      } else if (selIndex !== -1 && e.action === "ctrlSpace" && this.parent.allowMultiSelection) {
        var lItem = selIndex;
        selRowIndeces.pop();
        this.gridObj.selectRows(selRowIndeces);
        this.addFocus(lItem);
      } else if (e.action === "shiftSpace") {
        this.gridObj.selectRow(selIndex);
      }
    };
    DetailsView2.prototype.ctrlMoveFunction = function(items, e, rowIndex) {
      var nextItem;
      if (!isNullOrUndefined(this.getFocusedItem())) {
        var nextIndex = this.getFocusedItemIndex();
        nextItem = e.action === "ctrlDown" || e.action === "csDown" ? nextIndex + (nextIndex < items.length - 1 ? 1 : 0) : nextIndex - (nextIndex < 1 ? 0 : 1);
      } else if (!isNullOrUndefined(rowIndex) && rowIndex !== -1) {
        nextItem = e.action === "ctrlDown" || e.action === "csDown" ? rowIndex + (rowIndex < items.length ? 1 : 0) : rowIndex - (rowIndex < 1 ? 0 : 1);
      } else {
        if (!isNullOrUndefined(items[0])) {
          nextItem = 0;
        }
      }
      this.addFocus(nextItem);
    };
    DetailsView2.prototype.checkRowsKey = function(items, indexValue, focIndex, e) {
      if (this.gridObj.checkAllRows === "Uncheck" || this.gridObj.checkAllRows === "Intermediate") {
        if (e.action !== "csHome" && e.action !== "csEnd") {
          if (isNullOrUndefined(this.startIndex) && this.firstItemIndex !== indexValue) {
            this.firstItemIndex = indexValue;
          }
          if (e.action === "shiftEnd") {
            this.gridObj.selectionModule.selectRowsByRange(this.firstItemIndex, items.length - 1);
          } else {
            this.gridObj.selectionModule.selectRowsByRange(0, this.firstItemIndex);
          }
          this.startIndex = indexValue;
        } else {
          if (e.action === "csEnd") {
            this.gridObj.selectRows(this.InnerItems(isNullOrUndefined(indexValue) ? 0 : indexValue, isNullOrUndefined(focIndex) ? items.length - 1 : focIndex, e));
          } else {
            if (isNullOrUndefined(indexValue)) {
              this.gridObj.selectRow(0);
            } else {
              this.gridObj.selectRows(this.InnerItems(isNullOrUndefined(focIndex) ? 0 : focIndex, indexValue, e));
            }
          }
        }
      } else {
        this.gridObj.selectionModule.selectRow(e.action === "shiftHome" || e.action === "csHome" ? 0 : items.length - 1);
      }
    };
    DetailsView2.prototype.InnerItems = function(fItem, lItem, e) {
      var itemArr = this.gridObj.getSelectedRowIndexes();
      if (e.action === "csEnd") {
        for (var i = fItem + 1; i <= lItem; i++) {
          itemArr.push(i);
        }
      } else {
        for (var i = lItem - 1; fItem <= i; i--) {
          itemArr.push(i);
        }
      }
      return itemArr;
    };
    DetailsView2.prototype.shiftSelectFocusItem = function(selIndex, fIndex, selRowIndexes, e) {
      var lItem = fIndex + (e.action === "shiftDown" || e.action === "csDown" ? 1 : -1);
      var fItem = isNullOrUndefined(this.startIndex) ? selIndex : selRowIndexes[0];
      if (fItem === lItem) {
        this.gridObj.selectRow(fItem);
      } else {
        if (fItem < lItem) {
          if (e.action === "shiftDown" || e.action === "csDown") {
            this.gridObj.selectionModule.selectRowsByRange(fItem, lItem);
          } else {
            this.gridObj.selectionModule.selectRowsByRange(lItem, fItem);
          }
        } else if (e.action === "shiftDown" || e.action === "csDown") {
          this.gridObj.selectionModule.selectRowsByRange(lItem, fItem);
        } else {
          this.gridObj.selectionModule.selectRowsByRange(fItem, lItem);
        }
      }
      this.startIndex = this.gridObj.selectedRowIndex;
    };
    DetailsView2.prototype.addFocus = function(item) {
      var fItem = this.getFocusedItem();
      var itemElement = this.gridObj.getRowByIndex(item);
      if (fItem) {
        fItem.removeAttribute("tabindex");
        removeClass([fItem], [FOCUS, FOCUSED]);
      }
      if (!isNullOrUndefined(itemElement)) {
        this.gridObj.element.setAttribute("tabindex", "-1");
        itemElement.setAttribute("tabindex", "0");
        itemElement.focus();
        addClass([itemElement], [FOCUS, FOCUSED]);
      }
    };
    DetailsView2.prototype.addHeaderFocus = function() {
      var treeFocus = select(".e-row", this.element);
      this.gridObj.element.setAttribute("tabindex", "-1");
      var nameFocus = select("th.e-fe-grid-name", this.element);
      nameFocus.setAttribute("tabindex", "0");
      nameFocus.focus();
      addClass([nameFocus], [FOCUS, FOCUSED]);
      treeFocus.setAttribute("tabindex", "0");
      if (treeFocus.tabIndex === 0 && nameFocus.tabIndex === 0) {
        removeClass([treeFocus], [FOCUS, FOCUSED]);
      }
    };
    DetailsView2.prototype.getFocusedItem = function() {
      return select("." + FOCUSED, this.element);
    };
    DetailsView2.prototype.isSelected = function(selRowIndexes, focIndex) {
      var check = false;
      for (var i = 0; i <= selRowIndexes.length - 1; i++) {
        if (selRowIndexes[i] === focIndex) {
          check = true;
          break;
        }
      }
      return check;
    };
    DetailsView2.prototype.shiftSelectedItem = function(selIndex, selRowIndexes, gridItems, e) {
      if (selIndex === -1) {
        this.gridObj.selectRow(0);
      } else {
        if (isNullOrUndefined(this.startIndex) && e.shiftKey) {
          this.startIndex = this.gridObj.selectedRowIndex;
          this.gridObj.selectRows([selIndex, e.action === "shiftDown" || e.action === "csDown" ? selIndex + (selIndex !== gridItems.length - 1 ? 1 : 0) : selIndex - (selIndex !== 0 ? 1 : 0)]);
        } else {
          if (e.action === "shiftDown" || e.action === "shiftUp") {
            if (e.action === "shiftDown" && selRowIndexes.indexOf(selIndex + 1) === -1) {
              if (selIndex !== gridItems.length - 1) {
                selRowIndexes.push(selIndex + 1);
              }
            } else if (e.action === "shiftUp" && selRowIndexes.indexOf(selIndex - 1) === -1) {
              if (selIndex !== 0) {
                selRowIndexes.push(selIndex - 1);
              }
            } else {
              selRowIndexes.pop();
            }
            this.gridObj.selectRows(selRowIndexes);
          } else {
            if (e.action === "csDown") {
              if (!this.isSelected(selRowIndexes, this.getFocusedItemIndex() + 1)) {
                selRowIndexes.push(this.getFocusedItemIndex() + 1);
                this.gridObj.selectRows(selRowIndexes);
              } else {
                this.addFocus(this.getFocusedItemIndex() + 1);
              }
            } else if (!this.isSelected(selRowIndexes, this.getFocusedItemIndex() - 1)) {
              selRowIndexes.push(this.getFocusedItemIndex() - 1);
              this.gridObj.selectRows(selRowIndexes);
            } else {
              this.addFocus(this.getFocusedItemIndex() - 1);
            }
          }
        }
      }
    };
    DetailsView2.prototype.onMethodCall = function(e) {
      if (this.parent.view !== "Details") {
        return;
      }
      var action = getValue("action", e);
      switch (action) {
        case "deleteFiles":
          this.deleteFiles(getValue("ids", e));
          break;
        case "downloadFiles":
          this.downloadFiles(getValue("ids", e));
          break;
        case "openFile":
          this.openFile(getValue("id", e));
          break;
        case "createFolder":
          this.interaction = false;
          break;
        case "renameFile":
          this.interaction = false;
          this.renameFile(getValue("id", e), getValue("newName", e));
          break;
        case "selectAll":
          this.interaction = false;
          this.onSelectAllInit();
          break;
        case "clearSelection":
          this.interaction = false;
          this.onClearAllInit();
          break;
      }
    };
    DetailsView2.prototype.getRecords = function(nodes) {
      var gridRecords = this.gridObj.getCurrentViewRecords();
      var records = [];
      var hasFilter = this.parent.breadcrumbbarModule.searchObj.element.value !== "" || this.parent.isFiltered ? true : false;
      var filter2 = this.parent.hasId ? "id" : "name";
      if (this.parent.hasId || !hasFilter) {
        for (var i = 0, len = gridRecords.length; i < len; i++) {
          if (nodes.indexOf(getValue(filter2, gridRecords[i])) !== -1) {
            records.push(gridRecords[i]);
          }
        }
      } else {
        for (var i = 0, len = gridRecords.length; i < len; i++) {
          var name_4 = getValue("filterPath", gridRecords[i]) + getValue("name", gridRecords[i]);
          if (nodes.indexOf(name_4) !== -1) {
            records.push(gridRecords[i]);
          }
        }
      }
      return records;
    };
    DetailsView2.prototype.deleteFiles = function(ids) {
      this.parent.activeModule = "detailsview";
      if (isNullOrUndefined(ids)) {
        this.performDelete();
        return;
      }
      var records = this.getRecords(ids);
      if (records.length === 0) {
        return;
      }
      var data = [];
      var newIds = [];
      for (var i = 0; i < records.length; i++) {
        data[i] = records[i];
        newIds[i] = getItemName(this.parent, data[i]);
      }
      doDeleteFiles(this.parent, data, newIds);
    };
    DetailsView2.prototype.downloadFiles = function(ids) {
      if (isNullOrUndefined(ids)) {
        this.doDownload();
        return;
      }
      var dRecords = this.getRecords(ids);
      if (dRecords.length === 0) {
        return;
      }
      var data = [];
      var newIds = [];
      for (var i = 0; i < dRecords.length; i++) {
        data[i] = dRecords[i];
        newIds[i] = getItemName(this.parent, data[i]);
      }
      doDownloadFiles(this.parent, data, newIds);
    };
    DetailsView2.prototype.openFile = function(id) {
      if (isNullOrUndefined(id)) {
        return;
      }
      var records = this.getRecords([id]);
      if (records.length > 0) {
        this.openContent(records[0]);
      }
    };
    DetailsView2.prototype.renameFile = function(id, name) {
      this.parent.activeModule = "detailsview";
      if (isNullOrUndefined(id)) {
        this.performRename();
        return;
      }
      var records = this.getRecords([id]);
      if (records.length > 0) {
        updateRenamingData(this.parent, records[0]);
        if (!isNullOrUndefined(name)) {
          if (hasEditAccess(this.parent.itemData[0])) {
            rename(this.parent, this.parent.path, name);
          } else {
            createDeniedDialog(this.parent, this.parent.itemData[0], permissionEdit);
          }
        } else {
          doRename(this.parent);
        }
      }
    };
    return DetailsView2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/file-manager.js
var FileManager2 = (
  /** @class */
  function() {
    function FileManager3(parent, locator) {
      FileManager.Inject(ContextMenu3, DetailsView, NavigationPane, Toolbar3);
      this.parent = parent;
      this.i10n = locator.getService("rteLocale");
      this.dialogRenderObj = locator.getService("dialogRenderObject");
      this.rendererFactory = locator.getService("rendererFactory");
      this.addEventListener();
    }
    FileManager3.prototype.initialize = function() {
      this.parent.fileManagerModule = this;
      this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
    };
    FileManager3.prototype.render = function(e) {
      var _this = this;
      var dlgInsert;
      if (e.selectNode && e.selectNode[0].nodeName === "IMG") {
        dlgInsert = this.parent.localeObj.getConstant("dialogUpdate");
      } else {
        dlgInsert = this.i10n.getConstant("dialogInsert");
      }
      var dlgHeader = this.parent.localeObj.getConstant("fileDialogHeader");
      var dlgCancel = this.i10n.getConstant("dialogCancel");
      this.dlgButtons = [
        {
          click: this.insertImageUrl.bind(this),
          buttonModel: { content: dlgInsert, cssClass: "e-flat e-insertImage", isPrimary: true }
        },
        {
          // eslint-disable-next-line
          click: function(e2) {
            _this.cancelDialog();
          },
          buttonModel: { cssClass: "e-flat e-cancel", content: dlgCancel }
        }
      ];
      this.dlgButtons[0].buttonModel.disabled = true;
      this.selectObj = { selection: e.selection, args: e.args, selectParent: e.selectParent };
      var dlgTarget = this.parent.createElement("div", {
        className: "e-rte-file-manager-dialog",
        id: this.parent.getID() + "_file-manager-dialog",
        attrs: { "aria-owns": this.parent.getID() }
      });
      document.body.appendChild(dlgTarget);
      this.fileWrap = this.parent.createElement("div", {
        id: this.parent.getID() + "_rte-file-manager",
        className: "e-img-file-wrap"
      });
      dlgTarget.appendChild(this.fileWrap);
      dlgTarget.appendChild(this.getInputUrlElement());
      var dialogModel = {
        visible: false,
        isModal: true,
        header: dlgHeader,
        target: document.body,
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        cssClass: CLS_RTE_ELEMENTS,
        animationSettings: { effect: "None" },
        showCloseIcon: true,
        closeOnEscape: true,
        width: "720px",
        height: "auto",
        position: { X: "center", Y: "center" },
        buttons: this.dlgButtons,
        created: this.renderFileManager.bind(this),
        close: function(e2) {
          _this.parent.isBlur = false;
          if (e2 && e2.event.returnValue) {
            _this.selectObj.selection.restore();
          }
          _this.destroyComponents();
          _this.dialogRenderObj.close(e2);
        }
      };
      this.dialogObj = this.dialogRenderObj.render(dialogModel);
      this.dialogObj.createElement = this.parent.createElement;
      this.dialogObj.appendTo(dlgTarget);
      this.dialogObj.show(Browser.isDevice ? true : false);
      this.setCssClass({ cssClass: this.parent.cssClass });
    };
    FileManager3.prototype.setCssClass = function(e) {
      if (this.dialogObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass)) {
          this.dialogObj.setProperties({ cssClass: (this.dialogObj.cssClass + " " + e.cssClass).trim() });
        } else {
          this.dialogObj.setProperties({ cssClass: (this.dialogObj.cssClass.replace(e.oldCssClass, "").trim() + " " + e.cssClass).trim() });
        }
      }
    };
    FileManager3.prototype.renderFileManager = function() {
      var _this = this;
      var proxy = this;
      this.fileObj = new FileManager({
        allowMultiSelection: false,
        locale: this.parent.locale,
        enableRtl: this.parent.enableRtl,
        path: this.parent.fileManagerSettings.path,
        view: this.parent.fileManagerSettings.view,
        enablePersistence: this.parent.enablePersistence,
        cssClass: this.parent.fileManagerSettings.cssClass,
        sortOrder: this.parent.fileManagerSettings.sortOrder,
        ajaxSettings: this.parent.fileManagerSettings.ajaxSettings,
        showThumbnail: this.parent.fileManagerSettings.showThumbnail,
        rootAliasName: this.parent.fileManagerSettings.rootAliasName,
        uploadSettings: this.parent.fileManagerSettings.uploadSettings,
        searchSettings: this.parent.fileManagerSettings.searchSettings,
        toolbarSettings: this.parent.fileManagerSettings.toolbarSettings,
        showHiddenItems: this.parent.fileManagerSettings.showHiddenItems,
        allowDragAndDrop: this.parent.fileManagerSettings.allowDragAndDrop,
        showFileExtension: this.parent.fileManagerSettings.showFileExtension,
        detailsViewSettings: this.parent.fileManagerSettings.detailsViewSettings,
        contextMenuSettings: this.parent.fileManagerSettings.contextMenuSettings,
        navigationPaneSettings: this.parent.fileManagerSettings.navigationPaneSettings,
        beforeSend: this.parent.fileManagerSettings.beforeSend,
        fileSelect: function(e) {
          var selectedFile = e.fileDetails;
          if (selectedFile.isFile && proxy.parent.insertImageSettings.allowedTypes.indexOf(selectedFile.type) > -1) {
            proxy.inputUrl.value = proxy.parent.fileManagerSettings.ajaxSettings.getImageUrl + "?path=" + (selectedFile.filterPath && selectedFile.filterPath.replace(/\\/g, "/")) + selectedFile.name;
            _this.dlgButtons[0].buttonModel.disabled = false;
          } else {
            proxy.inputUrl.value = "";
            _this.dlgButtons[0].buttonModel.disabled = true;
          }
          _this.dialogObj.buttons = _this.dlgButtons;
        },
        created: function() {
          _this.inputUrl.removeAttribute("disabled");
        },
        success: function() {
          _this.fileObj.refreshLayout();
        }
      });
      if (Browser.isDevice) {
        this.fileObj.height = "85%";
      }
      this.fileObj.appendTo(this.fileWrap);
      EventHandler.add(this.parent.element.ownerDocument, "mousedown", this.onDocumentClick, this);
    };
    FileManager3.prototype.getInputUrlElement = function() {
      var imgUrl = this.parent.createElement("div", { className: "imgUrl" });
      var urlLabel = this.parent.createElement("div", { className: "e-rte-label" });
      urlLabel.innerHTML = '<label for="rteSample_img_url">' + this.i10n.getConstant("linkWebUrl") + "</label>";
      imgUrl.appendChild(urlLabel);
      var placeUrl = this.i10n.getConstant("imageUrl");
      this.inputUrl = this.parent.createElement("input", {
        className: "e-input e-img-url",
        attrs: { placeholder: placeUrl, spellcheck: "false", disabled: "true" }
      });
      imgUrl.appendChild(this.inputUrl);
      return imgUrl;
    };
    FileManager3.prototype.insertImageUrl = function(e) {
      var url = this.inputUrl.value;
      if (this.parent.formatter.getUndoRedoStack().length === 0) {
        this.parent.formatter.saveData();
      }
      if (url !== "") {
        if (this.parent.editorMode === "HTML" && isNullOrUndefined(closest(this.selectObj.selection.range.startContainer.parentNode, "#" + this.contentModule.getPanel().id))) {
          this.contentModule.getEditPanel().focus();
          var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
          this.selectObj.selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());
          this.selectObj.selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        }
        var regex = /[\w-]+.(jpg|png|jpeg|gif)/g;
        var matchUrl = !isNullOrUndefined(url.match(regex)) && this.parent.editorMode === "HTML" ? url.match(regex)[0] : "";
        var value = {
          cssClass: this.parent.insertImageSettings.display === "inline" ? CLS_IMGINLINE : CLS_IMGBREAK,
          url,
          selection: this.selectObj.selection,
          altText: matchUrl,
          selectParent: this.selectObj.selectParent,
          width: {
            width: this.parent.insertImageSettings.width,
            minWidth: this.parent.insertImageSettings.minWidth,
            maxWidth: this.parent.getInsertImgMaxWidth()
          },
          height: {
            height: this.parent.insertImageSettings.height,
            minHeight: this.parent.insertImageSettings.minHeight,
            maxHeight: this.parent.insertImageSettings.maxHeight
          }
        };
        this.parent.formatter.process(this.parent, this.selectObj.args, this.selectObj.args.originalEvent, value);
        this.dialogObj.hide({ returnValue: false });
      }
    };
    FileManager3.prototype.cancelDialog = function() {
      this.parent.isBlur = false;
      this.dialogObj.hide({ returnValue: true });
    };
    FileManager3.prototype.onDocumentClick = function(e) {
      var target = e.target;
      var prevEle = target.nodeName !== "#document" && !isNullOrUndefined(target.previousElementSibling) && target.previousElementSibling;
      if (!isNullOrUndefined(this.dialogObj) && (!closest(target, "#" + this.parent.getID() + "_file-manager-dialog") && !closest(target, "#" + this.parent.getID() + "_rte-file-manager_tb_sortby-popup") && !closest(target, "#" + this.parent.getID() + "_rte-file-manager_tb_view-popup") && !closest(target, "#" + this.parent.getID() + "_rte-file-manager_contextmenu") && !(!isNullOrUndefined(closest(target, ".e-contextmenu-wrapper")) && closest(target, ".e-contextmenu-wrapper").querySelector("#" + this.parent.getID() + "_rte-file-manager_contextmenu")) && (!isNullOrUndefined(prevEle) && !prevEle.classList.contains("e-rte-file-manager-dialog")) && (!isNullOrUndefined(prevEle) && prevEle.id !== this.parent.getID() + "_rte-file-manager_contextmenu"))) {
        this.dialogObj.hide({ returnValue: true });
        this.parent.isBlur = true;
        dispatchEvent(this.parent.element, "focusout");
      } else {
        this.parent.isRTE = true;
      }
    };
    FileManager3.prototype.addEventListener = function() {
      this.parent.on(initialEnd, this.initialize, this);
      this.parent.on(renderFileManager, this.render, this);
      this.parent.on(bindCssClass, this.setCssClass, this);
      this.parent.on(destroy, this.destroy, this);
    };
    FileManager3.prototype.removeEventListener = function() {
      EventHandler.remove(this.parent.element.ownerDocument, "mousedown", this.onDocumentClick);
      this.parent.off(initialEnd, this.initialize);
      this.parent.off(renderFileManager, this.render);
      this.parent.off(bindCssClass, this.setCssClass);
      this.parent.off(destroy, this.destroy);
    };
    FileManager3.prototype.destroyComponents = function() {
      if (this.fileObj) {
        this.fileObj.destroy();
        this.fileObj = null;
      }
      if (this.dialogObj) {
        this.dialogObj.destroy();
        detach(this.dialogObj.element);
        this.dialogObj = null;
      }
    };
    FileManager3.prototype.destroy = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.destroyComponents();
      this.removeEventListener();
    };
    FileManager3.prototype.getModuleName = function() {
      return "fileManager";
    };
    return FileManager3;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/full-screen.js
var FullScreen = (
  /** @class */
  function() {
    function FullScreen2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    FullScreen2.prototype.showFullScreen = function(event2) {
      var _this = this;
      if (this.parent.toolbarSettings.enable === true && this.parent.editorMode !== "Markdown" && !isNullOrUndefined(this.parent.quickToolbarModule)) {
        this.parent.quickToolbarModule.hideQuickToolbars();
      }
      if (this.parent.showTooltip && !isNullOrUndefined(document.querySelector(".e-tooltip-wrap"))) {
        this.parent.notify(maximizeMinimizeClick, { args: event2 });
      }
      this.scrollableParent = getScrollableParent(this.parent.element);
      if (!this.parent.element.classList.contains(CLS_FULL_SCREEN)) {
        var evenArgs = {
          cancel: false,
          requestType: "Maximize",
          targetItem: "Maximize",
          args: event2
        };
        this.parent.trigger(actionBegin, evenArgs, function(beginEventArgs) {
          if (!beginEventArgs.cancel) {
            if (_this.parent.toolbarSettings.enableFloating && !_this.parent.inlineMode.enable && _this.parent.toolbarSettings.enable) {
              _this.parent.getToolbarElement().style.width = "100%";
              _this.parent.getToolbarElement().style.top = "0px";
            }
            _this.parent.element.classList.add(CLS_FULL_SCREEN);
            _this.toggleParentOverflow(true);
            var isExpand = _this.parent.element.querySelectorAll(".e-toolbar-extended.e-popup-open").length > 0 ? true : false;
            _this.parent.setContentHeight(null, isExpand);
            if (_this.parent.toolbarModule) {
              if (!_this.parent.getBaseToolbarObject().toolbarObj.items[0].properties) {
                _this.parent.getBaseToolbarObject().toolbarObj.removeItems(0);
              }
              if (Browser.isDevice) {
                _this.parent.toolbarModule.removeFixedTBarClass();
              }
              _this.parent.toolbarModule.updateItem({
                targetItem: "Maximize",
                updateItem: "Minimize",
                baseToolbar: _this.parent.getBaseToolbarObject()
              });
            }
            _this.parent.refreshUI();
            _this.parent.trigger(actionComplete, { requestType: "Maximize", targetItem: "Maximize", args: event2 });
          }
        });
      }
    };
    FullScreen2.prototype.hideFullScreen = function(event2) {
      var _this = this;
      if (this.parent.toolbarSettings.enable === true && this.parent.editorMode !== "Markdown" && !isNullOrUndefined(this.parent.quickToolbarModule)) {
        this.parent.quickToolbarModule.hideQuickToolbars();
      }
      if (this.parent.showTooltip && !isNullOrUndefined(document.querySelector(".e-tooltip-wrap"))) {
        this.parent.notify(maximizeMinimizeClick, { args: event2 });
      }
      if (this.parent.element.classList.contains(CLS_FULL_SCREEN)) {
        var evenArgs = {
          cancel: false,
          requestType: "Minimize",
          targetItem: "Minimize",
          args: event2
        };
        this.parent.trigger(actionBegin, evenArgs, function(beginEventArgs) {
          if (!beginEventArgs.cancel) {
            _this.parent.element.classList.remove(CLS_FULL_SCREEN);
            var elem = document.querySelectorAll(".e-rte-overflow");
            for (var i = 0; i < elem.length; i++) {
              removeClass([elem[i]], ["e-rte-overflow"]);
            }
            var isExpand = _this.parent.element.querySelectorAll(".e-toolbar-extended.e-popup-open").length > 0 ? true : false;
            _this.parent.setContentHeight(null, isExpand);
            if (_this.parent.toolbarModule) {
              if (!_this.parent.getBaseToolbarObject().toolbarObj.items[0].properties) {
                _this.parent.getBaseToolbarObject().toolbarObj.removeItems(0);
              }
              _this.parent.toolbarModule.updateItem({
                targetItem: "Minimize",
                updateItem: "Maximize",
                baseToolbar: _this.parent.getBaseToolbarObject()
              });
              if (Browser.isDevice && _this.parent.inlineMode.enable) {
                _this.parent.toolbarModule.addFixedTBarClass();
              }
            }
            _this.parent.trigger(actionComplete, { requestType: "Minimize", targetItem: "Minimize", args: event2 });
          }
        });
      }
    };
    FullScreen2.prototype.toggleParentOverflow = function(isAdd) {
      if (isNullOrUndefined(this.scrollableParent)) {
        return;
      }
      for (var i = 0; i < this.scrollableParent.length; i++) {
        if (this.scrollableParent[i].nodeName === "#document") {
          var elem = document.querySelector("body");
          addClass([elem], ["e-rte-overflow"]);
        } else {
          var elem = this.scrollableParent[i];
          addClass([elem], ["e-rte-overflow"]);
        }
      }
    };
    FullScreen2.prototype.onKeyDown = function(event2) {
      var originalEvent = event2.args;
      switch (originalEvent.action) {
        case "full-screen":
          this.showFullScreen(event2.args);
          originalEvent.preventDefault();
          break;
        case "escape":
          this.hideFullScreen(event2.args);
          originalEvent.preventDefault();
          break;
      }
    };
    FullScreen2.prototype.addEventListener = function() {
      this.parent.on(keyDown, this.onKeyDown, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(moduleDestroy, this.moduleDestroy, this);
    };
    FullScreen2.prototype.removeEventListener = function() {
      this.parent.off(keyDown, this.onKeyDown);
      this.parent.off(destroy, this.destroy);
      this.parent.off(moduleDestroy, this.moduleDestroy);
    };
    FullScreen2.prototype.destroy = function() {
      if (this.parent.element.classList.contains(CLS_FULL_SCREEN)) {
        this.toggleParentOverflow(false);
      }
      var elem = document.querySelectorAll(".e-rte-overflow");
      for (var i = 0; i < elem.length; i++) {
        removeClass([elem[i]], ["e-rte-overflow"]);
      }
      this.removeEventListener();
    };
    FullScreen2.prototype.moduleDestroy = function() {
      this.parent = null;
    };
    return FullScreen2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/html-attributes.js
function setAttributes(htmlAttributes, rte, isFrame, initial) {
  var target;
  if (isFrame) {
    var iFrame = rte.contentModule.getDocument();
    target = iFrame.querySelector("body");
  } else {
    target = rte.element;
  }
  if (Object.keys(htmlAttributes).length) {
    for (var _i = 0, _a = Object.keys(htmlAttributes); _i < _a.length; _i++) {
      var htmlAttr = _a[_i];
      if (htmlAttr === "class") {
        target.classList.add(htmlAttributes["" + htmlAttr]);
      } else if (htmlAttr === "disabled" && htmlAttributes["" + htmlAttr] === "disabled") {
        rte.enabled = false;
        rte.setEnable();
      } else if (htmlAttr === "readonly" && htmlAttributes["" + htmlAttr] === "readonly") {
        rte.readonly = true;
        rte.setReadOnly(initial);
      } else if (htmlAttr === "style") {
        target.setAttribute("style", htmlAttributes["" + htmlAttr]);
      } else if (htmlAttr === "tabindex") {
        rte.inputElement.setAttribute("tabindex", htmlAttributes["" + htmlAttr]);
      } else if (htmlAttr === "placeholder") {
        rte.placeholder = htmlAttributes["" + htmlAttr];
        rte.setPlaceHolder();
      } else {
        var validateAttr = ["name", "required"];
        if (validateAttr.indexOf(htmlAttr) > -1) {
          rte.valueContainer.setAttribute(htmlAttr, htmlAttributes["" + htmlAttr]);
        } else {
          target.setAttribute(htmlAttr, htmlAttributes["" + htmlAttr]);
        }
      }
    }
  }
}

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/format-painter.js
var FormatPainter = (
  /** @class */
  function() {
    function FormatPainter2(parent) {
      this.isSticky = false;
      this.isActive = false;
      this.parent = parent;
      this.addEventListener();
    }
    FormatPainter2.prototype.addEventListener = function() {
      this.parent.on(formatPainterClick, this.toolbarClick, this);
      this.parent.on(formatPainterDoubleClick, this.toolbarDoubleClick, this);
      this.parent.on(editAreaClick, this.editAreaClick, this);
      this.parent.on(keyDown, this.onKeyDown, this);
      this.parent.on(destroy, this.destroy, this);
    };
    FormatPainter2.prototype.toolbarClick = function(clickargs) {
      this.parent.focusIn();
      if (!this.isSticky) {
        this.isActive = true;
        this.actionHandler(clickargs, "click");
      } else {
        clickargs.args.action = "escape";
        this.actionHandler(clickargs, "keyBoard");
      }
    };
    FormatPainter2.prototype.toolbarDoubleClick = function(args) {
      this.isActive = true;
      this.isSticky = true;
      this.parent.focusIn();
      this.actionHandler(args, "dbClick");
    };
    FormatPainter2.prototype.onKeyDown = function(event2) {
      var originalEvent = event2.args;
      if (originalEvent.altKey && originalEvent.shiftKey && (originalEvent.action === "format-copy" || originalEvent.action === "format-paste") || originalEvent.action === "escape" && (this.previousAction === "format-copy" || this.previousAction === "format-paste")) {
        if (originalEvent.action === "format-copy" || originalEvent.action === "format-paste") {
          originalEvent.stopPropagation();
        }
        this.actionHandler(event2, "keyBoard");
      }
    };
    FormatPainter2.prototype.actionHandler = function(event2, type) {
      var action;
      var isKeyboard = false;
      var originalEvent;
      var args;
      var item;
      switch (type) {
        case "dbClick":
          args = event2.args;
          item = args.item;
          originalEvent = event2.args.originalEvent;
          action = "format-copy";
          break;
        case "keyBoard":
          args = null;
          originalEvent = event2.args;
          isKeyboard = true;
          action = event2.args.action;
          if (action === "escape") {
            this.isSticky = false;
            this.isActive = false;
          }
          break;
        case "click":
          args = event2.args;
          item = args.item;
          originalEvent = event2.args.originalEvent;
          action = "format-copy";
          break;
        case "docClick":
          originalEvent = event2;
          action = "format-paste";
          break;
      }
      this.updateCursor(isKeyboard);
      var enable = type === "docClick" || action === "escape" ? false : true;
      this.updateToolbarBtn(enable);
      if (isNullOrUndefined(item)) {
        item = {
          command: "FormatPainter",
          subCommand: "FormatPainter"
        };
      }
      var actionBeginArgs = {
        requestType: "FormatPainter",
        originalEvent,
        name: action,
        item
      };
      var value = {
        formatPainterAction: action
      };
      this.parent.formatter.process(this.parent, actionBeginArgs, originalEvent, value);
      this.previousAction = action;
    };
    FormatPainter2.prototype.updateCursor = function(isKeyboard) {
      if (!this.parent.inputElement.classList.contains("e-rte-cursor-brush") && !isKeyboard) {
        addClass([this.parent.inputElement], "e-rte-cursor-brush");
      } else if (!this.isSticky) {
        removeClass([this.parent.inputElement], "e-rte-cursor-brush");
      }
    };
    FormatPainter2.prototype.updateToolbarBtn = function(enable) {
      var toolbarBtn = this.parent.element.querySelector(".e-rte-format-painter").parentElement.parentElement;
      if (enable) {
        addClass([toolbarBtn], "e-active");
      } else if (!this.isSticky) {
        removeClass([toolbarBtn], "e-active");
      }
    };
    FormatPainter2.prototype.editAreaClick = function(args) {
      if (this.isActive) {
        if (!this.isSticky) {
          this.isActive = false;
        }
        this.actionHandler(args, "docClick");
        this.updateToolbarBtn(false);
      }
    };
    FormatPainter2.prototype.destroy = function() {
      if (isNullOrUndefined(this.parent) || this.parent.isDestroyed) {
        return;
      }
      this.parent.off(formatPainterClick, this.toolbarClick);
      this.parent.off(editAreaClick, this.editAreaClick);
      this.parent.off(formatPainterDoubleClick, this.toolbarDoubleClick);
      this.parent.off(keyDown, this.onKeyDown);
      this.parent.off(destroy, this.destroy);
      if (!isNullOrUndefined(this.parent.formatter.editorManager.formatPainterEditor)) {
        this.parent.formatter.editorManager.formatPainterEditor.destroy();
      }
      this.parent = void 0;
      this.isSticky = void 0;
      this.isActive = void 0;
      this.previousAction = void 0;
    };
    FormatPainter2.prototype.getModuleName = function() {
      return "formatPainter";
    };
    return FormatPainter2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/emoji-picker.js
var EmojiPicker = (
  /** @class */
  function() {
    function EmojiPicker2(parent, serviceLocator) {
      this.parent = parent;
      this.locator = serviceLocator;
      this.i10n = serviceLocator.getService("rteLocale");
      this.renderFactory = this.locator.getService("rendererFactory");
      this.baseToolbar = new BaseToolbar(this.parent, this.locator);
      this.addEventListener();
    }
    EmojiPicker2.prototype.destroy = function() {
      this.removeEventListener();
    };
    EmojiPicker2.prototype.addEventListener = function() {
      this.parent.on(emojiPicker, this.toolbarClick, this);
      this.parent.on(docClick, this.docClick, this);
      this.parent.on(keyDown, this.onkeyPress, this);
      this.parent.on(keyUp, this.onkeyUp, this);
      this.parent.on(contentscroll, this.contentscroll, this);
      this.parent.on(scroll, this.contentscroll, this);
    };
    EmojiPicker2.prototype.toolbarClick = function(args) {
      var _this = this;
      var _a, _b;
      var spanElement = this.parent.element.querySelector(".e-emoji");
      this.divElement = spanElement.closest("div");
      var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
      this.save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
      this.clickEvent = args.args;
      var emojiPicker2 = this.parent.emojiPickerSettings.iconsSet;
      if (this.popupObj) {
        removeClass([this.divElement], "e-active");
        if (this.popupObj.element.querySelector(".e-rte-emoji-search") || !this.parent.emojiPickerSettings.showSearchBox) {
          this.popupObj.hide();
          return;
        }
        this.popupObj.hide();
      }
      this.popDiv = this.parent.createElement("div", { className: "e-rte-emojipicker-popup", id: this.parent.getID() + "_emojiPicker" });
      this.parent.getToolbar().appendChild(this.popDiv);
      EventHandler.add(this.popDiv, "keydown", this.onKeyDown, this);
      EventHandler.add(this.popDiv, "keyup", this.searchFilter, this);
      var extendEle = this.parent.element.querySelector(".e-toolbar-extended");
      var zIndex;
      if (!isNullOrUndefined(extendEle)) {
        var computedStyle = window.getComputedStyle(extendEle);
        zIndex = computedStyle.getPropertyValue("z-index");
      } else {
        zIndex = "10001";
      }
      var target;
      var xValue;
      var yValue;
      if (!isNullOrUndefined(args.args)) {
        target = args.args.originalEvent.target;
        target = target.classList.contains("e-toolbar-item") ? target.firstChild : target.parentElement;
        xValue = "left";
        yValue = "bottom";
      } else if (isNullOrUndefined(args.x) && isNullOrUndefined(args.y)) {
        target = this.parent.inputElement;
        if (window.getSelection().rangeCount > 0) {
          var coordinates = this.getCoordinates();
          xValue = coordinates.left;
          yValue = coordinates.top;
        }
      } else {
        target = this.parent.inputElement;
        xValue = args.x;
        yValue = args.y;
      }
      this.popupObj = new Popup(this.popDiv, {
        targetType: "relative",
        relateTo: target,
        collision: { X: "fit", Y: "none" },
        offsetY: 8,
        viewPortElement: this.parent.element,
        position: { X: xValue, Y: yValue },
        enableRtl: this.parent.enableRtl,
        zIndex: parseInt(zIndex, 10) + 1,
        actionOnScroll: "hide",
        // eslint-disable-next-line
        close: function(event2) {
          _this.parent.isBlur = false;
          _this.popupObj.destroy();
          detach(_this.popupObj.element);
          _this.popupObj = null;
        }
      });
      addClass([this.popupObj.element], "e-popup-open");
      this.popupObj.refreshPosition(target);
      if ((!isNullOrUndefined(args.args) || isNullOrUndefined(args.x) && isNullOrUndefined(args.y)) && this.parent.emojiPickerSettings.showSearchBox) {
        var inputEle = createElement("input", { id: "e-rte-emoji-search", className: "e-rte-emoji-search" });
        this.popDiv.append(inputEle);
        var inputobj = new TextBox({
          placeholder: this.i10n.getConstant("emojiPickerTypeToFind"),
          showClearButton: true
        });
        inputobj.appendTo(inputEle);
        inputEle.focus();
      }
      var closeIcon = this.popupObj.element.querySelector(".e-clear-icon");
      if (!isNullOrUndefined(closeIcon)) {
        EventHandler.add(closeIcon, "mousedown", this.searchFilter, this);
      }
      var emojiToolBar = this.parent.createElement("div", { className: "e-rte-emojipicker-toolbar" });
      this.popDiv.appendChild(emojiToolBar);
      var pushToolBar = [];
      for (var i = 0; i < this.parent.emojiPickerSettings.iconsSet.length; i++) {
        if (!isNullOrUndefined(this.parent.emojiPickerSettings.iconsSet[i].iconCss)) {
          pushToolBar.push({ prefixIcon: this.parent.emojiPickerSettings.iconsSet[i].iconCss, htmlAttributes: (_a = {}, _a["title"] = this.parent.emojiPickerSettings.iconsSet[i].name, _a) });
        } else {
          pushToolBar.push({ text: "&#x" + this.parent.emojiPickerSettings.iconsSet[i].code + ";", htmlAttributes: (_b = {}, _b["title"] = this.parent.emojiPickerSettings.iconsSet[i].name, _b) });
        }
      }
      var toolbarObj = new Toolbar({
        items: pushToolBar,
        clicked: this.emojiToolbarClick.bind(this)
      });
      toolbarObj.appendTo(emojiToolBar);
      var emojiBtnDiv = this.parent.createElement("div", { className: "e-rte-emojipicker-btn" });
      this.popDiv.appendChild(emojiBtnDiv);
      var height;
      var popupBorder = window.getComputedStyle(this.popDiv);
      if (isNullOrUndefined(args.args) && !(isNullOrUndefined(args.x) && isNullOrUndefined(args.y)) || !this.parent.emojiPickerSettings.showSearchBox) {
        height = this.popDiv.getBoundingClientRect().height - emojiToolBar.getBoundingClientRect().height - 2 * parseFloat(popupBorder.borderWidth) + "px";
        emojiBtnDiv.style.setProperty("height", height, "important");
      } else {
        var inputELe = this.parent.element.querySelector(".e-rte-emoji-search").parentElement;
        var getComputedStyle_1 = window.getComputedStyle(inputELe);
        height = this.popDiv.getBoundingClientRect().height - emojiToolBar.getBoundingClientRect().height - inputELe.getBoundingClientRect().height - parseFloat(getComputedStyle_1.marginTop) - parseFloat(getComputedStyle_1.marginBottom) - 2 * parseFloat(popupBorder.borderWidth) + "px";
        emojiBtnDiv.style.setProperty("height", height, "important");
      }
      for (var i = 0; i < emojiPicker2.length; i++) {
        var emojiGroupDiv = this.parent.createElement("div", { className: "e-rte-emojipicker-group" });
        emojiBtnDiv.appendChild(emojiGroupDiv);
        var emojiName = this.parent.createElement("div", { className: "e-rte-emojipicker-name" });
        emojiName.innerText = this.parent.emojiPickerSettings.iconsSet[i].name;
        emojiName.setAttribute("aria-label", this.parent.emojiPickerSettings.iconsSet[i].name);
        emojiGroupDiv.appendChild(emojiName);
        var emojiBtn = this.parent.createElement("div", { className: "e-rte-emojipickerbtn-group" });
        emojiGroupDiv.appendChild(emojiBtn);
        for (var j = 0; j < emojiPicker2[i].icons.length; j++) {
          var button = this.parent.createElement("button", { className: "e-btn  e-control" });
          button.innerHTML = this.buttoncode(this.parent.emojiPickerSettings.iconsSet[i].icons[j].code);
          button.setAttribute("aria-label", this.parent.emojiPickerSettings.iconsSet[i].icons[j].desc);
          button.setAttribute("title", this.parent.emojiPickerSettings.iconsSet[i].icons[j].desc);
          emojiBtn.appendChild(button);
          if (button.innerHTML.length > 2) {
            button.style.fontSize = "17px";
          }
        }
      }
      EventHandler.add(emojiBtnDiv, "scroll", this.scrollEvent, this);
      EventHandler.add(emojiBtnDiv, "click", this.emojiBtnClick, this);
      var emojiButtons = this.parent.element.querySelectorAll(".e-rte-emojipicker-btn button");
      if (isNullOrUndefined(this.parent.element.querySelector(".e-rte-emoji-search")) && !isNullOrUndefined(args.args)) {
        emojiButtons[0].focus();
        addClass([emojiButtons[0]], "e-focus");
      }
      var popup = this.parent.element.querySelector(".e-rte-emojipicker-btn");
      var toolbarName = this.parent.element.querySelectorAll(".e-rte-emojipicker-toolbar button");
      var scrollTop;
      if (!isNullOrUndefined(popup)) {
        scrollTop = Math.round(popup.scrollTop);
      }
      for (var i = 0; i < toolbarName.length; i++) {
        if (toolbarName[i].classList.contains("e-selected")) {
          removeClass([toolbarName[i]], "e-selected");
        }
      }
      if (scrollTop < toolbarName[0].offsetHeight) {
        addClass([toolbarName[0]], "e-selected");
      }
      if (this.popupObj) {
        addClass([this.divElement], "e-active");
      }
    };
    EmojiPicker2.prototype.buttoncode = function(value) {
      var valueLength = value.split("-");
      var joinedEmoji = valueLength.map(function(cp) {
        return String.fromCodePoint(parseInt(cp, 16));
      }).join("‍");
      return joinedEmoji;
    };
    EmojiPicker2.prototype.docClick = function(e) {
      var target = e.args.target;
      if (target && target.classList && (this.popupObj && !closest(target, "[id='" + this.popupObj.element.id + "']")) && (!target.classList.contains("e-emoji") && !target.classList.contains("e-toolbar-item"))) {
        if (this.popupObj) {
          removeClass([this.divElement], "e-active");
          this.popupObj.hide();
        }
      }
    };
    EmojiPicker2.prototype.scrollEvent = function() {
      var popup = this.parent.element.querySelector(".e-rte-emojipicker-btn");
      var emojiSet = this.parent.element.querySelectorAll(".e-rte-emojipicker-group");
      var toolbarName = this.parent.element.querySelectorAll(".e-rte-emojipicker-toolbar button");
      var scrollTop;
      if (!isNullOrUndefined(popup)) {
        scrollTop = Math.round(popup.scrollTop);
      }
      var firstSetWidth = 0;
      for (var j = 0; j < toolbarName.length; j++) {
        if (scrollTop < toolbarName[0].offsetHeight) {
          if (!isNullOrUndefined(toolbarName[j + 1])) {
            removeClass([toolbarName[j + 1]], "e-selected");
          }
          addClass([toolbarName[0]], "e-selected");
        }
      }
      for (var i = 0; i < emojiSet.length; i++) {
        firstSetWidth += Math.round(emojiSet[i].offsetHeight);
        if (scrollTop >= firstSetWidth) {
          for (var k = 0; k < toolbarName.length; k++) {
            if (toolbarName[k].classList.contains("e-selected")) {
              removeClass([toolbarName[k]], "e-selected");
            }
          }
          if (!isNullOrUndefined(toolbarName[i + 1])) {
            addClass([toolbarName[i + 1]], "e-selected");
          }
        }
      }
    };
    EmojiPicker2.prototype.contentscroll = function() {
      if (isNullOrUndefined(this.clickEvent) && this.popupObj) {
        removeClass([this.divElement], "e-active");
        this.popupObj.hide();
        return;
      }
    };
    EmojiPicker2.prototype.emojiToolbarClick = function(e) {
      var args = {
        // eslint-disable-next-line
        text: e.item.htmlAttributes.title
      };
      var currentEleName = args.text;
      var emojiGroups = this.parent.element.querySelectorAll(".e-rte-emojipicker-group");
      var emojiButtons = this.parent.element.querySelectorAll(".e-rte-emojipicker-btn button");
      var toolbarName = this.parent.element.querySelectorAll(".e-rte-emojipicker-toolbar button");
      for (var i = 0; i < toolbarName.length; i++) {
        if (toolbarName[i].classList.contains("e-selected")) {
          removeClass([toolbarName[i]], "e-selected");
        }
      }
      for (var i = 0; i < emojiButtons.length; i++) {
        if (emojiButtons[i].classList.contains("e-focus")) {
          removeClass([emojiButtons[i]], "e-focus");
        }
      }
      var emojiGroupsheight = this.parent.element.querySelector(".e-rte-emojipicker-btn");
      var emojiHeight = 0;
      emojiGroups.forEach(function(group) {
        var childNodes = group.childNodes[0];
        var focusBtn = group.childNodes[1].childNodes[0];
        var ariaLabel = childNodes.getAttribute("aria-label");
        if (currentEleName === ariaLabel) {
          if (childNodes) {
            emojiGroupsheight.scrollTop = emojiHeight + 10;
            addClass([focusBtn], "e-focus");
            focusBtn.focus();
          }
        } else {
          emojiHeight += group.scrollHeight;
          removeClass([focusBtn], "e-focus");
        }
      });
    };
    EmojiPicker2.prototype.onKeyDown = function(e) {
      var emojiButtons = this.parent.element.querySelectorAll(".e-rte-emojipicker-btn button");
      var emojiGroups = this.parent.element.querySelectorAll(".e-rte-emojipickerbtn-group");
      var searchKeyHandler = this.parent.element.querySelector(".e-rte-emojisearch-btn button");
      if (e.keyCode === 27) {
        if (this.popupObj) {
          removeClass([this.divElement], "e-active");
          this.popupObj.hide();
        }
      }
      if (e.keyCode === 13) {
        var activeEle = document.activeElement;
        if (activeEle.classList.contains("e-btn")) {
          this.emojiBtnClick(e);
          e.preventDefault();
        }
      }
      var srcElement = e.srcElement;
      if (!isNullOrUndefined(srcElement)) {
        if (srcElement.classList.contains("e-rte-emoji-search") && e.keyCode === 40) {
          for (var i = 0; i < emojiButtons.length; i++) {
            if (emojiButtons[i].classList.contains("e-focus")) {
              removeClass([emojiButtons[i]], "e-focus");
            }
          }
        }
      }
      if (!isNullOrUndefined(searchKeyHandler)) {
        this.filterKeyHandler(e);
      } else {
        for (var i = 0; i < emojiButtons.length; i++) {
          var focusIndex = i;
          if (emojiButtons[i].classList.contains("e-focus")) {
            if (e.keyCode === 40) {
              if (emojiButtons.length - 4 > i) {
                var count2 = 0;
                for (var j = 0; j < emojiGroups.length; j++) {
                  for (var k = 0; k < emojiGroups[j].childNodes.length; k++) {
                    var childNodes = emojiGroups[j].childNodes[k];
                    if (childNodes.classList.contains("e-focus") && count2 !== 1) {
                      var currentIndex = k;
                      var lastChild = emojiGroups[j].lastChild;
                      var lastRowIndex = Math.floor(k % 6);
                      var lastEleLength = emojiGroups[j].childNodes.length - 1;
                      var lastEleIndex = Math.floor(lastEleLength % 6);
                      if (currentIndex !== -1) {
                        var nextRowIndex = currentIndex + 6;
                        if (!isNullOrUndefined(emojiGroups[j].childNodes[nextRowIndex])) {
                          var firstFocusEle = emojiButtons[i];
                          removeClass([firstFocusEle], "e-focus");
                          var focusEle = emojiButtons[focusIndex += 6];
                          addClass([focusEle], "e-focus");
                          focusEle.focus();
                          break;
                        } else if (isNullOrUndefined(emojiGroups[j].childNodes[nextRowIndex]) && !lastChild.classList.contains("e-focus") && lastEleIndex < lastRowIndex) {
                          var firstFocusEle = emojiButtons[i];
                          removeClass([firstFocusEle], "e-focus");
                          var focusEle = emojiGroups[j].lastChild;
                          addClass([focusEle], "e-focus");
                          focusEle.focus();
                          count2 = 1;
                          break;
                        } else {
                          var firstFocusEle = emojiButtons[i];
                          removeClass([firstFocusEle], "e-focus");
                          var focusEle = emojiGroups[j + 1].childNodes[lastRowIndex];
                          addClass([focusEle], "e-focus");
                          focusEle.focus();
                          count2 = 1;
                          break;
                        }
                      }
                    }
                  }
                }
                break;
              }
            } else if (e.keyCode === 38) {
              if (i >= 6) {
                var count2 = 0;
                for (var j = 0; j < emojiGroups.length; j++) {
                  for (var k = 0; k < emojiGroups[j].childNodes.length; k++) {
                    var childNodes = emojiGroups[j].childNodes[k];
                    if (childNodes.classList.contains("e-focus") && count2 !== 1) {
                      var currentIndex = k;
                      var previousRowLength = isNullOrUndefined(emojiGroups[j - 1]) ? null : emojiGroups[j - 1].childNodes.length % 6 || 6;
                      if (currentIndex !== -1) {
                        var previousRowIndex = currentIndex - 6;
                        if (!isNullOrUndefined(emojiGroups[j].childNodes[previousRowIndex])) {
                          var firstFocusEle = emojiButtons[i];
                          removeClass([firstFocusEle], "e-focus");
                          var focusEle = emojiButtons[focusIndex -= 6];
                          addClass([focusEle], "e-focus");
                          focusEle.focus();
                          break;
                        } else if (isNullOrUndefined(emojiGroups[j - 1].childNodes[emojiGroups[j - 1].childNodes.length - (previousRowLength - k)])) {
                          var firstFocusEle = emojiButtons[i];
                          removeClass([firstFocusEle], "e-focus");
                          var focusEle = emojiGroups[j - 1].lastChild;
                          addClass([focusEle], "e-focus");
                          focusEle.focus();
                          count2 = 1;
                          break;
                        } else {
                          var firstFocusEle = emojiButtons[i];
                          removeClass([firstFocusEle], "e-focus");
                          var focusEle = emojiGroups[j - 1].childNodes[emojiGroups[j - 1].childNodes.length - (previousRowLength - k)];
                          addClass([focusEle], "e-focus");
                          focusEle.focus();
                          count2 = 1;
                          break;
                        }
                      }
                    }
                  }
                }
              } else {
                var firstFocusEle = emojiButtons[i];
                removeClass([firstFocusEle], "e-focus");
                var focusEle = emojiButtons[focusIndex -= 1];
                var inputELe = this.popupObj.element.querySelector(".e-rte-emoji-search");
                if (isNullOrUndefined(focusEle) && !isNullOrUndefined(inputELe)) {
                  inputELe.focus();
                  break;
                }
                addClass([focusEle], "e-focus");
                focusEle.focus();
              }
              break;
            } else if (e.keyCode === 39) {
              if (emojiButtons.length !== i + 1) {
                var firstFocusEle = emojiButtons[i];
                removeClass([firstFocusEle], "e-focus");
                var focusEle = emojiButtons[focusIndex += 1];
                addClass([focusEle], "e-focus");
                emojiButtons[focusIndex].focus();
              }
              break;
            } else if (e.keyCode === 37) {
              if (i > 0) {
                var firstFocusEle = emojiButtons[i];
                removeClass([firstFocusEle], "e-focus");
                var focusEle = emojiButtons[focusIndex -= 1];
                addClass([focusEle], "e-focus");
                emojiButtons[focusIndex].focus();
              }
              break;
            }
          }
        }
      }
      if (e.keyCode === 40) {
        var firstFocusEle = this.parent.element.querySelector(".e-focus");
        if (isNullOrUndefined(firstFocusEle)) {
          var focusEle = emojiButtons[0];
          addClass([focusEle], "e-focus");
          emojiButtons[0].focus();
        }
      }
    };
    EmojiPicker2.prototype.filterKeyHandler = function(e) {
      var emojiButtons = this.parent.element.querySelectorAll(".e-rte-emojisearch-btn button");
      var firstFocusEle = this.parent.element.querySelector(".e-focus");
      if (isNullOrUndefined(firstFocusEle) && e.keyCode === 40) {
        var focusEle = emojiButtons[0];
        addClass([focusEle], "e-focus");
        emojiButtons[0].focus();
      } else {
        for (var i = 0; i < emojiButtons.length; i++) {
          var focusIndex = i;
          var childNodes = emojiButtons[i];
          if (childNodes.classList.contains("e-focus")) {
            if (e.keyCode === 38) {
              if (i >= 6) {
                var firstFocusEle_1 = emojiButtons[i];
                removeClass([firstFocusEle_1], "e-focus");
                var focusEle = emojiButtons[focusIndex -= 6];
                addClass([focusEle], "e-focus");
                focusEle.focus();
                break;
              } else {
                var firstFocusEle_2 = emojiButtons[i];
                removeClass([firstFocusEle_2], "e-focus");
                var focusEle = emojiButtons[focusIndex -= 1];
                var inputELe = this.popupObj.element.querySelector(".e-rte-emoji-search");
                if (isNullOrUndefined(focusEle) && !isNullOrUndefined(inputELe)) {
                  inputELe.focus();
                  break;
                }
                addClass([focusEle], "e-focus");
                focusEle.focus();
              }
            } else if (e.keyCode === 40) {
              if (emojiButtons.length - 6 > i) {
                var firstFocusEle_3 = emojiButtons[i];
                removeClass([firstFocusEle_3], "e-focus");
                var focusEle = emojiButtons[focusIndex += 6];
                addClass([focusEle], "e-focus");
                focusEle.focus();
                break;
              }
            } else if (e.keyCode === 39) {
              if (emojiButtons.length !== i + 1) {
                var firstFocusEle_4 = emojiButtons[i];
                removeClass([firstFocusEle_4], "e-focus");
                var focusEle = emojiButtons[focusIndex += 1];
                addClass([focusEle], "e-focus");
                emojiButtons[focusIndex].focus();
              }
              break;
            } else if (e.keyCode === 37) {
              if (i > 0) {
                var firstFocusEle_5 = emojiButtons[i];
                removeClass([firstFocusEle_5], "e-focus");
                var focusEle = emojiButtons[focusIndex -= 1];
                addClass([focusEle], "e-focus");
                emojiButtons[focusIndex].focus();
                break;
              }
            }
          }
        }
      }
    };
    EmojiPicker2.prototype.searchFilter = function(e, value) {
      var inputElement = this.parent.element.querySelector(".e-rte-emoji-search");
      var contentELe = this.parent.element.querySelector(".e-content");
      if (document.activeElement === inputElement || document.activeElement === contentELe) {
        var trimmedStr = void 0;
        if (value !== ":" && !isNullOrUndefined(value)) {
          trimmedStr = value.replace(/^:/, "");
        } else if (!isNullOrUndefined(value)) {
          trimmedStr = value;
        }
        var inputValue = isNullOrUndefined(inputElement) ? trimmedStr : inputElement.value;
        var emojiButtons = this.parent.element.querySelectorAll(".e-rte-emojipicker-btn button");
        var emojipickerAll = this.parent.element.querySelector(".e-rte-emojipicker-btn");
        var emojiGroups = this.parent.element.querySelectorAll(".e-rte-emojipicker-group");
        var toolbarGroup = this.parent.element.querySelector(".e-rte-emojipicker-toolbar");
        var excludedDiv_1 = this.parent.element.querySelector(".e-rte-emojisearch-btn");
        var firstChild = this.popDiv.childNodes[0];
        var getComputedStyle_2 = window.getComputedStyle(firstChild);
        var inputHeight = firstChild.nodeName === "SPAN" ? firstChild.getBoundingClientRect().height + parseFloat(getComputedStyle_2.marginTop) + parseFloat(getComputedStyle_2.marginBottom) : 0;
        var popupBorder = window.getComputedStyle(this.popDiv);
        var filteredButtons = isNullOrUndefined(excludedDiv_1) ? emojiButtons : (
          // eslint-disable-next-line @typescript-eslint/tslint/config
          Array.from(emojiButtons).filter(function(button) {
            return !excludedDiv_1.contains(button);
          })
        );
        if (inputValue === "" || value === ":") {
          toolbarGroup.style.display = "";
          emojipickerAll.style.height = this.popDiv.getBoundingClientRect().height - toolbarGroup.getBoundingClientRect().height - inputHeight - 2 * parseFloat(popupBorder.borderWidth) + "px";
          emojiGroups.forEach(function(element) {
            element.style.display = "";
          });
        } else {
          emojiGroups.forEach(function(element) {
            element.style.display = "none";
          });
          toolbarGroup.style.display = "none";
          emojipickerAll.style.height = this.popDiv.getBoundingClientRect().height - inputHeight - 2 * parseFloat(popupBorder.borderWidth) + "px";
        }
        var emojiBtnDiv = this.parent.createElement("div", { className: "e-rte-emojisearch-btn" });
        var emojis = this.parent.element.querySelector(".e-rte-emojisearch-btn");
        if (emojis) {
          emojis.remove();
        }
        var noEmojiObj = this.parent.createElement("div", { className: "e-rte-emojiSearch-noEmoji" });
        var noEMoji = true;
        for (var i = 0; i < filteredButtons.length; i++) {
          if (!isNullOrUndefined(filteredButtons[i].getAttribute("title"))) {
            var title = filteredButtons[i].getAttribute("title").toLowerCase();
            var titleLength = title.split(" ");
            for (var j = 0; j < titleLength.length; j++) {
              if (titleLength[j].startsWith(inputValue.toLowerCase()) && inputValue !== "") {
                var emoji = filteredButtons[i].cloneNode(true);
                emojiBtnDiv.appendChild(emoji);
                noEMoji = false;
                break;
              }
            }
          }
        }
        if (noEMoji && !this.parent.element.querySelector(".e-rte-emojiSearch-noEmoji") && (inputValue !== "" && value !== ":")) {
          noEmojiObj.innerHTML = '<span style="color: rgba(0, 0, 0, 0.75); font-weight: 500; font-size: 16px;">' + this.i10n.getConstant("emojiPickerNoResultFound") + ' 😥 </span><br><span style="color: rgba(0, 0, 0, 0.75);"> ' + this.i10n.getConstant("emojiPickerTrySomethingElse") + " ? </span>";
          noEmojiObj.style.margin = "55px";
          emojipickerAll.appendChild(noEmojiObj);
        } else if (!noEMoji && this.parent.element.querySelector(".e-rte-emojiSearch-noEmoji") || inputValue === "" && value === ":") {
          emojipickerAll.removeChild(this.parent.element.querySelector(".e-rte-emojiSearch-noEmoji"));
        }
        emojipickerAll.appendChild(emojiBtnDiv);
      } else {
        return;
      }
    };
    EmojiPicker2.prototype.emojiBtnClick = function(e) {
      var event2 = new MouseEvent("mouseleave", { bubbles: true, cancelable: true });
      var emotePickerTooltips = this.parent.element.querySelectorAll(".e-rte-emojipicker-popup [data-tooltip-id]");
      for (var i = 0; i < emotePickerTooltips.length; i++) {
        emotePickerTooltips[i].dispatchEvent(event2);
      }
      var targetEle = e.target;
      if (targetEle.tagName !== "BUTTON") {
        return;
      }
      targetEle.focus();
      if (!isNullOrUndefined(this.clickEvent)) {
        this.save.restore();
      }
      if (this.popupObj) {
        removeClass([this.divElement], "e-active");
        this.popupObj.hide();
      }
      var originalEvent = e;
      this.parent.formatter.process(this.parent, {
        item: {
          "command": "EmojiPicker",
          "subCommand": "EmojiPicker",
          value: targetEle.innerHTML
        }
      }, e, originalEvent);
    };
    EmojiPicker2.prototype.onkeyPress = function(e) {
      var originalEvent = e.args;
      var selection = window.getSelection();
      if (selection.rangeCount <= 0) {
        return;
      }
      var range = selection.getRangeAt(0);
      var cursorPos = range.startOffset;
      var prevChar = selection.focusNode.textContent.substring(cursorPos - 1, cursorPos);
      var isPrevSpace = /\s/.test(prevChar);
      var isPrevColon = selection.focusNode.textContent.substring(cursorPos - 1, cursorPos) === ":";
      var colon = selection.focusNode.textContent.charAt(cursorPos - 1) === ":";
      if (originalEvent.keyCode === 186 && originalEvent.shiftKey && (isPrevSpace || selection.focusOffset === 0)) {
        var coordinates = this.getCoordinates();
        this.parent.showEmojiPicker(coordinates.left, coordinates.top);
      }
      if (originalEvent.keyCode === 8 && colon && this.popupObj) {
        removeClass([this.divElement], "e-active");
        this.popupObj.hide();
      }
      if (originalEvent.keyCode === 32 && isPrevColon && this.popupObj) {
        removeClass([this.divElement], "e-active");
        this.popupObj.hide();
      }
      if (this.popupObj && (originalEvent.keyCode === 37 || originalEvent.keyCode === 38 || originalEvent.keyCode === 39 || originalEvent.keyCode === 27 || originalEvent.keyCode === 40)) {
        this.onKeyDown(originalEvent);
        originalEvent.preventDefault();
      }
    };
    EmojiPicker2.prototype.onkeyUp = function(e) {
      var originalEvent = e.args;
      var selection = window.getSelection();
      var range = selection.getRangeAt(0);
      var cursorPos = range.startOffset;
      var selectedValue;
      var count2 = 0;
      for (var i = cursorPos - 1; i >= cursorPos - 15; i--) {
        var prevChar = selection.focusNode.textContent.substring(i - 1, i);
        var isPrevSpace = /:$/.test(prevChar);
        if (isPrevSpace && !isNullOrUndefined(this.popDiv) && count2 === 0) {
          selectedValue = range.startContainer.textContent.substring(i - 1, cursorPos);
          this.searchFilter(originalEvent, selectedValue);
          count2 = 1;
        }
      }
      var colon = selection.focusNode.textContent.substring(cursorPos - 1, cursorPos);
      if (colon === ":" && !isNullOrUndefined(this.popupObj)) {
        selectedValue = colon;
        this.searchFilter(originalEvent, selectedValue);
      }
    };
    EmojiPicker2.prototype.getCoordinates = function() {
      var coordinates;
      var selection = window.getSelection();
      var range = selection.getRangeAt(0);
      var firstChild;
      if (range.startContainer.nodeName === "P" || range.startContainer.nodeName === "DIV") {
        if (range.startContainer.childNodes[0].nodeName !== "#text") {
          firstChild = range.startContainer.childNodes[0];
        }
      }
      var rect = isNullOrUndefined(firstChild) ? range.getBoundingClientRect() : firstChild.getBoundingClientRect();
      var rteContent = this.parent.element.querySelector(".e-rte-content");
      var rteEle = this.parent.element;
      var toolbarHeight = rteEle.offsetHeight - rteContent.offsetHeight;
      var cursorTop = rect.top - this.parent.inputElement.getBoundingClientRect().top;
      var cursorLeft = rect.left - this.parent.inputElement.getBoundingClientRect().left;
      var screenHeight = window.innerHeight;
      var popupHeight = 330;
      var popupTop = cursorTop;
      var popupLeft = cursorLeft + rect.width;
      if (rteEle.getBoundingClientRect().top < 0) {
        popupTop = popupTop + rteContent.getBoundingClientRect().top - toolbarHeight;
      }
      if (rect.top < popupHeight) {
        popupTop = popupTop;
      } else if (rect.top + popupHeight > screenHeight) {
        popupTop -= popupHeight + 20;
      }
      if (this.parent.inputElement) {
        coordinates = {
          top: popupTop + 60,
          left: popupLeft + 8
        };
      }
      return coordinates;
    };
    EmojiPicker2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(emojiPicker, this.toolbarClick);
      this.parent.off(docClick, this.docClick);
      this.parent.off(keyDown, this.onkeyPress);
      this.parent.off(keyUp, this.onkeyUp);
      this.parent.off(contentscroll, this.contentscroll);
      this.parent.off(scroll, this.contentscroll);
    };
    EmojiPicker2.prototype.getModuleName = function() {
      return "emojiPicker";
    };
    return EmojiPicker2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/render.js
var Render = (
  /** @class */
  function() {
    function Render2(parent, locator) {
      this.parent = parent;
      this.locator = locator;
      this.renderer = this.locator.getService("rendererFactory");
      this.addEventListener();
    }
    Render2.prototype.render = function() {
      var rteObj = this.parent;
      this.contentRenderer = this.renderer.getRenderer(RenderType.Content);
      this.contentRenderer.renderPanel();
    };
    Render2.prototype.refresh = function(e) {
      if (e === void 0) {
        e = { requestType: "refresh" };
      }
      this.parent.notify(e.requestType + "-begin", e);
    };
    Render2.prototype.destroy = function() {
      this.removeEventListener();
    };
    Render2.prototype.moduleDestroy = function() {
      this.parent = null;
    };
    Render2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(modelChanged, this.refresh, this);
      this.parent.on(keyUp, this.keyUp, this);
      this.parent.on(moduleDestroy, this.moduleDestroy, this);
    };
    Render2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(modelChanged, this.refresh);
      this.parent.off(keyUp, this.keyUp);
      this.parent.off(moduleDestroy, this.moduleDestroy);
    };
    Render2.prototype.keyUp = function(e) {
      if (this.parent.editorMode === "HTML") {
        switch (e.args.which) {
          case 46:
          case 8:
            var childNodes = this.parent.contentModule.getEditPanel().childNodes;
            if (childNodes.length === 0 || childNodes.length === 1 && childNodes[0].childNodes.length === 0 && (childNodes[0].tagName === "BR" || (childNodes[0].tagName === "P" || childNodes[0].tagName === "DIV") && childNodes[0].textContent === "")) {
              var node = this.parent.contentModule.getEditPanel();
              if (this.parent.enterKey === "DIV") {
                node.innerHTML = "<div><br/></div>";
              } else if (this.parent.enterKey === "BR") {
                node.innerHTML = "<br/>";
              } else {
                node.innerHTML = "<p><br/></p>";
              }
              this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), node.childNodes[0], 0);
            }
            break;
        }
      }
    };
    return Render2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/link-module.js
var Link = (
  /** @class */
  function() {
    function Link2(parent, serviceLocator) {
      this.parent = parent;
      this.rteID = parent.element.id;
      this.i10n = serviceLocator.getService("rteLocale");
      this.addEventListener();
      this.serviceLocator = serviceLocator;
      this.rendererFactory = serviceLocator.getService("rendererFactory");
      this.dialogRenderObj = serviceLocator.getService("dialogRenderObject");
    }
    Link2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(insertLink, this.linkDialog, this);
      this.parent.on(showLinkDialog, this.showDialog, this);
      this.parent.on(closeLinkDialog, this.closeDialog, this);
      this.parent.on(keyDown, this.onKeyDown, this);
      this.parent.on(insertCompleted, this.showLinkQuickToolbar, this);
      this.parent.on(clearDialogObj, this.clearDialogObj, this);
      this.parent.on(linkToolbarAction, this.onToolbarAction, this);
      this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);
      this.parent.on(unLink, this.removeLink, this);
      this.parent.on(editLink, this.editLink, this);
      this.parent.on(openLink, this.openLink, this);
      this.parent.on(editAreaClick, this.editAreaClickHandler, this);
      this.parent.on(bindCssClass, this.setCssClass, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(moduleDestroy, this.moduleDestroy, this);
    };
    Link2.prototype.onToolbarAction = function(args) {
      var item = args.args.item;
      switch (item.subCommand) {
        case "OpenLink":
          this.parent.notify(openLink, args);
          break;
        case "EditLink":
          this.parent.notify(editLink, args);
          break;
        case "RemoveLink":
          this.parent.notify(unLink, args);
          break;
      }
    };
    Link2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(insertLink, this.linkDialog);
      this.parent.off(showLinkDialog, this.showDialog);
      this.parent.off(closeLinkDialog, this.closeDialog);
      this.parent.off(keyDown, this.onKeyDown);
      this.parent.off(insertCompleted, this.showLinkQuickToolbar);
      this.parent.off(clearDialogObj, this.clearDialogObj);
      this.parent.off(linkToolbarAction, this.onToolbarAction);
      this.parent.off(unLink, this.removeLink);
      this.parent.off(iframeMouseDown, this.onIframeMouseDown);
      this.parent.off(editLink, this.editLink);
      this.parent.off(openLink, this.openLink);
      this.parent.off(editAreaClick, this.editAreaClickHandler);
      this.parent.off(bindCssClass, this.setCssClass);
      this.parent.off(destroy, this.destroy);
      this.parent.off(moduleDestroy, this.moduleDestroy);
    };
    Link2.prototype.onIframeMouseDown = function() {
      if (this.dialogObj) {
        this.dialogObj.hide({ returnValue: true });
      }
    };
    Link2.prototype.updateCss = function(currentObj, e) {
      if (currentObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass)) {
          currentObj.setProperties({ cssClass: (currentObj.cssClass + " " + e.cssClass).trim() });
        } else {
          currentObj.setProperties({ cssClass: (currentObj.cssClass.replace(e.oldCssClass, "").trim() + " " + e.cssClass).trim() });
        }
      }
    };
    Link2.prototype.setCssClass = function(e) {
      this.updateCss(this.checkBoxObj, e);
      this.updateCss(this.dialogObj, e);
    };
    Link2.prototype.showLinkQuickToolbar = function(e) {
      if (!isNullOrUndefined(e.args) && e.args.action !== "enter" && e.args.action !== "space") {
        var pageX = void 0;
        var pageY = void 0;
        if (e.type !== "Links" || isNullOrUndefined(this.parent.quickToolbarModule) || isNullOrUndefined(this.parent.quickToolbarModule.linkQTBar)) {
          return;
        }
        this.quickToolObj = this.parent.quickToolbarModule;
        var parentTop = this.parent.element.getBoundingClientRect().top;
        var parentLeft = this.parent.element.getBoundingClientRect().left;
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        var target_1;
        [].forEach.call(e.elements, function(element, index) {
          if (index === 0) {
            target_1 = element.nodeName === "#text" ? element.parentNode : element;
          }
        });
        if (e.isNotify) {
          var tbElement = this.parent.toolbarModule.getToolbarElement();
          var linkTop = target_1.getBoundingClientRect().top;
          var linkLeft = target_1.getBoundingClientRect().left;
          var linkPos = linkTop - parentTop;
          var tbHeight = tbElement ? tbElement.offsetHeight + this.parent.toolbarModule.getExpandTBarPopHeight() : 0;
          pageX = this.parent.iframeSettings.enable ? parentLeft + linkLeft : target_1.getBoundingClientRect().left;
          pageY = window.pageYOffset + (this.parent.iframeSettings.enable ? parentTop + tbHeight + linkTop : parentTop + linkPos);
        } else {
          var args = void 0;
          args = e.args.touches ? e.args.changedTouches[0] : args = e.args;
          pageX = this.parent.iframeSettings.enable ? window.pageXOffset + parentLeft + args.clientX : args.pageX;
          pageY = this.parent.iframeSettings.enable ? window.pageYOffset + parentTop + args.clientY : args.pageY;
        }
        if (this.quickToolObj.linkQTBar) {
          this.quickToolObj.linkQTBar.showPopup(pageX, pageY, range.endContainer);
        }
      }
    };
    Link2.prototype.hideLinkQuickToolbar = function() {
      if (this.quickToolObj && this.quickToolObj.linkQTBar && document.body.contains(this.quickToolObj.linkQTBar.element)) {
        this.quickToolObj.linkQTBar.hidePopup();
      }
    };
    Link2.prototype.editAreaClickHandler = function(e) {
      if (this.parent.readonly) {
        this.hideLinkQuickToolbar();
        return;
      }
      var args = e.args;
      var showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
      if (args.which === 2 || showOnRightClick && args.which === 1 || !showOnRightClick && args.which === 3) {
        return;
      }
      if (this.parent.editorMode === "HTML" && this.parent.quickToolbarModule && this.parent.quickToolbarModule.linkQTBar) {
        this.quickToolObj = this.parent.quickToolbarModule;
        var target = args.target;
        target = this.getAnchorNode(target);
        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
        var isPopupOpen = this.quickToolObj.linkQTBar.element.classList.contains("e-rte-pop");
        if (target.nodeName === "A" && (target.childNodes.length > 0 && target.childNodes[0].nodeName !== "IMG") && e.args.target.nodeName !== "IMG" && !isNullOrUndefined(closest(this.parent.getRange().startContainer.parentElement, "A")) && !isNullOrUndefined(closest(this.parent.getRange().endContainer.parentElement, "A"))) {
          if (isPopupOpen) {
            return;
          }
          this.showLinkQuickToolbar({
            args,
            isNotify: false,
            type: "Links",
            elements: [args.target]
          });
        } else {
          this.hideLinkQuickToolbar();
        }
      }
    };
    Link2.prototype.onKeyDown = function(event2) {
      var originalEvent = event2.args;
      switch (originalEvent.action) {
        case "escape":
          if (!isNullOrUndefined(this.dialogObj)) {
            this.dialogObj.close();
          }
          break;
        case "insert-link":
          this.openDialog(true, event2);
          originalEvent.preventDefault();
          break;
      }
    };
    Link2.prototype.openDialog = function(isInternal, event2) {
      if (!isInternal) {
        this.parent.contentModule.getEditPanel().focus();
      }
      if (this.parent.editorMode === "HTML") {
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        var save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
        var selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        var selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        var eventArgs = {
          args: event2 ? event2.args : {
            item: { command: "Links", subCommand: "CreateLink" },
            originalEvent: void 0,
            name: !isInternal ? "showDialog" : null
          },
          selectNode: selectNodeEle,
          selection: save,
          selectParent: selectParentEle
        };
        this.linkDialog(eventArgs);
      } else {
        var textArea = this.parent.contentModule.getEditPanel();
        this.parent.formatter.editorManager.markdownSelection.save(textArea.selectionStart, textArea.selectionEnd);
        this.linkDialog({
          args: {
            item: { command: "Links", subCommand: "Link" },
            originalEvent: event2 && event2.args
          },
          member: "link",
          text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()),
          module: "Markdown",
          name: "insertLink"
        });
      }
    };
    Link2.prototype.showDialog = function() {
      this.openDialog(false);
      this.setCssClass({ cssClass: this.parent.cssClass });
    };
    Link2.prototype.closeDialog = function() {
      if (this.dialogObj) {
        this.dialogObj.hide({ returnValue: true });
      }
    };
    Link2.prototype.clearDialogObj = function() {
      if (this.dialogObj) {
        this.dialogObj.destroy();
        detach(this.dialogObj.element);
        this.dialogObj = null;
      }
    };
    Link2.prototype.linkDialog = function(e, inputDetails) {
      var _this = this;
      if (this.dialogObj) {
        this.dialogObj.hide({ returnValue: true });
        return;
      }
      if (this.parent.editorMode === "HTML" && (e.selectParent.length > 0 && !isNullOrUndefined(e.selectParent[0].classList) && e.selectParent[0].classList.contains("e-rte-anchor")) && isNullOrUndefined(inputDetails)) {
        this.editLink(e);
        return;
      }
      var linkWebAddress = this.i10n.getConstant("linkWebUrl");
      var linkDisplayText = this.i10n.getConstant("linkText");
      var linkTooltip = this.i10n.getConstant("linkTooltipLabel");
      var urlPlace = this.i10n.getConstant("linkurl");
      var textPlace = this.i10n.getConstant("textPlaceholder");
      var title = this.i10n.getConstant("linkTitle");
      var linkDialogEle = this.parent.createElement("div", {
        className: "e-rte-link-dialog " + this.parent.cssClass,
        id: this.rteID + "_rtelink"
      });
      this.parent.element.appendChild(linkDialogEle);
      var linkContent = this.parent.createElement("div", {
        className: "e-rte-linkcontent " + this.parent.cssClass,
        id: this.rteID + "_linkContent"
      });
      var htmlTextbox = this.parent.editorMode === "HTML" ? "<label>" + linkTooltip + '</label></div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" spellcheck="false" placeholder = "' + title + '"aria-label="' + this.i10n.getConstant("linkTitle") + '" class="e-input e-rte-linkTitle ' + this.parent.cssClass + '"></div><div class="e-rte-label ' + this.parent.cssClass + '"></div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="checkbox" class="e-rte-linkTarget ' + this.parent.cssClass + '"  data-role ="none"></div>' : "";
      var content = '<div class="e-rte-label ' + this.parent.cssClass + '"><label>' + linkWebAddress + '</label></div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" spellcheck="false" placeholder="' + urlPlace + '"aria-label="' + this.i10n.getConstant("linkWebUrl") + '" class="e-input e-rte-linkurl ' + this.parent.cssClass + '"/></div><div class="e-rte-label ' + this.parent.cssClass + '"><label>' + linkDisplayText + '</label></div><div class="e-rte-field ' + this.parent.cssClass + '"> <input type="text" data-role ="none" spellcheck="false" class="e-input e-rte-linkText ' + this.parent.cssClass + '"aria-label="' + this.i10n.getConstant("linkText") + '" placeholder="' + textPlace + '"></div><div class="e-rte-label ' + this.parent.cssClass + '">' + htmlTextbox;
      var contentElem = parseHtml(content);
      linkContent.appendChild(contentElem);
      var linkTarget = linkContent.querySelector(".e-rte-linkTarget");
      var linkUrl = linkContent.querySelector(".e-rte-linkurl");
      var linkText = linkContent.querySelector(".e-rte-linkText");
      var linkTitle = linkContent.querySelector(".e-rte-linkTitle");
      var linkOpenLabel = this.i10n.getConstant("linkOpenInNewWindow");
      this.checkBoxObj = new CheckBox({
        label: linkOpenLabel,
        checked: true,
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass
      });
      this.checkBoxObj.isStringTemplate = true;
      this.checkBoxObj.createElement = this.parent.createElement;
      this.checkBoxObj.appendTo(linkTarget);
      var selectText = this.parent.editorMode === "HTML" ? e.selection.getRange(this.parent.contentModule.getDocument()).toString() : e.text;
      var linkInsert = this.i10n.getConstant("dialogInsert");
      var linkCancel = this.i10n.getConstant("dialogCancel");
      var selection = e.selection;
      var selectObj = { selfLink: this, selection: e.selection, selectParent: e.selectParent, args: e.args };
      var dialogModel = {
        header: this.i10n.getConstant("linkHeader"),
        content: linkContent,
        cssClass: CLS_RTE_ELEMENTS + " " + this.parent.cssClass,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        showCloseIcon: true,
        closeOnEscape: true,
        width: Browser.isDevice ? "290px" : "310px",
        isModal: Browser.isDevice,
        buttons: [
          {
            click: this.insertlink.bind(selectObj),
            buttonModel: { content: linkInsert, cssClass: "e-flat e-insertLink " + this.parent.cssClass, isPrimary: true }
          },
          { click: this.cancelDialog.bind(selectObj), buttonModel: { cssClass: "e-flat " + this.parent.cssClass, content: linkCancel } }
        ],
        target: Browser.isDevice ? document.body : this.parent.element,
        animationSettings: { effect: "None" },
        close: function(event2) {
          _this.parent.isBlur = false;
          if (event2 && event2.event.returnValue) {
            if (_this.parent.editorMode === "HTML") {
              selection.restore();
            } else {
              _this.parent.formatter.editorManager.markdownSelection.restore(_this.parent.contentModule.getEditPanel());
            }
          }
          _this.dialogObj.destroy();
          detach(_this.dialogObj.element);
          var args = _this.dialogObj;
          _this.dialogRenderObj.close(args);
          _this.dialogObj = null;
        }
      };
      this.dialogObj = this.dialogRenderObj.render(dialogModel);
      this.dialogObj.createElement = this.parent.createElement;
      this.dialogObj.appendTo(linkDialogEle);
      linkDialogEle.style.maxHeight = "inherit";
      if (isNullOrUndefined(this.dialogObj)) {
        return;
      }
      if (!isNullOrUndefined(inputDetails)) {
        linkUrl.value = inputDetails.url;
        linkText.value = inputDetails.text;
        linkTitle.value = inputDetails.title;
        inputDetails.target ? this.checkBoxObj.checked = true : this.checkBoxObj.checked = false;
        this.dialogObj.header = inputDetails.header;
        this.dialogObj.element.querySelector(".e-insertLink").textContent = inputDetails.btnText;
      }
      this.checkUrl(false);
      if (this.parent.editorMode === "HTML" && isNullOrUndefined(inputDetails) && (!isNullOrUndefined(selectText) && selectText !== "" && e.selection.range.startOffset === 0 || e.selection.range.startOffset !== e.selection.range.endOffset) || e.module === "Markdown") {
        linkText.value = selectText;
      }
      EventHandler.add(this.parent.element.ownerDocument, "mousedown", this.onDocumentClick, this);
      if (this.quickToolObj) {
        this.hideLinkQuickToolbar();
        if (this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {
          this.quickToolObj.inlineQTBar.hidePopup();
        }
      }
    };
    Link2.prototype.insertlink = function(e) {
      var linkEle = this.selfLink.dialogObj.element;
      var linkUrl = linkEle.querySelector(".e-rte-linkurl").value;
      var linkText = linkEle.querySelector(".e-rte-linkText").value;
      var linkTitle;
      if (this.selfLink.parent.editorMode === "HTML") {
        linkTitle = linkEle.querySelector(".e-rte-linkTitle").value;
      }
      var target = this.selfLink.checkBoxObj.checked ? "_blank" : null;
      if (linkUrl === "") {
        this.selfLink.checkUrl(true);
        return;
      }
      if (!this.selfLink.isUrl(linkUrl)) {
        linkText = linkText === "" ? linkUrl : linkText;
        if (!this.selfLink.parent.enableAutoUrl) {
          linkUrl = linkUrl.indexOf("http") > -1 ? linkUrl : "http://" + linkUrl;
        } else {
          linkUrl = linkUrl;
        }
      } else {
        this.selfLink.checkUrl(false);
      }
      var proxy = this.selfLink;
      if (proxy.parent.editorMode === "HTML" && isNullOrUndefined(closest(this.selection.range.startContainer.parentNode, "[id='" + proxy.parent.contentModule.getPanel().id + "']"))) {
        proxy.parent.contentModule.getEditPanel().focus();
        if (Browser.isIE && proxy.parent.iframeSettings.enable) {
          this.selection.restore();
        }
        var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.parent.contentModule.getDocument());
        this.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.parent.contentModule.getDocument());
        this.selectParent = proxy.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
      }
      var value = {
        url: linkUrl,
        text: linkText,
        title: linkTitle,
        target,
        selection: this.selection,
        selectParent: this.selectParent
      };
      if (document.body.contains(proxy.dialogObj.element)) {
        this.selfLink.dialogObj.hide({ returnValue: false });
      }
      if (isIDevice2() && proxy.parent.iframeSettings.enable) {
        select("iframe", proxy.parent.element).contentWindow.focus();
      }
      if (proxy.parent.editorMode === "HTML") {
        this.selection.restore();
      }
      if (proxy.parent.formatter.getUndoRedoStack().length === 0) {
        proxy.parent.formatter.saveData();
      }
      var argsValue;
      if (!isNullOrUndefined(this.args) && this.args.code === "KeyK") {
        var originalEvent = this.args;
        extend(this.args, { item: { command: "Links", subCommand: "CreateLink" }, originalEvent }, true);
        var argsVal = {
          item: { command: "Links", subCommand: "CreateLink" },
          originalEvent
        };
        argsValue = argsVal;
      } else {
        argsValue = this.args;
      }
      this.selfLink.parent.formatter.process(this.selfLink.parent, argsValue, !isNullOrUndefined(this.args) && this.args.originalEvent, value);
      this.selfLink.parent.contentModule.getEditPanel().focus();
    };
    Link2.prototype.isUrl = function(url) {
      var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/gi;
      return regexp.test(url);
    };
    Link2.prototype.checkUrl = function(e) {
      var linkEle = this.dialogObj.element;
      var linkUrl = linkEle.querySelector(".e-rte-linkurl");
      if (e) {
        addClass([linkUrl], "e-error");
        linkUrl.setSelectionRange(0, linkUrl.value.length);
        linkUrl.focus();
      } else {
        removeClass([linkUrl], "e-error");
      }
    };
    Link2.prototype.removeLink = function(e) {
      if (this.parent.formatter.getUndoRedoStack().length === 0) {
        this.parent.formatter.saveData();
      }
      var selectParentEle = this.getAnchorNode(e.selectParent[0]);
      this.parent.formatter.process(this.parent, e.args, e.args, {
        selectNode: e.selectNode,
        selectParent: e.selectParent,
        selection: e.selection,
        text: selectParentEle.innerText,
        subCommand: e.args.item.subCommand
      });
      if (isIDevice2() && this.parent.iframeSettings.enable) {
        select("iframe", this.parent.element).contentWindow.focus();
      } else {
        this.parent.contentModule.getEditPanel().focus();
      }
      this.hideLinkQuickToolbar();
    };
    Link2.prototype.openLink = function(e) {
      var selectParentEle = this.getAnchorNode(e.selectParent[0]);
      if (selectParentEle.classList.contains("e-rte-anchor") || selectParentEle.tagName === "A") {
        this.parent.formatter.process(this.parent, e.args, e.args, {
          url: selectParentEle.href,
          text: selectParentEle.innerText,
          target: selectParentEle.target === "" ? "_self" : "_blank",
          selectNode: e.selectNode,
          subCommand: e.args.item.subCommand
        });
      }
    };
    Link2.prototype.getAnchorNode = function(element) {
      var selectParent = closest(element, "a");
      return selectParent ? selectParent : element;
    };
    Link2.prototype.editLink = function(e) {
      var selectedNode = this.getAnchorNode(e.selectNode[0]);
      var selectParentEle = this.getAnchorNode(e.selectParent[0]);
      selectParentEle = selectedNode.nodeName === "A" ? selectedNode : selectParentEle;
      if (selectParentEle.classList.contains("e-rte-anchor") || selectParentEle.tagName === "A") {
        var linkUpdate = this.i10n.getConstant("dialogUpdate");
        var inputDetails = {
          url: selectParentEle.getAttribute("href"),
          text: selectParentEle.innerText,
          title: selectParentEle.title,
          target: selectParentEle.target,
          header: this.i10n.getConstant("editLink"),
          btnText: linkUpdate
        };
        this.linkDialog(e, inputDetails);
      }
    };
    Link2.prototype.cancelDialog = function(e) {
      this.selfLink.parent.isBlur = false;
      this.selfLink.dialogObj.hide({ returnValue: true });
      if (isIDevice2()) {
        this.selection.restore();
      } else {
        this.selfLink.parent.contentModule.getEditPanel().focus();
      }
    };
    Link2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (!isNullOrUndefined(this.dialogObj) && // eslint-disable-next-line
      (!closest(target, "[id='" + this.dialogObj.element.id + "']") && this.parent.toolbarSettings.enable && this.parent.getToolbarElement() && !this.parent.getToolbarElement().contains(e.target) || (this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target) || this.parent.inlineMode.enable && !closest(target, "#" + this.dialogObj.element.id)) && !closest(target, "#" + this.parent.getID() + "_toolbar_CreateLink") && !target.querySelector("#" + this.parent.getID() + "_toolbar_CreateLink"))) {
        this.dialogObj.hide({ returnValue: true });
        EventHandler.remove(this.parent.element.ownerDocument, "mousedown", this.onDocumentClick);
        this.parent.isBlur = true;
        dispatchEvent(this.parent.element, "focusout");
      }
    };
    Link2.prototype.destroy = function() {
      this.removeEventListener();
    };
    Link2.prototype.moduleDestroy = function() {
      this.parent = null;
    };
    Link2.prototype.getModuleName = function() {
      return "link";
    };
    return Link2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/image-module.js
var Image = (
  /** @class */
  function() {
    function Image2(parent, serviceLocator) {
      this.isImgUploaded = false;
      this.isAllowedTypes = true;
      this.pageX = null;
      this.pageY = null;
      this.mouseX = null;
      this.deletedImg = [];
      this.parent = parent;
      this.rteID = parent.element.id;
      this.i10n = serviceLocator.getService("rteLocale");
      this.rendererFactory = serviceLocator.getService("rendererFactory");
      this.dialogRenderObj = serviceLocator.getService("dialogRenderObject");
      this.addEventListener();
    }
    Image2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(keyDown, this.onKeyDown, this);
      this.parent.on(keyUp, this.onKeyUp, this);
      this.parent.on(insertImage, this.insertImage, this);
      this.parent.on(showImageDialog, this.showDialog, this);
      this.parent.on(closeImageDialog, this.closeDialog, this);
      this.parent.on(windowResize, this.onWindowResize, this);
      this.parent.on(insertCompleted, this.showImageQuickToolbar, this);
      this.parent.on(clearDialogObj, this.clearDialogObj, this);
      this.parent.on(imageToolbarAction, this.onToolbarAction, this);
      this.parent.on(imageCaption, this.caption, this);
      this.parent.on(imageDelete, this.deleteImg, this);
      this.parent.on(imageLink, this.insertImgLink, this);
      this.parent.on(imageAlt, this.insertAltText, this);
      this.parent.on(editAreaClick, this.editAreaClickHandler, this);
      this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);
      this.parent.on(imageSize, this.imageSize, this);
      this.parent.on(dropDownSelect, this.alignmentSelect, this);
      this.parent.on(initialEnd, this.afterRender, this);
      this.parent.on(dynamicModule, this.afterRender, this);
      this.parent.on(paste, this.imagePaste, this);
      this.parent.on(bindCssClass, this.setCssClass, this);
      this.parent.on(destroy, this.removeEventListener, this);
      this.parent.on(moduleDestroy, this.moduleDestroy, this);
    };
    Image2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(keyDown, this.onKeyDown);
      this.parent.off(keyUp, this.onKeyUp);
      this.parent.off(windowResize, this.onWindowResize);
      this.parent.off(insertImage, this.insertImage);
      this.parent.off(showImageDialog, this.showDialog);
      this.parent.off(closeImageDialog, this.closeDialog);
      this.parent.off(insertCompleted, this.showImageQuickToolbar);
      this.parent.off(clearDialogObj, this.clearDialogObj);
      this.parent.off(imageCaption, this.caption);
      this.parent.off(imageToolbarAction, this.onToolbarAction);
      this.parent.off(imageDelete, this.deleteImg);
      this.parent.off(imageLink, this.insertImgLink);
      this.parent.off(imageAlt, this.insertAltText);
      this.parent.off(editAreaClick, this.editAreaClickHandler);
      this.parent.off(iframeMouseDown, this.onIframeMouseDown);
      this.parent.off(imageSize, this.imageSize);
      this.parent.off(dropDownSelect, this.alignmentSelect);
      this.parent.off(initialEnd, this.afterRender);
      this.parent.off(dynamicModule, this.afterRender);
      this.parent.off(paste, this.imagePaste);
      this.parent.off(bindCssClass, this.setCssClass);
      this.parent.off(destroy, this.removeEventListener);
      this.parent.off(moduleDestroy, this.moduleDestroy);
      var dropElement = this.parent.iframeSettings.enable ? this.parent.inputElement.ownerDocument : this.parent.inputElement;
      dropElement.removeEventListener("drop", this.dragDrop.bind(this), true);
      dropElement.removeEventListener("dragstart", this.dragStart.bind(this), true);
      dropElement.removeEventListener("dragenter", this.dragEnter.bind(this), true);
      dropElement.removeEventListener("dragover", this.dragOver.bind(this), true);
      if (!isNullOrUndefined(this.contentModule)) {
        EventHandler.remove(this.contentModule.getEditPanel(), Browser.touchEndEvent, this.imageClick);
        this.parent.formatter.editorManager.observer.off(checkUndo, this.undoStack);
        if (this.parent.insertImageSettings.resize) {
          EventHandler.remove(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.resizeStart);
          EventHandler.remove(this.parent.element.ownerDocument, "mousedown", this.onDocumentClick);
          EventHandler.remove(this.contentModule.getEditPanel(), "cut", this.onCutHandler);
        }
      }
    };
    Image2.prototype.updateCss = function(currentObj, e) {
      if (currentObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass)) {
          currentObj.setProperties({ cssClass: (currentObj.cssClass + " " + e.cssClass).trim() });
        } else {
          currentObj.setProperties({ cssClass: (currentObj.cssClass.replace(e.oldCssClass, "").trim() + " " + e.cssClass).trim() });
        }
      }
    };
    Image2.prototype.setCssClass = function(e) {
      if (this.popupObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass)) {
          addClass([this.popupObj.element], e.cssClass);
        } else {
          removeClass([this.popupObj.element], e.oldCssClass);
          addClass([this.popupObj.element], e.cssClass);
        }
      }
      this.updateCss(this.checkBoxObj, e);
      this.updateCss(this.widthNum, e);
      this.updateCss(this.heightNum, e);
      this.updateCss(this.uploadObj, e);
      this.updateCss(this.dialogObj, e);
    };
    Image2.prototype.onIframeMouseDown = function() {
      if (this.dialogObj) {
        this.dialogObj.hide({ returnValue: true });
      }
    };
    Image2.prototype.afterRender = function() {
      this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
      EventHandler.add(this.contentModule.getEditPanel(), Browser.touchEndEvent, this.imageClick, this);
      if (this.parent.insertImageSettings.resize) {
        EventHandler.add(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.resizeStart, this);
        EventHandler.add(this.parent.element.ownerDocument, "mousedown", this.onDocumentClick, this);
        EventHandler.add(this.contentModule.getEditPanel(), "cut", this.onCutHandler, this);
      }
      var dropElement = this.parent.iframeSettings.enable ? this.parent.inputElement.ownerDocument : this.parent.inputElement;
      dropElement.addEventListener("drop", this.dragDrop.bind(this), true);
      dropElement.addEventListener("dragstart", this.dragStart.bind(this), true);
      dropElement.addEventListener("dragenter", this.dragOver.bind(this), true);
      dropElement.addEventListener("dragover", this.dragOver.bind(this), true);
    };
    Image2.prototype.undoStack = function(args) {
      if (args.subCommand.toLowerCase() === "undo" || args.subCommand.toLowerCase() === "redo") {
        for (var i = 0; i < this.parent.formatter.getUndoRedoStack().length; i++) {
          var temp = this.parent.createElement("div");
          var contentElem = this.parent.formatter.getUndoRedoStack()[i].text;
          temp.appendChild(contentElem.cloneNode(true));
          var img = temp.querySelectorAll("img");
          if (temp.querySelector(".e-img-resize") && img.length > 0) {
            for (var j = 0; j < img.length; j++) {
              img[j].style.outline = "";
            }
            detach(temp.querySelector(".e-img-resize"));
            var clonedElement = temp.cloneNode(true);
            var fragment = document.createDocumentFragment();
            while (clonedElement.firstChild) {
              fragment.appendChild(clonedElement.firstChild);
            }
            this.parent.formatter.getUndoRedoStack()[i].text = fragment;
          }
        }
      }
    };
    Image2.prototype.resizeEnd = function(e) {
      this.resizeBtnInit();
      this.imgEle.parentElement.style.cursor = "auto";
      if (Browser.isDevice) {
        removeClass([e.target.parentElement], "e-mob-span");
      }
      var args = { event: e, requestType: "images" };
      this.parent.trigger(resizeStop, args);
      var pageX = this.getPointX(e);
      var pageY = this.parent.iframeSettings.enable ? window.pageYOffset + this.parent.element.getBoundingClientRect().top + e.clientY : e.pageY;
      this.parent.formatter.editorManager.observer.on(checkUndo, this.undoStack, this);
      this.parent.formatter.saveData();
    };
    Image2.prototype.resizeStart = function(e, ele) {
      var _this = this;
      if (this.parent.readonly) {
        return;
      }
      var target = ele ? ele : e.target;
      this.prevSelectedImgEle = this.imgEle;
      if (target.tagName === "IMG") {
        this.parent.preventDefaultResize(e);
        var img = target;
        if (this.imgResizeDiv && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {
          detach(this.imgResizeDiv);
        }
        this.imageResize(img);
      }
      if (target.classList.contains("e-rte-imageboxmark")) {
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
          this.parent.formatter.saveData();
        }
        this.pageX = this.getPointX(e);
        this.pageY = this.getPointY(e);
        e.preventDefault();
        e.stopImmediatePropagation();
        this.resizeBtnInit();
        if (this.quickToolObj) {
          this.quickToolObj.imageQTBar.hidePopup();
        }
        if (target.classList.contains("e-rte-topLeft")) {
          this.resizeBtnStat.topLeft = true;
        }
        if (target.classList.contains("e-rte-topRight")) {
          this.resizeBtnStat.topRight = true;
        }
        if (target.classList.contains("e-rte-botLeft")) {
          this.resizeBtnStat.botLeft = true;
        }
        if (target.classList.contains("e-rte-botRight")) {
          this.resizeBtnStat.botRight = true;
        }
        if (Browser.isDevice && this.contentModule.getEditPanel().contains(this.imgResizeDiv) && !this.imgResizeDiv.classList.contains("e-mob-span")) {
          addClass([this.imgResizeDiv], "e-mob-span");
        } else {
          var args = { event: e, requestType: "images" };
          this.parent.trigger(resizeStart, args, function(resizeStartArgs) {
            if (resizeStartArgs.cancel) {
              _this.cancelResizeAction();
            }
          });
        }
        EventHandler.add(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd, this);
      }
    };
    Image2.prototype.imageClick = function(e) {
      if (Browser.isDevice) {
        if (e.target.tagName === "IMG" && e.target.parentElement.tagName === "A" || e.target.tagName === "IMG") {
          this.contentModule.getEditPanel().setAttribute("contenteditable", "false");
          e.target.focus();
        } else {
          if (!this.parent.readonly) {
            this.contentModule.getEditPanel().setAttribute("contenteditable", "true");
          }
        }
      }
      if (e.target.tagName === "IMG" && e.target.parentElement.tagName === "A") {
        e.preventDefault();
      }
    };
    Image2.prototype.onCutHandler = function() {
      if (this.imgResizeDiv && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {
        this.cancelResizeAction();
      }
    };
    Image2.prototype.imageResize = function(e) {
      this.resizeBtnInit();
      this.imgEle = e;
      addClass([this.imgEle], "e-resize");
      this.imgResizeDiv = this.parent.createElement("span", { className: "e-img-resize " + this.parent.cssClass, id: this.rteID + "_imgResize" });
      this.imgResizeDiv.appendChild(this.parent.createElement("span", {
        className: "e-rte-imageboxmark e-rte-topLeft " + this.parent.cssClass,
        styles: "cursor: nwse-resize"
      }));
      this.imgResizeDiv.appendChild(this.parent.createElement("span", {
        className: "e-rte-imageboxmark e-rte-topRight " + this.parent.cssClass,
        styles: "cursor: nesw-resize"
      }));
      this.imgResizeDiv.appendChild(this.parent.createElement("span", {
        className: "e-rte-imageboxmark e-rte-botLeft " + this.parent.cssClass,
        styles: "cursor: nesw-resize"
      }));
      this.imgResizeDiv.appendChild(this.parent.createElement("span", {
        className: "e-rte-imageboxmark e-rte-botRight " + this.parent.cssClass,
        styles: "cursor: nwse-resize"
      }));
      if (Browser.isDevice) {
        addClass([this.imgResizeDiv], "e-mob-rte");
      }
      e.style.outline = "2px solid #4a90e2";
      this.imgResizePos(e, this.imgResizeDiv);
      this.resizeImgDupPos(e);
      this.contentModule.getEditPanel().appendChild(this.imgResizeDiv);
      EventHandler.add(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing, this);
    };
    Image2.prototype.getPointX = function(e) {
      if (e.touches && e.touches.length) {
        return e.touches[0].pageX;
      } else {
        return e.pageX;
      }
    };
    Image2.prototype.getPointY = function(e) {
      if (e.touches && e.touches.length) {
        return e.touches[0].pageY;
      } else {
        return e.pageY;
      }
    };
    Image2.prototype.imgResizePos = function(e, imgResizeDiv) {
      var pos = this.calcPos(e);
      var top2 = pos.top;
      var left = pos.left;
      var imgWid = e.getBoundingClientRect().width;
      var imgHgt = e.getBoundingClientRect().height;
      var borWid = Browser.isDevice ? 4 * parseInt(e.style.outline.slice(-3), 10) + 2 : 2 * parseInt(e.style.outline.slice(-3), 10) + 2;
      var devWid = Browser.isDevice ? 0 : 2;
      imgResizeDiv.querySelector(".e-rte-botLeft").style.left = left - borWid + "px";
      imgResizeDiv.querySelector(".e-rte-botLeft").style.top = imgHgt - borWid + top2 + "px";
      imgResizeDiv.querySelector(".e-rte-botRight").style.left = imgWid - (borWid - devWid) + left + "px";
      imgResizeDiv.querySelector(".e-rte-botRight").style.top = imgHgt - borWid + top2 + "px";
      imgResizeDiv.querySelector(".e-rte-topRight").style.left = imgWid - (borWid - devWid) + left + "px";
      imgResizeDiv.querySelector(".e-rte-topRight").style.top = top2 - borWid + "px";
      imgResizeDiv.querySelector(".e-rte-topLeft").style.left = left - borWid + "px";
      imgResizeDiv.querySelector(".e-rte-topLeft").style.top = top2 - borWid + "px";
    };
    Image2.prototype.calcPos = function(elem) {
      var ignoreOffset = ["TD", "TH", "TABLE", "A"];
      var parentOffset = { top: 0, left: 0 };
      var elementOffset;
      var doc = elem.ownerDocument;
      var offsetParent = (elem.offsetParent && (elem.offsetParent.classList.contains("e-img-caption") || ignoreOffset.indexOf(elem.offsetParent.tagName) > -1) ? closest(elem, "#" + this.parent.getID() + "_rte-edit-view") : elem.offsetParent) || doc.documentElement;
      while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && offsetParent.style.position === "static") {
        offsetParent = offsetParent.parentNode;
      }
      if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
        parentOffset = offsetParent.getBoundingClientRect();
      }
      if (elem.offsetParent && elem.offsetParent.classList.contains("e-img-caption")) {
        elementOffset = elem.getBoundingClientRect();
        return {
          top: elementOffset.top - parentOffset.top,
          left: elementOffset.left - parentOffset.left
        };
      } else {
        return {
          top: elem.offsetTop,
          left: elem.offsetLeft
        };
      }
    };
    Image2.prototype.setAspectRatio = function(img, expectedX, expectedY, e) {
      if (isNullOrUndefined(img.width)) {
        return;
      }
      var width = img.style.width !== "" ? img.style.width.match(/^\d+(\.\d*)?%$/g) ? parseFloat(img.style.width) : parseInt(img.style.width, 10) : img.width;
      var height = img.style.height !== "" ? parseInt(img.style.height, 10) : img.height;
      if (width > height) {
        img.style.minWidth = this.parent.insertImageSettings.minWidth === 0 ? "20px" : formatUnit(this.parent.insertImageSettings.minWidth);
        if (this.parent.insertImageSettings.resizeByPercent) {
          if (parseInt("" + img.getBoundingClientRect().width, 10) !== 0 && parseInt("" + width, 10) !== 0) {
            var original = img.offsetWidth + this.mouseX;
            var finalWidthByPerc = original / img.offsetWidth * (parseFloat(img.style.width).toString() === "NaN" ? img.offsetWidth / parseFloat(getComputedStyle(this.parent.element).width) * 100 : parseFloat(img.style.width));
            img.style.width = (finalWidthByPerc > 3 ? finalWidthByPerc : 3) + "%";
          } else {
            img.style.width = this.pixToPerc(width / height * expectedY, img.previousElementSibling || img.parentElement) + "%";
          }
          img.style.height = null;
          img.removeAttribute("height");
        } else if (img.style.width === "" && img.style.height !== "") {
          img.style.height = expectedY + "px";
        } else if (img.style.width !== "" && img.style.height === "") {
          var currentWidth = width / height * expectedY + width / height < this.parent.inputElement.getBoundingClientRect().right - 32 ? width / height * expectedY + width / height : this.parent.inputElement.getBoundingClientRect().right - 32;
          img.style.width = currentWidth.toString() + "px";
          img.style.height = expectedY + "px";
        } else if (img.style.width !== "") {
          var currentWidth = width / height * expectedY < this.parent.inputElement.getBoundingClientRect().right - 32 ? width / height * expectedY : this.parent.inputElement.getBoundingClientRect().right - 32;
          img.style.width = currentWidth + "px";
          img.style.height = expectedY + "px";
        } else {
          if (this.parent.iframeSettings.enable) {
            img.setAttribute("width", (img.width + this.mouseX).toString());
          } else {
            var currentWidth = img.offsetWidth === 0 ? img.width + this.mouseX + parseInt(img.style.outlineWidth.split("p")[0], 10) : img.offsetWidth + this.mouseX;
            img.setAttribute("width", currentWidth.toString());
          }
        }
      } else if (height > width) {
        if (this.parent.insertImageSettings.resizeByPercent) {
          if (parseInt("" + img.getBoundingClientRect().width, 10) !== 0 && parseInt("" + width, 10) !== 0) {
            var original = img.offsetWidth + this.mouseX;
            var finalWidthByPerc = original / img.offsetWidth * (parseFloat(img.style.width).toString() === "NaN" ? img.offsetWidth / parseFloat(getComputedStyle(this.parent.element).width) * 100 : parseFloat(img.style.width));
            img.style.width = (finalWidthByPerc > 3 ? finalWidthByPerc : 3) + "%";
          } else {
            img.style.width = this.pixToPerc(expectedX / height * expectedY, img.previousElementSibling || img.parentElement) + "%";
          }
          img.style.height = null;
          img.removeAttribute("height");
        } else if (img.style.width !== "") {
          img.style.width = expectedX + "px";
          img.style.height = height / width * expectedX + "px";
        } else {
          img.setAttribute("width", this.resizeBtnStat.botRight ? (this.getPointX(e.event) - img.getBoundingClientRect().left).toString() : expectedX.toString());
        }
      } else {
        if (this.parent.insertImageSettings.resizeByPercent) {
          img.style.width = this.pixToPerc(expectedX, img.previousElementSibling || img.parentElement) + "%";
          img.style.height = null;
          img.removeAttribute("height");
        } else {
          img.style.width = expectedX + "px";
          img.style.height = expectedX + "px";
        }
      }
    };
    Image2.prototype.pixToPerc = function(expected, parentEle) {
      return expected / parseFloat(getComputedStyle(parentEle).width) * 100;
    };
    Image2.prototype.imgDupMouseMove = function(width, height, e) {
      var _this = this;
      var args = { event: e, requestType: "images" };
      this.parent.trigger(onResize, args, function(resizingArgs) {
        if (resizingArgs.cancel) {
          _this.cancelResizeAction();
        } else {
          if (parseInt(_this.parent.insertImageSettings.minWidth, 10) >= parseInt(width, 10) || parseInt(_this.parent.getInsertImgMaxWidth(), 10) <= parseInt(width, 10) && isNullOrUndefined(_this.imgEle.style.width)) {
            return;
          }
          if (!_this.parent.insertImageSettings.resizeByPercent && (parseInt(_this.parent.insertImageSettings.minHeight, 10) >= parseInt(height, 10) || parseInt(_this.parent.insertImageSettings.maxHeight, 10) <= parseInt(height, 10))) {
            return;
          }
          _this.imgEle.parentElement.style.cursor = "pointer";
          _this.setAspectRatio(_this.imgEle, parseInt(width, 10), parseInt(height, 10), args);
          _this.resizeImgDupPos(_this.imgEle);
          _this.imgResizePos(_this.imgEle, _this.imgResizeDiv);
          _this.parent.setContentHeight("", false);
        }
      });
    };
    Image2.prototype.resizing = function(e) {
      if (!this.parent) {
        this.cancelResizeAction();
        return;
      }
      if (this.imgEle.offsetWidth >= this.parent.getInsertImgMaxWidth()) {
        this.imgEle.style.maxHeight = this.imgEle.offsetHeight + "px";
      } else if (isNullOrUndefined(this.parent.insertImageSettings.maxHeight)) {
        this.imgEle.style.maxHeight = "";
      }
      this.imgEle.style.maxWidth = this.parent.getInsertImgMaxWidth() + "px";
      var pageX = this.getPointX(e);
      var pageY = this.getPointY(e);
      var mouseX = this.resizeBtnStat.botLeft || this.resizeBtnStat.topLeft ? -(pageX - this.pageX) : pageX - this.pageX;
      var mouseY = this.resizeBtnStat.botLeft || this.resizeBtnStat.topLeft ? -(pageY - this.pageY) : pageY - this.pageY;
      var width = parseInt(this.imgDupPos.width, 10) + mouseX;
      var height = parseInt(this.imgDupPos.height, 10) + mouseY;
      this.mouseX = mouseX;
      this.pageX = pageX;
      this.pageY = pageY;
      if (this.resizeBtnStat.botRight) {
        this.imgDupMouseMove(width + "px", height + "px", e);
      } else if (this.resizeBtnStat.botLeft) {
        this.imgDupMouseMove(width + "px", height + "px", e);
      } else if (this.resizeBtnStat.topRight) {
        this.imgDupMouseMove(width + "px", height + "px", e);
      } else if (this.resizeBtnStat.topLeft) {
        this.imgDupMouseMove(width + "px", height + "px", e);
      }
    };
    Image2.prototype.cancelResizeAction = function() {
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);
      if (this.imgEle && this.imgResizeDiv && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {
        detach(this.imgResizeDiv);
        this.imgEle.style.outline = "";
        this.imgResizeDiv = null;
        this.pageX = null;
        this.pageY = null;
      }
    };
    Image2.prototype.resizeImgDupPos = function(e) {
      this.imgDupPos = {
        width: e.style.width !== "" && (this.parent.insertImageSettings && !this.parent.insertImageSettings.resizeByPercent) ? this.imgEle.style.width : e.width + "px",
        height: e.style.height !== "" ? this.imgEle.style.height : e.height + "px"
      };
    };
    Image2.prototype.resizeBtnInit = function() {
      return this.resizeBtnStat = { botLeft: false, botRight: false, topRight: false, topLeft: false };
    };
    Image2.prototype.onToolbarAction = function(args) {
      if (isIDevice2()) {
        this.parent.notify(selectionRestore, {});
      }
      var item = args.args.item;
      switch (item.subCommand) {
        case "Replace":
          if (this.parent.fileManagerSettings.enable) {
            this.parent.notify(renderFileManager, args);
          } else {
            this.parent.notify(insertImage, args);
          }
          break;
        case "Caption":
          this.parent.notify(imageCaption, args);
          break;
        case "InsertLink":
          this.parent.notify(imageLink, args);
          break;
        case "AltText":
          this.parent.notify(imageAlt, args);
          break;
        case "Remove":
          this.parent.notify(imageDelete, args);
          break;
        case "Dimension":
          this.parent.notify(imageSize, args);
          break;
        case "OpenImageLink":
          this.openImgLink(args);
          break;
        case "EditImageLink":
          this.editImgLink(args);
          break;
        case "RemoveImageLink":
          this.removeImgLink(args);
          break;
      }
    };
    Image2.prototype.openImgLink = function(e) {
      var target = e.selectParent[0].parentNode.target === "" ? "_self" : "_blank";
      this.parent.formatter.process(this.parent, e.args, e.args, {
        url: e.selectParent[0].parentNode.href,
        target,
        selectNode: e.selectNode,
        subCommand: e.args.item.subCommand
      });
    };
    Image2.prototype.editImgLink = function(e) {
      var selectParentEle = e.selectParent[0].parentNode;
      var linkUpdate = this.i10n.getConstant("dialogUpdate");
      var inputDetails = {
        url: selectParentEle.href,
        target: selectParentEle.target,
        header: "Edit Link",
        btnText: linkUpdate
      };
      this.insertImgLink(e, inputDetails);
    };
    Image2.prototype.removeImgLink = function(e) {
      if (Browser.isIE) {
        this.contentModule.getEditPanel().focus();
      }
      e.selection.restore();
      var isCapLink = this.contentModule.getEditPanel().contains(this.captionEle) && select("a", this.captionEle) ? true : false;
      var selectParent = isCapLink ? [this.captionEle] : [e.selectNode[0].parentElement];
      this.parent.formatter.process(this.parent, e.args, e.args, {
        insertElement: e.selectNode[0],
        selectParent,
        selection: e.selection,
        subCommand: e.args.item.subCommand
      });
      if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {
        this.quickToolObj.imageQTBar.hidePopup();
        if (!isNullOrUndefined(e.selectParent)) {
          removeClass([e.selectParent[0]], "e-img-focus");
        }
      }
      if (isCapLink) {
        select(".e-img-inner", this.captionEle).focus();
      }
    };
    Image2.prototype.onKeyDown = function(event2) {
      var originalEvent = event2.args;
      var range;
      var save;
      var selectNodeEle;
      var selectParentEle;
      this.deletedImg = [];
      var isCursor;
      var keyCodeValues = [
        27,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        44,
        45,
        9,
        16,
        17,
        18,
        19,
        20,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        91,
        92,
        93,
        144,
        145,
        182,
        183
      ];
      if (this.parent.editorMode === "HTML") {
        range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        isCursor = range.startContainer === range.endContainer && range.startOffset === range.endOffset;
      }
      if (!isCursor && this.parent.editorMode === "HTML" && keyCodeValues.indexOf(originalEvent.which) < 0) {
        var nodes = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        for (var i = 0; i < nodes.length; i++) {
          if (nodes[i].nodeName === "IMG") {
            this.deletedImg.push(nodes[i]);
          }
        }
      }
      if (this.parent.editorMode === "HTML" && (originalEvent.which === 8 && originalEvent.code === "Backspace" || originalEvent.which === 46 && originalEvent.code === "Delete")) {
        var isCursor_1 = range.startContainer === range.endContainer && range.startOffset === range.endOffset;
        if (originalEvent.which === 8 && originalEvent.code === "Backspace" && isCursor_1) {
          this.checkImageBack(range);
        } else if (originalEvent.which === 46 && originalEvent.code === "Delete" && isCursor_1) {
          this.checkImageDel(range);
        }
      }
      if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection) && originalEvent.code !== "KeyK") {
        range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        if (!originalEvent.ctrlKey && originalEvent.key && (originalEvent.key.length === 1 || originalEvent.action === "enter") && (!isNullOrUndefined(selectParentEle[0]) && selectParentEle[0].tagName === "IMG") && selectParentEle[0].parentElement) {
          var prev = selectParentEle[0].parentElement.childNodes[0];
          if (this.contentModule.getEditPanel().querySelector(".e-img-resize")) {
            this.removeResizeEle();
          }
          this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), prev, prev, prev.textContent.length, prev.textContent.length);
          removeClass([selectParentEle[0]], "e-img-focus");
          this.quickToolObj.imageQTBar.hidePopup();
        }
      }
      if (originalEvent.ctrlKey && (originalEvent.keyCode === 89 || originalEvent.keyCode === 90)) {
        this.undoStack({ subCommand: originalEvent.keyCode === 90 ? "undo" : "redo" });
      }
      if (originalEvent.keyCode === 8 || originalEvent.keyCode === 46) {
        if (selectNodeEle && selectNodeEle[0].nodeName === "IMG" && selectNodeEle.length < 1) {
          if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection)) {
            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
          }
          originalEvent.preventDefault();
          var event_1 = {
            selectNode: selectNodeEle,
            selection: save,
            selectParent: selectParentEle,
            args: {
              item: { command: "Images", subCommand: "Remove" },
              originalEvent
            }
          };
          this.deleteImg(event_1, originalEvent.keyCode);
        }
        if (this.parent.contentModule.getEditPanel().querySelector(".e-img-resize")) {
          this.removeResizeEle();
        }
      }
      if (originalEvent.code === "Backspace") {
        originalEvent.action = "backspace";
      }
      switch (originalEvent.action) {
        case "escape":
          if (!isNullOrUndefined(this.dialogObj)) {
            this.dialogObj.close();
          }
          break;
        case "backspace":
        case "delete":
          for (var i = 0; i < this.deletedImg.length; i++) {
            var src = this.deletedImg[i].src;
            this.imageRemovePost(src);
          }
          if (this.parent.editorMode !== "Markdown") {
            if (range.startContainer.nodeType === 3) {
              if (originalEvent.code === "Backspace") {
                if (range.startContainer.previousElementSibling && range.startOffset === 0 && range.startContainer.previousElementSibling.classList.contains(CLS_CAPTION) && range.startContainer.previousElementSibling.classList.contains(CLS_CAPINLINE)) {
                  detach(range.startContainer.previousElementSibling);
                }
              } else {
                if (range.startContainer.nextElementSibling && range.endContainer.textContent.length === range.endOffset && range.startContainer.nextElementSibling.classList.contains(CLS_CAPTION) && range.startContainer.nextElementSibling.classList.contains(CLS_CAPINLINE)) {
                  detach(range.startContainer.nextElementSibling);
                }
              }
            } else if (range.startContainer.nodeType === 1 && range.startContainer.querySelector("." + CLS_CAPTION + "." + CLS_CAPINLINE)) {
              detach(range.startContainer.querySelector("." + CLS_CAPTION + "." + CLS_CAPINLINE));
            } else if (range.startContainer.nodeType === 1 && range.startContainer.querySelector("." + CLS_CAPTION + "." + CLS_IMGBREAK)) {
              detach(range.startContainer.querySelector("." + CLS_CAPTION + "." + CLS_IMGBREAK));
            }
          }
          break;
        case "insert-image":
          if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection)) {
            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
          }
          this.openDialog(true, originalEvent, save, selectNodeEle, selectParentEle);
          originalEvent.preventDefault();
          break;
      }
    };
    Image2.prototype.openDialog = function(isInternal, event2, selection, ele, parentEle) {
      var range;
      var save;
      var selectNodeEle;
      var selectParentEle;
      if (!isInternal && !isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection)) {
        range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
        selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
      } else {
        save = selection;
        selectNodeEle = ele;
        selectParentEle = parentEle;
      }
      if (this.parent.editorMode === "HTML") {
        this.insertImage({
          args: {
            item: { command: "Images", subCommand: "Image" },
            originalEvent: event2,
            name: !isInternal ? "showDialog" : null
          },
          selectNode: selectNodeEle,
          selection: save,
          selectParent: selectParentEle
        });
      } else {
        this.insertImage({
          args: {
            item: { command: "Images", subCommand: "Image" },
            originalEvent: event2,
            name: !isInternal ? "showDialog" : null
          },
          member: "image",
          text: this.parent.formatter.editorManager.markdownSelection.getSelectedText(this.parent.contentModule.getEditPanel()),
          module: "Markdown",
          name: "insertImage"
        });
      }
    };
    Image2.prototype.showDialog = function() {
      this.openDialog(false);
      this.setCssClass({ cssClass: this.parent.cssClass });
    };
    Image2.prototype.closeDialog = function() {
      if (this.dialogObj) {
        this.dialogObj.hide({ returnValue: true });
      }
    };
    Image2.prototype.onKeyUp = function(event2) {
      if (!isNullOrUndefined(this.deletedImg) && this.deletedImg.length > 0) {
        for (var i = 0; i < this.deletedImg.length; i++) {
          var args = {
            element: this.deletedImg[i],
            src: this.deletedImg[i].getAttribute("src")
          };
          this.parent.trigger(afterImageDelete, args);
        }
      }
    };
    Image2.prototype.checkImageBack = function(range) {
      if (range.startContainer.nodeName === "#text" && range.startOffset === 0 && !isNullOrUndefined(range.startContainer.previousSibling) && range.startContainer.previousSibling.nodeName === "IMG") {
        this.deletedImg.push(range.startContainer.previousSibling);
      } else if (range.startContainer.nodeName !== "#text" && !isNullOrUndefined(range.startContainer.childNodes[range.startOffset - 1]) && range.startContainer.childNodes[range.startOffset - 1].nodeName === "IMG") {
        this.deletedImg.push(range.startContainer.childNodes[range.startOffset - 1]);
      }
    };
    Image2.prototype.checkImageDel = function(range) {
      if (range.startContainer.nodeName === "#text" && range.startOffset === range.startContainer.textContent.length && !isNullOrUndefined(range.startContainer.nextSibling) && range.startContainer.nextSibling.nodeName === "IMG") {
        this.deletedImg.push(range.startContainer.nextSibling);
      } else if (range.startContainer.nodeName !== "#text" && !isNullOrUndefined(range.startContainer.childNodes[range.startOffset]) && range.startContainer.childNodes[range.startOffset].nodeName === "IMG") {
        this.deletedImg.push(range.startContainer.childNodes[range.startOffset]);
      }
    };
    Image2.prototype.alignmentSelect = function(e) {
      var item = e.item;
      if (!document.body.contains(document.body.querySelector(".e-rte-quick-toolbar")) || item.command !== "Images") {
        return;
      }
      var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
      var selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
      selectNodeEle = selectNodeEle[0].nodeName === "IMG" ? selectNodeEle : [this.imgEle];
      var args = { args: e, selectNode: selectNodeEle };
      if (this.parent.formatter.getUndoRedoStack().length === 0) {
        this.parent.formatter.saveData();
      }
      switch (item.subCommand) {
        case "JustifyLeft":
          this.alignImage(args, "JustifyLeft");
          break;
        case "JustifyCenter":
          this.alignImage(args, "JustifyCenter");
          break;
        case "JustifyRight":
          this.alignImage(args, "JustifyRight");
          break;
        case "Inline":
          this.inline(args);
          break;
        case "Break":
          this.break(args);
          break;
      }
      if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {
        this.quickToolObj.imageQTBar.hidePopup();
        removeClass([selectNodeEle[0]], "e-img-focus");
      }
      this.cancelResizeAction();
    };
    Image2.prototype.imageWithLinkQTBarItemUpdate = function() {
      var separator;
      var items = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll(".e-toolbar-item");
      for (var i = 0; i < items.length; i++) {
        if (items[i].getAttribute("title") === this.i10n.getConstant("openLink") || items[i].getAttribute("title") === this.i10n.getConstant("editLink") || items[i].getAttribute("title") === this.i10n.getConstant("removeLink")) {
          addClass([items[i]], "e-link-groups");
          items[i].style.display = "none";
        } else if (items[i].getAttribute("title") === "Insert Link") {
          items[i].style.display = "";
        } else if (items[i].classList.contains("e-rte-horizontal-separator")) {
          separator = items[i];
          detach(items[i]);
        }
      }
      var newItems = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll(".e-toolbar-item:not(.e-link-groups)");
      this.quickToolObj.imageQTBar.addQTBarItem(["-"], Math.round(newItems.length / 2));
    };
    Image2.prototype.showImageQuickToolbar = function(e) {
      var _this = this;
      if (e.type !== "Images" || isNullOrUndefined(this.parent.quickToolbarModule) || isNullOrUndefined(this.parent.quickToolbarModule.imageQTBar) || isNullOrUndefined(e.args)) {
        return;
      }
      this.quickToolObj = this.parent.quickToolbarModule;
      var args = e.args;
      var target = e.elements;
      [].forEach.call(e.elements, function(element, index) {
        if (index === 0) {
          target = element;
        }
      });
      if (target && !closest(target, "a")) {
        this.imageWithLinkQTBarItemUpdate();
      }
      if (target.nodeName === "IMG") {
        addClass([target], ["e-img-focus"]);
      }
      var pageY = this.parent.iframeSettings.enable ? window.pageYOffset + this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;
      if (this.parent.quickToolbarModule.imageQTBar) {
        if (e.isNotify) {
          setTimeout(function() {
            _this.parent.formatter.editorManager.nodeSelection.Clear(_this.contentModule.getDocument());
            _this.parent.formatter.editorManager.nodeSelection.setSelectionContents(_this.contentModule.getDocument(), target);
            _this.quickToolObj.imageQTBar.showPopup(args.pageX, pageY, target);
          }, 400);
        } else {
          this.quickToolObj.imageQTBar.showPopup(args.pageX, pageY, target);
        }
      }
    };
    Image2.prototype.hideImageQuickToolbar = function() {
      if (!isNullOrUndefined(this.contentModule.getEditPanel().querySelector(".e-img-focus"))) {
        removeClass([this.contentModule.getEditPanel().querySelector(".e-img-focus")], "e-img-focus");
        if (this.quickToolObj && this.quickToolObj.imageQTBar && document.body.contains(this.quickToolObj.imageQTBar.element)) {
          this.quickToolObj.imageQTBar.hidePopup();
        }
      }
    };
    Image2.prototype.editAreaClickHandler = function(e) {
      if (this.parent.readonly) {
        this.hideImageQuickToolbar();
        return;
      }
      var args = e.args;
      var showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
      if (args.which === 2 || showOnRightClick && args.which === 1 || !showOnRightClick && args.which === 3) {
        if (showOnRightClick && args.which === 1 && !isNullOrUndefined(args.target) && args.target.tagName === "IMG") {
          this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
          this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.contentModule.getDocument(), args.target);
        }
        return;
      }
      if (this.parent.editorMode === "HTML" && this.parent.quickToolbarModule && this.parent.quickToolbarModule.imageQTBar) {
        this.quickToolObj = this.parent.quickToolbarModule;
        var target = args.target;
        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
        var isPopupOpen = this.quickToolObj.imageQTBar.element.classList.contains("e-rte-pop");
        if (target.nodeName === "IMG" && this.parent.quickToolbarModule) {
          if (isPopupOpen) {
            return;
          }
          this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
          this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.contentModule.getDocument(), target);
          if (isIDevice2()) {
            this.parent.notify(selectionSave, e);
          }
          addClass([target], "e-img-focus");
          var items = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll(".e-toolbar-item");
          var separator = void 0;
          if (closest(target, "a")) {
            for (var i = 0; i < items.length; i++) {
              if (items[i].getAttribute("title") === this.i10n.getConstant("openLink") || items[i].getAttribute("title") === this.i10n.getConstant("editLink") || items[i].getAttribute("title") === this.i10n.getConstant("removeLink")) {
                items[i].style.display = "";
                removeClass([items[i]], "e-link-groups");
              } else if (items[i].getAttribute("title") === "Insert Link") {
                items[i].style.display = "none";
              } else if (items[i].classList.contains("e-rte-horizontal-separator")) {
                separator = items[i];
                detach(items[i]);
              }
            }
            var newItems = this.quickToolObj.imageQTBar.toolbarElement.querySelectorAll(".e-toolbar-item:not(.e-link-groups)");
            this.quickToolObj.imageQTBar.addQTBarItem(["-"], Math.round(newItems.length / 2));
          } else if (!closest(target, "a")) {
            this.imageWithLinkQTBarItemUpdate();
          }
          this.showImageQuickToolbar({ args, type: "Images", elements: [args.target] });
        } else {
          this.hideImageQuickToolbar();
        }
      }
    };
    Image2.prototype.insertImgLink = function(e, inputDetails) {
      var _this = this;
      if (e.selectNode[0].nodeName !== "IMG") {
        return;
      }
      this.imagDialog(e);
      if (!isNullOrUndefined(this.dialogObj)) {
        var linkWrap = this.parent.createElement("div", { className: "e-img-linkwrap " + this.parent.cssClass });
        var linkUrl = this.i10n.getConstant("linkurl");
        var content = '<div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" class="e-input e-img-link ' + this.parent.cssClass + '" spellcheck="false" placeholder="' + linkUrl + '"/></div><div class="e-rte-label"></div><div class="e-rte-field"><input type="checkbox" class="e-rte-linkTarget ' + this.parent.cssClass + '"  data-role ="none"></div>';
        var contentElem = parseHtml(content);
        linkWrap.appendChild(contentElem);
        var linkTarget = linkWrap.querySelector(".e-rte-linkTarget");
        var inputLink = linkWrap.querySelector(".e-img-link");
        var linkOpenLabel = this.i10n.getConstant("linkOpenInNewWindow");
        this.checkBoxObj = new CheckBox({
          label: linkOpenLabel,
          checked: true,
          enableRtl: this.parent.enableRtl,
          cssClass: this.parent.cssClass,
          change: function(e2) {
            if (e2.checked) {
              target_1 = "_blank";
            } else {
              target_1 = null;
            }
          }
        });
        this.checkBoxObj.isStringTemplate = true;
        this.checkBoxObj.createElement = this.parent.createElement;
        this.checkBoxObj.appendTo(linkTarget);
        var target_1 = this.checkBoxObj.checked ? "_blank" : null;
        var linkUpdate = this.i10n.getConstant("dialogUpdate");
        var linkargs_1 = {
          args: e.args,
          selfImage: this,
          selection: e.selection,
          selectNode: e.selectNode,
          selectParent: e.selectParent,
          link: inputLink,
          target: target_1
        };
        this.dialogObj.setProperties({
          height: "inherit",
          width: "290px",
          header: this.parent.localeObj.getConstant("imageInsertLinkHeader"),
          content: linkWrap,
          position: { X: "center", Y: "center" },
          buttons: [{
            // eslint-disable-next-line
            click: function(e2) {
              _this.insertlink(linkargs_1);
            },
            buttonModel: {
              content: linkUpdate,
              cssClass: "e-flat e-update-link " + this.parent.cssClass,
              isPrimary: true
            }
          }],
          cssClass: this.dialogObj.cssClass + " e-rte-img-link-dialog"
        });
        if (!isNullOrUndefined(this.parent.cssClass)) {
          this.dialogObj.setProperties({ cssClass: this.parent.cssClass });
        }
        if (!isNullOrUndefined(inputDetails)) {
          inputLink.value = inputDetails.url;
          inputDetails.target ? this.checkBoxObj.checked = true : this.checkBoxObj.checked = false;
          this.dialogObj.header = inputDetails.header;
        }
        this.dialogObj.element.style.maxHeight = "inherit";
        this.dialogObj.content.querySelector("input").focus();
      }
    };
    Image2.prototype.insertAltText = function(e) {
      var _this = this;
      if (e.selectNode[0].nodeName !== "IMG") {
        return;
      }
      this.imagDialog(e);
      var altText = this.i10n.getConstant("altText");
      if (!isNullOrUndefined(this.dialogObj)) {
        var altWrap = this.parent.createElement("div", { className: "e-img-altwrap " + this.parent.cssClass });
        var altHeader = this.i10n.getConstant("alternateHeader");
        var linkUpdate = this.i10n.getConstant("dialogUpdate");
        var getAlt = e.selectNode[0].getAttribute("alt") === null ? "" : e.selectNode[0].getAttribute("alt");
        var content = '<div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" spellcheck="false" value="' + getAlt + '" class="e-input e-img-alt ' + this.parent.cssClass + '" placeholder="' + altText + '"/></div>';
        var contentElem = parseHtml(content);
        altWrap.appendChild(contentElem);
        var inputAlt = altWrap.querySelector(".e-img-alt");
        var altArgs_1 = {
          args: e.args,
          selfImage: this,
          selection: e.selection,
          selectNode: e.selectNode,
          alt: inputAlt
        };
        this.dialogObj.setProperties({
          height: "inherit",
          width: "290px",
          header: altHeader,
          content: altWrap,
          position: { X: "center", Y: "center" },
          buttons: [{
            // eslint-disable-next-line
            click: function(e2) {
              _this.insertAlt(altArgs_1);
            },
            buttonModel: {
              content: linkUpdate,
              cssClass: "e-flat e-update-alt " + this.parent.cssClass,
              isPrimary: true
            }
          }],
          cssClass: this.dialogObj.cssClass + " e-rte-img-alt-dialog"
        });
        if (!isNullOrUndefined(this.parent.cssClass)) {
          this.dialogObj.setProperties({ cssClass: this.parent.cssClass });
        }
        this.dialogObj.element.style.maxHeight = "inherit";
        this.dialogObj.content.querySelector("input").focus();
      }
    };
    Image2.prototype.insertAlt = function(e) {
      if (!isNullOrUndefined(e.alt)) {
        e.selection.restore();
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
          this.parent.formatter.saveData();
        }
        var altText = e.alt.value;
        this.parent.formatter.process(this.parent, e.args, e.args, {
          altText,
          selectNode: e.selectNode,
          subCommand: e.args.item.subCommand
        });
        this.dialogObj.hide({ returnValue: false });
      }
    };
    Image2.prototype.insertlink = function(e) {
      if (e.selectNode[0].nodeName !== "IMG") {
        return;
      }
      var url = e.link.value;
      if (url === "") {
        addClass([e.link], "e-error");
        e.link.setSelectionRange(0, url.length);
        e.link.focus();
        return;
      }
      if (!this.isUrl(url)) {
        url = "http://" + url;
      } else {
        removeClass([e.link], "e-error");
      }
      var proxy = e.selfImage;
      if (proxy.parent.editorMode === "HTML") {
        e.selection.restore();
      }
      if (proxy.parent.formatter.getUndoRedoStack().length === 0) {
        proxy.parent.formatter.saveData();
      }
      if (e.selectNode[0].parentElement.nodeName === "A") {
        proxy.parent.formatter.process(proxy.parent, e.args, e.args, {
          url,
          target: proxy.checkBoxObj.checked ? "_blank" : null,
          selectNode: e.selectNode,
          subCommand: e.args.item.subCommand
        });
        proxy.dialogObj.hide({ returnValue: true });
        return;
      }
      proxy.parent.formatter.process(proxy.parent, e.args, e.args, {
        url,
        target: proxy.checkBoxObj.checked ? "_blank" : null,
        selectNode: e.selectNode,
        subCommand: e.args.item.subCommand,
        selection: e.selection
      });
      var captionEle = closest(e.selectNode[0], ".e-img-caption");
      if (captionEle) {
        select(".e-img-inner", captionEle).focus();
      }
      if (captionEle) {
        select(".e-img-inner", captionEle).focus();
      }
      proxy.dialogObj.hide({ returnValue: false });
    };
    Image2.prototype.isUrl = function(url) {
      var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/gi;
      return regexp.test(url);
    };
    Image2.prototype.deleteImg = function(e, keyCode2) {
      if (e.selectNode[0].nodeName !== "IMG") {
        return;
      }
      var args = {
        element: e.selectNode[0],
        src: e.selectNode[0].getAttribute("src")
      };
      if (this.parent.formatter.getUndoRedoStack().length === 0) {
        this.parent.formatter.saveData();
      }
      e.selection.restore();
      if (this.contentModule.getEditPanel().querySelector(".e-img-resize")) {
        this.removeResizeEle();
      }
      this.parent.formatter.process(this.parent, e.args, e.args, {
        selectNode: e.selectNode,
        captionClass: CLS_CAPTION,
        subCommand: e.args.item.subCommand
      });
      this.imageRemovePost(args.src);
      if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {
        this.quickToolObj.imageQTBar.hidePopup();
      }
      this.cancelResizeAction();
      if (isNullOrUndefined(keyCode2)) {
        this.parent.trigger(afterImageDelete, args);
      }
    };
    Image2.prototype.imageRemovePost = function(src) {
      var proxy = this;
      var absoluteUrl = "";
      if (isNullOrUndefined(this.parent.insertImageSettings.removeUrl) || this.parent.insertImageSettings.removeUrl === "") {
        return;
      }
      if (src.indexOf("http://") > -1 || src.indexOf("https://") > -1) {
        absoluteUrl = src;
      } else {
        absoluteUrl = new URL(src, document.baseURI).href;
      }
      this.removingImgName = absoluteUrl.replace(/^.*[\\/]/, "");
      var xhr = new XMLHttpRequest();
      xhr.addEventListener("readystatechange", function() {
        if (this.readyState === 4 && this.status === 200) {
          proxy.triggerPost(this.response);
        }
      });
      xhr.open("GET", absoluteUrl);
      xhr.responseType = "blob";
      xhr.send();
    };
    Image2.prototype.triggerPost = function(response) {
      var removeUrl = this.parent.insertImageSettings.removeUrl;
      if (isNullOrUndefined(removeUrl) || removeUrl === "") {
        return;
      }
      var file = new File([response], this.removingImgName);
      var ajax = new Ajax(removeUrl, "POST", true, null);
      var formData = new FormData();
      formData.append("UploadFiles", file);
      ajax.send(formData);
    };
    Image2.prototype.caption = function(e) {
      var selectNode = e.selectNode[0];
      if (selectNode.nodeName !== "IMG") {
        return;
      }
      e.selection.restore();
      if (this.parent.formatter.getUndoRedoStack().length === 0) {
        this.parent.formatter.saveData();
      }
      this.cancelResizeAction();
      addClass([selectNode], "e-rte-image");
      var subCommand = e.args.item ? e.args.item.subCommand : "Caption";
      if (!isNullOrUndefined(closest(selectNode, "." + CLS_CAPTION))) {
        detach(closest(selectNode, "." + CLS_CAPTION));
        if (Browser.isIE) {
          this.contentModule.getEditPanel().focus();
          e.selection.restore();
        }
        if (selectNode.parentElement.tagName === "A") {
          this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: selectNode.parentElement, selectNode: e.selectNode, subCommand });
        } else {
          this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: selectNode, selectNode: e.selectNode, subCommand });
        }
      } else {
        this.captionEle = this.parent.createElement("span", {
          className: CLS_CAPTION + " " + CLS_RTE_CAPTION + " " + this.parent.cssClass,
          attrs: { contenteditable: "false", draggable: "false", style: "width:" + this.parent.insertImageSettings.width }
        });
        var imgWrap = this.parent.createElement("span", { className: "e-img-wrap " + this.parent.cssClass });
        var imgInner = this.parent.createElement("span", {
          className: "e-img-inner " + this.parent.cssClass,
          attrs: { contenteditable: "true" }
        });
        var parent_1 = e.selectNode[0].parentElement;
        if (parent_1.tagName === "A") {
          parent_1.setAttribute("contenteditable", "true");
        }
        imgWrap.appendChild(parent_1.tagName === "A" ? parent_1 : e.selectNode[0]);
        imgWrap.appendChild(imgInner);
        var imgCaption = this.i10n.getConstant("imageCaption");
        imgInner.innerHTML = imgCaption;
        this.captionEle.appendChild(imgWrap);
        if (selectNode.classList.contains(CLS_IMGINLINE)) {
          addClass([this.captionEle], CLS_CAPINLINE);
        }
        if (selectNode.classList.contains(CLS_IMGBREAK)) {
          addClass([this.captionEle], CLS_IMGBREAK);
        }
        if (selectNode.classList.contains(CLS_IMGLEFT)) {
          addClass([this.captionEle], CLS_IMGLEFT);
        }
        if (selectNode.classList.contains(CLS_IMGRIGHT)) {
          addClass([this.captionEle], CLS_IMGRIGHT);
        }
        if (selectNode.classList.contains(CLS_IMGCENTER)) {
          addClass([this.captionEle], CLS_IMGCENTER);
        }
        this.parent.formatter.process(this.parent, e.args, e.args, { insertElement: this.captionEle, selectNode: e.selectNode, subCommand });
        this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), imgInner.childNodes[0], imgInner.childNodes[0], 0, imgInner.childNodes[0].textContent.length);
      }
      if (this.quickToolObj && document.body.contains(this.quickToolObj.imageQTBar.element)) {
        this.quickToolObj.imageQTBar.hidePopup();
        removeClass([selectNode], "e-img-focus");
      }
    };
    Image2.prototype.imageSize = function(e) {
      var _this = this;
      if (e.selectNode[0].nodeName !== "IMG") {
        return;
      }
      this.imagDialog(e);
      if (!isNullOrUndefined(this.dialogObj)) {
        var imgSizeHeader = this.i10n.getConstant("imageSizeHeader");
        var linkUpdate = this.i10n.getConstant("dialogUpdate");
        var dialogContent = this.imgsizeInput(e);
        var selectObj_1 = { args: e.args, selfImage: this, selection: e.selection, selectNode: e.selectNode };
        this.dialogObj.setProperties({
          height: Browser.isDevice ? "300px" : "inherit",
          width: "290px",
          header: imgSizeHeader,
          content: dialogContent,
          position: { X: "center", Y: "center" },
          buttons: [{
            // eslint-disable-next-line
            click: function(e2) {
              _this.insertSize(selectObj_1);
            },
            buttonModel: {
              content: linkUpdate,
              cssClass: "e-flat e-update-size " + this.parent.cssClass,
              isPrimary: true
            }
          }],
          cssClass: this.dialogObj.cssClass + " e-rte-img-size-dialog"
        });
        if (!isNullOrUndefined(this.parent.cssClass)) {
          this.dialogObj.setProperties({ cssClass: this.parent.cssClass });
        }
        this.dialogObj.element.style.maxHeight = "inherit";
        this.dialogObj.content.querySelector("input").focus();
      }
    };
    Image2.prototype.break = function(e) {
      if (e.selectNode[0].nodeName !== "IMG") {
        return;
      }
      var subCommand = e.args.item ? e.args.item.subCommand : "Break";
      this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand });
    };
    Image2.prototype.inline = function(e) {
      if (e.selectNode[0].nodeName !== "IMG") {
        return;
      }
      var subCommand = e.args.item ? e.args.item.subCommand : "Inline";
      this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand });
    };
    Image2.prototype.alignImage = function(e, type) {
      var subCommand = e.args.item ? e.args.item.subCommand : type;
      this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand });
    };
    Image2.prototype.clearDialogObj = function() {
      if (this.dialogObj) {
        this.dialogObj.destroy();
        detach(this.dialogObj.element);
        this.dialogObj = null;
      }
    };
    Image2.prototype.imagDialog = function(e) {
      var _this = this;
      if (this.dialogObj) {
        this.dialogObj.hide({ returnValue: true });
        return;
      }
      var imgDialog = this.parent.createElement("div", { className: "e-rte-img-dialog " + this.parent.cssClass, id: this.rteID + "_image" });
      this.parent.element.appendChild(imgDialog);
      var imgInsert = this.i10n.getConstant("dialogInsert");
      var imglinkCancel = this.i10n.getConstant("dialogCancel");
      var imgHeader = this.i10n.getConstant("imageHeader");
      var selection = e.selection;
      var selectObj = { selfImage: this, selection: e.selection, args: e.args, selectParent: e.selectParent };
      var dialogModel = {
        header: imgHeader,
        cssClass: CLS_RTE_ELEMENTS + " " + this.parent.cssClass,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        showCloseIcon: true,
        closeOnEscape: true,
        width: Browser.isDevice ? "290px" : "340px",
        position: { X: "center", Y: Browser.isDevice ? "center" : "top" },
        isModal: Browser.isDevice,
        buttons: [
          {
            click: this.insertImageUrl.bind(selectObj),
            buttonModel: { content: imgInsert, cssClass: "e-flat e-insertImage " + this.parent.cssClass, isPrimary: true, disabled: true }
          },
          {
            click: function(e2) {
              _this.cancelDialog(e2);
            },
            buttonModel: { cssClass: "e-flat e-cancel " + this.parent.cssClass, content: imglinkCancel }
          }
        ],
        target: Browser.isDevice ? document.body : this.parent.element,
        animationSettings: { effect: "None" },
        close: function(event2) {
          if (_this.isImgUploaded) {
            _this.uploadObj.removing();
          }
          _this.parent.isBlur = false;
          if (event2 && event2.event.returnValue) {
            if (_this.parent.editorMode === "HTML") {
              selection.restore();
            } else {
              _this.parent.formatter.editorManager.markdownSelection.restore(_this.parent.contentModule.getEditPanel());
            }
          }
          _this.dialogObj.destroy();
          detach(_this.dialogObj.element);
          _this.dialogRenderObj.close(event2);
          _this.dialogObj = null;
        }
      };
      var dialogContent = this.parent.createElement("div", { className: "e-img-content " + this.parent.cssClass });
      if (!isNullOrUndefined(this.parent.insertImageSettings.path) && this.parent.editorMode === "Markdown" || this.parent.editorMode === "HTML") {
        dialogContent.appendChild(this.imgUpload(e));
      }
      var linkHeader = this.parent.createElement("div", { className: "e-linkheader " + this.parent.cssClass });
      var linkHeaderText = this.i10n.getConstant("imageLinkHeader");
      if (this.parent.editorMode === "HTML") {
        linkHeader.innerHTML = linkHeaderText;
      } else {
        linkHeader.innerHTML = this.i10n.getConstant("mdimageLink");
      }
      dialogContent.appendChild(linkHeader);
      dialogContent.appendChild(this.imageUrlPopup(e));
      if (e.selectNode && e.selectNode[0].nodeName === "IMG") {
        dialogModel.header = this.parent.localeObj.getConstant("editImageHeader");
        dialogModel.content = dialogContent;
      } else {
        dialogModel.content = dialogContent;
      }
      this.dialogObj = this.dialogRenderObj.render(dialogModel);
      this.dialogObj.createElement = this.parent.createElement;
      this.dialogObj.appendTo(imgDialog);
      if (isNullOrUndefined(this.dialogObj)) {
        return;
      }
      if (e.selectNode && e.selectNode[0].nodeName === "IMG" && e.name === "insertImage") {
        this.dialogObj.element.querySelector(".e-insertImage").textContent = this.parent.localeObj.getConstant("dialogUpdate");
      }
      imgDialog.style.maxHeight = "inherit";
      if (this.quickToolObj) {
        if (this.quickToolObj.imageQTBar && document.body.contains(this.quickToolObj.imageQTBar.element)) {
          this.quickToolObj.imageQTBar.hidePopup();
          if (!isNullOrUndefined(e.selectParent)) {
            removeClass([e.selectParent[0]], "e-img-focus");
          }
        }
        if (this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {
          this.quickToolObj.inlineQTBar.hidePopup();
        }
      }
    };
    Image2.prototype.cancelDialog = function(e) {
      this.parent.isBlur = false;
      this.dialogObj.hide({ returnValue: true });
      if (this.isImgUploaded) {
        this.uploadObj.removing();
      }
    };
    Image2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (target.nodeName === "IMG") {
        this.imgEle = target;
      }
      if (!this.parent) {
        return;
      }
      if (target.nodeName !== "#document") {
        this.parent.currentTarget = e.target;
      }
      if (!isNullOrUndefined(this.dialogObj) && // eslint-disable-next-line
      (!closest(target, "[id='" + this.dialogObj.element.id + "']") && this.parent.toolbarSettings.enable && this.parent.getToolbarElement() && !this.parent.getToolbarElement().contains(e.target) || this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target) && !closest(target, "#" + this.parent.getID() + "_toolbar_Image") && !target.querySelector("#" + this.parent.getID() + "_toolbar_Image"))) {
        if (e.offsetX > e.target.clientWidth || e.offsetY > e.target.clientHeight) {
        } else {
          this.dialogObj.hide({ returnValue: true });
          this.parent.isBlur = true;
          dispatchEvent(this.parent.element, "focusout");
        }
      }
      if (!(this.parent.iframeSettings.enable && !isNullOrUndefined(this.parent.currentTarget) && this.parent.currentTarget.nodeName === "IMG") && e.target.tagName !== "IMG" && this.imgResizeDiv && !(this.quickToolObj && this.quickToolObj.imageQTBar && this.quickToolObj.imageQTBar.element.contains(e.target)) && this.contentModule.getEditPanel().contains(this.imgResizeDiv)) {
        this.cancelResizeAction();
      }
      if (this.contentModule.getEditPanel().querySelector(".e-img-resize") && !(this.parent.iframeSettings.enable && this.parent.currentTarget.nodeName === "IMG")) {
        if (target.tagName !== "IMG") {
          this.removeResizeEle();
        }
        if (target.tagName !== "IMG" && !isNullOrUndefined(this.imgEle)) {
          this.imgEle.style.outline = "";
        } else if (!isNullOrUndefined(this.prevSelectedImgEle) && this.prevSelectedImgEle !== target) {
          this.prevSelectedImgEle.style.outline = "";
        }
      }
    };
    Image2.prototype.removeResizeEle = function() {
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);
      detach(this.contentModule.getEditPanel().querySelector(".e-img-resize"));
    };
    Image2.prototype.onWindowResize = function() {
      if (!isNullOrUndefined(this.contentModule) && !isNullOrUndefined(this.contentModule.getEditPanel().querySelector(".e-img-resize"))) {
        this.cancelResizeAction();
      }
    };
    Image2.prototype.imageUrlPopup = function(e) {
      var _this = this;
      var imgUrl = this.parent.createElement("div", { className: "imgUrl " + this.parent.cssClass });
      var placeUrl = this.i10n.getConstant("imageUrl");
      this.inputUrl = this.parent.createElement("input", {
        className: "e-input e-img-url " + this.parent.cssClass,
        attrs: { placeholder: placeUrl, spellcheck: "false", "aria-label": this.i10n.getConstant("imageLinkHeader") }
      });
      this.inputUrl.addEventListener("input", function() {
        if (!isNullOrUndefined(_this.inputUrl)) {
          if (_this.inputUrl.value.length === 0) {
            _this.dialogObj.getButtons(0).element.disabled = true;
          } else {
            _this.dialogObj.getButtons(0).element.removeAttribute("disabled");
          }
        }
      });
      imgUrl.appendChild(this.inputUrl);
      return imgUrl;
    };
    Image2.prototype.insertImageUrl = function(e) {
      var proxy = this.selfImage;
      proxy.isImgUploaded = false;
      var url = proxy.inputUrl.value;
      if (proxy.parent.formatter.getUndoRedoStack().length === 0) {
        proxy.parent.formatter.saveData();
      }
      if (!isNullOrUndefined(proxy.uploadUrl) && proxy.uploadUrl.url !== "") {
        proxy.uploadUrl.cssClass = proxy.parent.insertImageSettings.display === "inline" ? CLS_IMGINLINE : CLS_IMGBREAK;
        proxy.dialogObj.hide({ returnValue: false });
        proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, proxy.uploadUrl);
        proxy.uploadUrl.url = "";
        if (proxy.contentModule.getEditPanel().querySelector(".e-img-resize")) {
          proxy.imgEle.style.outline = "";
          proxy.removeResizeEle();
        }
      } else if (url !== "") {
        if (proxy.parent.editorMode === "HTML" && isNullOrUndefined(closest(
          // eslint-disable-next-line
          this.selection.range.startContainer.parentNode,
          "[id='" + proxy.contentModule.getPanel().id + "']"
        ))) {
          proxy.contentModule.getEditPanel().focus();
          var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.contentModule.getDocument());
          this.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.contentModule.getDocument());
          this.selectParent = proxy.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        }
        var regex = /[\w-]+.(jpg|png|jpeg|gif)/g;
        var matchUrl = !isNullOrUndefined(url.match(regex)) && proxy.parent.editorMode === "HTML" ? url.match(regex)[0] : "";
        var value = {
          cssClass: proxy.parent.insertImageSettings.display === "inline" ? CLS_IMGINLINE : CLS_IMGBREAK,
          url,
          selection: this.selection,
          altText: matchUrl,
          selectParent: this.selectParent,
          width: {
            width: proxy.parent.insertImageSettings.width,
            minWidth: proxy.parent.insertImageSettings.minWidth,
            maxWidth: proxy.parent.getInsertImgMaxWidth()
          },
          height: {
            height: proxy.parent.insertImageSettings.height,
            minHeight: proxy.parent.insertImageSettings.minHeight,
            maxHeight: proxy.parent.insertImageSettings.maxHeight
          }
        };
        proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, value);
        proxy.dialogObj.hide({ returnValue: false });
      }
    };
    Image2.prototype.imgsizeInput = function(e) {
      var _this = this;
      var selectNode = e.selectNode[0];
      var imgHeight = this.i10n.getConstant("imageHeight");
      var imgWidth = this.i10n.getConstant("imageWidth");
      var imgSizeWrap = this.parent.createElement("div", { className: "e-img-sizewrap " + this.parent.cssClass });
      var widthVal = isNullOrUndefined(this.changedWidthValue) && (selectNode.style.width.toString() === "auto" || selectNode.style.width !== "") ? selectNode.style.width : !isNullOrUndefined(this.changedWidthValue) ? this.changedWidthValue : parseInt(selectNode.getClientRects()[0].width.toString(), 10).toString();
      var heightVal = isNullOrUndefined(this.changedHeightValue) && (selectNode.style.height.toString() === "auto" || selectNode.style.height !== "") ? selectNode.style.height : !isNullOrUndefined(this.changedHeightValue) ? this.changedHeightValue : parseInt(selectNode.getClientRects()[0].height.toString(), 10).toString();
      this.changedWidthValue = null;
      this.changedHeightValue = null;
      var content = '<div class="e-rte-label ' + this.parent.cssClass + '"><label>' + imgWidth + '</label></div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" id="imgwidth" class="e-img-width ' + this.parent.cssClass + '" value=' + widthVal + ' /></div><div class="e-rte-label ' + this.parent.cssClass + '"><label>' + imgHeight + '</label></div><div class="e-rte-field ' + this.parent.cssClass + '"> <input type="text" id="imgheight" class="e-img-height ' + this.parent.cssClass + '" value=' + heightVal + " /></div>";
      var contentElem = parseHtml(content);
      imgSizeWrap.appendChild(contentElem);
      this.widthNum = new TextBox({
        value: formatUnit(widthVal),
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass,
        input: function(e2) {
          _this.inputWidthValue = formatUnit(_this.inputValue(e2.value));
        }
      });
      this.widthNum.createElement = this.parent.createElement;
      this.widthNum.appendTo(imgSizeWrap.querySelector("#imgwidth"));
      this.heightNum = new TextBox({
        value: formatUnit(heightVal),
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass,
        input: function(e2) {
          _this.inputHeightValue = formatUnit(_this.inputValue(e2.value));
        }
      });
      this.heightNum.createElement = this.parent.createElement;
      this.heightNum.appendTo(imgSizeWrap.querySelector("#imgheight"));
      return imgSizeWrap;
    };
    Image2.prototype.inputValue = function(value) {
      if (value === "auto" || value.indexOf("%") !== -1 || value.indexOf("px") !== -1 || value.match(/(\d+)/)) {
        return value;
      } else {
        return "auto";
      }
    };
    Image2.prototype.insertSize = function(e) {
      e.selection.restore();
      var proxy = e.selfImage;
      if (proxy.parent.formatter.getUndoRedoStack().length === 0) {
        proxy.parent.formatter.saveData();
      }
      var dialogEle = proxy.dialogObj.element;
      this.changedWidthValue = this.inputWidthValue;
      this.changedHeightValue = this.inputHeightValue;
      var width = dialogEle.querySelector(".e-img-width").value;
      var height = dialogEle.parentElement.querySelector(".e-img-height").value;
      proxy.parent.formatter.process(this.parent, e.args, e.args, {
        width,
        height,
        selectNode: e.selectNode,
        subCommand: e.args.item.subCommand
      });
      if (this.imgResizeDiv) {
        proxy.imgResizePos(e.selectNode[0], this.imgResizeDiv);
      }
      proxy.dialogObj.hide({ returnValue: true });
    };
    Image2.prototype.insertImage = function(e) {
      this.imagDialog(e);
      if (!isNullOrUndefined(this.dialogObj)) {
        this.dialogObj.element.style.maxHeight = "inherit";
        var dialogContent = this.dialogObj.element.querySelector(".e-img-content");
        if (!isNullOrUndefined(this.parent.insertImageSettings.path) && this.parent.editorMode === "Markdown" || this.parent.editorMode === "HTML") {
          document.getElementById(this.rteID + "_insertImage").focus();
        } else {
          dialogContent.querySelector(".e-img-url").focus();
        }
      }
    };
    Image2.prototype.imgUpload = function(e) {
      var _this = this;
      var save;
      var selectParent;
      var proxy = this;
      var iframe = proxy.parent.iframeSettings.enable;
      if (proxy.parent.editorMode === "HTML" && (!iframe && isNullOrUndefined(closest(e.selection.range.startContainer.parentNode, "[id='" + this.parent.contentModule.getPanel().id + "']")) || iframe && !hasClass(e.selection.range.startContainer.parentNode.ownerDocument.querySelector("body"), "e-lib"))) {
        this.contentModule.getEditPanel().focus();
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
        selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
      } else {
        save = e.selection;
        selectParent = e.selectParent;
      }
      var uploadParentEle = this.parent.createElement("div", { className: "e-img-uploadwrap e-droparea " + this.parent.cssClass });
      var deviceImgUpMsg = this.i10n.getConstant("imageDeviceUploadMessage");
      var imgUpMsg = this.i10n.getConstant("imageUploadMessage");
      var span = this.parent.createElement("span", { className: "e-droptext " + this.parent.cssClass });
      var spanMsg = this.parent.createElement("span", {
        className: "e-rte-upload-text " + this.parent.cssClass,
        innerHTML: Browser.isDevice ? deviceImgUpMsg : imgUpMsg
      });
      span.appendChild(spanMsg);
      var btnEle = this.parent.createElement("button", {
        className: "e-browsebtn " + this.parent.cssClass,
        id: this.rteID + "_insertImage",
        attrs: { autofocus: "true", type: "button" }
      });
      span.appendChild(btnEle);
      uploadParentEle.appendChild(span);
      var browserMsg = this.i10n.getConstant("browse");
      this.browseButton = new Button({ content: browserMsg, enableRtl: this.parent.enableRtl });
      this.browseButton.isStringTemplate = true;
      this.browseButton.createElement = this.parent.createElement;
      this.browseButton.appendTo(btnEle);
      var btnClick = Browser.isDevice ? span : btnEle;
      EventHandler.add(btnClick, "click", this.fileSelect, this);
      var uploadEle = this.parent.createElement("input", {
        id: this.rteID + "_upload",
        attrs: { type: "File", name: "UploadFiles" },
        className: this.parent.cssClass
      });
      uploadParentEle.appendChild(uploadEle);
      var altText;
      var rawFile;
      var selectArgs;
      var filesData;
      var beforeUploadArgs;
      this.uploadObj = new Uploader({
        asyncSettings: { saveUrl: this.parent.insertImageSettings.saveUrl, removeUrl: this.parent.insertImageSettings.removeUrl },
        dropArea: span,
        multiple: false,
        enableRtl: this.parent.enableRtl,
        cssClass: this.parent.cssClass,
        allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),
        selected: function(e2) {
          proxy.isImgUploaded = true;
          selectArgs = e2;
          filesData = e2.filesData;
          if (_this.parent.isServerRendered) {
            selectArgs = JSON.parse(JSON.stringify(e2));
            e2.cancel = true;
            rawFile = e2.filesData;
            selectArgs.filesData = rawFile;
          }
          _this.parent.trigger(imageSelected, selectArgs, function(selectArgs2) {
            if (!selectArgs2.cancel) {
              _this.checkExtension(selectArgs2.filesData[0]);
              altText = selectArgs2.filesData[0].name;
              if (_this.parent.editorMode === "HTML" && isNullOrUndefined(_this.parent.insertImageSettings.path)) {
                var reader_1 = new FileReader();
                reader_1.addEventListener("load", function(e3) {
                  var url = _this.parent.insertImageSettings.saveFormat === "Base64" ? reader_1.result : URL.createObjectURL(convertToBlob(reader_1.result));
                  proxy.uploadUrl = {
                    url,
                    selection: save,
                    altText,
                    selectParent,
                    width: {
                      width: proxy.parent.insertImageSettings.width,
                      minWidth: proxy.parent.insertImageSettings.minWidth,
                      maxWidth: proxy.parent.getInsertImgMaxWidth()
                    },
                    height: {
                      height: proxy.parent.insertImageSettings.height,
                      minHeight: proxy.parent.insertImageSettings.minHeight,
                      maxHeight: proxy.parent.insertImageSettings.maxHeight
                    }
                  };
                  proxy.inputUrl.setAttribute("disabled", "true");
                  if (isNullOrUndefined(proxy.parent.insertImageSettings.saveUrl) && _this.isAllowedTypes && !isNullOrUndefined(_this.dialogObj)) {
                    _this.dialogObj.getButtons(0).element.removeAttribute("disabled");
                  }
                });
                reader_1.readAsDataURL(selectArgs2.filesData[0].rawFile);
              }
              if (_this.parent.isServerRendered) {
                _this.uploadObj._internalRenderSelect(selectArgs2, rawFile);
              }
            }
          });
        },
        beforeUpload: function(args) {
          if (_this.parent.isServerRendered) {
            beforeUploadArgs = JSON.parse(JSON.stringify(args));
            beforeUploadArgs.filesData = filesData;
            args.cancel = true;
            _this.parent.trigger(imageUploading, beforeUploadArgs, function(beforeUploadArgs2) {
              if (beforeUploadArgs2.cancel) {
                return;
              }
              _this.uploadObj.currentRequestHeader = beforeUploadArgs2.currentRequest ? beforeUploadArgs2.currentRequest : _this.uploadObj.currentRequestHeader;
              _this.uploadObj.customFormDatas = beforeUploadArgs2.customFormData && beforeUploadArgs2.customFormData.length > 0 ? beforeUploadArgs2.customFormData : _this.uploadObj.customFormDatas;
              _this.uploadObj.uploadFiles(rawFile, null);
            });
          } else {
            _this.parent.trigger(beforeImageUpload, args);
          }
        },
        uploading: function(e2) {
          if (!_this.parent.isServerRendered) {
            _this.parent.trigger(imageUploading, e2);
          }
        },
        success: function(e2) {
          _this.parent.trigger(imageUploadSuccess, e2, function(e3) {
            if (!isNullOrUndefined(_this.parent.insertImageSettings.path)) {
              var url = _this.parent.insertImageSettings.path + e3.file.name;
              var value = { url, selection: save };
              proxy.uploadUrl = {
                url,
                selection: save,
                altText,
                selectParent,
                width: {
                  width: proxy.parent.insertImageSettings.width,
                  minWidth: proxy.parent.insertImageSettings.minWidth,
                  maxWidth: proxy.parent.getInsertImgMaxWidth()
                },
                height: {
                  height: proxy.parent.insertImageSettings.height,
                  minHeight: proxy.parent.insertImageSettings.minHeight,
                  maxHeight: proxy.parent.insertImageSettings.maxHeight
                }
              };
              proxy.inputUrl.setAttribute("disabled", "true");
            }
            if (e3.operation === "upload" && !isNullOrUndefined(_this.dialogObj)) {
              _this.dialogObj.getButtons(0).element.removeAttribute("disabled");
            }
          });
        },
        failure: function(e2) {
          _this.parent.trigger(imageUploadFailed, e2);
        },
        removing: function() {
          _this.parent.trigger(imageRemoving, e, function(e2) {
            proxy.isImgUploaded = false;
            _this.dialogObj.getButtons(0).element.disabled = true;
            proxy.inputUrl.removeAttribute("disabled");
            if (proxy.uploadUrl) {
              proxy.uploadUrl.url = "";
            }
          });
        }
      });
      this.uploadObj.isStringTemplate = true;
      this.uploadObj.createElement = this.parent.createElement;
      this.uploadObj.appendTo(uploadEle);
      return uploadParentEle;
    };
    Image2.prototype.checkExtension = function(e) {
      if (this.uploadObj.allowedExtensions) {
        if (this.uploadObj.allowedExtensions.toLocaleLowerCase().indexOf(("." + e.type).toLocaleLowerCase()) === -1) {
          this.dialogObj.getButtons(0).element.setAttribute("disabled", "disabled");
          this.isAllowedTypes = false;
        } else {
          this.isAllowedTypes = true;
        }
      }
    };
    Image2.prototype.fileSelect = function() {
      this.dialogObj.element.getElementsByClassName("e-file-select-wrap")[0].querySelector("button").click();
      return false;
    };
    Image2.prototype.dragStart = function(e) {
      if (e.target.nodeName === "IMG") {
        this.parent.trigger(actionBegin, e, function(actionBeginArgs) {
          if (actionBeginArgs.cancel) {
            e.preventDefault();
          } else {
            e.dataTransfer.effectAllowed = "copyMove";
            e.target.classList.add(CLS_RTE_DRAG_IMAGE);
          }
        });
      } else {
        return true;
      }
    };
    Image2.prototype.dragEnter = function(e) {
      e.dataTransfer.dropEffect = "copy";
      e.preventDefault();
    };
    Image2.prototype.dragOver = function(e) {
      if (Browser.info.name === "edge" && e.dataTransfer.items[0].type.split("/")[0].indexOf("image") > -1 || Browser.isIE && e.dataTransfer.types[0] === "Files") {
        e.preventDefault();
      } else {
        return true;
      }
    };
    Image2.prototype.dragDrop = function(args) {
      var _this = this;
      this.parent.trigger(beforeImageDrop, args, function(e) {
        var imgElement = _this.parent.inputElement.ownerDocument.querySelector("." + CLS_RTE_DRAG_IMAGE);
        var isImgOrFileDrop = imgElement && imgElement.tagName === "IMG" || e.dataTransfer.files.length > 0;
        if (!e.cancel && isImgOrFileDrop) {
          _this.parent.trigger(actionBegin, e, function(actionBeginArgs) {
            if (actionBeginArgs.cancel) {
              e.preventDefault();
            } else {
              if (closest(e.target, "#" + _this.parent.getID() + "_toolbar") || _this.parent.inputElement.contentEditable === "false") {
                e.preventDefault();
                return;
              }
              if (_this.parent.element.querySelector("." + CLS_IMG_RESIZE)) {
                detach(_this.imgResizeDiv);
              }
              e.preventDefault();
              var range = void 0;
              if (_this.contentModule.getDocument().caretRangeFromPoint) {
                range = _this.contentModule.getDocument().caretRangeFromPoint(e.clientX, e.clientY);
              } else if (e.rangeParent) {
                range = _this.contentModule.getDocument().createRange();
                range.setStart(e.rangeParent, e.rangeOffset);
              } else {
                range = _this.getDropRange(e.clientX, e.clientY);
              }
              _this.parent.notify(selectRange, { range });
              var uploadArea = _this.parent.element.querySelector("." + CLS_DROPAREA);
              if (uploadArea) {
                return;
              }
              _this.insertDragImage(e);
            }
          });
        } else {
          if (isImgOrFileDrop) {
            e.preventDefault();
          }
        }
      });
    };
    Image2.prototype.getDropRange = function(x, y) {
      var startRange = this.contentModule.getDocument().createRange();
      this.parent.formatter.editorManager.nodeSelection.setRange(this.contentModule.getDocument(), startRange);
      var elem = this.contentModule.getDocument().elementFromPoint(x, y);
      var startNode = elem.childNodes.length > 0 ? elem.childNodes[0] : elem;
      var startCharIndexCharacter = 0;
      if (this.parent.inputElement.firstChild.innerHTML === "<br>") {
        startRange.setStart(startNode, startCharIndexCharacter);
        startRange.setEnd(startNode, startCharIndexCharacter);
      } else {
        var rangeRect = void 0;
        do {
          startCharIndexCharacter++;
          startRange.setStart(startNode, startCharIndexCharacter);
          startRange.setEnd(startNode, startCharIndexCharacter + 1);
          rangeRect = startRange.getBoundingClientRect();
        } while (rangeRect.left < x && startCharIndexCharacter < startNode.length - 1);
      }
      return startRange;
    };
    Image2.prototype.insertDragImage = function(e) {
      var _this = this;
      e.preventDefault();
      var activePopupElement = this.parent.element.querySelector("" + CLS_POPUP_OPEN);
      this.parent.notify(drop, { args: e });
      if (activePopupElement) {
        activePopupElement.classList.add(CLS_HIDE);
      }
      var imgElement = this.parent.inputElement.ownerDocument.querySelector("." + CLS_RTE_DRAG_IMAGE);
      if (e.dataTransfer.files.length > 0 && imgElement === null) {
        if (e.dataTransfer.files.length > 1) {
          return;
        }
        var imgFiles = e.dataTransfer.files;
        var fileName = imgFiles[0].name;
        var imgType = fileName.substring(fileName.lastIndexOf("."));
        var allowedTypes = this.parent.insertImageSettings.allowedTypes;
        for (var i = 0; i < allowedTypes.length; i++) {
          if (imgType.toLocaleLowerCase() === allowedTypes[i].toLowerCase()) {
            if (this.parent.insertImageSettings.saveUrl) {
              this.onSelect(e);
            } else {
              var args = { args: e, text: "", file: imgFiles[0] };
              e.preventDefault();
              this.imagePaste(args);
            }
          }
        }
      } else {
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        if (imgElement && imgElement.tagName === "IMG") {
          if (imgElement.nextElementSibling) {
            if (imgElement.nextElementSibling.classList.contains(CLS_IMG_INNER)) {
              range.insertNode(imgElement.parentElement.parentElement);
            } else {
              range.insertNode(imgElement);
            }
          } else {
            range.insertNode(imgElement);
          }
          imgElement.classList.remove(CLS_RTE_DRAG_IMAGE);
          var imgArgs_1 = { elements: [imgElement] };
          imgElement.addEventListener("load", function() {
            _this.parent.trigger(actionComplete, imgArgs_1);
          });
          this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
          var args = e;
          this.resizeStart(args, imgElement);
          this.hideImageQuickToolbar();
        }
      }
    };
    Image2.prototype.onSelect = function(args) {
      var _this = this;
      var proxy = this;
      var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
      var parentElement = this.parent.createElement("ul", { className: CLS_UPLOAD_FILES });
      this.parent.element.appendChild(parentElement);
      var validFiles = {
        name: "",
        size: 0,
        status: "",
        statusCode: "",
        type: "",
        rawFile: args.dataTransfer.files[0],
        validationMessages: {}
      };
      var imageTag = this.parent.createElement("IMG");
      imageTag.style.opacity = "0.5";
      imageTag.classList.add(CLS_RTE_IMAGE);
      imageTag.classList.add(CLS_IMGINLINE);
      imageTag.classList.add(CLS_RESIZE);
      var file = validFiles.rawFile;
      var reader = new FileReader();
      reader.addEventListener("load", function() {
        var url = URL.createObjectURL(convertToBlob(reader.result));
        imageTag.src = proxy.parent.insertImageSettings.saveFormat === "Blob" ? url : reader.result;
      });
      if (file) {
        reader.readAsDataURL(file);
      }
      range.insertNode(imageTag);
      this.uploadMethod(args, imageTag);
      var e = { elements: [imageTag] };
      imageTag.addEventListener("load", function() {
        _this.parent.trigger(actionComplete, e);
      });
      detach(parentElement);
    };
    Image2.prototype.uploadMethod = function(dragEvent, imageElement) {
      var _this = this;
      var isUploading = false;
      var proxy = this;
      var popupEle = this.parent.createElement("div");
      this.parent.element.appendChild(popupEle);
      var uploadEle = this.parent.createElement("input", {
        id: this.rteID + "_upload",
        attrs: { type: "File", name: "UploadFiles" }
      });
      var offsetY = this.parent.iframeSettings.enable ? -50 : -90;
      this.popupObj = new Popup(popupEle, {
        relateTo: imageElement,
        height: "85px",
        width: "300px",
        offsetY,
        content: uploadEle,
        viewPortElement: this.parent.element,
        position: { X: "center", Y: "top" },
        enableRtl: this.parent.enableRtl,
        zIndex: 10001,
        // eslint-disable-next-line
        close: function(event2) {
          _this.parent.isBlur = false;
          _this.popupObj.destroy();
          detach(_this.popupObj.element);
          _this.popupObj = null;
          if (!_this.parent.inlineMode.enable) {
            _this.parent.toolbarModule.baseToolbar.toolbarObj.disable(false);
          }
        }
      });
      this.popupObj.element.style.display = "none";
      addClass([this.popupObj.element], CLS_POPUP_OPEN);
      addClass([this.popupObj.element], CLS_RTE_UPLOAD_POPUP);
      if (!isNullOrUndefined(this.parent.cssClass)) {
        addClass([this.popupObj.element], this.parent.cssClass);
      }
      var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
      var timeOut = dragEvent.dataTransfer.files[0].size > 1e6 ? 300 : 100;
      setTimeout(function() {
        proxy.refreshPopup(imageElement);
      }, timeOut);
      var rawFile;
      var beforeUploadArgs;
      this.uploadObj = new Uploader({
        asyncSettings: {
          saveUrl: this.parent.insertImageSettings.saveUrl,
          removeUrl: this.parent.insertImageSettings.removeUrl
        },
        cssClass: CLS_RTE_DIALOG_UPLOAD + " " + this.parent.cssClass,
        dropArea: this.parent.element,
        allowedExtensions: this.parent.insertImageSettings.allowedTypes.toString(),
        removing: function() {
          _this.parent.inputElement.contentEditable = "true";
          isUploading = false;
          detach(imageElement);
          _this.popupObj.close();
        },
        canceling: function() {
          _this.parent.inputElement.contentEditable = "true";
          isUploading = false;
          detach(imageElement);
          _this.popupObj.close();
          _this.quickToolObj.imageQTBar.hidePopup();
          setTimeout(function() {
            _this.uploadObj.destroy();
          }, 900);
        },
        beforeUpload: function(args) {
          if (_this.parent.isServerRendered) {
            beforeUploadArgs = JSON.parse(JSON.stringify(args));
            beforeUploadArgs.filesData = rawFile;
            isUploading = true;
            args.cancel = true;
            _this.parent.trigger(imageUploading, beforeUploadArgs, function(beforeUploadArgs2) {
              if (beforeUploadArgs2.cancel) {
                return;
              }
              if (!_this.parent.inlineMode.enable) {
                _this.parent.toolbarModule.baseToolbar.toolbarObj.disable(true);
              }
              _this.uploadObj.currentRequestHeader = beforeUploadArgs2.currentRequest ? beforeUploadArgs2.currentRequest : _this.uploadObj.currentRequestHeader;
              _this.uploadObj.customFormDatas = beforeUploadArgs2.customFormData && beforeUploadArgs2.customFormData.length > 0 ? beforeUploadArgs2.customFormData : _this.uploadObj.customFormDatas;
              _this.uploadObj.uploadFiles(rawFile, null);
              _this.parent.inputElement.contentEditable = "false";
            });
          } else {
            _this.parent.trigger(beforeImageUpload, args);
            if (!_this.parent.inlineMode.enable) {
              _this.parent.toolbarModule.baseToolbar.toolbarObj.disable(true);
            }
          }
        },
        uploading: function(e) {
          if (!_this.parent.isServerRendered) {
            isUploading = true;
            _this.parent.trigger(imageUploading, e, function(imageUploadingArgs) {
              if (imageUploadingArgs.cancel) {
                if (!isNullOrUndefined(imageElement)) {
                  detach(imageElement);
                }
                if (!isNullOrUndefined(_this.popupObj.element)) {
                  detach(_this.popupObj.element);
                }
              } else {
                _this.parent.inputElement.contentEditable = "false";
              }
            });
          }
        },
        selected: function(e) {
          if (isUploading) {
            e.cancel = true;
          }
          if (_this.parent.isServerRendered) {
            rawFile = e.filesData;
          }
        },
        failure: function(e) {
          isUploading = false;
          _this.parent.inputElement.contentEditable = "true";
          var args = {
            args: dragEvent,
            type: "Images",
            isNotify: void 0,
            elements: imageElement
          };
          setTimeout(function() {
            _this.uploadFailure(imageElement, args, e);
          }, 900);
        },
        success: function(e) {
          if (e.operation === "cancel") {
            return;
          }
          isUploading = false;
          _this.parent.inputElement.contentEditable = "true";
          var args = {
            args: dragEvent,
            type: "Images",
            isNotify: void 0,
            elements: imageElement
          };
          setTimeout(function() {
            _this.uploadSuccess(imageElement, dragEvent, args, e);
          }, 900);
        }
      });
      this.uploadObj.appendTo(this.popupObj.element.childNodes[0]);
      this.popupObj.element.querySelector(".e-rte-dialog-upload .e-file-select-wrap").style.display = "none";
      range.selectNodeContents(imageElement);
      this.parent.formatter.editorManager.nodeSelection.setRange(this.contentModule.getDocument(), range);
    };
    Image2.prototype.refreshPopup = function(imageElement) {
      var imgPosition = this.parent.iframeSettings.enable ? this.parent.element.offsetTop + imageElement.offsetTop : imageElement.offsetTop;
      var rtePosition = this.parent.element.offsetTop + this.parent.element.offsetHeight;
      if (imgPosition > rtePosition) {
        this.popupObj.relateTo = this.parent.inputElement;
        this.popupObj.offsetY = this.parent.iframeSettings.enable ? -30 : -65;
        this.popupObj.element.style.display = "block";
      } else {
        if (this.popupObj) {
          this.popupObj.refreshPosition(imageElement);
          this.popupObj.element.style.display = "block";
        }
      }
    };
    Image2.prototype.uploadFailure = function(imgEle, args, e) {
      detach(imgEle);
      if (this.popupObj) {
        this.popupObj.close();
      }
      this.parent.trigger(imageUploadFailed, e);
      this.uploadObj.destroy();
    };
    Image2.prototype.uploadSuccess = function(imageElement, dragEvent, args, e) {
      var _this = this;
      imageElement.style.opacity = "1";
      imageElement.classList.add(CLS_IMG_FOCUS);
      e.element = imageElement;
      this.parent.trigger(imageUploadSuccess, e, function(e2) {
        if (!isNullOrUndefined(_this.parent.insertImageSettings.path)) {
          var url = _this.parent.insertImageSettings.path + e2.file.name;
          imageElement.src = url;
          imageElement.setAttribute("alt", e2.file.name);
        }
      });
      if (this.popupObj) {
        this.popupObj.close();
        this.uploadObj.destroy();
      }
      this.showImageQuickToolbar(args);
      this.resizeStart(dragEvent, imageElement);
    };
    Image2.prototype.imagePaste = function(args) {
      var _this = this;
      if (args.text.length === 0 && !isNullOrUndefined(args.file)) {
        var proxy_1 = this;
        var reader_2 = new FileReader();
        args.args.preventDefault();
        reader_2.addEventListener("load", function(e) {
          var url = {
            cssClass: proxy_1.parent.insertImageSettings.display === "inline" ? CLS_IMGINLINE : CLS_IMGBREAK,
            url: _this.parent.insertImageSettings.saveFormat === "Base64" || !isNullOrUndefined(args.callBack) ? reader_2.result : URL.createObjectURL(convertToBlob(reader_2.result)),
            width: {
              width: proxy_1.parent.insertImageSettings.width,
              minWidth: proxy_1.parent.insertImageSettings.minWidth,
              maxWidth: proxy_1.parent.getInsertImgMaxWidth()
            },
            height: {
              height: proxy_1.parent.insertImageSettings.height,
              minHeight: proxy_1.parent.insertImageSettings.minHeight,
              maxHeight: proxy_1.parent.insertImageSettings.maxHeight
            }
          };
          if (!isNullOrUndefined(args.callBack)) {
            args.callBack(url);
            return;
          } else {
            proxy_1.parent.formatter.process(proxy_1.parent, { item: { command: "Images", subCommand: "Image" } }, args.args, url);
            _this.showPopupToolBar(args, url);
          }
        });
        reader_2.readAsDataURL(args.file);
      }
    };
    Image2.prototype.showPopupToolBar = function(e, url) {
      var _this = this;
      var imageSrc = 'img[src="' + url.url + '"]';
      var imageElement = this.parent.inputElement.querySelector(imageSrc);
      this.parent.quickToolbarModule.createQTBar("Image", "MultiRow", this.parent.quickToolbarSettings.image, RenderType.ImageToolbar);
      var args = {
        args: e.args,
        type: "Images",
        isNotify: void 0,
        elements: imageElement
      };
      if (imageElement) {
        setTimeout(function() {
          _this.showImageQuickToolbar(args);
          _this.resizeStart(e.args, imageElement);
        }, 0);
      }
    };
    Image2.prototype.destroy = function() {
      this.prevSelectedImgEle = void 0;
      this.removeEventListener();
    };
    Image2.prototype.moduleDestroy = function() {
      this.parent = null;
    };
    Image2.prototype.getModuleName = function() {
      return "image";
    };
    return Image2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/audio-module.js
var Audio = (
  /** @class */
  function() {
    function Audio2(parent, serviceLocator) {
      this.isAudioUploaded = false;
      this.isAllowedTypes = true;
      this.deletedAudio = [];
      this.parent = parent;
      this.rteID = parent.element.id;
      this.i10n = serviceLocator.getService("rteLocale");
      this.rendererFactory = serviceLocator.getService("rendererFactory");
      this.dialogRenderObj = serviceLocator.getService("dialogRenderObject");
      this.addEventListener();
    }
    Audio2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(keyDown, this.onKeyDown, this);
      this.parent.on(keyUp, this.onKeyUp, this);
      this.parent.on(insertAudio, this.insertingAudio, this);
      this.parent.on(initialEnd, this.afterRender, this);
      this.parent.on(dynamicModule, this.afterRender, this);
      this.parent.on(showAudioDialog, this.showDialog, this);
      this.parent.on(closeAudioDialog, this.closeDialog, this);
      this.parent.on(audioToolbarAction, this.onToolbarAction, this);
      this.parent.on(dropDownSelect, this.alignmentSelect, this);
      this.parent.on(audioDelete, this.deleteAudio, this);
      this.parent.on(editAreaClick, this.editAreaClickHandler, this);
      this.parent.on(insertCompleted, this.showAudioQuickToolbar, this);
      this.parent.on(destroy, this.removeEventListener, this);
    };
    Audio2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(keyDown, this.onKeyDown);
      this.parent.off(keyUp, this.onKeyUp);
      this.parent.off(insertAudio, this.insertingAudio);
      this.parent.off(initialEnd, this.afterRender);
      this.parent.off(dynamicModule, this.afterRender);
      this.parent.off(showAudioDialog, this.showDialog);
      this.parent.off(closeAudioDialog, this.closeDialog);
      this.parent.off(audioToolbarAction, this.onToolbarAction);
      this.parent.off(dropDownSelect, this.alignmentSelect);
      this.parent.off(audioDelete, this.deleteAudio);
      this.parent.off(editAreaClick, this.editAreaClickHandler);
      this.parent.off(insertCompleted, this.showAudioQuickToolbar);
      this.parent.off(destroy, this.removeEventListener);
      if (!isNullOrUndefined(this.contentModule)) {
        EventHandler.remove(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.touchStart);
        EventHandler.remove(this.contentModule.getEditPanel(), Browser.touchEndEvent, this.audioClick);
        EventHandler.remove(this.parent.element.ownerDocument, "mousedown", this.onDocumentClick);
      }
    };
    Audio2.prototype.afterRender = function() {
      this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
      EventHandler.add(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.touchStart, this);
      EventHandler.add(this.contentModule.getEditPanel(), Browser.touchEndEvent, this.audioClick, this);
      EventHandler.add(this.parent.element.ownerDocument, "mousedown", this.onDocumentClick, this);
    };
    Audio2.prototype.checkAudioBack = function(range) {
      if (range.startContainer.nodeName === "#text" && range.startOffset === 0 && !isNullOrUndefined(range.startContainer.previousSibling) && this.isAudioElem(range.startContainer.previousSibling)) {
        this.deletedAudio.push(range.startContainer.previousSibling);
      } else if (range.startContainer.nodeName !== "#text" && !isNullOrUndefined(range.startContainer.childNodes[range.startOffset - 1]) && this.isAudioElem(range.startContainer.childNodes[range.startOffset - 1])) {
        this.deletedAudio.push(range.startContainer.childNodes[range.startOffset - 1]);
      }
    };
    Audio2.prototype.checkAudioDel = function(range) {
      if (range.startContainer.nodeName === "#text" && range.startOffset === range.startContainer.textContent.length && !isNullOrUndefined(range.startContainer.nextSibling) && range.startContainer.nextSibling.nodeName === "IMG") {
        this.deletedAudio.push(range.startContainer.nextSibling);
      } else if (range.startContainer.nodeName !== "#text" && !isNullOrUndefined(range.startContainer.childNodes[range.startOffset]) && this.isAudioElem(range.startContainer.childNodes[range.startOffset])) {
        this.deletedAudio.push(range.startContainer.childNodes[range.startOffset]);
      }
    };
    Audio2.prototype.undoStack = function(args) {
      if (args.subCommand.toLowerCase() === "undo" || args.subCommand.toLowerCase() === "redo") {
        for (var i = 0; i < this.parent.formatter.getUndoRedoStack().length; i++) {
          var temp = this.parent.createElement("div");
          var contentElem = this.parent.formatter.getUndoRedoStack()[i].text;
          temp.appendChild(contentElem.cloneNode(true));
        }
      }
    };
    Audio2.prototype.touchStart = function(e, ele) {
      if (this.parent.readonly) {
        return;
      }
      this.prevSelectedAudEle = this.audEle;
    };
    Audio2.prototype.onToolbarAction = function(args) {
      if (isIDevice2()) {
        this.parent.notify(selectionRestore, {});
      }
      var item = args.args.item;
      switch (item.subCommand) {
        case "AudioReplace":
          this.parent.notify(insertAudio, args);
          break;
        case "AudioRemove":
          this.parent.notify(audioDelete, args);
          break;
      }
    };
    Audio2.prototype.onKeyUp = function(event2) {
      if (!isNullOrUndefined(this.deletedAudio) && this.deletedAudio.length > 0) {
        for (var i = 0; i < this.deletedAudio.length - 1; i++) {
          var args = {
            element: this.deletedAudio[i].querySelector("audio"),
            src: this.deletedAudio[i].querySelector("source").getAttribute("src")
          };
          this.parent.trigger(afterMediaDelete, args);
        }
      }
    };
    Audio2.prototype.onKeyDown = function(event2) {
      var originalEvent = event2.args;
      var range;
      var save;
      var selectNodeEle;
      var selectParentEle;
      this.deletedAudio = [];
      var isCursor;
      var keyCodeValues = [
        27,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        44,
        45,
        9,
        16,
        17,
        18,
        19,
        20,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        91,
        92,
        93,
        144,
        145,
        182,
        183
      ];
      if (this.parent.editorMode === "HTML") {
        range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        isCursor = range.startContainer === range.endContainer && range.startOffset === range.endOffset;
      }
      if (!isCursor && this.parent.editorMode === "HTML" && keyCodeValues.indexOf(originalEvent.which) < 0) {
        var nodes = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        for (var i = 0; i < nodes.length; i++) {
          if (this.isAudioElem(nodes[i])) {
            this.deletedAudio.push(nodes[i]);
          }
        }
      }
      if (this.parent.editorMode === "HTML" && (originalEvent.which === 8 && originalEvent.code === "Backspace" || originalEvent.which === 46 && originalEvent.code === "Delete")) {
        var isCursor_1 = range.startContainer === range.endContainer && range.startOffset === range.endOffset;
        if (originalEvent.which === 8 && originalEvent.code === "Backspace" && isCursor_1) {
          this.checkAudioBack(range);
        } else if (originalEvent.which === 46 && originalEvent.code === "Delete" && isCursor_1) {
          this.checkAudioDel(range);
        }
      }
      if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection) && originalEvent.code !== "KeyK") {
        range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        if (!originalEvent.ctrlKey && originalEvent.key && (originalEvent.key.length === 1 || originalEvent.action === "enter") && this.isAudioElem(selectParentEle[0]) && selectParentEle[0].parentElement) {
          var prev = selectParentEle[0].parentElement.childNodes[0];
          this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), prev, prev, prev.textContent.length, prev.textContent.length);
          removeClass([selectParentEle[0]], CLS_AUD_FOCUS);
          this.quickToolObj.audioQTBar.hidePopup();
        }
      }
      if (originalEvent.ctrlKey && (originalEvent.keyCode === 89 || originalEvent.keyCode === 90)) {
        this.undoStack({ subCommand: originalEvent.keyCode === 90 ? "undo" : "redo" });
      }
      if (originalEvent.keyCode === 8 || originalEvent.keyCode === 46) {
        if (selectNodeEle && this.isAudioElem(selectNodeEle[0]) && selectNodeEle.length < 1) {
          if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection)) {
            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
          }
          originalEvent.preventDefault();
          var event_1 = {
            selectNode: selectNodeEle,
            selection: save,
            selectParent: selectParentEle,
            args: {
              item: { command: "Audios", subCommand: "AudioRemove" },
              originalEvent
            }
          };
          this.deleteAudio(event_1, originalEvent.keyCode);
        }
      }
      switch (originalEvent.action) {
        case "escape":
          if (!isNullOrUndefined(this.dialogObj)) {
            this.dialogObj.close();
          }
          break;
        case "backspace":
        case "delete":
          for (var i = 0; i < this.deletedAudio.length; i++) {
            var src = this.deletedAudio[i].src;
            this.audioRemovePost(src);
          }
          if (this.parent.editorMode !== "Markdown") {
            if (range.startContainer.nodeType === 3) {
              if (originalEvent.code === "Backspace") {
                if (range.startContainer.previousElementSibling && range.startOffset === 0 && range.startContainer.previousElementSibling.classList.contains(CLS_AUDIOWRAP)) {
                  detach(range.startContainer.previousElementSibling);
                }
              } else {
                if (range.startContainer.nextElementSibling && range.endContainer.textContent.length === range.endOffset && range.startContainer.nextElementSibling.classList.contains(CLS_AUDIOWRAP)) {
                  detach(range.startContainer.nextElementSibling);
                }
              }
            } else if (range.startContainer.nodeType === 1 && (range.startContainer.classList && (range.startContainer.classList.contains(CLS_AUDIOWRAP) || range.startContainer.classList.contains(CLS_CLICKELEM) || range.startContainer.classList.contains(CLS_VID_CLICK_ELEM)))) {
              detach(range.startContainer);
            }
          }
          break;
        case "insert-audio":
          if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection)) {
            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
          }
          this.openDialog(true, originalEvent, save, selectNodeEle, selectParentEle);
          originalEvent.preventDefault();
          break;
      }
    };
    Audio2.prototype.openDialog = function(isInternal, event2, selection, ele, parentEle) {
      var range;
      var save;
      var selectNodeEle;
      var selectParentEle;
      if (!isInternal && !isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection)) {
        range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
        selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
      } else {
        save = selection;
        selectNodeEle = ele;
        selectParentEle = parentEle;
      }
      if (this.parent.editorMode === "HTML") {
        this.insertAudio({
          args: {
            item: { command: "Audios", subCommand: "Audio" },
            originalEvent: event2,
            name: !isInternal ? "showDialog" : null
          },
          selectNode: selectNodeEle,
          selection: save,
          selectParent: selectParentEle
        });
      }
    };
    Audio2.prototype.showDialog = function() {
      this.openDialog(false);
    };
    Audio2.prototype.closeDialog = function() {
      if (this.dialogObj) {
        this.dialogObj.hide({ returnValue: true });
      }
    };
    Audio2.prototype.deleteAudio = function(e, keyCode2) {
      if (!this.isAudioElem(e.selectNode[0])) {
        return;
      }
      if (this.audEle) {
        if (e.selectNode[0].nodeType === 3) {
          e.selectNode[0] = this.audEle;
        } else if (this.isAudioElem(e.selectNode[0])) {
          e.selectNode[0] = e.selectNode[0].classList.contains(CLS_AUDIOWRAP) ? e.selectNode[0] : e.selectNode[0].parentElement;
        }
      }
      var args = {
        element: e.selectNode[0].querySelector("audio"),
        src: e.selectNode[0].querySelector("source").getAttribute("src")
      };
      if (this.parent.formatter.getUndoRedoStack().length === 0) {
        this.parent.formatter.saveData();
      }
      e.selection.restore();
      this.parent.formatter.process(this.parent, e.args, e.args, {
        selectNode: e.selectNode,
        subCommand: e.args.item.subCommand
      });
      this.audioRemovePost(args.src);
      if (this.quickToolObj && document.body.contains(this.quickToolObj.audioQTBar.element)) {
        this.quickToolObj.audioQTBar.hidePopup();
      }
      if (isNullOrUndefined(keyCode2)) {
        this.parent.trigger(afterMediaDelete, args);
      }
    };
    Audio2.prototype.audioRemovePost = function(src) {
      var proxy = this;
      var absoluteUrl = "";
      if (isNullOrUndefined(this.parent.insertAudioSettings.removeUrl) || this.parent.insertAudioSettings.removeUrl === "") {
        return;
      }
      if (src.indexOf("http://") > -1 || src.indexOf("https://") > -1) {
        absoluteUrl = src;
      } else {
        absoluteUrl = new URL(src, document.baseURI).href;
      }
      this.removingAudioName = absoluteUrl.replace(/^.*[\\/]/, "");
      var xhr = new XMLHttpRequest();
      xhr.addEventListener("readystatechange", function() {
        if (this.readyState === 4 && this.status === 200) {
          proxy.triggerPost(this.response);
        }
      });
      xhr.open("GET", absoluteUrl);
      xhr.responseType = "blob";
      xhr.send();
    };
    Audio2.prototype.triggerPost = function(response) {
      var removeUrl = this.parent.insertAudioSettings.removeUrl;
      if (isNullOrUndefined(removeUrl) || removeUrl === "") {
        return;
      }
      var file = new File([response], this.removingAudioName);
      var ajax = new Ajax(removeUrl, "POST", true, null);
      var formData = new FormData();
      formData.append("UploadFiles", file);
      ajax.send(formData);
    };
    Audio2.prototype.audioClick = function(e) {
      if (Browser.isDevice) {
        if (this.isAudioElem(e.target)) {
          this.contentModule.getEditPanel().setAttribute("contenteditable", "false");
          e.target.focus();
        } else {
          if (!this.parent.readonly) {
            this.contentModule.getEditPanel().setAttribute("contenteditable", "true");
          }
        }
      }
      if (this.isAudioElem(e.target)) {
        this.audEle = e.target.querySelector("audio");
        e.preventDefault();
      }
    };
    Audio2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (this.isAudioElem(target)) {
        this.audEle = target.querySelector("audio");
      }
      if (!isNullOrUndefined(this.dialogObj) && // eslint-disable-next-line
      (!closest(target, "[id='" + this.dialogObj.element.id + "']") && this.parent.toolbarSettings.enable && this.parent.getToolbarElement() && !this.parent.getToolbarElement().contains(e.target) || this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target) && !closest(target, "#" + this.parent.getID() + "_toolbar_Audio") && !target.querySelector("#" + this.parent.getID() + "_toolbar_Audio"))) {
        if (e.offsetX > e.target.clientWidth || e.offsetY > e.target.clientHeight) {
        } else {
          this.dialogObj.hide({ returnValue: true });
          this.parent.isBlur = true;
          dispatchEvent(this.parent.element, "focusout");
        }
      }
      if (this.contentModule.getEditPanel().querySelector("." + CLS_AUD_FOCUS)) {
        if (!this.isAudioElem(e.target) && !isNullOrUndefined(this.audEle)) {
          this.audEle.style.outline = "";
        } else if (!isNullOrUndefined(this.prevSelectedAudEle) && this.prevSelectedAudEle !== target) {
          this.prevSelectedAudEle.style.outline = "";
        }
      }
    };
    Audio2.prototype.alignmentSelect = function(e) {
      var item = e.item;
      if (!document.body.contains(document.body.querySelector(".e-rte-quick-toolbar")) || item.command !== "Audios") {
        return;
      }
      var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
      var selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
      selectNodeEle = [this.audEle];
      var args = { args: e, selectNode: selectNodeEle };
      if (this.parent.formatter.getUndoRedoStack().length === 0) {
        this.parent.formatter.saveData();
      }
      switch (item.subCommand) {
        case "Inline":
          this.inline(args);
          break;
        case "Break":
          this.break(args);
          break;
      }
      if (this.quickToolObj && document.body.contains(this.quickToolObj.audioQTBar.element)) {
        this.quickToolObj.audioQTBar.hidePopup();
        removeClass([selectNodeEle[0]], CLS_AUD_FOCUS);
      }
    };
    Audio2.prototype.break = function(e) {
      if (e.selectNode[0].nodeName !== "AUDIO") {
        return;
      }
      var subCommand = e.args.item ? e.args.item.subCommand : "Break";
      this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand });
    };
    Audio2.prototype.inline = function(e) {
      if (e.selectNode[0].nodeName !== "AUDIO") {
        return;
      }
      var subCommand = e.args.item ? e.args.item.subCommand : "Inline";
      this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand });
    };
    Audio2.prototype.editAreaClickHandler = function(e) {
      if (this.parent.readonly) {
        this.hideAudioQuickToolbar();
        return;
      }
      var args = e.args;
      var showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
      if (args.which === 2 || showOnRightClick && args.which === 1 || !showOnRightClick && args.which === 3) {
        if (showOnRightClick && args.which === 1 && !isNullOrUndefined(args.target) && this.isAudioElem(args.target)) {
          this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
          this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.contentModule.getDocument(), args.target);
        }
        return;
      }
      if (this.parent.editorMode === "HTML" && this.parent.quickToolbarModule && this.parent.quickToolbarModule.audioQTBar) {
        this.quickToolObj = this.parent.quickToolbarModule;
        var target = args.target;
        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
        var isPopupOpen = this.quickToolObj.audioQTBar.element.classList.contains("e-rte-pop");
        if (this.isAudioElem(target) && this.parent.quickToolbarModule) {
          if (isPopupOpen) {
            return;
          }
          this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
          this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.contentModule.getDocument(), target);
          if (isIDevice2()) {
            this.parent.notify(selectionSave, e);
          }
          target.querySelector("audio").style.outline = "2px solid #4a90e2";
          this.showAudioQuickToolbar({ args, type: "Audios", elements: [args.target] });
        } else {
          this.hideAudioQuickToolbar();
        }
      }
    };
    Audio2.prototype.isAudioElem = function(target) {
      if (target && target.nodeType !== 3 && target.nodeName !== "BR" && (target.classList && (target.classList.contains(CLS_AUDIOWRAP) || target.classList.contains(CLS_CLICKELEM)))) {
        return true;
      } else {
        return false;
      }
    };
    Audio2.prototype.showAudioQuickToolbar = function(e) {
      var _this = this;
      if (e.type !== "Audios" || isNullOrUndefined(this.parent.quickToolbarModule) || isNullOrUndefined(this.parent.quickToolbarModule.audioQTBar) || isNullOrUndefined(e.args)) {
        return;
      }
      this.quickToolObj = this.parent.quickToolbarModule;
      var args = e.args;
      var target = e.elements;
      [].forEach.call(e.elements, function(element, index) {
        if (index === 0) {
          target = element;
        }
      });
      if (this.isAudioElem(target)) {
        addClass([target.querySelector("audio")], [CLS_AUD_FOCUS]);
        target.querySelector("audio").style.outline = "2px solid #4a90e2";
      }
      if (this.parent.quickToolbarModule.audioQTBar) {
        if (e.isNotify) {
          setTimeout(function() {
            _this.parent.formatter.editorManager.nodeSelection.Clear(_this.contentModule.getDocument());
            _this.parent.formatter.editorManager.nodeSelection.setSelectionContents(_this.contentModule.getDocument(), target);
            _this.quickToolObj.audioQTBar.showPopup(args.pageX - 50, target.getBoundingClientRect().top + 34, target);
          }, 400);
        } else {
          this.quickToolObj.audioQTBar.showPopup(args.pageX - 50, target.getBoundingClientRect().top + 34, target);
        }
      }
    };
    Audio2.prototype.hideAudioQuickToolbar = function() {
      if (!isNullOrUndefined(this.contentModule.getEditPanel().querySelector("." + CLS_AUD_FOCUS))) {
        removeClass([this.contentModule.getEditPanel().querySelector("." + CLS_AUD_FOCUS)], CLS_AUD_FOCUS);
        if (!isNullOrUndefined(this.audEle)) {
          this.audEle.style.outline = "";
        }
        if (this.quickToolObj && this.quickToolObj.audioQTBar && document.body.contains(this.quickToolObj.audioQTBar.element)) {
          this.quickToolObj.audioQTBar.hidePopup();
        }
      }
    };
    Audio2.prototype.insertingAudio = function(e) {
      this.insertAudio(e);
      if (!isNullOrUndefined(this.dialogObj)) {
        this.dialogObj.element.style.maxHeight = "inherit";
        var dialogContent = this.dialogObj.element.querySelector(".e-audio-content");
        if (!isNullOrUndefined(this.parent.insertAudioSettings.path) || this.parent.editorMode === "HTML") {
          document.getElementById(this.rteID + "_insertAudio").focus();
        } else {
          dialogContent.querySelector(".e-audio-url").focus();
        }
      }
    };
    Audio2.prototype.insertAudio = function(e) {
      var _this = this;
      if (this.dialogObj) {
        this.dialogObj.hide({ returnValue: true });
        return;
      }
      var audioDialog = this.parent.createElement("div", { className: "e-rte-audio-dialog", id: this.rteID + "_audio" });
      this.parent.element.appendChild(audioDialog);
      var audioInsert = this.i10n.getConstant("dialogInsert");
      var audiolinkCancel = this.i10n.getConstant("dialogCancel");
      var audioHeader = this.i10n.getConstant("audioHeader");
      var selection = e.selection;
      var selectObj = { selfAudio: this, selection: e.selection, args: e.args, selectParent: e.selectParent };
      var dialogModel = {
        header: audioHeader,
        cssClass: CLS_RTE_ELEMENTS,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        showCloseIcon: true,
        closeOnEscape: true,
        width: Browser.isDevice ? "290px" : "340px",
        position: { X: "center", Y: Browser.isDevice ? "center" : "top" },
        isModal: Browser.isDevice,
        buttons: [
          {
            click: this.insertAudioUrl.bind(selectObj),
            buttonModel: { content: audioInsert, cssClass: "e-flat e-insertAudio", isPrimary: true, disabled: true }
          },
          {
            click: function(e2) {
              _this.cancelDialog(e2);
            },
            buttonModel: { cssClass: "e-flat e-cancel", content: audiolinkCancel }
          }
        ],
        target: Browser.isDevice ? document.body : this.parent.element,
        animationSettings: { effect: "None" },
        close: function(event2) {
          if (_this.isAudioUploaded) {
            _this.uploadObj.removing();
          }
          _this.parent.isBlur = false;
          if (event2 && event2.event.returnValue) {
            if (_this.parent.editorMode === "HTML") {
              selection.restore();
            }
          }
          _this.dialogObj.destroy();
          detach(_this.dialogObj.element);
          _this.dialogRenderObj.close(event2);
          _this.dialogObj = null;
        }
      };
      var dialogContent = this.parent.createElement("div", { className: "e-audio-content" });
      if (!isNullOrUndefined(this.parent.insertAudioSettings.path) || this.parent.editorMode === "HTML") {
        dialogContent.appendChild(this.audioUpload(e));
      }
      var linkHeader = this.parent.createElement("div", { className: "e-audioheader" });
      var linkHeaderText = this.i10n.getConstant("audioLinkHeader");
      if (this.parent.editorMode === "HTML") {
        linkHeader.innerHTML = linkHeaderText;
      }
      dialogContent.appendChild(linkHeader);
      dialogContent.appendChild(this.audioUrlPopup(e));
      if (e.selectNode && e.selectNode[0].nodeType === 1 && this.isAudioElem(e.selectNode[0])) {
        dialogModel.header = this.parent.localeObj.getConstant("editAudioHeader");
        dialogModel.content = dialogContent;
      } else {
        dialogModel.content = dialogContent;
      }
      this.dialogObj = this.dialogRenderObj.render(dialogModel);
      this.dialogObj.createElement = this.parent.createElement;
      this.dialogObj.appendTo(audioDialog);
      if (e.selectNode && e.selectNode[0].nodeType === 1 && this.isAudioElem(e.selectNode[0]) && e.name === "insertAudio") {
        this.dialogObj.element.querySelector(".e-insertAudio").textContent = this.parent.localeObj.getConstant("dialogUpdate");
      }
      audioDialog.style.maxHeight = "inherit";
      if (this.quickToolObj) {
        if (this.quickToolObj.audioQTBar && document.body.contains(this.quickToolObj.audioQTBar.element)) {
          this.quickToolObj.audioQTBar.hidePopup();
        }
        if (this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {
          this.quickToolObj.inlineQTBar.hidePopup();
        }
      }
    };
    Audio2.prototype.audioUrlPopup = function(e) {
      var _this = this;
      var audioUrl = this.parent.createElement("div", { className: "audioUrl" });
      var placeUrl = this.i10n.getConstant("audioUrl");
      this.inputUrl = this.parent.createElement("input", {
        className: "e-input e-audio-url",
        attrs: { placeholder: placeUrl, spellcheck: "false", "aria-label": this.i10n.getConstant("audioLinkHeader") }
      });
      this.inputUrl.addEventListener("input", function() {
        if (!isNullOrUndefined(_this.inputUrl)) {
          if (_this.inputUrl.value.length === 0) {
            _this.dialogObj.getButtons(0).element.disabled = true;
          } else {
            _this.dialogObj.getButtons(0).element.removeAttribute("disabled");
          }
        }
      });
      audioUrl.appendChild(this.inputUrl);
      return audioUrl;
    };
    Audio2.prototype.audioUpload = function(e) {
      var _this = this;
      var save;
      var selectParent;
      var proxy = this;
      var iframe = proxy.parent.iframeSettings.enable;
      if (proxy.parent.editorMode === "HTML" && (!iframe && isNullOrUndefined(closest(e.selection.range.startContainer.parentNode, "[id='" + this.parent.contentModule.getPanel().id + "']")) || iframe && !hasClass(e.selection.range.startContainer.parentNode.ownerDocument.querySelector("body"), "e-lib"))) {
        this.contentModule.getEditPanel().focus();
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
        selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
      } else {
        save = e.selection;
        selectParent = e.selectParent;
      }
      var uploadParentEle = this.parent.createElement("div", { className: "e-aud-uploadwrap e-droparea" });
      var deviceAudioUpMsg = this.i10n.getConstant("audioDeviceUploadMessage");
      var audioUpMsg = this.i10n.getConstant("audioUploadMessage");
      var span = this.parent.createElement("span", { className: "e-droptext" });
      var spanMsg = this.parent.createElement("span", {
        className: "e-rte-upload-text",
        innerHTML: Browser.isDevice ? deviceAudioUpMsg : audioUpMsg
      });
      span.appendChild(spanMsg);
      var btnEle = this.parent.createElement("button", {
        className: "e-browsebtn",
        id: this.rteID + "_insertAudio",
        attrs: { autofocus: "true", type: "button" }
      });
      span.appendChild(btnEle);
      uploadParentEle.appendChild(span);
      var browserMsg = this.i10n.getConstant("browse");
      var button = new Button({ content: browserMsg, enableRtl: this.parent.enableRtl });
      button.isStringTemplate = true;
      button.createElement = this.parent.createElement;
      button.appendTo(btnEle);
      var btnClick = Browser.isDevice ? span : btnEle;
      EventHandler.add(btnClick, "click", this.fileSelect, this);
      var uploadEle = this.parent.createElement("input", {
        id: this.rteID + "_upload",
        attrs: { type: "File", name: "UploadFiles" }
      });
      uploadParentEle.appendChild(uploadEle);
      var fileName;
      var rawFile;
      var selectArgs;
      var filesData;
      var beforeUploadArgs;
      this.uploadObj = new Uploader({
        asyncSettings: { saveUrl: this.parent.insertAudioSettings.saveUrl, removeUrl: this.parent.insertAudioSettings.removeUrl },
        dropArea: span,
        multiple: false,
        enableRtl: this.parent.enableRtl,
        allowedExtensions: this.parent.insertAudioSettings.allowedTypes.toString(),
        selected: function(e2) {
          proxy.isAudioUploaded = true;
          selectArgs = e2;
          filesData = e2.filesData;
          if (_this.parent.isServerRendered) {
            selectArgs = JSON.parse(JSON.stringify(e2));
            e2.cancel = true;
            rawFile = e2.filesData;
            selectArgs.filesData = rawFile;
          }
          _this.parent.trigger(fileSelected, selectArgs, function(selectArgs2) {
            if (!selectArgs2.cancel) {
              _this.checkExtension(selectArgs2.filesData[0]);
              fileName = selectArgs2.filesData[0].name;
              if (_this.parent.editorMode === "HTML" && isNullOrUndefined(_this.parent.insertAudioSettings.path)) {
                var reader_1 = new FileReader();
                reader_1.addEventListener("load", function(e3) {
                  var url = _this.parent.insertAudioSettings.saveFormat === "Base64" ? reader_1.result : URL.createObjectURL(convertToBlob(reader_1.result));
                  proxy.uploadUrl = {
                    url,
                    selection: save,
                    fileName,
                    selectParent
                  };
                  proxy.inputUrl.setAttribute("disabled", "true");
                  if (isNullOrUndefined(proxy.parent.insertAudioSettings.saveUrl) && _this.isAllowedTypes && !isNullOrUndefined(_this.dialogObj)) {
                    _this.dialogObj.getButtons(0).element.removeAttribute("disabled");
                  }
                });
                reader_1.readAsDataURL(selectArgs2.filesData[0].rawFile);
              }
              if (_this.parent.isServerRendered) {
                _this.uploadObj._internalRenderSelect(selectArgs2, rawFile);
              }
            }
          });
        },
        beforeUpload: function(args) {
          if (_this.parent.isServerRendered) {
            beforeUploadArgs = JSON.parse(JSON.stringify(args));
            beforeUploadArgs.filesData = filesData;
            args.cancel = true;
            _this.parent.trigger(fileUploading, beforeUploadArgs, function(beforeUploadArgs2) {
              if (beforeUploadArgs2.cancel) {
                return;
              }
              _this.uploadObj.currentRequestHeader = beforeUploadArgs2.currentRequest ? beforeUploadArgs2.currentRequest : _this.uploadObj.currentRequestHeader;
              _this.uploadObj.customFormDatas = beforeUploadArgs2.customFormData && beforeUploadArgs2.customFormData.length > 0 ? beforeUploadArgs2.customFormData : _this.uploadObj.customFormDatas;
              _this.uploadObj.uploadFiles(rawFile, null);
            });
          } else {
            _this.parent.trigger(beforeFileUpload, args);
          }
        },
        uploading: function(e2) {
          if (!_this.parent.isServerRendered) {
            _this.parent.trigger(fileUploading, e2);
          }
        },
        success: function(e2) {
          _this.parent.trigger(fileUploadSuccess, e2, function(e3) {
            if (!isNullOrUndefined(_this.parent.insertAudioSettings.path)) {
              var url = _this.parent.insertAudioSettings.path + e3.file.name;
              var value = { url, selection: save };
              proxy.uploadUrl = {
                url,
                selection: save,
                fileName,
                selectParent
              };
              proxy.inputUrl.setAttribute("disabled", "true");
            }
            if (e3.operation === "upload" && !isNullOrUndefined(_this.dialogObj)) {
              _this.dialogObj.getButtons(0).element.removeAttribute("disabled");
            }
          });
        },
        failure: function(e2) {
          _this.parent.trigger(fileUploadFailed, e2);
        },
        removing: function() {
          _this.parent.trigger(fileRemoving, e, function(e2) {
            proxy.isAudioUploaded = false;
            _this.dialogObj.getButtons(0).element.disabled = true;
            proxy.inputUrl.removeAttribute("disabled");
            if (proxy.uploadUrl) {
              proxy.uploadUrl.url = "";
            }
          });
        }
      });
      this.uploadObj.isStringTemplate = true;
      this.uploadObj.createElement = this.parent.createElement;
      this.uploadObj.appendTo(uploadEle);
      return uploadParentEle;
    };
    Audio2.prototype.checkExtension = function(e) {
      if (this.uploadObj.allowedExtensions) {
        if (this.uploadObj.allowedExtensions.toLocaleLowerCase().indexOf(("." + e.type).toLocaleLowerCase()) === -1) {
          this.dialogObj.getButtons(0).element.setAttribute("disabled", "disabled");
          this.isAllowedTypes = false;
        } else {
          this.isAllowedTypes = true;
        }
      }
    };
    Audio2.prototype.fileSelect = function() {
      this.dialogObj.element.getElementsByClassName("e-file-select-wrap")[0].querySelector("button").click();
      return false;
    };
    Audio2.prototype.cancelDialog = function(e) {
      this.parent.isBlur = false;
      this.dialogObj.hide({ returnValue: true });
      if (this.isAudioUploaded) {
        this.uploadObj.removing();
      }
    };
    Audio2.prototype.insertAudioUrl = function(e) {
      var proxy = this.selfAudio;
      proxy.isAudioUploaded = false;
      var url = proxy.inputUrl.value;
      if (proxy.parent.formatter.getUndoRedoStack().length === 0) {
        proxy.parent.formatter.saveData();
      }
      if (!isNullOrUndefined(proxy.uploadUrl) && proxy.uploadUrl.url !== "") {
        proxy.uploadUrl.cssClass = proxy.parent.insertAudioSettings.layoutOption === "Inline" ? CLS_AUDIOINLINE : CLS_AUDIOBREAK;
        proxy.dialogObj.hide({ returnValue: false });
        proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, proxy.uploadUrl);
        proxy.uploadUrl.url = "";
      } else if (url !== "") {
        if (proxy.parent.editorMode === "HTML" && isNullOrUndefined(closest(
          // eslint-disable-next-line
          this.selection.range.startContainer.parentNode,
          "[id='" + proxy.contentModule.getPanel().id + "']"
        ))) {
          proxy.contentModule.getEditPanel().focus();
          var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.contentModule.getDocument());
          this.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.contentModule.getDocument());
          this.selectParent = proxy.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        }
        var name_1 = proxy.parent.editorMode === "HTML" ? url.split("/")[url.split("/").length - 1] : "";
        var value = {
          cssClass: proxy.parent.insertAudioSettings.layoutOption === "Inline" ? CLS_AUDIOINLINE : CLS_AUDIOBREAK,
          url,
          selection: this.selection,
          fileName: name_1,
          selectParent: this.selectParent
        };
        proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, value);
        proxy.dialogObj.hide({ returnValue: false });
      }
    };
    Audio2.prototype.destroy = function() {
      this.prevSelectedAudEle = void 0;
      this.removeEventListener();
    };
    Audio2.prototype.getModuleName = function() {
      return "audio";
    };
    return Audio2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/video-module.js
var Video = (
  /** @class */
  function() {
    function Video2(parent, serviceLocator) {
      this.isVideoUploaded = false;
      this.isAllowedTypes = true;
      this.pageX = null;
      this.pageY = null;
      this.deletedVid = [];
      this.parent = parent;
      this.rteID = parent.element.id;
      this.i10n = serviceLocator.getService("rteLocale");
      this.rendererFactory = serviceLocator.getService("rendererFactory");
      this.dialogRenderObj = serviceLocator.getService("dialogRenderObject");
      this.addEventListener();
    }
    Video2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(keyDown, this.onKeyDown, this);
      this.parent.on(keyUp, this.onKeyUp, this);
      this.parent.on(insertVideo, this.insertingVideo, this);
      this.parent.on(initialEnd, this.afterRender, this);
      this.parent.on(dynamicModule, this.afterRender, this);
      this.parent.on(windowResize, this.onWindowResize, this);
      this.parent.on(showVideoDialog, this.showDialog, this);
      this.parent.on(closeVideoDialog, this.closeDialog, this);
      this.parent.on(dropDownSelect, this.alignmentSelect, this);
      this.parent.on(videoDelete, this.deleteVideo, this);
      this.parent.on(videoToolbarAction, this.onToolbarAction, this);
      this.parent.on(editAreaClick, this.editAreaClickHandler, this);
      this.parent.on(iframeMouseDown, this.onIframeMouseDown, this);
      this.parent.on(videoSize, this.videoSize, this);
      this.parent.on(insertCompleted, this.showVideoQuickToolbar, this);
      this.parent.on(clearDialogObj, this.clearDialogObj, this);
      this.parent.on(destroy, this.removeEventListener, this);
    };
    Video2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(keyDown, this.onKeyDown);
      this.parent.off(keyUp, this.onKeyUp);
      this.parent.off(insertVideo, this.insertingVideo);
      this.parent.off(windowResize, this.onWindowResize);
      this.parent.off(initialEnd, this.afterRender);
      this.parent.off(dynamicModule, this.afterRender);
      this.parent.off(showVideoDialog, this.showDialog);
      this.parent.off(closeVideoDialog, this.closeDialog);
      this.parent.off(dropDownSelect, this.alignmentSelect);
      this.parent.off(videoDelete, this.deleteVideo);
      this.parent.off(videoToolbarAction, this.onToolbarAction);
      this.parent.off(editAreaClick, this.editAreaClickHandler);
      this.parent.off(iframeMouseDown, this.onIframeMouseDown);
      this.parent.off(videoSize, this.videoSize);
      this.parent.off(insertCompleted, this.showVideoQuickToolbar);
      this.parent.off(clearDialogObj, this.clearDialogObj);
      this.parent.off(destroy, this.removeEventListener);
      if (!isNullOrUndefined(this.contentModule)) {
        EventHandler.remove(this.contentModule.getEditPanel(), Browser.touchEndEvent, this.videoClick);
        this.parent.formatter.editorManager.observer.off(checkUndo, this.undoStack);
        if (this.parent.insertVideoSettings.resize) {
          EventHandler.remove(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.resizeStart);
          EventHandler.remove(this.parent.element.ownerDocument, "mousedown", this.onDocumentClick);
          EventHandler.remove(this.contentModule.getEditPanel(), "cut", this.onCutHandler);
        }
      }
    };
    Video2.prototype.afterRender = function() {
      this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
      EventHandler.add(this.contentModule.getEditPanel(), Browser.touchEndEvent, this.videoClick, this);
      if (this.parent.insertVideoSettings.resize) {
        EventHandler.add(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.resizeStart, this);
        EventHandler.add(this.parent.element.ownerDocument, "mousedown", this.onDocumentClick, this);
        EventHandler.add(this.contentModule.getEditPanel(), "cut", this.onCutHandler, this);
      }
    };
    Video2.prototype.clearDialogObj = function() {
      if (this.dialogObj) {
        this.dialogObj.destroy();
        detach(this.dialogObj.element);
        this.dialogObj = null;
      }
    };
    Video2.prototype.onKeyUp = function(event2) {
      if (!isNullOrUndefined(this.deletedVid) && this.deletedVid.length > 0) {
        for (var i = 0; i < this.deletedVid.length; i++) {
          var args = {
            element: this.deletedVid[i],
            src: this.deletedVid[i].tagName !== "IFRAME" ? this.deletedVid[i].querySelector("source").getAttribute("src") : this.deletedVid[i].src
          };
          this.parent.trigger(afterMediaDelete, args);
        }
      }
    };
    Video2.prototype.undoStack = function(args) {
      if (args.subCommand.toLowerCase() === "undo" || args.subCommand.toLowerCase() === "redo") {
        for (var i = 0; i < this.parent.formatter.getUndoRedoStack().length; i++) {
          var temp = this.parent.createElement("div");
          var contentElem = this.parent.formatter.getUndoRedoStack()[i].text;
          temp.appendChild(contentElem.cloneNode(true));
          var vid = temp.querySelectorAll("video");
          if (temp.querySelector(".e-vid-resize") && vid.length > 0) {
            for (var j = 0; j < vid.length; j++) {
              vid[j].style.outline = "";
            }
            detach(temp.querySelector(".e-vid-resize"));
            var clonedElement = temp.cloneNode(true);
            var fragment = document.createDocumentFragment();
            while (clonedElement.firstChild) {
              fragment.appendChild(clonedElement.firstChild);
            }
            this.parent.formatter.getUndoRedoStack()[i].text = fragment;
          }
        }
      }
    };
    Video2.prototype.onIframeMouseDown = function() {
      if (this.dialogObj) {
        this.dialogObj.hide({ returnValue: true });
      }
    };
    Video2.prototype.videoSize = function(e) {
      var _this = this;
      if (e.selectNode[0].nodeName !== "VIDEO" && !this.isEmbedVidElem(e.selectNode[0])) {
        return;
      }
      this.insertVideo(e);
      if (!isNullOrUndefined(this.dialogObj)) {
        var vidSizeHeader = this.i10n.getConstant("videoSizeHeader");
        var linkUpdate = this.i10n.getConstant("dialogUpdate");
        var dialogContent = this.vidsizeInput(e);
        var selectObj_1 = { args: e.args, selfVideo: this, selection: e.selection, selectNode: e.selectNode };
        this.dialogObj.setProperties({
          height: "inherit",
          width: "290px",
          header: vidSizeHeader,
          content: dialogContent,
          position: { X: "center", Y: "center" },
          buttons: [{
            // eslint-disable-next-line
            click: function(e2) {
              _this.insertSize(selectObj_1);
            },
            buttonModel: {
              content: linkUpdate,
              cssClass: "e-flat e-update-size",
              isPrimary: true
            }
          }]
        });
        this.dialogObj.element.style.maxHeight = "inherit";
        this.dialogObj.content.querySelector("input").focus();
      }
    };
    Video2.prototype.vidsizeInput = function(e) {
      var _this = this;
      var selectNode = e.selectNode[0];
      var vidHeight = this.i10n.getConstant("videoHeight");
      var vidWidth = this.i10n.getConstant("videoWidth");
      var vidSizeWrap = this.parent.createElement("div", { className: "e-video-sizewrap" });
      var widthVal = isNullOrUndefined(this.changedWidthValue) && (selectNode.style.width.toString() === "auto" || selectNode.style.width !== "") ? selectNode.style.width : !isNullOrUndefined(this.changedWidthValue) ? this.changedWidthValue : parseInt(selectNode.getClientRects()[0].width.toString(), 10).toString();
      var heightVal = isNullOrUndefined(this.changedHeightValue) && (selectNode.style.height.toString() === "auto" || selectNode.style.height !== "") ? selectNode.style.height : !isNullOrUndefined(this.changedHeightValue) ? this.changedHeightValue : parseInt(selectNode.getClientRects()[0].height.toString(), 10).toString();
      this.changedWidthValue = null;
      this.changedHeightValue = null;
      var content = '<div class="e-rte-label"><label>' + vidWidth + '</label></div><div class="e-rte-field"><input type="text" id="vidwidth" class="e-vid-width" value=' + widthVal + ' /></div><div class="e-rte-label"><label>' + vidHeight + '</label></div><div class="e-rte-field"> <input type="text" id="vidheight" class="e-vid-height" value=' + heightVal + " /></div>";
      var contentElem = parseHtml(content);
      vidSizeWrap.appendChild(contentElem);
      var widthNum = new TextBox({
        value: formatUnit(widthVal),
        enableRtl: this.parent.enableRtl,
        input: function(e2) {
          _this.inputWidthValue = formatUnit(e2.value);
        }
      });
      widthNum.createElement = this.parent.createElement;
      widthNum.appendTo(vidSizeWrap.querySelector("#vidwidth"));
      var heightNum = new TextBox({
        value: formatUnit(heightVal),
        enableRtl: this.parent.enableRtl,
        input: function(e2) {
          _this.inputHeightValue = formatUnit(e2.value);
        }
      });
      heightNum.createElement = this.parent.createElement;
      heightNum.appendTo(vidSizeWrap.querySelector("#vidheight"));
      return vidSizeWrap;
    };
    Video2.prototype.insertSize = function(e) {
      e.selection.restore();
      var proxy = e.selfVideo;
      if (proxy.parent.formatter.getUndoRedoStack().length === 0) {
        proxy.parent.formatter.saveData();
      }
      var dialogEle = proxy.dialogObj.element;
      this.changedWidthValue = this.inputWidthValue;
      this.changedHeightValue = this.inputHeightValue;
      var width = dialogEle.querySelector(".e-vid-width").value;
      var height = dialogEle.parentElement.querySelector(".e-vid-height").value;
      proxy.parent.formatter.process(this.parent, e.args, e.args, {
        width,
        height,
        selectNode: e.selectNode,
        subCommand: e.args.item.subCommand
      });
      if (this.vidResizeDiv) {
        e.selectNode[0] = e.selectNode[0].tagName === "VIDEO" || e.selectNode[0].tagName === "IFRAME" ? e.selectNode[0] : e.selectNode[0].querySelector("iframe");
        proxy.vidResizePos(e.selectNode[0], this.vidResizeDiv);
      }
      proxy.dialogObj.hide({ returnValue: true });
    };
    Video2.prototype.resizeEnd = function(e) {
      this.resizeBtnInit();
      this.videoEle.parentElement.style.cursor = "auto";
      if (Browser.isDevice) {
        removeClass([e.target.parentElement], "e-mob-span");
      }
      var args = { event: e, requestType: "videos" };
      this.parent.trigger(resizeStop, args);
      var pageX = this.getPointX(e);
      var pageY = this.parent.iframeSettings.enable ? window.pageYOffset + this.parent.element.getBoundingClientRect().top + e.clientY : e.pageY;
      this.parent.formatter.editorManager.observer.on(checkUndo, this.undoStack, this);
      this.parent.formatter.saveData();
    };
    Video2.prototype.resizeStart = function(e, ele) {
      var _this = this;
      if (this.parent.readonly) {
        return;
      }
      var target = ele ? ele : !this.isEmbedVidElem(e.target) ? e.target : e.target.querySelector("iframe");
      this.prevSelectedVidEle = this.videoEle;
      if (target.tagName === "VIDEO" || target.tagName === "IFRAME") {
        this.parent.preventDefaultResize(e);
        var videoElem = target;
        if (this.vidResizeDiv && this.contentModule.getEditPanel().contains(this.vidResizeDiv)) {
          detach(this.vidResizeDiv);
        }
        this.videoResize(videoElem);
      }
      if (target.classList.contains("e-rte-videoboxmark")) {
        if (this.parent.formatter.getUndoRedoStack().length === 0) {
          this.parent.formatter.saveData();
        }
        this.pageX = this.getPointX(e);
        this.pageY = this.getPointY(e);
        e.preventDefault();
        e.stopImmediatePropagation();
        this.resizeBtnInit();
        if (this.quickToolObj) {
          this.quickToolObj.videoQTBar.hidePopup();
        }
        if (target.classList.contains("e-rte-topLeft")) {
          this.resizeBtnStat.topLeft = true;
        }
        if (target.classList.contains("e-rte-topRight")) {
          this.resizeBtnStat.topRight = true;
        }
        if (target.classList.contains("e-rte-botLeft")) {
          this.resizeBtnStat.botLeft = true;
        }
        if (target.classList.contains("e-rte-botRight")) {
          this.resizeBtnStat.botRight = true;
        }
        if (Browser.isDevice && this.contentModule.getEditPanel().contains(this.vidResizeDiv) && !this.vidResizeDiv.classList.contains("e-mob-span")) {
          addClass([this.vidResizeDiv], "e-mob-span");
        } else {
          var args = { event: e, requestType: "videos" };
          this.parent.trigger(resizeStart, args, function(resizeStartArgs) {
            if (resizeStartArgs.cancel) {
              _this.cancelResizeAction();
            }
          });
        }
        EventHandler.add(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd, this);
      }
    };
    Video2.prototype.videoClick = function(e) {
      if (Browser.isDevice) {
        if (e.target.tagName === "VIDEO" || this.isEmbedVidElem(e.target)) {
          this.contentModule.getEditPanel().setAttribute("contenteditable", "false");
          e.target.focus();
        } else {
          if (!this.parent.readonly) {
            this.contentModule.getEditPanel().setAttribute("contenteditable", "true");
          }
        }
      }
      if (e.target.tagName === "VIDEO" || this.isEmbedVidElem(e.target)) {
        e.preventDefault();
      }
    };
    Video2.prototype.onCutHandler = function() {
      if (this.vidResizeDiv && this.contentModule.getEditPanel().contains(this.vidResizeDiv)) {
        this.cancelResizeAction();
      }
    };
    Video2.prototype.videoResize = function(e) {
      this.resizeBtnInit();
      this.videoEle = e;
      addClass([this.videoEle], "e-resize");
      this.vidResizeDiv = this.parent.createElement("span", { className: "e-vid-resize", id: this.rteID + "_vidResize" });
      this.vidResizeDiv.appendChild(this.parent.createElement("span", {
        className: "e-rte-videoboxmark e-rte-topLeft",
        styles: "cursor: nwse-resize"
      }));
      this.vidResizeDiv.appendChild(this.parent.createElement("span", {
        className: "e-rte-videoboxmark e-rte-topRight",
        styles: "cursor: nesw-resize"
      }));
      this.vidResizeDiv.appendChild(this.parent.createElement("span", {
        className: "e-rte-videoboxmark e-rte-botLeft",
        styles: "cursor: nesw-resize"
      }));
      this.vidResizeDiv.appendChild(this.parent.createElement("span", {
        className: "e-rte-videoboxmark e-rte-botRight",
        styles: "cursor: nwse-resize"
      }));
      if (Browser.isDevice) {
        addClass([this.vidResizeDiv], "e-mob-rte");
      }
      e.style.outline = "2px solid #4a90e2";
      this.vidResizePos(e, this.vidResizeDiv);
      this.resizeVidDupPos(e);
      this.contentModule.getEditPanel().appendChild(this.vidResizeDiv);
      EventHandler.add(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing, this);
    };
    Video2.prototype.getPointX = function(e) {
      if (e.touches && e.touches.length) {
        return e.touches[0].pageX;
      } else {
        return e.pageX;
      }
    };
    Video2.prototype.getPointY = function(e) {
      if (e.touches && e.touches.length) {
        return e.touches[0].pageY;
      } else {
        return e.pageY;
      }
    };
    Video2.prototype.vidResizePos = function(e, vidResizeDiv) {
      if (isNullOrUndefined(vidResizeDiv)) {
        return;
      }
      var pos = this.calcPos(e);
      var top2 = pos.top;
      var left = pos.left;
      var vidWid = e.width !== 0 && e.width !== "auto" && e.width !== "NaN" ? e.width : e.getBoundingClientRect().width;
      var vidHgt = e.height !== 0 && e.height !== "auto" && e.height !== "NaN" ? e.height : e.getBoundingClientRect().height;
      var borWid = Browser.isDevice ? 4 * parseInt(e.style.outline.slice(-3), 10) + 2 : 2 * parseInt(e.style.outline.slice(-3), 10) + 2;
      var devWid = Browser.isDevice ? 0 : 2;
      vidResizeDiv.querySelector(".e-rte-botLeft").style.left = left - borWid + "px";
      vidResizeDiv.querySelector(".e-rte-botLeft").style.top = parseInt(vidHgt.toString(), 10) - borWid + top2 + "px";
      vidResizeDiv.querySelector(".e-rte-botRight").style.left = parseInt(vidWid.toString(), 10) - (borWid - devWid) + left + "px";
      vidResizeDiv.querySelector(".e-rte-botRight").style.top = parseInt(vidHgt.toString(), 10) - borWid + top2 + "px";
      vidResizeDiv.querySelector(".e-rte-topRight").style.left = parseInt(vidWid.toString(), 10) - (borWid - devWid) + left + "px";
      vidResizeDiv.querySelector(".e-rte-topRight").style.top = top2 - borWid + "px";
      vidResizeDiv.querySelector(".e-rte-topLeft").style.left = left - borWid + "px";
      vidResizeDiv.querySelector(".e-rte-topLeft").style.top = top2 - borWid + "px";
    };
    Video2.prototype.calcPos = function(elem) {
      var ignoreOffset = ["TD", "TH", "TABLE", "A"];
      var parentOffset = { top: 0, left: 0 };
      var elementOffset;
      var doc = elem.ownerDocument;
      var offsetParent = (elem.offsetParent && (elem.offsetParent.classList.contains("e-video-clickelem") || ignoreOffset.indexOf(elem.offsetParent.tagName) > -1) ? closest(elem, "#" + this.parent.getID() + "_rte-edit-view") : elem.offsetParent) || doc.documentElement;
      while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && offsetParent.style.position === "static") {
        offsetParent = offsetParent.parentNode;
      }
      if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
        parentOffset = offsetParent.getBoundingClientRect();
      }
      if (elem && elem.nodeType === 1 && elem.tagName === "IFRAME") {
        elementOffset = elem.getBoundingClientRect();
        return {
          top: elementOffset.top - parentOffset.top,
          left: elementOffset.left - parentOffset.left
        };
      } else {
        return {
          top: elem.offsetTop,
          left: elem.offsetLeft
        };
      }
    };
    Video2.prototype.setAspectRatio = function(vid, expectedX, expectedY, e) {
      var vidEleStyle = getComputedStyle(vid);
      if (isNullOrUndefined(vidEleStyle)) {
        return;
      }
      var width = vidEleStyle.width !== "" ? vidEleStyle.width.match(/^\d+(\.\d*)?%$/g) ? parseFloat(vidEleStyle.width) : parseInt(vidEleStyle.width, 10) : vid.style.width !== "" ? vid.style.width : vid.width;
      var height = vidEleStyle.height !== "" ? parseInt(vidEleStyle.height, 10) : vid.style.height !== "" ? vid.style.height : vid.height;
      if (width > height) {
        vid.style.minWidth = this.parent.insertVideoSettings.minWidth === 0 ? "200px" : formatUnit(this.parent.insertVideoSettings.minWidth);
        vid.style.minHeight = this.parent.insertVideoSettings.minHeight === 0 ? "90px" : formatUnit(this.parent.insertVideoSettings.minHeight);
        if (this.parent.insertVideoSettings.resizeByPercent) {
          if (parseInt("" + vid.getBoundingClientRect().width, 10) !== 0 && parseInt("" + width, 10) !== 0) {
            var percentageValue = this.pixToPerc(parseInt(width.toString(), 10) / parseInt(height.toString(), 10) * expectedY, vid.previousElementSibling || vid.parentElement);
            vid.style.width = Math.min(Math.round(percentageValue / vid.getBoundingClientRect().width * expectedX * 100) / 100, 100) + "%";
          } else {
            vid.style.width = this.pixToPerc(parseInt(width.toString(), 10) / parseInt(height.toString(), 10) * expectedY, vid.previousElementSibling || vid.parentElement) + "%";
          }
          vid.style.height = null;
          vid.removeAttribute("height");
        } else if (vid.style.width === "" && vid.style.height !== "" || vidEleStyle.width === "" && vidEleStyle.height !== "") {
          vid.style.height = expectedY + "px";
        } else if (vid.style.width !== "" && vid.style.height === "" || vidEleStyle.width !== "" && vidEleStyle.height === "") {
          var currentWidth = parseInt(width.toString(), 10) / parseInt(height.toString(), 10) * expectedY + parseInt(width.toString(), 10) / parseInt(height.toString(), 10) < this.parent.inputElement.getBoundingClientRect().right - 32 ? parseInt(width.toString(), 10) / parseInt(height.toString(), 10) * expectedY + parseInt(width.toString(), 10) / parseInt(height.toString(), 10) : this.parent.inputElement.getBoundingClientRect().right - 32;
          vid.style.width = currentWidth.toString() + "px";
        } else if (vid.style.width !== "" || vidEleStyle.width !== "") {
          var currentWidth = parseInt(width.toString(), 10) / parseInt(height.toString(), 10) * expectedY < this.parent.inputElement.getBoundingClientRect().right - 32 ? parseInt(width.toString(), 10) / parseInt(height.toString(), 10) * expectedY : this.parent.inputElement.getBoundingClientRect().right - 32;
          vid.style.width = currentWidth + "px";
          vid.style.height = expectedY + "px";
        } else {
          vid.setAttribute("width", parseInt((parseInt(width.toString(), 10) / parseInt(height.toString(), 10) * expectedY + parseInt(width.toString(), 10) / parseInt(height.toString(), 10)).toString(), 10).toString());
        }
      } else if (height > width) {
        if (this.parent.insertVideoSettings.resizeByPercent) {
          if (parseInt("" + vid.getBoundingClientRect().width, 10) !== 0 && parseInt("" + width, 10) !== 0) {
            vid.style.width = Math.min(Math.round(parseInt(width.toString(), 10) / vid.getBoundingClientRect().width * expectedX * 100) / 100, 100) + "%";
          } else {
            vid.style.width = this.pixToPerc(expectedX / parseInt(height.toString(), 10) * expectedY, vid.previousElementSibling || vid.parentElement) + "%";
          }
          vid.style.height = null;
          vid.removeAttribute("height");
        } else if (vid.style.width !== "" || vidEleStyle.width !== "") {
          vid.style.width = expectedX + "px";
          vid.style.height = parseInt(height.toString(), 10) / parseInt(width.toString(), 10) * expectedX + "px";
        } else {
          vid.setAttribute("width", this.resizeBtnStat.botRight ? (this.getPointX(e.event) - vid.getBoundingClientRect().left).toString() : expectedX.toString());
        }
      } else {
        if (this.parent.insertVideoSettings.resizeByPercent) {
          vid.style.width = this.pixToPerc(expectedX, vid.previousElementSibling || vid.parentElement) + "%";
          vid.style.height = null;
          vid.removeAttribute("height");
        } else {
          vid.style.width = expectedX + "px";
          vid.style.height = expectedX + "px";
        }
      }
    };
    Video2.prototype.pixToPerc = function(expected, parentEle) {
      return expected / parseFloat(getComputedStyle(parentEle).width) * 100;
    };
    Video2.prototype.vidDupMouseMove = function(width, height, e) {
      var _this = this;
      var args = { event: e, requestType: "videos" };
      this.parent.trigger(onResize, args, function(resizingArgs) {
        if (resizingArgs.cancel) {
          _this.cancelResizeAction();
        } else {
          if (parseInt(_this.parent.insertVideoSettings.minWidth, 10) >= parseInt(width, 10) || parseInt(_this.parent.getInsertVidMaxWidth(), 10) <= parseInt(width, 10) && isNullOrUndefined(_this.videoEle.style.width)) {
            return;
          }
          if (!_this.parent.insertVideoSettings.resizeByPercent && (parseInt(_this.parent.insertVideoSettings.minHeight, 10) >= parseInt(height, 10) || parseInt(_this.parent.insertVideoSettings.maxHeight, 10) <= parseInt(height, 10))) {
            return;
          }
          _this.videoEle.parentElement.style.cursor = "pointer";
          _this.setAspectRatio(_this.videoEle, parseInt(width, 10), parseInt(height, 10), args);
          _this.resizeVidDupPos(_this.videoEle);
          _this.vidResizePos(_this.videoEle, _this.vidResizeDiv);
          _this.parent.setContentHeight("", false);
        }
      });
    };
    Video2.prototype.resizing = function(e) {
      if (this.videoEle.offsetWidth >= this.parent.getInsertVidMaxWidth()) {
        this.videoEle.style.maxHeight = this.videoEle.offsetHeight + "px";
      }
      var pageX = this.getPointX(e);
      var pageY = this.getPointY(e);
      var mouseX = this.resizeBtnStat.botLeft || this.resizeBtnStat.topLeft ? -(pageX - this.pageX) : pageX - this.pageX;
      var mouseY = this.resizeBtnStat.topLeft || this.resizeBtnStat.topRight ? -(pageY - this.pageY) : pageY - this.pageY;
      var width = parseInt(this.vidDupPos.width, 10) + mouseX;
      var height = parseInt(this.vidDupPos.height, 10) + mouseY;
      this.pageX = pageX;
      this.pageY = pageY;
      if (this.resizeBtnStat.botRight) {
        this.vidDupMouseMove(width + "px", height + "px", e);
      } else if (this.resizeBtnStat.botLeft) {
        this.vidDupMouseMove(width + "px", height + "px", e);
      } else if (this.resizeBtnStat.topRight) {
        this.vidDupMouseMove(width + "px", height + "px", e);
      } else if (this.resizeBtnStat.topLeft) {
        this.vidDupMouseMove(width + "px", height + "px", e);
      }
    };
    Video2.prototype.cancelResizeAction = function() {
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);
      if (this.videoEle && this.vidResizeDiv && this.contentModule.getEditPanel().contains(this.vidResizeDiv)) {
        detach(this.vidResizeDiv);
        this.videoEle.style.outline = "";
        this.vidResizeDiv = null;
        this.pageX = null;
        this.pageY = null;
      }
    };
    Video2.prototype.resizeVidDupPos = function(e) {
      this.vidDupPos = {
        width: e.style.width !== "" && (this.parent.insertVideoSettings && !this.parent.insertVideoSettings.resizeByPercent) ? this.videoEle.style.width : e.width !== "auto" && e.width !== 0 && e.width !== "NaN" ? e.width + "px" : parseInt(getComputedStyle(e).width, 10) + "px",
        height: e.style.height !== "" ? this.videoEle.style.height : e.height !== "auto" && e.height !== 0 && e.height !== "NaN" ? e.height + "px" : parseInt(getComputedStyle(e).height, 10) + "px"
      };
    };
    Video2.prototype.resizeBtnInit = function() {
      return this.resizeBtnStat = { botLeft: false, botRight: false, topRight: false, topLeft: false };
    };
    Video2.prototype.onToolbarAction = function(args) {
      if (isIDevice2()) {
        this.parent.notify(selectionRestore, {});
      }
      var item = args.args.item;
      switch (item.subCommand) {
        case "VideoReplace":
          this.parent.notify(insertVideo, args);
          break;
        case "VideoRemove":
          this.parent.notify(videoDelete, args);
          break;
        case "VideoDimension":
          this.parent.notify(videoSize, args);
      }
    };
    Video2.prototype.onKeyDown = function(event2) {
      var originalEvent = event2.args;
      var range;
      var save;
      var selectNodeEle;
      var selectParentEle;
      this.deletedVid = [];
      var isCursor;
      var keyCodeValues = [
        27,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        44,
        45,
        9,
        16,
        17,
        18,
        19,
        20,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        91,
        92,
        93,
        144,
        145,
        182,
        183
      ];
      if (this.parent.editorMode === "HTML") {
        range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        isCursor = range.startContainer === range.endContainer && range.startOffset === range.endOffset;
      }
      if (!isCursor && this.parent.editorMode === "HTML" && keyCodeValues.indexOf(originalEvent.which) < 0) {
        var nodes = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        for (var i = 0; i < nodes.length; i++) {
          if (nodes[i].nodeName === "VIDEO" || nodes[i].nodeName === "IFRAME") {
            this.deletedVid.push(nodes[i]);
          }
        }
      }
      if (this.parent.editorMode === "HTML" && (originalEvent.which === 8 && originalEvent.code === "Backspace" || originalEvent.which === 46 && originalEvent.code === "Delete")) {
        var isCursor_1 = range.startContainer === range.endContainer && range.startOffset === range.endOffset;
        if (originalEvent.which === 8 && originalEvent.code === "Backspace" && isCursor_1) {
          this.checkVideoBack(range);
        } else if (originalEvent.which === 46 && originalEvent.code === "Delete" && isCursor_1) {
          this.checkVideoDel(range);
        }
      }
      if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection) && originalEvent.code !== "KeyK") {
        range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        if (!originalEvent.ctrlKey && originalEvent.key && (originalEvent.key.length === 1 || originalEvent.action === "enter") && (!isNullOrUndefined(selectParentEle[0]) && selectParentEle[0].tagName === "VIDEO" || this.isEmbedVidElem(selectParentEle[0])) && selectParentEle[0].parentElement) {
          var prev = selectParentEle[0].parentElement.childNodes[0];
          if (this.contentModule.getEditPanel().querySelector(".e-vid-resize")) {
            this.removeResizeEle();
          }
          this.parent.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), prev, prev, prev.textContent.length, prev.textContent.length);
          removeClass([selectParentEle[0]], CLS_VID_FOCUS);
          this.quickToolObj.videoQTBar.hidePopup();
        }
      }
      if (originalEvent.ctrlKey && (originalEvent.keyCode === 89 || originalEvent.keyCode === 90)) {
        this.undoStack({ subCommand: originalEvent.keyCode === 90 ? "undo" : "redo" });
      }
      if (originalEvent.keyCode === 8 || originalEvent.keyCode === 46) {
        if (selectNodeEle && (selectNodeEle[0].nodeName === "VIDEO" || this.isEmbedVidElem(selectNodeEle[0])) && selectNodeEle.length < 1) {
          if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection)) {
            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
          }
          originalEvent.preventDefault();
          var event_1 = {
            selectNode: selectNodeEle,
            selection: save,
            selectParent: selectParentEle,
            args: {
              item: { command: "Videos", subCommand: "VideoRemove" },
              originalEvent
            }
          };
          this.deleteVideo(event_1, originalEvent.keyCode);
        }
        if (this.parent.contentModule.getEditPanel().querySelector(".e-vid-resize")) {
          this.removeResizeEle();
        }
      }
      if (originalEvent.code === "Backspace") {
        originalEvent.action = "backspace";
      }
      switch (originalEvent.action) {
        case "escape":
          if (!isNullOrUndefined(this.dialogObj)) {
            this.dialogObj.close();
          }
          break;
        case "backspace":
        case "delete":
          for (var i = 0; i < this.deletedVid.length; i++) {
            var src = this.deletedVid[i].src;
            this.videoRemovePost(src);
          }
          if (this.parent.editorMode !== "Markdown") {
            if (range.startContainer.nodeType === 3) {
              if (originalEvent.code === "Backspace") {
                if (range.startContainer.previousElementSibling && range.startOffset === 0 && range.startContainer.previousElementSibling.classList.contains(CLS_VIDEOWRAP)) {
                  detach(range.startContainer.previousElementSibling);
                }
              } else {
                if (range.startContainer.nextElementSibling && range.endContainer.textContent.length === range.endOffset && range.startContainer.nextElementSibling.classList.contains(CLS_VIDEOWRAP)) {
                  detach(range.startContainer.nextElementSibling);
                }
              }
            } else if (range.startContainer.nodeType === 1 && (range.startContainer.classList && range.startContainer.classList.contains(CLS_VIDEOWRAP))) {
              detach(range.startContainer);
            }
          }
          break;
        case "insert-video":
          if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection)) {
            save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
          }
          this.openDialog(true, originalEvent, save, selectNodeEle, selectParentEle);
          originalEvent.preventDefault();
          break;
      }
    };
    Video2.prototype.openDialog = function(isInternal, event2, selection, ele, parentEle) {
      var range;
      var save;
      var selectNodeEle;
      var selectParentEle;
      if (!isInternal && !isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection)) {
        range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
        selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
        selectParentEle = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
      } else {
        save = selection;
        selectNodeEle = ele;
        selectParentEle = parentEle;
      }
      if (this.parent.editorMode === "HTML") {
        this.insertVideo({
          args: {
            item: { command: "Videos", subCommand: "Video" },
            originalEvent: event2,
            name: !isInternal ? "showDialog" : null
          },
          selectNode: selectNodeEle,
          selection: save,
          selectParent: selectParentEle
        });
      }
    };
    Video2.prototype.showDialog = function() {
      this.openDialog(false);
    };
    Video2.prototype.closeDialog = function() {
      if (this.dialogObj) {
        this.dialogObj.hide({ returnValue: true });
      }
    };
    Video2.prototype.checkVideoBack = function(range) {
      if (range.startContainer.nodeName === "#text" && range.startOffset === 0 && !isNullOrUndefined(range.startContainer.previousSibling) && (range.startContainer.previousSibling.nodeName === "VIDEO" || this.isEmbedVidElem(range.startContainer.previousSibling))) {
        this.deletedVid.push(range.startContainer.previousSibling);
      } else if (range.startContainer.nodeName !== "#text" && !isNullOrUndefined(range.startContainer.childNodes[range.startOffset - 1]) && (range.startContainer.childNodes[range.startOffset - 1].nodeName === "VIDEO" || this.isEmbedVidElem(range.startContainer.childNodes[range.startOffset - 1]))) {
        this.deletedVid.push(range.startContainer.childNodes[range.startOffset - 1]);
      }
    };
    Video2.prototype.checkVideoDel = function(range) {
      if (range.startContainer.nodeName === "#text" && range.startOffset === range.startContainer.textContent.length && !isNullOrUndefined(range.startContainer.nextSibling) && (range.startContainer.nextSibling.nodeName === "VIDEO" || this.isEmbedVidElem(range.startContainer.nextSibling))) {
        this.deletedVid.push(range.startContainer.nextSibling);
      } else if (range.startContainer.nodeName !== "#text" && !isNullOrUndefined(range.startContainer.childNodes[range.startOffset]) && (range.startContainer.childNodes[range.startOffset].nodeName === "VIDEO" || this.isEmbedVidElem(range.startContainer.childNodes[range.startOffset]))) {
        this.deletedVid.push(range.startContainer.childNodes[range.startOffset]);
      }
    };
    Video2.prototype.alignmentSelect = function(e) {
      var item = e.item;
      if (!document.body.contains(document.body.querySelector(".e-rte-quick-toolbar")) || item.command !== "Videos") {
        return;
      }
      var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
      var selectNodeEle = this.parent.formatter.editorManager.nodeSelection.getNodeCollection(range);
      selectNodeEle = selectNodeEle[0].nodeName === "VIDEO" ? selectNodeEle : [this.videoEle];
      var args = { args: e, selectNode: selectNodeEle };
      if (this.parent.formatter.getUndoRedoStack().length === 0) {
        this.parent.formatter.saveData();
      }
      switch (item.subCommand) {
        case "JustifyLeft":
        case "JustifyCenter":
        case "JustifyRight":
          this.alignVideo(args, item.subCommand);
          break;
        case "Inline":
          this.inline(args);
          break;
        case "Break":
          this.break(args);
          break;
      }
      if (this.quickToolObj && document.body.contains(this.quickToolObj.videoQTBar.element)) {
        this.quickToolObj.videoQTBar.hidePopup();
        removeClass([selectNodeEle[0]], CLS_VID_FOCUS);
      }
      this.cancelResizeAction();
    };
    Video2.prototype.deleteVideo = function(e, keyCode2) {
      if (e.selectNode[0].nodeName !== "VIDEO" && !this.isEmbedVidElem(e.selectNode[0])) {
        return;
      }
      if (this.isEmbedVidElem(e.selectNode[0])) {
        e.selectNode[0] = e.selectNode[0].classList.contains(CLS_VID_CLICK_ELEM) ? e.selectNode[0] : e.selectNode[0].parentElement;
      }
      var args = {
        element: !this.isEmbedVidElem(e.selectNode[0]) ? e.selectNode[0].querySelector("iframe") : e.selectNode[0],
        src: !this.isEmbedVidElem(e.selectNode[0]) ? e.selectNode[0].querySelector("source").getAttribute("src") : e.selectNode[0].querySelector("iframe").getAttribute("src")
      };
      if (this.parent.formatter.getUndoRedoStack().length === 0) {
        this.parent.formatter.saveData();
      }
      e.selection.restore();
      this.parent.formatter.process(this.parent, e.args, e.args, {
        selectNode: e.selectNode,
        subCommand: e.args.item.subCommand
      });
      this.videoRemovePost(args.src);
      if (this.quickToolObj && document.body.contains(this.quickToolObj.videoQTBar.element)) {
        this.quickToolObj.videoQTBar.hidePopup();
      }
      this.cancelResizeAction();
      if (isNullOrUndefined(keyCode2)) {
        this.parent.trigger(afterMediaDelete, args);
      }
    };
    Video2.prototype.videoRemovePost = function(src) {
      var proxy = this;
      var absoluteUrl = "";
      if (isNullOrUndefined(this.parent.insertVideoSettings.removeUrl) || this.parent.insertVideoSettings.removeUrl === "") {
        return;
      }
      if (src.indexOf("http://") > -1 || src.indexOf("https://") > -1) {
        absoluteUrl = src;
      } else {
        absoluteUrl = new URL(src, document.baseURI).href;
      }
      this.removingVideoName = absoluteUrl.replace(/^.*[\\\/]/, "");
      var xhr = new XMLHttpRequest();
      xhr.addEventListener("readystatechange", function() {
        if (this.readyState === 4 && this.status === 200) {
          proxy.triggerPost(this.response);
        }
      });
      xhr.open("GET", absoluteUrl);
      xhr.responseType = "blob";
      xhr.send();
    };
    Video2.prototype.triggerPost = function(response) {
      var removeUrl = this.parent.insertVideoSettings.removeUrl;
      if (isNullOrUndefined(removeUrl) || removeUrl === "") {
        return;
      }
      var file = new File([response], this.removingVideoName);
      var ajax = new Ajax(removeUrl, "POST", true, null);
      var formData = new FormData();
      formData.append("UploadFiles", file);
      ajax.send(formData);
    };
    Video2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      if (target.nodeName === "VIDEO" || this.isEmbedVidElem(target)) {
        this.videoEle = !this.isEmbedVidElem(target) ? target : target.querySelector("iframe");
      }
      if (!isNullOrUndefined(this.dialogObj) && // eslint-disable-next-line
      (!closest(target, "[id='" + this.dialogObj.element.id + "']") && this.parent.toolbarSettings.enable && this.parent.getToolbarElement() && !this.parent.getToolbarElement().contains(e.target) || this.parent.getToolbarElement() && this.parent.getToolbarElement().contains(e.target) && !closest(target, "#" + this.parent.getID() + "_toolbar_Video") && !target.querySelector("#" + this.parent.getID() + "_toolbar_Video"))) {
        if (e.offsetX > e.target.clientWidth || e.offsetY > e.target.clientHeight) {
        } else {
          this.dialogObj.hide({ returnValue: true });
          this.parent.isBlur = true;
          dispatchEvent(this.parent.element, "focusout");
        }
      }
      if (this.contentModule.getEditPanel().querySelector(".e-vid-resize")) {
        if (target.tagName !== "VIDEO" && !this.isEmbedVidElem(target)) {
          this.removeResizeEle();
        }
        if (target.tagName !== "VIDEO" && !this.isEmbedVidElem(target) && !isNullOrUndefined(this.videoEle)) {
          this.videoEle.style.outline = "";
        } else if (!isNullOrUndefined(this.prevSelectedVidEle) && this.prevSelectedVidEle !== (target.tagName === "IFRAME" || target.tagName === "VIDEO" ? target : target.querySelector("iframe"))) {
          this.prevSelectedVidEle.style.outline = "";
        }
      }
    };
    Video2.prototype.removeResizeEle = function() {
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);
      detach(this.contentModule.getEditPanel().querySelector(".e-vid-resize"));
    };
    Video2.prototype.onWindowResize = function() {
      if (!isNullOrUndefined(this.contentModule) && !isNullOrUndefined(this.contentModule.getEditPanel().querySelector(".e-vid-resize"))) {
        this.cancelResizeAction();
      }
    };
    Video2.prototype.break = function(e) {
      if (e.selectNode[0].nodeName !== "VIDEO" && !this.isEmbedVidElem(e.selectNode[0])) {
        return;
      }
      var subCommand = e.args.item ? e.args.item.subCommand : "Break";
      this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand });
    };
    Video2.prototype.inline = function(e) {
      if (e.selectNode[0].nodeName !== "VIDEO" && !this.isEmbedVidElem(e.selectNode[0])) {
        return;
      }
      var subCommand = e.args.item ? e.args.item.subCommand : "Inline";
      this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand });
    };
    Video2.prototype.alignVideo = function(e, type) {
      var subCommand = e.args.item ? e.args.item.subCommand : type;
      this.parent.formatter.process(this.parent, e.args, e.args, { selectNode: e.selectNode, subCommand });
    };
    Video2.prototype.editAreaClickHandler = function(e) {
      if (this.parent.readonly) {
        this.hideVideoQuickToolbar();
        return;
      }
      var args = e.args;
      var showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
      if (args.which === 2 || showOnRightClick && args.which === 1 || !showOnRightClick && args.which === 3) {
        if (showOnRightClick && args.which === 1 && !isNullOrUndefined(args.target) && (args.target.tagName === "VIDEO" || this.isEmbedVidElem(args.target))) {
          this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
          this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.contentModule.getDocument(), args.target);
        }
        return;
      }
      if (this.parent.editorMode === "HTML" && this.parent.quickToolbarModule && this.parent.quickToolbarModule.videoQTBar) {
        this.quickToolObj = this.parent.quickToolbarModule;
        var target = args.target;
        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
        var isPopupOpen = this.quickToolObj.videoQTBar.element.classList.contains("e-rte-pop");
        if ((target.nodeName === "VIDEO" || this.isEmbedVidElem(target)) && this.parent.quickToolbarModule) {
          if (isPopupOpen) {
            return;
          }
          this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
          this.parent.formatter.editorManager.nodeSelection.setSelectionContents(this.contentModule.getDocument(), target);
          if (isIDevice2()) {
            this.parent.notify(selectionSave, e);
          }
          addClass([!this.isEmbedVidElem(target) ? target : target.querySelector("iframe")], CLS_VID_FOCUS);
          this.showVideoQuickToolbar({ args, type: "Videos", elements: [args.target] });
        } else {
          this.hideVideoQuickToolbar();
        }
      }
    };
    Video2.prototype.showVideoQuickToolbar = function(e) {
      var _this = this;
      if (e.type !== "Videos" || !isNullOrUndefined(e.args) && e.args.detail === 2 || isNullOrUndefined(this.parent.quickToolbarModule) || isNullOrUndefined(this.parent.quickToolbarModule.videoQTBar) || isNullOrUndefined(e.args)) {
        return;
      }
      this.quickToolObj = this.parent.quickToolbarModule;
      var args = e.args;
      var target = e.elements;
      [].forEach.call(e.elements, function(element, index) {
        if (index === 0) {
          target = element;
        }
      });
      if (target.tagName === "VIDEO" || this.isEmbedVidElem(target)) {
        addClass([!this.isEmbedVidElem(target) || target.tagName === "IFRAME" ? target : target.querySelector("iframe")], [CLS_VID_FOCUS]);
      }
      var pageY = this.parent.iframeSettings.enable ? window.pageYOffset + this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;
      if (this.parent.quickToolbarModule.videoQTBar) {
        if (e.isNotify) {
          setTimeout(function() {
            _this.parent.formatter.editorManager.nodeSelection.Clear(_this.contentModule.getDocument());
            _this.parent.formatter.editorManager.nodeSelection.setSelectionContents(_this.contentModule.getDocument(), target);
            _this.quickToolObj.videoQTBar.showPopup(args.pageX - 50, pageY + target.getBoundingClientRect().height / 2 - target.offsetTop, target);
          }, 400);
        } else {
          this.quickToolObj.videoQTBar.showPopup(args.pageX - 50, pageY + target.getBoundingClientRect().height / 2 - target.offsetTop, target);
        }
      }
    };
    Video2.prototype.hideVideoQuickToolbar = function() {
      if (!isNullOrUndefined(this.contentModule.getEditPanel().querySelector("." + CLS_VID_FOCUS))) {
        removeClass([this.contentModule.getEditPanel().querySelector("." + CLS_VID_FOCUS)], CLS_VID_FOCUS);
        if (!isNullOrUndefined(this.videoEle)) {
          this.videoEle.style.outline = "";
        }
        if (!isNullOrUndefined(this.contentModule.getEditPanel().querySelector(".e-vid-resize"))) {
          detach(this.contentModule.getEditPanel().querySelector(".e-vid-resize"));
        }
        if (this.quickToolObj && this.quickToolObj.videoQTBar && document.body.contains(this.quickToolObj.videoQTBar.element)) {
          this.quickToolObj.videoQTBar.hidePopup();
        }
      }
    };
    Video2.prototype.isEmbedVidElem = function(target) {
      if (target && target.nodeType !== 3 && target.nodeName !== "BR" && (target.classList && target.classList.contains(CLS_VID_CLICK_ELEM)) || target && target.nodeName === "IFRAME") {
        return true;
      } else {
        return false;
      }
    };
    Video2.prototype.insertingVideo = function(e) {
      this.insertVideo(e);
      if (!isNullOrUndefined(this.dialogObj)) {
        this.dialogObj.element.style.maxHeight = "inherit";
        var dialogContent = this.dialogObj.element.querySelector(".e-video-content");
        if (!isNullOrUndefined(this.parent.insertVideoSettings.path) || this.parent.editorMode === "HTML") {
          document.getElementById(this.rteID + "_insertVideo").focus();
        } else {
          dialogContent.querySelector(".e-video-url").focus();
        }
      }
    };
    Video2.prototype.insertVideo = function(e) {
      var _this = this;
      if (this.dialogObj) {
        this.dialogObj.hide({ returnValue: true });
        return;
      }
      var videoDialog = this.parent.createElement("div", { className: "e-rte-video-dialog", id: this.rteID + "_video" });
      this.parent.element.appendChild(videoDialog);
      var videoInsert = this.i10n.getConstant("dialogInsert");
      var videolinkCancel = this.i10n.getConstant("dialogCancel");
      var videoHeader = this.i10n.getConstant("videoHeader");
      var selection = e.selection;
      var selectObj = { selfVideo: this, selection: e.selection, args: e.args, selectParent: e.selectParent };
      var dialogModel = {
        header: videoHeader,
        cssClass: CLS_RTE_ELEMENTS,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        showCloseIcon: true,
        closeOnEscape: true,
        width: Browser.isDevice ? "290px" : "340px",
        position: { X: "center", Y: Browser.isDevice ? "center" : "top" },
        isModal: Browser.isDevice,
        buttons: [
          {
            click: this.insertVideoUrl.bind(selectObj),
            buttonModel: { content: videoInsert, cssClass: "e-flat e-insertVideo", isPrimary: true, disabled: true }
          },
          {
            click: function(e2) {
              _this.cancelDialog(e2);
            },
            buttonModel: { cssClass: "e-flat e-cancel", content: videolinkCancel }
          }
        ],
        target: Browser.isDevice ? document.body : this.parent.element,
        animationSettings: { effect: "None" },
        close: function(event2) {
          if (_this.isVideoUploaded) {
            _this.uploadObj.removing();
          }
          _this.parent.isBlur = false;
          if (event2 && event2.event.returnValue) {
            if (_this.parent.editorMode === "HTML") {
              selection.restore();
            }
          }
          _this.dialogObj.destroy();
          detach(_this.dialogObj.element);
          _this.dialogRenderObj.close(event2);
          _this.dialogObj = null;
        }
      };
      var dialogContent = this.parent.createElement("div", { className: "e-video-content" });
      if (!isNullOrUndefined(this.parent.insertVideoSettings.path) || this.parent.editorMode === "HTML") {
        dialogContent.appendChild(this.videoUpload(e));
      }
      var linkHeader = this.parent.createElement("div", { className: "e-videoheader" });
      var embedLinkHeader = this.parent.createElement("div", { className: "e-embed-videoheader" });
      var linkHeaderText = this.i10n.getConstant("videoLinkHeader");
      var embedLinkHeaderText = this.i10n.getConstant("embedVideoLinkHeader");
      if (this.parent.editorMode === "HTML") {
        linkHeader.innerHTML = linkHeaderText;
        embedLinkHeader.innerHTML = embedLinkHeaderText;
      }
      dialogContent.appendChild(this.urlPopup(e));
      if (e.selectNode && e.selectNode[0].nodeType === 1 && (e.selectNode[0].tagName === "VIDEO" || this.isEmbedVidElem(e.selectNode[0]))) {
        dialogModel.header = this.parent.localeObj.getConstant("editVideoHeader");
        dialogModel.content = dialogContent;
      } else {
        dialogModel.content = dialogContent;
      }
      this.dialogObj = this.dialogRenderObj.render(dialogModel);
      this.dialogObj.createElement = this.parent.createElement;
      this.dialogObj.appendTo(videoDialog);
      if (e.selectNode && e.selectNode[0].nodeType === 1 && (e.selectNode[0].tagName === "VIDEO" || this.isEmbedVidElem(e.selectNode[0])) && e.name === "insertVideo") {
        this.dialogObj.element.querySelector(".e-insertVideo").textContent = this.parent.localeObj.getConstant("dialogUpdate");
      }
      videoDialog.style.maxHeight = "inherit";
      if (this.quickToolObj) {
        if (this.quickToolObj.videoQTBar && document.body.contains(this.quickToolObj.videoQTBar.element)) {
          this.quickToolObj.videoQTBar.hidePopup();
          if (!isNullOrUndefined(e.selectParent)) {
            removeClass([e.selectParent[0]], CLS_VID_FOCUS);
          }
        }
        if (this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {
          this.quickToolObj.inlineQTBar.hidePopup();
        }
      }
    };
    Video2.prototype.urlPopup = function(e) {
      var _this = this;
      var videoUrl = this.parent.createElement("div", { className: "e-video-url-wrap" });
      var urlContent = this.parent.createElement("div", { id: "urlcontent" });
      var placeUrl = this.i10n.getConstant("videoUrl");
      var content = '<input id="embedURL" type="radio"><input id="webURL" type="radio" >';
      var contentElem = parseHtml(content);
      videoUrl.appendChild(contentElem);
      videoUrl.appendChild(urlContent);
      this.embedInputUrl = this.parent.createElement("textarea", {
        className: "e-input e-embed-video-url",
        attrs: { placeholder: this.i10n.getConstant("pasteEmbeddedCodeHere"), type: "text", tabindex: "-1", "aria-label": this.i10n.getConstant("embedVideoLinkHeader") }
      });
      this.embedInputUrl.addEventListener("keyup", function() {
        if (!isNullOrUndefined(_this.embedInputUrl)) {
          if (_this.embedInputUrl.value.length === 0) {
            _this.dialogObj.getButtons(0).element.disabled = true;
          } else {
            _this.dialogObj.getButtons(0).element.removeAttribute("disabled");
          }
        }
      });
      this.inputUrl = this.parent.createElement("input", {
        className: "e-input e-video-url",
        attrs: { placeholder: placeUrl, spellcheck: "false" }
      });
      this.inputUrl.addEventListener("input", function() {
        if (!isNullOrUndefined(_this.inputUrl)) {
          if (_this.inputUrl.value.length === 0) {
            _this.dialogObj.getButtons(0).element.disabled = true;
          } else {
            _this.dialogObj.getButtons(0).element.removeAttribute("disabled");
          }
        }
      });
      var embedUrlBtn = new RadioButton({
        label: this.i10n.getConstant("embeddedCode"),
        checked: true,
        name: "URL",
        created: function() {
          urlContent.appendChild(_this.embedInputUrl);
        },
        change: function() {
          urlContent.innerHTML = "";
          _this.inputUrl.value = "";
          urlContent.appendChild(_this.embedInputUrl);
        }
      });
      embedUrlBtn.appendTo(videoUrl.querySelector("#embedURL"));
      var webUrlBtn = new RadioButton({
        label: this.i10n.getConstant("webUrl"),
        name: "URL",
        change: function() {
          urlContent.innerHTML = "";
          _this.embedInputUrl.value = "";
          urlContent.appendChild(_this.inputUrl);
        }
      });
      webUrlBtn.appendTo(videoUrl.querySelector("#webURL"));
      return videoUrl;
    };
    Video2.prototype.videoUpload = function(e) {
      var _this = this;
      var save;
      var selectParent;
      var proxy = this;
      var iframe = proxy.parent.iframeSettings.enable;
      if (proxy.parent.editorMode === "HTML" && (!iframe && isNullOrUndefined(closest(e.selection.range.startContainer.parentNode, "[id='" + this.parent.contentModule.getPanel().id + "']")) || iframe && !hasClass(e.selection.range.startContainer.parentNode.ownerDocument.querySelector("body"), "e-lib"))) {
        this.contentModule.getEditPanel().focus();
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        save = this.parent.formatter.editorManager.nodeSelection.save(range, this.parent.contentModule.getDocument());
        selectParent = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
      } else {
        save = e.selection;
        selectParent = e.selectParent;
      }
      var uploadParentEle = this.parent.createElement("div", { className: "e-vid-uploadwrap e-droparea" });
      var deviceVideoUpMsg = this.i10n.getConstant("videoDeviceUploadMessage");
      var videoUpMsg = this.i10n.getConstant("videoUploadMessage");
      var span = this.parent.createElement("span", { className: "e-droptext" });
      var spanMsg = this.parent.createElement("span", {
        className: "e-rte-upload-text",
        innerHTML: Browser.isDevice ? deviceVideoUpMsg : videoUpMsg
      });
      span.appendChild(spanMsg);
      var btnEle = this.parent.createElement("button", {
        className: "e-browsebtn",
        id: this.rteID + "_insertVideo",
        attrs: { autofocus: "true", type: "button" }
      });
      span.appendChild(btnEle);
      uploadParentEle.appendChild(span);
      var browserMsg = this.i10n.getConstant("browse");
      var button = new Button({ content: browserMsg, enableRtl: this.parent.enableRtl });
      button.isStringTemplate = true;
      button.createElement = this.parent.createElement;
      button.appendTo(btnEle);
      var btnClick = Browser.isDevice ? span : btnEle;
      EventHandler.add(btnClick, "click", this.fileSelect, this);
      var uploadEle = this.parent.createElement("input", {
        id: this.rteID + "_upload",
        attrs: { type: "File", name: "UploadFiles" }
      });
      uploadParentEle.appendChild(uploadEle);
      var fileName;
      var rawFile;
      var selectArgs;
      var filesData;
      var beforeUploadArgs;
      this.uploadObj = new Uploader({
        asyncSettings: { saveUrl: this.parent.insertVideoSettings.saveUrl, removeUrl: this.parent.insertVideoSettings.removeUrl },
        dropArea: span,
        multiple: false,
        enableRtl: this.parent.enableRtl,
        allowedExtensions: this.parent.insertVideoSettings.allowedTypes.toString(),
        selected: function(e2) {
          proxy.isVideoUploaded = true;
          selectArgs = e2;
          filesData = e2.filesData;
          if (_this.parent.isServerRendered) {
            selectArgs = JSON.parse(JSON.stringify(e2));
            e2.cancel = true;
            rawFile = e2.filesData;
            selectArgs.filesData = rawFile;
          }
          _this.parent.trigger(fileSelected, selectArgs, function(selectArgs2) {
            if (!selectArgs2.cancel) {
              _this.checkExtension(selectArgs2.filesData[0]);
              fileName = selectArgs2.filesData[0].name;
              if (_this.parent.editorMode === "HTML" && isNullOrUndefined(_this.parent.insertVideoSettings.path)) {
                var reader_1 = new FileReader();
                reader_1.addEventListener("load", function(e3) {
                  var url = _this.parent.insertVideoSettings.saveFormat === "Base64" ? reader_1.result : URL.createObjectURL(convertToBlob(reader_1.result));
                  proxy.uploadUrl = {
                    url,
                    selection: save,
                    fileName,
                    selectParent
                  };
                  proxy.inputUrl.setAttribute("disabled", "true");
                  proxy.embedInputUrl.setAttribute("disabled", "true");
                  if (isNullOrUndefined(proxy.parent.insertVideoSettings.saveUrl) && _this.isAllowedTypes && !isNullOrUndefined(_this.dialogObj)) {
                    _this.dialogObj.getButtons(0).element.removeAttribute("disabled");
                  }
                });
                reader_1.readAsDataURL(selectArgs2.filesData[0].rawFile);
              }
              if (_this.parent.isServerRendered) {
                _this.uploadObj._internalRenderSelect(selectArgs2, rawFile);
              }
            }
          });
        },
        beforeUpload: function(args) {
          if (_this.parent.isServerRendered) {
            beforeUploadArgs = JSON.parse(JSON.stringify(args));
            beforeUploadArgs.filesData = filesData;
            args.cancel = true;
            _this.parent.trigger(fileUploading, beforeUploadArgs, function(beforeUploadArgs2) {
              if (beforeUploadArgs2.cancel) {
                return;
              }
              _this.uploadObj.currentRequestHeader = beforeUploadArgs2.currentRequest ? beforeUploadArgs2.currentRequest : _this.uploadObj.currentRequestHeader;
              _this.uploadObj.customFormDatas = beforeUploadArgs2.customFormData && beforeUploadArgs2.customFormData.length > 0 ? beforeUploadArgs2.customFormData : _this.uploadObj.customFormDatas;
              _this.uploadObj.uploadFiles(rawFile, null);
            });
          } else {
            _this.parent.trigger(beforeFileUpload, args);
          }
        },
        uploading: function(e2) {
          if (!_this.parent.isServerRendered) {
            _this.parent.trigger(fileUploading, e2);
          }
        },
        success: function(e2) {
          _this.parent.trigger(fileUploadSuccess, e2, function(e3) {
            if (!isNullOrUndefined(_this.parent.insertVideoSettings.path)) {
              var url = _this.parent.insertVideoSettings.path + e3.file.name;
              var value = { url, selection: save };
              proxy.uploadUrl = {
                url,
                selection: save,
                fileName,
                selectParent,
                width: {
                  width: proxy.parent.insertVideoSettings.width,
                  minWidth: proxy.parent.insertVideoSettings.minWidth,
                  maxWidth: proxy.parent.getInsertImgMaxWidth()
                },
                height: {
                  height: proxy.parent.insertVideoSettings.height,
                  minHeight: proxy.parent.insertVideoSettings.minHeight,
                  maxHeight: proxy.parent.insertVideoSettings.maxHeight
                }
              };
              proxy.embedInputUrl.setAttribute("disabled", "true");
            }
            if (e3.operation === "upload" && !isNullOrUndefined(_this.dialogObj)) {
              _this.dialogObj.getButtons(0).element.removeAttribute("disabled");
            }
          });
        },
        failure: function(e2) {
          _this.parent.trigger(fileUploadFailed, e2);
        },
        removing: function() {
          _this.parent.trigger(fileRemoving, e, function(e2) {
            proxy.isVideoUploaded = false;
            _this.dialogObj.getButtons(0).element.disabled = true;
            proxy.embedInputUrl.removeAttribute("disabled");
            if (proxy.uploadUrl) {
              proxy.uploadUrl.url = "";
            }
          });
        }
      });
      this.uploadObj.isStringTemplate = true;
      this.uploadObj.createElement = this.parent.createElement;
      this.uploadObj.appendTo(uploadEle);
      return uploadParentEle;
    };
    Video2.prototype.checkExtension = function(e) {
      if (this.uploadObj.allowedExtensions) {
        if (this.uploadObj.allowedExtensions.toLocaleLowerCase().indexOf(("." + e.type).toLocaleLowerCase()) === -1) {
          this.dialogObj.getButtons(0).element.setAttribute("disabled", "disabled");
          this.isAllowedTypes = false;
        } else {
          this.isAllowedTypes = true;
        }
      }
    };
    Video2.prototype.fileSelect = function() {
      this.dialogObj.element.getElementsByClassName("e-file-select-wrap")[0].querySelector("button").click();
      return false;
    };
    Video2.prototype.cancelDialog = function(e) {
      this.parent.isBlur = false;
      this.dialogObj.hide({ returnValue: true });
      if (this.isVideoUploaded) {
        this.uploadObj.removing();
      }
    };
    Video2.prototype.insertVideoUrl = function(e) {
      var proxy = this.selfVideo;
      proxy.isVideoUploaded = false;
      var url = proxy.inputUrl.value;
      var embedUrl = proxy.embedInputUrl.value;
      if (proxy.parent.formatter.getUndoRedoStack().length === 0) {
        proxy.parent.formatter.saveData();
      }
      if (!isNullOrUndefined(proxy.uploadUrl) && proxy.uploadUrl.url !== "") {
        proxy.uploadUrl.cssClass = proxy.parent.insertVideoSettings.layoutOption === "Inline" ? CLS_VIDEOINLINE : CLS_VIDEOBREAK;
        proxy.dialogObj.hide({ returnValue: false });
        proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, proxy.uploadUrl);
        proxy.uploadUrl.url = "";
      } else if (proxy.parent.editorMode === "HTML" && (url !== "" || embedUrl !== "")) {
        if (proxy.parent.editorMode === "HTML" && isNullOrUndefined(closest(
          // eslint-disable-next-line
          this.selection.range.startContainer.parentNode,
          "[id='" + proxy.contentModule.getPanel().id + "']"
        ))) {
          proxy.contentModule.getEditPanel().focus();
          var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.contentModule.getDocument());
          this.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.contentModule.getDocument());
          this.selectParent = proxy.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range);
        }
        var name_1 = url !== "" ? url.split("/")[url.split("/").length - 1] : embedUrl;
        var value = {
          cssClass: proxy.parent.insertVideoSettings.layoutOption === "Inline" ? CLS_VIDEOINLINE : CLS_VIDEOBREAK,
          url,
          selection: this.selection,
          fileName: name_1,
          isEmbedUrl: embedUrl !== "" ? true : false,
          selectParent: this.selectParent,
          width: {
            width: proxy.parent.insertVideoSettings.width,
            minWidth: proxy.parent.insertVideoSettings.minWidth,
            maxWidth: proxy.parent.getInsertImgMaxWidth()
          },
          height: {
            height: proxy.parent.insertVideoSettings.height,
            minHeight: proxy.parent.insertVideoSettings.minHeight,
            maxHeight: proxy.parent.insertVideoSettings.maxHeight
          }
        };
        proxy.parent.formatter.process(proxy.parent, this.args, this.args.originalEvent, value);
        proxy.dialogObj.hide({ returnValue: false });
      }
    };
    Video2.prototype.destroy = function() {
      this.prevSelectedVidEle = void 0;
      this.removeEventListener();
    };
    Video2.prototype.getModuleName = function() {
      return "video";
    };
    return Video2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/view-source.js
var ViewSource = (
  /** @class */
  function() {
    function ViewSource2(parent, locator) {
      this.parent = parent;
      var serviceLocator = locator;
      this.rendererFactory = serviceLocator.getService("rendererFactory");
      this.addEventListener();
    }
    ViewSource2.prototype.addEventListener = function() {
      this.parent.on(sourceCode, this.sourceCode, this);
      this.parent.on(initialEnd, this.onInitialEnd, this);
      this.parent.on(updateSource, this.updateSourceCode, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(moduleDestroy, this.moduleDestroy, this);
    };
    ViewSource2.prototype.onInitialEnd = function() {
      this.parent.formatter.editorManager.observer.on(KEY_DOWN_HANDLER, this.onKeyDown, this);
    };
    ViewSource2.prototype.removeEventListener = function() {
      this.unWireEvent();
      this.parent.off(sourceCode, this.sourceCode);
      this.parent.off(updateSource, this.updateSourceCode);
      this.parent.off(initialEnd, this.onInitialEnd);
      this.parent.off(destroy, this.destroy);
      this.parent.off(moduleDestroy, this.moduleDestroy);
      this.parent.formatter.editorManager.observer.off(KEY_DOWN_HANDLER, this.onKeyDown);
    };
    ViewSource2.prototype.getSourceCode = function() {
      return this.parent.createElement("textarea", { className: "e-rte-srctextarea " + this.parent.cssClass });
    };
    ViewSource2.prototype.wireEvent = function(element) {
      this.keyboardModule = new KeyboardEvents2(element, {
        keyAction: this.previewKeyDown.bind(this),
        keyConfigs: this.parent.formatter.keyConfig,
        eventName: "keydown"
      });
      EventHandler.add(this.previewElement, "mousedown", this.mouseDownHandler, this);
    };
    ViewSource2.prototype.unWireEvent = function() {
      if (this.keyboardModule) {
        this.keyboardModule.destroy();
      }
      if (this.previewElement) {
        EventHandler.remove(this.previewElement, "mousedown", this.mouseDownHandler);
      }
    };
    ViewSource2.prototype.wireBaseKeyDown = function() {
      this.parent.keyboardModule = new KeyboardEvents2(this.contentModule.getEditPanel(), {
        keyAction: this.parent.keyDown.bind(this.parent),
        keyConfigs: this.parent.formatter.keyConfig,
        eventName: "keydown"
      });
    };
    ViewSource2.prototype.unWireBaseKeyDown = function() {
      this.parent.keyboardModule.destroy();
    };
    ViewSource2.prototype.mouseDownHandler = function(e) {
      this.parent.notify(sourceCodeMouseDown, { args: e });
    };
    ViewSource2.prototype.previewKeyDown = function(event2) {
      switch (event2.action) {
        case "html-source":
          this.updateSourceCode(event2);
          event2.preventDefault();
          break;
        case "toolbar-focus":
          if (this.parent.toolbarSettings.enable) {
            var selector = ".e-toolbar-item[title] [tabindex]";
            this.parent.toolbarModule.baseToolbar.toolbarObj.element.querySelector(selector).focus();
          }
          break;
      }
    };
    ViewSource2.prototype.onKeyDown = function(e) {
      switch (e.event.action) {
        case "html-source":
          e.event.preventDefault();
          this.sourceCode(e);
          e.callBack({
            requestType: "SourceCode",
            editorMode: "HTML",
            event: e.event
          });
          break;
      }
    };
    ViewSource2.prototype.sourceCode = function(args) {
      this.parent.isBlur = false;
      this.parent.trigger(actionBegin, { requestType: "SourceCode", targetItem: "SourceCode", args });
      var tbItems = selectAll("." + CLS_TB_ITEM, this.parent.element);
      this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
      this.parent.notify(updateToolbarItem, {
        targetItem: "SourceCode",
        updateItem: "Preview",
        baseToolbar: this.parent.getBaseToolbarObject()
      });
      if (isNullOrUndefined(this.previewElement)) {
        this.previewElement = this.getSourceCode();
      }
      this.parent.updateValueData();
      if (this.parent.iframeSettings.enable) {
        var rteContent = void 0;
        if (isNullOrUndefined(this.parent.element.querySelector("#" + this.parent.element.id + "_source-view"))) {
          rteContent = this.parent.createElement("div", {
            className: "e-source-content",
            id: this.parent.element.id + "_source-view"
          });
        } else {
          rteContent = this.parent.element.querySelector("#" + this.parent.element.id + "_source-view");
        }
        rteContent.appendChild(this.previewElement);
        this.parent.element.appendChild(rteContent);
        rteContent.style.height = this.contentModule.getPanel().style.height;
        rteContent.style.marginTop = this.contentModule.getPanel().style.marginTop;
        this.getPanel().value = this.getTextAreaValue();
        this.contentModule.getPanel().style.display = "none";
        rteContent.style.display = "block";
        this.getPanel().style.display = "block";
      } else {
        this.contentModule.getPanel().appendChild(this.previewElement);
        this.getPanel().value = this.getTextAreaValue();
        this.contentModule.getEditPanel().style.display = "none";
        this.previewElement.style.display = "block";
      }
      this.parent.isBlur = false;
      this.parent.disableToolbarItem(this.parent.toolbarSettings.items);
      this.parent.enableToolbarItem("SourceCode");
      if (this.parent.getToolbar()) {
        removeClass([this.parent.getToolbar()], [CLS_EXPAND_OPEN]);
      }
      removeClass(tbItems, [CLS_ACTIVE]);
      this.parent.setContentHeight("sourceCode", true);
      this.wireEvent(this.previewElement);
      this.unWireBaseKeyDown();
      this.previewElement.focus();
      this.parent.updateValue();
      if (!isNullOrUndefined(this.parent.placeholder) && !this.parent.iframeSettings.enable) {
        var placeHolderWrapper = this.parent.element.querySelector(".rte-placeholder.e-rte-placeholder");
        placeHolderWrapper.style.display = "none";
      }
      this.parent.trigger(actionComplete, { requestType: "SourceCode", targetItem: "SourceCode", args });
      this.parent.invokeChangeEvent();
    };
    ViewSource2.prototype.updateSourceCode = function(args) {
      this.parent.isBlur = false;
      this.parent.trigger(actionBegin, { requestType: "Preview", targetItem: "Preview", args });
      var editHTML = this.getPanel();
      this.parent.notify(updateToolbarItem, {
        targetItem: "Preview",
        updateItem: "SourceCode",
        baseToolbar: this.parent.getBaseToolbarObject()
      });
      var serializeValue = this.parent.serializeValue(editHTML.value);
      var value;
      if (serializeValue === null || serializeValue === "") {
        if (this.parent.enterKey === "DIV") {
          value = "<div><br/></div>";
        } else if (this.parent.enterKey === "BR") {
          value = "<br/>";
        } else {
          value = "<p><br/></p>";
        }
      } else {
        value = serializeValue;
      }
      if (this.parent.iframeSettings.enable) {
        editHTML.parentElement.style.display = "none";
        editHTML.style.display = "none";
        this.contentModule.getPanel().style.display = "block";
        this.contentModule.getEditPanel().innerHTML = value;
      } else {
        editHTML.style.display = "none";
        this.contentModule.getEditPanel().style.display = "block";
        this.contentModule.getEditPanel().innerHTML = value;
      }
      this.parent.isBlur = false;
      this.parent.enableToolbarItem(this.parent.toolbarSettings.items);
      if (this.parent.getToolbar()) {
        removeClass([this.parent.getToolbar()], [CLS_EXPAND_OPEN]);
      }
      this.parent.setContentHeight("preview", true);
      this.unWireEvent();
      this.wireBaseKeyDown();
      this.contentModule.getEditPanel().focus();
      this.parent.updateValue();
      if (!isNullOrUndefined(this.parent.placeholder) && this.contentModule.getEditPanel().innerText.length === 0) {
        var placeHolderWrapper = this.parent.element.querySelector(".rte-placeholder.e-rte-placeholder");
        placeHolderWrapper.style.display = "block";
      }
      this.parent.trigger(actionComplete, { requestType: "Preview", targetItem: "Preview", args });
      this.parent.formatter.enableUndo(this.parent);
      this.parent.addAudioVideoWrapper();
      this.parent.invokeChangeEvent();
      this.parent.notify(tableclass, {});
    };
    ViewSource2.prototype.getTextAreaValue = function() {
      return this.contentModule.getEditPanel().innerHTML === "<p><br></p>" || this.contentModule.getEditPanel().innerHTML === "<div><br></div>" || this.contentModule.getEditPanel().innerHTML === "<br>" || (this.contentModule.getEditPanel().childNodes.length === 1 && (this.contentModule.getEditPanel().childNodes[0].tagName === "P" && this.contentModule.getEditPanel().innerHTML.length === 7) || this.contentModule.getEditPanel().childNodes[0].tagName === "DIV" && this.contentModule.getEditPanel().innerHTML.length === 11) ? "" : this.parent.value;
    };
    ViewSource2.prototype.getPanel = function() {
      return this.parent.element && this.parent.element.querySelector(".e-rte-srctextarea");
    };
    ViewSource2.prototype.getViewPanel = function() {
      return this.parent.iframeSettings.enable && this.getPanel() ? this.getPanel().parentElement : this.getPanel();
    };
    ViewSource2.prototype.destroy = function() {
      this.removeEventListener();
    };
    ViewSource2.prototype.moduleDestroy = function() {
      this.parent = null;
    };
    return ViewSource2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/table-module.js
var Table = (
  /** @class */
  function() {
    function Table2(parent, serviceLocator) {
      this.ensureInsideTableList = true;
      this.pageX = null;
      this.pageY = null;
      this.moveEle = null;
      this.currentColumnResize = "";
      this.currentMarginLeft = 0;
      this.parent = parent;
      this.rteID = parent.element.id;
      this.l10n = serviceLocator.getService("rteLocale");
      this.rendererFactory = serviceLocator.getService("rendererFactory");
      this.dialogRenderObj = serviceLocator.getService("dialogRenderObject");
      this.addEventListener();
    }
    Table2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(createTable, this.renderDlgContent, this);
      this.parent.on(initialEnd, this.afterRender, this);
      this.parent.on(dynamicModule, this.afterRender, this);
      this.parent.on(showTableDialog, this.showDialog, this);
      this.parent.on(closeTableDialog, this.closeDialog, this);
      this.parent.on(docClick, this.docClick, this);
      this.parent.on(editAreaClick, this.editAreaClickHandler, this);
      this.parent.on(clearDialogObj, this.clearDialogObj, this);
      this.parent.on(tableToolbarAction, this.onToolbarAction, this);
      this.parent.on(dropDownSelect, this.dropdownSelect, this);
      this.parent.on(keyDown, this.keyDown, this);
      this.parent.on(mouseUp, this.selectionTable, this);
      this.parent.on(tableModulekeyUp, this.tableModulekeyUp, this);
      this.parent.on(bindCssClass, this.setCssClass, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(moduleDestroy, this.moduleDestroy, this);
    };
    Table2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(createTable, this.renderDlgContent);
      this.parent.off(initialEnd, this.afterRender);
      this.parent.off(dynamicModule, this.afterRender);
      this.parent.off(docClick, this.docClick);
      this.parent.off(showTableDialog, this.showDialog);
      this.parent.off(closeTableDialog, this.closeDialog);
      this.parent.off(editAreaClick, this.editAreaClickHandler);
      this.parent.off(clearDialogObj, this.clearDialogObj);
      this.parent.off(tableToolbarAction, this.onToolbarAction);
      this.parent.off(dropDownSelect, this.dropdownSelect);
      this.parent.off(mouseDown, this.cellSelect);
      this.parent.off(tableColorPickerChanged, this.setBGColor);
      this.parent.off(keyDown, this.keyDown);
      this.parent.off(mouseUp, this.selectionTable);
      this.parent.off(tableModulekeyUp, this.tableModulekeyUp);
      this.parent.off(bindCssClass, this.setCssClass);
      this.parent.off(destroy, this.destroy);
      this.parent.off(moduleDestroy, this.moduleDestroy);
    };
    Table2.prototype.updateCss = function(currentObj, e) {
      if (currentObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass)) {
          currentObj.setProperties({ cssClass: (currentObj.cssClass + " " + e.cssClass).trim() });
        } else {
          currentObj.setProperties({ cssClass: (currentObj.cssClass.replace(e.oldCssClass, "").trim() + " " + e.cssClass).trim() });
        }
      }
    };
    Table2.prototype.setCssClass = function(e) {
      if (this.popupObj && e.cssClass) {
        if (isNullOrUndefined(e.oldCssClass)) {
          addClass([this.popupObj.element], e.cssClass);
        } else {
          removeClass([this.popupObj.element], e.oldCssClass);
          addClass([this.popupObj.element], e.cssClass);
        }
      }
      this.updateCss(this.createTableButton, e);
      this.updateCss(this.editdlgObj, e);
      var numericTextBoxObj = [
        this.columnTextBox,
        this.rowTextBox,
        this.tableWidthNum,
        this.tableCellPadding,
        this.tableCellSpacing
      ];
      for (var i = 0; i < numericTextBoxObj.length; i++) {
        this.updateCss(numericTextBoxObj[i], e);
      }
    };
    Table2.prototype.selectionTable = function(e) {
      var target = e.args.target;
      if (Browser.info.name === "mozilla" && !isNullOrUndefined(closest(target, "table")) && closest(target, "table").tagName === "TABLE") {
        this.parent.contentModule.getEditPanel().setAttribute("contenteditable", "true");
      }
    };
    Table2.prototype.afterRender = function() {
      if (isNullOrUndefined(this.contentModule)) {
        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
        this.parent.on(tableColorPickerChanged, this.setBGColor, this);
        this.parent.on(mouseDown, this.cellSelect, this);
        if (this.parent.tableSettings.resize) {
          EventHandler.add(this.parent.contentModule.getEditPanel(), Browser.touchStartEvent, this.resizeStart, this);
        }
        if (!Browser.isDevice && this.parent.tableSettings.resize) {
          EventHandler.add(this.contentModule.getEditPanel(), "mouseover", this.resizeHelper, this);
        }
      }
    };
    Table2.prototype.dropdownSelect = function(e) {
      var item = e.item;
      if (!document.body.contains(document.body.querySelector(".e-rte-quick-toolbar")) || item.command !== "Table") {
        return;
      }
      var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
      var args = {
        args: e,
        selection: this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument()),
        selectParent: this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)
      };
      switch (item.subCommand) {
        case "InsertRowBefore":
        case "InsertRowAfter":
          this.addRow(args.selection, e);
          break;
        case "InsertColumnLeft":
        case "InsertColumnRight":
          this.addColumn(args.selection, e);
          break;
        case "DeleteColumn":
        case "DeleteRow":
          this.removeRowColumn(args.selection, e);
          break;
        case "AlignTop":
        case "AlignMiddle":
        case "AlignBottom":
          this.verticalAlign(args, e);
          break;
        case "Dashed":
        case "Alternate":
        case "Custom":
          this.tableStyles(args, item.subCommand);
          break;
        case "Merge":
        case "VerticalSplit":
        case "HorizontalSplit":
          this.UpdateCells(args.selection, e);
          break;
      }
    };
    Table2.prototype.UpdateCells = function(selectCell, e) {
      this.parent.formatter.process(this.parent, e, e, { selection: selectCell, subCommand: e.item.subCommand });
      this.hideTableQuickToolbar();
    };
    Table2.prototype.keyDown = function(e) {
      var event2 = e.args;
      var proxy = this;
      switch (event2.action) {
        case "escape":
          break;
        case "insert-table":
          this.openDialog(true, e);
          event2.preventDefault();
          break;
      }
      if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection) && this.contentModule && event2.code !== "KeyK") {
        var selection = void 0;
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        var ele = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)[0];
        ele = ele && ele.tagName !== "TD" && ele.tagName !== "TH" ? ele.parentElement : ele;
        if (event2.keyCode === 8 || event2.keyCode === 46 || event2.ctrlKey && event2.keyCode === 88) {
          if (ele && ele.tagName === "TBODY") {
            if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection) && this.contentModule) {
              selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());
            }
            event2.preventDefault();
            proxy.removeTable(selection, event2, true);
          } else if (ele && ele.querySelectorAll("table").length > 0) {
            this.removeResizeElement();
            this.hideTableQuickToolbar();
          }
        }
        if (ele && ele.tagName !== "TD" && ele.tagName !== "TH") {
          var closestTd = closest(ele, "td");
          ele = !isNullOrUndefined(closestTd) && this.parent.inputElement.contains(closestTd) ? closestTd : ele;
        }
        if (ele && (ele.tagName === "TD" || ele.tagName === "TH")) {
          if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection) && this.contentModule) {
            selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());
          }
          switch (event2.keyCode) {
            case 9:
            case 37:
            case 39:
              proxy.tabSelection(event2, selection, ele);
              break;
            case 40:
            case 38:
              proxy.tableArrowNavigation(event2, selection, ele);
              break;
          }
        }
      }
    };
    Table2.prototype.tableModulekeyUp = function(e) {
      if (!isNullOrUndefined(this.parent.formatter.editorManager.nodeSelection) && this.contentModule) {
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.parent.contentModule.getDocument());
        var ele = this.parent.formatter.editorManager.nodeSelection.getParentNodeCollection(range)[0];
        ele = ele && ele.tagName !== "TD" && ele.tagName !== "TH" ? ele.parentElement : ele;
        if (ele && ele.tagName !== "TD" && ele.tagName !== "TH") {
          var closestTd = closest(ele, "td");
          ele = !isNullOrUndefined(closestTd) && this.parent.inputElement.contains(closestTd) ? closestTd : ele;
        }
        if (this.previousTableElement !== ele && !isNullOrUndefined(this.previousTableElement)) {
          this.previousTableElement.classList.remove(CLS_TABLE_SEL);
        }
      }
    };
    Table2.prototype.openDialog = function(isInternal, e) {
      if (!isInternal) {
        this.parent.contentModule.getEditPanel().focus();
      }
      if (this.parent.editorMode === "HTML") {
        var docElement = this.parent.contentModule.getDocument();
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(docElement);
        var selection = this.parent.formatter.editorManager.nodeSelection.save(range, docElement);
        var args = {
          originalEvent: e ? e.args : { action: "insert-table" },
          item: {
            command: "Table",
            subCommand: "CreateTable"
          },
          name: !isInternal ? "showDialog" : null
        };
        this.insertTableDialog({ self: this, args, selection });
      }
    };
    Table2.prototype.showDialog = function() {
      this.openDialog(false);
      this.setCssClass({ cssClass: this.parent.cssClass });
    };
    Table2.prototype.closeDialog = function() {
      if (this.editdlgObj) {
        this.editdlgObj.hide({ returnValue: true });
      }
    };
    Table2.prototype.onToolbarAction = function(args) {
      var item = args.args.item;
      switch (item.subCommand) {
        case "TableHeader":
          this.tableHeader(args.selection, args.args);
          break;
        case "TableRemove":
          this.removeTable(args.selection, args.args);
          break;
        case "TableEditProperties":
          this.editTable(args);
          break;
      }
    };
    Table2.prototype.verticalAlign = function(args, e) {
      var tdEle = closest(args.selectParent[0], "td") || closest(args.selectParent[0], "th");
      if (tdEle) {
        this.parent.formatter.process(this.parent, e, e, { tableCell: tdEle, subCommand: e.item.subCommand });
      }
    };
    Table2.prototype.tableStyles = function(args, command) {
      var table = closest(args.selectParent[0], "table");
      if (command === "Dashed") {
        this.parent.element.classList.contains(CLS_TB_DASH_BOR) ? this.parent.element.classList.remove(CLS_TB_DASH_BOR) : this.parent.element.classList.add(CLS_TB_DASH_BOR);
        table.classList.contains(CLS_TB_DASH_BOR) ? table.classList.remove(CLS_TB_DASH_BOR) : table.classList.add(CLS_TB_DASH_BOR);
      }
      if (command === "Alternate") {
        this.parent.element.classList.contains(CLS_TB_ALT_BOR) ? this.parent.element.classList.remove(CLS_TB_ALT_BOR) : this.parent.element.classList.add(CLS_TB_ALT_BOR);
        table.classList.contains(CLS_TB_ALT_BOR) ? table.classList.remove(CLS_TB_ALT_BOR) : table.classList.add(CLS_TB_ALT_BOR);
      }
      if (args.args && args.args.item.cssClass) {
        var classList = args.args.item.cssClass.split(" ");
        for (var i = 0; i < classList.length; i++) {
          if (table.classList.contains(classList[i])) {
            table.classList.remove(classList[i]);
          } else {
            table.classList.add(classList[i]);
          }
        }
      }
      this.parent.formatter.saveData();
      this.parent.formatter.editorManager.nodeSelection.restore();
    };
    Table2.prototype.insideList = function(range) {
      var blockNodes = this.parent.formatter.editorManager.domNode.blockNodes();
      var nodes = [];
      for (var i = 0; i < blockNodes.length; i++) {
        if (blockNodes[i].parentNode.tagName === "LI") {
          nodes.push(blockNodes[i].parentNode);
        } else if (blockNodes[i].tagName === "LI" && blockNodes[i].childNodes[0].tagName !== "P" && (blockNodes[i].childNodes[0].tagName !== "OL" && blockNodes[i].childNodes[0].tagName !== "UL")) {
          nodes.push(blockNodes[i]);
        }
      }
      if (nodes.length > 1 || nodes.length && (range.startOffset === 0 && range.endOffset === 0)) {
        this.ensureInsideTableList = true;
        return true;
      } else {
        this.ensureInsideTableList = false;
        return false;
      }
    };
    Table2.prototype.tabSelection = function(event2, selection, ele) {
      this.previousTableElement = ele;
      var insideList = this.insideList(selection.range);
      if ((event2.keyCode === 37 || event2.keyCode === 39) && selection.range.startContainer.nodeType === 3 || insideList) {
        return;
      }
      event2.preventDefault();
      ele.classList.remove(CLS_TABLE_SEL);
      if (!event2.shiftKey && event2.keyCode !== 37) {
        var nextElement = !isNullOrUndefined(ele.nextSibling) ? ele.nextSibling : !isNullOrUndefined(closest(ele, "tr").nextSibling) ? closest(ele, "tr").nextSibling.childNodes[0] : !isNullOrUndefined(closest(ele, "table").nextSibling) ? closest(ele, "table").nextSibling.nodeName.toLowerCase() === "td" ? closest(ele, "table").nextSibling : ele : ele;
        if (ele === nextElement && ele.nodeName === "TH") {
          nextElement = closest(ele, "table").rows[1].cells[0];
        }
        if (event2.keyCode === 39 && ele === nextElement) {
          nextElement = closest(ele, "table").nextSibling;
        }
        if (nextElement) {
          nextElement.textContent.trim() !== "" && closest(nextElement, "td") ? selection.setSelectionNode(this.contentModule.getDocument(), nextElement) : selection.setSelectionText(this.contentModule.getDocument(), nextElement, nextElement, 0, 0);
        }
        if (ele === nextElement && event2.keyCode !== 39 && nextElement) {
          ele.classList.add(CLS_TABLE_SEL);
          this.addRow(selection, event2, true);
          ele.classList.remove(CLS_TABLE_SEL);
          nextElement = nextElement.parentElement.nextSibling ? nextElement.parentElement.nextSibling.firstChild : nextElement.parentElement.firstChild;
          nextElement.textContent.trim() !== "" && closest(nextElement, "td") ? selection.setSelectionNode(this.contentModule.getDocument(), nextElement) : selection.setSelectionText(this.contentModule.getDocument(), nextElement, nextElement, 0, 0);
        }
      } else {
        var prevElement = !isNullOrUndefined(ele.previousSibling) ? ele.previousSibling : !isNullOrUndefined(closest(ele, "tr").previousSibling) ? closest(ele, "tr").previousSibling.childNodes[closest(ele, "tr").previousSibling.childNodes.length - 1] : !isNullOrUndefined(closest(ele, "table").previousSibling) ? closest(ele, "table").previousSibling.nodeName.toLowerCase() === "td" ? closest(ele, "table").previousSibling : ele : ele;
        if (ele === prevElement && ele.cellIndex === 0 && closest(ele, "table").tHead) {
          var clsTble = closest(ele, "table");
          prevElement = clsTble.rows[0].cells[clsTble.rows[0].cells.length - 1];
        }
        if (event2.keyCode === 37 && ele === prevElement) {
          prevElement = closest(ele, "table").previousSibling;
        }
        if (prevElement) {
          prevElement.textContent.trim() !== "" && closest(prevElement, "td") ? selection.setSelectionNode(this.contentModule.getDocument(), prevElement) : selection.setSelectionText(this.contentModule.getDocument(), prevElement, prevElement, 0, 0);
        }
      }
    };
    Table2.prototype.tableArrowNavigation = function(event2, selection, ele) {
      var selText = selection.range.startContainer;
      if (event2.keyCode === 40 && selText.nodeType === 3 && (selText.nextSibling && selText.nextSibling.nodeName === "BR" || selText.parentNode && selText.parentNode.nodeName !== "TD") || event2.keyCode === 38 && selText.nodeType === 3 && (selText.previousSibling && selText.previousSibling.nodeName === "BR" || selText.parentNode && selText.parentNode.nodeName !== "TD")) {
        return;
      }
      event2.preventDefault();
      ele.classList.remove(CLS_TABLE_SEL);
      if (event2.keyCode === 40) {
        ele = !isNullOrUndefined(closest(ele, "tr").nextElementSibling) ? closest(ele, "tr").nextElementSibling.children[ele.cellIndex] : closest(ele, "table").tHead && ele.nodeName === "TH" ? closest(ele, "table").rows[1].cells[ele.cellIndex] : !isNullOrUndefined(closest(ele, "table").nextSibling) ? closest(ele, "table").nextSibling : ele;
      } else {
        ele = !isNullOrUndefined(closest(ele, "tr").previousElementSibling) ? closest(ele, "tr").previousElementSibling.children[ele.cellIndex] : closest(ele, "table").tHead && ele.nodeName !== "TH" ? closest(ele, "table").tHead.rows[0].cells[ele.cellIndex] : !isNullOrUndefined(closest(ele, "table").previousSibling) ? closest(ele, "table").previousSibling : ele;
      }
      if (ele) {
        selection.setSelectionText(this.contentModule.getDocument(), ele, ele, 0, 0);
      }
    };
    Table2.prototype.setBGColor = function(args) {
      var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
      var selection = this.parent.formatter.editorManager.nodeSelection.save(range, this.contentModule.getDocument());
      var selectedCells = this.curTable.querySelectorAll(".e-cell-select");
      for (var i = 0; i < selectedCells.length; i++) {
        selectedCells[i].style.backgroundColor = args.item.value;
      }
      this.parent.formatter.saveData();
    };
    Table2.prototype.hideTableQuickToolbar = function() {
      if (this.quickToolObj && this.quickToolObj.tableQTBar && document.body.contains(this.quickToolObj.tableQTBar.element)) {
        this.quickToolObj.tableQTBar.hidePopup();
      }
    };
    Table2.prototype.tableHeader = function(selection, e) {
      this.parent.formatter.process(this.parent, e, e.originalEvent, { selection, subCommand: e.item.subCommand });
    };
    Table2.prototype.editAreaClickHandler = function(e) {
      if (this.parent.readonly || !isNullOrUndefined(closest(e.args.target, ".e-img-caption"))) {
        return;
      }
      var args = e.args;
      var showOnRightClick = this.parent.quickToolbarSettings.showOnRightClick;
      if (args.which === 2 || showOnRightClick && args.which === 1 || !showOnRightClick && args.which === 3) {
        return;
      }
      if (this.parent.editorMode === "HTML" && this.parent.quickToolbarModule && this.parent.quickToolbarModule.tableQTBar) {
        this.quickToolObj = this.parent.quickToolbarModule;
        var target = args.target;
        this.contentModule = this.rendererFactory.getRenderer(RenderType.Content);
        var isPopupOpen = this.quickToolObj.tableQTBar.element.classList.contains("e-rte-pop");
        if (isPopupOpen) {
          return;
        }
        var range = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
        var closestTable = closest(target, "table");
        var startNode = this.parent.getRange().startContainer.parentElement;
        var endNode = this.parent.getRange().endContainer.parentElement;
        if (target && target.nodeName !== "A" && target.nodeName !== "IMG" && target.nodeName !== "VIDEO" && !target.classList.contains(CLS_CLICKELEM) && target.nodeName !== "AUDIO" && startNode === endNode && (target.nodeName === "TD" || target.nodeName === "TH" || target.nodeName === "TABLE" || closestTable && this.parent.contentModule.getEditPanel().contains(closestTable)) && !(range.startContainer.nodeType === 3 && !range.collapsed)) {
          var range_1 = this.parent.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
          this.parent.formatter.editorManager.nodeSelection.save(range_1, this.contentModule.getDocument());
          this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
          var pageX = void 0;
          var pageY = void 0;
          if (Browser.isDevice && e.args.touches) {
            pageX = e.args.changedTouches[0].pageX;
            pageY = e.args.changedTouches[0].pageY;
          } else {
            pageX = this.parent.iframeSettings.enable ? window.pageXOffset + this.parent.element.getBoundingClientRect().left + args.clientX : args.pageX;
            pageY = this.parent.iframeSettings.enable ? window.pageYOffset + this.parent.element.getBoundingClientRect().top + args.clientY : args.pageY;
          }
          this.quickToolObj.tableQTBar.showPopup(pageX, pageY, target);
          this.parent.formatter.editorManager.nodeSelection.restore();
        } else {
          this.hideTableQuickToolbar();
        }
      }
    };
    Table2.prototype.tableCellSelect = function(e) {
      var target = e.target;
      var row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement);
      var col = Array.prototype.slice.call(target.parentElement.children).indexOf(target);
      var list = this.dlgDiv.querySelectorAll(".e-rte-tablecell");
      Array.prototype.forEach.call(list, function(item) {
        var parentIndex = Array.prototype.slice.call(item.parentElement.parentElement.children).indexOf(item.parentElement);
        var cellIndex = Array.prototype.slice.call(item.parentElement.children).indexOf(item);
        removeClass([item], "e-active");
        if (parentIndex <= row && cellIndex <= col) {
          addClass([item], "e-active");
        }
      });
      this.tblHeader.innerHTML = col + 1 + "x" + (row + 1);
    };
    Table2.prototype.tableMouseUp = function(e) {
      EventHandler.remove(this.curTable, "mousemove", this.tableMove);
    };
    Table2.prototype.tableCellLeave = function(e) {
      removeClass(this.dlgDiv.querySelectorAll(".e-rte-tablecell"), "e-active");
      addClass([this.dlgDiv.querySelector(".e-rte-tablecell")], "e-active");
      this.tblHeader.innerHTML = "1x1";
    };
    Table2.prototype.tableCellClick = function(e) {
      var target = e.target;
      var row = Array.prototype.slice.call(target.parentElement.parentElement.children).indexOf(target.parentElement) + 1;
      var col = Array.prototype.slice.call(target.parentElement.children).indexOf(target) + 1;
      this.self.tableInsert(row, col, e, this);
    };
    Table2.prototype.tableInsert = function(row, col, e, selectionObj) {
      var proxy = selectionObj.self ? selectionObj.self : this;
      var startContainer = selectionObj.selection.range.startContainer;
      if (startContainer.nodeName === "P" && startContainer.textContent.trim() === "" && !(startContainer.childNodes.length > 0)) {
        startContainer.innerHTML = "<br />";
      }
      var parentNode = startContainer.parentNode;
      if (proxy.parent.editorMode === "HTML" && (proxy.parent.iframeSettings.enable && !hasClass(parentNode.ownerDocument.querySelector("body"), "e-lib") || // eslint-disable-next-line
      !proxy.parent.iframeSettings.enable && isNullOrUndefined(closest(parentNode, "[id='" + proxy.contentModule.getPanel().id + "']")))) {
        proxy.contentModule.getEditPanel().focus();
        var range = proxy.parent.formatter.editorManager.nodeSelection.getRange(proxy.contentModule.getDocument());
        selectionObj.selection = proxy.parent.formatter.editorManager.nodeSelection.save(range, proxy.contentModule.getDocument());
      }
      var value = {
        rows: row,
        columns: col,
        width: {
          minWidth: proxy.parent.tableSettings.minWidth,
          maxWidth: proxy.parent.tableSettings.maxWidth,
          width: proxy.parent.tableSettings.width
        },
        selection: selectionObj.selection
      };
      if (proxy.popupObj) {
        proxy.popupObj.hide();
      }
      if (proxy.editdlgObj) {
        proxy.editdlgObj.hide();
      }
      proxy.parent.formatter.process(proxy.parent, selectionObj.args, selectionObj.args.originalEvent, value);
      proxy.contentModule.getEditPanel().focus();
      proxy.parent.on(mouseDown, proxy.cellSelect, proxy);
    };
    Table2.prototype.cellSelect = function(e) {
      var target = e.args.target;
      var tdNode = closest(target, "td,th");
      target = target.nodeName !== "TD" && tdNode && this.parent.contentModule.getEditPanel().contains(tdNode) ? tdNode : target;
      removeClass(this.contentModule.getEditPanel().querySelectorAll("table td, table th"), CLS_TABLE_SEL);
      if (target && (target.tagName === "TD" || target.tagName === "TH")) {
        addClass([target], CLS_TABLE_SEL);
        this.activeCell = target;
        this.curTable = this.curTable ? this.curTable : closest(target, "table");
        EventHandler.add(this.curTable, "mousemove", this.tableMove, this);
        EventHandler.add(this.curTable, "mouseup", this.tableMouseUp, this);
        this.removeResizeElement();
        if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {
          detach(this.helper);
        }
      }
      if (Browser.info.name === "mozilla" && !isNullOrUndefined(closest(target, "table")) && closest(target, "table").tagName === "TABLE") {
        this.parent.contentModule.getEditPanel().setAttribute("contenteditable", "false");
      }
    };
    Table2.prototype.tableMove = function(event2) {
      this.parent.formatter.editorManager.observer.notify("TABLE_MOVE", { event: event2, selectNode: [this.activeCell] });
    };
    Table2.prototype.resizeHelper = function(e) {
      if (this.parent.readonly) {
        return;
      }
      var target = e.target || e.targetTouches[0].target;
      var closestTable = closest(target, "table.e-rte-table");
      if (!isNullOrUndefined(this.curTable) && !isNullOrUndefined(closestTable) && closestTable !== this.curTable && this.parent.contentModule.getEditPanel().contains(closestTable)) {
        this.removeResizeElement();
        this.removeHelper(e);
        this.cancelResizeAction();
      }
      if (target.nodeName === "TABLE" || target.nodeName === "TD" || target.nodeName === "TH") {
        this.curTable = closestTable && this.parent.contentModule.getEditPanel().contains(closestTable) && (target.nodeName === "TD" || target.nodeName === "TH") ? closestTable : target;
        this.removeResizeElement();
        this.tableResizeEleCreation(this.curTable, e);
      }
    };
    Table2.prototype.tableResizeEleCreation = function(table, e) {
      this.parent.preventDefaultResize(e);
      var columns = table.rows[this.calMaxCol(table)].cells;
      var rows = [];
      for (var i = 0; i < table.rows.length; i++) {
        rows.push(Array.prototype.slice.call(table.rows[i].cells, 0, 1)[0]);
      }
      var height = parseInt(getComputedStyle(table).height, 10);
      var width = parseInt(getComputedStyle(table).width, 10);
      var pos = this.calcPos(table);
      for (var i = 0; columns.length >= i; i++) {
        var colReEle = this.parent.createElement("span", {
          attrs: {
            "data-col": i.toString(),
            "unselectable": "on",
            "contenteditable": "false"
          }
        });
        colReEle.classList.add(CLS_RTE_TABLE_RESIZE, CLS_TB_COL_RES);
        if (columns.length === i) {
          colReEle.style.cssText = "height: " + height + "px; width: 4px; top: " + pos.top + "px; left:" + (pos.left + this.calcPos(columns[i - 1]).left + columns[i - 1].offsetWidth) + "px;";
        } else {
          colReEle.style.cssText = "height: " + height + "px; width: 4px; top: " + pos.top + "px; left:" + (pos.left + this.calcPos(columns[i]).left) + "px;";
        }
        this.contentModule.getEditPanel().appendChild(colReEle);
      }
      for (var i = 0; rows.length > i; i++) {
        var rowReEle = this.parent.createElement("span", {
          attrs: {
            "data-row": i.toString(),
            "unselectable": "on",
            "contenteditable": "false"
          }
        });
        rowReEle.classList.add(CLS_RTE_TABLE_RESIZE, CLS_TB_ROW_RES);
        var rowPosLeft = !isNullOrUndefined(table.getAttribute("cellspacing")) || table.getAttribute("cellspacing") !== "" ? 0 : this.calcPos(rows[i]).left;
        rowReEle.style.cssText = "width: " + width + "px; height: 4px; top: " + (this.calcPos(rows[i]).top + pos.top + rows[i].offsetHeight - 2) + "px; left:" + (rowPosLeft + pos.left) + "px;";
        this.contentModule.getEditPanel().appendChild(rowReEle);
      }
      var tableReBox = this.parent.createElement("span", {
        className: CLS_TB_BOX_RES + " " + this.parent.cssClass,
        attrs: {
          "data-col": columns.length.toString(),
          "unselectable": "on",
          "contenteditable": "false"
        }
      });
      tableReBox.style.cssText = "top: " + (pos.top + height - 4) + "px; left:" + (pos.left + width - 4) + "px;";
      if (Browser.isDevice) {
        tableReBox.classList.add("e-rmob");
      }
      this.contentModule.getEditPanel().appendChild(tableReBox);
    };
    Table2.prototype.removeResizeElement = function() {
      var item = this.parent.contentModule.getEditPanel().querySelectorAll(".e-column-resize, .e-row-resize, .e-table-box");
      if (item.length > 0) {
        for (var i = 0; i < item.length; i++) {
          detach(item[i]);
        }
      }
    };
    Table2.prototype.calcPos = function(elem) {
      var parentOffset = {
        top: 0,
        left: 0
      };
      var offset = elem.getBoundingClientRect();
      var doc = elem.ownerDocument;
      var offsetParent = elem.offsetParent || doc.documentElement;
      var isNestedTable = false;
      while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && offsetParent.style.position === "static") {
        offsetParent = offsetParent.parentNode;
      }
      if (offsetParent.nodeName === "TD" && elem.nodeName === "TABLE") {
        offsetParent = closest(offsetParent, ".e-rte-content");
        isNestedTable = true;
      }
      if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
        parentOffset = offsetParent.getBoundingClientRect();
      }
      if (isNestedTable) {
        isNestedTable = false;
        var topValue = this.parent.inputElement && this.parent.inputElement.scrollTop > 0 ? this.parent.inputElement.scrollTop + offset.top - parentOffset.top : offset.top - parentOffset.top;
        var leftValue = this.parent.inputElement && this.parent.inputElement.scrollLeft > 0 ? this.parent.inputElement.scrollLeft + offset.left - parentOffset.left : offset.left - parentOffset.left;
        return {
          top: topValue,
          left: leftValue
        };
      } else {
        return {
          top: elem.offsetTop,
          left: elem.offsetLeft
        };
      }
    };
    Table2.prototype.getPointX = function(e) {
      if (e.touches && e.touches.length) {
        return e.touches[0].pageX;
      } else {
        return e.pageX;
      }
    };
    Table2.prototype.getPointY = function(e) {
      if (e.touches && e.touches.length) {
        return e.touches[0].pageY;
      } else {
        return e.pageY;
      }
    };
    Table2.prototype.resizeStart = function(e) {
      var _this = this;
      if (this.parent.readonly) {
        return;
      }
      if (Browser.isDevice) {
        this.resizeHelper(e);
      }
      var target = e.target;
      if (target.classList.contains(CLS_TB_COL_RES) || target.classList.contains(CLS_TB_ROW_RES) || target.classList.contains(CLS_TB_BOX_RES)) {
        e.preventDefault();
        this.parent.preventDefaultResize(e);
        removeClass(this.curTable.querySelectorAll("td,th"), CLS_TABLE_SEL);
        this.parent.formatter.editorManager.nodeSelection.Clear(this.contentModule.getDocument());
        this.pageX = this.getPointX(e);
        this.pageY = this.getPointY(e);
        this.resizeBtnInit();
        this.hideTableQuickToolbar();
        if (target.classList.contains(CLS_TB_COL_RES)) {
          this.resizeBtnStat.column = true;
          if (parseInt(target.getAttribute("data-col"), 10) === this.curTable.rows[this.calMaxCol(this.curTable)].cells.length) {
            this.currentColumnResize = "last";
            this.columnEle = this.curTable.rows[this.calMaxCol(this.curTable)].cells[parseInt(target.getAttribute("data-col"), 10) - 1];
          } else {
            if (parseInt(target.getAttribute("data-col"), 10) === 0) {
              this.currentColumnResize = "first";
            } else {
              this.currentColumnResize = "middle";
            }
            this.columnEle = this.curTable.rows[this.calMaxCol(this.curTable)].cells[parseInt(target.getAttribute("data-col"), 10)];
          }
          this.colIndex = this.columnEle.cellIndex;
          this.moveEle = e.target;
          this.appendHelper();
        }
        if (target.classList.contains(CLS_TB_ROW_RES)) {
          this.rowEle = this.curTable.rows[parseInt(target.getAttribute("data-row"), 10)];
          this.resizeBtnStat.row = true;
          this.appendHelper();
        }
        if (target.classList.contains(CLS_TB_BOX_RES)) {
          this.resizeBtnStat.tableBox = true;
        }
        if (Browser.isDevice && this.helper && !this.helper.classList.contains("e-reicon")) {
          this.helper.classList.add("e-reicon");
          EventHandler.add(document, Browser.touchStartEvent, this.removeHelper, this);
          EventHandler.add(this.helper, Browser.touchStartEvent, this.resizeStart, this);
        } else {
          var args = { event: e, requestType: "Table" };
          this.parent.trigger(resizeStart, args, function(resizeStartArgs) {
            if (resizeStartArgs.cancel) {
              _this.cancelResizeAction();
            }
          });
        }
        EventHandler.add(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing, this);
        EventHandler.add(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd, this);
      }
    };
    Table2.prototype.removeHelper = function(e) {
      var cls = e.target.classList;
      if (!cls.contains("e-reicon") && this.helper) {
        EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);
        EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);
        if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {
          detach(this.helper);
        }
        this.pageX = null;
        this.helper = null;
      }
    };
    Table2.prototype.appendHelper = function() {
      this.helper = this.parent.createElement("div", {
        className: "e-table-rhelper " + this.parent.cssClass
      });
      if (Browser.isDevice) {
        this.helper.classList.add("e-reicon");
      }
      this.contentModule.getEditPanel().appendChild(this.helper);
      this.setHelperHeight();
    };
    Table2.prototype.setHelperHeight = function() {
      var pos = this.calcPos(this.curTable);
      if (this.resizeBtnStat.column) {
        this.helper.classList.add("e-column-helper");
        this.helper.style.cssText = "height: " + getComputedStyle(this.curTable).height + "; top: " + pos.top + "px; left:" + (pos.left + this.calcPos(this.columnEle).left + (this.currentColumnResize === "last" ? this.columnEle.offsetWidth + 2 : 0) - 1) + "px;";
      } else {
        this.helper.classList.add("e-row-helper");
        this.helper.style.cssText = "width: " + getComputedStyle(this.curTable).width + "; top: " + (this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight) + "px; left:" + (this.calcPos(this.rowEle).left + pos.left) + "px;";
      }
    };
    Table2.prototype.updateHelper = function() {
      var pos = this.calcPos(this.curTable);
      if (this.resizeBtnStat.column) {
        var left = pos.left + this.calcPos(this.columnEle).left + (this.currentColumnResize === "last" ? this.columnEle.offsetWidth + 2 : 0) - 1;
        this.helper.style.left = left + "px";
      } else {
        var top_1 = this.calcPos(this.rowEle).top + pos.top + this.rowEle.offsetHeight;
        this.helper.style.top = top_1 + "px";
      }
    };
    Table2.prototype.calMaxCol = function(element) {
      var max = 0;
      var maxRowIndex;
      for (var i = 0; i < element.rows.length; i++) {
        if (max < element.rows[i].cells.length) {
          maxRowIndex = i;
          max = element.rows[i].cells.length;
        }
      }
      return maxRowIndex;
    };
    Table2.prototype.resizing = function(e) {
      var _this = this;
      var pageX = this.getPointX(e);
      var pageY = this.getPointY(e);
      var mouseX = this.parent.enableRtl ? -(pageX - this.pageX) : pageX - this.pageX;
      var mouseY = this.parent.enableRtl ? -(pageY - this.pageY) : pageY - this.pageY;
      this.pageX = pageX;
      this.pageY = pageY;
      var maxiumWidth;
      var currentTdElement = this.curTable.closest("td");
      var args = { event: e, requestType: "table" };
      var isRowCellsMerged = false;
      var mergedCellIndex;
      var mergedElement;
      this.parent.trigger(onResize, args, function(resizingArgs) {
        if (resizingArgs.cancel) {
          _this.cancelResizeAction();
        } else {
          var tableReBox = _this.contentModule.getEditPanel().querySelector(".e-table-box");
          var tableWidth = parseInt(getComputedStyle(_this.curTable).width, 10);
          var tableHeight = parseInt(getComputedStyle(_this.curTable).height, 10);
          var paddingSize = +getComputedStyle(_this.contentModule.getEditPanel()).paddingRight.match(/\d/g).join("");
          var rteWidth = _this.contentModule.getEditPanel().offsetWidth - (_this.contentModule.getEditPanel().offsetWidth - _this.contentModule.getEditPanel().clientWidth) - paddingSize * 2;
          var widthCompare = void 0;
          if (!isNullOrUndefined(_this.curTable.parentElement.closest("table")) && !isNullOrUndefined(_this.curTable.closest("td")) && _this.contentModule.getEditPanel().contains(_this.curTable.closest("td"))) {
            var currentTd = _this.curTable.closest("td");
            var currentTDPad = +getComputedStyle(currentTd).paddingRight.match(/\d/g).join("");
            widthCompare = currentTd.offsetWidth - (currentTd.offsetWidth - currentTd.clientWidth) - currentTDPad * 2;
          } else {
            widthCompare = rteWidth;
          }
          if (_this.resizeBtnStat.column) {
            var width = parseFloat(_this.columnEle.offsetWidth.toString());
            var cellRow = _this.curTable.rows[0].cells[0].nodeName === "TH" ? 1 : 0;
            var currentTableWidth = parseFloat(_this.curTable.style.width.split("%")[0]);
            var currentColumnCellWidth = parseFloat(_this.curTable.rows[cellRow].cells[_this.colIndex >= _this.curTable.rows[cellRow].cells.length ? _this.curTable.rows[cellRow].cells.length - 1 : _this.colIndex].style.width.split("%")[0]);
            if (_this.currentColumnResize === "first") {
              mouseX = mouseX - 0.75;
              _this.removeResizeElement();
              if (currentTdElement) {
                maxiumWidth = _this.curTable.getBoundingClientRect().right - _this.calcPos(currentTdElement).left;
                _this.curTable.style.maxWidth = maxiumWidth + "px";
              }
              if ((mouseX !== 0 && 5 < currentColumnCellWidth || mouseX < 0) && currentTableWidth <= 100 && _this.convertPixelToPercentage(tableWidth - mouseX, widthCompare) <= 100) {
                var firstColumnsCell = _this.findFirstLastColCells(_this.curTable, true);
                _this.curTable.style.width = _this.convertPixelToPercentage(tableWidth - mouseX, widthCompare) > 100 ? "100%" : _this.convertPixelToPercentage(tableWidth - mouseX, widthCompare) + "%";
                var differenceWidth = currentTableWidth - _this.convertPixelToPercentage(tableWidth - mouseX, widthCompare);
                _this.currentMarginLeft = _this.currentMarginLeft + differenceWidth;
                _this.curTable.style.marginLeft = "calc(" + (_this.curTable.style.width === "100%" ? 0 : _this.currentMarginLeft) + "%)";
                for (var i = 0; i < firstColumnsCell.length; i++) {
                  _this.curTable.rows[i].cells[_this.colIndex].style.width = currentColumnCellWidth - differenceWidth + "%";
                }
              }
            } else if (_this.currentColumnResize === "last") {
              mouseX = mouseX + 0.75;
              _this.removeResizeElement();
              if (currentTdElement) {
                maxiumWidth = currentTdElement.getBoundingClientRect().right - _this.curTable.getBoundingClientRect().left;
                _this.curTable.style.maxWidth = maxiumWidth + "px";
              }
              if ((mouseX !== 0 && 5 < currentColumnCellWidth || mouseX > 0) && currentTableWidth <= 100 && _this.convertPixelToPercentage(tableWidth + mouseX, widthCompare) <= 100) {
                var lastColumnsCell = _this.findFirstLastColCells(_this.curTable, false);
                _this.curTable.style.width = _this.convertPixelToPercentage(tableWidth + mouseX, widthCompare) > 100 ? "100%" : _this.convertPixelToPercentage(tableWidth + mouseX, widthCompare) + "%";
                var differenceWidth = currentTableWidth - _this.convertPixelToPercentage(tableWidth + mouseX, widthCompare);
                for (var i = 0; i < lastColumnsCell.length; i++) {
                  if (_this.curTable.rows[i].cells[_this.colIndex]) {
                    _this.curTable.rows[i].cells[_this.curTable.rows[i].cells.length === _this.colIndex ? _this.colIndex - 1 : _this.colIndex].style.width = currentColumnCellWidth - differenceWidth + "%";
                  }
                }
              }
            } else {
              var cellColl = _this.curTable.rows[_this.calMaxCol(_this.curTable)].cells;
              var actualwid = width - mouseX;
              var totalwid = parseFloat(_this.columnEle.offsetWidth.toString()) + parseFloat(cellColl[_this.colIndex - 1].offsetWidth.toString());
              for (var i = 0; i < _this.curTable.rows.length; i++) {
                if (totalwid - actualwid > 20 && actualwid > 20 && _this.curTable.rows[i].cells[i]) {
                  var leftColumnWidth = totalwid - actualwid;
                  var rightColWidth = actualwid;
                  var index = void 0;
                  var isMergedEleResize = false;
                  var leftTableCell = void 0;
                  var rightTableCell = void 0;
                  for (var j = 0; j < _this.curTable.rows[i].cells.length; j++) {
                    if (_this.curTable.rows[i].cells[j].hasAttribute("rowspan") && j <= _this.colIndex) {
                      isRowCellsMerged = true;
                      mergedCellIndex = i;
                      mergedElement = _this.curTable.rows[i].cells[j];
                    }
                  }
                  if (_this.curTable.rows[i].cells[i].hasAttribute("colspan")) {
                    index = parseInt(_this.curTable.rows[i].cells[i].getAttribute("colspan"), 10) - 1;
                  } else {
                    index = _this.colIndex;
                  }
                  if (isRowCellsMerged) {
                    var currentResizeRow = void 0;
                    if (_this.curTable.rows[i].cells.length < cellColl.length) {
                      index = _this.curTable.rows[i].cells.length === _this.colIndex ? _this.colIndex - 1 : _this.colIndex - (_this.colIndex - 1);
                      currentResizeRow = _this.curTable.rows[!isNullOrUndefined(mergedCellIndex) ? mergedCellIndex : _this.colIndex - 1];
                      if (currentResizeRow && (currentResizeRow.cells[_this.colIndex - 1] === mergedElement || currentResizeRow.cells[currentResizeRow.cells.length - 1] === mergedElement)) {
                        isMergedEleResize = true;
                      } else {
                        isMergedEleResize = false;
                      }
                    } else {
                      index = _this.colIndex;
                    }
                    leftTableCell = !isMergedEleResize ? _this.curTable.rows[i].cells[index - 1] : currentResizeRow && currentResizeRow.cells[currentResizeRow.cells.length - 1] !== mergedElement ? currentResizeRow.cells[_this.colIndex - 1] : _this.curTable.rows[i].cells[_this.curTable.rows[i].cells.length - 1];
                    rightTableCell = !isMergedEleResize ? _this.curTable.rows[i].cells[index] : rightTableCell && rightTableCell.hasAttribute("rowspan") ? rightTableCell : currentResizeRow && currentResizeRow.cells[currentResizeRow.cells.length - 1] !== mergedElement ? _this.curTable.rows[i].cells[index - 1] : currentResizeRow.cells[currentResizeRow.cells.length - 1];
                  }
                  if (!isNullOrUndefined(_this.curTable.rows[i].cells[index - 1]) && !isRowCellsMerged) {
                    _this.curTable.rows[i].cells[index - 1].style.width = _this.convertPixelToPercentage(leftColumnWidth, tableWidth) + "%";
                  } else {
                    if (leftTableCell) {
                      leftTableCell.style.width = _this.convertPixelToPercentage(leftColumnWidth, tableWidth) + "%";
                    }
                  }
                  if (!isNullOrUndefined(_this.curTable.rows[i].cells[index]) && !isRowCellsMerged) {
                    _this.curTable.rows[i].cells[index].style.width = _this.convertPixelToPercentage(rightColWidth, tableWidth) + "%";
                  } else {
                    if (rightTableCell) {
                      rightTableCell.style.width = _this.convertPixelToPercentage(rightColWidth, tableWidth) + "%";
                    }
                  }
                }
              }
            }
            _this.updateHelper();
          } else if (_this.resizeBtnStat.row) {
            _this.parent.preventDefaultResize(e);
            var height = parseFloat(_this.rowEle.clientHeight.toString()) + mouseY;
            if (height > 20) {
              _this.rowEle.style.height = height + "px";
            }
            _this.curTable.style.height = "";
            if (!isNullOrUndefined(tableReBox)) {
              tableReBox.style.cssText = "top: " + (_this.calcPos(_this.curTable).top + tableHeight - 4) + "px; left:" + (_this.calcPos(_this.curTable).left + tableWidth - 4) + "px;";
            }
            _this.updateHelper();
          } else if (_this.resizeBtnStat.tableBox) {
            if (!Browser.isDevice) {
              EventHandler.remove(_this.contentModule.getEditPanel(), "mouseover", _this.resizeHelper);
            }
            if (currentTdElement) {
              var tableBoxPosition = _this.curTable.getBoundingClientRect().left - currentTdElement.getBoundingClientRect().left;
              maxiumWidth = Math.abs(tableBoxPosition - currentTdElement.getBoundingClientRect().width) - 5;
              _this.curTable.style.maxWidth = maxiumWidth + "px";
            }
            var widthType = _this.curTable.style.width.indexOf("%") > -1;
            _this.curTable.style.width = widthType ? _this.convertPixelToPercentage(tableWidth + mouseX, widthCompare) + "%" : tableWidth + mouseX + "px";
            _this.curTable.style.height = tableHeight + mouseY + "px";
            tableReBox.classList.add("e-rbox-select");
            tableReBox.style.cssText = "top: " + (_this.calcPos(_this.curTable).top + tableHeight - 4) + "px; left:" + (_this.calcPos(_this.curTable).left + tableWidth - 4) + "px;";
          }
        }
      });
    };
    Table2.prototype.findFirstLastColCells = function(table, isFirst) {
      var resultColumns = [];
      var rows = table.querySelectorAll("tr");
      for (var i = 0; i < rows.length; i++) {
        if (rows[i].closest("table") === table) {
          var columns = rows[i].querySelectorAll("th, td");
          resultColumns.push(isFirst ? columns[0] : columns[columns.length - 1]);
        }
      }
      return resultColumns;
    };
    Table2.prototype.convertPixelToPercentage = function(value, offsetValue) {
      return value / offsetValue * 100;
    };
    Table2.prototype.cancelResizeAction = function() {
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);
      this.removeResizeElement();
    };
    Table2.prototype.resizeEnd = function(e) {
      this.resizeBtnInit();
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchMoveEvent, this.resizing);
      EventHandler.remove(this.contentModule.getDocument(), Browser.touchEndEvent, this.resizeEnd);
      if (this.contentModule.getEditPanel().querySelector(".e-table-box") && this.contentModule.getEditPanel().contains(this.contentModule.getEditPanel().querySelector(".e-table-box"))) {
        if (!Browser.isDevice) {
          EventHandler.add(this.contentModule.getEditPanel(), "mouseover", this.resizeHelper, this);
        }
        this.removeResizeElement();
      }
      if (this.helper && this.contentModule.getEditPanel().contains(this.helper)) {
        detach(this.helper);
        this.helper = null;
      }
      this.pageX = null;
      this.pageY = null;
      this.moveEle = null;
      var args = { event: e, requestType: "table" };
      this.parent.trigger(resizeStop, args);
      this.parent.formatter.saveData();
    };
    Table2.prototype.resizeBtnInit = function() {
      return this.resizeBtnStat = { column: false, row: false, tableBox: false };
    };
    Table2.prototype.addRow = function(selectCell, e, tabkey) {
      var cmd;
      if (tabkey) {
        cmd = {
          item: { command: "Table", subCommand: "InsertRowAfter" }
        };
      }
      var value = {
        selection: selectCell,
        subCommand: tabkey ? cmd.item.subCommand : e.item.subCommand
      };
      this.parent.formatter.process(this.parent, tabkey ? cmd : e, e, value);
    };
    Table2.prototype.addColumn = function(selectCell, e) {
      this.parent.formatter.process(this.parent, e, e, { selection: selectCell, width: this.parent.tableSettings.width, subCommand: e.item.subCommand });
    };
    Table2.prototype.removeRowColumn = function(selectCell, e) {
      this.parent.formatter.process(this.parent, e, e, { selection: selectCell, subCommand: e.item.subCommand });
      this.hideTableQuickToolbar();
    };
    Table2.prototype.removeTable = function(selection, args, delKey) {
      var cmd;
      if (delKey) {
        cmd = { item: { command: "Table", subCommand: "TableRemove" } };
      }
      var value = {
        selection,
        subCommand: delKey ? cmd.item.subCommand : args.item.subCommand
      };
      this.parent.formatter.process(this.parent, delKey ? cmd : args, args.originalEvent, value);
      this.contentModule.getEditPanel().focus();
      if (this.parent.inputElement.innerHTML === null || this.parent.inputElement.innerHTML === "") {
        if (this.parent.enterKey === "DIV") {
          this.contentModule.getEditPanel().innerHTML = "<div><br/></div>";
        } else if (this.parent.enterKey === "BR") {
          this.contentModule.getEditPanel().innerHTML = "<br/>";
        } else {
          this.contentModule.getEditPanel().innerHTML = "<p><br/></p>";
        }
      }
      this.removeResizeElement();
      this.hideTableQuickToolbar();
    };
    Table2.prototype.renderDlgContent = function(args) {
      var _this = this;
      if (Browser.isDevice || this.parent.inlineMode.enable) {
        this.insertTableDialog(args);
        return;
      }
      if (this.popupObj) {
        this.popupObj.hide();
        return;
      }
      this.hideTableQuickToolbar();
      var header2 = "1X1";
      var insertbtn = this.l10n.getConstant("inserttablebtn");
      this.dlgDiv = this.parent.createElement("div", { className: "e-rte-table-popup " + this.parent.cssClass, id: this.rteID + "_table" });
      this.tblHeader = this.parent.createElement("div", { className: "e-rte-popup-header " + this.parent.cssClass });
      this.tblHeader.innerHTML = header2;
      this.dlgDiv.appendChild(this.tblHeader);
      var tableDiv = this.parent.createElement("div", { className: "e-rte-table-span " + this.parent.cssClass });
      this.drawTable(tableDiv, args);
      this.dlgDiv.appendChild(tableDiv);
      this.dlgDiv.appendChild(this.parent.createElement("span", { className: "e-span-border " + this.parent.cssClass }));
      var btnEle = this.parent.createElement("button", {
        className: "e-insert-table-btn " + this.parent.cssClass,
        id: this.rteID + "_insertTable",
        attrs: { type: "button", tabindex: "0" }
      });
      if (!isNullOrUndefined(this.parent.getToolbarElement().querySelector(".e-expended-nav"))) {
        this.parent.getToolbarElement().querySelector(".e-expended-nav").setAttribute("tabindex", "1");
      }
      this.dlgDiv.appendChild(btnEle);
      this.createTableButton = new Button({
        iconCss: "e-icons e-create-table",
        content: insertbtn,
        cssClass: "e-flat " + this.parent.cssClass,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale
      });
      this.createTableButton.isStringTemplate = true;
      this.createTableButton.appendTo(btnEle);
      EventHandler.add(btnEle, "click", this.insertTableDialog, { self: this, args: args.args, selection: args.selection });
      this.parent.getToolbar().appendChild(this.dlgDiv);
      var target = args.args.originalEvent.target;
      target = target.classList.contains("e-toolbar-item") ? target.firstChild : target.parentElement;
      this.popupObj = new Popup(this.dlgDiv, {
        targetType: "relative",
        relateTo: target,
        collision: { X: "fit", Y: "none" },
        offsetY: 8,
        viewPortElement: this.parent.element,
        position: { X: "left", Y: "bottom" },
        enableRtl: this.parent.enableRtl,
        zIndex: 10001,
        // eslint-disable-next-line
        close: function(event2) {
          _this.parent.isBlur = false;
          _this.popupObj.destroy();
          detach(_this.popupObj.element);
          _this.popupObj = null;
        }
      });
      addClass([this.popupObj.element], "e-popup-open");
      if (!isNullOrUndefined(this.parent.cssClass)) {
        addClass([this.popupObj.element], this.parent.cssClass);
      }
      this.popupObj.refreshPosition(target);
    };
    Table2.prototype.docClick = function(e) {
      var target = e.args.target;
      if (target && target.classList && (this.popupObj && !closest(target, "[id='" + this.popupObj.element.id + "']") || this.editdlgObj && !closest(target, "#" + this.editdlgObj.element.id)) && !target.classList.contains("e-create-table") && target.offsetParent && !target.offsetParent.classList.contains("e-rte-backgroundcolor-dropdown")) {
        if (this.popupObj) {
          this.popupObj.hide();
        }
        if (this.editdlgObj) {
          this.editdlgObj.hide();
        }
        this.parent.isBlur = true;
        dispatchEvent(this.parent.element, "focusout");
      }
      var closestEle = closest(target, "td");
      var isExist = closestEle && this.parent.contentModule.getEditPanel().contains(closestEle) ? true : false;
      if (target && target.tagName !== "TD" && target.tagName !== "TH" && !isExist && closest(target, ".e-rte-quick-popup") === null && target.offsetParent && !target.offsetParent.classList.contains("e-quick-dropdown") && !target.offsetParent.classList.contains("e-rte-backgroundcolor-dropdown") && !closest(target, ".e-rte-dropdown-popup") && !closest(target, ".e-rte-elements")) {
        removeClass(this.parent.inputElement.querySelectorAll("table td"), CLS_TABLE_SEL);
        if (!Browser.isIE) {
          this.hideTableQuickToolbar();
        }
      }
      if (target && target.classList && !target.classList.contains(CLS_TB_COL_RES) && !target.classList.contains(CLS_TB_ROW_RES) && !target.classList.contains(CLS_TB_BOX_RES)) {
        this.removeResizeElement();
      }
    };
    Table2.prototype.drawTable = function(tableDiv, args) {
      var rowDiv;
      var tableCell;
      for (var row = 0; row < 3; row++) {
        rowDiv = this.parent.createElement("div", { className: "e-rte-table-row " + this.parent.cssClass, attrs: { "data-column": "" + row } });
        for (var col = 0; col < 10; col++) {
          var display = row > 2 ? "none" : "inline-block";
          tableCell = this.parent.createElement("div", { className: "e-rte-tablecell e-default " + this.parent.cssClass, attrs: { "data-cell": "" + col } });
          rowDiv.appendChild(tableCell);
          tableCell.style.display = display;
          if (col === 0 && row === 0) {
            addClass([tableCell], "e-active");
          }
          EventHandler.add(tableCell, "mousemove", this.tableCellSelect, this);
          EventHandler.add(rowDiv, "mouseleave", this.tableCellLeave, this);
          EventHandler.add(tableCell, "mouseup", this.tableCellClick, { self: this, args: args.args, selection: args.selection });
        }
        tableDiv.appendChild(rowDiv);
      }
    };
    Table2.prototype.editTable = function(args) {
      var _this = this;
      this.createDialog(args);
      var editContent = this.tableDlgContent(args);
      var update = this.l10n.getConstant("dialogUpdate");
      var cancel = this.l10n.getConstant("dialogCancel");
      var editHeader = this.l10n.getConstant("tableEditHeader");
      this.editdlgObj.setProperties({
        height: "initial",
        width: "290px",
        content: editContent,
        header: editHeader,
        buttons: [
          {
            click: this.applyProperties.bind(this, args),
            buttonModel: { content: update, cssClass: "e-flat e-size-update " + this.parent.cssClass, isPrimary: true }
          },
          {
            click: function(e) {
              _this.cancelDialog(e);
            },
            buttonModel: { cssClass: "e-flat e-cancel " + this.parent.cssClass, content: cancel }
          }
        ],
        cssClass: this.editdlgObj.cssClass + " e-rte-edit-table-prop-dialog"
      });
      this.editdlgObj.element.style.maxHeight = "none";
      this.editdlgObj.content.querySelector("input").focus();
      this.hideTableQuickToolbar();
    };
    Table2.prototype.insertTableDialog = function(args) {
      var proxy = this.self ? this.self : this;
      if (proxy.popupObj) {
        proxy.popupObj.hide();
      }
      proxy.createDialog(args);
      var dlgContent = proxy.tableCellDlgContent();
      var insert = proxy.l10n.getConstant("dialogInsert");
      var cancel = proxy.l10n.getConstant("dialogCancel");
      if (isNullOrUndefined(proxy.editdlgObj)) {
        return;
      }
      proxy.editdlgObj.setProperties({
        height: "initial",
        width: "290px",
        content: dlgContent,
        buttons: [
          {
            click: proxy.customTable.bind(this, args),
            buttonModel: { content: insert, cssClass: "e-flat e-insert-table " + proxy.parent.cssClass, isPrimary: true }
          },
          {
            click: function(e) {
              proxy.cancelDialog(e);
            },
            buttonModel: { cssClass: "e-flat e-cancel " + proxy.parent.cssClass, content: cancel }
          }
        ]
      });
      if (!isNullOrUndefined(proxy.parent.cssClass)) {
        proxy.editdlgObj.setProperties({ cssClass: proxy.parent.cssClass });
      }
      proxy.editdlgObj.element.style.maxHeight = "none";
      proxy.editdlgObj.content.querySelector("input").focus();
    };
    Table2.prototype.tableCellDlgContent = function() {
      var tableColumn = this.l10n.getConstant("columns");
      var tableRow = this.l10n.getConstant("rows");
      var tableWrap = this.parent.createElement("div", { className: "e-cell-wrap " + this.parent.cssClass });
      var content = '<div class="e-rte-field ' + this.parent.cssClass + '"><input type="text"  data-role ="none" id="tableColumn" class="e-table-column ' + this.parent.cssClass + '"/></div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="tableRow" class="e-table-row ' + this.parent.cssClass + '" /></div>';
      var contentElem = parseHtml(content);
      tableWrap.appendChild(contentElem);
      this.columnTextBox = new NumericTextBox({
        format: "n0",
        min: 1,
        value: 3,
        placeholder: tableColumn,
        floatLabelType: "Auto",
        max: 50,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        cssClass: this.parent.cssClass
      });
      this.columnTextBox.isStringTemplate = true;
      this.columnTextBox.appendTo(tableWrap.querySelector("#tableColumn"));
      this.rowTextBox = new NumericTextBox({
        format: "n0",
        min: 1,
        value: 3,
        placeholder: tableRow,
        floatLabelType: "Auto",
        max: 50,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        cssClass: this.parent.cssClass
      });
      this.rowTextBox.isStringTemplate = true;
      this.rowTextBox.appendTo(tableWrap.querySelector("#tableRow"));
      return tableWrap;
    };
    Table2.prototype.clearDialogObj = function() {
      if (this.editdlgObj) {
        this.editdlgObj.destroy();
        detach(this.editdlgObj.element);
        this.editdlgObj = null;
      }
    };
    Table2.prototype.createDialog = function(args) {
      var _this = this;
      if (this.editdlgObj) {
        this.editdlgObj.hide({ returnValue: true });
        return;
      }
      var tableDialog = this.parent.createElement("div", {
        className: "e-rte-edit-table " + this.parent.cssClass,
        id: this.rteID + "_tabledialog"
      });
      this.parent.element.appendChild(tableDialog);
      var insert = this.l10n.getConstant("dialogInsert");
      var cancel = this.l10n.getConstant("dialogCancel");
      var header2 = this.l10n.getConstant("tabledialogHeader");
      var dialogModel = {
        header: header2,
        cssClass: CLS_RTE_ELEMENTS + " " + this.parent.cssClass,
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale,
        showCloseIcon: true,
        closeOnEscape: true,
        width: Browser.isDevice ? "290px" : "340px",
        height: "initial",
        position: { X: "center", Y: Browser.isDevice ? "center" : "top" },
        isModal: Browser.isDevice,
        buttons: [
          {
            buttonModel: { content: insert, cssClass: "e-flat e-insert-table " + this.parent.cssClass, isPrimary: true }
          },
          {
            click: function(e) {
              _this.cancelDialog(e);
            },
            buttonModel: { cssClass: "e-flat e-cancel " + this.parent.cssClass, content: cancel }
          }
        ],
        target: Browser.isDevice ? document.body : this.parent.element,
        animationSettings: { effect: "None" },
        close: function(event2) {
          _this.parent.isBlur = false;
          _this.editdlgObj.destroy();
          detach(_this.editdlgObj.element);
          _this.dialogRenderObj.close(event2);
          _this.editdlgObj = null;
        }
      };
      this.editdlgObj = this.dialogRenderObj.render(dialogModel);
      this.editdlgObj.appendTo(tableDialog);
      if (this.quickToolObj && this.quickToolObj.inlineQTBar && document.body.contains(this.quickToolObj.inlineQTBar.element)) {
        this.quickToolObj.inlineQTBar.hidePopup();
      }
    };
    Table2.prototype.customTable = function(args, e) {
      var proxy = this.self ? this.self : this;
      if (proxy.rowTextBox.value && proxy.columnTextBox.value) {
        var argument = Browser.isDevice || !isNullOrUndefined(args.args) && !isNullOrUndefined(args.args.originalEvent) && args.args.originalEvent.action === "insert-table" || proxy.parent.inlineMode.enable ? args : this;
        proxy.tableInsert(proxy.rowTextBox.value, proxy.columnTextBox.value, e, argument);
      }
    };
    Table2.prototype.cancelDialog = function(e) {
      this.parent.isBlur = false;
      this.editdlgObj.hide({ returnValue: true });
    };
    Table2.prototype.applyProperties = function(args, e) {
      var dialogEle = this.editdlgObj.element;
      var table = closest(args.selectNode[0], "table");
      table.style.width = dialogEle.querySelector(".e-table-width").value + "px";
      if (dialogEle.querySelector(".e-cell-padding").value !== "") {
        var tdElm = table.querySelectorAll("td");
        for (var i = 0; i < tdElm.length; i++) {
          var padVal = "";
          if (tdElm[i].style.padding === "") {
            padVal = tdElm[i].getAttribute("style") + " padding:" + dialogEle.querySelector(".e-cell-padding").value + "px;";
          } else {
            tdElm[i].style.padding = dialogEle.querySelector(".e-cell-padding").value + "px";
            padVal = tdElm[i].getAttribute("style");
          }
          tdElm[i].setAttribute("style", padVal);
        }
      }
      table.cellSpacing = dialogEle.querySelector(".e-cell-spacing").value;
      if (!isNullOrUndefined(table.cellSpacing) || table.cellSpacing !== "0") {
        addClass([table], CLS_TABLE_BORDER);
      } else {
        removeClass([table], CLS_TABLE_BORDER);
      }
      this.parent.formatter.saveData();
      this.editdlgObj.hide({ returnValue: true });
    };
    Table2.prototype.tableDlgContent = function(e) {
      var selectNode = e.selectParent[0];
      var tableWidth = this.l10n.getConstant("tableWidth");
      var cellPadding = this.l10n.getConstant("cellpadding");
      var cellSpacing = this.l10n.getConstant("cellspacing");
      var tableWrap = this.parent.createElement("div", { className: "e-table-sizewrap " + this.parent.cssClass });
      var widthVal = closest(selectNode, "table").getClientRects()[0].width;
      var padVal = closest(selectNode, "td").style.padding;
      var brdSpcVal = closest(selectNode, "table").getAttribute("cellspacing");
      var content = '<div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="tableWidth" class="e-table-width ' + this.parent.cssClass + '"  /></div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="cellPadding" class="e-cell-padding ' + this.parent.cssClass + '" /> </div><div class="e-rte-field ' + this.parent.cssClass + '"><input type="text" data-role ="none" id="cellSpacing" class="e-cell-spacing ' + this.parent.cssClass + '" /></div>';
      var contentElem = parseHtml(content);
      tableWrap.appendChild(contentElem);
      this.tableWidthNum = new NumericTextBox({
        format: "n0",
        min: 0,
        value: widthVal,
        placeholder: tableWidth,
        floatLabelType: "Auto",
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale
      });
      this.tableWidthNum.isStringTemplate = true;
      this.tableWidthNum.appendTo(tableWrap.querySelector("#tableWidth"));
      this.tableCellPadding = new NumericTextBox({
        format: "n0",
        min: 0,
        // eslint-disable-next-line
        value: padVal !== "" ? parseInt(padVal, null) : 0,
        placeholder: cellPadding,
        floatLabelType: "Auto",
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale
      });
      this.tableCellPadding.isStringTemplate = true;
      this.tableCellPadding.appendTo(tableWrap.querySelector("#cellPadding"));
      this.tableCellSpacing = new NumericTextBox({
        format: "n0",
        min: 0,
        // eslint-disable-next-line
        value: brdSpcVal !== "" && !isNullOrUndefined(brdSpcVal) ? parseInt(brdSpcVal, null) : 0,
        placeholder: cellSpacing,
        floatLabelType: "Auto",
        enableRtl: this.parent.enableRtl,
        locale: this.parent.locale
      });
      this.tableCellSpacing.isStringTemplate = true;
      this.tableCellSpacing.appendTo(tableWrap.querySelector("#cellSpacing"));
      return tableWrap;
    };
    Table2.prototype.destroy = function() {
      this.removeEventListener();
    };
    Table2.prototype.moduleDestroy = function() {
      this.parent = null;
    };
    Table2.prototype.getModuleName = function() {
      return "table";
    };
    return Table2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/renderer/dialog-renderer.js
var DialogRenderer = (
  /** @class */
  function() {
    function DialogRenderer2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    DialogRenderer2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on(moduleDestroy, this.moduleDestroy, this);
      this.parent.on(destroy, this.removeEventListener, this);
    };
    DialogRenderer2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off(destroy, this.removeEventListener);
      this.parent.off(moduleDestroy, this.moduleDestroy);
    };
    DialogRenderer2.prototype.render = function(e) {
      var dlgObj;
      e.beforeOpen = this.beforeOpen.bind(this);
      e.open = this.open.bind(this);
      if (isNullOrUndefined(e.close)) {
        e.close = this.close.bind(this);
      }
      e.beforeClose = this.beforeClose.bind(this);
      dlgObj = new Dialog(e);
      dlgObj.isStringTemplate = true;
      return dlgObj;
    };
    DialogRenderer2.prototype.beforeOpen = function(args) {
      this.parent.trigger(beforeDialogOpen, args, this.beforeOpenCallback.bind(this, args));
    };
    DialogRenderer2.prototype.beforeOpenCallback = function(args) {
      if (args.cancel) {
        this.parent.notify(clearDialogObj, null);
      }
    };
    DialogRenderer2.prototype.open = function(args) {
      this.parent.trigger(dialogOpen, args);
    };
    DialogRenderer2.prototype.beforeClose = function(args) {
      this.parent.trigger(beforeDialogClose, args, function(closeArgs) {
        if (!closeArgs.cancel) {
          if (closeArgs.container.classList.contains("e-popup-close")) {
            closeArgs.cancel = true;
          }
        }
      });
    };
    DialogRenderer2.prototype.close = function(args) {
      this.parent.trigger(dialogClose, args);
    };
    DialogRenderer2.prototype.moduleDestroy = function() {
      this.parent = null;
    };
    return DialogRenderer2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/base/interface.js
var executeGroup = {
  "bold": {
    command: "Style",
    subCommand: "Bold",
    value: "strong"
  },
  "italic": {
    command: "Style",
    subCommand: "Italic",
    value: "em"
  },
  "underline": {
    command: "Style",
    subCommand: "Underline",
    value: "span"
  },
  "strikeThrough": {
    command: "Style",
    subCommand: "StrikeThrough",
    value: "span"
  },
  "insertCode": {
    command: "Formats",
    subCommand: "Pre",
    value: "pre"
  },
  "superscript": {
    command: "Effects",
    subCommand: "SuperScript",
    value: "sup"
  },
  "subscript": {
    command: "Effects",
    subCommand: "SubScript",
    value: "sub"
  },
  "uppercase": {
    command: "Casing",
    subCommand: "UpperCase"
  },
  "lowercase": {
    command: "Casing",
    subCommand: "LowerCase"
  },
  "fontColor": {
    command: "font",
    subCommand: "fontcolor",
    value: "#ff0000"
  },
  "fontName": {
    command: "font",
    subCommand: "fontname",
    value: "Segoe UI"
  },
  "fontSize": {
    command: "font",
    subCommand: "fontsize",
    value: "10pt"
  },
  "backColor": {
    command: "font",
    subCommand: "backgroundcolor",
    value: "#ffff00"
  },
  "justifyCenter": {
    command: "Alignments",
    subCommand: "JustifyCenter"
  },
  "justifyFull": {
    command: "Alignments",
    subCommand: "JustifyFull"
  },
  "justifyLeft": {
    command: "Alignments",
    subCommand: "JustifyLeft"
  },
  "justifyRight": {
    command: "Alignments",
    subCommand: "JustifyRight"
  },
  "undo": {
    command: "Actions",
    subCommand: "Undo"
  },
  "redo": {
    command: "Actions",
    subCommand: "Redo"
  },
  "createLink": {
    command: "Links",
    subCommand: "createLink"
  },
  "editLink": {
    command: "Links",
    subCommand: "createLink"
  },
  "createImage": {
    command: "Images",
    subCommand: "Images"
  },
  "formatBlock": {
    command: "Formats",
    value: "P"
  },
  "heading": {
    command: "Formats",
    value: "H1"
  },
  "indent": {
    command: "Indents",
    subCommand: "Indent"
  },
  "outdent": {
    command: "Indents",
    subCommand: "Outdent"
  },
  "insertHTML": {
    command: "InsertHTML",
    subCommand: "InsertHTML",
    value: ""
  },
  "insertText": {
    command: "InsertText",
    subCommand: "InsertText",
    value: ""
  },
  "insertHorizontalRule": {
    command: "InsertHTML",
    subCommand: "InsertHTML",
    value: "<hr/>"
  },
  "insertImage": {
    command: "Images",
    subCommand: "Image"
  },
  "insertAudio": {
    command: "Audios",
    subCommand: "Audio"
  },
  "insertVideo": {
    command: "Videos",
    subCommand: "Video"
  },
  "editImage": {
    command: "Images",
    subCommand: "Image"
  },
  "insertTable": {
    command: "Table",
    subCommand: "CreateTable"
  },
  "insertBrOnReturn": {
    command: "InsertHTML",
    subCommand: "InsertHTML",
    value: "<br/>"
  },
  "insertOrderedList": {
    command: "Lists",
    value: "OL"
  },
  "insertUnorderedList": {
    command: "Lists",
    value: "UL"
  },
  "insertParagraph": {
    command: "Formats",
    value: "P"
  },
  "removeFormat": {
    command: "Clear",
    subCommand: "ClearFormat"
  },
  "copyFormatPainter": {
    command: "FormatPainter",
    value: "format-copy"
  },
  "applyFormatPainter": {
    command: "FormatPainter",
    value: "format-paste"
  },
  "escapeFormatPainter": {
    command: "FormatPainter",
    value: "escape"
  }
};

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/models/toolbar-settings.js
var __extends16 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate13 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ToolbarSettings2 = (
  /** @class */
  function(_super) {
    __extends16(ToolbarSettings3, _super);
    function ToolbarSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property(true)
    ], ToolbarSettings3.prototype, "enable", void 0);
    __decorate13([
      Property(true)
    ], ToolbarSettings3.prototype, "enableFloating", void 0);
    __decorate13([
      Property(ToolbarType.Expand)
    ], ToolbarSettings3.prototype, "type", void 0);
    __decorate13([
      Property(predefinedItems)
    ], ToolbarSettings3.prototype, "items", void 0);
    __decorate13([
      Property({})
    ], ToolbarSettings3.prototype, "itemConfigs", void 0);
    return ToolbarSettings3;
  }(ChildProperty)
);
var ImageSettings = (
  /** @class */
  function(_super) {
    __extends16(ImageSettings2, _super);
    function ImageSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property([".jpeg", ".jpg", ".png"])
    ], ImageSettings2.prototype, "allowedTypes", void 0);
    __decorate13([
      Property("inline")
    ], ImageSettings2.prototype, "display", void 0);
    __decorate13([
      Property("Blob")
    ], ImageSettings2.prototype, "saveFormat", void 0);
    __decorate13([
      Property("auto")
    ], ImageSettings2.prototype, "width", void 0);
    __decorate13([
      Property("auto")
    ], ImageSettings2.prototype, "height", void 0);
    __decorate13([
      Property(null)
    ], ImageSettings2.prototype, "saveUrl", void 0);
    __decorate13([
      Property(null)
    ], ImageSettings2.prototype, "path", void 0);
    __decorate13([
      Property(true)
    ], ImageSettings2.prototype, "resize", void 0);
    __decorate13([
      Property(null)
    ], ImageSettings2.prototype, "removeUrl", void 0);
    __decorate13([
      Property(0)
    ], ImageSettings2.prototype, "minWidth", void 0);
    __decorate13([
      Property(null)
    ], ImageSettings2.prototype, "maxWidth", void 0);
    __decorate13([
      Property(0)
    ], ImageSettings2.prototype, "minHeight", void 0);
    __decorate13([
      Property(null)
    ], ImageSettings2.prototype, "maxHeight", void 0);
    __decorate13([
      Property(false)
    ], ImageSettings2.prototype, "resizeByPercent", void 0);
    return ImageSettings2;
  }(ChildProperty)
);
var AudioSettings = (
  /** @class */
  function(_super) {
    __extends16(AudioSettings2, _super);
    function AudioSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property([".wav", ".mp3", ".m4a", ".wma"])
    ], AudioSettings2.prototype, "allowedTypes", void 0);
    __decorate13([
      Property("Inline")
    ], AudioSettings2.prototype, "layoutOption", void 0);
    __decorate13([
      Property("Blob")
    ], AudioSettings2.prototype, "saveFormat", void 0);
    __decorate13([
      Property(null)
    ], AudioSettings2.prototype, "saveUrl", void 0);
    __decorate13([
      Property(null)
    ], AudioSettings2.prototype, "removeUrl", void 0);
    __decorate13([
      Property(null)
    ], AudioSettings2.prototype, "path", void 0);
    return AudioSettings2;
  }(ChildProperty)
);
var VideoSettings = (
  /** @class */
  function(_super) {
    __extends16(VideoSettings2, _super);
    function VideoSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property([".mp4", ".mov", ".wmv", ".avi"])
    ], VideoSettings2.prototype, "allowedTypes", void 0);
    __decorate13([
      Property("Inline")
    ], VideoSettings2.prototype, "layoutOption", void 0);
    __decorate13([
      Property("Blob")
    ], VideoSettings2.prototype, "saveFormat", void 0);
    __decorate13([
      Property("auto")
    ], VideoSettings2.prototype, "width", void 0);
    __decorate13([
      Property("auto")
    ], VideoSettings2.prototype, "height", void 0);
    __decorate13([
      Property(null)
    ], VideoSettings2.prototype, "saveUrl", void 0);
    __decorate13([
      Property(null)
    ], VideoSettings2.prototype, "path", void 0);
    __decorate13([
      Property(true)
    ], VideoSettings2.prototype, "resize", void 0);
    __decorate13([
      Property(null)
    ], VideoSettings2.prototype, "removeUrl", void 0);
    __decorate13([
      Property(0)
    ], VideoSettings2.prototype, "minWidth", void 0);
    __decorate13([
      Property(null)
    ], VideoSettings2.prototype, "maxWidth", void 0);
    __decorate13([
      Property(0)
    ], VideoSettings2.prototype, "minHeight", void 0);
    __decorate13([
      Property(null)
    ], VideoSettings2.prototype, "maxHeight", void 0);
    __decorate13([
      Property(false)
    ], VideoSettings2.prototype, "resizeByPercent", void 0);
    return VideoSettings2;
  }(ChildProperty)
);
var FileManagerSettings = (
  /** @class */
  function(_super) {
    __extends16(FileManagerSettings2, _super);
    function FileManagerSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Event()
    ], FileManagerSettings2.prototype, "beforeSend", void 0);
    __decorate13([
      Complex({ getImageUrl: null, url: null, uploadUrl: null }, AjaxSettings)
    ], FileManagerSettings2.prototype, "ajaxSettings", void 0);
    __decorate13([
      Property(false)
    ], FileManagerSettings2.prototype, "allowDragAndDrop", void 0);
    __decorate13([
      Complex({ visible: true, file: ["Open", "|", "Cut", "Copy", "|", "Delete", "Rename", "|", "Details"], folder: ["Open", "|", "Cut", "Copy", "Paste", "|", "Delete", "Rename", "|", "Details"], layout: ["SortBy", "View", "Refresh", "|", "Paste", "|", "NewFolder", "Upload", "|", "Details", "|", "SelectAll"] }, ContextMenuSettings)
    ], FileManagerSettings2.prototype, "contextMenuSettings", void 0);
    __decorate13([
      Property("")
    ], FileManagerSettings2.prototype, "cssClass", void 0);
    __decorate13([
      Complex({}, DetailsViewSettings)
    ], FileManagerSettings2.prototype, "detailsViewSettings", void 0);
    __decorate13([
      Property(false)
    ], FileManagerSettings2.prototype, "enable", void 0);
    __decorate13([
      Complex({ maxWidth: "650px", minWidth: "240px", visible: true }, NavigationPaneSettings)
    ], FileManagerSettings2.prototype, "navigationPaneSettings", void 0);
    __decorate13([
      Property("/")
    ], FileManagerSettings2.prototype, "path", void 0);
    __decorate13([
      Property(null)
    ], FileManagerSettings2.prototype, "rootAliasName", void 0);
    __decorate13([
      Complex({}, SearchSettings)
    ], FileManagerSettings2.prototype, "searchSettings", void 0);
    __decorate13([
      Property(true)
    ], FileManagerSettings2.prototype, "showFileExtension", void 0);
    __decorate13([
      Property(false)
    ], FileManagerSettings2.prototype, "showHiddenItems", void 0);
    __decorate13([
      Property(true)
    ], FileManagerSettings2.prototype, "showThumbnail", void 0);
    __decorate13([
      Property("Ascending")
    ], FileManagerSettings2.prototype, "sortOrder", void 0);
    __decorate13([
      Complex({ visible: true, items: ["NewFolder", "Upload", "Cut", "Copy", "Paste", "Delete", "Download", "Rename", "SortBy", "Refresh", "Selection", "View", "Details"] }, ToolbarSettings)
    ], FileManagerSettings2.prototype, "toolbarSettings", void 0);
    __decorate13([
      Complex({ autoUpload: true, minFileSize: 0, maxFileSize: 3e7, allowedExtensions: "", autoClose: false }, UploadSettings)
    ], FileManagerSettings2.prototype, "uploadSettings", void 0);
    __decorate13([
      Property("LargeIcons")
    ], FileManagerSettings2.prototype, "view", void 0);
    return FileManagerSettings2;
  }(ChildProperty)
);
var TableSettings = (
  /** @class */
  function(_super) {
    __extends16(TableSettings2, _super);
    function TableSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property("100%")
    ], TableSettings2.prototype, "width", void 0);
    __decorate13([
      Property(TableStyleItems)
    ], TableSettings2.prototype, "styles", void 0);
    __decorate13([
      Property(true)
    ], TableSettings2.prototype, "resize", void 0);
    __decorate13([
      Property(0)
    ], TableSettings2.prototype, "minWidth", void 0);
    __decorate13([
      Property(null)
    ], TableSettings2.prototype, "maxWidth", void 0);
    return TableSettings2;
  }(ChildProperty)
);
var QuickToolbarSettings = (
  /** @class */
  function(_super) {
    __extends16(QuickToolbarSettings2, _super);
    function QuickToolbarSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property(true)
    ], QuickToolbarSettings2.prototype, "enable", void 0);
    __decorate13([
      Property(false)
    ], QuickToolbarSettings2.prototype, "showOnRightClick", void 0);
    __decorate13([
      Property("hide")
    ], QuickToolbarSettings2.prototype, "actionOnScroll", void 0);
    __decorate13([
      Property(["Open", "Edit", "UnLink"])
    ], QuickToolbarSettings2.prototype, "link", void 0);
    __decorate13([
      Property(["Replace", "Align", "Caption", "Remove", "-", "InsertLink", "OpenImageLink", "EditImageLink", "RemoveImageLink", "Display", "AltText", "Dimension"])
    ], QuickToolbarSettings2.prototype, "image", void 0);
    __decorate13([
      Property(["AudioReplace", "AudioRemove", "AudioLayoutOption"])
    ], QuickToolbarSettings2.prototype, "audio", void 0);
    __decorate13([
      Property(["VideoReplace", "VideoAlign", "VideoRemove", "VideoLayoutOption", "VideoDimension"])
    ], QuickToolbarSettings2.prototype, "video", void 0);
    __decorate13([
      Property(["Cut", "Copy", "Paste"])
    ], QuickToolbarSettings2.prototype, "text", void 0);
    __decorate13([
      Property(["TableHeader", "TableRows", "TableColumns", "BackgroundColor", "-", "TableRemove", "Alignments", "TableCellVerticalAlign", "Styles"])
    ], QuickToolbarSettings2.prototype, "table", void 0);
    return QuickToolbarSettings2;
  }(ChildProperty)
);
var FormatPainterSettings = (
  /** @class */
  function(_super) {
    __extends16(FormatPainterSettings2, _super);
    function FormatPainterSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property("b; em; font; sub; sup; kbd; i; s; u; code; strong; span; p; div; h1; h2; h3; h4; h5; h6; blockquote; ol; ul; li; pre;")
    ], FormatPainterSettings2.prototype, "allowedFormats", void 0);
    __decorate13([
      Property(null)
    ], FormatPainterSettings2.prototype, "deniedFormats", void 0);
    return FormatPainterSettings2;
  }(ChildProperty)
);
var EmojiSettings = (
  /** @class */
  function(_super) {
    __extends16(EmojiSettings2, _super);
    function EmojiSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property(defaultEmojiIcons)
    ], EmojiSettings2.prototype, "iconsSet", void 0);
    __decorate13([
      Property(true)
    ], EmojiSettings2.prototype, "showSearchBox", void 0);
    return EmojiSettings2;
  }(ChildProperty)
);
var PasteCleanupSettings = (
  /** @class */
  function(_super) {
    __extends16(PasteCleanupSettings2, _super);
    function PasteCleanupSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property(false)
    ], PasteCleanupSettings2.prototype, "prompt", void 0);
    __decorate13([
      Property(null)
    ], PasteCleanupSettings2.prototype, "deniedAttrs", void 0);
    __decorate13([
      Property(["background", "background-color", "border", "border-bottom", "border-left", "border-radius", "border-right", "border-style", "border-top", "border-width", "clear", "color", "cursor", "direction", "display", "float", "font", "font-family", "font-size", "font-weight", "font-style", "height", "left", "line-height", "list-style-type", "margin", "margin-top", "margin-left", "margin-right", "margin-bottom", "max-height", "max-width", "min-height", "min-width", "overflow", "overflow-x", "overflow-y", "padding", "padding-bottom", "padding-left", "padding-right", "padding-top", "position", "right", "table-layout", "text-align", "text-decoration", "text-indent", "top", "vertical-align", "visibility", "white-space", "width"])
    ], PasteCleanupSettings2.prototype, "allowedStyleProps", void 0);
    __decorate13([
      Property(null)
    ], PasteCleanupSettings2.prototype, "deniedTags", void 0);
    __decorate13([
      Property(true)
    ], PasteCleanupSettings2.prototype, "keepFormat", void 0);
    __decorate13([
      Property(false)
    ], PasteCleanupSettings2.prototype, "plainText", void 0);
    return PasteCleanupSettings2;
  }(ChildProperty)
);
var FontFamily = (
  /** @class */
  function(_super) {
    __extends16(FontFamily2, _super);
    function FontFamily2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property(null)
    ], FontFamily2.prototype, "default", void 0);
    __decorate13([
      Property("65px")
    ], FontFamily2.prototype, "width", void 0);
    __decorate13([
      Property(fontFamily)
    ], FontFamily2.prototype, "items", void 0);
    return FontFamily2;
  }(ChildProperty)
);
var FontSize = (
  /** @class */
  function(_super) {
    __extends16(FontSize2, _super);
    function FontSize2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property(null)
    ], FontSize2.prototype, "default", void 0);
    __decorate13([
      Property("35px")
    ], FontSize2.prototype, "width", void 0);
    __decorate13([
      Property(fontSize)
    ], FontSize2.prototype, "items", void 0);
    return FontSize2;
  }(ChildProperty)
);
var Format = (
  /** @class */
  function(_super) {
    __extends16(Format2, _super);
    function Format2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property(null)
    ], Format2.prototype, "default", void 0);
    __decorate13([
      Property("65px")
    ], Format2.prototype, "width", void 0);
    __decorate13([
      Property(formatItems)
    ], Format2.prototype, "types", void 0);
    return Format2;
  }(ChildProperty)
);
var FontColor = (
  /** @class */
  function(_super) {
    __extends16(FontColor2, _super);
    function FontColor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property("#ff0000")
    ], FontColor2.prototype, "default", void 0);
    __decorate13([
      Property("Palette")
    ], FontColor2.prototype, "mode", void 0);
    __decorate13([
      Property(10)
    ], FontColor2.prototype, "columns", void 0);
    __decorate13([
      Property(fontColor)
    ], FontColor2.prototype, "colorCode", void 0);
    __decorate13([
      Property(false)
    ], FontColor2.prototype, "modeSwitcher", void 0);
    return FontColor2;
  }(ChildProperty)
);
var BackgroundColor = (
  /** @class */
  function(_super) {
    __extends16(BackgroundColor2, _super);
    function BackgroundColor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property("#ffff00")
    ], BackgroundColor2.prototype, "default", void 0);
    __decorate13([
      Property("Palette")
    ], BackgroundColor2.prototype, "mode", void 0);
    __decorate13([
      Property(10)
    ], BackgroundColor2.prototype, "columns", void 0);
    __decorate13([
      Property(backgroundColor)
    ], BackgroundColor2.prototype, "colorCode", void 0);
    __decorate13([
      Property(false)
    ], BackgroundColor2.prototype, "modeSwitcher", void 0);
    return BackgroundColor2;
  }(ChildProperty)
);
var NumberFormatList = (
  /** @class */
  function(_super) {
    __extends16(NumberFormatList2, _super);
    function NumberFormatList2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property(numberFormatList)
    ], NumberFormatList2.prototype, "types", void 0);
    return NumberFormatList2;
  }(ChildProperty)
);
var BulletFormatList = (
  /** @class */
  function(_super) {
    __extends16(BulletFormatList2, _super);
    function BulletFormatList2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate13([
      Property(bulletFormatList)
    ], BulletFormatList2.prototype, "types", void 0);
    return BulletFormatList2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/models/iframe-settings.js
var __extends17 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate14 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Resources = (
  /** @class */
  function(_super) {
    __extends17(Resources2, _super);
    function Resources2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate14([
      Property([])
    ], Resources2.prototype, "styles", void 0);
    __decorate14([
      Property([])
    ], Resources2.prototype, "scripts", void 0);
    return Resources2;
  }(ChildProperty)
);
var IFrameSettings = (
  /** @class */
  function(_super) {
    __extends17(IFrameSettings2, _super);
    function IFrameSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate14([
      Property(false)
    ], IFrameSettings2.prototype, "enable", void 0);
    __decorate14([
      Property(null)
    ], IFrameSettings2.prototype, "attributes", void 0);
    __decorate14([
      Complex({}, Resources)
    ], IFrameSettings2.prototype, "resources", void 0);
    return IFrameSettings2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/models/inline-mode.js
var __extends18 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate15 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var InlineMode = (
  /** @class */
  function(_super) {
    __extends18(InlineMode2, _super);
    function InlineMode2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate15([
      Property(false)
    ], InlineMode2.prototype, "enable", void 0);
    __decorate15([
      Property(true)
    ], InlineMode2.prototype, "onSelection", void 0);
    return InlineMode2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/actions/enter-key.js
var EnterKeyAction = (
  /** @class */
  function() {
    function EnterKeyAction2(parent) {
      this.parent = parent;
      this.addEventListener();
    }
    EnterKeyAction2.prototype.addEventListener = function() {
      this.parent.on(enterHandler, this.enterHandler, this);
      this.parent.on(destroy, this.destroy, this);
      this.parent.on(moduleDestroy, this.moduleDestroy, this);
    };
    EnterKeyAction2.prototype.destroy = function() {
      this.removeEventListener();
    };
    EnterKeyAction2.prototype.moduleDestroy = function() {
      this.parent = null;
    };
    EnterKeyAction2.prototype.removeEventListener = function() {
      this.parent.off(enterHandler, this.enterHandler);
      this.parent.off(destroy, this.destroy);
      this.parent.off(moduleDestroy, this.moduleDestroy);
    };
    EnterKeyAction2.prototype.getRangeNode = function() {
      this.range = this.parent.getRange();
      this.startNode = this.range.startContainer.nodeName === "#text" ? this.range.startContainer.parentElement : this.range.startContainer;
      this.endNode = this.range.endContainer.nodeName === "#text" ? this.range.endContainer.parentElement : this.range.endContainer;
    };
    EnterKeyAction2.prototype.enterHandler = function(e) {
      var _this = this;
      this.getRangeNode();
      var isTableEnter = true;
      this.formatTags = ["h1", "h2", "h3", "h4", "h5", "h6", "blockquote"];
      if (!isNullOrUndefined(this.startNode.closest("TABLE")) && !isNullOrUndefined(this.endNode.closest("TABLE"))) {
        isTableEnter = false;
        var curElement = this.startNode;
        var blockElement = curElement;
        while (!this.parent.formatter.editorManager.domNode.isBlockNode(curElement)) {
          curElement = curElement.parentElement;
          blockElement = curElement;
        }
        isTableEnter = blockElement.tagName === "TD" || blockElement.tagName === "TBODY" ? false : true;
      }
      if (e.args.which === 13 && (!Browser.isDevice ? e.args.code === "Enter" : e.args.key === "Enter")) {
        if (isNullOrUndefined(this.startNode.closest("LI, UL, OL")) && isNullOrUndefined(this.endNode.closest("LI, UL, OL")) && isTableEnter && isNullOrUndefined(this.startNode.closest("PRE")) && isNullOrUndefined(this.endNode.closest("PRE"))) {
          var shiftKey_1 = e.args.shiftKey;
          var actionBeginArgs = {
            cancel: false,
            name: actionBegin,
            requestType: shiftKey_1 ? "ShiftEnterAction" : "EnterAction",
            originalEvent: e.args
          };
          this.parent.trigger(actionBegin, actionBeginArgs, function(actionBeginArgs2) {
            if (!actionBeginArgs2.cancel) {
              if (!(_this.range.startOffset === _this.range.endOffset && _this.range.startContainer === _this.range.endContainer)) {
                if (!(_this.range.startContainer.nodeName === "SPAN" && (_this.range.startContainer.classList.contains("e-video-wrap") || _this.range.startContainer.classList.contains("e-audio-wrap")))) {
                  _this.range.deleteContents();
                }
                if (_this.range.startContainer.nodeName === "#text" && _this.range.startContainer.textContent.length === 0 && _this.range.startContainer.parentElement !== _this.parent.inputElement) {
                  if (_this.parent.enterKey === "BR") {
                    _this.range.startContainer.parentElement.innerHTML = "&#8203;";
                  } else {
                    _this.range.startContainer.parentElement.innerHTML = "<br>";
                  }
                } else if (_this.range.startContainer === _this.parent.inputElement && _this.range.startContainer.innerHTML === "") {
                  _this.range.startContainer.innerHTML = "<br>";
                  var focusElem = _this.range.startContainer.childNodes[_this.range.startOffset];
                  _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), focusElem, 0);
                } else if (_this.parent.inputElement === _this.range.startContainer) {
                  var focusElem = _this.range.startContainer.childNodes[_this.range.startOffset];
                  if (focusElem.nodeName === "#text" && focusElem.textContent.length === 0) {
                    _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), focusElem, focusElem.textContent.length === 0 ? 0 : focusElem.previousSibling.textContent.length);
                  } else {
                    _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), focusElem, focusElem.textContent.length >= 0 ? 0 : 1);
                    if (focusElem.previousSibling.textContent.length === 0) {
                      detach(focusElem.previousSibling);
                      if (!shiftKey_1) {
                        var currentFocusElem = !isNullOrUndefined(focusElem.lastChild) ? focusElem.lastChild : focusElem;
                        while (!isNullOrUndefined(currentFocusElem) && currentFocusElem.nodeName !== "#text" && currentFocusElem.nodeName !== "BR") {
                          currentFocusElem = currentFocusElem.lastChild;
                        }
                        if (currentFocusElem.nodeName !== "BR" && currentFocusElem.parentElement.textContent.length === 0 && currentFocusElem.parentElement.innerHTML.length === 0 && currentFocusElem.parentElement.nodeName !== "BR") {
                          currentFocusElem.parentElement.appendChild(_this.parent.createElement("BR"));
                        }
                        _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), currentFocusElem.nodeName === "BR" ? currentFocusElem : currentFocusElem.parentElement, currentFocusElem.parentElement.textContent.length >= 0 || currentFocusElem.nodeName === "BR" ? 0 : 1);
                      }
                    } else if (focusElem.textContent.length === 0) {
                      var currentFocusElem = focusElem.previousSibling.nodeName === "#text" ? focusElem.previousSibling : focusElem.previousSibling.lastChild;
                      while (!isNullOrUndefined(currentFocusElem) && currentFocusElem.nodeName !== "#text") {
                        currentFocusElem = currentFocusElem.lastChild;
                      }
                      _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), currentFocusElem, currentFocusElem.textContent.length);
                      detach(focusElem);
                    } else if (_this.parent.enterKey !== "BR" && focusElem.previousSibling.textContent.length !== 0 && focusElem.textContent.length !== 0) {
                      e.args.preventDefault();
                      return;
                    }
                  }
                  _this.getRangeNode();
                }
              }
              if (_this.range.startContainer === _this.range.endContainer && _this.range.startOffset === _this.range.endOffset && _this.range.startContainer === _this.parent.inputElement) {
                if (!(_this.parent.inputElement.childNodes.length === 1 && _this.parent.inputElement.childNodes[0].nodeName === "TABLE")) {
                  if (isNullOrUndefined(_this.range.startContainer.childNodes[_this.range.startOffset])) {
                    var currentLastElem = _this.range.startContainer.childNodes[_this.range.startOffset - 1];
                    while (currentLastElem.lastChild !== null && currentLastElem.nodeName !== "#text") {
                      currentLastElem = currentLastElem.lastChild;
                    }
                    _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), currentLastElem, currentLastElem.nodeName === "BR" ? 0 : currentLastElem.textContent.length);
                  } else {
                    _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), _this.range.startContainer.childNodes[_this.range.startOffset], 0);
                  }
                }
                _this.getRangeNode();
              }
              if (_this.parent.enterKey === "P" && !shiftKey_1 || _this.parent.enterKey === "DIV" && !shiftKey_1 || _this.parent.shiftEnterKey === "P" && shiftKey_1 || _this.parent.shiftEnterKey === "DIV" && shiftKey_1) {
                if (_this.range.startOffset === 1 && _this.parent.inputElement.childNodes.length === 1 && _this.parent.inputElement.childNodes[0].nodeName === "TABLE") {
                  var newElem = _this.createInsertElement(shiftKey_1);
                  newElem.appendChild(_this.parent.createElement("BR"));
                  _this.parent.inputElement.appendChild(newElem);
                  _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), newElem, 0);
                } else {
                  var nearBlockNode = void 0;
                  if (isTableEnter && _this.parent.formatter.editorManager.domNode.isBlockNode(_this.startNode)) {
                    nearBlockNode = _this.startNode;
                  } else {
                    nearBlockNode = _this.parent.formatter.editorManager.domNode.blockParentNode(_this.startNode);
                  }
                  var isMediaNode = false;
                  var isFocusedFirst = false;
                  if (_this.range.startOffset !== 0 && _this.range.endOffset !== 0 && _this.range.startContainer === _this.range.endContainer && !(!isNullOrUndefined(nearBlockNode.childNodes[0]) && (nearBlockNode.childNodes[0].nodeName === "IMG" || nearBlockNode.querySelectorAll("img, audio, video").length > 0))) {
                    var startNodeText = _this.range.startContainer.textContent;
                    var splitFirstText = startNodeText.substring(0, _this.range.startOffset);
                    if (splitFirstText.charCodeAt(_this.range.startOffset - 1) !== 160 && splitFirstText.trim().length === 0) {
                      isFocusedFirst = true;
                    }
                  } else if (_this.range.startOffset === 0 && _this.range.endOffset === 0) {
                    isFocusedFirst = true;
                  }
                  _this.removeBRElement(nearBlockNode);
                  var fireFoxEnterAtMiddle = Browser.userAgent.indexOf("Firefox") !== -1 && _this.range.startOffset === 0 && _this.range.startContainer === _this.range.endContainer && _this.range.startContainer.nodeName === "#text" && !_this.parent.formatter.editorManager.domNode.isBlockNode(_this.range.startContainer.previousSibling) && _this.range.startContainer.parentElement === _this.range.startContainer.previousSibling.parentElement;
                  if (!fireFoxEnterAtMiddle && (_this.range.startOffset === 0 && _this.range.endOffset === 0 || isFocusedFirst) && !(!isNullOrUndefined(_this.range.startContainer.previousSibling) && (_this.range.startContainer.previousSibling.nodeName === "IMG" || _this.range.startContainer.previousSibling.nodeName === "BR"))) {
                    var isNearBlockLengthZero = void 0;
                    var newElem = void 0;
                    if (!isNullOrUndefined(_this.range.startContainer.childNodes) && _this.range.startContainer.textContent.length === 0 && (_this.range.startContainer.querySelectorAll("img, audio, video").length > 0 || _this.range.startContainer.nodeName === "IMG" || _this.range.startContainer.nodeName === "TABLE")) {
                      newElem = _this.createInsertElement(shiftKey_1);
                      isMediaNode = true;
                      isNearBlockLengthZero = false;
                    } else {
                      if (nearBlockNode.textContent.trim().length !== 0 || nearBlockNode.childNodes[0].nodeName === "IMG" || nearBlockNode.textContent.trim() === "" && nearBlockNode.querySelectorAll("img, audio, video").length > 0) {
                        if (_this.range.startOffset === _this.range.endOffset && _this.range.startOffset !== 0) {
                          newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, nearBlockNode, false).cloneNode(true);
                        } else {
                          newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, nearBlockNode, true).cloneNode(true);
                          isMediaNode = true;
                        }
                        isNearBlockLengthZero = false;
                      } else {
                        newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, nearBlockNode, true).cloneNode(true);
                        isNearBlockLengthZero = true;
                      }
                    }
                    var insertElem = void 0;
                    if (_this.formatTags.indexOf(newElem.nodeName.toLocaleLowerCase()) < 0) {
                      insertElem = _this.createInsertElement(shiftKey_1);
                    } else {
                      insertElem = _this.parent.createElement(newElem.nodeName);
                    }
                    while (newElem.firstChild) {
                      insertElem.appendChild(newElem.firstChild);
                    }
                    nearBlockNode.parentElement.insertBefore(insertElem, nearBlockNode);
                    if (!isNearBlockLengthZero) {
                      var currentFocusElem = insertElem;
                      var finalFocusElem = void 0;
                      if (_this.range.startOffset === _this.range.endOffset && _this.range.startOffset !== 0) {
                        while (!isNullOrUndefined(currentFocusElem) && currentFocusElem.nodeName !== "#text" && currentFocusElem.nodeName !== "BR") {
                          finalFocusElem = currentFocusElem;
                          currentFocusElem = currentFocusElem.lastChild;
                        }
                      } else {
                        finalFocusElem = currentFocusElem;
                      }
                      finalFocusElem.innerHTML = "<br>";
                      if (!isMediaNode) {
                        detach(nearBlockNode);
                      }
                    }
                    _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), insertElem.nextElementSibling, 0);
                  } else if (nearBlockNode.textContent.length === 0 && !(!isNullOrUndefined(nearBlockNode.childNodes[0]) && nearBlockNode.childNodes[0].nodeName === "IMG")) {
                    if (!isNullOrUndefined(nearBlockNode.children[0]) && nearBlockNode.children[0].tagName !== "BR") {
                      var newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, nearBlockNode, false).cloneNode(true);
                      _this.parent.formatter.editorManager.domNode.insertAfter(newElem, nearBlockNode);
                      _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), newElem, newElem.textContent.length >= 0 ? 0 : 1);
                    } else {
                      var insertElem = _this.createInsertElement(shiftKey_1);
                      insertElem.innerHTML = "<br>";
                      _this.parent.formatter.editorManager.domNode.insertAfter(insertElem, nearBlockNode);
                      _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), insertElem, 0);
                    }
                  } else if (_this.range.startContainer === _this.range.endContainer && _this.range.startContainer.nodeName === "SPAN" && (_this.range.startContainer.classList.contains("e-video-wrap") || _this.range.startContainer.classList.contains("e-audio-wrap"))) {
                    if (nearBlockNode.textContent.trim().length > 0) {
                      var newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, nearBlockNode, true);
                      var audioVideoElem = !isNullOrUndefined(newElem.previousSibling.querySelector(".e-video-wrap")) ? newElem.previousSibling.querySelector(".e-video-wrap") : newElem.previousSibling.querySelector(".e-audio-wrap");
                      var isBRInserted = false;
                      var lastNode = audioVideoElem.previousSibling;
                      while (!isNullOrUndefined(lastNode) && lastNode.nodeName !== "#text") {
                        lastNode = lastNode.lastChild;
                      }
                      if (isNullOrUndefined(lastNode)) {
                        var brElm = _this.parent.createElement("br");
                        audioVideoElem.parentElement.appendChild(brElm);
                        isBRInserted = true;
                      }
                      if (isBRInserted) {
                        _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), audioVideoElem.parentElement, 0);
                      } else {
                        _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), lastNode, lastNode.textContent.length);
                      }
                      detach(audioVideoElem);
                    } else {
                      var newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, nearBlockNode, true);
                      var focusElem = newElem.previousSibling;
                      while (!isNullOrUndefined(focusElem.firstChild)) {
                        detach(focusElem.firstChild);
                      }
                      var brElm = _this.parent.createElement("br");
                      focusElem.appendChild(brElm);
                      _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), focusElem, 0);
                    }
                    if (!isNullOrUndefined(_this.parent.audioModule)) {
                      _this.parent.audioModule.hideAudioQuickToolbar();
                    }
                    if (!isNullOrUndefined(_this.parent.videoModule)) {
                      _this.parent.videoModule.hideVideoQuickToolbar();
                    }
                  } else {
                    var newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, nearBlockNode, true);
                    if (!isNullOrUndefined(newElem.childNodes[0]) && newElem.childNodes[0].nodeName === "#text" && newElem.childNodes[0].textContent.length === 0) {
                      detach(newElem.childNodes[0]);
                    }
                    if (newElem.textContent.trim().length === 0) {
                      var brElm = _this.parent.createElement("br");
                      if (_this.startNode.nodeName === "A") {
                        var startParentElem = _this.startNode.parentElement;
                        _this.startNode.parentElement.insertBefore(brElm, _this.startNode);
                        detach(_this.startNode);
                        _this.startNode = startParentElem;
                      } else {
                        if (_this.startNode.nodeName !== "BR") {
                          _this.startNode.appendChild(brElm);
                        }
                      }
                      if (newElem.childNodes[0].textContent === "\n") {
                        detach(newElem.childNodes[0]);
                      }
                      _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), _this.startNode, 0);
                    }
                    if ((_this.parent.enterKey === "P" || _this.parent.enterKey === "DIV") && !shiftKey_1 || (_this.parent.shiftEnterKey === "DIV" || _this.parent.shiftEnterKey === "P") && shiftKey_1) {
                      var isHeadingTag = _this.formatTags.indexOf(newElem.nodeName.toLocaleLowerCase());
                      if (isHeadingTag < 0 || isHeadingTag >= 0 && newElem.textContent.trim().length === 0) {
                        var insertElm = _this.createInsertElement(shiftKey_1);
                        while (newElem.firstChild) {
                          insertElm.appendChild(newElem.firstChild);
                        }
                        _this.parent.formatter.editorManager.domNode.insertAfter(insertElm, newElem);
                        detach(newElem);
                        _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), _this.parent.formatter.editorManager.domNode.isBlockNode(_this.startNode) ? insertElm : _this.startNode, 0);
                      }
                    }
                  }
                }
                e.args.preventDefault();
              }
              if (_this.parent.enterKey === "BR" && !shiftKey_1 || _this.parent.shiftEnterKey === "BR" && shiftKey_1) {
                var currentParent = void 0;
                if (!_this.parent.formatter.editorManager.domNode.isBlockNode(_this.startNode)) {
                  var currentNode = _this.startNode;
                  var previousNode = currentNode;
                  while (!_this.parent.formatter.editorManager.domNode.isBlockNode(currentNode)) {
                    previousNode = currentNode;
                    currentNode = currentNode.parentElement;
                  }
                  currentParent = currentNode === _this.parent.inputElement ? previousNode : currentNode;
                } else {
                  currentParent = _this.startNode;
                }
                _this.removeBRElement(currentParent);
                var isEmptyBrInserted = false;
                var currentParentLastChild = currentParent.lastChild;
                while (!isNullOrUndefined(currentParentLastChild) && !(currentParentLastChild.nodeName === "#text" || currentParentLastChild.nodeName === "BR" || currentParentLastChild.nodeName === "IMG")) {
                  currentParentLastChild = currentParentLastChild.lastChild;
                }
                var isLastNodeLength = _this.range.startContainer === currentParentLastChild ? _this.range.startContainer.textContent.length : currentParent.textContent.length;
                var isImageElement = _this.range.startContainer.nodeName === "IMG" || _this.range.startContainer.childNodes.length > 0 && _this.range.startContainer.childNodes[_this.range.startOffset].nodeName === "IMG";
                if (currentParent !== _this.parent.inputElement && _this.parent.formatter.editorManager.domNode.isBlockNode(currentParent) && _this.range.startOffset === _this.range.endOffset && (_this.range.startOffset === isLastNodeLength || currentParent.textContent.trim().length === 0 && isImageElement)) {
                  var focusBRElem = _this.parent.createElement("br");
                  if (_this.range.startOffset === 0 && _this.range.startContainer.nodeName === "TABLE") {
                    _this.range.startContainer.parentElement.insertBefore(focusBRElem, _this.range.startContainer);
                  } else {
                    if (currentParentLastChild.nodeName === "BR" && currentParent.textContent.length === 0) {
                      _this.parent.formatter.editorManager.domNode.insertAfter(focusBRElem, currentParentLastChild);
                    } else if (_this.range.startOffset === 0 && _this.range.endOffset === 0 && isImageElement) {
                      var imageElement = _this.range.startContainer.nodeName === "IMG" ? _this.range.startContainer : _this.range.startContainer.childNodes[_this.range.startOffset];
                      currentParent.insertBefore(focusBRElem, imageElement);
                      focusBRElem = imageElement;
                    } else {
                      var lineBreakBRElem = _this.parent.createElement("br");
                      _this.parent.formatter.editorManager.domNode.insertAfter(focusBRElem, _this.range.startContainer);
                      _this.parent.formatter.editorManager.domNode.insertAfter(lineBreakBRElem, _this.range.startContainer);
                    }
                  }
                  _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), focusBRElem, 0);
                } else if (!isNullOrUndefined(currentParent) && currentParent !== _this.parent.inputElement && currentParent.nodeName !== "BR") {
                  if (currentParent.textContent.trim().length === 0 || currentParent.textContent.trim().length === 1 && currentParent.textContent.charCodeAt(0) === 8203) {
                    var newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, currentParent, true).cloneNode(true);
                    _this.parent.formatter.editorManager.domNode.insertAfter(newElem, currentParent);
                    var outerBRElem = _this.parent.createElement("br");
                    newElem.parentElement.insertBefore(outerBRElem, newElem);
                    _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), newElem, 0);
                  } else {
                    var newElem = void 0;
                    var outerBRElem = _this.parent.createElement("br");
                    if (_this.range.startOffset === 0 && _this.range.endOffset === 0 && !isNullOrUndefined(currentParent.previousSibling) && currentParent.previousSibling.nodeName === "BR") {
                      newElem = _this.parent.formatter.editorManager.nodeCutter.SplitNode(_this.range, currentParent, false).cloneNode(true);
                      _this.parent.formatter.editorManager.domNode.insertAfter(outerBRElem, currentParent);
                      _this.insertFocusContent();
                      var currentFocusElem = outerBRElem.nextSibling;
                      while (!isNullOrUndefined(currentFocusElem) && currentFocusElem.nodeName !== "#text") {
                        currentFocusElem = currentFocusElem.lastChild;
                      }
                      _this.parent.formatter.editorManager.nodeSelection.setCursorPoint(_this.parent.contentModule.getDocument(), currentFocusElem, 0);
                      isEmptyBrInserted = true;
                    } else {
                      _this.insertBRElement();
                    }
                  }
                } else {
                  _this.insertBRElement();
                }
                e.args.preventDefault();
              }
              _this.parent.trigger(actionComplete, { requestType: shiftKey_1 ? "ShiftEnterAction" : "EnterAction", args: e.args });
            }
          });
        }
      }
    };
    EnterKeyAction2.prototype.removeBRElement = function(currentElement) {
      if (Browser.userAgent.indexOf("Firefox") !== -1 && this.range.endOffset === currentElement.textContent.length && (currentElement.textContent.length !== 0 || currentElement.querySelectorAll("BR").length > 1) && !isNullOrUndefined(currentElement.lastChild) && currentElement.lastChild.nodeName === "BR") {
        detach(currentElement.lastChild);
      }
    };
    EnterKeyAction2.prototype.insertBRElement = function() {
      var isEmptyBrInserted = false;
      var isFocusTextNode = true;
      if (this.range.endContainer.textContent.length === 0 && this.range.startContainer.nodeName === "BR") {
        isFocusTextNode = false;
      }
      var brElm = this.parent.createElement("br");
      if (this.startNode.nodeName === "BR" && this.endNode.nodeName === "BR" && this.range.startOffset === 0 && this.range.startOffset === this.range.endOffset) {
        this.parent.formatter.editorManager.domNode.insertAfter(brElm, this.startNode);
        isEmptyBrInserted = true;
      } else {
        if (this.startNode === this.parent.inputElement && !isNullOrUndefined(this.range.startContainer.previousSibling) && this.range.startContainer.previousSibling.nodeName === "BR" && this.range.startContainer.textContent.length === 0) {
          isEmptyBrInserted = true;
        }
        this.range.insertNode(brElm);
      }
      if (isEmptyBrInserted || !isNullOrUndefined(brElm.nextElementSibling) && brElm.nextElementSibling.tagName === "BR" || !isNullOrUndefined(brElm.nextSibling) && brElm.nextSibling.textContent.length > 0) {
        this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), !isNullOrUndefined(brElm.nextSibling) && isFocusTextNode ? brElm.nextSibling : brElm, 0);
        isEmptyBrInserted = false;
      } else {
        var brElm2 = this.parent.createElement("br");
        this.range.insertNode(brElm2);
        this.parent.formatter.editorManager.nodeSelection.setCursorPoint(this.parent.contentModule.getDocument(), brElm, 0);
      }
    };
    EnterKeyAction2.prototype.insertFocusContent = function() {
      if (this.range.startContainer.textContent.length === 0) {
        if (this.range.startContainer.nodeName === "#text") {
          this.range.startContainer.parentElement.innerHTML = "&#8203;";
        } else {
          this.range.startContainer.innerHTML = "&#8203;";
        }
      }
    };
    EnterKeyAction2.prototype.createInsertElement = function(shiftKey) {
      var insertElem;
      if (this.parent.enterKey === "DIV" && !shiftKey || this.parent.shiftEnterKey === "DIV" && shiftKey) {
        insertElem = this.parent.createElement("div");
      } else if (this.parent.enterKey === "P" && !shiftKey || this.parent.shiftEnterKey === "P" && shiftKey) {
        insertElem = this.parent.createElement("p");
      }
      return insertElem;
    };
    return EnterKeyAction2;
  }()
);

// node_modules/@syncfusion/ej2-richtexteditor/src/rich-text-editor/base/rich-text-editor.js
var __extends19 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __decorate16 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RichTextEditor = (
  /** @class */
  function(_super) {
    __extends19(RichTextEditor2, _super);
    function RichTextEditor2(options, element) {
      var _this = _super.call(this, options, element) || this;
      _this.needsID = true;
      return _this;
    }
    RichTextEditor2.prototype.requiredModules = function() {
      var modules = [];
      if (this.toolbarSettings.enable) {
        modules.push({ member: "toolbar", args: [this, this.serviceLocator] });
        modules.push({
          member: "link",
          args: [this, this.serviceLocator]
        });
        modules.push({
          member: "table",
          args: [this, this.serviceLocator]
        });
        modules.push({
          member: "image",
          args: [this, this.serviceLocator]
        });
        if (this.quickToolbarSettings.enable) {
          modules.push({ member: "quickToolbar", args: [this, this.serviceLocator] });
        }
      }
      if (this.showCharCount) {
        modules.push({ member: "count", args: [this, this.serviceLocator] });
      }
      if (this.editorMode === "Markdown") {
        modules.push({ member: "markdownEditor", args: [this, this.serviceLocator] });
      }
      if (this.editorMode === "HTML") {
        modules.push({ member: "htmlEditor", args: [this, this.serviceLocator] });
        modules.push({ member: "pasteCleanup", args: [this, this.serviceLocator] });
        modules.push({
          member: "audio",
          args: [this, this.serviceLocator]
        });
        modules.push({
          member: "video",
          args: [this, this.serviceLocator]
        });
        modules.push({
          member: "formatPainter",
          args: [this]
        });
        modules.push({
          member: "emojiPicker",
          args: [this, this.serviceLocator]
        });
      }
      if (this.fileManagerSettings.enable) {
        modules.push({ member: "fileManager", args: [this, this.serviceLocator] });
      }
      if (this.enableResize) {
        modules.push({ member: "resize", args: [this] });
      }
      return modules;
    };
    RichTextEditor2.prototype.updateEnable = function() {
      if (this.enabled) {
        removeClass([this.element], CLS_DISABLED);
        this.element.setAttribute("aria-disabled", "false");
        if (!isNullOrUndefined(this.htmlAttributes.tabindex)) {
          this.inputElement.setAttribute("tabindex", this.htmlAttributes.tabindex);
        } else {
          this.inputElement.setAttribute("tabindex", "0");
        }
      } else {
        if (this.getToolbar()) {
          removeClass(this.getToolbar().querySelectorAll("." + CLS_ACTIVE), CLS_ACTIVE);
          removeClass([this.getToolbar()], [CLS_TB_FLOAT, CLS_TB_ABS_FLOAT]);
        }
        addClass([this.element], CLS_DISABLED);
        this.element.tabIndex = -1;
        this.element.setAttribute("aria-disabled", "true");
        this.inputElement.setAttribute("tabindex", "-1");
      }
    };
    RichTextEditor2.prototype.setEnable = function() {
      this.updateEnable();
      this.enabled ? this.eventInitializer() : this.unWireEvents();
    };
    RichTextEditor2.prototype.initializeValue = function() {
      this.isFocusOut = false;
      this.isRTE = false;
      this.isBlur = true;
      this.defaultResetValue = null;
      this.isResizeInitialized = false;
    };
    RichTextEditor2.prototype.preRender = function() {
      this.initializeValue();
      this.onBlurHandler = this.blurHandler.bind(this);
      this.onFocusHandler = this.focusHandler.bind(this);
      this.onResizeHandler = this.resizeHandler.bind(this);
      this.clickPoints = { clientX: 0, clientY: 0 };
      this.initialValue = this.value;
      this.serviceLocator = new ServiceLocator();
      this.initializeServices();
      this.setContainer();
      this.persistData();
      setStyleAttribute(this.element, { "width": formatUnit(this.width) });
      attributes(this.element, { role: "application", "aria-label": "Rich Text Editor" });
    };
    RichTextEditor2.prototype.persistData = function() {
      if (this.enablePersistence && this.originalElement.tagName === "TEXTAREA") {
        this.element.id = this.originalElement.id + "_wrapper";
        var data = window.localStorage.getItem(this.getModuleName() + this.element.id);
        if (!(isNullOrUndefined(data) || data === "")) {
          this.setProperties(JSON.parse(data), true);
        }
      }
    };
    RichTextEditor2.prototype.setContainer = function() {
      this.originalElement = this.element.cloneNode(true);
      if (this.value === null || this.valueTemplate !== null) {
        this.setValue();
      }
      if (this.element.hasAttribute("tabindex")) {
        this.htmlAttributes = { "tabindex": this.element.getAttribute("tabindex") };
        this.element.removeAttribute("tabindex");
      }
      this.element.innerHTML = "";
      var invalidAttr = ["class", "style", "id", "ejs-for"];
      var htmlAttr = {};
      for (var a = 0; a < this.element.attributes.length; a++) {
        if (invalidAttr.indexOf(this.element.attributes[a].name) === -1 && !/^data-val/.test(this.element.attributes[a].name)) {
          htmlAttr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      }
      extend(htmlAttr, this.htmlAttributes, htmlAttr);
      this.setProperties({ htmlAttributes: htmlAttr }, true);
      if (!isNullOrUndefined(this.htmlAttributes.id)) {
        this.element.id = this.htmlAttributes.id;
      }
      if (this.element.tagName === "TEXTAREA") {
        var rteOuterWrapper = this.createElement("div", {
          className: this.element.getAttribute("class")
        });
        this.element.innerHTML = "";
        this.element.parentElement.insertBefore(rteOuterWrapper, this.element);
        this.valueContainer = this.element;
        removeClass([this.valueContainer], this.element.getAttribute("class").split(" "));
        this.element = rteOuterWrapper;
      } else {
        this.valueContainer = this.createElement("textarea", {
          id: this.getID() + "-value",
          attrs: { "aria-labelledby": this.getID() }
        });
      }
      this.valueContainer.name = this.getID();
      addClass([this.valueContainer], CLS_RTE_HIDDEN);
      if (!isNullOrUndefined(this.cssClass)) {
        var currentClassList = this.cssClass.split(" ");
        for (var i = 0; i < currentClassList.length; i++) {
          addClass([this.valueContainer], currentClassList[i]);
        }
      }
      this.element.appendChild(this.valueContainer);
    };
    RichTextEditor2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    RichTextEditor2.prototype.focusIn = function() {
      if (this.enabled) {
        this.inputElement.focus();
        this.focusHandler({});
      }
    };
    RichTextEditor2.prototype.focusOut = function() {
      if (this.enabled) {
        this.inputElement.blur();
        this.blurHandler({});
      }
    };
    RichTextEditor2.prototype.selectAll = function() {
      this.notify(selectAll2, {});
    };
    RichTextEditor2.prototype.selectRange = function(range) {
      this.notify(selectRange, { range });
    };
    RichTextEditor2.prototype.getSelection = function() {
      var str = "";
      this.notify(getSelectedHtml, {
        callBack: function(txt) {
          str = txt;
        }
      });
      return str;
    };
    RichTextEditor2.prototype.showEmojiPicker = function(x, y) {
      if (this.readonly) {
        return;
      }
      this.notify(emojiPicker, { x, y });
    };
    RichTextEditor2.prototype.executeCommand = function(commandName, value, option) {
      value = this.htmlPurifier(commandName, value);
      var internalValue;
      if (this.editorMode === "HTML") {
        var range = this.getRange();
        if (this.iframeSettings.enable) {
          this.formatter.editorManager.nodeSelection.Clear(this.element.ownerDocument);
        }
        var toFocus = this.iframeSettings.enable && range.startContainer === this.inputElement ? true : !this.inputElement.contains(range.startContainer);
        if (toFocus) {
          this.focusIn();
        }
      }
      var tool = executeGroup["" + commandName];
      if (option && option.undo) {
        if (option.undo && this.formatter.getUndoRedoStack().length === 0) {
          this.formatter.saveData();
        }
      }
      if (this.maxLength !== -1 && !isNullOrUndefined(tool.command)) {
        var currentInsertContentLength = 0;
        if (tool.command === "Links") {
          currentInsertContentLength = value.text.length === 0 ? value.url.length : value.text.length;
        }
        if (tool.command === "Images" || tool.command === "Table" || tool.command === "Files") {
          currentInsertContentLength = 1;
        }
        if (tool.command === "InsertHTML") {
          if (!isNullOrUndefined(value)) {
            var tempElem = this.createElement("div");
            tempElem.innerHTML = value;
            currentInsertContentLength = tempElem.textContent.length;
          } else if (!isNullOrUndefined(tool.value) && (tool.value === "<hr/>" || tool.value === "<br/>")) {
            currentInsertContentLength = 1;
          }
        }
        if (tool.command === "InsertText") {
          currentInsertContentLength = value.length;
        }
        var currentLength = this.getText().trim().length;
        var selectionLength = this.getSelection().length;
        var totalLength = currentLength - selectionLength + currentInsertContentLength;
        if (!(this.maxLength === -1 || totalLength <= this.maxLength)) {
          return;
        }
      }
      internalValue = value;
      if (tool.command === "FormatPainter") {
        if (!isNullOrUndefined(value)) {
          this.formatPainterSettings = value;
        }
        internalValue = {
          formatPainterAction: tool.value
        };
      }
      this.formatter.editorManager.execCommand(tool.command, tool.subCommand ? tool.subCommand : internalValue ? internalValue : tool.value, null, null, internalValue ? internalValue : tool.value, internalValue ? internalValue : tool.value);
      if (option && option.undo) {
        this.formatter.saveData();
        this.formatter.enableUndo(this);
      }
      this.setPlaceHolder();
      this.notify(contentChanged, {});
    };
    RichTextEditor2.prototype.htmlPurifier = function(command, value) {
      if (this.editorMode === "HTML") {
        switch (command) {
          case "insertHTML":
            if (this.enableHtmlSanitizer) {
              if (typeof value === "string") {
                value = this.htmlEditorModule.sanitizeHelper(value);
              } else {
                value = this.htmlEditorModule.sanitizeHelper(value.outerHTML);
              }
            }
            break;
          case "insertTable":
            if (isNullOrUndefined(value.width)) {
              value.width = {
                minWidth: this.tableSettings.minWidth,
                maxWidth: this.tableSettings.maxWidth,
                width: this.tableSettings.width
              };
            }
            break;
          case "insertImage": {
            var temp = this.createElement("img", {
              attrs: {
                src: value.url
              }
            });
            var imageValue = temp.outerHTML;
            if (this.enableHtmlSanitizer) {
              imageValue = this.htmlEditorModule.sanitizeHelper(temp.outerHTML);
            }
            var url = imageValue !== "" && this.createElement("div", {
              innerHTML: imageValue
            }).firstElementChild.getAttribute("src") || null;
            url = !isNullOrUndefined(url) ? url : "";
            value.url = url;
            if (isNullOrUndefined(value.width)) {
              value.width = {
                minWidth: this.insertImageSettings.minWidth,
                maxWidth: this.insertImageSettings.maxWidth,
                width: this.insertImageSettings.width
              };
            }
            if (isNullOrUndefined(value.height)) {
              value.height = {
                minHeight: this.insertImageSettings.minHeight,
                maxHeight: this.insertImageSettings.maxHeight,
                height: this.insertImageSettings.height
              };
            }
            break;
          }
          case "insertAudio": {
            var wrapTemp = this.createElement("audio", {
              attrs: {
                controls: ""
              }
            });
            var temp = this.createElement("source", {
              attrs: {
                src: value.url,
                type: value.url && value.url.split(".").length > 0 ? "audio/" + value.url.split(".")[value.url.split(".").length - 1] : ""
              }
            });
            wrapTemp.appendChild(temp);
            var audioValue = wrapTemp.outerHTML;
            if (this.enableHtmlSanitizer) {
              audioValue = this.htmlEditorModule.sanitizeHelper(wrapTemp.outerHTML);
            }
            var url = audioValue !== "" && this.createElement("div", {
              innerHTML: audioValue
            }).firstElementChild.firstElementChild.getAttribute("src") || null;
            url = !isNullOrUndefined(url) ? url : "";
            value.url = url;
            break;
          }
          case "insertVideo": {
            var wrapTemp = this.createElement("video", {
              attrs: {
                controls: ""
              }
            });
            var temp = this.createElement("source", {
              attrs: {
                src: value.url,
                type: value.url && value.url.split(".").length > 0 ? "video/" + value.url.split(".")[value.url.split(".").length - 1] : ""
              }
            });
            wrapTemp.appendChild(temp);
            var audioValue = wrapTemp.outerHTML;
            if (this.enableHtmlSanitizer) {
              audioValue = this.htmlEditorModule.sanitizeHelper(temp.outerHTML);
            }
            var url = audioValue !== "" && this.createElement("div", {
              innerHTML: audioValue
            }).firstElementChild.getAttribute("src") || null;
            url = !isNullOrUndefined(url) ? url : "";
            value.url = url;
            if (isNullOrUndefined(value.width)) {
              value.width = {
                minWidth: this.insertVideoSettings.minWidth,
                maxWidth: this.insertVideoSettings.maxWidth,
                width: this.insertVideoSettings.width
              };
            }
            if (isNullOrUndefined(value.height)) {
              value.height = {
                minHeight: this.insertVideoSettings.minHeight,
                maxHeight: this.insertVideoSettings.maxHeight,
                height: this.insertVideoSettings.height
              };
            }
            break;
          }
          case "createLink": {
            var tempNode = this.createElement("a", {
              attrs: {
                href: value.url
              }
            });
            var linkValue = tempNode.outerHTML;
            if (this.enableHtmlSanitizer) {
              linkValue = this.htmlEditorModule.sanitizeHelper(tempNode.outerHTML);
            }
            var href = linkValue !== "" && this.createElement("div", {
              innerHTML: linkValue
            }).firstElementChild.getAttribute("href") || null;
            href = !isNullOrUndefined(href) ? href : "";
            value.url = href;
            break;
          }
        }
      }
      return value;
    };
    RichTextEditor2.prototype.encode = function(value) {
      var divNode = this.createElement("div");
      divNode.innerText = value.trim();
      return divNode.innerHTML.replace(/<br\s*[\/]?>/gi, "\n");
    };
    RichTextEditor2.prototype.render = function() {
      if (this.value && !this.valueTemplate) {
        this.setProperties({ value: this.serializeValue(this.value) }, true);
      }
      this.renderModule = new Render(this, this.serviceLocator);
      this.sourceCodeModule = new ViewSource(this, this.serviceLocator);
      this.notify(initialLoad, {});
      this.trigger(load);
      this.RTERender();
      var execCommandCallBack2 = new ExecCommandCallBack(this);
      this.notify(initialEnd, {});
      if (this.enableXhtml) {
        this.setProperties({ value: this.getXhtml() }, true);
      }
      if (this.toolbarSettings.enable && this.toolbarSettings.type === "Expand" && !isNullOrUndefined(this.getToolbar()) && (this.toolbarSettings.items.indexOf("Undo") > -1 && this.toolbarSettings.items.indexOf("Redo") > -1)) {
        this.disableToolbarItem(["Undo", "Redo"]);
      }
      this.setContentHeight();
      if (this.value !== null) {
        this.valueContainer.defaultValue = this.value;
      }
      this.enabled && !this.readonly ? this.eventInitializer() : this.unWireEvents();
      this.notify(bindCssClass, { cssClass: this.cssClass });
      this.addAudioVideoWrapper();
      this.notify(tableclass, {});
      this.renderComplete();
    };
    RichTextEditor2.prototype.addAudioVideoWrapper = function() {
      var _this = this;
      var insertElem;
      var audioElm = this.element.querySelectorAll("audio");
      for (var i = 0; i < audioElm.length; i++) {
        if (!audioElm[i].classList.contains("e-rte-audio")) {
          audioElm[i].classList.add("e-rte-audio");
          audioElm[i].classList.add(CLS_AUDIOINLINE);
        }
        if (!audioElm[i].parentElement.classList.contains(CLS_CLICKELEM) && !audioElm[i].parentElement.classList.contains(CLS_AUDIOWRAP)) {
          var audioWrapElem = this.createElement("span", { className: CLS_AUDIOWRAP });
          audioWrapElem.setAttribute("style", "width:300px; margin:0 auto;");
          audioWrapElem.contentEditable = "false";
          var audioInnerWrapElem = this.createElement("span", { className: CLS_CLICKELEM });
          audioWrapElem.appendChild(audioInnerWrapElem);
          audioElm[i].parentNode.insertBefore(audioWrapElem, audioElm[i].nextSibling);
          audioInnerWrapElem.appendChild(audioElm[i]);
          if (audioWrapElem.nextElementSibling === null) {
            insertElem = this.createElement("br");
            audioWrapElem.parentNode.insertBefore(insertElem, audioWrapElem.nextSibling);
          }
        }
      }
      var videoElm = this.element.querySelectorAll("video");
      for (var i = 0; i < videoElm.length; i++) {
        if (!videoElm[i].classList.contains("e-rte-video")) {
          videoElm[i].classList.add("e-rte-video");
          videoElm[i].classList.add(CLS_VIDEOINLINE);
        }
        if (!videoElm[i].parentElement.classList.contains(CLS_CLICKELEM) && !videoElm[i].parentElement.classList.contains(CLS_VIDEOWRAP)) {
          var videoWrapElem = this.createElement("span", { className: CLS_VIDEOWRAP });
          videoWrapElem.contentEditable = "false";
          videoElm[i].parentNode.insertBefore(videoWrapElem, videoElm[i].nextSibling);
          videoWrapElem.appendChild(videoElm[i]);
          if (videoWrapElem.nextElementSibling === null) {
            insertElem = this.createElement("br");
            videoWrapElem.parentNode.insertBefore(insertElem, videoWrapElem.nextSibling);
          }
        }
        if (Browser.userAgent.indexOf("Firefox") !== -1) {
          videoElm[i].addEventListener("play", function(args) {
            _this.notify(mouseDown, { args });
            _this.notify("editAreaClick", { args });
          });
          videoElm[i].addEventListener("pause", function(args) {
            _this.notify(mouseDown, { args });
            _this.notify("editAreaClick", { args });
          });
        }
      }
    };
    RichTextEditor2.prototype.eventInitializer = function() {
      this.wireEvents();
    };
    RichTextEditor2.prototype.cleanList = function(e) {
      var range = this.getRange();
      var currentStartContainer = range.startContainer;
      var currentEndContainer = range.endContainer;
      var currentStartOffset = range.startOffset;
      var isSameContainer = currentStartContainer === currentEndContainer ? true : false;
      var currentEndOffset = currentEndContainer.textContent.length;
      var endNode = range.endContainer.nodeName === "#text" ? range.endContainer.parentElement : range.endContainer;
      var closestLI = closest(endNode, "LI");
      var isDetached = false;
      if (!isNullOrUndefined(closestLI) && endNode.textContent.length === range.endOffset && !range.collapsed && isNullOrUndefined(endNode.nextElementSibling)) {
        for (var i = 0; i < closestLI.childNodes.length; i++) {
          if (closestLI.childNodes[i].nodeName === "#text" && closestLI.childNodes[i].textContent.trim().length === 0) {
            detach(closestLI.childNodes[i]);
            isDetached = true;
            i--;
          }
        }
        var currentLastElem = closestLI;
        while (currentLastElem.lastChild !== null && currentLastElem.nodeName !== "#text") {
          currentLastElem = currentLastElem.lastChild;
        }
        if (isDetached) {
          var currentLast = currentLastElem.nodeName === "BR" && !isNullOrUndefined(currentLastElem.previousSibling) ? currentLastElem.previousSibling : currentLastElem;
          this.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), isSameContainer ? currentLast : currentStartContainer, currentLast, currentStartOffset, currentLast.nodeName === "BR" ? 0 : currentLast.textContent.length);
        }
      }
    };
    RichTextEditor2.prototype.keyDown = function(e) {
      this.notify(keyDown, { member: "keydown", args: e });
      this.restrict(e);
      if (this.editorMode === "HTML") {
        this.cleanList(e);
      }
      if (this.editorMode === "HTML" && (e.which === 8 && e.code === "Backspace" || e.which === 46 && e.code === "Delete")) {
        var range = this.getRange();
        var startNode = range.startContainer.nodeName === "#text" ? range.startContainer.parentElement : range.startContainer;
        if (closest(startNode, "pre") && (e.which === 8 && range.startContainer.textContent.charCodeAt(range.startOffset - 1) === 8203) || e.which === 46 && range.startContainer.textContent.charCodeAt(range.startOffset) === 8203) {
          var regEx = new RegExp(String.fromCharCode(8203), "g");
          var pointer = e.which === 8 ? range.startOffset - 1 : range.startOffset;
          range.startContainer.textContent = range.startContainer.textContent.replace(regEx, "");
          this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), range.startContainer, pointer);
        } else if (e.code === "Backspace" && e.which === 8 && range.startContainer.textContent.charCodeAt(0) === 8203 && range.collapsed) {
          var parentEle = range.startContainer.parentElement;
          var index = void 0;
          var i = void 0;
          for (i = 0; i < parentEle.childNodes.length; i++) {
            if (parentEle.childNodes[i] === range.startContainer) {
              index = i;
            }
          }
          var bool = true;
          var removeNodeArray = [];
          for (i = index; i >= 0; i--) {
            if (parentEle.childNodes[i].nodeType === 3 && parentEle.childNodes[i].textContent.charCodeAt(0) === 8203 && bool) {
              removeNodeArray.push(i);
            } else {
              bool = false;
            }
          }
          if (removeNodeArray.length > 0) {
            for (i = removeNodeArray.length - 1; i > 0; i--) {
              parentEle.childNodes[removeNodeArray[i]].textContent = "";
            }
          }
          this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), range.startContainer, range.startOffset);
        }
      }
      var notFormatPainterCopy = !isNullOrUndefined(e.action) && e.action !== "format-copy";
      if (this.formatter.getUndoRedoStack().length === 0 && notFormatPainterCopy) {
        this.formatter.saveData();
      }
      if (e.action !== "insert-link" && e.action !== "format-copy" && e.action !== "format-paste" && (!e.target || !e.target.classList.contains("e-mention")) && (e.action && e.action !== "paste" && e.action !== "space" || e.which === 9 || e.code === "Backspace" && e.which === 8)) {
        var FormatPainterEscapeAction = false;
        if (!isNullOrUndefined(this.formatPainterModule)) {
          FormatPainterEscapeAction = this.formatPainterModule.previousAction === "escape";
        }
        if (!FormatPainterEscapeAction) {
          this.formatter.process(this, null, e);
        }
        switch (e.action) {
          case "toolbar-focus":
            if (this.toolbarSettings.enable) {
              var selector = ".e-toolbar-item[title] [tabindex]";
              this.toolbarModule.baseToolbar.toolbarObj.element.querySelector(selector).focus();
            }
            break;
          case "escape":
            this.contentModule.getEditPanel().focus();
            break;
        }
      }
      if (!isNullOrUndefined(this.placeholder)) {
        if (!isNullOrUndefined(this.placeHolderWrapper) && this.inputElement.textContent.length !== 1) {
          this.placeHolderWrapper.style.display = "none";
        } else if (this.iframeSettings.enable && this.inputElement.classList.contains("e-rte-placeholder")) {
          removeClass([this.inputElement], "e-rte-placeholder");
        } else {
          this.setPlaceHolder();
        }
      }
      this.autoResize();
    };
    RichTextEditor2.prototype.keyUp = function(e) {
      if (this.editorMode === "HTML") {
        var range = this.getRange();
        if (Browser.userAgent.indexOf("Firefox") !== -1 && range.startContainer.nodeName === "#text" && range.startContainer.parentElement === this.inputElement && this.enterKey !== "BR") {
          var range_1 = this.getRange();
          var tempElem = this.createElement(this.enterKey);
          range_1.startContainer.parentElement.insertBefore(tempElem, range_1.startContainer);
          tempElem.appendChild(range_1.startContainer);
          this.formatter.editorManager.nodeSelection.setSelectionText(this.contentModule.getDocument(), tempElem.childNodes[0], tempElem.childNodes[0], tempElem.childNodes[0].textContent.length, tempElem.childNodes[0].textContent.length);
        }
      }
      this.notify(keyUp, { member: "keyup", args: e });
      if (e.keyCode === 39 || e.keyCode === 37) {
        this.notify(tableModulekeyUp, { member: "tableModulekeyUp", args: e });
      }
      if (e.code === "KeyX" && e.which === 88 && e.keyCode === 88 && e.ctrlKey && (this.inputElement.innerHTML === "" || this.inputElement.innerHTML === "<br>")) {
        this.inputElement.innerHTML = getEditValue(getDefaultValue(this), this);
      }
      var allowedKeys = e.which === 32 || e.which === 13 || e.which === 8 || e.which === 46;
      var formatPainterCopy = e.key === "C" && e.altKey && e.shiftKey;
      var formatPainterPaste = e.key === "V" && e.altKey && e.shiftKey;
      if (!formatPainterCopy && !formatPainterPaste && (e.key !== "shift" && !e.ctrlKey && e.key && e.key.length === 1 || allowedKeys) || this.editorMode === "Markdown" && (e.key !== "shift" && !e.ctrlKey && e.key && e.key.length === 1 || allowedKeys) && !this.inlineMode.enable) {
        this.formatter.onKeyHandler(this, e);
      }
      if (this.inputElement && this.inputElement.textContent.length !== 0 || this.element.querySelectorAll(".e-toolbar-item.e-active").length > 0) {
        this.notify(toolbarRefresh, { args: e });
      }
      if (!isNullOrUndefined(this.placeholder)) {
        if (!(e.key === "Enter" && e.keyCode === 13) && (this.inputElement.innerHTML === "<p><br></p>" || this.inputElement.innerHTML === "<div><br></div>" || this.inputElement.innerHTML === "<br>")) {
          this.setPlaceHolder();
        }
      }
    };
    RichTextEditor2.prototype.serializeValue = function(value) {
      if (this.editorMode === "HTML" && !isNullOrUndefined(value)) {
        if (this.enableHtmlEncode) {
          value = this.htmlEditorModule.sanitizeHelper(decode(value));
          value = this.encode(value);
        } else {
          value = this.htmlEditorModule.sanitizeHelper(value);
          value = this.enableXhtml ? this.htmlEditorModule.xhtmlValidation.selfEncloseValidation(value) : value;
        }
      }
      return value;
    };
    RichTextEditor2.prototype.sanitizeHtml = function(value) {
      return this.serializeValue(value);
    };
    RichTextEditor2.prototype.updateValue = function(value) {
      if (isNullOrUndefined(value)) {
        var inputVal = this.inputElement.innerHTML;
        this.setProperties({ value: isEditableValueEmpty(inputVal) ? null : inputVal });
      } else {
        this.setProperties({ value });
      }
    };
    RichTextEditor2.prototype.triggerEditArea = function(e) {
      if (!isIDevice()) {
        this.notify(editAreaClick, { member: "editAreaClick", args: e });
      } else {
        var touch = e.touches ? e.changedTouches[0] : e;
        if (this.clickPoints.clientX === touch.clientX && this.clickPoints.clientY === touch.clientY) {
          this.notify(editAreaClick, { member: "editAreaClick", args: e });
        }
      }
    };
    RichTextEditor2.prototype.notifyMouseUp = function(e) {
      var touch = e.touches ? e.changedTouches[0] : e;
      this.notify(mouseUp, {
        member: "mouseUp",
        args: e,
        touchData: {
          prevClientX: this.clickPoints.clientX,
          prevClientY: this.clickPoints.clientY,
          clientX: touch.clientX,
          clientY: touch.clientY
        }
      });
      if (this.inputElement && (this.editorMode === "HTML" && this.inputElement.textContent.length !== 0 || this.editorMode === "Markdown" && this.inputElement.value.length !== 0) || (e.target && (e.target.nodeName === "VIDEO" || e.target.querySelectorAll("." + CLS_VIDEOWRAP).length > 0) || e.target && e.target.nodeName !== "BR" && (e.target.classList.contains(CLS_AUDIOWRAP) || e.target.classList.contains(CLS_CLICKELEM) || e.target.classList.contains(CLS_VID_CLICK_ELEM)))) {
        this.notify(toolbarRefresh, { args: e });
      }
      this.triggerEditArea(e);
    };
    RichTextEditor2.prototype.mouseUp = function(e) {
      if (this.quickToolbarSettings.showOnRightClick && Browser.isDevice) {
        var target = e.target;
        var closestTable = closest(target, "table");
        if (target && target.nodeName === "A" || target.nodeName === "IMG" || (target.nodeName === "TD" || target.nodeName === "TH" || target.nodeName === "TABLE" || closestTable && this.contentModule.getEditPanel().contains(closestTable))) {
          return;
        }
      }
      this.notifyMouseUp(e);
      if (e.detail === 3) {
        var range = this.getRange();
        var selection = this.formatter.editorManager.domNode.getSelection();
        if (/\s+$/.test(selection.toString())) {
          if (!isNullOrUndefined(range.startContainer.parentElement) && (!isNullOrUndefined(range.startContainer.parentElement.nextSibling) && (range.startContainer.parentElement.nextSibling.nodeType !== 3 || /\s+$/.test(range.startContainer.parentElement.nextSibling.textContent)) || range.startOffset === range.endOffset) || range.startContainer.parentElement.tagName.toLocaleLowerCase() === "li") {
            range.setStart(range.startContainer, range.startOffset);
            range.setEnd(range.startContainer, range.startContainer.textContent.length);
          }
        }
      }
    };
    RichTextEditor2.prototype.ensureModuleInjected = function(module) {
      return this.getInjectedModules().indexOf(module) >= 0;
    };
    RichTextEditor2.prototype.onCopy = function() {
      this.contentModule.getDocument().execCommand("copy", false, null);
    };
    RichTextEditor2.prototype.onCut = function() {
      this.contentModule.getDocument().execCommand("cut", false, null);
    };
    RichTextEditor2.prototype.onPaste = function(e) {
      var _this = this;
      var evenArgs = {
        originalEvent: e,
        cancel: false,
        requestType: "Paste"
      };
      this.trigger(actionBegin, evenArgs, function(pasteArgs) {
        var currentLength = _this.inputElement.textContent.length;
        var selectionLength = _this.getSelection().length;
        var pastedContentLength = isNullOrUndefined(e) || isNullOrUndefined(e.clipboardData) ? 0 : e.clipboardData.getData("text/plain").length;
        var totalLength = currentLength - selectionLength + pastedContentLength;
        if (_this.editorMode === "Markdown") {
          var args_1 = { requestType: "Paste", editorMode: _this.editorMode, event: e };
          setTimeout(function() {
            _this.formatter.onSuccess(_this, args_1);
          }, 0);
          if (!(_this.maxLength === -1 || totalLength <= _this.maxLength)) {
            e.preventDefault();
          }
          return;
        }
        if (!pasteArgs.cancel && _this.inputElement.contentEditable === "true" && (_this.maxLength === -1 || totalLength <= _this.maxLength)) {
          if (!isNullOrUndefined(_this.pasteCleanupModule)) {
            _this.notify(pasteClean, { args: e });
          } else {
            var args_2 = { requestType: "Paste", editorMode: _this.editorMode, event: e };
            var value = null;
            var htmlValue = false;
            if (e && !isNullOrUndefined(e.clipboardData)) {
              value = e.clipboardData.getData("text/plain");
              htmlValue = e.clipboardData.getData("text/html").indexOf("MsoNormal") > 0;
            }
            var file = e && e.clipboardData && e.clipboardData.items.length > 0 ? e.clipboardData.items[0].getAsFile() : null;
            if (value !== null) {
              _this.notify(paste, {
                file,
                args: e,
                text: value,
                isWordPaste: htmlValue
              });
            }
            setTimeout(function() {
              _this.formatter.onSuccess(_this, args_2);
            }, 0);
          }
        } else {
          e.preventDefault();
        }
      });
    };
    RichTextEditor2.prototype.clipboardAction = function(action, event2) {
      switch (action.toLowerCase()) {
        case "cut":
          this.onCut();
          this.formatter.onSuccess(this, {
            requestType: "Cut",
            editorMode: this.editorMode,
            event: event2
          });
          break;
        case "copy":
          this.onCopy();
          this.formatter.onSuccess(this, {
            requestType: "Copy",
            editorMode: this.editorMode,
            event: event2
          });
          break;
        case "paste":
          this.onPaste(event2);
          break;
      }
    };
    RichTextEditor2.prototype.destroy = function() {
      if (this.isDestroyed || !this.isRendered) {
        return;
      }
      if (!isNullOrUndefined(this.timeInterval)) {
        clearInterval(this.timeInterval);
        this.timeInterval = null;
      }
      if (this.element.offsetParent === null) {
        if (!isNullOrUndefined(this.toolbarModule)) {
          this.toolbarModule.destroy();
        }
        this.notify(moduleDestroy, {});
        return;
      }
      this.notify(destroy, {});
      this.destroyDependentModules();
      this.unWireEvents();
      if (this.originalElement.tagName === "TEXTAREA") {
        this.element.parentElement.insertBefore(this.valueContainer, this.element);
        this.valueContainer.id = this.getID();
        this.valueContainer.removeAttribute("name");
        detach(this.element);
        if (this.originalElement.innerHTML.trim() !== "") {
          this.valueContainer.value = this.originalElement.innerHTML.trim();
          this.setProperties({ value: !isNullOrUndefined(this.initialValue) ? this.initialValue : null }, true);
        } else {
          this.valueContainer.value = this.valueContainer.defaultValue;
        }
        this.element = this.valueContainer;
        for (var i = 0; i < this.originalElement.classList.length; i++) {
          addClass([this.element], this.originalElement.classList[i]);
        }
        if (!isNullOrUndefined(this.cssClass)) {
          var currentClassList = this.cssClass.split(" ");
          for (var i = 0; i < currentClassList.length; i++) {
            addClass([this.element], currentClassList[i]);
          }
        }
        removeClass([this.element], CLS_RTE_HIDDEN);
      } else {
        if (this.originalElement.innerHTML.trim() !== "") {
          this.element.innerHTML = this.originalElement.innerHTML.trim();
          this.setProperties({ value: !isNullOrUndefined(this.initialValue) ? this.initialValue : null }, true);
        } else {
          this.element.innerHTML = "";
        }
      }
      if (this.placeholder && this.placeHolderWrapper) {
        this.placeHolderWrapper = null;
      }
      if (!isNullOrUndefined(this.cssClass)) {
        var allClassName = this.cssClass.split(" ");
        for (var i = 0; i < allClassName.length; i++) {
          if (allClassName[i].trim() !== "") {
            removeClass([this.element], allClassName[i]);
          }
        }
      }
      this.removeHtmlAttributes();
      this.removeAttributes();
      _super.prototype.destroy.call(this);
      this.isRendered = false;
      if (this.enablePersistence) {
        window.localStorage.removeItem(this.getModuleName() + this.element.id);
      }
    };
    RichTextEditor2.prototype.removeHtmlAttributes = function() {
      if (this.htmlAttributes) {
        var keys = Object.keys(this.htmlAttributes);
        for (var i = 0; i < keys.length && this.element.hasAttribute(keys[i]); i++) {
          this.element.removeAttribute(keys[i]);
        }
      }
    };
    RichTextEditor2.prototype.removeAttributes = function() {
      if (!this.enabled) {
        removeClass([this.element], CLS_DISABLED);
      }
      if (this.enableRtl) {
        removeClass([this.element], CLS_RTL);
      }
      if (this.readonly) {
        removeClass([this.element], CLS_RTE_READONLY);
      }
      if (this.element.style.width !== "" && this.originalElement.style.width === "") {
        this.element.style.removeProperty("width");
      }
      if (this.element.style.height !== "" && this.originalElement.style.height === "") {
        this.element.style.removeProperty("height");
      }
      this.element.removeAttribute("aria-disabled");
      this.element.removeAttribute("role");
      this.element.removeAttribute("tabindex");
    };
    RichTextEditor2.prototype.destroyDependentModules = function() {
      this.renderModule.destroy();
      this.formatter.editorManager.undoRedoManager.destroy();
      this.sourceCodeModule.destroy();
    };
    RichTextEditor2.prototype.getContent = function() {
      return this.contentModule.getPanel();
    };
    RichTextEditor2.prototype.getText = function() {
      return this.contentModule.getText();
    };
    RichTextEditor2.prototype.getSelectedHtml = function() {
      var range;
      var wrapperElm = this.createElement("div");
      var selection = this.contentModule.getDocument().getSelection();
      if (selection.rangeCount > 0) {
        range = selection.getRangeAt(0);
        var selectedHtml = range.cloneContents();
        wrapperElm.appendChild(selectedHtml);
      }
      return wrapperElm.innerHTML;
    };
    RichTextEditor2.prototype.showInlineToolbar = function() {
      if (this.inlineMode.enable) {
        var currentRange = this.getRange();
        var targetElm = currentRange.endContainer.nodeName === "#text" ? currentRange.endContainer.parentElement : currentRange.endContainer;
        var x = currentRange.getClientRects()[0].left;
        var y = currentRange.getClientRects()[0].top;
        this.quickToolbarModule.showInlineQTBar(x, y, targetElm);
      }
    };
    RichTextEditor2.prototype.hideInlineToolbar = function() {
      this.quickToolbarModule.hideInlineQTBar();
    };
    RichTextEditor2.prototype.getModuleName = function() {
      return "richtexteditor";
    };
    RichTextEditor2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "enterKey":
          case "value": {
            var nVal = void 0;
            if (prop === "enterKey") {
              if (this.value === null || this.value === "<div><br></div>" || this.value === "<p><br></p>" || this.value === "<br>") {
                nVal = null;
              } else {
                nVal = this.value;
              }
            } else {
              nVal = newProp[prop];
            }
            var val = this.editorMode === "HTML" ? getEditValue(nVal, this) : nVal;
            if (!isNullOrUndefined(nVal) && nVal !== "" || prop === "enterKey") {
              this.value = this.serializeValue(this.enableHtmlEncode ? this.encode(decode(val)) : val);
            }
            this.updatePanelValue();
            if (this.inputElement) {
              this.notify(tableclass, {});
            }
            this.setPlaceHolder();
            this.notify(xhtmlValidation, { module: "XhtmlValidation", newProp, oldProp });
            if (this.enableXhtml) {
              this.setProperties({ value: this.getXhtml() }, true);
            }
            if (this.showCharCount) {
              this.countModule.refresh();
            }
            this.addAudioVideoWrapper();
            break;
          }
          case "valueTemplate":
            this.setValue(true);
            if (this.showCharCount) {
              this.countModule.refresh();
            }
            break;
          case "width":
            this.setWidth(newProp[prop]);
            if (this.toolbarSettings.enable && !this.inlineMode.enable) {
              this.toolbarModule.refreshToolbarOverflow();
              this.resizeHandler();
            }
            break;
          case "height":
            this.setHeight(newProp[prop]);
            this.setContentHeight();
            this.autoResize();
            break;
          case "readonly":
            this.setReadOnly(false);
            break;
          case "cssClass":
            this.element.classList.remove(oldProp[prop]);
            this.setCssClass(newProp[prop]);
            this.notify(bindCssClass, { cssClass: newProp[prop], oldCssClass: oldProp[prop] });
            break;
          case "enabled":
            this.setEnable();
            break;
          case "enableRtl":
            this.updateRTL();
            break;
          case "placeholder":
            this.placeholder = newProp[prop];
            this.setPlaceHolder();
            break;
          case "htmlAttributes":
            setAttributes(this.htmlAttributes, this, false, false);
            break;
          case "iframeSettings": {
            var frameSetting = oldProp[prop];
            if (frameSetting.resources) {
              var iframe = this.contentModule.getDocument();
              var header2 = iframe.querySelector("head");
              var files = void 0;
              if (frameSetting.resources.scripts) {
                files = header2.querySelectorAll("." + CLS_SCRIPT_SHEET);
                this.removeSheets(files);
              }
              if (frameSetting.resources.styles) {
                files = header2.querySelectorAll("." + CLS_STYLE_SHEET);
                this.removeSheets(files);
              }
            }
            this.setIframeSettings();
            break;
          }
          case "locale":
            _super.prototype.refresh.call(this);
            break;
          case "inlineMode":
            this.notify(modelChanged, { module: "quickToolbar", newProp, oldProp });
            this.setContentHeight();
            break;
          case "toolbarSettings":
            this.notify(modelChanged, { module: "toolbar", newProp, oldProp });
            this.setContentHeight();
            break;
          case "maxLength":
            if (this.showCharCount) {
              this.countModule.refresh();
            }
            break;
          case "showCharCount":
            if (newProp[prop] && this.countModule) {
              this.countModule.renderCount();
            } else if (newProp[prop] === false && this.countModule) {
              this.countModule.destroy();
            }
            break;
          case "enableHtmlEncode":
            this.updateValueData();
            this.updatePanelValue();
            this.setPlaceHolder();
            if (this.showCharCount) {
              this.countModule.refresh();
            }
            break;
          case "undoRedoSteps":
          case "undoRedoTimer":
            this.formatter.editorManager.observer.notify(MODEL_CHANGED, { newProp, oldProp });
            break;
          case "enableXhtml":
            this.notify(xhtmlValidation, { module: "XhtmlValidation", newProp, oldProp });
            break;
          case "quickToolbarSettings":
            newProp.quickToolbarSettings.showOnRightClick ? this.wireContextEvent() : this.unWireContextEvent();
            this.notify(modelChanged, { newProp, oldProp });
            break;
          case "formatPainterSettings":
            this.formatter.editorManager.observer.notify(MODEL_CHANGED, { module: "formatPainter", newProp });
            break;
          default:
            this.notify(modelChanged, { newProp, oldProp });
            break;
        }
      }
    };
    RichTextEditor2.prototype.updateValueData = function() {
      if (this.enableHtmlEncode) {
        this.setProperties({ value: this.encode(decode(this.inputElement.innerHTML)) }, true);
      } else {
        this.setProperties({
          value: /<[a-z][\s\S]*>/i.test(this.inputElement.innerHTML) ? this.inputElement.innerHTML : decode(this.inputElement.innerHTML)
        });
      }
    };
    RichTextEditor2.prototype.removeSheets = function(srcList) {
      var i;
      for (i = 0; i < srcList.length; i++) {
        detach(srcList[i]);
      }
    };
    RichTextEditor2.prototype.updatePanelValue = function() {
      var value = this.value;
      value = this.enableHtmlEncode && this.value ? decode(value) : value;
      var getTextArea = this.element.querySelector(".e-rte-srctextarea");
      if (value) {
        if (getTextArea && getTextArea.style.display === "block") {
          getTextArea.value = this.value;
        }
        if (this.valueContainer) {
          this.valueContainer.value = this.enableHtmlEncode ? this.value : value;
        }
        if (this.editorMode === "HTML" && this.inputElement && this.inputElement.innerHTML.replace("&amp;", "&").trim() !== value.trim()) {
          this.inputElement.innerHTML = value;
        } else if (this.editorMode === "Markdown" && this.inputElement && this.inputElement.value.trim() !== value.trim()) {
          this.inputElement.value = value;
        }
      } else {
        if (getTextArea && getTextArea.style.display === "block") {
          getTextArea.value = "";
        }
        if (this.editorMode === "HTML") {
          if (this.enterKey === "DIV") {
            this.inputElement.innerHTML = "<div><br/></div>";
          } else if (this.enterKey === "BR") {
            this.inputElement.innerHTML = "<br/>";
          } else {
            this.inputElement.innerHTML = "<p><br/></p>";
            if (value === "" && this.formatter && this.inputElement) {
              this.formatter.editorManager.nodeSelection.setCursorPoint(this.contentModule.getDocument(), this.inputElement.firstElementChild, this.inputElement.firstElementChild.childElementCount);
            }
          }
        } else {
          this.inputElement.value = "";
        }
        if (this.valueContainer) {
          this.valueContainer.value = "";
        }
      }
      if (this.showCharCount) {
        this.countModule.refresh();
      }
    };
    RichTextEditor2.prototype.setHeight = function(height) {
      if (height !== "auto") {
        this.element.style.height = formatUnit(height);
      } else {
        this.element.style.height = "auto";
      }
      if (this.toolbarSettings.type === "Expand" && (typeof this.height === "string" && this.height.indexOf("px") > -1 || typeof this.height === "number")) {
        this.element.classList.add(CLS_RTE_FIXED_TB_EXPAND);
      } else {
        this.element.classList.remove(CLS_RTE_FIXED_TB_EXPAND);
      }
    };
    RichTextEditor2.prototype.setPlaceHolder = function() {
      if (this.inputElement && this.placeholder && this.iframeSettings.enable !== true) {
        if (this.editorMode !== "Markdown") {
          if (!this.placeHolderWrapper) {
            this.placeHolderWrapper = this.createElement("span", { className: "rte-placeholder e-rte-placeholder " + this.cssClass });
            if (this.inputElement) {
              this.inputElement.parentElement.insertBefore(this.placeHolderWrapper, this.inputElement);
            }
            attributes(this.placeHolderWrapper, {
              "style": "font-size: 14px; margin-left: 0px; margin-right: 0px;"
            });
          }
          this.placeHolderWrapper.innerHTML = this.placeholder;
          if (this.inputElement.textContent.length === 0 && this.inputElement.childNodes.length < 2 && !isNullOrUndefined(this.inputElement.firstChild) && (this.inputElement.firstChild.nodeName === "BR" || (this.inputElement.firstChild.nodeName === "P" || this.inputElement.firstChild.nodeName === "DIV") && !isNullOrUndefined(this.inputElement.firstChild.firstChild) && this.inputElement.firstChild.firstChild.nodeName === "BR")) {
            this.placeHolderWrapper.style.display = "block";
          } else {
            this.placeHolderWrapper.style.display = "none";
          }
        } else {
          this.inputElement.setAttribute("placeholder", this.placeholder);
        }
      }
      if (this.placeholder && this.iframeSettings.enable) {
        if (this.inputElement.textContent.length === 0 && this.inputElement.childNodes.length < 2 && !isNullOrUndefined(this.inputElement.firstChild) && (this.inputElement.firstChild.nodeName === "BR" || (this.inputElement.firstChild.nodeName === "P" || this.inputElement.firstChild.nodeName === "DIV") && !isNullOrUndefined(this.inputElement.firstChild.firstChild) && this.inputElement.firstChild.firstChild.nodeName === "BR")) {
          addClass([this.inputElement], "e-rte-placeholder");
          this.inputElement.setAttribute("placeholder", this.placeholder);
        } else {
          removeClass([this.inputElement], "e-rte-placeholder");
        }
      }
    };
    RichTextEditor2.prototype.setWidth = function(width) {
      if (width !== "auto") {
        setStyleAttribute(this.element, { "width": formatUnit(this.width) });
      } else {
        this.element.style.width = "auto";
      }
    };
    RichTextEditor2.prototype.setCssClass = function(cssClass) {
      if (!isNullOrUndefined(cssClass)) {
        var allClassName = cssClass.split(" ");
        for (var i = 0; i < allClassName.length; i++) {
          if (allClassName[i].trim() !== "") {
            this.element.classList.add(allClassName[i]);
          }
        }
      }
    };
    RichTextEditor2.prototype.updateRTL = function() {
      this.notify(rtlMode, { enableRtl: this.enableRtl });
      if (this.enableRtl) {
        this.element.classList.add(CLS_RTL);
        this.inputElement.classList.add(CLS_RTL);
      } else {
        this.element.classList.remove(CLS_RTL);
        this.inputElement.classList.remove(CLS_RTL);
      }
    };
    RichTextEditor2.prototype.updateReadOnly = function() {
      this.notify(readOnlyMode, { editPanel: this.inputElement, mode: this.readonly });
    };
    RichTextEditor2.prototype.setReadOnly = function(initial) {
      this.updateReadOnly();
      if (!initial) {
        if (this.readonly && this.enabled) {
          this.unbindEvents();
        } else if (this.enabled) {
          this.bindEvents();
        }
      }
    };
    RichTextEditor2.prototype.print = function() {
      var _this = this;
      var printWind;
      var printArgs = {
        element: this.inputElement,
        requestType: "print",
        cancel: false
      };
      this.trigger(actionBegin, printArgs, function(printingArgs) {
        printWind = window.open("", "print", "height=" + window.outerHeight + ",width=" + window.outerWidth);
        if (Browser.info.name === "msie") {
          printWind.resizeTo(screen.availWidth, screen.availHeight);
        }
        printWind = print(_this.inputElement, printWind);
        if (!printingArgs.cancel) {
          var actionArgs = {
            requestType: "print"
          };
          _this.trigger(actionComplete, actionArgs);
        }
      });
    };
    RichTextEditor2.prototype.refreshUI = function() {
      this.renderModule.refresh();
    };
    RichTextEditor2.prototype.showFullScreen = function() {
      this.fullScreenModule.showFullScreen();
    };
    RichTextEditor2.prototype.enableToolbarItem = function(items, muteToolbarUpdate) {
      this.toolbarModule.enableTBarItems(this.getBaseToolbarObject(), items, true, muteToolbarUpdate);
    };
    RichTextEditor2.prototype.disableToolbarItem = function(items, muteToolbarUpdate) {
      this.toolbarModule.enableTBarItems(this.getBaseToolbarObject(), items, false, muteToolbarUpdate);
    };
    RichTextEditor2.prototype.removeToolbarItem = function(items) {
      this.toolbarModule.removeTBarItems(items);
    };
    RichTextEditor2.prototype.getRange = function() {
      return this.formatter.editorManager.nodeSelection.getRange(this.contentModule.getDocument());
    };
    RichTextEditor2.prototype.initializeServices = function() {
      this.serviceLocator.register("rendererFactory", new RendererFactory());
      this.serviceLocator.register("rteLocale", this.localeObj = new L10n(this.getModuleName(), defaultLocale, this.locale));
      this.serviceLocator.register("dialogRenderObject", new DialogRenderer(this));
    };
    RichTextEditor2.prototype.RTERender = function() {
      var rendererFactory = this.serviceLocator.getService("rendererFactory");
      this.contentModule = rendererFactory.getRenderer(RenderType.Content);
      this.fullScreenModule = new FullScreen(this);
      this.enterKeyModule = new EnterKeyAction(this);
      this.renderModule.render();
      this.inputElement = this.contentModule.getEditPanel();
      this.setHeight(this.height);
      setAttributes(this.htmlAttributes, this, false, true);
      if (this.iframeSettings) {
        this.setIframeSettings();
      }
      this.setCssClass(this.cssClass);
      this.updateEnable();
      this.setPlaceHolder();
      this.updateRTL();
      this.updateReadOnly();
      this.updatePanelValue();
      if (this.enableHtmlEncode && !isNullOrUndefined(this.value)) {
        this.setProperties({ value: this.encode(decode(this.value)) });
      }
    };
    RichTextEditor2.prototype.setIframeSettings = function() {
      if (this.iframeSettings.resources) {
        var styleSrc = this.iframeSettings.resources.styles;
        var scriptSrc = this.iframeSettings.resources.scripts;
        if (this.iframeSettings.resources.scripts.length > 0) {
          this.InjectSheet(true, scriptSrc);
        }
        if (this.iframeSettings.resources.styles.length > 0) {
          this.InjectSheet(false, styleSrc);
        }
      }
      if (this.iframeSettings.attributes) {
        setAttributes(this.iframeSettings.attributes, this, true, false);
      }
    };
    RichTextEditor2.prototype.InjectSheet = function(scriptSheet, srcList) {
      try {
        if (srcList && srcList.length > 0) {
          var iFrame = this.contentModule.getDocument();
          var target = iFrame.querySelector("head");
          for (var i = 0; i < srcList.length; i++) {
            if (scriptSheet) {
              var scriptEle = this.createScriptElement();
              scriptEle.src = srcList[i];
              target.appendChild(scriptEle);
            } else {
              var styleEle = this.createStyleElement();
              styleEle.href = srcList[i];
              target.appendChild(styleEle);
            }
          }
        }
      } catch (e) {
        return;
      }
    };
    RichTextEditor2.prototype.createScriptElement = function() {
      var scriptEle = this.createElement("script", {
        className: CLS_SCRIPT_SHEET
      });
      scriptEle.type = "text/javascript";
      return scriptEle;
    };
    RichTextEditor2.prototype.createStyleElement = function() {
      var styleEle = this.createElement("link", {
        className: CLS_STYLE_SHEET
      });
      styleEle.rel = "stylesheet";
      return styleEle;
    };
    RichTextEditor2.prototype.setValue = function(isPropertyChange) {
      var _this = this;
      if (this.valueTemplate) {
        var regEx = new RegExp(/<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i);
        if (typeof this.valueTemplate === "string" && regEx.test(this.valueTemplate)) {
          this.setProperties({ value: this.valueTemplate });
        } else {
          var compiledTemplate = compile(this.valueTemplate)("", this, "valueTemplate");
          if (typeof this.valueTemplate !== "string" && this.isReact) {
            this.displayTempElem = this.createElement("div");
            for (var i = 0; i < compiledTemplate.length; i++) {
              var item = compiledTemplate[i];
              append([item], this.displayTempElem);
            }
            this.renderTemplates(function() {
              _this.inputElement.innerHTML = _this.displayTempElem.childNodes[0].innerHTML;
              _this.setProperties({ value: _this.inputElement.innerHTML.trim() });
            });
          } else {
            var appendElem = this.element;
            if (isPropertyChange) {
              this.inputElement.innerHTML = "";
              appendElem = this.inputElement;
            }
            for (var i = 0; i < compiledTemplate.length; i++) {
              var item = compiledTemplate[i];
              append([item], appendElem);
            }
            this.setProperties({ value: appendElem.innerHTML.trim() });
            this.renderReactTemplates();
          }
        }
      } else {
        var innerHtml = !isNullOrUndefined(this.element.innerHTML) && this.element.innerHTML.replace(/<(\/?|\!?)(!--!--)>/g, "").trim();
        if (innerHtml !== "") {
          if (this.element.tagName === "TEXTAREA") {
            this.setProperties({ value: decode(innerHtml) });
          } else {
            this.setProperties({ value: innerHtml });
          }
        }
      }
    };
    RichTextEditor2.prototype.renderTemplates = function(callBack) {
      this.renderReactTemplates(callBack);
    };
    RichTextEditor2.prototype.updateResizeFlag = function() {
      this.isResizeInitialized = true;
    };
    RichTextEditor2.prototype.getInsertImgMaxWidth = function() {
      var maxWidth = this.insertImageSettings.maxWidth;
      var imgPadding = 12;
      var imgResizeBorder = 2;
      var editEle = this.contentModule.getEditPanel();
      var eleStyle = window.getComputedStyle(editEle);
      var editEleMaxWidth = editEle.offsetWidth - (imgPadding + imgResizeBorder + parseFloat(eleStyle.paddingLeft.split("px")[0]) + parseFloat(eleStyle.paddingRight.split("px")[0]) + parseFloat(eleStyle.marginLeft.split("px")[0]) + parseFloat(eleStyle.marginRight.split("px")[0]));
      return isNullOrUndefined(maxWidth) ? editEleMaxWidth : maxWidth;
    };
    RichTextEditor2.prototype.getInsertVidMaxWidth = function() {
      var maxWidth = this.insertVideoSettings.maxWidth;
      var vidPadding = 12;
      var vidResizeBorder = 2;
      var editEle = this.contentModule.getEditPanel();
      var eleStyle = window.getComputedStyle(editEle);
      var editEleMaxWidth = editEle.offsetWidth - (vidPadding + vidResizeBorder + parseFloat(eleStyle.paddingLeft.split("px")[0]) + parseFloat(eleStyle.paddingRight.split("px")[0]) + parseFloat(eleStyle.marginLeft.split("px")[0]) + parseFloat(eleStyle.marginRight.split("px")[0]));
      return isNullOrUndefined(maxWidth) ? editEleMaxWidth : maxWidth;
    };
    RichTextEditor2.prototype.setContentHeight = function(target, isExpand) {
      var heightValue;
      var topValue = 0;
      var rteHeightPercent;
      var heightPercent = typeof this.height === "string" && this.height.indexOf("%") > -1;
      var cntEle = this.sourceCodeModule.getPanel() && this.sourceCodeModule.getPanel().parentElement.style.display === "block" ? this.sourceCodeModule.getPanel().parentElement : this.contentModule.getPanel();
      var rteHeight = this.element.offsetHeight;
      if (rteHeight === 0 && this.height !== "auto" && !this.getToolbar()) {
        rteHeight = parseInt(this.height, 10);
        if (heightPercent) {
          rteHeightPercent = this.height;
        }
      }
      var tbHeight = this.getToolbar() ? this.toolbarModule.getToolbarHeight() : 0;
      var rzHandle = this.element.querySelector("." + CLS_RTE_RES_HANDLE);
      var rzHeight = this.enableResize ? !isNullOrUndefined(rzHandle) ? rzHandle.offsetHeight + 8 : 0 : 0;
      var expandPopHeight = this.getToolbar() ? this.toolbarModule.getExpandTBarPopHeight() : 0;
      if (this.toolbarSettings.type === ToolbarType.Expand && isExpand) {
        heightValue = this.height === "auto" && rzHeight === 0 ? "auto" : rteHeight - (tbHeight + expandPopHeight + rzHeight) + "px";
        topValue = !this.toolbarSettings.enableFloating ? expandPopHeight : 0;
      } else {
        if (this.height === "auto" && !this.element.classList.contains("e-rte-full-screen") && !this.isResizeInitialized) {
          heightValue = "auto";
        } else {
          heightValue = heightPercent && rteHeightPercent ? rteHeightPercent : rteHeight - (tbHeight + rzHeight) + "px";
        }
      }
      if (target !== "windowResize") {
        if (this.iframeSettings.enable) {
          if (heightValue !== "auto") {
            setStyleAttribute(cntEle, { height: heightValue, marginTop: topValue + "px" });
          }
        } else {
          setStyleAttribute(cntEle, { height: heightValue, marginTop: topValue + "px" });
        }
      }
      if (this.iframeSettings.enable && target === "sourceCode") {
        var codeElement = select("." + CLS_RTE_CONTENT, this.element);
        setStyleAttribute(codeElement, { height: heightValue, marginTop: topValue + "px" });
      }
      if (this.toolbarSettings.enableFloating && this.getToolbar() && !this.inlineMode.enable) {
        var tbWrapHeight = (isExpand ? tbHeight + expandPopHeight : tbHeight) + "px";
        setStyleAttribute(this.getToolbar().parentElement, { height: tbWrapHeight });
      }
      if (rzHeight === 0) {
        this.autoResize();
      }
    };
    RichTextEditor2.prototype.getHtml = function() {
      var htmlValue = this.contentModule.getEditPanel().innerHTML;
      return this.enableXhtml && (htmlValue === "<p><br></p>" || htmlValue === "<div><br></div>" || htmlValue === "<br>") ? null : this.serializeValue(htmlValue);
    };
    RichTextEditor2.prototype.getXhtml = function() {
      var currentValue = this.value;
      if (!isNullOrUndefined(currentValue) && this.enableXhtml) {
        currentValue = this.htmlEditorModule.xhtmlValidation.selfEncloseValidation(currentValue);
      }
      return currentValue;
    };
    RichTextEditor2.prototype.showSourceCode = function() {
      if (this.readonly) {
        return;
      }
      this.notify(sourceCode, {});
    };
    RichTextEditor2.prototype.getCharCount = function() {
      var htmlText = this.editorMode === "Markdown" ? this.inputElement.value.trim() : this.inputElement.textContent.trim();
      var htmlLength;
      if (this.editorMode !== "Markdown" && htmlText.indexOf("​") !== -1) {
        htmlLength = htmlText.replace(/\u200B/g, "").length;
      } else {
        htmlLength = htmlText.length;
      }
      return htmlLength;
    };
    RichTextEditor2.prototype.showDialog = function(type) {
      if (type === DialogType.InsertLink) {
        this.notify(showLinkDialog, {});
      } else if (type === DialogType.InsertImage) {
        this.notify(showImageDialog, {});
      } else if (type === DialogType.InsertAudio) {
        this.notify(showAudioDialog, {});
      } else if (type === DialogType.InsertVideo) {
        this.notify(showVideoDialog, {});
      } else if (type === DialogType.InsertTable) {
        this.notify(showTableDialog, {});
      }
    };
    RichTextEditor2.prototype.closeDialog = function(type) {
      if (type === DialogType.InsertLink) {
        this.notify(closeLinkDialog, {});
      } else if (type === DialogType.InsertImage) {
        this.notify(closeImageDialog, {});
      } else if (type === DialogType.InsertAudio) {
        this.notify(closeAudioDialog, {});
      } else if (type === DialogType.InsertVideo) {
        this.notify(closeVideoDialog, {});
      } else if (type === DialogType.InsertTable) {
        this.notify(closeTableDialog, {});
      }
    };
    RichTextEditor2.prototype.getBaseToolbarObject = function() {
      var tbObj;
      if (this.inlineMode.enable && (!Browser.isDevice || isIDevice())) {
        tbObj = this.quickToolbarModule && this.quickToolbarModule.getInlineBaseToolbar();
      } else {
        tbObj = this.toolbarModule && this.toolbarModule.getBaseToolbar();
      }
      return tbObj;
    };
    RichTextEditor2.prototype.getToolbar = function() {
      return this.toolbarModule ? this.toolbarModule.getToolbarElement() : null;
    };
    RichTextEditor2.prototype.getToolbarElement = function() {
      return this.toolbarModule && this.toolbarModule.getToolbarElement();
    };
    RichTextEditor2.prototype.getID = function() {
      return this.originalElement.tagName === "TEXTAREA" ? this.valueContainer.id : this.element.id;
    };
    RichTextEditor2.prototype.mouseDownHandler = function(e) {
      var touch = e.touches ? e.changedTouches[0] : e;
      addClass([this.element], [CLS_FOCUS]);
      this.preventDefaultResize(e);
      this.notify(mouseDown, { args: e });
      this.clickPoints = { clientX: touch.clientX, clientY: touch.clientY };
    };
    RichTextEditor2.prototype.preventImgResize = function(e) {
      if (e.target.nodeName.toLocaleLowerCase() === "img") {
        e.preventDefault();
      }
    };
    RichTextEditor2.prototype.preventDefaultResize = function(e) {
      if (Browser.info.name === "msie") {
        this.contentModule.getEditPanel().addEventListener("mscontrolselect", this.preventImgResize);
      } else if (Browser.info.name === "mozilla") {
        this.contentModule.getDocument().execCommand("enableObjectResizing", false, "false");
        this.contentModule.getDocument().execCommand("enableInlineTableEditing", false, "false");
      }
    };
    RichTextEditor2.prototype.defaultResize = function(e) {
      if (Browser.info.name === "msie") {
        this.contentModule.getEditPanel().removeEventListener("mscontrolselect", this.preventImgResize);
      } else if (Browser.info.name === "mozilla") {
        this.contentModule.getDocument().execCommand("enableObjectResizing", true, "true");
        this.contentModule.getDocument().execCommand("enableInlineTableEditing", true, "true");
      }
    };
    RichTextEditor2.prototype.resizeHandler = function() {
      var isExpand = false;
      if (!document.body.contains(this.element)) {
        document.defaultView.removeEventListener("resize", this.onResizeHandler, true);
        return;
      }
      if (this.toolbarSettings.enable && !this.inlineMode.enable) {
        this.toolbarModule.refreshToolbarOverflow();
        isExpand = this.toolbarModule.baseToolbar.toolbarObj.element.classList.contains(CLS_EXPAND_OPEN);
      }
      this.setContentHeight("windowResize", isExpand);
      this.notify(windowResize, null);
    };
    RichTextEditor2.prototype.scrollHandler = function(e) {
      if (this.element) {
        this.notify(scroll, { args: e });
      }
    };
    RichTextEditor2.prototype.contentScrollHandler = function(e) {
      this.notify(contentscroll, { args: e });
    };
    RichTextEditor2.prototype.focusHandler = function(e) {
      if (!this.isRTE || this.isFocusOut) {
        this.isRTE = this.isFocusOut ? false : true;
        this.isFocusOut = false;
        addClass([this.element], [CLS_FOCUS]);
        if (this.editorMode === "HTML") {
          this.cloneValue = this.inputElement.innerHTML === "<p><br></p>" || this.inputElement.innerHTML === "<div><br></div>" || this.inputElement.innerHTML === "<br>" ? null : this.enableHtmlEncode ? this.encode(decode(this.inputElement.innerHTML)) : this.inputElement.innerHTML;
        } else {
          this.cloneValue = this.inputElement.value === "" ? null : this.inputElement.value;
        }
        var active = document.activeElement;
        if (active === this.element || active === this.getToolbarElement() || active === this.contentModule.getEditPanel() || this.iframeSettings.enable && active === this.contentModule.getPanel() && e.target && !e.target.classList.contains("e-img-inner") && (e.target && e.target.parentElement && !e.target.parentElement.classList.contains("e-img-wrap")) || closest(active, ".e-rte-toolbar") === this.getToolbarElement()) {
          this.contentModule.getEditPanel().focus();
          if (!isNullOrUndefined(this.getToolbarElement())) {
            this.getToolbarElement().setAttribute("tabindex", "-1");
            var items = this.getToolbarElement().querySelectorAll('[tabindex="0"]');
            for (var i = 0; i < items.length; i++) {
              items[i].setAttribute("tabindex", "-1");
            }
          }
        }
        this.preventDefaultResize(e);
        this.trigger("focus", { event: e, isInteracted: Object.keys(e).length === 0 ? false : true });
        if (!isNullOrUndefined(this.saveInterval) && this.saveInterval > 0 && !this.autoSaveOnIdle) {
          this.timeInterval = setInterval(this.updateValueOnIdle.bind(this), this.saveInterval);
        }
        EventHandler.add(document, "mousedown", this.onDocumentClick, this);
      }
      if (!isNullOrUndefined(this.getToolbarElement())) {
        var toolbarItem = this.getToolbarElement().querySelectorAll("input,select,button,a,[tabindex]");
        for (var i = 0; i < toolbarItem.length; i++) {
          if (!toolbarItem[i].classList.contains("e-rte-dropdown-btn") && !toolbarItem[i].classList.contains("e-insert-table-btn") && (!toolbarItem[i].hasAttribute("tabindex") || toolbarItem[i].getAttribute("tabindex") !== "-1")) {
            toolbarItem[i].setAttribute("tabindex", "-1");
          }
        }
      }
    };
    RichTextEditor2.prototype.getUpdatedValue = function() {
      var value;
      if (!isNullOrUndefined(this.tableModule)) {
        this.tableModule.removeResizeElement();
      }
      var getTextArea = this.element.querySelector(".e-rte-srctextarea");
      if (this.editorMode === "HTML") {
        value = this.inputElement.innerHTML === "<p><br></p>" || this.inputElement.innerHTML === "<div><br></div>" || this.inputElement.innerHTML === "<br>" ? null : this.enableHtmlEncode ? this.encode(decode(this.inputElement.innerHTML)) : this.inputElement.innerHTML;
        if (getTextArea && getTextArea.style.display === "block") {
          value = getTextArea.value;
        }
      } else {
        value = this.inputElement.value === "" ? null : this.inputElement.value;
      }
      return value;
    };
    RichTextEditor2.prototype.updateValueOnIdle = function() {
      if (!isNullOrUndefined(this.tableModule) && !isNullOrUndefined(this.inputElement.querySelector(".e-table-box.e-rbox-select"))) {
        return;
      }
      this.setProperties({ value: this.getUpdatedValue() }, true);
      this.valueContainer.value = this.value;
      this.isValueChangeBlurhandler = false;
      this.invokeChangeEvent();
    };
    RichTextEditor2.prototype.updateIntervalValue = function() {
      clearTimeout(this.idleInterval);
      this.idleInterval = setTimeout(this.updateValueOnIdle.bind(this), 0);
    };
    RichTextEditor2.prototype.updateStatus = function(e) {
      if (!isNullOrUndefined(e.html) || !isNullOrUndefined(e.markdown)) {
        var status_1 = this.formatter.editorManager.undoRedoManager.getUndoStatus();
        var eventArgs = {
          undo: status_1.undo,
          redo: status_1.redo,
          html: e.html,
          markdown: e.markdown
        };
        this.trigger(updatedToolbarStatus, eventArgs);
      }
    };
    RichTextEditor2.prototype.onDocumentClick = function(e) {
      var target = e.target;
      var rteElement = closest(target, "." + CLS_RTE);
      if (!this.element.contains(e.target) && document !== e.target && rteElement !== this.element && !closest(target, '[aria-owns="' + this.getID() + '"]')) {
        this.isBlur = true;
        this.isRTE = false;
      }
      this.notify(docClick, { args: e });
      if (Browser.info.name !== "msie" && e.detail > 3) {
        e.preventDefault();
      }
    };
    RichTextEditor2.prototype.blurHandler = function(e) {
      var trg = e.relatedTarget;
      if (trg) {
        var rteElement = closest(trg, "." + CLS_RTE);
        if (rteElement && rteElement === this.element) {
          this.isBlur = false;
          if (trg === this.getToolbarElement()) {
            trg.setAttribute("tabindex", "-1");
          }
        } else if (closest(trg, '[aria-owns="' + this.getID() + '"]')) {
          this.isBlur = false;
        } else {
          this.isBlur = true;
          trg = null;
        }
      }
      if (this.isBlur && isNullOrUndefined(trg)) {
        removeClass([this.element], [CLS_FOCUS]);
        this.notify(focusChange, {});
        var value = this.getUpdatedValue();
        this.setProperties({ value });
        this.notify(toolbarRefresh, { args: e, documentNode: document });
        this.isValueChangeBlurhandler = true;
        this.invokeChangeEvent();
        this.isFocusOut = true;
        this.isBlur = false;
        dispatchEvent(this.valueContainer, "focusout");
        this.defaultResize(e);
        this.trigger("blur", { event: e, isInteracted: Object.keys(e).length === 0 ? false : true });
        if (!isNullOrUndefined(this.timeInterval)) {
          clearInterval(this.timeInterval);
          this.timeInterval = null;
        }
        if (!isNullOrUndefined(this.placeHolderWrapper) && this.element.querySelector("[title = Preview]")) {
          this.placeHolderWrapper.style.display = "none";
        }
        EventHandler.remove(document, "mousedown", this.onDocumentClick);
      } else {
        this.isRTE = true;
      }
    };
    RichTextEditor2.prototype.contentChanged = function() {
      if (this.autoSaveOnIdle) {
        if (!isNullOrUndefined(this.saveInterval)) {
          clearTimeout(this.timeInterval);
          this.timeInterval = setTimeout(this.updateIntervalValue.bind(this), this.saveInterval);
        }
      }
    };
    RichTextEditor2.prototype.invokeChangeEvent = function() {
      var currentValue;
      if (this.enableXhtml) {
        currentValue = this.getXhtml();
      } else {
        currentValue = this.value;
      }
      var eventArgs = {
        value: currentValue,
        isInteracted: this.isValueChangeBlurhandler
      };
      if (this.value !== this.cloneValue) {
        this.trigger("change", eventArgs);
        this.cloneValue = this.value;
      }
    };
    RichTextEditor2.prototype.wireScrollElementsEvents = function() {
      this.scrollParentElements = getScrollableParent(this.element);
      for (var _i = 0, _a = this.scrollParentElements; _i < _a.length; _i++) {
        var element = _a[_i];
        EventHandler.add(element, "scroll", this.scrollHandler, this);
      }
      if (!this.iframeSettings.enable) {
        EventHandler.add(this.inputElement, "scroll", this.contentScrollHandler, this);
      }
    };
    RichTextEditor2.prototype.wireContextEvent = function() {
      if (this.quickToolbarSettings.showOnRightClick) {
        EventHandler.add(this.inputElement, "contextmenu", this.contextHandler, this);
        if (Browser.isDevice) {
          this.touchModule = new Touch(this.inputElement, { tapHold: this.touchHandler.bind(this), tapHoldThreshold: 500 });
        }
      }
    };
    RichTextEditor2.prototype.unWireContextEvent = function() {
      EventHandler.remove(this.inputElement, "contextmenu", this.contextHandler);
      if (Browser.isDevice && this.touchModule) {
        this.touchModule.destroy();
      }
    };
    RichTextEditor2.prototype.unWireScrollElementsEvents = function() {
      this.scrollParentElements = getScrollableParent(this.element);
      for (var _i = 0, _a = this.scrollParentElements; _i < _a.length; _i++) {
        var element = _a[_i];
        EventHandler.remove(element, "scroll", this.scrollHandler);
      }
      if (!this.iframeSettings.enable) {
        EventHandler.remove(this.inputElement, "scroll", this.contentScrollHandler);
      }
    };
    RichTextEditor2.prototype.touchHandler = function(e) {
      this.notifyMouseUp(e.originalEvent);
      this.triggerEditArea(e.originalEvent);
    };
    RichTextEditor2.prototype.contextHandler = function(e) {
      var closestElem = closest(e.target, "a, table, img");
      if (this.inlineMode.onSelection === false || !isNullOrUndefined(closestElem) && this.inputElement.contains(closestElem) && (closestElem.tagName === "IMG" || closestElem.tagName === "TABLE" || closestElem.tagName === "A")) {
        e.preventDefault();
      }
    };
    RichTextEditor2.prototype.resetHandler = function() {
      var defaultValue = this.valueContainer.defaultValue.trim();
      this.setProperties({ value: defaultValue === "" ? null : defaultValue });
    };
    RichTextEditor2.prototype.autoResize = function() {
      var _this = this;
      if (this.height === "auto") {
        if (this.editorMode === "Markdown") {
          setTimeout(function() {
            _this.setAutoHeight(_this.inputElement);
          }, 0);
        } else if (this.iframeSettings.enable) {
          var iframeElement_1 = this.element.querySelector("#" + this.getID() + "_rte-view");
          setTimeout(function() {
            _this.setAutoHeight(iframeElement_1);
          }, 100);
          this.inputElement.style.overflow = "hidden";
        }
      } else {
        this.inputElement.style.overflow = null;
      }
    };
    RichTextEditor2.prototype.setAutoHeight = function(element) {
      if (!isNullOrUndefined(element)) {
        element.style.height = this.inputElement.scrollHeight + "px";
        element.style.overflow = "hidden";
      }
    };
    RichTextEditor2.prototype.wireEvents = function() {
      this.element.addEventListener("focusin", this.onFocusHandler, true);
      this.element.addEventListener("focusout", this.onBlurHandler, true);
      this.on(contentChanged, this.contentChanged, this);
      this.on(resizeInitialized, this.updateResizeFlag, this);
      this.on(updateTbItemsStatus, this.updateStatus, this);
      if (this.readonly && this.enabled) {
        return;
      }
      this.bindEvents();
    };
    RichTextEditor2.prototype.restrict = function(e) {
      if (this.maxLength >= 0) {
        var element = this.editorMode === "Markdown" ? this.contentModule.getText() : e && e.currentTarget.textContent;
        if (!element) {
          return;
        }
        var array = [8, 16, 17, 37, 38, 39, 40, 46, 65];
        var arrayKey = void 0;
        for (var i = 0; i <= array.length - 1; i++) {
          if (e.which === array[i]) {
            if (e.ctrlKey && e.which === 65) {
              return;
            } else if (e.which !== 65) {
              arrayKey = array[i];
              return;
            }
          }
        }
        if (element.length >= this.maxLength && this.maxLength !== -1 && e.which !== arrayKey) {
          e.preventDefault();
        }
      }
    };
    RichTextEditor2.prototype.bindEvents = function() {
      this.keyboardModule = new KeyboardEvents2(this.inputElement, {
        keyAction: this.keyDown.bind(this),
        keyConfigs: __assign({}, this.formatter.keyConfig, this.keyConfig),
        eventName: "keydown"
      });
      var formElement = closest(this.valueContainer, "form");
      if (formElement) {
        EventHandler.add(formElement, "reset", this.resetHandler, this);
      }
      EventHandler.add(this.inputElement, "keyup", this.keyUp, this);
      EventHandler.add(this.inputElement, "paste", this.onPaste, this);
      EventHandler.add(this.inputElement, Browser.touchEndEvent, debounce(this.mouseUp, 30), this);
      EventHandler.add(this.inputElement, Browser.touchStartEvent, this.mouseDownHandler, this);
      this.wireContextEvent();
      this.formatter.editorManager.observer.on(KEY_DOWN_HANDLER, this.editorKeyDown, this);
      this.element.ownerDocument.defaultView.addEventListener("resize", this.onResizeHandler, true);
      if (this.iframeSettings.enable) {
        EventHandler.add(this.inputElement, "focusin", this.focusHandler, this);
        EventHandler.add(this.inputElement, "focusout", this.blurHandler, this);
        EventHandler.add(this.inputElement.ownerDocument, "scroll", this.contentScrollHandler, this);
        EventHandler.add(this.inputElement.ownerDocument, Browser.touchStartEvent, this.onIframeMouseDown, this);
      }
      this.wireScrollElementsEvents();
    };
    RichTextEditor2.prototype.onIframeMouseDown = function(e) {
      this.isBlur = false;
      this.currentTarget = e.target;
      this.notify(iframeMouseDown, e);
    };
    RichTextEditor2.prototype.editorKeyDown = function(e) {
      switch (e.event.action) {
        case "copy":
          this.onCopy();
          break;
        case "cut":
          this.onCut();
          break;
        case "tab":
          if (this.iframeSettings.enable) {
            this.isBlur = true;
          }
          break;
      }
      if (e.callBack && (e.event.action === "copy" || e.event.action === "cut" || e.event.action === "delete")) {
        e.callBack({
          requestType: e.event.action,
          editorMode: "HTML",
          event: e.event
        });
      }
    };
    RichTextEditor2.prototype.unWireEvents = function() {
      this.element.removeEventListener("focusin", this.onFocusHandler, true);
      this.element.removeEventListener("focusout", this.onBlurHandler, true);
      this.off(contentChanged, this.contentChanged);
      this.off(resizeInitialized, this.updateResizeFlag);
      this.off(updateTbItemsStatus, this.updateStatus);
      if (this.readonly && this.enabled) {
        return;
      }
      this.unbindEvents();
    };
    RichTextEditor2.prototype.unbindEvents = function() {
      if (this.keyboardModule) {
        this.keyboardModule.destroy();
      }
      var formElement = closest(this.valueContainer, "form");
      if (formElement) {
        EventHandler.remove(formElement, "reset", this.resetHandler);
      }
      EventHandler.remove(this.inputElement, "keyup", this.keyUp);
      EventHandler.remove(this.inputElement, "paste", this.onPaste);
      EventHandler.remove(this.inputElement, Browser.touchEndEvent, debounce(this.mouseUp, 30));
      EventHandler.remove(this.inputElement, Browser.touchStartEvent, this.mouseDownHandler);
      this.unWireContextEvent();
      if (this.formatter) {
        this.formatter.editorManager.observer.off(KEY_DOWN_HANDLER, this.editorKeyDown);
      }
      this.element.ownerDocument.defaultView.removeEventListener("resize", this.onResizeHandler, true);
      if (this.iframeSettings.enable) {
        EventHandler.remove(this.inputElement, "focusin", this.focusHandler);
        EventHandler.remove(this.inputElement, "focusout", this.blurHandler);
        EventHandler.remove(this.inputElement.ownerDocument, "scroll", this.contentScrollHandler);
        EventHandler.remove(this.inputElement.ownerDocument, Browser.touchStartEvent, this.onIframeMouseDown);
      }
      this.unWireScrollElementsEvents();
    };
    __decorate16([
      Complex({}, ToolbarSettings2)
    ], RichTextEditor2.prototype, "toolbarSettings", void 0);
    __decorate16([
      Complex({}, QuickToolbarSettings)
    ], RichTextEditor2.prototype, "quickToolbarSettings", void 0);
    __decorate16([
      Complex({}, PasteCleanupSettings)
    ], RichTextEditor2.prototype, "pasteCleanupSettings", void 0);
    __decorate16([
      Complex({}, FormatPainterSettings)
    ], RichTextEditor2.prototype, "formatPainterSettings", void 0);
    __decorate16([
      Complex({}, EmojiSettings)
    ], RichTextEditor2.prototype, "emojiPickerSettings", void 0);
    __decorate16([
      Complex({}, IFrameSettings)
    ], RichTextEditor2.prototype, "iframeSettings", void 0);
    __decorate16([
      Complex({}, ImageSettings)
    ], RichTextEditor2.prototype, "insertImageSettings", void 0);
    __decorate16([
      Complex({}, AudioSettings)
    ], RichTextEditor2.prototype, "insertAudioSettings", void 0);
    __decorate16([
      Complex({}, VideoSettings)
    ], RichTextEditor2.prototype, "insertVideoSettings", void 0);
    __decorate16([
      Complex({}, TableSettings)
    ], RichTextEditor2.prototype, "tableSettings", void 0);
    __decorate16([
      Property(0)
    ], RichTextEditor2.prototype, "floatingToolbarOffset", void 0);
    __decorate16([
      Complex({}, InlineMode)
    ], RichTextEditor2.prototype, "inlineMode", void 0);
    __decorate16([
      Complex({}, FileManagerSettings)
    ], RichTextEditor2.prototype, "fileManagerSettings", void 0);
    __decorate16([
      Property("100%")
    ], RichTextEditor2.prototype, "width", void 0);
    __decorate16([
      Property(false)
    ], RichTextEditor2.prototype, "enablePersistence", void 0);
    __decorate16([
      Property(true)
    ], RichTextEditor2.prototype, "showTooltip", void 0);
    __decorate16([
      Property(false)
    ], RichTextEditor2.prototype, "enableResize", void 0);
    __decorate16([
      Property({})
    ], RichTextEditor2.prototype, "htmlAttributes", void 0);
    __decorate16([
      Property(null)
    ], RichTextEditor2.prototype, "placeholder", void 0);
    __decorate16([
      Property(false)
    ], RichTextEditor2.prototype, "autoSaveOnIdle", void 0);
    __decorate16([
      Property(false)
    ], RichTextEditor2.prototype, "readonly", void 0);
    __decorate16([
      Property(true)
    ], RichTextEditor2.prototype, "enabled", void 0);
    __decorate16([
      Property(true)
    ], RichTextEditor2.prototype, "enableHtmlSanitizer", void 0);
    __decorate16([
      Property(false)
    ], RichTextEditor2.prototype, "enableHtmlEncode", void 0);
    __decorate16([
      Property(false)
    ], RichTextEditor2.prototype, "enableXhtml", void 0);
    __decorate16([
      Property("auto")
    ], RichTextEditor2.prototype, "height", void 0);
    __decorate16([
      Property(null)
    ], RichTextEditor2.prototype, "cssClass", void 0);
    __decorate16([
      Property(null)
    ], RichTextEditor2.prototype, "value", void 0);
    __decorate16([
      Property("P")
    ], RichTextEditor2.prototype, "enterKey", void 0);
    __decorate16([
      Property("BR")
    ], RichTextEditor2.prototype, "shiftEnterKey", void 0);
    __decorate16([
      Property(30)
    ], RichTextEditor2.prototype, "undoRedoSteps", void 0);
    __decorate16([
      Property(300)
    ], RichTextEditor2.prototype, "undoRedoTimer", void 0);
    __decorate16([
      Property("HTML")
    ], RichTextEditor2.prototype, "editorMode", void 0);
    __decorate16([
      Property(null)
    ], RichTextEditor2.prototype, "keyConfig", void 0);
    __decorate16([
      Property(false)
    ], RichTextEditor2.prototype, "showCharCount", void 0);
    __decorate16([
      Property(false)
    ], RichTextEditor2.prototype, "enableTabKey", void 0);
    __decorate16([
      Property(false)
    ], RichTextEditor2.prototype, "enableAutoUrl", void 0);
    __decorate16([
      Property(-1)
    ], RichTextEditor2.prototype, "maxLength", void 0);
    __decorate16([
      Complex({}, Format)
    ], RichTextEditor2.prototype, "format", void 0);
    __decorate16([
      Complex({}, NumberFormatList)
    ], RichTextEditor2.prototype, "numberFormatList", void 0);
    __decorate16([
      Complex({}, BulletFormatList)
    ], RichTextEditor2.prototype, "bulletFormatList", void 0);
    __decorate16([
      Complex({}, FontFamily)
    ], RichTextEditor2.prototype, "fontFamily", void 0);
    __decorate16([
      Complex({}, FontSize)
    ], RichTextEditor2.prototype, "fontSize", void 0);
    __decorate16([
      Complex({}, FontColor)
    ], RichTextEditor2.prototype, "fontColor", void 0);
    __decorate16([
      Complex({}, BackgroundColor)
    ], RichTextEditor2.prototype, "backgroundColor", void 0);
    __decorate16([
      Property(null)
    ], RichTextEditor2.prototype, "valueTemplate", void 0);
    __decorate16([
      Property(1e4)
    ], RichTextEditor2.prototype, "saveInterval", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "actionBegin", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "actionComplete", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "beforeDialogOpen", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "dialogOpen", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "beforeDialogClose", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "dialogClose", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "beforeQuickToolbarOpen", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "quickToolbarOpen", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "quickToolbarClose", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "toolbarStatusUpdate", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "updatedToolbarStatus", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "imageSelected", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "beforeImageUpload", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "imageUploading", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "imageUploadSuccess", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "imageUploadFailed", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "imageRemoving", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "afterImageDelete", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "fileSelected", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "beforeFileUpload", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "fileUploading", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "fileUploadSuccess", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "fileUploadFailed", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "fileRemoving", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "afterMediaDelete", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "created", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "destroyed", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "beforeSanitizeHtml", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "blur", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "toolbarClick", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "focus", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "change", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "resizing", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "resizeStart", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "resizeStop", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "beforePasteCleanup", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "afterPasteCleanup", void 0);
    __decorate16([
      Event()
    ], RichTextEditor2.prototype, "beforeImageDrop", void 0);
    __decorate16([
      Property(null)
    ], RichTextEditor2.prototype, "formatter", void 0);
    RichTextEditor2 = __decorate16([
      NotifyPropertyChanges
    ], RichTextEditor2);
    return RichTextEditor2;
  }(Component)
);

// node_modules/@syncfusion/ej2-react-richtexteditor/src/rich-text-editor/richtexteditor.component.js
var __extends20 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var RichTextEditorComponent = (
  /** @class */
  function(_super) {
    __extends20(RichTextEditorComponent2, _super);
    function RichTextEditorComponent2(props) {
      var _this = _super.call(this, props) || this;
      _this.initRenderCalled = false;
      _this.checkInjectedModules = true;
      _this.statelessTemplateProps = ["valueTemplate"];
      _this.templateProps = null;
      _this.immediateRender = false;
      _this.portals = [];
      return _this;
    }
    RichTextEditorComponent2.prototype.render = function() {
      if ((this.element && !this.initRenderCalled || this.refreshing) && !this.isReactForeceUpdate) {
        _super.prototype.render.call(this);
        this.initRenderCalled = true;
      } else {
        return React.createElement("div", this.getDefaultAttributes(), [].concat(this.props.children, this.portals));
      }
    };
    return RichTextEditorComponent2;
  }(RichTextEditor)
);
applyMixins(RichTextEditorComponent, [ComponentBase, React.Component]);
export {
  ACTION,
  ALIGNMENT_TYPE,
  AUDIO,
  Alignments,
  Audio,
  AudioCommand,
  BLOCK_TAGS,
  BaseQuickToolbar,
  BaseToolbar,
  CLASS_AUDIO,
  CLASS_AUDIO_BREAK,
  CLASS_AUDIO_FOCUS,
  CLASS_AUDIO_INLINE,
  CLASS_AUDIO_WRAP,
  CLASS_CAPTION,
  CLASS_CAPTION_INLINE,
  CLASS_CLICK_ELEM,
  CLASS_EMBED_VIDEO_WRAP,
  CLASS_IMAGE_BREAK,
  CLASS_IMAGE_CENTER,
  CLASS_IMAGE_INLINE,
  CLASS_IMAGE_LEFT,
  CLASS_IMAGE_RIGHT,
  CLASS_RTE_CAPTION,
  CLASS_VIDEO,
  CLASS_VIDEO_BREAK,
  CLASS_VIDEO_CENTER,
  CLASS_VIDEO_CLICK_ELEM,
  CLASS_VIDEO_FOCUS,
  CLASS_VIDEO_INLINE,
  CLASS_VIDEO_LEFT,
  CLASS_VIDEO_RIGHT,
  CLASS_VIDEO_WRAP,
  CLEAR_COMMAND,
  CLEAR_TYPE,
  CLS_ACTIVE,
  CLS_ALIGN_TB_BTN,
  CLS_AUDIOBREAK,
  CLS_AUDIOINLINE,
  CLS_AUDIOWRAP,
  CLS_AUD_FOCUS,
  CLS_BACK,
  CLS_BACKGROUND_COLOR_DROPDOWN,
  CLS_BACKGROUND_COLOR_PICKER,
  CLS_BACKGROUND_COLOR_TARGET,
  CLS_BULLETFORMATLIST_TB_BTN,
  CLS_CAPINLINE,
  CLS_CAPTION,
  CLS_CLICKELEM,
  CLS_COLOR_CONTENT,
  CLS_COLOR_PALETTE,
  CLS_CONTENT,
  CLS_COUNT,
  CLS_CUSTOM_TILE,
  CLS_DISABLED,
  CLS_DROPAREA,
  CLS_DROPDOWN_BTN,
  CLS_DROPDOWN_ICONS,
  CLS_DROPDOWN_ITEMS,
  CLS_DROPDOWN_POPUP,
  CLS_ERROR,
  CLS_EXPAND_OPEN,
  CLS_FOCUS,
  CLS_FONT_COLOR_DROPDOWN,
  CLS_FONT_COLOR_PICKER,
  CLS_FONT_COLOR_TARGET,
  CLS_FONT_NAME_TB_BTN,
  CLS_FONT_SIZE_TB_BTN,
  CLS_FORMATS_TB_BTN,
  CLS_FULL_SCREEN,
  CLS_HIDE,
  CLS_HR_SEPARATOR,
  CLS_ICONS,
  CLS_IMAGE_POP,
  CLS_IMGBREAK,
  CLS_IMGCENTER,
  CLS_IMGINLINE,
  CLS_IMGLEFT,
  CLS_IMGRIGHT,
  CLS_IMG_FOCUS,
  CLS_IMG_INNER,
  CLS_IMG_RESIZE,
  CLS_INLINE,
  CLS_INLINE_DROPDOWN,
  CLS_INLINE_POP,
  CLS_LIST_PRIMARY_CONTENT,
  CLS_MAXIMIZE,
  CLS_MINIMIZE,
  CLS_NOCOLOR_ITEM,
  CLS_NUMBERFORMATLIST_TB_BTN,
  CLS_POP,
  CLS_POPUP,
  CLS_POPUP_OPEN,
  CLS_QUICK_DROPDOWN,
  CLS_QUICK_POP,
  CLS_QUICK_TB,
  CLS_RESIZE,
  CLS_RM_WHITE_SPACE,
  CLS_RTE,
  CLS_RTE_CAPTION,
  CLS_RTE_CONTENT,
  CLS_RTE_DIALOG_MIN_HEIGHT,
  CLS_RTE_DIALOG_UPLOAD,
  CLS_RTE_DRAG_IMAGE,
  CLS_RTE_ELEMENTS,
  CLS_RTE_EXPAND_TB,
  CLS_RTE_FIXED_TB_EXPAND,
  CLS_RTE_HIDDEN,
  CLS_RTE_IMAGE,
  CLS_RTE_PASTE_CANCEL,
  CLS_RTE_PASTE_KEEP_FORMAT,
  CLS_RTE_PASTE_OK,
  CLS_RTE_PASTE_PLAIN_FORMAT,
  CLS_RTE_PASTE_REMOVE_FORMAT,
  CLS_RTE_READONLY,
  CLS_RTE_RES_CNT,
  CLS_RTE_RES_EAST,
  CLS_RTE_RES_HANDLE,
  CLS_RTE_RES_WEST,
  CLS_RTE_TABLE_RESIZE,
  CLS_RTE_TB_ENABLED,
  CLS_RTE_UPLOAD_POPUP,
  CLS_RTL,
  CLS_SCRIPT_SHEET,
  CLS_SEPARATOR,
  CLS_SHOW,
  CLS_STYLE_SHEET,
  CLS_TABLE,
  CLS_TABLE_BORDER,
  CLS_TABLE_SEL,
  CLS_TB_ABS_FLOAT,
  CLS_TB_ALT_BOR,
  CLS_TB_BOX_RES,
  CLS_TB_BTN,
  CLS_TB_COL_RES,
  CLS_TB_DASH_BOR,
  CLS_TB_EXTENDED,
  CLS_TB_FIXED,
  CLS_TB_FLOAT,
  CLS_TB_INLINE,
  CLS_TB_IOS_FIX,
  CLS_TB_ITEM,
  CLS_TB_ROW_RES,
  CLS_TB_STATIC,
  CLS_TB_WRAP,
  CLS_TOOLBAR,
  CLS_UPLOAD_FILES,
  CLS_VIDEOBREAK,
  CLS_VIDEOINLINE,
  CLS_VIDEOWRAP,
  CLS_VID_CLICK_ELEM,
  CLS_VID_FOCUS,
  CLS_VISIBLE,
  CLS_WARNING,
  ClearFormat,
  ClearFormatExec,
  ColorPickerInput,
  ContentRender,
  Count,
  DEFAULT_TAG,
  DELETECOLUMN,
  DELETEROW,
  DOMNode,
  DialogRenderer,
  DialogType,
  DropDownButtons,
  EMOJI_PICKER_ACTIONS,
  EditorManager,
  EmojiPicker,
  EmojiPickerAction,
  ExecCommandCallBack,
  FORMAT_PAINTER_ACTIONS,
  FORMAT_TYPE,
  FileManager2 as FileManager,
  FormatPainter,
  FormatPainterActions,
  Formats,
  Formatter,
  FullScreen,
  HTMLFormatter,
  HtmlEditor,
  HtmlToolbarStatus,
  IGNORE_BLOCK_TAGS,
  IMAGE,
  INDENT_TYPE,
  INSERTHTML_TYPE,
  INSERT_COLUMN,
  INSERT_ROW,
  INSERT_TEXT_COMMAND,
  INSERT_TEXT_TYPE,
  IframeContentRender,
  Image,
  ImageCommand,
  Indents,
  Inject,
  InsertHtml,
  InsertHtmlExec,
  InsertMethods,
  InsertTextExec,
  IsFormatted,
  KEY_DOWN,
  KEY_DOWN_HANDLER,
  KEY_UP,
  KEY_UP_HANDLER,
  KeyboardEvents2 as KeyboardEvents,
  LINK,
  LINK_COMMAND,
  LISTS_COMMAND,
  LIST_TYPE,
  Link,
  LinkCommand,
  Lists,
  MDFormats,
  MDLink,
  MDLists,
  MDSelectionFormats,
  MDTable,
  MD_TABLE,
  MODEL_CHANGED,
  MODEL_CHANGED_PLUGIN,
  MS_WORD_CLEANUP,
  MS_WORD_CLEANUP_PLUGIN,
  MarkdownEditor,
  MarkdownFormatter,
  MarkdownParser,
  MarkdownRender,
  MarkdownSelection,
  MarkdownToolbarStatus,
  MsWordPaste,
  NodeCutter,
  NodeSelection,
  ON_BEGIN,
  PasteCleanup,
  PopupRenderer,
  QuickToolbar,
  REMOVETABLE,
  Render,
  RenderType,
  RendererFactory,
  Resize2 as Resize,
  RichTextEditor,
  RichTextEditorComponent,
  SELECTION_TYPE,
  SELF_CLOSING_TAGS,
  SPACE_ACTION,
  SelectionBasedExec,
  SelectionCommands,
  ServiceLocator,
  TABLE,
  TABLEHEADER,
  TABLE_BLOCK_TAGS,
  TABLE_HORIZONTAL_SPLIT,
  TABLE_MERGE,
  TABLE_MOVE,
  TABLE_VERTICAL_ALIGN,
  TABLE_VERTICAL_SPLIT,
  Table,
  TableCommand,
  Toolbar2 as Toolbar,
  ToolbarAction,
  ToolbarRenderer,
  ToolbarStatus,
  ToolbarType,
  UndoRedoCommands,
  UndoRedoManager,
  VIDEO,
  Video,
  VideoCommand,
  ViewSource,
  XhtmlValidation,
  actionBegin,
  actionComplete,
  actionSuccess,
  afterImageDelete,
  afterMediaDelete,
  afterPasteCleanup,
  audioDelete,
  audioToolbarAction,
  beforeDialogClose,
  beforeDialogOpen,
  beforeDropDownItemRender,
  beforeDropDownOpen,
  beforeFileUpload,
  beforeImageDrop,
  beforeImageUpload,
  beforePasteCleanup,
  beforeQuickToolbarOpen,
  bindCssClass,
  bindOnEnd,
  blockEmptyNodes,
  checkUndo,
  clearDialogObj,
  closeAudioDialog,
  closeImageDialog,
  closeLinkDialog,
  closeTableDialog,
  closeVideoDialog,
  colorPickerChanged,
  contentBlur,
  contentChanged,
  contentFocus,
  contentscroll,
  convertToBlob,
  count,
  createTable,
  created,
  decode,
  destroy,
  destroyColorPicker,
  destroyed,
  dialogClose,
  dialogOpen,
  disableFullScreen,
  dispatchEvent,
  docClick,
  drop,
  dropDownSelect,
  dynamicModule,
  editAreaClick,
  editLink,
  emojiPicker,
  enableFullScreen,
  enterHandler,
  execCommandCallBack,
  executeGroup,
  expandPopupClick,
  fileRemoving,
  fileSelected,
  fileUploadFailed,
  fileUploadSuccess,
  fileUploading,
  focusChange,
  formatPainterClick,
  formatPainterDoubleClick,
  getCollection,
  getDefaultValue,
  getDropDownValue,
  getEditValue,
  getFormattedFontSize,
  getIndex,
  getLocaleFontFormat,
  getSelectedHtml,
  getTBarItemsIndex,
  getTextNodesUnder,
  getTooltipText,
  hasClass,
  htmlKeyConfig,
  htmlToolbarClick,
  iframeMouseDown,
  imageAlt,
  imageBreak,
  imageCaption,
  imageCenter,
  imageDelete,
  imageInline,
  imageLeft,
  imageLink,
  imageRemoving,
  imageRight,
  imageSelected,
  imageSize,
  imageToolbarAction,
  imageUploadFailed,
  imageUploadSuccess,
  imageUploading,
  imgModule,
  initialEnd,
  initialLoad,
  inlineEmptyNodes,
  insertAudio,
  insertCompleted,
  insertImage,
  insertLink,
  insertVideo,
  isEditableValueEmpty,
  isIDevice,
  keyDown,
  keyUp,
  linkToolbarAction,
  listConversionFilters,
  load,
  markdownFormatTags,
  markdownKeyConfig,
  markdownListsTags,
  markdownSelectionTags,
  markdownToolbarClick,
  markerClassName,
  maximizeMinimizeClick,
  modelChanged,
  moduleDestroy,
  mouseDown,
  mouseUp,
  onResize,
  openLink,
  pageYOffset,
  parseHtml,
  paste,
  pasteClean,
  pasteCleanupGroupingTags,
  popupHide,
  quickToolbarClose,
  quickToolbarOpen,
  readOnlyMode,
  redo,
  refreshBegin,
  renderColorPicker,
  renderFileManager,
  renderInlineToolbar,
  resizeInitialized,
  resizeStart,
  resizeStop,
  rtlMode,
  sanitizeHelper,
  scroll,
  selectAll2 as selectAll,
  selectRange,
  selectionCommand,
  selectionRestore,
  selectionSave,
  selfClosingTags,
  setAttributes,
  setToolbarStatus,
  showAudioDialog,
  showImageDialog,
  showLinkDialog,
  showTableDialog,
  showVideoDialog,
  sourceCode,
  sourceCodeMouseDown,
  statusCollection,
  tableColorPickerChanged,
  tableModulekeyUp,
  tableToolbarAction,
  tableclass,
  toObjectLowerCase,
  toolbarClick,
  toolbarCreated,
  toolbarOpen,
  toolbarRefresh,
  toolbarRenderComplete,
  toolbarUpdated,
  unLink,
  undo,
  updateDropDownFontFormatLocale,
  updateSource,
  updateTbItemsStatus,
  updateTextNode,
  updateToolbarItem,
  updateUndoRedoStatus,
  updatedToolbarStatus,
  videoDelete,
  videoSize,
  videoToolbarAction,
  windowResize,
  xhtmlValidation
};
//# sourceMappingURL=@syncfusion_ej2-react-richtexteditor.js.map
